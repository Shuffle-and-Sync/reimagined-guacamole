# Optimized Cloud Build configuration for backend deployment
# Improvements:
# - Docker layer caching for faster builds
# - Parallel image pushes
# - Optimized machine type (E2_HIGHCPU_4 instead of 8)
# - Reduced timeout (15 min instead of 20)

steps:
  # Pull previous image for cache
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker pull gcr.io/$PROJECT_ID/shuffle-and-sync-backend:latest || exit 0
    id: 'pull-cache'

  # Build with cache from previous image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '--cache-from=gcr.io/$PROJECT_ID/shuffle-and-sync-backend:latest'
      - '-t'
      - 'gcr.io/$PROJECT_ID/shuffle-and-sync-backend:${_IMAGE_TAG}'
      - '-t'
      - 'gcr.io/$PROJECT_ID/shuffle-and-sync-backend:latest'
      - '-f'
      - 'Dockerfile.optimized'
      - '.'
    id: 'build-backend'
    waitFor: ['pull-cache']

  # Push tagged image (runs in parallel with latest push)
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/shuffle-and-sync-backend:${_IMAGE_TAG}'
    id: 'push-backend-tag'
    waitFor: ['build-backend']

  # Push latest tag (runs in parallel with tagged push)
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/shuffle-and-sync-backend:latest'
    id: 'push-backend-latest'
    waitFor: ['build-backend']

  # Deploy to Cloud Run (waits for both pushes)
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image'
      - 'gcr.io/$PROJECT_ID/shuffle-and-sync-backend:${_IMAGE_TAG}'
      - '--platform'
      - 'managed'
      - '--region'
      - '${_REGION}'
      - '--allow-unauthenticated'
      - '--port'
      - '8080'
      - '--memory'
      - '1Gi'
      - '--cpu'
      - '1'
      - '--min-instances'
      - '0'
      - '--max-instances'
      - '10'
      - '--timeout'
      - '300'
      - '--set-env-vars'
      - 'NODE_ENV=production'
      - '--no-cpu-throttling'
      # Enable startup CPU boost for faster cold starts
      - '--startup-cpu-boost'
    id: 'deploy-backend'
    waitFor: ['push-backend-tag', 'push-backend-latest']

# Reduced timeout from 1200s (20 min) to 900s (15 min)
timeout: 900s

# Configure build options
options:
  # Reduced from E2_HIGHCPU_8 to E2_HIGHCPU_4 (cost optimization)
  machineType: 'E2_HIGHCPU_4'
  logging: CLOUD_LOGGING_ONLY
  # Enable dynamic substitutions for better flexibility
  substitution_option: 'ALLOW_LOOSE'
  dynamic_substitutions: true

# Substitutions for variables
# These provide default values that can be overridden with --substitutions flag
# Example: gcloud builds submit --config cloudbuild.optimized.yaml --substitutions=_REGION=us-east1,_IMAGE_TAG=v1.2.3
substitutions:
  _REGION: us-central1
  _SERVICE_NAME: shuffle-and-sync-backend
  _IMAGE_TAG: $BUILD_ID

# Images to be stored in Container Registry
images:
  - 'gcr.io/$PROJECT_ID/shuffle-and-sync-backend:${_IMAGE_TAG}'
  - 'gcr.io/$PROJECT_ID/shuffle-and-sync-backend:latest'

# Note: To use this configuration, run:
# gcloud builds submit --config cloudbuild.optimized.yaml
#
# Expected improvements:
# - Build time: 30-40% faster due to layer caching
# - Cost: ~40% reduction due to smaller machine type
# - Parallel pushes save 30-60 seconds
