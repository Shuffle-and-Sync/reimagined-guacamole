
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model LegacySession
 * 
 */
export type LegacySession = $Result.DefaultSelection<Prisma.$LegacySessionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Community
 * 
 */
export type Community = $Result.DefaultSelection<Prisma.$CommunityPayload>
/**
 * Model UserCommunity
 * 
 */
export type UserCommunity = $Result.DefaultSelection<Prisma.$UserCommunityPayload>
/**
 * Model ThemePreference
 * 
 */
export type ThemePreference = $Result.DefaultSelection<Prisma.$ThemePreferencePayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model EventAttendee
 * 
 */
export type EventAttendee = $Result.DefaultSelection<Prisma.$EventAttendeePayload>
/**
 * Model Tournament
 * 
 */
export type Tournament = $Result.DefaultSelection<Prisma.$TournamentPayload>
/**
 * Model TournamentParticipant
 * 
 */
export type TournamentParticipant = $Result.DefaultSelection<Prisma.$TournamentParticipantPayload>
/**
 * Model TournamentFormat
 * 
 */
export type TournamentFormat = $Result.DefaultSelection<Prisma.$TournamentFormatPayload>
/**
 * Model TournamentRound
 * 
 */
export type TournamentRound = $Result.DefaultSelection<Prisma.$TournamentRoundPayload>
/**
 * Model TournamentMatch
 * 
 */
export type TournamentMatch = $Result.DefaultSelection<Prisma.$TournamentMatchPayload>
/**
 * Model MatchResult
 * 
 */
export type MatchResult = $Result.DefaultSelection<Prisma.$MatchResultPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model GameSession
 * 
 */
export type GameSession = $Result.DefaultSelection<Prisma.$GameSessionPayload>
/**
 * Model UserSocialLink
 * 
 */
export type UserSocialLink = $Result.DefaultSelection<Prisma.$UserSocialLinkPayload>
/**
 * Model UserGamingProfile
 * 
 */
export type UserGamingProfile = $Result.DefaultSelection<Prisma.$UserGamingProfilePayload>
/**
 * Model Friendship
 * 
 */
export type Friendship = $Result.DefaultSelection<Prisma.$FriendshipPayload>
/**
 * Model UserActivity
 * 
 */
export type UserActivity = $Result.DefaultSelection<Prisma.$UserActivityPayload>
/**
 * Model UserSettings
 * 
 */
export type UserSettings = $Result.DefaultSelection<Prisma.$UserSettingsPayload>
/**
 * Model MatchmakingPreference
 * 
 */
export type MatchmakingPreference = $Result.DefaultSelection<Prisma.$MatchmakingPreferencePayload>
/**
 * Model ForumPost
 * 
 */
export type ForumPost = $Result.DefaultSelection<Prisma.$ForumPostPayload>
/**
 * Model ForumReply
 * 
 */
export type ForumReply = $Result.DefaultSelection<Prisma.$ForumReplyPayload>
/**
 * Model ForumPostLike
 * 
 */
export type ForumPostLike = $Result.DefaultSelection<Prisma.$ForumPostLikePayload>
/**
 * Model ForumReplyLike
 * 
 */
export type ForumReplyLike = $Result.DefaultSelection<Prisma.$ForumReplyLikePayload>
/**
 * Model PasswordResetToken
 * 
 */
export type PasswordResetToken = $Result.DefaultSelection<Prisma.$PasswordResetTokenPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.legacySession`: Exposes CRUD operations for the **LegacySession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LegacySessions
    * const legacySessions = await prisma.legacySession.findMany()
    * ```
    */
  get legacySession(): Prisma.LegacySessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.community`: Exposes CRUD operations for the **Community** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Communities
    * const communities = await prisma.community.findMany()
    * ```
    */
  get community(): Prisma.CommunityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userCommunity`: Exposes CRUD operations for the **UserCommunity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserCommunities
    * const userCommunities = await prisma.userCommunity.findMany()
    * ```
    */
  get userCommunity(): Prisma.UserCommunityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.themePreference`: Exposes CRUD operations for the **ThemePreference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ThemePreferences
    * const themePreferences = await prisma.themePreference.findMany()
    * ```
    */
  get themePreference(): Prisma.ThemePreferenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eventAttendee`: Exposes CRUD operations for the **EventAttendee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventAttendees
    * const eventAttendees = await prisma.eventAttendee.findMany()
    * ```
    */
  get eventAttendee(): Prisma.EventAttendeeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tournament`: Exposes CRUD operations for the **Tournament** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tournaments
    * const tournaments = await prisma.tournament.findMany()
    * ```
    */
  get tournament(): Prisma.TournamentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tournamentParticipant`: Exposes CRUD operations for the **TournamentParticipant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TournamentParticipants
    * const tournamentParticipants = await prisma.tournamentParticipant.findMany()
    * ```
    */
  get tournamentParticipant(): Prisma.TournamentParticipantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tournamentFormat`: Exposes CRUD operations for the **TournamentFormat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TournamentFormats
    * const tournamentFormats = await prisma.tournamentFormat.findMany()
    * ```
    */
  get tournamentFormat(): Prisma.TournamentFormatDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tournamentRound`: Exposes CRUD operations for the **TournamentRound** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TournamentRounds
    * const tournamentRounds = await prisma.tournamentRound.findMany()
    * ```
    */
  get tournamentRound(): Prisma.TournamentRoundDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tournamentMatch`: Exposes CRUD operations for the **TournamentMatch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TournamentMatches
    * const tournamentMatches = await prisma.tournamentMatch.findMany()
    * ```
    */
  get tournamentMatch(): Prisma.TournamentMatchDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.matchResult`: Exposes CRUD operations for the **MatchResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MatchResults
    * const matchResults = await prisma.matchResult.findMany()
    * ```
    */
  get matchResult(): Prisma.MatchResultDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameSession`: Exposes CRUD operations for the **GameSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameSessions
    * const gameSessions = await prisma.gameSession.findMany()
    * ```
    */
  get gameSession(): Prisma.GameSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSocialLink`: Exposes CRUD operations for the **UserSocialLink** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSocialLinks
    * const userSocialLinks = await prisma.userSocialLink.findMany()
    * ```
    */
  get userSocialLink(): Prisma.UserSocialLinkDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userGamingProfile`: Exposes CRUD operations for the **UserGamingProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserGamingProfiles
    * const userGamingProfiles = await prisma.userGamingProfile.findMany()
    * ```
    */
  get userGamingProfile(): Prisma.UserGamingProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.friendship`: Exposes CRUD operations for the **Friendship** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Friendships
    * const friendships = await prisma.friendship.findMany()
    * ```
    */
  get friendship(): Prisma.FriendshipDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userActivity`: Exposes CRUD operations for the **UserActivity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserActivities
    * const userActivities = await prisma.userActivity.findMany()
    * ```
    */
  get userActivity(): Prisma.UserActivityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSettings`: Exposes CRUD operations for the **UserSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSettings
    * const userSettings = await prisma.userSettings.findMany()
    * ```
    */
  get userSettings(): Prisma.UserSettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.matchmakingPreference`: Exposes CRUD operations for the **MatchmakingPreference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MatchmakingPreferences
    * const matchmakingPreferences = await prisma.matchmakingPreference.findMany()
    * ```
    */
  get matchmakingPreference(): Prisma.MatchmakingPreferenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.forumPost`: Exposes CRUD operations for the **ForumPost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ForumPosts
    * const forumPosts = await prisma.forumPost.findMany()
    * ```
    */
  get forumPost(): Prisma.ForumPostDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.forumReply`: Exposes CRUD operations for the **ForumReply** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ForumReplies
    * const forumReplies = await prisma.forumReply.findMany()
    * ```
    */
  get forumReply(): Prisma.ForumReplyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.forumPostLike`: Exposes CRUD operations for the **ForumPostLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ForumPostLikes
    * const forumPostLikes = await prisma.forumPostLike.findMany()
    * ```
    */
  get forumPostLike(): Prisma.ForumPostLikeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.forumReplyLike`: Exposes CRUD operations for the **ForumReplyLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ForumReplyLikes
    * const forumReplyLikes = await prisma.forumReplyLike.findMany()
    * ```
    */
  get forumReplyLike(): Prisma.ForumReplyLikeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.passwordResetToken`: Exposes CRUD operations for the **PasswordResetToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordResetTokens
    * const passwordResetTokens = await prisma.passwordResetToken.findMany()
    * ```
    */
  get passwordResetToken(): Prisma.PasswordResetTokenDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Account: 'Account',
    Session: 'Session',
    VerificationToken: 'VerificationToken',
    LegacySession: 'LegacySession',
    User: 'User',
    Community: 'Community',
    UserCommunity: 'UserCommunity',
    ThemePreference: 'ThemePreference',
    Event: 'Event',
    EventAttendee: 'EventAttendee',
    Tournament: 'Tournament',
    TournamentParticipant: 'TournamentParticipant',
    TournamentFormat: 'TournamentFormat',
    TournamentRound: 'TournamentRound',
    TournamentMatch: 'TournamentMatch',
    MatchResult: 'MatchResult',
    Notification: 'Notification',
    Message: 'Message',
    GameSession: 'GameSession',
    UserSocialLink: 'UserSocialLink',
    UserGamingProfile: 'UserGamingProfile',
    Friendship: 'Friendship',
    UserActivity: 'UserActivity',
    UserSettings: 'UserSettings',
    MatchmakingPreference: 'MatchmakingPreference',
    ForumPost: 'ForumPost',
    ForumReply: 'ForumReply',
    ForumPostLike: 'ForumPostLike',
    ForumReplyLike: 'ForumReplyLike',
    PasswordResetToken: 'PasswordResetToken'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "account" | "session" | "verificationToken" | "legacySession" | "user" | "community" | "userCommunity" | "themePreference" | "event" | "eventAttendee" | "tournament" | "tournamentParticipant" | "tournamentFormat" | "tournamentRound" | "tournamentMatch" | "matchResult" | "notification" | "message" | "gameSession" | "userSocialLink" | "userGamingProfile" | "friendship" | "userActivity" | "userSettings" | "matchmakingPreference" | "forumPost" | "forumReply" | "forumPostLike" | "forumReplyLike" | "passwordResetToken"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      LegacySession: {
        payload: Prisma.$LegacySessionPayload<ExtArgs>
        fields: Prisma.LegacySessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LegacySessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegacySessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LegacySessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegacySessionPayload>
          }
          findFirst: {
            args: Prisma.LegacySessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegacySessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LegacySessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegacySessionPayload>
          }
          findMany: {
            args: Prisma.LegacySessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegacySessionPayload>[]
          }
          create: {
            args: Prisma.LegacySessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegacySessionPayload>
          }
          createMany: {
            args: Prisma.LegacySessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LegacySessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegacySessionPayload>[]
          }
          delete: {
            args: Prisma.LegacySessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegacySessionPayload>
          }
          update: {
            args: Prisma.LegacySessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegacySessionPayload>
          }
          deleteMany: {
            args: Prisma.LegacySessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LegacySessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LegacySessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegacySessionPayload>[]
          }
          upsert: {
            args: Prisma.LegacySessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LegacySessionPayload>
          }
          aggregate: {
            args: Prisma.LegacySessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLegacySession>
          }
          groupBy: {
            args: Prisma.LegacySessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<LegacySessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.LegacySessionCountArgs<ExtArgs>
            result: $Utils.Optional<LegacySessionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Community: {
        payload: Prisma.$CommunityPayload<ExtArgs>
        fields: Prisma.CommunityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommunityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommunityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          findFirst: {
            args: Prisma.CommunityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommunityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          findMany: {
            args: Prisma.CommunityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>[]
          }
          create: {
            args: Prisma.CommunityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          createMany: {
            args: Prisma.CommunityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommunityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>[]
          }
          delete: {
            args: Prisma.CommunityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          update: {
            args: Prisma.CommunityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          deleteMany: {
            args: Prisma.CommunityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommunityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommunityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>[]
          }
          upsert: {
            args: Prisma.CommunityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          aggregate: {
            args: Prisma.CommunityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommunity>
          }
          groupBy: {
            args: Prisma.CommunityGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommunityGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommunityCountArgs<ExtArgs>
            result: $Utils.Optional<CommunityCountAggregateOutputType> | number
          }
        }
      }
      UserCommunity: {
        payload: Prisma.$UserCommunityPayload<ExtArgs>
        fields: Prisma.UserCommunityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserCommunityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommunityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserCommunityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommunityPayload>
          }
          findFirst: {
            args: Prisma.UserCommunityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommunityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserCommunityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommunityPayload>
          }
          findMany: {
            args: Prisma.UserCommunityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommunityPayload>[]
          }
          create: {
            args: Prisma.UserCommunityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommunityPayload>
          }
          createMany: {
            args: Prisma.UserCommunityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCommunityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommunityPayload>[]
          }
          delete: {
            args: Prisma.UserCommunityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommunityPayload>
          }
          update: {
            args: Prisma.UserCommunityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommunityPayload>
          }
          deleteMany: {
            args: Prisma.UserCommunityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserCommunityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserCommunityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommunityPayload>[]
          }
          upsert: {
            args: Prisma.UserCommunityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCommunityPayload>
          }
          aggregate: {
            args: Prisma.UserCommunityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserCommunity>
          }
          groupBy: {
            args: Prisma.UserCommunityGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserCommunityGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCommunityCountArgs<ExtArgs>
            result: $Utils.Optional<UserCommunityCountAggregateOutputType> | number
          }
        }
      }
      ThemePreference: {
        payload: Prisma.$ThemePreferencePayload<ExtArgs>
        fields: Prisma.ThemePreferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThemePreferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePreferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThemePreferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePreferencePayload>
          }
          findFirst: {
            args: Prisma.ThemePreferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePreferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThemePreferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePreferencePayload>
          }
          findMany: {
            args: Prisma.ThemePreferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePreferencePayload>[]
          }
          create: {
            args: Prisma.ThemePreferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePreferencePayload>
          }
          createMany: {
            args: Prisma.ThemePreferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ThemePreferenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePreferencePayload>[]
          }
          delete: {
            args: Prisma.ThemePreferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePreferencePayload>
          }
          update: {
            args: Prisma.ThemePreferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePreferencePayload>
          }
          deleteMany: {
            args: Prisma.ThemePreferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ThemePreferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ThemePreferenceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePreferencePayload>[]
          }
          upsert: {
            args: Prisma.ThemePreferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePreferencePayload>
          }
          aggregate: {
            args: Prisma.ThemePreferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateThemePreference>
          }
          groupBy: {
            args: Prisma.ThemePreferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ThemePreferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ThemePreferenceCountArgs<ExtArgs>
            result: $Utils.Optional<ThemePreferenceCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      EventAttendee: {
        payload: Prisma.$EventAttendeePayload<ExtArgs>
        fields: Prisma.EventAttendeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventAttendeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventAttendeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload>
          }
          findFirst: {
            args: Prisma.EventAttendeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventAttendeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload>
          }
          findMany: {
            args: Prisma.EventAttendeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload>[]
          }
          create: {
            args: Prisma.EventAttendeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload>
          }
          createMany: {
            args: Prisma.EventAttendeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventAttendeeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload>[]
          }
          delete: {
            args: Prisma.EventAttendeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload>
          }
          update: {
            args: Prisma.EventAttendeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload>
          }
          deleteMany: {
            args: Prisma.EventAttendeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventAttendeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventAttendeeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload>[]
          }
          upsert: {
            args: Prisma.EventAttendeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventAttendeePayload>
          }
          aggregate: {
            args: Prisma.EventAttendeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventAttendee>
          }
          groupBy: {
            args: Prisma.EventAttendeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventAttendeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventAttendeeCountArgs<ExtArgs>
            result: $Utils.Optional<EventAttendeeCountAggregateOutputType> | number
          }
        }
      }
      Tournament: {
        payload: Prisma.$TournamentPayload<ExtArgs>
        fields: Prisma.TournamentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TournamentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TournamentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          findFirst: {
            args: Prisma.TournamentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TournamentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          findMany: {
            args: Prisma.TournamentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>[]
          }
          create: {
            args: Prisma.TournamentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          createMany: {
            args: Prisma.TournamentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TournamentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>[]
          }
          delete: {
            args: Prisma.TournamentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          update: {
            args: Prisma.TournamentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          deleteMany: {
            args: Prisma.TournamentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TournamentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TournamentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>[]
          }
          upsert: {
            args: Prisma.TournamentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          aggregate: {
            args: Prisma.TournamentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTournament>
          }
          groupBy: {
            args: Prisma.TournamentGroupByArgs<ExtArgs>
            result: $Utils.Optional<TournamentGroupByOutputType>[]
          }
          count: {
            args: Prisma.TournamentCountArgs<ExtArgs>
            result: $Utils.Optional<TournamentCountAggregateOutputType> | number
          }
        }
      }
      TournamentParticipant: {
        payload: Prisma.$TournamentParticipantPayload<ExtArgs>
        fields: Prisma.TournamentParticipantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TournamentParticipantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentParticipantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TournamentParticipantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentParticipantPayload>
          }
          findFirst: {
            args: Prisma.TournamentParticipantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentParticipantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TournamentParticipantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentParticipantPayload>
          }
          findMany: {
            args: Prisma.TournamentParticipantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentParticipantPayload>[]
          }
          create: {
            args: Prisma.TournamentParticipantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentParticipantPayload>
          }
          createMany: {
            args: Prisma.TournamentParticipantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TournamentParticipantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentParticipantPayload>[]
          }
          delete: {
            args: Prisma.TournamentParticipantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentParticipantPayload>
          }
          update: {
            args: Prisma.TournamentParticipantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentParticipantPayload>
          }
          deleteMany: {
            args: Prisma.TournamentParticipantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TournamentParticipantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TournamentParticipantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentParticipantPayload>[]
          }
          upsert: {
            args: Prisma.TournamentParticipantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentParticipantPayload>
          }
          aggregate: {
            args: Prisma.TournamentParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTournamentParticipant>
          }
          groupBy: {
            args: Prisma.TournamentParticipantGroupByArgs<ExtArgs>
            result: $Utils.Optional<TournamentParticipantGroupByOutputType>[]
          }
          count: {
            args: Prisma.TournamentParticipantCountArgs<ExtArgs>
            result: $Utils.Optional<TournamentParticipantCountAggregateOutputType> | number
          }
        }
      }
      TournamentFormat: {
        payload: Prisma.$TournamentFormatPayload<ExtArgs>
        fields: Prisma.TournamentFormatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TournamentFormatFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentFormatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TournamentFormatFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentFormatPayload>
          }
          findFirst: {
            args: Prisma.TournamentFormatFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentFormatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TournamentFormatFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentFormatPayload>
          }
          findMany: {
            args: Prisma.TournamentFormatFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentFormatPayload>[]
          }
          create: {
            args: Prisma.TournamentFormatCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentFormatPayload>
          }
          createMany: {
            args: Prisma.TournamentFormatCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TournamentFormatCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentFormatPayload>[]
          }
          delete: {
            args: Prisma.TournamentFormatDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentFormatPayload>
          }
          update: {
            args: Prisma.TournamentFormatUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentFormatPayload>
          }
          deleteMany: {
            args: Prisma.TournamentFormatDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TournamentFormatUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TournamentFormatUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentFormatPayload>[]
          }
          upsert: {
            args: Prisma.TournamentFormatUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentFormatPayload>
          }
          aggregate: {
            args: Prisma.TournamentFormatAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTournamentFormat>
          }
          groupBy: {
            args: Prisma.TournamentFormatGroupByArgs<ExtArgs>
            result: $Utils.Optional<TournamentFormatGroupByOutputType>[]
          }
          count: {
            args: Prisma.TournamentFormatCountArgs<ExtArgs>
            result: $Utils.Optional<TournamentFormatCountAggregateOutputType> | number
          }
        }
      }
      TournamentRound: {
        payload: Prisma.$TournamentRoundPayload<ExtArgs>
        fields: Prisma.TournamentRoundFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TournamentRoundFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentRoundPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TournamentRoundFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentRoundPayload>
          }
          findFirst: {
            args: Prisma.TournamentRoundFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentRoundPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TournamentRoundFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentRoundPayload>
          }
          findMany: {
            args: Prisma.TournamentRoundFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentRoundPayload>[]
          }
          create: {
            args: Prisma.TournamentRoundCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentRoundPayload>
          }
          createMany: {
            args: Prisma.TournamentRoundCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TournamentRoundCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentRoundPayload>[]
          }
          delete: {
            args: Prisma.TournamentRoundDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentRoundPayload>
          }
          update: {
            args: Prisma.TournamentRoundUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentRoundPayload>
          }
          deleteMany: {
            args: Prisma.TournamentRoundDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TournamentRoundUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TournamentRoundUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentRoundPayload>[]
          }
          upsert: {
            args: Prisma.TournamentRoundUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentRoundPayload>
          }
          aggregate: {
            args: Prisma.TournamentRoundAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTournamentRound>
          }
          groupBy: {
            args: Prisma.TournamentRoundGroupByArgs<ExtArgs>
            result: $Utils.Optional<TournamentRoundGroupByOutputType>[]
          }
          count: {
            args: Prisma.TournamentRoundCountArgs<ExtArgs>
            result: $Utils.Optional<TournamentRoundCountAggregateOutputType> | number
          }
        }
      }
      TournamentMatch: {
        payload: Prisma.$TournamentMatchPayload<ExtArgs>
        fields: Prisma.TournamentMatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TournamentMatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TournamentMatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload>
          }
          findFirst: {
            args: Prisma.TournamentMatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TournamentMatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload>
          }
          findMany: {
            args: Prisma.TournamentMatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload>[]
          }
          create: {
            args: Prisma.TournamentMatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload>
          }
          createMany: {
            args: Prisma.TournamentMatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TournamentMatchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload>[]
          }
          delete: {
            args: Prisma.TournamentMatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload>
          }
          update: {
            args: Prisma.TournamentMatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload>
          }
          deleteMany: {
            args: Prisma.TournamentMatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TournamentMatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TournamentMatchUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload>[]
          }
          upsert: {
            args: Prisma.TournamentMatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentMatchPayload>
          }
          aggregate: {
            args: Prisma.TournamentMatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTournamentMatch>
          }
          groupBy: {
            args: Prisma.TournamentMatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<TournamentMatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.TournamentMatchCountArgs<ExtArgs>
            result: $Utils.Optional<TournamentMatchCountAggregateOutputType> | number
          }
        }
      }
      MatchResult: {
        payload: Prisma.$MatchResultPayload<ExtArgs>
        fields: Prisma.MatchResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchResultPayload>
          }
          findFirst: {
            args: Prisma.MatchResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchResultPayload>
          }
          findMany: {
            args: Prisma.MatchResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchResultPayload>[]
          }
          create: {
            args: Prisma.MatchResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchResultPayload>
          }
          createMany: {
            args: Prisma.MatchResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchResultPayload>[]
          }
          delete: {
            args: Prisma.MatchResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchResultPayload>
          }
          update: {
            args: Prisma.MatchResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchResultPayload>
          }
          deleteMany: {
            args: Prisma.MatchResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MatchResultUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchResultPayload>[]
          }
          upsert: {
            args: Prisma.MatchResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchResultPayload>
          }
          aggregate: {
            args: Prisma.MatchResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatchResult>
          }
          groupBy: {
            args: Prisma.MatchResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchResultCountArgs<ExtArgs>
            result: $Utils.Optional<MatchResultCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      GameSession: {
        payload: Prisma.$GameSessionPayload<ExtArgs>
        fields: Prisma.GameSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          findFirst: {
            args: Prisma.GameSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          findMany: {
            args: Prisma.GameSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>[]
          }
          create: {
            args: Prisma.GameSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          createMany: {
            args: Prisma.GameSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>[]
          }
          delete: {
            args: Prisma.GameSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          update: {
            args: Prisma.GameSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          deleteMany: {
            args: Prisma.GameSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>[]
          }
          upsert: {
            args: Prisma.GameSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          aggregate: {
            args: Prisma.GameSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameSession>
          }
          groupBy: {
            args: Prisma.GameSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameSessionCountArgs<ExtArgs>
            result: $Utils.Optional<GameSessionCountAggregateOutputType> | number
          }
        }
      }
      UserSocialLink: {
        payload: Prisma.$UserSocialLinkPayload<ExtArgs>
        fields: Prisma.UserSocialLinkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSocialLinkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialLinkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSocialLinkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialLinkPayload>
          }
          findFirst: {
            args: Prisma.UserSocialLinkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialLinkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSocialLinkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialLinkPayload>
          }
          findMany: {
            args: Prisma.UserSocialLinkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialLinkPayload>[]
          }
          create: {
            args: Prisma.UserSocialLinkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialLinkPayload>
          }
          createMany: {
            args: Prisma.UserSocialLinkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSocialLinkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialLinkPayload>[]
          }
          delete: {
            args: Prisma.UserSocialLinkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialLinkPayload>
          }
          update: {
            args: Prisma.UserSocialLinkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialLinkPayload>
          }
          deleteMany: {
            args: Prisma.UserSocialLinkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSocialLinkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSocialLinkUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialLinkPayload>[]
          }
          upsert: {
            args: Prisma.UserSocialLinkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialLinkPayload>
          }
          aggregate: {
            args: Prisma.UserSocialLinkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSocialLink>
          }
          groupBy: {
            args: Prisma.UserSocialLinkGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSocialLinkGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSocialLinkCountArgs<ExtArgs>
            result: $Utils.Optional<UserSocialLinkCountAggregateOutputType> | number
          }
        }
      }
      UserGamingProfile: {
        payload: Prisma.$UserGamingProfilePayload<ExtArgs>
        fields: Prisma.UserGamingProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserGamingProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamingProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserGamingProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamingProfilePayload>
          }
          findFirst: {
            args: Prisma.UserGamingProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamingProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserGamingProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamingProfilePayload>
          }
          findMany: {
            args: Prisma.UserGamingProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamingProfilePayload>[]
          }
          create: {
            args: Prisma.UserGamingProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamingProfilePayload>
          }
          createMany: {
            args: Prisma.UserGamingProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserGamingProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamingProfilePayload>[]
          }
          delete: {
            args: Prisma.UserGamingProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamingProfilePayload>
          }
          update: {
            args: Prisma.UserGamingProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamingProfilePayload>
          }
          deleteMany: {
            args: Prisma.UserGamingProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserGamingProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserGamingProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamingProfilePayload>[]
          }
          upsert: {
            args: Prisma.UserGamingProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserGamingProfilePayload>
          }
          aggregate: {
            args: Prisma.UserGamingProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserGamingProfile>
          }
          groupBy: {
            args: Prisma.UserGamingProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGamingProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserGamingProfileCountArgs<ExtArgs>
            result: $Utils.Optional<UserGamingProfileCountAggregateOutputType> | number
          }
        }
      }
      Friendship: {
        payload: Prisma.$FriendshipPayload<ExtArgs>
        fields: Prisma.FriendshipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FriendshipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FriendshipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          findFirst: {
            args: Prisma.FriendshipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FriendshipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          findMany: {
            args: Prisma.FriendshipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>[]
          }
          create: {
            args: Prisma.FriendshipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          createMany: {
            args: Prisma.FriendshipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FriendshipCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>[]
          }
          delete: {
            args: Prisma.FriendshipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          update: {
            args: Prisma.FriendshipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          deleteMany: {
            args: Prisma.FriendshipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FriendshipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FriendshipUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>[]
          }
          upsert: {
            args: Prisma.FriendshipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          aggregate: {
            args: Prisma.FriendshipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFriendship>
          }
          groupBy: {
            args: Prisma.FriendshipGroupByArgs<ExtArgs>
            result: $Utils.Optional<FriendshipGroupByOutputType>[]
          }
          count: {
            args: Prisma.FriendshipCountArgs<ExtArgs>
            result: $Utils.Optional<FriendshipCountAggregateOutputType> | number
          }
        }
      }
      UserActivity: {
        payload: Prisma.$UserActivityPayload<ExtArgs>
        fields: Prisma.UserActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          findFirst: {
            args: Prisma.UserActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          findMany: {
            args: Prisma.UserActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>[]
          }
          create: {
            args: Prisma.UserActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          createMany: {
            args: Prisma.UserActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserActivityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>[]
          }
          delete: {
            args: Prisma.UserActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          update: {
            args: Prisma.UserActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          deleteMany: {
            args: Prisma.UserActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserActivityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>[]
          }
          upsert: {
            args: Prisma.UserActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          aggregate: {
            args: Prisma.UserActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserActivity>
          }
          groupBy: {
            args: Prisma.UserActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserActivityCountArgs<ExtArgs>
            result: $Utils.Optional<UserActivityCountAggregateOutputType> | number
          }
        }
      }
      UserSettings: {
        payload: Prisma.$UserSettingsPayload<ExtArgs>
        fields: Prisma.UserSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          findFirst: {
            args: Prisma.UserSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          findMany: {
            args: Prisma.UserSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>[]
          }
          create: {
            args: Prisma.UserSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          createMany: {
            args: Prisma.UserSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>[]
          }
          delete: {
            args: Prisma.UserSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          update: {
            args: Prisma.UserSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          deleteMany: {
            args: Prisma.UserSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>[]
          }
          upsert: {
            args: Prisma.UserSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          aggregate: {
            args: Prisma.UserSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSettings>
          }
          groupBy: {
            args: Prisma.UserSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<UserSettingsCountAggregateOutputType> | number
          }
        }
      }
      MatchmakingPreference: {
        payload: Prisma.$MatchmakingPreferencePayload<ExtArgs>
        fields: Prisma.MatchmakingPreferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchmakingPreferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingPreferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchmakingPreferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingPreferencePayload>
          }
          findFirst: {
            args: Prisma.MatchmakingPreferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingPreferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchmakingPreferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingPreferencePayload>
          }
          findMany: {
            args: Prisma.MatchmakingPreferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingPreferencePayload>[]
          }
          create: {
            args: Prisma.MatchmakingPreferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingPreferencePayload>
          }
          createMany: {
            args: Prisma.MatchmakingPreferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchmakingPreferenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingPreferencePayload>[]
          }
          delete: {
            args: Prisma.MatchmakingPreferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingPreferencePayload>
          }
          update: {
            args: Prisma.MatchmakingPreferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingPreferencePayload>
          }
          deleteMany: {
            args: Prisma.MatchmakingPreferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchmakingPreferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MatchmakingPreferenceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingPreferencePayload>[]
          }
          upsert: {
            args: Prisma.MatchmakingPreferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingPreferencePayload>
          }
          aggregate: {
            args: Prisma.MatchmakingPreferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatchmakingPreference>
          }
          groupBy: {
            args: Prisma.MatchmakingPreferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchmakingPreferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchmakingPreferenceCountArgs<ExtArgs>
            result: $Utils.Optional<MatchmakingPreferenceCountAggregateOutputType> | number
          }
        }
      }
      ForumPost: {
        payload: Prisma.$ForumPostPayload<ExtArgs>
        fields: Prisma.ForumPostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ForumPostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ForumPostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload>
          }
          findFirst: {
            args: Prisma.ForumPostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ForumPostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload>
          }
          findMany: {
            args: Prisma.ForumPostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload>[]
          }
          create: {
            args: Prisma.ForumPostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload>
          }
          createMany: {
            args: Prisma.ForumPostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ForumPostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload>[]
          }
          delete: {
            args: Prisma.ForumPostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload>
          }
          update: {
            args: Prisma.ForumPostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload>
          }
          deleteMany: {
            args: Prisma.ForumPostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ForumPostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ForumPostUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload>[]
          }
          upsert: {
            args: Prisma.ForumPostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostPayload>
          }
          aggregate: {
            args: Prisma.ForumPostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateForumPost>
          }
          groupBy: {
            args: Prisma.ForumPostGroupByArgs<ExtArgs>
            result: $Utils.Optional<ForumPostGroupByOutputType>[]
          }
          count: {
            args: Prisma.ForumPostCountArgs<ExtArgs>
            result: $Utils.Optional<ForumPostCountAggregateOutputType> | number
          }
        }
      }
      ForumReply: {
        payload: Prisma.$ForumReplyPayload<ExtArgs>
        fields: Prisma.ForumReplyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ForumReplyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ForumReplyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyPayload>
          }
          findFirst: {
            args: Prisma.ForumReplyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ForumReplyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyPayload>
          }
          findMany: {
            args: Prisma.ForumReplyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyPayload>[]
          }
          create: {
            args: Prisma.ForumReplyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyPayload>
          }
          createMany: {
            args: Prisma.ForumReplyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ForumReplyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyPayload>[]
          }
          delete: {
            args: Prisma.ForumReplyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyPayload>
          }
          update: {
            args: Prisma.ForumReplyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyPayload>
          }
          deleteMany: {
            args: Prisma.ForumReplyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ForumReplyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ForumReplyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyPayload>[]
          }
          upsert: {
            args: Prisma.ForumReplyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyPayload>
          }
          aggregate: {
            args: Prisma.ForumReplyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateForumReply>
          }
          groupBy: {
            args: Prisma.ForumReplyGroupByArgs<ExtArgs>
            result: $Utils.Optional<ForumReplyGroupByOutputType>[]
          }
          count: {
            args: Prisma.ForumReplyCountArgs<ExtArgs>
            result: $Utils.Optional<ForumReplyCountAggregateOutputType> | number
          }
        }
      }
      ForumPostLike: {
        payload: Prisma.$ForumPostLikePayload<ExtArgs>
        fields: Prisma.ForumPostLikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ForumPostLikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostLikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ForumPostLikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostLikePayload>
          }
          findFirst: {
            args: Prisma.ForumPostLikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostLikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ForumPostLikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostLikePayload>
          }
          findMany: {
            args: Prisma.ForumPostLikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostLikePayload>[]
          }
          create: {
            args: Prisma.ForumPostLikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostLikePayload>
          }
          createMany: {
            args: Prisma.ForumPostLikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ForumPostLikeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostLikePayload>[]
          }
          delete: {
            args: Prisma.ForumPostLikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostLikePayload>
          }
          update: {
            args: Prisma.ForumPostLikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostLikePayload>
          }
          deleteMany: {
            args: Prisma.ForumPostLikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ForumPostLikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ForumPostLikeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostLikePayload>[]
          }
          upsert: {
            args: Prisma.ForumPostLikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumPostLikePayload>
          }
          aggregate: {
            args: Prisma.ForumPostLikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateForumPostLike>
          }
          groupBy: {
            args: Prisma.ForumPostLikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ForumPostLikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ForumPostLikeCountArgs<ExtArgs>
            result: $Utils.Optional<ForumPostLikeCountAggregateOutputType> | number
          }
        }
      }
      ForumReplyLike: {
        payload: Prisma.$ForumReplyLikePayload<ExtArgs>
        fields: Prisma.ForumReplyLikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ForumReplyLikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyLikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ForumReplyLikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyLikePayload>
          }
          findFirst: {
            args: Prisma.ForumReplyLikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyLikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ForumReplyLikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyLikePayload>
          }
          findMany: {
            args: Prisma.ForumReplyLikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyLikePayload>[]
          }
          create: {
            args: Prisma.ForumReplyLikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyLikePayload>
          }
          createMany: {
            args: Prisma.ForumReplyLikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ForumReplyLikeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyLikePayload>[]
          }
          delete: {
            args: Prisma.ForumReplyLikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyLikePayload>
          }
          update: {
            args: Prisma.ForumReplyLikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyLikePayload>
          }
          deleteMany: {
            args: Prisma.ForumReplyLikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ForumReplyLikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ForumReplyLikeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyLikePayload>[]
          }
          upsert: {
            args: Prisma.ForumReplyLikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ForumReplyLikePayload>
          }
          aggregate: {
            args: Prisma.ForumReplyLikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateForumReplyLike>
          }
          groupBy: {
            args: Prisma.ForumReplyLikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ForumReplyLikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ForumReplyLikeCountArgs<ExtArgs>
            result: $Utils.Optional<ForumReplyLikeCountAggregateOutputType> | number
          }
        }
      }
      PasswordResetToken: {
        payload: Prisma.$PasswordResetTokenPayload<ExtArgs>
        fields: Prisma.PasswordResetTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PasswordResetTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          findFirst: {
            args: Prisma.PasswordResetTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PasswordResetTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          findMany: {
            args: Prisma.PasswordResetTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          create: {
            args: Prisma.PasswordResetTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          createMany: {
            args: Prisma.PasswordResetTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PasswordResetTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          delete: {
            args: Prisma.PasswordResetTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          update: {
            args: Prisma.PasswordResetTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          deleteMany: {
            args: Prisma.PasswordResetTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PasswordResetTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          upsert: {
            args: Prisma.PasswordResetTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          aggregate: {
            args: Prisma.PasswordResetTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePasswordResetToken>
          }
          groupBy: {
            args: Prisma.PasswordResetTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.PasswordResetTokenCountArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetTokenCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    account?: AccountOmit
    session?: SessionOmit
    verificationToken?: VerificationTokenOmit
    legacySession?: LegacySessionOmit
    user?: UserOmit
    community?: CommunityOmit
    userCommunity?: UserCommunityOmit
    themePreference?: ThemePreferenceOmit
    event?: EventOmit
    eventAttendee?: EventAttendeeOmit
    tournament?: TournamentOmit
    tournamentParticipant?: TournamentParticipantOmit
    tournamentFormat?: TournamentFormatOmit
    tournamentRound?: TournamentRoundOmit
    tournamentMatch?: TournamentMatchOmit
    matchResult?: MatchResultOmit
    notification?: NotificationOmit
    message?: MessageOmit
    gameSession?: GameSessionOmit
    userSocialLink?: UserSocialLinkOmit
    userGamingProfile?: UserGamingProfileOmit
    friendship?: FriendshipOmit
    userActivity?: UserActivityOmit
    userSettings?: UserSettingsOmit
    matchmakingPreference?: MatchmakingPreferenceOmit
    forumPost?: ForumPostOmit
    forumReply?: ForumReplyOmit
    forumPostLike?: ForumPostLikeOmit
    forumReplyLike?: ForumReplyLikeOmit
    passwordResetToken?: PasswordResetTokenOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    sessions: number
    userCommunities: number
    themePreferences: number
    createdEvents: number
    hostedEvents: number
    coHostedEvents: number
    eventAttendees: number
    notifications: number
    sentMessages: number
    receivedMessages: number
    hostedGameSessions: number
    coHostedGameSessions: number
    socialLinks: number
    gamingProfiles: number
    sentFriendRequests: number
    receivedFriendRequests: number
    activities: number
    settings: number
    matchmakingPreferences: number
    organizedTournaments: number
    tournamentParticipation: number
    forumPosts: number
    forumReplies: number
    forumPostLikes: number
    forumReplyLikes: number
    tournamentMatchesPlayer1: number
    tournamentMatchesPlayer2: number
    tournamentMatchWins: number
    matchResultsWins: number
    matchResultsLosses: number
    matchResultsReported: number
    matchResultsVerified: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    userCommunities?: boolean | UserCountOutputTypeCountUserCommunitiesArgs
    themePreferences?: boolean | UserCountOutputTypeCountThemePreferencesArgs
    createdEvents?: boolean | UserCountOutputTypeCountCreatedEventsArgs
    hostedEvents?: boolean | UserCountOutputTypeCountHostedEventsArgs
    coHostedEvents?: boolean | UserCountOutputTypeCountCoHostedEventsArgs
    eventAttendees?: boolean | UserCountOutputTypeCountEventAttendeesArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    sentMessages?: boolean | UserCountOutputTypeCountSentMessagesArgs
    receivedMessages?: boolean | UserCountOutputTypeCountReceivedMessagesArgs
    hostedGameSessions?: boolean | UserCountOutputTypeCountHostedGameSessionsArgs
    coHostedGameSessions?: boolean | UserCountOutputTypeCountCoHostedGameSessionsArgs
    socialLinks?: boolean | UserCountOutputTypeCountSocialLinksArgs
    gamingProfiles?: boolean | UserCountOutputTypeCountGamingProfilesArgs
    sentFriendRequests?: boolean | UserCountOutputTypeCountSentFriendRequestsArgs
    receivedFriendRequests?: boolean | UserCountOutputTypeCountReceivedFriendRequestsArgs
    activities?: boolean | UserCountOutputTypeCountActivitiesArgs
    settings?: boolean | UserCountOutputTypeCountSettingsArgs
    matchmakingPreferences?: boolean | UserCountOutputTypeCountMatchmakingPreferencesArgs
    organizedTournaments?: boolean | UserCountOutputTypeCountOrganizedTournamentsArgs
    tournamentParticipation?: boolean | UserCountOutputTypeCountTournamentParticipationArgs
    forumPosts?: boolean | UserCountOutputTypeCountForumPostsArgs
    forumReplies?: boolean | UserCountOutputTypeCountForumRepliesArgs
    forumPostLikes?: boolean | UserCountOutputTypeCountForumPostLikesArgs
    forumReplyLikes?: boolean | UserCountOutputTypeCountForumReplyLikesArgs
    tournamentMatchesPlayer1?: boolean | UserCountOutputTypeCountTournamentMatchesPlayer1Args
    tournamentMatchesPlayer2?: boolean | UserCountOutputTypeCountTournamentMatchesPlayer2Args
    tournamentMatchWins?: boolean | UserCountOutputTypeCountTournamentMatchWinsArgs
    matchResultsWins?: boolean | UserCountOutputTypeCountMatchResultsWinsArgs
    matchResultsLosses?: boolean | UserCountOutputTypeCountMatchResultsLossesArgs
    matchResultsReported?: boolean | UserCountOutputTypeCountMatchResultsReportedArgs
    matchResultsVerified?: boolean | UserCountOutputTypeCountMatchResultsVerifiedArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserCommunitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCommunityWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountThemePreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThemePreferenceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHostedEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCoHostedEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEventAttendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventAttendeeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHostedGameSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCoHostedGameSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSocialLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSocialLinkWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGamingProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserGamingProfileWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentFriendRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FriendshipWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedFriendRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FriendshipWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserActivityWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSettingsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMatchmakingPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchmakingPreferenceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrganizedTournamentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTournamentParticipationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentParticipantWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountForumPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumPostWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountForumRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumReplyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountForumPostLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumPostLikeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountForumReplyLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumReplyLikeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTournamentMatchesPlayer1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentMatchWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTournamentMatchesPlayer2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentMatchWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTournamentMatchWinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentMatchWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMatchResultsWinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchResultWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMatchResultsLossesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchResultWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMatchResultsReportedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchResultWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMatchResultsVerifiedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchResultWhereInput
  }


  /**
   * Count Type CommunityCountOutputType
   */

  export type CommunityCountOutputType = {
    userCommunities: number
    themePreferences: number
    events: number
    forumPosts: number
    tournaments: number
  }

  export type CommunityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userCommunities?: boolean | CommunityCountOutputTypeCountUserCommunitiesArgs
    themePreferences?: boolean | CommunityCountOutputTypeCountThemePreferencesArgs
    events?: boolean | CommunityCountOutputTypeCountEventsArgs
    forumPosts?: boolean | CommunityCountOutputTypeCountForumPostsArgs
    tournaments?: boolean | CommunityCountOutputTypeCountTournamentsArgs
  }

  // Custom InputTypes
  /**
   * CommunityCountOutputType without action
   */
  export type CommunityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityCountOutputType
     */
    select?: CommunityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommunityCountOutputType without action
   */
  export type CommunityCountOutputTypeCountUserCommunitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCommunityWhereInput
  }

  /**
   * CommunityCountOutputType without action
   */
  export type CommunityCountOutputTypeCountThemePreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThemePreferenceWhereInput
  }

  /**
   * CommunityCountOutputType without action
   */
  export type CommunityCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * CommunityCountOutputType without action
   */
  export type CommunityCountOutputTypeCountForumPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumPostWhereInput
  }

  /**
   * CommunityCountOutputType without action
   */
  export type CommunityCountOutputTypeCountTournamentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentWhereInput
  }


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    attendees: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendees?: boolean | EventCountOutputTypeCountAttendeesArgs
  }

  // Custom InputTypes
  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountAttendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventAttendeeWhereInput
  }


  /**
   * Count Type TournamentCountOutputType
   */

  export type TournamentCountOutputType = {
    participants: number
    rounds: number
    matches: number
  }

  export type TournamentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | TournamentCountOutputTypeCountParticipantsArgs
    rounds?: boolean | TournamentCountOutputTypeCountRoundsArgs
    matches?: boolean | TournamentCountOutputTypeCountMatchesArgs
  }

  // Custom InputTypes
  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentCountOutputType
     */
    select?: TournamentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentParticipantWhereInput
  }

  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeCountRoundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentRoundWhereInput
  }

  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeCountMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentMatchWhereInput
  }


  /**
   * Count Type TournamentRoundCountOutputType
   */

  export type TournamentRoundCountOutputType = {
    matches: number
  }

  export type TournamentRoundCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    matches?: boolean | TournamentRoundCountOutputTypeCountMatchesArgs
  }

  // Custom InputTypes
  /**
   * TournamentRoundCountOutputType without action
   */
  export type TournamentRoundCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentRoundCountOutputType
     */
    select?: TournamentRoundCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TournamentRoundCountOutputType without action
   */
  export type TournamentRoundCountOutputTypeCountMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentMatchWhereInput
  }


  /**
   * Count Type TournamentMatchCountOutputType
   */

  export type TournamentMatchCountOutputType = {
    results: number
  }

  export type TournamentMatchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    results?: boolean | TournamentMatchCountOutputTypeCountResultsArgs
  }

  // Custom InputTypes
  /**
   * TournamentMatchCountOutputType without action
   */
  export type TournamentMatchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatchCountOutputType
     */
    select?: TournamentMatchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TournamentMatchCountOutputType without action
   */
  export type TournamentMatchCountOutputTypeCountResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchResultWhereInput
  }


  /**
   * Count Type ForumPostCountOutputType
   */

  export type ForumPostCountOutputType = {
    replies: number
    likes: number
  }

  export type ForumPostCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    replies?: boolean | ForumPostCountOutputTypeCountRepliesArgs
    likes?: boolean | ForumPostCountOutputTypeCountLikesArgs
  }

  // Custom InputTypes
  /**
   * ForumPostCountOutputType without action
   */
  export type ForumPostCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostCountOutputType
     */
    select?: ForumPostCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ForumPostCountOutputType without action
   */
  export type ForumPostCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumReplyWhereInput
  }

  /**
   * ForumPostCountOutputType without action
   */
  export type ForumPostCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumPostLikeWhereInput
  }


  /**
   * Count Type ForumReplyCountOutputType
   */

  export type ForumReplyCountOutputType = {
    likes: number
  }

  export type ForumReplyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    likes?: boolean | ForumReplyCountOutputTypeCountLikesArgs
  }

  // Custom InputTypes
  /**
   * ForumReplyCountOutputType without action
   */
  export type ForumReplyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReplyCountOutputType
     */
    select?: ForumReplyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ForumReplyCountOutputType without action
   */
  export type ForumReplyCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumReplyLikeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "provider" | "providerAccountId" | "refresh_token" | "access_token" | "expires_at" | "token_type" | "scope" | "id_token" | "session_state", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionToken" | "userId" | "expires", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionToken: string
      userId: string
      expires: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }

  export type VerificationTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"identifier" | "token" | "expires", ExtArgs["result"]["verificationToken"]>

  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens and returns the data updated in the database.
     * @param {VerificationTokenUpdateManyAndReturnArgs} args - Arguments to update many VerificationTokens.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.updateManyAndReturn({
     *   select: { identifier: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken updateManyAndReturn
   */
  export type VerificationTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to delete.
     */
    limit?: number
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
  }


  /**
   * Model LegacySession
   */

  export type AggregateLegacySession = {
    _count: LegacySessionCountAggregateOutputType | null
    _min: LegacySessionMinAggregateOutputType | null
    _max: LegacySessionMaxAggregateOutputType | null
  }

  export type LegacySessionMinAggregateOutputType = {
    sid: string | null
    expire: Date | null
  }

  export type LegacySessionMaxAggregateOutputType = {
    sid: string | null
    expire: Date | null
  }

  export type LegacySessionCountAggregateOutputType = {
    sid: number
    sess: number
    expire: number
    _all: number
  }


  export type LegacySessionMinAggregateInputType = {
    sid?: true
    expire?: true
  }

  export type LegacySessionMaxAggregateInputType = {
    sid?: true
    expire?: true
  }

  export type LegacySessionCountAggregateInputType = {
    sid?: true
    sess?: true
    expire?: true
    _all?: true
  }

  export type LegacySessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LegacySession to aggregate.
     */
    where?: LegacySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LegacySessions to fetch.
     */
    orderBy?: LegacySessionOrderByWithRelationInput | LegacySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LegacySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LegacySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LegacySessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LegacySessions
    **/
    _count?: true | LegacySessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LegacySessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LegacySessionMaxAggregateInputType
  }

  export type GetLegacySessionAggregateType<T extends LegacySessionAggregateArgs> = {
        [P in keyof T & keyof AggregateLegacySession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLegacySession[P]>
      : GetScalarType<T[P], AggregateLegacySession[P]>
  }




  export type LegacySessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LegacySessionWhereInput
    orderBy?: LegacySessionOrderByWithAggregationInput | LegacySessionOrderByWithAggregationInput[]
    by: LegacySessionScalarFieldEnum[] | LegacySessionScalarFieldEnum
    having?: LegacySessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LegacySessionCountAggregateInputType | true
    _min?: LegacySessionMinAggregateInputType
    _max?: LegacySessionMaxAggregateInputType
  }

  export type LegacySessionGroupByOutputType = {
    sid: string
    sess: JsonValue
    expire: Date
    _count: LegacySessionCountAggregateOutputType | null
    _min: LegacySessionMinAggregateOutputType | null
    _max: LegacySessionMaxAggregateOutputType | null
  }

  type GetLegacySessionGroupByPayload<T extends LegacySessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LegacySessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LegacySessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LegacySessionGroupByOutputType[P]>
            : GetScalarType<T[P], LegacySessionGroupByOutputType[P]>
        }
      >
    >


  export type LegacySessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sid?: boolean
    sess?: boolean
    expire?: boolean
  }, ExtArgs["result"]["legacySession"]>

  export type LegacySessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sid?: boolean
    sess?: boolean
    expire?: boolean
  }, ExtArgs["result"]["legacySession"]>

  export type LegacySessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sid?: boolean
    sess?: boolean
    expire?: boolean
  }, ExtArgs["result"]["legacySession"]>

  export type LegacySessionSelectScalar = {
    sid?: boolean
    sess?: boolean
    expire?: boolean
  }

  export type LegacySessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"sid" | "sess" | "expire", ExtArgs["result"]["legacySession"]>

  export type $LegacySessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LegacySession"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      sid: string
      sess: Prisma.JsonValue
      expire: Date
    }, ExtArgs["result"]["legacySession"]>
    composites: {}
  }

  type LegacySessionGetPayload<S extends boolean | null | undefined | LegacySessionDefaultArgs> = $Result.GetResult<Prisma.$LegacySessionPayload, S>

  type LegacySessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LegacySessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LegacySessionCountAggregateInputType | true
    }

  export interface LegacySessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LegacySession'], meta: { name: 'LegacySession' } }
    /**
     * Find zero or one LegacySession that matches the filter.
     * @param {LegacySessionFindUniqueArgs} args - Arguments to find a LegacySession
     * @example
     * // Get one LegacySession
     * const legacySession = await prisma.legacySession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LegacySessionFindUniqueArgs>(args: SelectSubset<T, LegacySessionFindUniqueArgs<ExtArgs>>): Prisma__LegacySessionClient<$Result.GetResult<Prisma.$LegacySessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LegacySession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LegacySessionFindUniqueOrThrowArgs} args - Arguments to find a LegacySession
     * @example
     * // Get one LegacySession
     * const legacySession = await prisma.legacySession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LegacySessionFindUniqueOrThrowArgs>(args: SelectSubset<T, LegacySessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LegacySessionClient<$Result.GetResult<Prisma.$LegacySessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LegacySession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegacySessionFindFirstArgs} args - Arguments to find a LegacySession
     * @example
     * // Get one LegacySession
     * const legacySession = await prisma.legacySession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LegacySessionFindFirstArgs>(args?: SelectSubset<T, LegacySessionFindFirstArgs<ExtArgs>>): Prisma__LegacySessionClient<$Result.GetResult<Prisma.$LegacySessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LegacySession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegacySessionFindFirstOrThrowArgs} args - Arguments to find a LegacySession
     * @example
     * // Get one LegacySession
     * const legacySession = await prisma.legacySession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LegacySessionFindFirstOrThrowArgs>(args?: SelectSubset<T, LegacySessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__LegacySessionClient<$Result.GetResult<Prisma.$LegacySessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LegacySessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegacySessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LegacySessions
     * const legacySessions = await prisma.legacySession.findMany()
     * 
     * // Get first 10 LegacySessions
     * const legacySessions = await prisma.legacySession.findMany({ take: 10 })
     * 
     * // Only select the `sid`
     * const legacySessionWithSidOnly = await prisma.legacySession.findMany({ select: { sid: true } })
     * 
     */
    findMany<T extends LegacySessionFindManyArgs>(args?: SelectSubset<T, LegacySessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LegacySessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LegacySession.
     * @param {LegacySessionCreateArgs} args - Arguments to create a LegacySession.
     * @example
     * // Create one LegacySession
     * const LegacySession = await prisma.legacySession.create({
     *   data: {
     *     // ... data to create a LegacySession
     *   }
     * })
     * 
     */
    create<T extends LegacySessionCreateArgs>(args: SelectSubset<T, LegacySessionCreateArgs<ExtArgs>>): Prisma__LegacySessionClient<$Result.GetResult<Prisma.$LegacySessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LegacySessions.
     * @param {LegacySessionCreateManyArgs} args - Arguments to create many LegacySessions.
     * @example
     * // Create many LegacySessions
     * const legacySession = await prisma.legacySession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LegacySessionCreateManyArgs>(args?: SelectSubset<T, LegacySessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LegacySessions and returns the data saved in the database.
     * @param {LegacySessionCreateManyAndReturnArgs} args - Arguments to create many LegacySessions.
     * @example
     * // Create many LegacySessions
     * const legacySession = await prisma.legacySession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LegacySessions and only return the `sid`
     * const legacySessionWithSidOnly = await prisma.legacySession.createManyAndReturn({
     *   select: { sid: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LegacySessionCreateManyAndReturnArgs>(args?: SelectSubset<T, LegacySessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LegacySessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LegacySession.
     * @param {LegacySessionDeleteArgs} args - Arguments to delete one LegacySession.
     * @example
     * // Delete one LegacySession
     * const LegacySession = await prisma.legacySession.delete({
     *   where: {
     *     // ... filter to delete one LegacySession
     *   }
     * })
     * 
     */
    delete<T extends LegacySessionDeleteArgs>(args: SelectSubset<T, LegacySessionDeleteArgs<ExtArgs>>): Prisma__LegacySessionClient<$Result.GetResult<Prisma.$LegacySessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LegacySession.
     * @param {LegacySessionUpdateArgs} args - Arguments to update one LegacySession.
     * @example
     * // Update one LegacySession
     * const legacySession = await prisma.legacySession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LegacySessionUpdateArgs>(args: SelectSubset<T, LegacySessionUpdateArgs<ExtArgs>>): Prisma__LegacySessionClient<$Result.GetResult<Prisma.$LegacySessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LegacySessions.
     * @param {LegacySessionDeleteManyArgs} args - Arguments to filter LegacySessions to delete.
     * @example
     * // Delete a few LegacySessions
     * const { count } = await prisma.legacySession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LegacySessionDeleteManyArgs>(args?: SelectSubset<T, LegacySessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LegacySessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegacySessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LegacySessions
     * const legacySession = await prisma.legacySession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LegacySessionUpdateManyArgs>(args: SelectSubset<T, LegacySessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LegacySessions and returns the data updated in the database.
     * @param {LegacySessionUpdateManyAndReturnArgs} args - Arguments to update many LegacySessions.
     * @example
     * // Update many LegacySessions
     * const legacySession = await prisma.legacySession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LegacySessions and only return the `sid`
     * const legacySessionWithSidOnly = await prisma.legacySession.updateManyAndReturn({
     *   select: { sid: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LegacySessionUpdateManyAndReturnArgs>(args: SelectSubset<T, LegacySessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LegacySessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LegacySession.
     * @param {LegacySessionUpsertArgs} args - Arguments to update or create a LegacySession.
     * @example
     * // Update or create a LegacySession
     * const legacySession = await prisma.legacySession.upsert({
     *   create: {
     *     // ... data to create a LegacySession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LegacySession we want to update
     *   }
     * })
     */
    upsert<T extends LegacySessionUpsertArgs>(args: SelectSubset<T, LegacySessionUpsertArgs<ExtArgs>>): Prisma__LegacySessionClient<$Result.GetResult<Prisma.$LegacySessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LegacySessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegacySessionCountArgs} args - Arguments to filter LegacySessions to count.
     * @example
     * // Count the number of LegacySessions
     * const count = await prisma.legacySession.count({
     *   where: {
     *     // ... the filter for the LegacySessions we want to count
     *   }
     * })
    **/
    count<T extends LegacySessionCountArgs>(
      args?: Subset<T, LegacySessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LegacySessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LegacySession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegacySessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LegacySessionAggregateArgs>(args: Subset<T, LegacySessionAggregateArgs>): Prisma.PrismaPromise<GetLegacySessionAggregateType<T>>

    /**
     * Group by LegacySession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegacySessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LegacySessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LegacySessionGroupByArgs['orderBy'] }
        : { orderBy?: LegacySessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LegacySessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLegacySessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LegacySession model
   */
  readonly fields: LegacySessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LegacySession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LegacySessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LegacySession model
   */
  interface LegacySessionFieldRefs {
    readonly sid: FieldRef<"LegacySession", 'String'>
    readonly sess: FieldRef<"LegacySession", 'Json'>
    readonly expire: FieldRef<"LegacySession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LegacySession findUnique
   */
  export type LegacySessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegacySession
     */
    select?: LegacySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegacySession
     */
    omit?: LegacySessionOmit<ExtArgs> | null
    /**
     * Filter, which LegacySession to fetch.
     */
    where: LegacySessionWhereUniqueInput
  }

  /**
   * LegacySession findUniqueOrThrow
   */
  export type LegacySessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegacySession
     */
    select?: LegacySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegacySession
     */
    omit?: LegacySessionOmit<ExtArgs> | null
    /**
     * Filter, which LegacySession to fetch.
     */
    where: LegacySessionWhereUniqueInput
  }

  /**
   * LegacySession findFirst
   */
  export type LegacySessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegacySession
     */
    select?: LegacySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegacySession
     */
    omit?: LegacySessionOmit<ExtArgs> | null
    /**
     * Filter, which LegacySession to fetch.
     */
    where?: LegacySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LegacySessions to fetch.
     */
    orderBy?: LegacySessionOrderByWithRelationInput | LegacySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LegacySessions.
     */
    cursor?: LegacySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LegacySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LegacySessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LegacySessions.
     */
    distinct?: LegacySessionScalarFieldEnum | LegacySessionScalarFieldEnum[]
  }

  /**
   * LegacySession findFirstOrThrow
   */
  export type LegacySessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegacySession
     */
    select?: LegacySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegacySession
     */
    omit?: LegacySessionOmit<ExtArgs> | null
    /**
     * Filter, which LegacySession to fetch.
     */
    where?: LegacySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LegacySessions to fetch.
     */
    orderBy?: LegacySessionOrderByWithRelationInput | LegacySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LegacySessions.
     */
    cursor?: LegacySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LegacySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LegacySessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LegacySessions.
     */
    distinct?: LegacySessionScalarFieldEnum | LegacySessionScalarFieldEnum[]
  }

  /**
   * LegacySession findMany
   */
  export type LegacySessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegacySession
     */
    select?: LegacySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegacySession
     */
    omit?: LegacySessionOmit<ExtArgs> | null
    /**
     * Filter, which LegacySessions to fetch.
     */
    where?: LegacySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LegacySessions to fetch.
     */
    orderBy?: LegacySessionOrderByWithRelationInput | LegacySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LegacySessions.
     */
    cursor?: LegacySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LegacySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LegacySessions.
     */
    skip?: number
    distinct?: LegacySessionScalarFieldEnum | LegacySessionScalarFieldEnum[]
  }

  /**
   * LegacySession create
   */
  export type LegacySessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegacySession
     */
    select?: LegacySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegacySession
     */
    omit?: LegacySessionOmit<ExtArgs> | null
    /**
     * The data needed to create a LegacySession.
     */
    data: XOR<LegacySessionCreateInput, LegacySessionUncheckedCreateInput>
  }

  /**
   * LegacySession createMany
   */
  export type LegacySessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LegacySessions.
     */
    data: LegacySessionCreateManyInput | LegacySessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LegacySession createManyAndReturn
   */
  export type LegacySessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegacySession
     */
    select?: LegacySessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LegacySession
     */
    omit?: LegacySessionOmit<ExtArgs> | null
    /**
     * The data used to create many LegacySessions.
     */
    data: LegacySessionCreateManyInput | LegacySessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LegacySession update
   */
  export type LegacySessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegacySession
     */
    select?: LegacySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegacySession
     */
    omit?: LegacySessionOmit<ExtArgs> | null
    /**
     * The data needed to update a LegacySession.
     */
    data: XOR<LegacySessionUpdateInput, LegacySessionUncheckedUpdateInput>
    /**
     * Choose, which LegacySession to update.
     */
    where: LegacySessionWhereUniqueInput
  }

  /**
   * LegacySession updateMany
   */
  export type LegacySessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LegacySessions.
     */
    data: XOR<LegacySessionUpdateManyMutationInput, LegacySessionUncheckedUpdateManyInput>
    /**
     * Filter which LegacySessions to update
     */
    where?: LegacySessionWhereInput
    /**
     * Limit how many LegacySessions to update.
     */
    limit?: number
  }

  /**
   * LegacySession updateManyAndReturn
   */
  export type LegacySessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegacySession
     */
    select?: LegacySessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LegacySession
     */
    omit?: LegacySessionOmit<ExtArgs> | null
    /**
     * The data used to update LegacySessions.
     */
    data: XOR<LegacySessionUpdateManyMutationInput, LegacySessionUncheckedUpdateManyInput>
    /**
     * Filter which LegacySessions to update
     */
    where?: LegacySessionWhereInput
    /**
     * Limit how many LegacySessions to update.
     */
    limit?: number
  }

  /**
   * LegacySession upsert
   */
  export type LegacySessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegacySession
     */
    select?: LegacySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegacySession
     */
    omit?: LegacySessionOmit<ExtArgs> | null
    /**
     * The filter to search for the LegacySession to update in case it exists.
     */
    where: LegacySessionWhereUniqueInput
    /**
     * In case the LegacySession found by the `where` argument doesn't exist, create a new LegacySession with this data.
     */
    create: XOR<LegacySessionCreateInput, LegacySessionUncheckedCreateInput>
    /**
     * In case the LegacySession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LegacySessionUpdateInput, LegacySessionUncheckedUpdateInput>
  }

  /**
   * LegacySession delete
   */
  export type LegacySessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegacySession
     */
    select?: LegacySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegacySession
     */
    omit?: LegacySessionOmit<ExtArgs> | null
    /**
     * Filter which LegacySession to delete.
     */
    where: LegacySessionWhereUniqueInput
  }

  /**
   * LegacySession deleteMany
   */
  export type LegacySessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LegacySessions to delete
     */
    where?: LegacySessionWhereInput
    /**
     * Limit how many LegacySessions to delete.
     */
    limit?: number
  }

  /**
   * LegacySession without action
   */
  export type LegacySessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LegacySession
     */
    select?: LegacySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LegacySession
     */
    omit?: LegacySessionOmit<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    profileImageUrl: string | null
    primaryCommunity: string | null
    username: string | null
    bio: string | null
    location: string | null
    website: string | null
    status: string | null
    statusMessage: string | null
    timezone: string | null
    dateOfBirth: string | null
    isPrivate: boolean | null
    showOnlineStatus: string | null
    allowDirectMessages: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    profileImageUrl: string | null
    primaryCommunity: string | null
    username: string | null
    bio: string | null
    location: string | null
    website: string | null
    status: string | null
    statusMessage: string | null
    timezone: string | null
    dateOfBirth: string | null
    isPrivate: boolean | null
    showOnlineStatus: string | null
    allowDirectMessages: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    firstName: number
    lastName: number
    profileImageUrl: number
    primaryCommunity: number
    username: number
    bio: number
    location: number
    website: number
    status: number
    statusMessage: number
    timezone: number
    dateOfBirth: number
    isPrivate: number
    showOnlineStatus: number
    allowDirectMessages: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    profileImageUrl?: true
    primaryCommunity?: true
    username?: true
    bio?: true
    location?: true
    website?: true
    status?: true
    statusMessage?: true
    timezone?: true
    dateOfBirth?: true
    isPrivate?: true
    showOnlineStatus?: true
    allowDirectMessages?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    profileImageUrl?: true
    primaryCommunity?: true
    username?: true
    bio?: true
    location?: true
    website?: true
    status?: true
    statusMessage?: true
    timezone?: true
    dateOfBirth?: true
    isPrivate?: true
    showOnlineStatus?: true
    allowDirectMessages?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    profileImageUrl?: true
    primaryCommunity?: true
    username?: true
    bio?: true
    location?: true
    website?: true
    status?: true
    statusMessage?: true
    timezone?: true
    dateOfBirth?: true
    isPrivate?: true
    showOnlineStatus?: true
    allowDirectMessages?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string | null
    firstName: string | null
    lastName: string | null
    profileImageUrl: string | null
    primaryCommunity: string | null
    username: string | null
    bio: string | null
    location: string | null
    website: string | null
    status: string | null
    statusMessage: string | null
    timezone: string | null
    dateOfBirth: string | null
    isPrivate: boolean
    showOnlineStatus: string
    allowDirectMessages: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    profileImageUrl?: boolean
    primaryCommunity?: boolean
    username?: boolean
    bio?: boolean
    location?: boolean
    website?: boolean
    status?: boolean
    statusMessage?: boolean
    timezone?: boolean
    dateOfBirth?: boolean
    isPrivate?: boolean
    showOnlineStatus?: boolean
    allowDirectMessages?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    userCommunities?: boolean | User$userCommunitiesArgs<ExtArgs>
    themePreferences?: boolean | User$themePreferencesArgs<ExtArgs>
    createdEvents?: boolean | User$createdEventsArgs<ExtArgs>
    hostedEvents?: boolean | User$hostedEventsArgs<ExtArgs>
    coHostedEvents?: boolean | User$coHostedEventsArgs<ExtArgs>
    eventAttendees?: boolean | User$eventAttendeesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    receivedMessages?: boolean | User$receivedMessagesArgs<ExtArgs>
    hostedGameSessions?: boolean | User$hostedGameSessionsArgs<ExtArgs>
    coHostedGameSessions?: boolean | User$coHostedGameSessionsArgs<ExtArgs>
    socialLinks?: boolean | User$socialLinksArgs<ExtArgs>
    gamingProfiles?: boolean | User$gamingProfilesArgs<ExtArgs>
    sentFriendRequests?: boolean | User$sentFriendRequestsArgs<ExtArgs>
    receivedFriendRequests?: boolean | User$receivedFriendRequestsArgs<ExtArgs>
    activities?: boolean | User$activitiesArgs<ExtArgs>
    settings?: boolean | User$settingsArgs<ExtArgs>
    matchmakingPreferences?: boolean | User$matchmakingPreferencesArgs<ExtArgs>
    organizedTournaments?: boolean | User$organizedTournamentsArgs<ExtArgs>
    tournamentParticipation?: boolean | User$tournamentParticipationArgs<ExtArgs>
    forumPosts?: boolean | User$forumPostsArgs<ExtArgs>
    forumReplies?: boolean | User$forumRepliesArgs<ExtArgs>
    forumPostLikes?: boolean | User$forumPostLikesArgs<ExtArgs>
    forumReplyLikes?: boolean | User$forumReplyLikesArgs<ExtArgs>
    tournamentMatchesPlayer1?: boolean | User$tournamentMatchesPlayer1Args<ExtArgs>
    tournamentMatchesPlayer2?: boolean | User$tournamentMatchesPlayer2Args<ExtArgs>
    tournamentMatchWins?: boolean | User$tournamentMatchWinsArgs<ExtArgs>
    matchResultsWins?: boolean | User$matchResultsWinsArgs<ExtArgs>
    matchResultsLosses?: boolean | User$matchResultsLossesArgs<ExtArgs>
    matchResultsReported?: boolean | User$matchResultsReportedArgs<ExtArgs>
    matchResultsVerified?: boolean | User$matchResultsVerifiedArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    profileImageUrl?: boolean
    primaryCommunity?: boolean
    username?: boolean
    bio?: boolean
    location?: boolean
    website?: boolean
    status?: boolean
    statusMessage?: boolean
    timezone?: boolean
    dateOfBirth?: boolean
    isPrivate?: boolean
    showOnlineStatus?: boolean
    allowDirectMessages?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    profileImageUrl?: boolean
    primaryCommunity?: boolean
    username?: boolean
    bio?: boolean
    location?: boolean
    website?: boolean
    status?: boolean
    statusMessage?: boolean
    timezone?: boolean
    dateOfBirth?: boolean
    isPrivate?: boolean
    showOnlineStatus?: boolean
    allowDirectMessages?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    profileImageUrl?: boolean
    primaryCommunity?: boolean
    username?: boolean
    bio?: boolean
    location?: boolean
    website?: boolean
    status?: boolean
    statusMessage?: boolean
    timezone?: boolean
    dateOfBirth?: boolean
    isPrivate?: boolean
    showOnlineStatus?: boolean
    allowDirectMessages?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "firstName" | "lastName" | "profileImageUrl" | "primaryCommunity" | "username" | "bio" | "location" | "website" | "status" | "statusMessage" | "timezone" | "dateOfBirth" | "isPrivate" | "showOnlineStatus" | "allowDirectMessages" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    userCommunities?: boolean | User$userCommunitiesArgs<ExtArgs>
    themePreferences?: boolean | User$themePreferencesArgs<ExtArgs>
    createdEvents?: boolean | User$createdEventsArgs<ExtArgs>
    hostedEvents?: boolean | User$hostedEventsArgs<ExtArgs>
    coHostedEvents?: boolean | User$coHostedEventsArgs<ExtArgs>
    eventAttendees?: boolean | User$eventAttendeesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    receivedMessages?: boolean | User$receivedMessagesArgs<ExtArgs>
    hostedGameSessions?: boolean | User$hostedGameSessionsArgs<ExtArgs>
    coHostedGameSessions?: boolean | User$coHostedGameSessionsArgs<ExtArgs>
    socialLinks?: boolean | User$socialLinksArgs<ExtArgs>
    gamingProfiles?: boolean | User$gamingProfilesArgs<ExtArgs>
    sentFriendRequests?: boolean | User$sentFriendRequestsArgs<ExtArgs>
    receivedFriendRequests?: boolean | User$receivedFriendRequestsArgs<ExtArgs>
    activities?: boolean | User$activitiesArgs<ExtArgs>
    settings?: boolean | User$settingsArgs<ExtArgs>
    matchmakingPreferences?: boolean | User$matchmakingPreferencesArgs<ExtArgs>
    organizedTournaments?: boolean | User$organizedTournamentsArgs<ExtArgs>
    tournamentParticipation?: boolean | User$tournamentParticipationArgs<ExtArgs>
    forumPosts?: boolean | User$forumPostsArgs<ExtArgs>
    forumReplies?: boolean | User$forumRepliesArgs<ExtArgs>
    forumPostLikes?: boolean | User$forumPostLikesArgs<ExtArgs>
    forumReplyLikes?: boolean | User$forumReplyLikesArgs<ExtArgs>
    tournamentMatchesPlayer1?: boolean | User$tournamentMatchesPlayer1Args<ExtArgs>
    tournamentMatchesPlayer2?: boolean | User$tournamentMatchesPlayer2Args<ExtArgs>
    tournamentMatchWins?: boolean | User$tournamentMatchWinsArgs<ExtArgs>
    matchResultsWins?: boolean | User$matchResultsWinsArgs<ExtArgs>
    matchResultsLosses?: boolean | User$matchResultsLossesArgs<ExtArgs>
    matchResultsReported?: boolean | User$matchResultsReportedArgs<ExtArgs>
    matchResultsVerified?: boolean | User$matchResultsVerifiedArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      userCommunities: Prisma.$UserCommunityPayload<ExtArgs>[]
      themePreferences: Prisma.$ThemePreferencePayload<ExtArgs>[]
      createdEvents: Prisma.$EventPayload<ExtArgs>[]
      hostedEvents: Prisma.$EventPayload<ExtArgs>[]
      coHostedEvents: Prisma.$EventPayload<ExtArgs>[]
      eventAttendees: Prisma.$EventAttendeePayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      sentMessages: Prisma.$MessagePayload<ExtArgs>[]
      receivedMessages: Prisma.$MessagePayload<ExtArgs>[]
      hostedGameSessions: Prisma.$GameSessionPayload<ExtArgs>[]
      coHostedGameSessions: Prisma.$GameSessionPayload<ExtArgs>[]
      socialLinks: Prisma.$UserSocialLinkPayload<ExtArgs>[]
      gamingProfiles: Prisma.$UserGamingProfilePayload<ExtArgs>[]
      sentFriendRequests: Prisma.$FriendshipPayload<ExtArgs>[]
      receivedFriendRequests: Prisma.$FriendshipPayload<ExtArgs>[]
      activities: Prisma.$UserActivityPayload<ExtArgs>[]
      settings: Prisma.$UserSettingsPayload<ExtArgs>[]
      matchmakingPreferences: Prisma.$MatchmakingPreferencePayload<ExtArgs>[]
      organizedTournaments: Prisma.$TournamentPayload<ExtArgs>[]
      tournamentParticipation: Prisma.$TournamentParticipantPayload<ExtArgs>[]
      forumPosts: Prisma.$ForumPostPayload<ExtArgs>[]
      forumReplies: Prisma.$ForumReplyPayload<ExtArgs>[]
      forumPostLikes: Prisma.$ForumPostLikePayload<ExtArgs>[]
      forumReplyLikes: Prisma.$ForumReplyLikePayload<ExtArgs>[]
      tournamentMatchesPlayer1: Prisma.$TournamentMatchPayload<ExtArgs>[]
      tournamentMatchesPlayer2: Prisma.$TournamentMatchPayload<ExtArgs>[]
      tournamentMatchWins: Prisma.$TournamentMatchPayload<ExtArgs>[]
      matchResultsWins: Prisma.$MatchResultPayload<ExtArgs>[]
      matchResultsLosses: Prisma.$MatchResultPayload<ExtArgs>[]
      matchResultsReported: Prisma.$MatchResultPayload<ExtArgs>[]
      matchResultsVerified: Prisma.$MatchResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string | null
      firstName: string | null
      lastName: string | null
      profileImageUrl: string | null
      primaryCommunity: string | null
      username: string | null
      bio: string | null
      location: string | null
      website: string | null
      status: string | null
      statusMessage: string | null
      timezone: string | null
      dateOfBirth: string | null
      isPrivate: boolean
      showOnlineStatus: string
      allowDirectMessages: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userCommunities<T extends User$userCommunitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$userCommunitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    themePreferences<T extends User$themePreferencesArgs<ExtArgs> = {}>(args?: Subset<T, User$themePreferencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemePreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdEvents<T extends User$createdEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    hostedEvents<T extends User$hostedEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$hostedEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    coHostedEvents<T extends User$coHostedEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$coHostedEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    eventAttendees<T extends User$eventAttendeesArgs<ExtArgs> = {}>(args?: Subset<T, User$eventAttendeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sentMessages<T extends User$sentMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$sentMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receivedMessages<T extends User$receivedMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    hostedGameSessions<T extends User$hostedGameSessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$hostedGameSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    coHostedGameSessions<T extends User$coHostedGameSessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$coHostedGameSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    socialLinks<T extends User$socialLinksArgs<ExtArgs> = {}>(args?: Subset<T, User$socialLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSocialLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    gamingProfiles<T extends User$gamingProfilesArgs<ExtArgs> = {}>(args?: Subset<T, User$gamingProfilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserGamingProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sentFriendRequests<T extends User$sentFriendRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$sentFriendRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receivedFriendRequests<T extends User$receivedFriendRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedFriendRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    activities<T extends User$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    settings<T extends User$settingsArgs<ExtArgs> = {}>(args?: Subset<T, User$settingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matchmakingPreferences<T extends User$matchmakingPreferencesArgs<ExtArgs> = {}>(args?: Subset<T, User$matchmakingPreferencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchmakingPreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    organizedTournaments<T extends User$organizedTournamentsArgs<ExtArgs> = {}>(args?: Subset<T, User$organizedTournamentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tournamentParticipation<T extends User$tournamentParticipationArgs<ExtArgs> = {}>(args?: Subset<T, User$tournamentParticipationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    forumPosts<T extends User$forumPostsArgs<ExtArgs> = {}>(args?: Subset<T, User$forumPostsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    forumReplies<T extends User$forumRepliesArgs<ExtArgs> = {}>(args?: Subset<T, User$forumRepliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumReplyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    forumPostLikes<T extends User$forumPostLikesArgs<ExtArgs> = {}>(args?: Subset<T, User$forumPostLikesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumPostLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    forumReplyLikes<T extends User$forumReplyLikesArgs<ExtArgs> = {}>(args?: Subset<T, User$forumReplyLikesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumReplyLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tournamentMatchesPlayer1<T extends User$tournamentMatchesPlayer1Args<ExtArgs> = {}>(args?: Subset<T, User$tournamentMatchesPlayer1Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tournamentMatchesPlayer2<T extends User$tournamentMatchesPlayer2Args<ExtArgs> = {}>(args?: Subset<T, User$tournamentMatchesPlayer2Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tournamentMatchWins<T extends User$tournamentMatchWinsArgs<ExtArgs> = {}>(args?: Subset<T, User$tournamentMatchWinsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matchResultsWins<T extends User$matchResultsWinsArgs<ExtArgs> = {}>(args?: Subset<T, User$matchResultsWinsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matchResultsLosses<T extends User$matchResultsLossesArgs<ExtArgs> = {}>(args?: Subset<T, User$matchResultsLossesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matchResultsReported<T extends User$matchResultsReportedArgs<ExtArgs> = {}>(args?: Subset<T, User$matchResultsReportedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matchResultsVerified<T extends User$matchResultsVerifiedArgs<ExtArgs> = {}>(args?: Subset<T, User$matchResultsVerifiedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly profileImageUrl: FieldRef<"User", 'String'>
    readonly primaryCommunity: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly location: FieldRef<"User", 'String'>
    readonly website: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'String'>
    readonly statusMessage: FieldRef<"User", 'String'>
    readonly timezone: FieldRef<"User", 'String'>
    readonly dateOfBirth: FieldRef<"User", 'String'>
    readonly isPrivate: FieldRef<"User", 'Boolean'>
    readonly showOnlineStatus: FieldRef<"User", 'String'>
    readonly allowDirectMessages: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data?: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.userCommunities
   */
  export type User$userCommunitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCommunity
     */
    omit?: UserCommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    where?: UserCommunityWhereInput
    orderBy?: UserCommunityOrderByWithRelationInput | UserCommunityOrderByWithRelationInput[]
    cursor?: UserCommunityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCommunityScalarFieldEnum | UserCommunityScalarFieldEnum[]
  }

  /**
   * User.themePreferences
   */
  export type User$themePreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemePreference
     */
    select?: ThemePreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemePreference
     */
    omit?: ThemePreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemePreferenceInclude<ExtArgs> | null
    where?: ThemePreferenceWhereInput
    orderBy?: ThemePreferenceOrderByWithRelationInput | ThemePreferenceOrderByWithRelationInput[]
    cursor?: ThemePreferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ThemePreferenceScalarFieldEnum | ThemePreferenceScalarFieldEnum[]
  }

  /**
   * User.createdEvents
   */
  export type User$createdEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * User.hostedEvents
   */
  export type User$hostedEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * User.coHostedEvents
   */
  export type User$coHostedEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * User.eventAttendees
   */
  export type User$eventAttendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    where?: EventAttendeeWhereInput
    orderBy?: EventAttendeeOrderByWithRelationInput | EventAttendeeOrderByWithRelationInput[]
    cursor?: EventAttendeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventAttendeeScalarFieldEnum | EventAttendeeScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.sentMessages
   */
  export type User$sentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.receivedMessages
   */
  export type User$receivedMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.hostedGameSessions
   */
  export type User$hostedGameSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    where?: GameSessionWhereInput
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    cursor?: GameSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameSessionScalarFieldEnum | GameSessionScalarFieldEnum[]
  }

  /**
   * User.coHostedGameSessions
   */
  export type User$coHostedGameSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    where?: GameSessionWhereInput
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    cursor?: GameSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameSessionScalarFieldEnum | GameSessionScalarFieldEnum[]
  }

  /**
   * User.socialLinks
   */
  export type User$socialLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialLink
     */
    select?: UserSocialLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialLink
     */
    omit?: UserSocialLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialLinkInclude<ExtArgs> | null
    where?: UserSocialLinkWhereInput
    orderBy?: UserSocialLinkOrderByWithRelationInput | UserSocialLinkOrderByWithRelationInput[]
    cursor?: UserSocialLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSocialLinkScalarFieldEnum | UserSocialLinkScalarFieldEnum[]
  }

  /**
   * User.gamingProfiles
   */
  export type User$gamingProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGamingProfile
     */
    select?: UserGamingProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGamingProfile
     */
    omit?: UserGamingProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGamingProfileInclude<ExtArgs> | null
    where?: UserGamingProfileWhereInput
    orderBy?: UserGamingProfileOrderByWithRelationInput | UserGamingProfileOrderByWithRelationInput[]
    cursor?: UserGamingProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserGamingProfileScalarFieldEnum | UserGamingProfileScalarFieldEnum[]
  }

  /**
   * User.sentFriendRequests
   */
  export type User$sentFriendRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    where?: FriendshipWhereInput
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    cursor?: FriendshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * User.receivedFriendRequests
   */
  export type User$receivedFriendRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    where?: FriendshipWhereInput
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    cursor?: FriendshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * User.activities
   */
  export type User$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    where?: UserActivityWhereInput
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    cursor?: UserActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserActivityScalarFieldEnum | UserActivityScalarFieldEnum[]
  }

  /**
   * User.settings
   */
  export type User$settingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    where?: UserSettingsWhereInput
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    cursor?: UserSettingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * User.matchmakingPreferences
   */
  export type User$matchmakingPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingPreference
     */
    select?: MatchmakingPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchmakingPreference
     */
    omit?: MatchmakingPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchmakingPreferenceInclude<ExtArgs> | null
    where?: MatchmakingPreferenceWhereInput
    orderBy?: MatchmakingPreferenceOrderByWithRelationInput | MatchmakingPreferenceOrderByWithRelationInput[]
    cursor?: MatchmakingPreferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchmakingPreferenceScalarFieldEnum | MatchmakingPreferenceScalarFieldEnum[]
  }

  /**
   * User.organizedTournaments
   */
  export type User$organizedTournamentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    where?: TournamentWhereInput
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    cursor?: TournamentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * User.tournamentParticipation
   */
  export type User$tournamentParticipationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentParticipant
     */
    select?: TournamentParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentParticipant
     */
    omit?: TournamentParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentParticipantInclude<ExtArgs> | null
    where?: TournamentParticipantWhereInput
    orderBy?: TournamentParticipantOrderByWithRelationInput | TournamentParticipantOrderByWithRelationInput[]
    cursor?: TournamentParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentParticipantScalarFieldEnum | TournamentParticipantScalarFieldEnum[]
  }

  /**
   * User.forumPosts
   */
  export type User$forumPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    where?: ForumPostWhereInput
    orderBy?: ForumPostOrderByWithRelationInput | ForumPostOrderByWithRelationInput[]
    cursor?: ForumPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumPostScalarFieldEnum | ForumPostScalarFieldEnum[]
  }

  /**
   * User.forumReplies
   */
  export type User$forumRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReply
     */
    select?: ForumReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReply
     */
    omit?: ForumReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyInclude<ExtArgs> | null
    where?: ForumReplyWhereInput
    orderBy?: ForumReplyOrderByWithRelationInput | ForumReplyOrderByWithRelationInput[]
    cursor?: ForumReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumReplyScalarFieldEnum | ForumReplyScalarFieldEnum[]
  }

  /**
   * User.forumPostLikes
   */
  export type User$forumPostLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostLike
     */
    select?: ForumPostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostLike
     */
    omit?: ForumPostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostLikeInclude<ExtArgs> | null
    where?: ForumPostLikeWhereInput
    orderBy?: ForumPostLikeOrderByWithRelationInput | ForumPostLikeOrderByWithRelationInput[]
    cursor?: ForumPostLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumPostLikeScalarFieldEnum | ForumPostLikeScalarFieldEnum[]
  }

  /**
   * User.forumReplyLikes
   */
  export type User$forumReplyLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReplyLike
     */
    select?: ForumReplyLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReplyLike
     */
    omit?: ForumReplyLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyLikeInclude<ExtArgs> | null
    where?: ForumReplyLikeWhereInput
    orderBy?: ForumReplyLikeOrderByWithRelationInput | ForumReplyLikeOrderByWithRelationInput[]
    cursor?: ForumReplyLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumReplyLikeScalarFieldEnum | ForumReplyLikeScalarFieldEnum[]
  }

  /**
   * User.tournamentMatchesPlayer1
   */
  export type User$tournamentMatchesPlayer1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentMatch
     */
    omit?: TournamentMatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    where?: TournamentMatchWhereInput
    orderBy?: TournamentMatchOrderByWithRelationInput | TournamentMatchOrderByWithRelationInput[]
    cursor?: TournamentMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentMatchScalarFieldEnum | TournamentMatchScalarFieldEnum[]
  }

  /**
   * User.tournamentMatchesPlayer2
   */
  export type User$tournamentMatchesPlayer2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentMatch
     */
    omit?: TournamentMatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    where?: TournamentMatchWhereInput
    orderBy?: TournamentMatchOrderByWithRelationInput | TournamentMatchOrderByWithRelationInput[]
    cursor?: TournamentMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentMatchScalarFieldEnum | TournamentMatchScalarFieldEnum[]
  }

  /**
   * User.tournamentMatchWins
   */
  export type User$tournamentMatchWinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentMatch
     */
    omit?: TournamentMatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    where?: TournamentMatchWhereInput
    orderBy?: TournamentMatchOrderByWithRelationInput | TournamentMatchOrderByWithRelationInput[]
    cursor?: TournamentMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentMatchScalarFieldEnum | TournamentMatchScalarFieldEnum[]
  }

  /**
   * User.matchResultsWins
   */
  export type User$matchResultsWinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchResult
     */
    select?: MatchResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchResult
     */
    omit?: MatchResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchResultInclude<ExtArgs> | null
    where?: MatchResultWhereInput
    orderBy?: MatchResultOrderByWithRelationInput | MatchResultOrderByWithRelationInput[]
    cursor?: MatchResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchResultScalarFieldEnum | MatchResultScalarFieldEnum[]
  }

  /**
   * User.matchResultsLosses
   */
  export type User$matchResultsLossesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchResult
     */
    select?: MatchResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchResult
     */
    omit?: MatchResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchResultInclude<ExtArgs> | null
    where?: MatchResultWhereInput
    orderBy?: MatchResultOrderByWithRelationInput | MatchResultOrderByWithRelationInput[]
    cursor?: MatchResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchResultScalarFieldEnum | MatchResultScalarFieldEnum[]
  }

  /**
   * User.matchResultsReported
   */
  export type User$matchResultsReportedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchResult
     */
    select?: MatchResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchResult
     */
    omit?: MatchResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchResultInclude<ExtArgs> | null
    where?: MatchResultWhereInput
    orderBy?: MatchResultOrderByWithRelationInput | MatchResultOrderByWithRelationInput[]
    cursor?: MatchResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchResultScalarFieldEnum | MatchResultScalarFieldEnum[]
  }

  /**
   * User.matchResultsVerified
   */
  export type User$matchResultsVerifiedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchResult
     */
    select?: MatchResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchResult
     */
    omit?: MatchResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchResultInclude<ExtArgs> | null
    where?: MatchResultWhereInput
    orderBy?: MatchResultOrderByWithRelationInput | MatchResultOrderByWithRelationInput[]
    cursor?: MatchResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchResultScalarFieldEnum | MatchResultScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Community
   */

  export type AggregateCommunity = {
    _count: CommunityCountAggregateOutputType | null
    _min: CommunityMinAggregateOutputType | null
    _max: CommunityMaxAggregateOutputType | null
  }

  export type CommunityMinAggregateOutputType = {
    id: string | null
    name: string | null
    displayName: string | null
    description: string | null
    themeColor: string | null
    iconClass: string | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type CommunityMaxAggregateOutputType = {
    id: string | null
    name: string | null
    displayName: string | null
    description: string | null
    themeColor: string | null
    iconClass: string | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type CommunityCountAggregateOutputType = {
    id: number
    name: number
    displayName: number
    description: number
    themeColor: number
    iconClass: number
    isActive: number
    createdAt: number
    _all: number
  }


  export type CommunityMinAggregateInputType = {
    id?: true
    name?: true
    displayName?: true
    description?: true
    themeColor?: true
    iconClass?: true
    isActive?: true
    createdAt?: true
  }

  export type CommunityMaxAggregateInputType = {
    id?: true
    name?: true
    displayName?: true
    description?: true
    themeColor?: true
    iconClass?: true
    isActive?: true
    createdAt?: true
  }

  export type CommunityCountAggregateInputType = {
    id?: true
    name?: true
    displayName?: true
    description?: true
    themeColor?: true
    iconClass?: true
    isActive?: true
    createdAt?: true
    _all?: true
  }

  export type CommunityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Community to aggregate.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Communities
    **/
    _count?: true | CommunityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommunityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommunityMaxAggregateInputType
  }

  export type GetCommunityAggregateType<T extends CommunityAggregateArgs> = {
        [P in keyof T & keyof AggregateCommunity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommunity[P]>
      : GetScalarType<T[P], AggregateCommunity[P]>
  }




  export type CommunityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunityWhereInput
    orderBy?: CommunityOrderByWithAggregationInput | CommunityOrderByWithAggregationInput[]
    by: CommunityScalarFieldEnum[] | CommunityScalarFieldEnum
    having?: CommunityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommunityCountAggregateInputType | true
    _min?: CommunityMinAggregateInputType
    _max?: CommunityMaxAggregateInputType
  }

  export type CommunityGroupByOutputType = {
    id: string
    name: string
    displayName: string
    description: string | null
    themeColor: string
    iconClass: string
    isActive: boolean
    createdAt: Date
    _count: CommunityCountAggregateOutputType | null
    _min: CommunityMinAggregateOutputType | null
    _max: CommunityMaxAggregateOutputType | null
  }

  type GetCommunityGroupByPayload<T extends CommunityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommunityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommunityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommunityGroupByOutputType[P]>
            : GetScalarType<T[P], CommunityGroupByOutputType[P]>
        }
      >
    >


  export type CommunitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    displayName?: boolean
    description?: boolean
    themeColor?: boolean
    iconClass?: boolean
    isActive?: boolean
    createdAt?: boolean
    userCommunities?: boolean | Community$userCommunitiesArgs<ExtArgs>
    themePreferences?: boolean | Community$themePreferencesArgs<ExtArgs>
    events?: boolean | Community$eventsArgs<ExtArgs>
    forumPosts?: boolean | Community$forumPostsArgs<ExtArgs>
    tournaments?: boolean | Community$tournamentsArgs<ExtArgs>
    _count?: boolean | CommunityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["community"]>

  export type CommunitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    displayName?: boolean
    description?: boolean
    themeColor?: boolean
    iconClass?: boolean
    isActive?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["community"]>

  export type CommunitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    displayName?: boolean
    description?: boolean
    themeColor?: boolean
    iconClass?: boolean
    isActive?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["community"]>

  export type CommunitySelectScalar = {
    id?: boolean
    name?: boolean
    displayName?: boolean
    description?: boolean
    themeColor?: boolean
    iconClass?: boolean
    isActive?: boolean
    createdAt?: boolean
  }

  export type CommunityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "displayName" | "description" | "themeColor" | "iconClass" | "isActive" | "createdAt", ExtArgs["result"]["community"]>
  export type CommunityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userCommunities?: boolean | Community$userCommunitiesArgs<ExtArgs>
    themePreferences?: boolean | Community$themePreferencesArgs<ExtArgs>
    events?: boolean | Community$eventsArgs<ExtArgs>
    forumPosts?: boolean | Community$forumPostsArgs<ExtArgs>
    tournaments?: boolean | Community$tournamentsArgs<ExtArgs>
    _count?: boolean | CommunityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CommunityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CommunityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CommunityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Community"
    objects: {
      userCommunities: Prisma.$UserCommunityPayload<ExtArgs>[]
      themePreferences: Prisma.$ThemePreferencePayload<ExtArgs>[]
      events: Prisma.$EventPayload<ExtArgs>[]
      forumPosts: Prisma.$ForumPostPayload<ExtArgs>[]
      tournaments: Prisma.$TournamentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      displayName: string
      description: string | null
      themeColor: string
      iconClass: string
      isActive: boolean
      createdAt: Date
    }, ExtArgs["result"]["community"]>
    composites: {}
  }

  type CommunityGetPayload<S extends boolean | null | undefined | CommunityDefaultArgs> = $Result.GetResult<Prisma.$CommunityPayload, S>

  type CommunityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommunityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommunityCountAggregateInputType | true
    }

  export interface CommunityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Community'], meta: { name: 'Community' } }
    /**
     * Find zero or one Community that matches the filter.
     * @param {CommunityFindUniqueArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommunityFindUniqueArgs>(args: SelectSubset<T, CommunityFindUniqueArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Community that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommunityFindUniqueOrThrowArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommunityFindUniqueOrThrowArgs>(args: SelectSubset<T, CommunityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Community that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityFindFirstArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommunityFindFirstArgs>(args?: SelectSubset<T, CommunityFindFirstArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Community that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityFindFirstOrThrowArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommunityFindFirstOrThrowArgs>(args?: SelectSubset<T, CommunityFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Communities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Communities
     * const communities = await prisma.community.findMany()
     * 
     * // Get first 10 Communities
     * const communities = await prisma.community.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const communityWithIdOnly = await prisma.community.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommunityFindManyArgs>(args?: SelectSubset<T, CommunityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Community.
     * @param {CommunityCreateArgs} args - Arguments to create a Community.
     * @example
     * // Create one Community
     * const Community = await prisma.community.create({
     *   data: {
     *     // ... data to create a Community
     *   }
     * })
     * 
     */
    create<T extends CommunityCreateArgs>(args: SelectSubset<T, CommunityCreateArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Communities.
     * @param {CommunityCreateManyArgs} args - Arguments to create many Communities.
     * @example
     * // Create many Communities
     * const community = await prisma.community.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommunityCreateManyArgs>(args?: SelectSubset<T, CommunityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Communities and returns the data saved in the database.
     * @param {CommunityCreateManyAndReturnArgs} args - Arguments to create many Communities.
     * @example
     * // Create many Communities
     * const community = await prisma.community.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Communities and only return the `id`
     * const communityWithIdOnly = await prisma.community.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommunityCreateManyAndReturnArgs>(args?: SelectSubset<T, CommunityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Community.
     * @param {CommunityDeleteArgs} args - Arguments to delete one Community.
     * @example
     * // Delete one Community
     * const Community = await prisma.community.delete({
     *   where: {
     *     // ... filter to delete one Community
     *   }
     * })
     * 
     */
    delete<T extends CommunityDeleteArgs>(args: SelectSubset<T, CommunityDeleteArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Community.
     * @param {CommunityUpdateArgs} args - Arguments to update one Community.
     * @example
     * // Update one Community
     * const community = await prisma.community.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommunityUpdateArgs>(args: SelectSubset<T, CommunityUpdateArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Communities.
     * @param {CommunityDeleteManyArgs} args - Arguments to filter Communities to delete.
     * @example
     * // Delete a few Communities
     * const { count } = await prisma.community.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommunityDeleteManyArgs>(args?: SelectSubset<T, CommunityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Communities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Communities
     * const community = await prisma.community.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommunityUpdateManyArgs>(args: SelectSubset<T, CommunityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Communities and returns the data updated in the database.
     * @param {CommunityUpdateManyAndReturnArgs} args - Arguments to update many Communities.
     * @example
     * // Update many Communities
     * const community = await prisma.community.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Communities and only return the `id`
     * const communityWithIdOnly = await prisma.community.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommunityUpdateManyAndReturnArgs>(args: SelectSubset<T, CommunityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Community.
     * @param {CommunityUpsertArgs} args - Arguments to update or create a Community.
     * @example
     * // Update or create a Community
     * const community = await prisma.community.upsert({
     *   create: {
     *     // ... data to create a Community
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Community we want to update
     *   }
     * })
     */
    upsert<T extends CommunityUpsertArgs>(args: SelectSubset<T, CommunityUpsertArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Communities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityCountArgs} args - Arguments to filter Communities to count.
     * @example
     * // Count the number of Communities
     * const count = await prisma.community.count({
     *   where: {
     *     // ... the filter for the Communities we want to count
     *   }
     * })
    **/
    count<T extends CommunityCountArgs>(
      args?: Subset<T, CommunityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommunityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Community.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommunityAggregateArgs>(args: Subset<T, CommunityAggregateArgs>): Prisma.PrismaPromise<GetCommunityAggregateType<T>>

    /**
     * Group by Community.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommunityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommunityGroupByArgs['orderBy'] }
        : { orderBy?: CommunityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommunityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommunityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Community model
   */
  readonly fields: CommunityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Community.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommunityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userCommunities<T extends Community$userCommunitiesArgs<ExtArgs> = {}>(args?: Subset<T, Community$userCommunitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    themePreferences<T extends Community$themePreferencesArgs<ExtArgs> = {}>(args?: Subset<T, Community$themePreferencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemePreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    events<T extends Community$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Community$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    forumPosts<T extends Community$forumPostsArgs<ExtArgs> = {}>(args?: Subset<T, Community$forumPostsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tournaments<T extends Community$tournamentsArgs<ExtArgs> = {}>(args?: Subset<T, Community$tournamentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Community model
   */
  interface CommunityFieldRefs {
    readonly id: FieldRef<"Community", 'String'>
    readonly name: FieldRef<"Community", 'String'>
    readonly displayName: FieldRef<"Community", 'String'>
    readonly description: FieldRef<"Community", 'String'>
    readonly themeColor: FieldRef<"Community", 'String'>
    readonly iconClass: FieldRef<"Community", 'String'>
    readonly isActive: FieldRef<"Community", 'Boolean'>
    readonly createdAt: FieldRef<"Community", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Community findUnique
   */
  export type CommunityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Community
     */
    omit?: CommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter, which Community to fetch.
     */
    where: CommunityWhereUniqueInput
  }

  /**
   * Community findUniqueOrThrow
   */
  export type CommunityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Community
     */
    omit?: CommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter, which Community to fetch.
     */
    where: CommunityWhereUniqueInput
  }

  /**
   * Community findFirst
   */
  export type CommunityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Community
     */
    omit?: CommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter, which Community to fetch.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Communities.
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Communities.
     */
    distinct?: CommunityScalarFieldEnum | CommunityScalarFieldEnum[]
  }

  /**
   * Community findFirstOrThrow
   */
  export type CommunityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Community
     */
    omit?: CommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter, which Community to fetch.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Communities.
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Communities.
     */
    distinct?: CommunityScalarFieldEnum | CommunityScalarFieldEnum[]
  }

  /**
   * Community findMany
   */
  export type CommunityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Community
     */
    omit?: CommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter, which Communities to fetch.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Communities.
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    distinct?: CommunityScalarFieldEnum | CommunityScalarFieldEnum[]
  }

  /**
   * Community create
   */
  export type CommunityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Community
     */
    omit?: CommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * The data needed to create a Community.
     */
    data: XOR<CommunityCreateInput, CommunityUncheckedCreateInput>
  }

  /**
   * Community createMany
   */
  export type CommunityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Communities.
     */
    data: CommunityCreateManyInput | CommunityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Community createManyAndReturn
   */
  export type CommunityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Community
     */
    omit?: CommunityOmit<ExtArgs> | null
    /**
     * The data used to create many Communities.
     */
    data: CommunityCreateManyInput | CommunityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Community update
   */
  export type CommunityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Community
     */
    omit?: CommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * The data needed to update a Community.
     */
    data: XOR<CommunityUpdateInput, CommunityUncheckedUpdateInput>
    /**
     * Choose, which Community to update.
     */
    where: CommunityWhereUniqueInput
  }

  /**
   * Community updateMany
   */
  export type CommunityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Communities.
     */
    data: XOR<CommunityUpdateManyMutationInput, CommunityUncheckedUpdateManyInput>
    /**
     * Filter which Communities to update
     */
    where?: CommunityWhereInput
    /**
     * Limit how many Communities to update.
     */
    limit?: number
  }

  /**
   * Community updateManyAndReturn
   */
  export type CommunityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Community
     */
    omit?: CommunityOmit<ExtArgs> | null
    /**
     * The data used to update Communities.
     */
    data: XOR<CommunityUpdateManyMutationInput, CommunityUncheckedUpdateManyInput>
    /**
     * Filter which Communities to update
     */
    where?: CommunityWhereInput
    /**
     * Limit how many Communities to update.
     */
    limit?: number
  }

  /**
   * Community upsert
   */
  export type CommunityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Community
     */
    omit?: CommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * The filter to search for the Community to update in case it exists.
     */
    where: CommunityWhereUniqueInput
    /**
     * In case the Community found by the `where` argument doesn't exist, create a new Community with this data.
     */
    create: XOR<CommunityCreateInput, CommunityUncheckedCreateInput>
    /**
     * In case the Community was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommunityUpdateInput, CommunityUncheckedUpdateInput>
  }

  /**
   * Community delete
   */
  export type CommunityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Community
     */
    omit?: CommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter which Community to delete.
     */
    where: CommunityWhereUniqueInput
  }

  /**
   * Community deleteMany
   */
  export type CommunityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Communities to delete
     */
    where?: CommunityWhereInput
    /**
     * Limit how many Communities to delete.
     */
    limit?: number
  }

  /**
   * Community.userCommunities
   */
  export type Community$userCommunitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCommunity
     */
    omit?: UserCommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    where?: UserCommunityWhereInput
    orderBy?: UserCommunityOrderByWithRelationInput | UserCommunityOrderByWithRelationInput[]
    cursor?: UserCommunityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCommunityScalarFieldEnum | UserCommunityScalarFieldEnum[]
  }

  /**
   * Community.themePreferences
   */
  export type Community$themePreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemePreference
     */
    select?: ThemePreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemePreference
     */
    omit?: ThemePreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemePreferenceInclude<ExtArgs> | null
    where?: ThemePreferenceWhereInput
    orderBy?: ThemePreferenceOrderByWithRelationInput | ThemePreferenceOrderByWithRelationInput[]
    cursor?: ThemePreferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ThemePreferenceScalarFieldEnum | ThemePreferenceScalarFieldEnum[]
  }

  /**
   * Community.events
   */
  export type Community$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Community.forumPosts
   */
  export type Community$forumPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    where?: ForumPostWhereInput
    orderBy?: ForumPostOrderByWithRelationInput | ForumPostOrderByWithRelationInput[]
    cursor?: ForumPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumPostScalarFieldEnum | ForumPostScalarFieldEnum[]
  }

  /**
   * Community.tournaments
   */
  export type Community$tournamentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    where?: TournamentWhereInput
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    cursor?: TournamentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * Community without action
   */
  export type CommunityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Community
     */
    omit?: CommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
  }


  /**
   * Model UserCommunity
   */

  export type AggregateUserCommunity = {
    _count: UserCommunityCountAggregateOutputType | null
    _min: UserCommunityMinAggregateOutputType | null
    _max: UserCommunityMaxAggregateOutputType | null
  }

  export type UserCommunityMinAggregateOutputType = {
    id: string | null
    userId: string | null
    communityId: string | null
    isPrimary: boolean | null
    joinedAt: Date | null
  }

  export type UserCommunityMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    communityId: string | null
    isPrimary: boolean | null
    joinedAt: Date | null
  }

  export type UserCommunityCountAggregateOutputType = {
    id: number
    userId: number
    communityId: number
    isPrimary: number
    joinedAt: number
    _all: number
  }


  export type UserCommunityMinAggregateInputType = {
    id?: true
    userId?: true
    communityId?: true
    isPrimary?: true
    joinedAt?: true
  }

  export type UserCommunityMaxAggregateInputType = {
    id?: true
    userId?: true
    communityId?: true
    isPrimary?: true
    joinedAt?: true
  }

  export type UserCommunityCountAggregateInputType = {
    id?: true
    userId?: true
    communityId?: true
    isPrimary?: true
    joinedAt?: true
    _all?: true
  }

  export type UserCommunityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCommunity to aggregate.
     */
    where?: UserCommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCommunities to fetch.
     */
    orderBy?: UserCommunityOrderByWithRelationInput | UserCommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserCommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCommunities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCommunities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserCommunities
    **/
    _count?: true | UserCommunityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserCommunityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserCommunityMaxAggregateInputType
  }

  export type GetUserCommunityAggregateType<T extends UserCommunityAggregateArgs> = {
        [P in keyof T & keyof AggregateUserCommunity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserCommunity[P]>
      : GetScalarType<T[P], AggregateUserCommunity[P]>
  }




  export type UserCommunityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCommunityWhereInput
    orderBy?: UserCommunityOrderByWithAggregationInput | UserCommunityOrderByWithAggregationInput[]
    by: UserCommunityScalarFieldEnum[] | UserCommunityScalarFieldEnum
    having?: UserCommunityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCommunityCountAggregateInputType | true
    _min?: UserCommunityMinAggregateInputType
    _max?: UserCommunityMaxAggregateInputType
  }

  export type UserCommunityGroupByOutputType = {
    id: string
    userId: string
    communityId: string
    isPrimary: boolean
    joinedAt: Date
    _count: UserCommunityCountAggregateOutputType | null
    _min: UserCommunityMinAggregateOutputType | null
    _max: UserCommunityMaxAggregateOutputType | null
  }

  type GetUserCommunityGroupByPayload<T extends UserCommunityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserCommunityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserCommunityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserCommunityGroupByOutputType[P]>
            : GetScalarType<T[P], UserCommunityGroupByOutputType[P]>
        }
      >
    >


  export type UserCommunitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    communityId?: boolean
    isPrimary?: boolean
    joinedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCommunity"]>

  export type UserCommunitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    communityId?: boolean
    isPrimary?: boolean
    joinedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCommunity"]>

  export type UserCommunitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    communityId?: boolean
    isPrimary?: boolean
    joinedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCommunity"]>

  export type UserCommunitySelectScalar = {
    id?: boolean
    userId?: boolean
    communityId?: boolean
    isPrimary?: boolean
    joinedAt?: boolean
  }

  export type UserCommunityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "communityId" | "isPrimary" | "joinedAt", ExtArgs["result"]["userCommunity"]>
  export type UserCommunityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
  }
  export type UserCommunityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
  }
  export type UserCommunityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
  }

  export type $UserCommunityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserCommunity"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      community: Prisma.$CommunityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      communityId: string
      isPrimary: boolean
      joinedAt: Date
    }, ExtArgs["result"]["userCommunity"]>
    composites: {}
  }

  type UserCommunityGetPayload<S extends boolean | null | undefined | UserCommunityDefaultArgs> = $Result.GetResult<Prisma.$UserCommunityPayload, S>

  type UserCommunityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserCommunityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCommunityCountAggregateInputType | true
    }

  export interface UserCommunityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserCommunity'], meta: { name: 'UserCommunity' } }
    /**
     * Find zero or one UserCommunity that matches the filter.
     * @param {UserCommunityFindUniqueArgs} args - Arguments to find a UserCommunity
     * @example
     * // Get one UserCommunity
     * const userCommunity = await prisma.userCommunity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserCommunityFindUniqueArgs>(args: SelectSubset<T, UserCommunityFindUniqueArgs<ExtArgs>>): Prisma__UserCommunityClient<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserCommunity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserCommunityFindUniqueOrThrowArgs} args - Arguments to find a UserCommunity
     * @example
     * // Get one UserCommunity
     * const userCommunity = await prisma.userCommunity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserCommunityFindUniqueOrThrowArgs>(args: SelectSubset<T, UserCommunityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserCommunityClient<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserCommunity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommunityFindFirstArgs} args - Arguments to find a UserCommunity
     * @example
     * // Get one UserCommunity
     * const userCommunity = await prisma.userCommunity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserCommunityFindFirstArgs>(args?: SelectSubset<T, UserCommunityFindFirstArgs<ExtArgs>>): Prisma__UserCommunityClient<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserCommunity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommunityFindFirstOrThrowArgs} args - Arguments to find a UserCommunity
     * @example
     * // Get one UserCommunity
     * const userCommunity = await prisma.userCommunity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserCommunityFindFirstOrThrowArgs>(args?: SelectSubset<T, UserCommunityFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserCommunityClient<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserCommunities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommunityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserCommunities
     * const userCommunities = await prisma.userCommunity.findMany()
     * 
     * // Get first 10 UserCommunities
     * const userCommunities = await prisma.userCommunity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userCommunityWithIdOnly = await prisma.userCommunity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserCommunityFindManyArgs>(args?: SelectSubset<T, UserCommunityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserCommunity.
     * @param {UserCommunityCreateArgs} args - Arguments to create a UserCommunity.
     * @example
     * // Create one UserCommunity
     * const UserCommunity = await prisma.userCommunity.create({
     *   data: {
     *     // ... data to create a UserCommunity
     *   }
     * })
     * 
     */
    create<T extends UserCommunityCreateArgs>(args: SelectSubset<T, UserCommunityCreateArgs<ExtArgs>>): Prisma__UserCommunityClient<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserCommunities.
     * @param {UserCommunityCreateManyArgs} args - Arguments to create many UserCommunities.
     * @example
     * // Create many UserCommunities
     * const userCommunity = await prisma.userCommunity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCommunityCreateManyArgs>(args?: SelectSubset<T, UserCommunityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserCommunities and returns the data saved in the database.
     * @param {UserCommunityCreateManyAndReturnArgs} args - Arguments to create many UserCommunities.
     * @example
     * // Create many UserCommunities
     * const userCommunity = await prisma.userCommunity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserCommunities and only return the `id`
     * const userCommunityWithIdOnly = await prisma.userCommunity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCommunityCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCommunityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserCommunity.
     * @param {UserCommunityDeleteArgs} args - Arguments to delete one UserCommunity.
     * @example
     * // Delete one UserCommunity
     * const UserCommunity = await prisma.userCommunity.delete({
     *   where: {
     *     // ... filter to delete one UserCommunity
     *   }
     * })
     * 
     */
    delete<T extends UserCommunityDeleteArgs>(args: SelectSubset<T, UserCommunityDeleteArgs<ExtArgs>>): Prisma__UserCommunityClient<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserCommunity.
     * @param {UserCommunityUpdateArgs} args - Arguments to update one UserCommunity.
     * @example
     * // Update one UserCommunity
     * const userCommunity = await prisma.userCommunity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserCommunityUpdateArgs>(args: SelectSubset<T, UserCommunityUpdateArgs<ExtArgs>>): Prisma__UserCommunityClient<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserCommunities.
     * @param {UserCommunityDeleteManyArgs} args - Arguments to filter UserCommunities to delete.
     * @example
     * // Delete a few UserCommunities
     * const { count } = await prisma.userCommunity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserCommunityDeleteManyArgs>(args?: SelectSubset<T, UserCommunityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserCommunities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommunityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserCommunities
     * const userCommunity = await prisma.userCommunity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserCommunityUpdateManyArgs>(args: SelectSubset<T, UserCommunityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserCommunities and returns the data updated in the database.
     * @param {UserCommunityUpdateManyAndReturnArgs} args - Arguments to update many UserCommunities.
     * @example
     * // Update many UserCommunities
     * const userCommunity = await prisma.userCommunity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserCommunities and only return the `id`
     * const userCommunityWithIdOnly = await prisma.userCommunity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserCommunityUpdateManyAndReturnArgs>(args: SelectSubset<T, UserCommunityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserCommunity.
     * @param {UserCommunityUpsertArgs} args - Arguments to update or create a UserCommunity.
     * @example
     * // Update or create a UserCommunity
     * const userCommunity = await prisma.userCommunity.upsert({
     *   create: {
     *     // ... data to create a UserCommunity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserCommunity we want to update
     *   }
     * })
     */
    upsert<T extends UserCommunityUpsertArgs>(args: SelectSubset<T, UserCommunityUpsertArgs<ExtArgs>>): Prisma__UserCommunityClient<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserCommunities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommunityCountArgs} args - Arguments to filter UserCommunities to count.
     * @example
     * // Count the number of UserCommunities
     * const count = await prisma.userCommunity.count({
     *   where: {
     *     // ... the filter for the UserCommunities we want to count
     *   }
     * })
    **/
    count<T extends UserCommunityCountArgs>(
      args?: Subset<T, UserCommunityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCommunityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserCommunity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommunityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserCommunityAggregateArgs>(args: Subset<T, UserCommunityAggregateArgs>): Prisma.PrismaPromise<GetUserCommunityAggregateType<T>>

    /**
     * Group by UserCommunity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommunityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserCommunityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserCommunityGroupByArgs['orderBy'] }
        : { orderBy?: UserCommunityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserCommunityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserCommunityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserCommunity model
   */
  readonly fields: UserCommunityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserCommunity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserCommunityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    community<T extends CommunityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommunityDefaultArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserCommunity model
   */
  interface UserCommunityFieldRefs {
    readonly id: FieldRef<"UserCommunity", 'String'>
    readonly userId: FieldRef<"UserCommunity", 'String'>
    readonly communityId: FieldRef<"UserCommunity", 'String'>
    readonly isPrimary: FieldRef<"UserCommunity", 'Boolean'>
    readonly joinedAt: FieldRef<"UserCommunity", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserCommunity findUnique
   */
  export type UserCommunityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCommunity
     */
    omit?: UserCommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    /**
     * Filter, which UserCommunity to fetch.
     */
    where: UserCommunityWhereUniqueInput
  }

  /**
   * UserCommunity findUniqueOrThrow
   */
  export type UserCommunityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCommunity
     */
    omit?: UserCommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    /**
     * Filter, which UserCommunity to fetch.
     */
    where: UserCommunityWhereUniqueInput
  }

  /**
   * UserCommunity findFirst
   */
  export type UserCommunityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCommunity
     */
    omit?: UserCommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    /**
     * Filter, which UserCommunity to fetch.
     */
    where?: UserCommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCommunities to fetch.
     */
    orderBy?: UserCommunityOrderByWithRelationInput | UserCommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCommunities.
     */
    cursor?: UserCommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCommunities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCommunities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCommunities.
     */
    distinct?: UserCommunityScalarFieldEnum | UserCommunityScalarFieldEnum[]
  }

  /**
   * UserCommunity findFirstOrThrow
   */
  export type UserCommunityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCommunity
     */
    omit?: UserCommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    /**
     * Filter, which UserCommunity to fetch.
     */
    where?: UserCommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCommunities to fetch.
     */
    orderBy?: UserCommunityOrderByWithRelationInput | UserCommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCommunities.
     */
    cursor?: UserCommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCommunities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCommunities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCommunities.
     */
    distinct?: UserCommunityScalarFieldEnum | UserCommunityScalarFieldEnum[]
  }

  /**
   * UserCommunity findMany
   */
  export type UserCommunityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCommunity
     */
    omit?: UserCommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    /**
     * Filter, which UserCommunities to fetch.
     */
    where?: UserCommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCommunities to fetch.
     */
    orderBy?: UserCommunityOrderByWithRelationInput | UserCommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserCommunities.
     */
    cursor?: UserCommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCommunities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCommunities.
     */
    skip?: number
    distinct?: UserCommunityScalarFieldEnum | UserCommunityScalarFieldEnum[]
  }

  /**
   * UserCommunity create
   */
  export type UserCommunityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCommunity
     */
    omit?: UserCommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    /**
     * The data needed to create a UserCommunity.
     */
    data: XOR<UserCommunityCreateInput, UserCommunityUncheckedCreateInput>
  }

  /**
   * UserCommunity createMany
   */
  export type UserCommunityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserCommunities.
     */
    data: UserCommunityCreateManyInput | UserCommunityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserCommunity createManyAndReturn
   */
  export type UserCommunityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserCommunity
     */
    omit?: UserCommunityOmit<ExtArgs> | null
    /**
     * The data used to create many UserCommunities.
     */
    data: UserCommunityCreateManyInput | UserCommunityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserCommunity update
   */
  export type UserCommunityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCommunity
     */
    omit?: UserCommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    /**
     * The data needed to update a UserCommunity.
     */
    data: XOR<UserCommunityUpdateInput, UserCommunityUncheckedUpdateInput>
    /**
     * Choose, which UserCommunity to update.
     */
    where: UserCommunityWhereUniqueInput
  }

  /**
   * UserCommunity updateMany
   */
  export type UserCommunityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserCommunities.
     */
    data: XOR<UserCommunityUpdateManyMutationInput, UserCommunityUncheckedUpdateManyInput>
    /**
     * Filter which UserCommunities to update
     */
    where?: UserCommunityWhereInput
    /**
     * Limit how many UserCommunities to update.
     */
    limit?: number
  }

  /**
   * UserCommunity updateManyAndReturn
   */
  export type UserCommunityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserCommunity
     */
    omit?: UserCommunityOmit<ExtArgs> | null
    /**
     * The data used to update UserCommunities.
     */
    data: XOR<UserCommunityUpdateManyMutationInput, UserCommunityUncheckedUpdateManyInput>
    /**
     * Filter which UserCommunities to update
     */
    where?: UserCommunityWhereInput
    /**
     * Limit how many UserCommunities to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserCommunity upsert
   */
  export type UserCommunityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCommunity
     */
    omit?: UserCommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    /**
     * The filter to search for the UserCommunity to update in case it exists.
     */
    where: UserCommunityWhereUniqueInput
    /**
     * In case the UserCommunity found by the `where` argument doesn't exist, create a new UserCommunity with this data.
     */
    create: XOR<UserCommunityCreateInput, UserCommunityUncheckedCreateInput>
    /**
     * In case the UserCommunity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserCommunityUpdateInput, UserCommunityUncheckedUpdateInput>
  }

  /**
   * UserCommunity delete
   */
  export type UserCommunityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCommunity
     */
    omit?: UserCommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    /**
     * Filter which UserCommunity to delete.
     */
    where: UserCommunityWhereUniqueInput
  }

  /**
   * UserCommunity deleteMany
   */
  export type UserCommunityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCommunities to delete
     */
    where?: UserCommunityWhereInput
    /**
     * Limit how many UserCommunities to delete.
     */
    limit?: number
  }

  /**
   * UserCommunity without action
   */
  export type UserCommunityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCommunity
     */
    omit?: UserCommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
  }


  /**
   * Model ThemePreference
   */

  export type AggregateThemePreference = {
    _count: ThemePreferenceCountAggregateOutputType | null
    _min: ThemePreferenceMinAggregateOutputType | null
    _max: ThemePreferenceMaxAggregateOutputType | null
  }

  export type ThemePreferenceMinAggregateOutputType = {
    id: string | null
    userId: string | null
    communityId: string | null
    themeMode: string | null
    updatedAt: Date | null
  }

  export type ThemePreferenceMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    communityId: string | null
    themeMode: string | null
    updatedAt: Date | null
  }

  export type ThemePreferenceCountAggregateOutputType = {
    id: number
    userId: number
    communityId: number
    themeMode: number
    customColors: number
    updatedAt: number
    _all: number
  }


  export type ThemePreferenceMinAggregateInputType = {
    id?: true
    userId?: true
    communityId?: true
    themeMode?: true
    updatedAt?: true
  }

  export type ThemePreferenceMaxAggregateInputType = {
    id?: true
    userId?: true
    communityId?: true
    themeMode?: true
    updatedAt?: true
  }

  export type ThemePreferenceCountAggregateInputType = {
    id?: true
    userId?: true
    communityId?: true
    themeMode?: true
    customColors?: true
    updatedAt?: true
    _all?: true
  }

  export type ThemePreferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThemePreference to aggregate.
     */
    where?: ThemePreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemePreferences to fetch.
     */
    orderBy?: ThemePreferenceOrderByWithRelationInput | ThemePreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThemePreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemePreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemePreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ThemePreferences
    **/
    _count?: true | ThemePreferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThemePreferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThemePreferenceMaxAggregateInputType
  }

  export type GetThemePreferenceAggregateType<T extends ThemePreferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateThemePreference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThemePreference[P]>
      : GetScalarType<T[P], AggregateThemePreference[P]>
  }




  export type ThemePreferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThemePreferenceWhereInput
    orderBy?: ThemePreferenceOrderByWithAggregationInput | ThemePreferenceOrderByWithAggregationInput[]
    by: ThemePreferenceScalarFieldEnum[] | ThemePreferenceScalarFieldEnum
    having?: ThemePreferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThemePreferenceCountAggregateInputType | true
    _min?: ThemePreferenceMinAggregateInputType
    _max?: ThemePreferenceMaxAggregateInputType
  }

  export type ThemePreferenceGroupByOutputType = {
    id: string
    userId: string
    communityId: string | null
    themeMode: string
    customColors: JsonValue | null
    updatedAt: Date
    _count: ThemePreferenceCountAggregateOutputType | null
    _min: ThemePreferenceMinAggregateOutputType | null
    _max: ThemePreferenceMaxAggregateOutputType | null
  }

  type GetThemePreferenceGroupByPayload<T extends ThemePreferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThemePreferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThemePreferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThemePreferenceGroupByOutputType[P]>
            : GetScalarType<T[P], ThemePreferenceGroupByOutputType[P]>
        }
      >
    >


  export type ThemePreferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    communityId?: boolean
    themeMode?: boolean
    customColors?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | ThemePreference$communityArgs<ExtArgs>
  }, ExtArgs["result"]["themePreference"]>

  export type ThemePreferenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    communityId?: boolean
    themeMode?: boolean
    customColors?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | ThemePreference$communityArgs<ExtArgs>
  }, ExtArgs["result"]["themePreference"]>

  export type ThemePreferenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    communityId?: boolean
    themeMode?: boolean
    customColors?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | ThemePreference$communityArgs<ExtArgs>
  }, ExtArgs["result"]["themePreference"]>

  export type ThemePreferenceSelectScalar = {
    id?: boolean
    userId?: boolean
    communityId?: boolean
    themeMode?: boolean
    customColors?: boolean
    updatedAt?: boolean
  }

  export type ThemePreferenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "communityId" | "themeMode" | "customColors" | "updatedAt", ExtArgs["result"]["themePreference"]>
  export type ThemePreferenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | ThemePreference$communityArgs<ExtArgs>
  }
  export type ThemePreferenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | ThemePreference$communityArgs<ExtArgs>
  }
  export type ThemePreferenceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | ThemePreference$communityArgs<ExtArgs>
  }

  export type $ThemePreferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ThemePreference"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      community: Prisma.$CommunityPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      communityId: string | null
      themeMode: string
      customColors: Prisma.JsonValue | null
      updatedAt: Date
    }, ExtArgs["result"]["themePreference"]>
    composites: {}
  }

  type ThemePreferenceGetPayload<S extends boolean | null | undefined | ThemePreferenceDefaultArgs> = $Result.GetResult<Prisma.$ThemePreferencePayload, S>

  type ThemePreferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ThemePreferenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ThemePreferenceCountAggregateInputType | true
    }

  export interface ThemePreferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ThemePreference'], meta: { name: 'ThemePreference' } }
    /**
     * Find zero or one ThemePreference that matches the filter.
     * @param {ThemePreferenceFindUniqueArgs} args - Arguments to find a ThemePreference
     * @example
     * // Get one ThemePreference
     * const themePreference = await prisma.themePreference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ThemePreferenceFindUniqueArgs>(args: SelectSubset<T, ThemePreferenceFindUniqueArgs<ExtArgs>>): Prisma__ThemePreferenceClient<$Result.GetResult<Prisma.$ThemePreferencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ThemePreference that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ThemePreferenceFindUniqueOrThrowArgs} args - Arguments to find a ThemePreference
     * @example
     * // Get one ThemePreference
     * const themePreference = await prisma.themePreference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ThemePreferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, ThemePreferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ThemePreferenceClient<$Result.GetResult<Prisma.$ThemePreferencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ThemePreference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemePreferenceFindFirstArgs} args - Arguments to find a ThemePreference
     * @example
     * // Get one ThemePreference
     * const themePreference = await prisma.themePreference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ThemePreferenceFindFirstArgs>(args?: SelectSubset<T, ThemePreferenceFindFirstArgs<ExtArgs>>): Prisma__ThemePreferenceClient<$Result.GetResult<Prisma.$ThemePreferencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ThemePreference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemePreferenceFindFirstOrThrowArgs} args - Arguments to find a ThemePreference
     * @example
     * // Get one ThemePreference
     * const themePreference = await prisma.themePreference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ThemePreferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, ThemePreferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ThemePreferenceClient<$Result.GetResult<Prisma.$ThemePreferencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ThemePreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemePreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ThemePreferences
     * const themePreferences = await prisma.themePreference.findMany()
     * 
     * // Get first 10 ThemePreferences
     * const themePreferences = await prisma.themePreference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const themePreferenceWithIdOnly = await prisma.themePreference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ThemePreferenceFindManyArgs>(args?: SelectSubset<T, ThemePreferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemePreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ThemePreference.
     * @param {ThemePreferenceCreateArgs} args - Arguments to create a ThemePreference.
     * @example
     * // Create one ThemePreference
     * const ThemePreference = await prisma.themePreference.create({
     *   data: {
     *     // ... data to create a ThemePreference
     *   }
     * })
     * 
     */
    create<T extends ThemePreferenceCreateArgs>(args: SelectSubset<T, ThemePreferenceCreateArgs<ExtArgs>>): Prisma__ThemePreferenceClient<$Result.GetResult<Prisma.$ThemePreferencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ThemePreferences.
     * @param {ThemePreferenceCreateManyArgs} args - Arguments to create many ThemePreferences.
     * @example
     * // Create many ThemePreferences
     * const themePreference = await prisma.themePreference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ThemePreferenceCreateManyArgs>(args?: SelectSubset<T, ThemePreferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ThemePreferences and returns the data saved in the database.
     * @param {ThemePreferenceCreateManyAndReturnArgs} args - Arguments to create many ThemePreferences.
     * @example
     * // Create many ThemePreferences
     * const themePreference = await prisma.themePreference.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ThemePreferences and only return the `id`
     * const themePreferenceWithIdOnly = await prisma.themePreference.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ThemePreferenceCreateManyAndReturnArgs>(args?: SelectSubset<T, ThemePreferenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemePreferencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ThemePreference.
     * @param {ThemePreferenceDeleteArgs} args - Arguments to delete one ThemePreference.
     * @example
     * // Delete one ThemePreference
     * const ThemePreference = await prisma.themePreference.delete({
     *   where: {
     *     // ... filter to delete one ThemePreference
     *   }
     * })
     * 
     */
    delete<T extends ThemePreferenceDeleteArgs>(args: SelectSubset<T, ThemePreferenceDeleteArgs<ExtArgs>>): Prisma__ThemePreferenceClient<$Result.GetResult<Prisma.$ThemePreferencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ThemePreference.
     * @param {ThemePreferenceUpdateArgs} args - Arguments to update one ThemePreference.
     * @example
     * // Update one ThemePreference
     * const themePreference = await prisma.themePreference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ThemePreferenceUpdateArgs>(args: SelectSubset<T, ThemePreferenceUpdateArgs<ExtArgs>>): Prisma__ThemePreferenceClient<$Result.GetResult<Prisma.$ThemePreferencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ThemePreferences.
     * @param {ThemePreferenceDeleteManyArgs} args - Arguments to filter ThemePreferences to delete.
     * @example
     * // Delete a few ThemePreferences
     * const { count } = await prisma.themePreference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ThemePreferenceDeleteManyArgs>(args?: SelectSubset<T, ThemePreferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ThemePreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemePreferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ThemePreferences
     * const themePreference = await prisma.themePreference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ThemePreferenceUpdateManyArgs>(args: SelectSubset<T, ThemePreferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ThemePreferences and returns the data updated in the database.
     * @param {ThemePreferenceUpdateManyAndReturnArgs} args - Arguments to update many ThemePreferences.
     * @example
     * // Update many ThemePreferences
     * const themePreference = await prisma.themePreference.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ThemePreferences and only return the `id`
     * const themePreferenceWithIdOnly = await prisma.themePreference.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ThemePreferenceUpdateManyAndReturnArgs>(args: SelectSubset<T, ThemePreferenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemePreferencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ThemePreference.
     * @param {ThemePreferenceUpsertArgs} args - Arguments to update or create a ThemePreference.
     * @example
     * // Update or create a ThemePreference
     * const themePreference = await prisma.themePreference.upsert({
     *   create: {
     *     // ... data to create a ThemePreference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ThemePreference we want to update
     *   }
     * })
     */
    upsert<T extends ThemePreferenceUpsertArgs>(args: SelectSubset<T, ThemePreferenceUpsertArgs<ExtArgs>>): Prisma__ThemePreferenceClient<$Result.GetResult<Prisma.$ThemePreferencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ThemePreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemePreferenceCountArgs} args - Arguments to filter ThemePreferences to count.
     * @example
     * // Count the number of ThemePreferences
     * const count = await prisma.themePreference.count({
     *   where: {
     *     // ... the filter for the ThemePreferences we want to count
     *   }
     * })
    **/
    count<T extends ThemePreferenceCountArgs>(
      args?: Subset<T, ThemePreferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThemePreferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ThemePreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemePreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThemePreferenceAggregateArgs>(args: Subset<T, ThemePreferenceAggregateArgs>): Prisma.PrismaPromise<GetThemePreferenceAggregateType<T>>

    /**
     * Group by ThemePreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemePreferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThemePreferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThemePreferenceGroupByArgs['orderBy'] }
        : { orderBy?: ThemePreferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThemePreferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThemePreferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ThemePreference model
   */
  readonly fields: ThemePreferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ThemePreference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThemePreferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    community<T extends ThemePreference$communityArgs<ExtArgs> = {}>(args?: Subset<T, ThemePreference$communityArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ThemePreference model
   */
  interface ThemePreferenceFieldRefs {
    readonly id: FieldRef<"ThemePreference", 'String'>
    readonly userId: FieldRef<"ThemePreference", 'String'>
    readonly communityId: FieldRef<"ThemePreference", 'String'>
    readonly themeMode: FieldRef<"ThemePreference", 'String'>
    readonly customColors: FieldRef<"ThemePreference", 'Json'>
    readonly updatedAt: FieldRef<"ThemePreference", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ThemePreference findUnique
   */
  export type ThemePreferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemePreference
     */
    select?: ThemePreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemePreference
     */
    omit?: ThemePreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemePreferenceInclude<ExtArgs> | null
    /**
     * Filter, which ThemePreference to fetch.
     */
    where: ThemePreferenceWhereUniqueInput
  }

  /**
   * ThemePreference findUniqueOrThrow
   */
  export type ThemePreferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemePreference
     */
    select?: ThemePreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemePreference
     */
    omit?: ThemePreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemePreferenceInclude<ExtArgs> | null
    /**
     * Filter, which ThemePreference to fetch.
     */
    where: ThemePreferenceWhereUniqueInput
  }

  /**
   * ThemePreference findFirst
   */
  export type ThemePreferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemePreference
     */
    select?: ThemePreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemePreference
     */
    omit?: ThemePreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemePreferenceInclude<ExtArgs> | null
    /**
     * Filter, which ThemePreference to fetch.
     */
    where?: ThemePreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemePreferences to fetch.
     */
    orderBy?: ThemePreferenceOrderByWithRelationInput | ThemePreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThemePreferences.
     */
    cursor?: ThemePreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemePreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemePreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThemePreferences.
     */
    distinct?: ThemePreferenceScalarFieldEnum | ThemePreferenceScalarFieldEnum[]
  }

  /**
   * ThemePreference findFirstOrThrow
   */
  export type ThemePreferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemePreference
     */
    select?: ThemePreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemePreference
     */
    omit?: ThemePreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemePreferenceInclude<ExtArgs> | null
    /**
     * Filter, which ThemePreference to fetch.
     */
    where?: ThemePreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemePreferences to fetch.
     */
    orderBy?: ThemePreferenceOrderByWithRelationInput | ThemePreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThemePreferences.
     */
    cursor?: ThemePreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemePreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemePreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThemePreferences.
     */
    distinct?: ThemePreferenceScalarFieldEnum | ThemePreferenceScalarFieldEnum[]
  }

  /**
   * ThemePreference findMany
   */
  export type ThemePreferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemePreference
     */
    select?: ThemePreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemePreference
     */
    omit?: ThemePreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemePreferenceInclude<ExtArgs> | null
    /**
     * Filter, which ThemePreferences to fetch.
     */
    where?: ThemePreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemePreferences to fetch.
     */
    orderBy?: ThemePreferenceOrderByWithRelationInput | ThemePreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ThemePreferences.
     */
    cursor?: ThemePreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemePreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemePreferences.
     */
    skip?: number
    distinct?: ThemePreferenceScalarFieldEnum | ThemePreferenceScalarFieldEnum[]
  }

  /**
   * ThemePreference create
   */
  export type ThemePreferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemePreference
     */
    select?: ThemePreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemePreference
     */
    omit?: ThemePreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemePreferenceInclude<ExtArgs> | null
    /**
     * The data needed to create a ThemePreference.
     */
    data: XOR<ThemePreferenceCreateInput, ThemePreferenceUncheckedCreateInput>
  }

  /**
   * ThemePreference createMany
   */
  export type ThemePreferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ThemePreferences.
     */
    data: ThemePreferenceCreateManyInput | ThemePreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ThemePreference createManyAndReturn
   */
  export type ThemePreferenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemePreference
     */
    select?: ThemePreferenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ThemePreference
     */
    omit?: ThemePreferenceOmit<ExtArgs> | null
    /**
     * The data used to create many ThemePreferences.
     */
    data: ThemePreferenceCreateManyInput | ThemePreferenceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemePreferenceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ThemePreference update
   */
  export type ThemePreferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemePreference
     */
    select?: ThemePreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemePreference
     */
    omit?: ThemePreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemePreferenceInclude<ExtArgs> | null
    /**
     * The data needed to update a ThemePreference.
     */
    data: XOR<ThemePreferenceUpdateInput, ThemePreferenceUncheckedUpdateInput>
    /**
     * Choose, which ThemePreference to update.
     */
    where: ThemePreferenceWhereUniqueInput
  }

  /**
   * ThemePreference updateMany
   */
  export type ThemePreferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ThemePreferences.
     */
    data: XOR<ThemePreferenceUpdateManyMutationInput, ThemePreferenceUncheckedUpdateManyInput>
    /**
     * Filter which ThemePreferences to update
     */
    where?: ThemePreferenceWhereInput
    /**
     * Limit how many ThemePreferences to update.
     */
    limit?: number
  }

  /**
   * ThemePreference updateManyAndReturn
   */
  export type ThemePreferenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemePreference
     */
    select?: ThemePreferenceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ThemePreference
     */
    omit?: ThemePreferenceOmit<ExtArgs> | null
    /**
     * The data used to update ThemePreferences.
     */
    data: XOR<ThemePreferenceUpdateManyMutationInput, ThemePreferenceUncheckedUpdateManyInput>
    /**
     * Filter which ThemePreferences to update
     */
    where?: ThemePreferenceWhereInput
    /**
     * Limit how many ThemePreferences to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemePreferenceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ThemePreference upsert
   */
  export type ThemePreferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemePreference
     */
    select?: ThemePreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemePreference
     */
    omit?: ThemePreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemePreferenceInclude<ExtArgs> | null
    /**
     * The filter to search for the ThemePreference to update in case it exists.
     */
    where: ThemePreferenceWhereUniqueInput
    /**
     * In case the ThemePreference found by the `where` argument doesn't exist, create a new ThemePreference with this data.
     */
    create: XOR<ThemePreferenceCreateInput, ThemePreferenceUncheckedCreateInput>
    /**
     * In case the ThemePreference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThemePreferenceUpdateInput, ThemePreferenceUncheckedUpdateInput>
  }

  /**
   * ThemePreference delete
   */
  export type ThemePreferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemePreference
     */
    select?: ThemePreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemePreference
     */
    omit?: ThemePreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemePreferenceInclude<ExtArgs> | null
    /**
     * Filter which ThemePreference to delete.
     */
    where: ThemePreferenceWhereUniqueInput
  }

  /**
   * ThemePreference deleteMany
   */
  export type ThemePreferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThemePreferences to delete
     */
    where?: ThemePreferenceWhereInput
    /**
     * Limit how many ThemePreferences to delete.
     */
    limit?: number
  }

  /**
   * ThemePreference.community
   */
  export type ThemePreference$communityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Community
     */
    omit?: CommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    where?: CommunityWhereInput
  }

  /**
   * ThemePreference without action
   */
  export type ThemePreferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemePreference
     */
    select?: ThemePreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemePreference
     */
    omit?: ThemePreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemePreferenceInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    maxAttendees: number | null
    playerSlots: number | null
    alternateSlots: number | null
    powerLevel: number | null
    recurrenceInterval: number | null
  }

  export type EventSumAggregateOutputType = {
    maxAttendees: number | null
    playerSlots: number | null
    alternateSlots: number | null
    powerLevel: number | null
    recurrenceInterval: number | null
  }

  export type EventMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    type: string | null
    date: string | null
    time: string | null
    location: string | null
    communityId: string | null
    creatorId: string | null
    hostId: string | null
    coHostId: string | null
    maxAttendees: number | null
    isPublic: boolean | null
    status: string | null
    playerSlots: number | null
    alternateSlots: number | null
    gameFormat: string | null
    powerLevel: number | null
    isRecurring: boolean | null
    recurrencePattern: string | null
    recurrenceInterval: number | null
    recurrenceEndDate: string | null
    parentEventId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EventMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    type: string | null
    date: string | null
    time: string | null
    location: string | null
    communityId: string | null
    creatorId: string | null
    hostId: string | null
    coHostId: string | null
    maxAttendees: number | null
    isPublic: boolean | null
    status: string | null
    playerSlots: number | null
    alternateSlots: number | null
    gameFormat: string | null
    powerLevel: number | null
    isRecurring: boolean | null
    recurrencePattern: string | null
    recurrenceInterval: number | null
    recurrenceEndDate: string | null
    parentEventId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    title: number
    description: number
    type: number
    date: number
    time: number
    location: number
    communityId: number
    creatorId: number
    hostId: number
    coHostId: number
    maxAttendees: number
    isPublic: number
    status: number
    playerSlots: number
    alternateSlots: number
    gameFormat: number
    powerLevel: number
    isRecurring: number
    recurrencePattern: number
    recurrenceInterval: number
    recurrenceEndDate: number
    parentEventId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    maxAttendees?: true
    playerSlots?: true
    alternateSlots?: true
    powerLevel?: true
    recurrenceInterval?: true
  }

  export type EventSumAggregateInputType = {
    maxAttendees?: true
    playerSlots?: true
    alternateSlots?: true
    powerLevel?: true
    recurrenceInterval?: true
  }

  export type EventMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    date?: true
    time?: true
    location?: true
    communityId?: true
    creatorId?: true
    hostId?: true
    coHostId?: true
    maxAttendees?: true
    isPublic?: true
    status?: true
    playerSlots?: true
    alternateSlots?: true
    gameFormat?: true
    powerLevel?: true
    isRecurring?: true
    recurrencePattern?: true
    recurrenceInterval?: true
    recurrenceEndDate?: true
    parentEventId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    date?: true
    time?: true
    location?: true
    communityId?: true
    creatorId?: true
    hostId?: true
    coHostId?: true
    maxAttendees?: true
    isPublic?: true
    status?: true
    playerSlots?: true
    alternateSlots?: true
    gameFormat?: true
    powerLevel?: true
    isRecurring?: true
    recurrencePattern?: true
    recurrenceInterval?: true
    recurrenceEndDate?: true
    parentEventId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    date?: true
    time?: true
    location?: true
    communityId?: true
    creatorId?: true
    hostId?: true
    coHostId?: true
    maxAttendees?: true
    isPublic?: true
    status?: true
    playerSlots?: true
    alternateSlots?: true
    gameFormat?: true
    powerLevel?: true
    isRecurring?: true
    recurrencePattern?: true
    recurrenceInterval?: true
    recurrenceEndDate?: true
    parentEventId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: string
    title: string
    description: string | null
    type: string
    date: string
    time: string
    location: string
    communityId: string | null
    creatorId: string
    hostId: string
    coHostId: string | null
    maxAttendees: number | null
    isPublic: boolean
    status: string
    playerSlots: number
    alternateSlots: number
    gameFormat: string | null
    powerLevel: number | null
    isRecurring: boolean
    recurrencePattern: string | null
    recurrenceInterval: number
    recurrenceEndDate: string | null
    parentEventId: string | null
    createdAt: Date
    updatedAt: Date
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    date?: boolean
    time?: boolean
    location?: boolean
    communityId?: boolean
    creatorId?: boolean
    hostId?: boolean
    coHostId?: boolean
    maxAttendees?: boolean
    isPublic?: boolean
    status?: boolean
    playerSlots?: boolean
    alternateSlots?: boolean
    gameFormat?: boolean
    powerLevel?: boolean
    isRecurring?: boolean
    recurrencePattern?: boolean
    recurrenceInterval?: boolean
    recurrenceEndDate?: boolean
    parentEventId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    community?: boolean | Event$communityArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    host?: boolean | UserDefaultArgs<ExtArgs>
    coHost?: boolean | Event$coHostArgs<ExtArgs>
    attendees?: boolean | Event$attendeesArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    date?: boolean
    time?: boolean
    location?: boolean
    communityId?: boolean
    creatorId?: boolean
    hostId?: boolean
    coHostId?: boolean
    maxAttendees?: boolean
    isPublic?: boolean
    status?: boolean
    playerSlots?: boolean
    alternateSlots?: boolean
    gameFormat?: boolean
    powerLevel?: boolean
    isRecurring?: boolean
    recurrencePattern?: boolean
    recurrenceInterval?: boolean
    recurrenceEndDate?: boolean
    parentEventId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    community?: boolean | Event$communityArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    host?: boolean | UserDefaultArgs<ExtArgs>
    coHost?: boolean | Event$coHostArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    date?: boolean
    time?: boolean
    location?: boolean
    communityId?: boolean
    creatorId?: boolean
    hostId?: boolean
    coHostId?: boolean
    maxAttendees?: boolean
    isPublic?: boolean
    status?: boolean
    playerSlots?: boolean
    alternateSlots?: boolean
    gameFormat?: boolean
    powerLevel?: boolean
    isRecurring?: boolean
    recurrencePattern?: boolean
    recurrenceInterval?: boolean
    recurrenceEndDate?: boolean
    parentEventId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    community?: boolean | Event$communityArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    host?: boolean | UserDefaultArgs<ExtArgs>
    coHost?: boolean | Event$coHostArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    date?: boolean
    time?: boolean
    location?: boolean
    communityId?: boolean
    creatorId?: boolean
    hostId?: boolean
    coHostId?: boolean
    maxAttendees?: boolean
    isPublic?: boolean
    status?: boolean
    playerSlots?: boolean
    alternateSlots?: boolean
    gameFormat?: boolean
    powerLevel?: boolean
    isRecurring?: boolean
    recurrencePattern?: boolean
    recurrenceInterval?: boolean
    recurrenceEndDate?: boolean
    parentEventId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "type" | "date" | "time" | "location" | "communityId" | "creatorId" | "hostId" | "coHostId" | "maxAttendees" | "isPublic" | "status" | "playerSlots" | "alternateSlots" | "gameFormat" | "powerLevel" | "isRecurring" | "recurrencePattern" | "recurrenceInterval" | "recurrenceEndDate" | "parentEventId" | "createdAt" | "updatedAt", ExtArgs["result"]["event"]>
  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    community?: boolean | Event$communityArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    host?: boolean | UserDefaultArgs<ExtArgs>
    coHost?: boolean | Event$coHostArgs<ExtArgs>
    attendees?: boolean | Event$attendeesArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    community?: boolean | Event$communityArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    host?: boolean | UserDefaultArgs<ExtArgs>
    coHost?: boolean | Event$coHostArgs<ExtArgs>
  }
  export type EventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    community?: boolean | Event$communityArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    host?: boolean | UserDefaultArgs<ExtArgs>
    coHost?: boolean | Event$coHostArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      community: Prisma.$CommunityPayload<ExtArgs> | null
      creator: Prisma.$UserPayload<ExtArgs>
      host: Prisma.$UserPayload<ExtArgs>
      coHost: Prisma.$UserPayload<ExtArgs> | null
      attendees: Prisma.$EventAttendeePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      type: string
      date: string
      time: string
      location: string
      communityId: string | null
      creatorId: string
      hostId: string
      coHostId: string | null
      maxAttendees: number | null
      isPublic: boolean
      status: string
      playerSlots: number
      alternateSlots: number
      gameFormat: string | null
      powerLevel: number | null
      isRecurring: boolean
      recurrencePattern: string | null
      recurrenceInterval: number
      recurrenceEndDate: string | null
      parentEventId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events and returns the data updated in the database.
     * @param {EventUpdateManyAndReturnArgs} args - Arguments to update many Events.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventUpdateManyAndReturnArgs>(args: SelectSubset<T, EventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    community<T extends Event$communityArgs<ExtArgs> = {}>(args?: Subset<T, Event$communityArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    host<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    coHost<T extends Event$coHostArgs<ExtArgs> = {}>(args?: Subset<T, Event$coHostArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    attendees<T extends Event$attendeesArgs<ExtArgs> = {}>(args?: Subset<T, Event$attendeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'String'>
    readonly title: FieldRef<"Event", 'String'>
    readonly description: FieldRef<"Event", 'String'>
    readonly type: FieldRef<"Event", 'String'>
    readonly date: FieldRef<"Event", 'String'>
    readonly time: FieldRef<"Event", 'String'>
    readonly location: FieldRef<"Event", 'String'>
    readonly communityId: FieldRef<"Event", 'String'>
    readonly creatorId: FieldRef<"Event", 'String'>
    readonly hostId: FieldRef<"Event", 'String'>
    readonly coHostId: FieldRef<"Event", 'String'>
    readonly maxAttendees: FieldRef<"Event", 'Int'>
    readonly isPublic: FieldRef<"Event", 'Boolean'>
    readonly status: FieldRef<"Event", 'String'>
    readonly playerSlots: FieldRef<"Event", 'Int'>
    readonly alternateSlots: FieldRef<"Event", 'Int'>
    readonly gameFormat: FieldRef<"Event", 'String'>
    readonly powerLevel: FieldRef<"Event", 'Int'>
    readonly isRecurring: FieldRef<"Event", 'Boolean'>
    readonly recurrencePattern: FieldRef<"Event", 'String'>
    readonly recurrenceInterval: FieldRef<"Event", 'Int'>
    readonly recurrenceEndDate: FieldRef<"Event", 'String'>
    readonly parentEventId: FieldRef<"Event", 'String'>
    readonly createdAt: FieldRef<"Event", 'DateTime'>
    readonly updatedAt: FieldRef<"Event", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
  }

  /**
   * Event updateManyAndReturn
   */
  export type EventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to delete.
     */
    limit?: number
  }

  /**
   * Event.community
   */
  export type Event$communityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Community
     */
    omit?: CommunityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    where?: CommunityWhereInput
  }

  /**
   * Event.coHost
   */
  export type Event$coHostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Event.attendees
   */
  export type Event$attendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    where?: EventAttendeeWhereInput
    orderBy?: EventAttendeeOrderByWithRelationInput | EventAttendeeOrderByWithRelationInput[]
    cursor?: EventAttendeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventAttendeeScalarFieldEnum | EventAttendeeScalarFieldEnum[]
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model EventAttendee
   */

  export type AggregateEventAttendee = {
    _count: EventAttendeeCountAggregateOutputType | null
    _min: EventAttendeeMinAggregateOutputType | null
    _max: EventAttendeeMaxAggregateOutputType | null
  }

  export type EventAttendeeMinAggregateOutputType = {
    id: string | null
    eventId: string | null
    userId: string | null
    status: string | null
    role: string | null
    playerType: string | null
    joinedAt: Date | null
  }

  export type EventAttendeeMaxAggregateOutputType = {
    id: string | null
    eventId: string | null
    userId: string | null
    status: string | null
    role: string | null
    playerType: string | null
    joinedAt: Date | null
  }

  export type EventAttendeeCountAggregateOutputType = {
    id: number
    eventId: number
    userId: number
    status: number
    role: number
    playerType: number
    joinedAt: number
    _all: number
  }


  export type EventAttendeeMinAggregateInputType = {
    id?: true
    eventId?: true
    userId?: true
    status?: true
    role?: true
    playerType?: true
    joinedAt?: true
  }

  export type EventAttendeeMaxAggregateInputType = {
    id?: true
    eventId?: true
    userId?: true
    status?: true
    role?: true
    playerType?: true
    joinedAt?: true
  }

  export type EventAttendeeCountAggregateInputType = {
    id?: true
    eventId?: true
    userId?: true
    status?: true
    role?: true
    playerType?: true
    joinedAt?: true
    _all?: true
  }

  export type EventAttendeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventAttendee to aggregate.
     */
    where?: EventAttendeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventAttendees to fetch.
     */
    orderBy?: EventAttendeeOrderByWithRelationInput | EventAttendeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventAttendeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventAttendees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventAttendees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventAttendees
    **/
    _count?: true | EventAttendeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventAttendeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventAttendeeMaxAggregateInputType
  }

  export type GetEventAttendeeAggregateType<T extends EventAttendeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEventAttendee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventAttendee[P]>
      : GetScalarType<T[P], AggregateEventAttendee[P]>
  }




  export type EventAttendeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventAttendeeWhereInput
    orderBy?: EventAttendeeOrderByWithAggregationInput | EventAttendeeOrderByWithAggregationInput[]
    by: EventAttendeeScalarFieldEnum[] | EventAttendeeScalarFieldEnum
    having?: EventAttendeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventAttendeeCountAggregateInputType | true
    _min?: EventAttendeeMinAggregateInputType
    _max?: EventAttendeeMaxAggregateInputType
  }

  export type EventAttendeeGroupByOutputType = {
    id: string
    eventId: string
    userId: string
    status: string
    role: string
    playerType: string
    joinedAt: Date
    _count: EventAttendeeCountAggregateOutputType | null
    _min: EventAttendeeMinAggregateOutputType | null
    _max: EventAttendeeMaxAggregateOutputType | null
  }

  type GetEventAttendeeGroupByPayload<T extends EventAttendeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventAttendeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventAttendeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventAttendeeGroupByOutputType[P]>
            : GetScalarType<T[P], EventAttendeeGroupByOutputType[P]>
        }
      >
    >


  export type EventAttendeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    userId?: boolean
    status?: boolean
    role?: boolean
    playerType?: boolean
    joinedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventAttendee"]>

  export type EventAttendeeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    userId?: boolean
    status?: boolean
    role?: boolean
    playerType?: boolean
    joinedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventAttendee"]>

  export type EventAttendeeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    userId?: boolean
    status?: boolean
    role?: boolean
    playerType?: boolean
    joinedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventAttendee"]>

  export type EventAttendeeSelectScalar = {
    id?: boolean
    eventId?: boolean
    userId?: boolean
    status?: boolean
    role?: boolean
    playerType?: boolean
    joinedAt?: boolean
  }

  export type EventAttendeeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "eventId" | "userId" | "status" | "role" | "playerType" | "joinedAt", ExtArgs["result"]["eventAttendee"]>
  export type EventAttendeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EventAttendeeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EventAttendeeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EventAttendeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventAttendee"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventId: string
      userId: string
      status: string
      role: string
      playerType: string
      joinedAt: Date
    }, ExtArgs["result"]["eventAttendee"]>
    composites: {}
  }

  type EventAttendeeGetPayload<S extends boolean | null | undefined | EventAttendeeDefaultArgs> = $Result.GetResult<Prisma.$EventAttendeePayload, S>

  type EventAttendeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventAttendeeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventAttendeeCountAggregateInputType | true
    }

  export interface EventAttendeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventAttendee'], meta: { name: 'EventAttendee' } }
    /**
     * Find zero or one EventAttendee that matches the filter.
     * @param {EventAttendeeFindUniqueArgs} args - Arguments to find a EventAttendee
     * @example
     * // Get one EventAttendee
     * const eventAttendee = await prisma.eventAttendee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventAttendeeFindUniqueArgs>(args: SelectSubset<T, EventAttendeeFindUniqueArgs<ExtArgs>>): Prisma__EventAttendeeClient<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EventAttendee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventAttendeeFindUniqueOrThrowArgs} args - Arguments to find a EventAttendee
     * @example
     * // Get one EventAttendee
     * const eventAttendee = await prisma.eventAttendee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventAttendeeFindUniqueOrThrowArgs>(args: SelectSubset<T, EventAttendeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventAttendeeClient<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventAttendee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendeeFindFirstArgs} args - Arguments to find a EventAttendee
     * @example
     * // Get one EventAttendee
     * const eventAttendee = await prisma.eventAttendee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventAttendeeFindFirstArgs>(args?: SelectSubset<T, EventAttendeeFindFirstArgs<ExtArgs>>): Prisma__EventAttendeeClient<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventAttendee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendeeFindFirstOrThrowArgs} args - Arguments to find a EventAttendee
     * @example
     * // Get one EventAttendee
     * const eventAttendee = await prisma.eventAttendee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventAttendeeFindFirstOrThrowArgs>(args?: SelectSubset<T, EventAttendeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventAttendeeClient<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EventAttendees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventAttendees
     * const eventAttendees = await prisma.eventAttendee.findMany()
     * 
     * // Get first 10 EventAttendees
     * const eventAttendees = await prisma.eventAttendee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventAttendeeWithIdOnly = await prisma.eventAttendee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventAttendeeFindManyArgs>(args?: SelectSubset<T, EventAttendeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EventAttendee.
     * @param {EventAttendeeCreateArgs} args - Arguments to create a EventAttendee.
     * @example
     * // Create one EventAttendee
     * const EventAttendee = await prisma.eventAttendee.create({
     *   data: {
     *     // ... data to create a EventAttendee
     *   }
     * })
     * 
     */
    create<T extends EventAttendeeCreateArgs>(args: SelectSubset<T, EventAttendeeCreateArgs<ExtArgs>>): Prisma__EventAttendeeClient<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EventAttendees.
     * @param {EventAttendeeCreateManyArgs} args - Arguments to create many EventAttendees.
     * @example
     * // Create many EventAttendees
     * const eventAttendee = await prisma.eventAttendee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventAttendeeCreateManyArgs>(args?: SelectSubset<T, EventAttendeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventAttendees and returns the data saved in the database.
     * @param {EventAttendeeCreateManyAndReturnArgs} args - Arguments to create many EventAttendees.
     * @example
     * // Create many EventAttendees
     * const eventAttendee = await prisma.eventAttendee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventAttendees and only return the `id`
     * const eventAttendeeWithIdOnly = await prisma.eventAttendee.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventAttendeeCreateManyAndReturnArgs>(args?: SelectSubset<T, EventAttendeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EventAttendee.
     * @param {EventAttendeeDeleteArgs} args - Arguments to delete one EventAttendee.
     * @example
     * // Delete one EventAttendee
     * const EventAttendee = await prisma.eventAttendee.delete({
     *   where: {
     *     // ... filter to delete one EventAttendee
     *   }
     * })
     * 
     */
    delete<T extends EventAttendeeDeleteArgs>(args: SelectSubset<T, EventAttendeeDeleteArgs<ExtArgs>>): Prisma__EventAttendeeClient<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EventAttendee.
     * @param {EventAttendeeUpdateArgs} args - Arguments to update one EventAttendee.
     * @example
     * // Update one EventAttendee
     * const eventAttendee = await prisma.eventAttendee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventAttendeeUpdateArgs>(args: SelectSubset<T, EventAttendeeUpdateArgs<ExtArgs>>): Prisma__EventAttendeeClient<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EventAttendees.
     * @param {EventAttendeeDeleteManyArgs} args - Arguments to filter EventAttendees to delete.
     * @example
     * // Delete a few EventAttendees
     * const { count } = await prisma.eventAttendee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventAttendeeDeleteManyArgs>(args?: SelectSubset<T, EventAttendeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventAttendees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventAttendees
     * const eventAttendee = await prisma.eventAttendee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventAttendeeUpdateManyArgs>(args: SelectSubset<T, EventAttendeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventAttendees and returns the data updated in the database.
     * @param {EventAttendeeUpdateManyAndReturnArgs} args - Arguments to update many EventAttendees.
     * @example
     * // Update many EventAttendees
     * const eventAttendee = await prisma.eventAttendee.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EventAttendees and only return the `id`
     * const eventAttendeeWithIdOnly = await prisma.eventAttendee.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventAttendeeUpdateManyAndReturnArgs>(args: SelectSubset<T, EventAttendeeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EventAttendee.
     * @param {EventAttendeeUpsertArgs} args - Arguments to update or create a EventAttendee.
     * @example
     * // Update or create a EventAttendee
     * const eventAttendee = await prisma.eventAttendee.upsert({
     *   create: {
     *     // ... data to create a EventAttendee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventAttendee we want to update
     *   }
     * })
     */
    upsert<T extends EventAttendeeUpsertArgs>(args: SelectSubset<T, EventAttendeeUpsertArgs<ExtArgs>>): Prisma__EventAttendeeClient<$Result.GetResult<Prisma.$EventAttendeePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EventAttendees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendeeCountArgs} args - Arguments to filter EventAttendees to count.
     * @example
     * // Count the number of EventAttendees
     * const count = await prisma.eventAttendee.count({
     *   where: {
     *     // ... the filter for the EventAttendees we want to count
     *   }
     * })
    **/
    count<T extends EventAttendeeCountArgs>(
      args?: Subset<T, EventAttendeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventAttendeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventAttendee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAttendeeAggregateArgs>(args: Subset<T, EventAttendeeAggregateArgs>): Prisma.PrismaPromise<GetEventAttendeeAggregateType<T>>

    /**
     * Group by EventAttendee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAttendeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventAttendeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventAttendeeGroupByArgs['orderBy'] }
        : { orderBy?: EventAttendeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventAttendeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventAttendeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventAttendee model
   */
  readonly fields: EventAttendeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventAttendee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventAttendeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventAttendee model
   */
  interface EventAttendeeFieldRefs {
    readonly id: FieldRef<"EventAttendee", 'String'>
    readonly eventId: FieldRef<"EventAttendee", 'String'>
    readonly userId: FieldRef<"EventAttendee", 'String'>
    readonly status: FieldRef<"EventAttendee", 'String'>
    readonly role: FieldRef<"EventAttendee", 'String'>
    readonly playerType: FieldRef<"EventAttendee", 'String'>
    readonly joinedAt: FieldRef<"EventAttendee", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EventAttendee findUnique
   */
  export type EventAttendeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    /**
     * Filter, which EventAttendee to fetch.
     */
    where: EventAttendeeWhereUniqueInput
  }

  /**
   * EventAttendee findUniqueOrThrow
   */
  export type EventAttendeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    /**
     * Filter, which EventAttendee to fetch.
     */
    where: EventAttendeeWhereUniqueInput
  }

  /**
   * EventAttendee findFirst
   */
  export type EventAttendeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    /**
     * Filter, which EventAttendee to fetch.
     */
    where?: EventAttendeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventAttendees to fetch.
     */
    orderBy?: EventAttendeeOrderByWithRelationInput | EventAttendeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventAttendees.
     */
    cursor?: EventAttendeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventAttendees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventAttendees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventAttendees.
     */
    distinct?: EventAttendeeScalarFieldEnum | EventAttendeeScalarFieldEnum[]
  }

  /**
   * EventAttendee findFirstOrThrow
   */
  export type EventAttendeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    /**
     * Filter, which EventAttendee to fetch.
     */
    where?: EventAttendeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventAttendees to fetch.
     */
    orderBy?: EventAttendeeOrderByWithRelationInput | EventAttendeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventAttendees.
     */
    cursor?: EventAttendeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventAttendees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventAttendees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventAttendees.
     */
    distinct?: EventAttendeeScalarFieldEnum | EventAttendeeScalarFieldEnum[]
  }

  /**
   * EventAttendee findMany
   */
  export type EventAttendeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    /**
     * Filter, which EventAttendees to fetch.
     */
    where?: EventAttendeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventAttendees to fetch.
     */
    orderBy?: EventAttendeeOrderByWithRelationInput | EventAttendeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventAttendees.
     */
    cursor?: EventAttendeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventAttendees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventAttendees.
     */
    skip?: number
    distinct?: EventAttendeeScalarFieldEnum | EventAttendeeScalarFieldEnum[]
  }

  /**
   * EventAttendee create
   */
  export type EventAttendeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    /**
     * The data needed to create a EventAttendee.
     */
    data: XOR<EventAttendeeCreateInput, EventAttendeeUncheckedCreateInput>
  }

  /**
   * EventAttendee createMany
   */
  export type EventAttendeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventAttendees.
     */
    data: EventAttendeeCreateManyInput | EventAttendeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventAttendee createManyAndReturn
   */
  export type EventAttendeeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * The data used to create many EventAttendees.
     */
    data: EventAttendeeCreateManyInput | EventAttendeeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventAttendee update
   */
  export type EventAttendeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    /**
     * The data needed to update a EventAttendee.
     */
    data: XOR<EventAttendeeUpdateInput, EventAttendeeUncheckedUpdateInput>
    /**
     * Choose, which EventAttendee to update.
     */
    where: EventAttendeeWhereUniqueInput
  }

  /**
   * EventAttendee updateMany
   */
  export type EventAttendeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventAttendees.
     */
    data: XOR<EventAttendeeUpdateManyMutationInput, EventAttendeeUncheckedUpdateManyInput>
    /**
     * Filter which EventAttendees to update
     */
    where?: EventAttendeeWhereInput
    /**
     * Limit how many EventAttendees to update.
     */
    limit?: number
  }

  /**
   * EventAttendee updateManyAndReturn
   */
  export type EventAttendeeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * The data used to update EventAttendees.
     */
    data: XOR<EventAttendeeUpdateManyMutationInput, EventAttendeeUncheckedUpdateManyInput>
    /**
     * Filter which EventAttendees to update
     */
    where?: EventAttendeeWhereInput
    /**
     * Limit how many EventAttendees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventAttendee upsert
   */
  export type EventAttendeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    /**
     * The filter to search for the EventAttendee to update in case it exists.
     */
    where: EventAttendeeWhereUniqueInput
    /**
     * In case the EventAttendee found by the `where` argument doesn't exist, create a new EventAttendee with this data.
     */
    create: XOR<EventAttendeeCreateInput, EventAttendeeUncheckedCreateInput>
    /**
     * In case the EventAttendee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventAttendeeUpdateInput, EventAttendeeUncheckedUpdateInput>
  }

  /**
   * EventAttendee delete
   */
  export type EventAttendeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
    /**
     * Filter which EventAttendee to delete.
     */
    where: EventAttendeeWhereUniqueInput
  }

  /**
   * EventAttendee deleteMany
   */
  export type EventAttendeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventAttendees to delete
     */
    where?: EventAttendeeWhereInput
    /**
     * Limit how many EventAttendees to delete.
     */
    limit?: number
  }

  /**
   * EventAttendee without action
   */
  export type EventAttendeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventAttendee
     */
    select?: EventAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventAttendee
     */
    omit?: EventAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventAttendeeInclude<ExtArgs> | null
  }


  /**
   * Model Tournament
   */

  export type AggregateTournament = {
    _count: TournamentCountAggregateOutputType | null
    _avg: TournamentAvgAggregateOutputType | null
    _sum: TournamentSumAggregateOutputType | null
    _min: TournamentMinAggregateOutputType | null
    _max: TournamentMaxAggregateOutputType | null
  }

  export type TournamentAvgAggregateOutputType = {
    maxParticipants: number | null
    currentParticipants: number | null
  }

  export type TournamentSumAggregateOutputType = {
    maxParticipants: number | null
    currentParticipants: number | null
  }

  export type TournamentMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    gameFormat: string | null
    communityId: string | null
    organizerId: string | null
    maxParticipants: number | null
    currentParticipants: number | null
    status: string | null
    startDate: Date | null
    endDate: Date | null
    prizePool: string | null
    rules: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TournamentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    gameFormat: string | null
    communityId: string | null
    organizerId: string | null
    maxParticipants: number | null
    currentParticipants: number | null
    status: string | null
    startDate: Date | null
    endDate: Date | null
    prizePool: string | null
    rules: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TournamentCountAggregateOutputType = {
    id: number
    name: number
    description: number
    gameFormat: number
    communityId: number
    organizerId: number
    maxParticipants: number
    currentParticipants: number
    status: number
    startDate: number
    endDate: number
    bracketData: number
    prizePool: number
    rules: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TournamentAvgAggregateInputType = {
    maxParticipants?: true
    currentParticipants?: true
  }

  export type TournamentSumAggregateInputType = {
    maxParticipants?: true
    currentParticipants?: true
  }

  export type TournamentMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    gameFormat?: true
    communityId?: true
    organizerId?: true
    maxParticipants?: true
    currentParticipants?: true
    status?: true
    startDate?: true
    endDate?: true
    prizePool?: true
    rules?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TournamentMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    gameFormat?: true
    communityId?: true
    organizerId?: true
    maxParticipants?: true
    currentParticipants?: true
    status?: true
    startDate?: true
    endDate?: true
    prizePool?: true
    rules?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TournamentCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    gameFormat?: true
    communityId?: true
    organizerId?: true
    maxParticipants?: true
    currentParticipants?: true
    status?: true
    startDate?: true
    endDate?: true
    bracketData?: true
    prizePool?: true
    rules?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TournamentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tournament to aggregate.
     */
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     */
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tournaments
    **/
    _count?: true | TournamentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TournamentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TournamentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TournamentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TournamentMaxAggregateInputType
  }

  export type GetTournamentAggregateType<T extends TournamentAggregateArgs> = {
        [P in keyof T & keyof AggregateTournament]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTournament[P]>
      : GetScalarType<T[P], AggregateTournament[P]>
  }




  export type TournamentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentWhereInput
    orderBy?: TournamentOrderByWithAggregationInput | TournamentOrderByWithAggregationInput[]
    by: TournamentScalarFieldEnum[] | TournamentScalarFieldEnum
    having?: TournamentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TournamentCountAggregateInputType | true
    _avg?: TournamentAvgAggregateInputType
    _sum?: TournamentSumAggregateInputType
    _min?: TournamentMinAggregateInputType
    _max?: TournamentMaxAggregateInputType
  }

  export type TournamentGroupByOutputType = {
    id: string
    name: string
    description: string | null
    gameFormat: string
    communityId: string
    organizerId: string
    maxParticipants: number
    currentParticipants: number
    status: string
    startDate: Date | null
    endDate: Date | null
    bracketData: JsonValue | null
    prizePool: string | null
    rules: string | null
    createdAt: Date
    updatedAt: Date
    _count: TournamentCountAggregateOutputType | null
    _avg: TournamentAvgAggregateOutputType | null
    _sum: TournamentSumAggregateOutputType | null
    _min: TournamentMinAggregateOutputType | null
    _max: TournamentMaxAggregateOutputType | null
  }

  type GetTournamentGroupByPayload<T extends TournamentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TournamentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TournamentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TournamentGroupByOutputType[P]>
            : GetScalarType<T[P], TournamentGroupByOutputType[P]>
        }
      >
    >


  export type TournamentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    gameFormat?: boolean
    communityId?: boolean
    organizerId?: boolean
    maxParticipants?: boolean
    currentParticipants?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    bracketData?: boolean
    prizePool?: boolean
    rules?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    community?: boolean | CommunityDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
    participants?: boolean | Tournament$participantsArgs<ExtArgs>
    rounds?: boolean | Tournament$roundsArgs<ExtArgs>
    matches?: boolean | Tournament$matchesArgs<ExtArgs>
    _count?: boolean | TournamentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournament"]>

  export type TournamentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    gameFormat?: boolean
    communityId?: boolean
    organizerId?: boolean
    maxParticipants?: boolean
    currentParticipants?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    bracketData?: boolean
    prizePool?: boolean
    rules?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    community?: boolean | CommunityDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournament"]>

  export type TournamentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    gameFormat?: boolean
    communityId?: boolean
    organizerId?: boolean
    maxParticipants?: boolean
    currentParticipants?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    bracketData?: boolean
    prizePool?: boolean
    rules?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    community?: boolean | CommunityDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournament"]>

  export type TournamentSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    gameFormat?: boolean
    communityId?: boolean
    organizerId?: boolean
    maxParticipants?: boolean
    currentParticipants?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    bracketData?: boolean
    prizePool?: boolean
    rules?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TournamentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "gameFormat" | "communityId" | "organizerId" | "maxParticipants" | "currentParticipants" | "status" | "startDate" | "endDate" | "bracketData" | "prizePool" | "rules" | "createdAt" | "updatedAt", ExtArgs["result"]["tournament"]>
  export type TournamentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    community?: boolean | CommunityDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
    participants?: boolean | Tournament$participantsArgs<ExtArgs>
    rounds?: boolean | Tournament$roundsArgs<ExtArgs>
    matches?: boolean | Tournament$matchesArgs<ExtArgs>
    _count?: boolean | TournamentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TournamentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    community?: boolean | CommunityDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TournamentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    community?: boolean | CommunityDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TournamentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tournament"
    objects: {
      community: Prisma.$CommunityPayload<ExtArgs>
      organizer: Prisma.$UserPayload<ExtArgs>
      participants: Prisma.$TournamentParticipantPayload<ExtArgs>[]
      rounds: Prisma.$TournamentRoundPayload<ExtArgs>[]
      matches: Prisma.$TournamentMatchPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      gameFormat: string
      communityId: string
      organizerId: string
      maxParticipants: number
      currentParticipants: number
      status: string
      startDate: Date | null
      endDate: Date | null
      bracketData: Prisma.JsonValue | null
      prizePool: string | null
      rules: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tournament"]>
    composites: {}
  }

  type TournamentGetPayload<S extends boolean | null | undefined | TournamentDefaultArgs> = $Result.GetResult<Prisma.$TournamentPayload, S>

  type TournamentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TournamentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TournamentCountAggregateInputType | true
    }

  export interface TournamentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tournament'], meta: { name: 'Tournament' } }
    /**
     * Find zero or one Tournament that matches the filter.
     * @param {TournamentFindUniqueArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TournamentFindUniqueArgs>(args: SelectSubset<T, TournamentFindUniqueArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tournament that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TournamentFindUniqueOrThrowArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TournamentFindUniqueOrThrowArgs>(args: SelectSubset<T, TournamentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tournament that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFindFirstArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TournamentFindFirstArgs>(args?: SelectSubset<T, TournamentFindFirstArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tournament that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFindFirstOrThrowArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TournamentFindFirstOrThrowArgs>(args?: SelectSubset<T, TournamentFindFirstOrThrowArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tournaments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tournaments
     * const tournaments = await prisma.tournament.findMany()
     * 
     * // Get first 10 Tournaments
     * const tournaments = await prisma.tournament.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tournamentWithIdOnly = await prisma.tournament.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TournamentFindManyArgs>(args?: SelectSubset<T, TournamentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tournament.
     * @param {TournamentCreateArgs} args - Arguments to create a Tournament.
     * @example
     * // Create one Tournament
     * const Tournament = await prisma.tournament.create({
     *   data: {
     *     // ... data to create a Tournament
     *   }
     * })
     * 
     */
    create<T extends TournamentCreateArgs>(args: SelectSubset<T, TournamentCreateArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tournaments.
     * @param {TournamentCreateManyArgs} args - Arguments to create many Tournaments.
     * @example
     * // Create many Tournaments
     * const tournament = await prisma.tournament.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TournamentCreateManyArgs>(args?: SelectSubset<T, TournamentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tournaments and returns the data saved in the database.
     * @param {TournamentCreateManyAndReturnArgs} args - Arguments to create many Tournaments.
     * @example
     * // Create many Tournaments
     * const tournament = await prisma.tournament.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tournaments and only return the `id`
     * const tournamentWithIdOnly = await prisma.tournament.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TournamentCreateManyAndReturnArgs>(args?: SelectSubset<T, TournamentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tournament.
     * @param {TournamentDeleteArgs} args - Arguments to delete one Tournament.
     * @example
     * // Delete one Tournament
     * const Tournament = await prisma.tournament.delete({
     *   where: {
     *     // ... filter to delete one Tournament
     *   }
     * })
     * 
     */
    delete<T extends TournamentDeleteArgs>(args: SelectSubset<T, TournamentDeleteArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tournament.
     * @param {TournamentUpdateArgs} args - Arguments to update one Tournament.
     * @example
     * // Update one Tournament
     * const tournament = await prisma.tournament.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TournamentUpdateArgs>(args: SelectSubset<T, TournamentUpdateArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tournaments.
     * @param {TournamentDeleteManyArgs} args - Arguments to filter Tournaments to delete.
     * @example
     * // Delete a few Tournaments
     * const { count } = await prisma.tournament.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TournamentDeleteManyArgs>(args?: SelectSubset<T, TournamentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tournaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tournaments
     * const tournament = await prisma.tournament.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TournamentUpdateManyArgs>(args: SelectSubset<T, TournamentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tournaments and returns the data updated in the database.
     * @param {TournamentUpdateManyAndReturnArgs} args - Arguments to update many Tournaments.
     * @example
     * // Update many Tournaments
     * const tournament = await prisma.tournament.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tournaments and only return the `id`
     * const tournamentWithIdOnly = await prisma.tournament.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TournamentUpdateManyAndReturnArgs>(args: SelectSubset<T, TournamentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tournament.
     * @param {TournamentUpsertArgs} args - Arguments to update or create a Tournament.
     * @example
     * // Update or create a Tournament
     * const tournament = await prisma.tournament.upsert({
     *   create: {
     *     // ... data to create a Tournament
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tournament we want to update
     *   }
     * })
     */
    upsert<T extends TournamentUpsertArgs>(args: SelectSubset<T, TournamentUpsertArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tournaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentCountArgs} args - Arguments to filter Tournaments to count.
     * @example
     * // Count the number of Tournaments
     * const count = await prisma.tournament.count({
     *   where: {
     *     // ... the filter for the Tournaments we want to count
     *   }
     * })
    **/
    count<T extends TournamentCountArgs>(
      args?: Subset<T, TournamentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TournamentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tournament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TournamentAggregateArgs>(args: Subset<T, TournamentAggregateArgs>): Prisma.PrismaPromise<GetTournamentAggregateType<T>>

    /**
     * Group by Tournament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TournamentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TournamentGroupByArgs['orderBy'] }
        : { orderBy?: TournamentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TournamentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tournament model
   */
  readonly fields: TournamentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tournament.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TournamentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    community<T extends CommunityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommunityDefaultArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    organizer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    participants<T extends Tournament$participantsArgs<ExtArgs> = {}>(args?: Subset<T, Tournament$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rounds<T extends Tournament$roundsArgs<ExtArgs> = {}>(args?: Subset<T, Tournament$roundsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentRoundPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matches<T extends Tournament$matchesArgs<ExtArgs> = {}>(args?: Subset<T, Tournament$matchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tournament model
   */
  interface TournamentFieldRefs {
    readonly id: FieldRef<"Tournament", 'String'>
    readonly name: FieldRef<"Tournament", 'String'>
    readonly description: FieldRef<"Tournament", 'String'>
    readonly gameFormat: FieldRef<"Tournament", 'String'>
    readonly communityId: FieldRef<"Tournament", 'String'>
    readonly organizerId: FieldRef<"Tournament", 'String'>
    readonly maxParticipants: FieldRef<"Tournament", 'Int'>
    readonly currentParticipants: FieldRef<"Tournament", 'Int'>
    readonly status: FieldRef<"Tournament", 'String'>
    readonly startDate: FieldRef<"Tournament", 'DateTime'>
    readonly endDate: FieldRef<"Tournament", 'DateTime'>
    readonly bracketData: FieldRef<"Tournament", 'Json'>
    readonly prizePool: FieldRef<"Tournament", 'String'>
    readonly rules: FieldRef<"Tournament", 'String'>
    readonly createdAt: FieldRef<"Tournament", 'DateTime'>
    readonly updatedAt: FieldRef<"Tournament", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tournament findUnique
   */
  export type TournamentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournament to fetch.
     */
    where: TournamentWhereUniqueInput
  }

  /**
   * Tournament findUniqueOrThrow
   */
  export type TournamentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournament to fetch.
     */
    where: TournamentWhereUniqueInput
  }

  /**
   * Tournament findFirst
   */
  export type TournamentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournament to fetch.
     */
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     */
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tournaments.
     */
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tournaments.
     */
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * Tournament findFirstOrThrow
   */
  export type TournamentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournament to fetch.
     */
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     */
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tournaments.
     */
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tournaments.
     */
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * Tournament findMany
   */
  export type TournamentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournaments to fetch.
     */
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     */
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tournaments.
     */
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     */
    skip?: number
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * Tournament create
   */
  export type TournamentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * The data needed to create a Tournament.
     */
    data: XOR<TournamentCreateInput, TournamentUncheckedCreateInput>
  }

  /**
   * Tournament createMany
   */
  export type TournamentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tournaments.
     */
    data: TournamentCreateManyInput | TournamentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tournament createManyAndReturn
   */
  export type TournamentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * The data used to create many Tournaments.
     */
    data: TournamentCreateManyInput | TournamentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tournament update
   */
  export type TournamentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * The data needed to update a Tournament.
     */
    data: XOR<TournamentUpdateInput, TournamentUncheckedUpdateInput>
    /**
     * Choose, which Tournament to update.
     */
    where: TournamentWhereUniqueInput
  }

  /**
   * Tournament updateMany
   */
  export type TournamentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tournaments.
     */
    data: XOR<TournamentUpdateManyMutationInput, TournamentUncheckedUpdateManyInput>
    /**
     * Filter which Tournaments to update
     */
    where?: TournamentWhereInput
    /**
     * Limit how many Tournaments to update.
     */
    limit?: number
  }

  /**
   * Tournament updateManyAndReturn
   */
  export type TournamentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * The data used to update Tournaments.
     */
    data: XOR<TournamentUpdateManyMutationInput, TournamentUncheckedUpdateManyInput>
    /**
     * Filter which Tournaments to update
     */
    where?: TournamentWhereInput
    /**
     * Limit how many Tournaments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tournament upsert
   */
  export type TournamentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * The filter to search for the Tournament to update in case it exists.
     */
    where: TournamentWhereUniqueInput
    /**
     * In case the Tournament found by the `where` argument doesn't exist, create a new Tournament with this data.
     */
    create: XOR<TournamentCreateInput, TournamentUncheckedCreateInput>
    /**
     * In case the Tournament was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TournamentUpdateInput, TournamentUncheckedUpdateInput>
  }

  /**
   * Tournament delete
   */
  export type TournamentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter which Tournament to delete.
     */
    where: TournamentWhereUniqueInput
  }

  /**
   * Tournament deleteMany
   */
  export type TournamentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tournaments to delete
     */
    where?: TournamentWhereInput
    /**
     * Limit how many Tournaments to delete.
     */
    limit?: number
  }

  /**
   * Tournament.participants
   */
  export type Tournament$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentParticipant
     */
    select?: TournamentParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentParticipant
     */
    omit?: TournamentParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentParticipantInclude<ExtArgs> | null
    where?: TournamentParticipantWhereInput
    orderBy?: TournamentParticipantOrderByWithRelationInput | TournamentParticipantOrderByWithRelationInput[]
    cursor?: TournamentParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentParticipantScalarFieldEnum | TournamentParticipantScalarFieldEnum[]
  }

  /**
   * Tournament.rounds
   */
  export type Tournament$roundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentRound
     */
    select?: TournamentRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentRound
     */
    omit?: TournamentRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentRoundInclude<ExtArgs> | null
    where?: TournamentRoundWhereInput
    orderBy?: TournamentRoundOrderByWithRelationInput | TournamentRoundOrderByWithRelationInput[]
    cursor?: TournamentRoundWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentRoundScalarFieldEnum | TournamentRoundScalarFieldEnum[]
  }

  /**
   * Tournament.matches
   */
  export type Tournament$matchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentMatch
     */
    omit?: TournamentMatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    where?: TournamentMatchWhereInput
    orderBy?: TournamentMatchOrderByWithRelationInput | TournamentMatchOrderByWithRelationInput[]
    cursor?: TournamentMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentMatchScalarFieldEnum | TournamentMatchScalarFieldEnum[]
  }

  /**
   * Tournament without action
   */
  export type TournamentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
  }


  /**
   * Model TournamentParticipant
   */

  export type AggregateTournamentParticipant = {
    _count: TournamentParticipantCountAggregateOutputType | null
    _avg: TournamentParticipantAvgAggregateOutputType | null
    _sum: TournamentParticipantSumAggregateOutputType | null
    _min: TournamentParticipantMinAggregateOutputType | null
    _max: TournamentParticipantMaxAggregateOutputType | null
  }

  export type TournamentParticipantAvgAggregateOutputType = {
    seed: number | null
  }

  export type TournamentParticipantSumAggregateOutputType = {
    seed: number | null
  }

  export type TournamentParticipantMinAggregateOutputType = {
    id: string | null
    tournamentId: string | null
    userId: string | null
    seed: number | null
    status: string | null
    joinedAt: Date | null
  }

  export type TournamentParticipantMaxAggregateOutputType = {
    id: string | null
    tournamentId: string | null
    userId: string | null
    seed: number | null
    status: string | null
    joinedAt: Date | null
  }

  export type TournamentParticipantCountAggregateOutputType = {
    id: number
    tournamentId: number
    userId: number
    seed: number
    status: number
    joinedAt: number
    _all: number
  }


  export type TournamentParticipantAvgAggregateInputType = {
    seed?: true
  }

  export type TournamentParticipantSumAggregateInputType = {
    seed?: true
  }

  export type TournamentParticipantMinAggregateInputType = {
    id?: true
    tournamentId?: true
    userId?: true
    seed?: true
    status?: true
    joinedAt?: true
  }

  export type TournamentParticipantMaxAggregateInputType = {
    id?: true
    tournamentId?: true
    userId?: true
    seed?: true
    status?: true
    joinedAt?: true
  }

  export type TournamentParticipantCountAggregateInputType = {
    id?: true
    tournamentId?: true
    userId?: true
    seed?: true
    status?: true
    joinedAt?: true
    _all?: true
  }

  export type TournamentParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TournamentParticipant to aggregate.
     */
    where?: TournamentParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentParticipants to fetch.
     */
    orderBy?: TournamentParticipantOrderByWithRelationInput | TournamentParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TournamentParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TournamentParticipants
    **/
    _count?: true | TournamentParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TournamentParticipantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TournamentParticipantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TournamentParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TournamentParticipantMaxAggregateInputType
  }

  export type GetTournamentParticipantAggregateType<T extends TournamentParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateTournamentParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTournamentParticipant[P]>
      : GetScalarType<T[P], AggregateTournamentParticipant[P]>
  }




  export type TournamentParticipantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentParticipantWhereInput
    orderBy?: TournamentParticipantOrderByWithAggregationInput | TournamentParticipantOrderByWithAggregationInput[]
    by: TournamentParticipantScalarFieldEnum[] | TournamentParticipantScalarFieldEnum
    having?: TournamentParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TournamentParticipantCountAggregateInputType | true
    _avg?: TournamentParticipantAvgAggregateInputType
    _sum?: TournamentParticipantSumAggregateInputType
    _min?: TournamentParticipantMinAggregateInputType
    _max?: TournamentParticipantMaxAggregateInputType
  }

  export type TournamentParticipantGroupByOutputType = {
    id: string
    tournamentId: string
    userId: string
    seed: number | null
    status: string
    joinedAt: Date
    _count: TournamentParticipantCountAggregateOutputType | null
    _avg: TournamentParticipantAvgAggregateOutputType | null
    _sum: TournamentParticipantSumAggregateOutputType | null
    _min: TournamentParticipantMinAggregateOutputType | null
    _max: TournamentParticipantMaxAggregateOutputType | null
  }

  type GetTournamentParticipantGroupByPayload<T extends TournamentParticipantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TournamentParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TournamentParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TournamentParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], TournamentParticipantGroupByOutputType[P]>
        }
      >
    >


  export type TournamentParticipantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournamentId?: boolean
    userId?: boolean
    seed?: boolean
    status?: boolean
    joinedAt?: boolean
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournamentParticipant"]>

  export type TournamentParticipantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournamentId?: boolean
    userId?: boolean
    seed?: boolean
    status?: boolean
    joinedAt?: boolean
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournamentParticipant"]>

  export type TournamentParticipantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournamentId?: boolean
    userId?: boolean
    seed?: boolean
    status?: boolean
    joinedAt?: boolean
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournamentParticipant"]>

  export type TournamentParticipantSelectScalar = {
    id?: boolean
    tournamentId?: boolean
    userId?: boolean
    seed?: boolean
    status?: boolean
    joinedAt?: boolean
  }

  export type TournamentParticipantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tournamentId" | "userId" | "seed" | "status" | "joinedAt", ExtArgs["result"]["tournamentParticipant"]>
  export type TournamentParticipantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TournamentParticipantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TournamentParticipantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TournamentParticipantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TournamentParticipant"
    objects: {
      tournament: Prisma.$TournamentPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tournamentId: string
      userId: string
      seed: number | null
      status: string
      joinedAt: Date
    }, ExtArgs["result"]["tournamentParticipant"]>
    composites: {}
  }

  type TournamentParticipantGetPayload<S extends boolean | null | undefined | TournamentParticipantDefaultArgs> = $Result.GetResult<Prisma.$TournamentParticipantPayload, S>

  type TournamentParticipantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TournamentParticipantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TournamentParticipantCountAggregateInputType | true
    }

  export interface TournamentParticipantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TournamentParticipant'], meta: { name: 'TournamentParticipant' } }
    /**
     * Find zero or one TournamentParticipant that matches the filter.
     * @param {TournamentParticipantFindUniqueArgs} args - Arguments to find a TournamentParticipant
     * @example
     * // Get one TournamentParticipant
     * const tournamentParticipant = await prisma.tournamentParticipant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TournamentParticipantFindUniqueArgs>(args: SelectSubset<T, TournamentParticipantFindUniqueArgs<ExtArgs>>): Prisma__TournamentParticipantClient<$Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TournamentParticipant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TournamentParticipantFindUniqueOrThrowArgs} args - Arguments to find a TournamentParticipant
     * @example
     * // Get one TournamentParticipant
     * const tournamentParticipant = await prisma.tournamentParticipant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TournamentParticipantFindUniqueOrThrowArgs>(args: SelectSubset<T, TournamentParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TournamentParticipantClient<$Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TournamentParticipant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentParticipantFindFirstArgs} args - Arguments to find a TournamentParticipant
     * @example
     * // Get one TournamentParticipant
     * const tournamentParticipant = await prisma.tournamentParticipant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TournamentParticipantFindFirstArgs>(args?: SelectSubset<T, TournamentParticipantFindFirstArgs<ExtArgs>>): Prisma__TournamentParticipantClient<$Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TournamentParticipant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentParticipantFindFirstOrThrowArgs} args - Arguments to find a TournamentParticipant
     * @example
     * // Get one TournamentParticipant
     * const tournamentParticipant = await prisma.tournamentParticipant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TournamentParticipantFindFirstOrThrowArgs>(args?: SelectSubset<T, TournamentParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma__TournamentParticipantClient<$Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TournamentParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TournamentParticipants
     * const tournamentParticipants = await prisma.tournamentParticipant.findMany()
     * 
     * // Get first 10 TournamentParticipants
     * const tournamentParticipants = await prisma.tournamentParticipant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tournamentParticipantWithIdOnly = await prisma.tournamentParticipant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TournamentParticipantFindManyArgs>(args?: SelectSubset<T, TournamentParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TournamentParticipant.
     * @param {TournamentParticipantCreateArgs} args - Arguments to create a TournamentParticipant.
     * @example
     * // Create one TournamentParticipant
     * const TournamentParticipant = await prisma.tournamentParticipant.create({
     *   data: {
     *     // ... data to create a TournamentParticipant
     *   }
     * })
     * 
     */
    create<T extends TournamentParticipantCreateArgs>(args: SelectSubset<T, TournamentParticipantCreateArgs<ExtArgs>>): Prisma__TournamentParticipantClient<$Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TournamentParticipants.
     * @param {TournamentParticipantCreateManyArgs} args - Arguments to create many TournamentParticipants.
     * @example
     * // Create many TournamentParticipants
     * const tournamentParticipant = await prisma.tournamentParticipant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TournamentParticipantCreateManyArgs>(args?: SelectSubset<T, TournamentParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TournamentParticipants and returns the data saved in the database.
     * @param {TournamentParticipantCreateManyAndReturnArgs} args - Arguments to create many TournamentParticipants.
     * @example
     * // Create many TournamentParticipants
     * const tournamentParticipant = await prisma.tournamentParticipant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TournamentParticipants and only return the `id`
     * const tournamentParticipantWithIdOnly = await prisma.tournamentParticipant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TournamentParticipantCreateManyAndReturnArgs>(args?: SelectSubset<T, TournamentParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TournamentParticipant.
     * @param {TournamentParticipantDeleteArgs} args - Arguments to delete one TournamentParticipant.
     * @example
     * // Delete one TournamentParticipant
     * const TournamentParticipant = await prisma.tournamentParticipant.delete({
     *   where: {
     *     // ... filter to delete one TournamentParticipant
     *   }
     * })
     * 
     */
    delete<T extends TournamentParticipantDeleteArgs>(args: SelectSubset<T, TournamentParticipantDeleteArgs<ExtArgs>>): Prisma__TournamentParticipantClient<$Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TournamentParticipant.
     * @param {TournamentParticipantUpdateArgs} args - Arguments to update one TournamentParticipant.
     * @example
     * // Update one TournamentParticipant
     * const tournamentParticipant = await prisma.tournamentParticipant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TournamentParticipantUpdateArgs>(args: SelectSubset<T, TournamentParticipantUpdateArgs<ExtArgs>>): Prisma__TournamentParticipantClient<$Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TournamentParticipants.
     * @param {TournamentParticipantDeleteManyArgs} args - Arguments to filter TournamentParticipants to delete.
     * @example
     * // Delete a few TournamentParticipants
     * const { count } = await prisma.tournamentParticipant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TournamentParticipantDeleteManyArgs>(args?: SelectSubset<T, TournamentParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TournamentParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TournamentParticipants
     * const tournamentParticipant = await prisma.tournamentParticipant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TournamentParticipantUpdateManyArgs>(args: SelectSubset<T, TournamentParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TournamentParticipants and returns the data updated in the database.
     * @param {TournamentParticipantUpdateManyAndReturnArgs} args - Arguments to update many TournamentParticipants.
     * @example
     * // Update many TournamentParticipants
     * const tournamentParticipant = await prisma.tournamentParticipant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TournamentParticipants and only return the `id`
     * const tournamentParticipantWithIdOnly = await prisma.tournamentParticipant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TournamentParticipantUpdateManyAndReturnArgs>(args: SelectSubset<T, TournamentParticipantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TournamentParticipant.
     * @param {TournamentParticipantUpsertArgs} args - Arguments to update or create a TournamentParticipant.
     * @example
     * // Update or create a TournamentParticipant
     * const tournamentParticipant = await prisma.tournamentParticipant.upsert({
     *   create: {
     *     // ... data to create a TournamentParticipant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TournamentParticipant we want to update
     *   }
     * })
     */
    upsert<T extends TournamentParticipantUpsertArgs>(args: SelectSubset<T, TournamentParticipantUpsertArgs<ExtArgs>>): Prisma__TournamentParticipantClient<$Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TournamentParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentParticipantCountArgs} args - Arguments to filter TournamentParticipants to count.
     * @example
     * // Count the number of TournamentParticipants
     * const count = await prisma.tournamentParticipant.count({
     *   where: {
     *     // ... the filter for the TournamentParticipants we want to count
     *   }
     * })
    **/
    count<T extends TournamentParticipantCountArgs>(
      args?: Subset<T, TournamentParticipantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TournamentParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TournamentParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TournamentParticipantAggregateArgs>(args: Subset<T, TournamentParticipantAggregateArgs>): Prisma.PrismaPromise<GetTournamentParticipantAggregateType<T>>

    /**
     * Group by TournamentParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TournamentParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TournamentParticipantGroupByArgs['orderBy'] }
        : { orderBy?: TournamentParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TournamentParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TournamentParticipant model
   */
  readonly fields: TournamentParticipantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TournamentParticipant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TournamentParticipantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tournament<T extends TournamentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TournamentDefaultArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TournamentParticipant model
   */
  interface TournamentParticipantFieldRefs {
    readonly id: FieldRef<"TournamentParticipant", 'String'>
    readonly tournamentId: FieldRef<"TournamentParticipant", 'String'>
    readonly userId: FieldRef<"TournamentParticipant", 'String'>
    readonly seed: FieldRef<"TournamentParticipant", 'Int'>
    readonly status: FieldRef<"TournamentParticipant", 'String'>
    readonly joinedAt: FieldRef<"TournamentParticipant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TournamentParticipant findUnique
   */
  export type TournamentParticipantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentParticipant
     */
    select?: TournamentParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentParticipant
     */
    omit?: TournamentParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentParticipantInclude<ExtArgs> | null
    /**
     * Filter, which TournamentParticipant to fetch.
     */
    where: TournamentParticipantWhereUniqueInput
  }

  /**
   * TournamentParticipant findUniqueOrThrow
   */
  export type TournamentParticipantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentParticipant
     */
    select?: TournamentParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentParticipant
     */
    omit?: TournamentParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentParticipantInclude<ExtArgs> | null
    /**
     * Filter, which TournamentParticipant to fetch.
     */
    where: TournamentParticipantWhereUniqueInput
  }

  /**
   * TournamentParticipant findFirst
   */
  export type TournamentParticipantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentParticipant
     */
    select?: TournamentParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentParticipant
     */
    omit?: TournamentParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentParticipantInclude<ExtArgs> | null
    /**
     * Filter, which TournamentParticipant to fetch.
     */
    where?: TournamentParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentParticipants to fetch.
     */
    orderBy?: TournamentParticipantOrderByWithRelationInput | TournamentParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TournamentParticipants.
     */
    cursor?: TournamentParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TournamentParticipants.
     */
    distinct?: TournamentParticipantScalarFieldEnum | TournamentParticipantScalarFieldEnum[]
  }

  /**
   * TournamentParticipant findFirstOrThrow
   */
  export type TournamentParticipantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentParticipant
     */
    select?: TournamentParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentParticipant
     */
    omit?: TournamentParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentParticipantInclude<ExtArgs> | null
    /**
     * Filter, which TournamentParticipant to fetch.
     */
    where?: TournamentParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentParticipants to fetch.
     */
    orderBy?: TournamentParticipantOrderByWithRelationInput | TournamentParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TournamentParticipants.
     */
    cursor?: TournamentParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TournamentParticipants.
     */
    distinct?: TournamentParticipantScalarFieldEnum | TournamentParticipantScalarFieldEnum[]
  }

  /**
   * TournamentParticipant findMany
   */
  export type TournamentParticipantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentParticipant
     */
    select?: TournamentParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentParticipant
     */
    omit?: TournamentParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentParticipantInclude<ExtArgs> | null
    /**
     * Filter, which TournamentParticipants to fetch.
     */
    where?: TournamentParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentParticipants to fetch.
     */
    orderBy?: TournamentParticipantOrderByWithRelationInput | TournamentParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TournamentParticipants.
     */
    cursor?: TournamentParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentParticipants.
     */
    skip?: number
    distinct?: TournamentParticipantScalarFieldEnum | TournamentParticipantScalarFieldEnum[]
  }

  /**
   * TournamentParticipant create
   */
  export type TournamentParticipantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentParticipant
     */
    select?: TournamentParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentParticipant
     */
    omit?: TournamentParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentParticipantInclude<ExtArgs> | null
    /**
     * The data needed to create a TournamentParticipant.
     */
    data: XOR<TournamentParticipantCreateInput, TournamentParticipantUncheckedCreateInput>
  }

  /**
   * TournamentParticipant createMany
   */
  export type TournamentParticipantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TournamentParticipants.
     */
    data: TournamentParticipantCreateManyInput | TournamentParticipantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TournamentParticipant createManyAndReturn
   */
  export type TournamentParticipantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentParticipant
     */
    select?: TournamentParticipantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentParticipant
     */
    omit?: TournamentParticipantOmit<ExtArgs> | null
    /**
     * The data used to create many TournamentParticipants.
     */
    data: TournamentParticipantCreateManyInput | TournamentParticipantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentParticipantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TournamentParticipant update
   */
  export type TournamentParticipantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentParticipant
     */
    select?: TournamentParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentParticipant
     */
    omit?: TournamentParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentParticipantInclude<ExtArgs> | null
    /**
     * The data needed to update a TournamentParticipant.
     */
    data: XOR<TournamentParticipantUpdateInput, TournamentParticipantUncheckedUpdateInput>
    /**
     * Choose, which TournamentParticipant to update.
     */
    where: TournamentParticipantWhereUniqueInput
  }

  /**
   * TournamentParticipant updateMany
   */
  export type TournamentParticipantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TournamentParticipants.
     */
    data: XOR<TournamentParticipantUpdateManyMutationInput, TournamentParticipantUncheckedUpdateManyInput>
    /**
     * Filter which TournamentParticipants to update
     */
    where?: TournamentParticipantWhereInput
    /**
     * Limit how many TournamentParticipants to update.
     */
    limit?: number
  }

  /**
   * TournamentParticipant updateManyAndReturn
   */
  export type TournamentParticipantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentParticipant
     */
    select?: TournamentParticipantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentParticipant
     */
    omit?: TournamentParticipantOmit<ExtArgs> | null
    /**
     * The data used to update TournamentParticipants.
     */
    data: XOR<TournamentParticipantUpdateManyMutationInput, TournamentParticipantUncheckedUpdateManyInput>
    /**
     * Filter which TournamentParticipants to update
     */
    where?: TournamentParticipantWhereInput
    /**
     * Limit how many TournamentParticipants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentParticipantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TournamentParticipant upsert
   */
  export type TournamentParticipantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentParticipant
     */
    select?: TournamentParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentParticipant
     */
    omit?: TournamentParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentParticipantInclude<ExtArgs> | null
    /**
     * The filter to search for the TournamentParticipant to update in case it exists.
     */
    where: TournamentParticipantWhereUniqueInput
    /**
     * In case the TournamentParticipant found by the `where` argument doesn't exist, create a new TournamentParticipant with this data.
     */
    create: XOR<TournamentParticipantCreateInput, TournamentParticipantUncheckedCreateInput>
    /**
     * In case the TournamentParticipant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TournamentParticipantUpdateInput, TournamentParticipantUncheckedUpdateInput>
  }

  /**
   * TournamentParticipant delete
   */
  export type TournamentParticipantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentParticipant
     */
    select?: TournamentParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentParticipant
     */
    omit?: TournamentParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentParticipantInclude<ExtArgs> | null
    /**
     * Filter which TournamentParticipant to delete.
     */
    where: TournamentParticipantWhereUniqueInput
  }

  /**
   * TournamentParticipant deleteMany
   */
  export type TournamentParticipantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TournamentParticipants to delete
     */
    where?: TournamentParticipantWhereInput
    /**
     * Limit how many TournamentParticipants to delete.
     */
    limit?: number
  }

  /**
   * TournamentParticipant without action
   */
  export type TournamentParticipantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentParticipant
     */
    select?: TournamentParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentParticipant
     */
    omit?: TournamentParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentParticipantInclude<ExtArgs> | null
  }


  /**
   * Model TournamentFormat
   */

  export type AggregateTournamentFormat = {
    _count: TournamentFormatCountAggregateOutputType | null
    _min: TournamentFormatMinAggregateOutputType | null
    _max: TournamentFormatMaxAggregateOutputType | null
  }

  export type TournamentFormatMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    description: string | null
    supportsSeeding: boolean | null
    requiresEvenParticipants: boolean | null
    isActive: boolean | null
  }

  export type TournamentFormatMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    description: string | null
    supportsSeeding: boolean | null
    requiresEvenParticipants: boolean | null
    isActive: boolean | null
  }

  export type TournamentFormatCountAggregateOutputType = {
    id: number
    name: number
    code: number
    description: number
    supportsSeeding: number
    requiresEvenParticipants: number
    isActive: number
    _all: number
  }


  export type TournamentFormatMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    supportsSeeding?: true
    requiresEvenParticipants?: true
    isActive?: true
  }

  export type TournamentFormatMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    supportsSeeding?: true
    requiresEvenParticipants?: true
    isActive?: true
  }

  export type TournamentFormatCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    supportsSeeding?: true
    requiresEvenParticipants?: true
    isActive?: true
    _all?: true
  }

  export type TournamentFormatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TournamentFormat to aggregate.
     */
    where?: TournamentFormatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentFormats to fetch.
     */
    orderBy?: TournamentFormatOrderByWithRelationInput | TournamentFormatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TournamentFormatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentFormats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentFormats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TournamentFormats
    **/
    _count?: true | TournamentFormatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TournamentFormatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TournamentFormatMaxAggregateInputType
  }

  export type GetTournamentFormatAggregateType<T extends TournamentFormatAggregateArgs> = {
        [P in keyof T & keyof AggregateTournamentFormat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTournamentFormat[P]>
      : GetScalarType<T[P], AggregateTournamentFormat[P]>
  }




  export type TournamentFormatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentFormatWhereInput
    orderBy?: TournamentFormatOrderByWithAggregationInput | TournamentFormatOrderByWithAggregationInput[]
    by: TournamentFormatScalarFieldEnum[] | TournamentFormatScalarFieldEnum
    having?: TournamentFormatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TournamentFormatCountAggregateInputType | true
    _min?: TournamentFormatMinAggregateInputType
    _max?: TournamentFormatMaxAggregateInputType
  }

  export type TournamentFormatGroupByOutputType = {
    id: string
    name: string
    code: string
    description: string | null
    supportsSeeding: boolean
    requiresEvenParticipants: boolean
    isActive: boolean
    _count: TournamentFormatCountAggregateOutputType | null
    _min: TournamentFormatMinAggregateOutputType | null
    _max: TournamentFormatMaxAggregateOutputType | null
  }

  type GetTournamentFormatGroupByPayload<T extends TournamentFormatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TournamentFormatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TournamentFormatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TournamentFormatGroupByOutputType[P]>
            : GetScalarType<T[P], TournamentFormatGroupByOutputType[P]>
        }
      >
    >


  export type TournamentFormatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    supportsSeeding?: boolean
    requiresEvenParticipants?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["tournamentFormat"]>

  export type TournamentFormatSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    supportsSeeding?: boolean
    requiresEvenParticipants?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["tournamentFormat"]>

  export type TournamentFormatSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    supportsSeeding?: boolean
    requiresEvenParticipants?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["tournamentFormat"]>

  export type TournamentFormatSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    supportsSeeding?: boolean
    requiresEvenParticipants?: boolean
    isActive?: boolean
  }

  export type TournamentFormatOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "description" | "supportsSeeding" | "requiresEvenParticipants" | "isActive", ExtArgs["result"]["tournamentFormat"]>

  export type $TournamentFormatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TournamentFormat"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      description: string | null
      supportsSeeding: boolean
      requiresEvenParticipants: boolean
      isActive: boolean
    }, ExtArgs["result"]["tournamentFormat"]>
    composites: {}
  }

  type TournamentFormatGetPayload<S extends boolean | null | undefined | TournamentFormatDefaultArgs> = $Result.GetResult<Prisma.$TournamentFormatPayload, S>

  type TournamentFormatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TournamentFormatFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TournamentFormatCountAggregateInputType | true
    }

  export interface TournamentFormatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TournamentFormat'], meta: { name: 'TournamentFormat' } }
    /**
     * Find zero or one TournamentFormat that matches the filter.
     * @param {TournamentFormatFindUniqueArgs} args - Arguments to find a TournamentFormat
     * @example
     * // Get one TournamentFormat
     * const tournamentFormat = await prisma.tournamentFormat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TournamentFormatFindUniqueArgs>(args: SelectSubset<T, TournamentFormatFindUniqueArgs<ExtArgs>>): Prisma__TournamentFormatClient<$Result.GetResult<Prisma.$TournamentFormatPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TournamentFormat that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TournamentFormatFindUniqueOrThrowArgs} args - Arguments to find a TournamentFormat
     * @example
     * // Get one TournamentFormat
     * const tournamentFormat = await prisma.tournamentFormat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TournamentFormatFindUniqueOrThrowArgs>(args: SelectSubset<T, TournamentFormatFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TournamentFormatClient<$Result.GetResult<Prisma.$TournamentFormatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TournamentFormat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFormatFindFirstArgs} args - Arguments to find a TournamentFormat
     * @example
     * // Get one TournamentFormat
     * const tournamentFormat = await prisma.tournamentFormat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TournamentFormatFindFirstArgs>(args?: SelectSubset<T, TournamentFormatFindFirstArgs<ExtArgs>>): Prisma__TournamentFormatClient<$Result.GetResult<Prisma.$TournamentFormatPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TournamentFormat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFormatFindFirstOrThrowArgs} args - Arguments to find a TournamentFormat
     * @example
     * // Get one TournamentFormat
     * const tournamentFormat = await prisma.tournamentFormat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TournamentFormatFindFirstOrThrowArgs>(args?: SelectSubset<T, TournamentFormatFindFirstOrThrowArgs<ExtArgs>>): Prisma__TournamentFormatClient<$Result.GetResult<Prisma.$TournamentFormatPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TournamentFormats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFormatFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TournamentFormats
     * const tournamentFormats = await prisma.tournamentFormat.findMany()
     * 
     * // Get first 10 TournamentFormats
     * const tournamentFormats = await prisma.tournamentFormat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tournamentFormatWithIdOnly = await prisma.tournamentFormat.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TournamentFormatFindManyArgs>(args?: SelectSubset<T, TournamentFormatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentFormatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TournamentFormat.
     * @param {TournamentFormatCreateArgs} args - Arguments to create a TournamentFormat.
     * @example
     * // Create one TournamentFormat
     * const TournamentFormat = await prisma.tournamentFormat.create({
     *   data: {
     *     // ... data to create a TournamentFormat
     *   }
     * })
     * 
     */
    create<T extends TournamentFormatCreateArgs>(args: SelectSubset<T, TournamentFormatCreateArgs<ExtArgs>>): Prisma__TournamentFormatClient<$Result.GetResult<Prisma.$TournamentFormatPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TournamentFormats.
     * @param {TournamentFormatCreateManyArgs} args - Arguments to create many TournamentFormats.
     * @example
     * // Create many TournamentFormats
     * const tournamentFormat = await prisma.tournamentFormat.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TournamentFormatCreateManyArgs>(args?: SelectSubset<T, TournamentFormatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TournamentFormats and returns the data saved in the database.
     * @param {TournamentFormatCreateManyAndReturnArgs} args - Arguments to create many TournamentFormats.
     * @example
     * // Create many TournamentFormats
     * const tournamentFormat = await prisma.tournamentFormat.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TournamentFormats and only return the `id`
     * const tournamentFormatWithIdOnly = await prisma.tournamentFormat.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TournamentFormatCreateManyAndReturnArgs>(args?: SelectSubset<T, TournamentFormatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentFormatPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TournamentFormat.
     * @param {TournamentFormatDeleteArgs} args - Arguments to delete one TournamentFormat.
     * @example
     * // Delete one TournamentFormat
     * const TournamentFormat = await prisma.tournamentFormat.delete({
     *   where: {
     *     // ... filter to delete one TournamentFormat
     *   }
     * })
     * 
     */
    delete<T extends TournamentFormatDeleteArgs>(args: SelectSubset<T, TournamentFormatDeleteArgs<ExtArgs>>): Prisma__TournamentFormatClient<$Result.GetResult<Prisma.$TournamentFormatPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TournamentFormat.
     * @param {TournamentFormatUpdateArgs} args - Arguments to update one TournamentFormat.
     * @example
     * // Update one TournamentFormat
     * const tournamentFormat = await prisma.tournamentFormat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TournamentFormatUpdateArgs>(args: SelectSubset<T, TournamentFormatUpdateArgs<ExtArgs>>): Prisma__TournamentFormatClient<$Result.GetResult<Prisma.$TournamentFormatPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TournamentFormats.
     * @param {TournamentFormatDeleteManyArgs} args - Arguments to filter TournamentFormats to delete.
     * @example
     * // Delete a few TournamentFormats
     * const { count } = await prisma.tournamentFormat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TournamentFormatDeleteManyArgs>(args?: SelectSubset<T, TournamentFormatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TournamentFormats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFormatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TournamentFormats
     * const tournamentFormat = await prisma.tournamentFormat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TournamentFormatUpdateManyArgs>(args: SelectSubset<T, TournamentFormatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TournamentFormats and returns the data updated in the database.
     * @param {TournamentFormatUpdateManyAndReturnArgs} args - Arguments to update many TournamentFormats.
     * @example
     * // Update many TournamentFormats
     * const tournamentFormat = await prisma.tournamentFormat.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TournamentFormats and only return the `id`
     * const tournamentFormatWithIdOnly = await prisma.tournamentFormat.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TournamentFormatUpdateManyAndReturnArgs>(args: SelectSubset<T, TournamentFormatUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentFormatPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TournamentFormat.
     * @param {TournamentFormatUpsertArgs} args - Arguments to update or create a TournamentFormat.
     * @example
     * // Update or create a TournamentFormat
     * const tournamentFormat = await prisma.tournamentFormat.upsert({
     *   create: {
     *     // ... data to create a TournamentFormat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TournamentFormat we want to update
     *   }
     * })
     */
    upsert<T extends TournamentFormatUpsertArgs>(args: SelectSubset<T, TournamentFormatUpsertArgs<ExtArgs>>): Prisma__TournamentFormatClient<$Result.GetResult<Prisma.$TournamentFormatPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TournamentFormats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFormatCountArgs} args - Arguments to filter TournamentFormats to count.
     * @example
     * // Count the number of TournamentFormats
     * const count = await prisma.tournamentFormat.count({
     *   where: {
     *     // ... the filter for the TournamentFormats we want to count
     *   }
     * })
    **/
    count<T extends TournamentFormatCountArgs>(
      args?: Subset<T, TournamentFormatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TournamentFormatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TournamentFormat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFormatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TournamentFormatAggregateArgs>(args: Subset<T, TournamentFormatAggregateArgs>): Prisma.PrismaPromise<GetTournamentFormatAggregateType<T>>

    /**
     * Group by TournamentFormat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFormatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TournamentFormatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TournamentFormatGroupByArgs['orderBy'] }
        : { orderBy?: TournamentFormatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TournamentFormatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentFormatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TournamentFormat model
   */
  readonly fields: TournamentFormatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TournamentFormat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TournamentFormatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TournamentFormat model
   */
  interface TournamentFormatFieldRefs {
    readonly id: FieldRef<"TournamentFormat", 'String'>
    readonly name: FieldRef<"TournamentFormat", 'String'>
    readonly code: FieldRef<"TournamentFormat", 'String'>
    readonly description: FieldRef<"TournamentFormat", 'String'>
    readonly supportsSeeding: FieldRef<"TournamentFormat", 'Boolean'>
    readonly requiresEvenParticipants: FieldRef<"TournamentFormat", 'Boolean'>
    readonly isActive: FieldRef<"TournamentFormat", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * TournamentFormat findUnique
   */
  export type TournamentFormatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentFormat
     */
    select?: TournamentFormatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentFormat
     */
    omit?: TournamentFormatOmit<ExtArgs> | null
    /**
     * Filter, which TournamentFormat to fetch.
     */
    where: TournamentFormatWhereUniqueInput
  }

  /**
   * TournamentFormat findUniqueOrThrow
   */
  export type TournamentFormatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentFormat
     */
    select?: TournamentFormatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentFormat
     */
    omit?: TournamentFormatOmit<ExtArgs> | null
    /**
     * Filter, which TournamentFormat to fetch.
     */
    where: TournamentFormatWhereUniqueInput
  }

  /**
   * TournamentFormat findFirst
   */
  export type TournamentFormatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentFormat
     */
    select?: TournamentFormatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentFormat
     */
    omit?: TournamentFormatOmit<ExtArgs> | null
    /**
     * Filter, which TournamentFormat to fetch.
     */
    where?: TournamentFormatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentFormats to fetch.
     */
    orderBy?: TournamentFormatOrderByWithRelationInput | TournamentFormatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TournamentFormats.
     */
    cursor?: TournamentFormatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentFormats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentFormats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TournamentFormats.
     */
    distinct?: TournamentFormatScalarFieldEnum | TournamentFormatScalarFieldEnum[]
  }

  /**
   * TournamentFormat findFirstOrThrow
   */
  export type TournamentFormatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentFormat
     */
    select?: TournamentFormatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentFormat
     */
    omit?: TournamentFormatOmit<ExtArgs> | null
    /**
     * Filter, which TournamentFormat to fetch.
     */
    where?: TournamentFormatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentFormats to fetch.
     */
    orderBy?: TournamentFormatOrderByWithRelationInput | TournamentFormatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TournamentFormats.
     */
    cursor?: TournamentFormatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentFormats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentFormats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TournamentFormats.
     */
    distinct?: TournamentFormatScalarFieldEnum | TournamentFormatScalarFieldEnum[]
  }

  /**
   * TournamentFormat findMany
   */
  export type TournamentFormatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentFormat
     */
    select?: TournamentFormatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentFormat
     */
    omit?: TournamentFormatOmit<ExtArgs> | null
    /**
     * Filter, which TournamentFormats to fetch.
     */
    where?: TournamentFormatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentFormats to fetch.
     */
    orderBy?: TournamentFormatOrderByWithRelationInput | TournamentFormatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TournamentFormats.
     */
    cursor?: TournamentFormatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentFormats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentFormats.
     */
    skip?: number
    distinct?: TournamentFormatScalarFieldEnum | TournamentFormatScalarFieldEnum[]
  }

  /**
   * TournamentFormat create
   */
  export type TournamentFormatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentFormat
     */
    select?: TournamentFormatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentFormat
     */
    omit?: TournamentFormatOmit<ExtArgs> | null
    /**
     * The data needed to create a TournamentFormat.
     */
    data: XOR<TournamentFormatCreateInput, TournamentFormatUncheckedCreateInput>
  }

  /**
   * TournamentFormat createMany
   */
  export type TournamentFormatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TournamentFormats.
     */
    data: TournamentFormatCreateManyInput | TournamentFormatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TournamentFormat createManyAndReturn
   */
  export type TournamentFormatCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentFormat
     */
    select?: TournamentFormatSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentFormat
     */
    omit?: TournamentFormatOmit<ExtArgs> | null
    /**
     * The data used to create many TournamentFormats.
     */
    data: TournamentFormatCreateManyInput | TournamentFormatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TournamentFormat update
   */
  export type TournamentFormatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentFormat
     */
    select?: TournamentFormatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentFormat
     */
    omit?: TournamentFormatOmit<ExtArgs> | null
    /**
     * The data needed to update a TournamentFormat.
     */
    data: XOR<TournamentFormatUpdateInput, TournamentFormatUncheckedUpdateInput>
    /**
     * Choose, which TournamentFormat to update.
     */
    where: TournamentFormatWhereUniqueInput
  }

  /**
   * TournamentFormat updateMany
   */
  export type TournamentFormatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TournamentFormats.
     */
    data: XOR<TournamentFormatUpdateManyMutationInput, TournamentFormatUncheckedUpdateManyInput>
    /**
     * Filter which TournamentFormats to update
     */
    where?: TournamentFormatWhereInput
    /**
     * Limit how many TournamentFormats to update.
     */
    limit?: number
  }

  /**
   * TournamentFormat updateManyAndReturn
   */
  export type TournamentFormatUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentFormat
     */
    select?: TournamentFormatSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentFormat
     */
    omit?: TournamentFormatOmit<ExtArgs> | null
    /**
     * The data used to update TournamentFormats.
     */
    data: XOR<TournamentFormatUpdateManyMutationInput, TournamentFormatUncheckedUpdateManyInput>
    /**
     * Filter which TournamentFormats to update
     */
    where?: TournamentFormatWhereInput
    /**
     * Limit how many TournamentFormats to update.
     */
    limit?: number
  }

  /**
   * TournamentFormat upsert
   */
  export type TournamentFormatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentFormat
     */
    select?: TournamentFormatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentFormat
     */
    omit?: TournamentFormatOmit<ExtArgs> | null
    /**
     * The filter to search for the TournamentFormat to update in case it exists.
     */
    where: TournamentFormatWhereUniqueInput
    /**
     * In case the TournamentFormat found by the `where` argument doesn't exist, create a new TournamentFormat with this data.
     */
    create: XOR<TournamentFormatCreateInput, TournamentFormatUncheckedCreateInput>
    /**
     * In case the TournamentFormat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TournamentFormatUpdateInput, TournamentFormatUncheckedUpdateInput>
  }

  /**
   * TournamentFormat delete
   */
  export type TournamentFormatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentFormat
     */
    select?: TournamentFormatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentFormat
     */
    omit?: TournamentFormatOmit<ExtArgs> | null
    /**
     * Filter which TournamentFormat to delete.
     */
    where: TournamentFormatWhereUniqueInput
  }

  /**
   * TournamentFormat deleteMany
   */
  export type TournamentFormatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TournamentFormats to delete
     */
    where?: TournamentFormatWhereInput
    /**
     * Limit how many TournamentFormats to delete.
     */
    limit?: number
  }

  /**
   * TournamentFormat without action
   */
  export type TournamentFormatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentFormat
     */
    select?: TournamentFormatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentFormat
     */
    omit?: TournamentFormatOmit<ExtArgs> | null
  }


  /**
   * Model TournamentRound
   */

  export type AggregateTournamentRound = {
    _count: TournamentRoundCountAggregateOutputType | null
    _avg: TournamentRoundAvgAggregateOutputType | null
    _sum: TournamentRoundSumAggregateOutputType | null
    _min: TournamentRoundMinAggregateOutputType | null
    _max: TournamentRoundMaxAggregateOutputType | null
  }

  export type TournamentRoundAvgAggregateOutputType = {
    roundNumber: number | null
  }

  export type TournamentRoundSumAggregateOutputType = {
    roundNumber: number | null
  }

  export type TournamentRoundMinAggregateOutputType = {
    id: string | null
    tournamentId: string | null
    roundNumber: number | null
    name: string | null
    status: string | null
    startTime: Date | null
    endTime: Date | null
    createdAt: Date | null
  }

  export type TournamentRoundMaxAggregateOutputType = {
    id: string | null
    tournamentId: string | null
    roundNumber: number | null
    name: string | null
    status: string | null
    startTime: Date | null
    endTime: Date | null
    createdAt: Date | null
  }

  export type TournamentRoundCountAggregateOutputType = {
    id: number
    tournamentId: number
    roundNumber: number
    name: number
    status: number
    startTime: number
    endTime: number
    createdAt: number
    _all: number
  }


  export type TournamentRoundAvgAggregateInputType = {
    roundNumber?: true
  }

  export type TournamentRoundSumAggregateInputType = {
    roundNumber?: true
  }

  export type TournamentRoundMinAggregateInputType = {
    id?: true
    tournamentId?: true
    roundNumber?: true
    name?: true
    status?: true
    startTime?: true
    endTime?: true
    createdAt?: true
  }

  export type TournamentRoundMaxAggregateInputType = {
    id?: true
    tournamentId?: true
    roundNumber?: true
    name?: true
    status?: true
    startTime?: true
    endTime?: true
    createdAt?: true
  }

  export type TournamentRoundCountAggregateInputType = {
    id?: true
    tournamentId?: true
    roundNumber?: true
    name?: true
    status?: true
    startTime?: true
    endTime?: true
    createdAt?: true
    _all?: true
  }

  export type TournamentRoundAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TournamentRound to aggregate.
     */
    where?: TournamentRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentRounds to fetch.
     */
    orderBy?: TournamentRoundOrderByWithRelationInput | TournamentRoundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TournamentRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentRounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentRounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TournamentRounds
    **/
    _count?: true | TournamentRoundCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TournamentRoundAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TournamentRoundSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TournamentRoundMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TournamentRoundMaxAggregateInputType
  }

  export type GetTournamentRoundAggregateType<T extends TournamentRoundAggregateArgs> = {
        [P in keyof T & keyof AggregateTournamentRound]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTournamentRound[P]>
      : GetScalarType<T[P], AggregateTournamentRound[P]>
  }




  export type TournamentRoundGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentRoundWhereInput
    orderBy?: TournamentRoundOrderByWithAggregationInput | TournamentRoundOrderByWithAggregationInput[]
    by: TournamentRoundScalarFieldEnum[] | TournamentRoundScalarFieldEnum
    having?: TournamentRoundScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TournamentRoundCountAggregateInputType | true
    _avg?: TournamentRoundAvgAggregateInputType
    _sum?: TournamentRoundSumAggregateInputType
    _min?: TournamentRoundMinAggregateInputType
    _max?: TournamentRoundMaxAggregateInputType
  }

  export type TournamentRoundGroupByOutputType = {
    id: string
    tournamentId: string
    roundNumber: number
    name: string | null
    status: string
    startTime: Date | null
    endTime: Date | null
    createdAt: Date
    _count: TournamentRoundCountAggregateOutputType | null
    _avg: TournamentRoundAvgAggregateOutputType | null
    _sum: TournamentRoundSumAggregateOutputType | null
    _min: TournamentRoundMinAggregateOutputType | null
    _max: TournamentRoundMaxAggregateOutputType | null
  }

  type GetTournamentRoundGroupByPayload<T extends TournamentRoundGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TournamentRoundGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TournamentRoundGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TournamentRoundGroupByOutputType[P]>
            : GetScalarType<T[P], TournamentRoundGroupByOutputType[P]>
        }
      >
    >


  export type TournamentRoundSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournamentId?: boolean
    roundNumber?: boolean
    name?: boolean
    status?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    matches?: boolean | TournamentRound$matchesArgs<ExtArgs>
    _count?: boolean | TournamentRoundCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournamentRound"]>

  export type TournamentRoundSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournamentId?: boolean
    roundNumber?: boolean
    name?: boolean
    status?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournamentRound"]>

  export type TournamentRoundSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournamentId?: boolean
    roundNumber?: boolean
    name?: boolean
    status?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournamentRound"]>

  export type TournamentRoundSelectScalar = {
    id?: boolean
    tournamentId?: boolean
    roundNumber?: boolean
    name?: boolean
    status?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
  }

  export type TournamentRoundOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tournamentId" | "roundNumber" | "name" | "status" | "startTime" | "endTime" | "createdAt", ExtArgs["result"]["tournamentRound"]>
  export type TournamentRoundInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    matches?: boolean | TournamentRound$matchesArgs<ExtArgs>
    _count?: boolean | TournamentRoundCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TournamentRoundIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
  }
  export type TournamentRoundIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
  }

  export type $TournamentRoundPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TournamentRound"
    objects: {
      tournament: Prisma.$TournamentPayload<ExtArgs>
      matches: Prisma.$TournamentMatchPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tournamentId: string
      roundNumber: number
      name: string | null
      status: string
      startTime: Date | null
      endTime: Date | null
      createdAt: Date
    }, ExtArgs["result"]["tournamentRound"]>
    composites: {}
  }

  type TournamentRoundGetPayload<S extends boolean | null | undefined | TournamentRoundDefaultArgs> = $Result.GetResult<Prisma.$TournamentRoundPayload, S>

  type TournamentRoundCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TournamentRoundFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TournamentRoundCountAggregateInputType | true
    }

  export interface TournamentRoundDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TournamentRound'], meta: { name: 'TournamentRound' } }
    /**
     * Find zero or one TournamentRound that matches the filter.
     * @param {TournamentRoundFindUniqueArgs} args - Arguments to find a TournamentRound
     * @example
     * // Get one TournamentRound
     * const tournamentRound = await prisma.tournamentRound.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TournamentRoundFindUniqueArgs>(args: SelectSubset<T, TournamentRoundFindUniqueArgs<ExtArgs>>): Prisma__TournamentRoundClient<$Result.GetResult<Prisma.$TournamentRoundPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TournamentRound that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TournamentRoundFindUniqueOrThrowArgs} args - Arguments to find a TournamentRound
     * @example
     * // Get one TournamentRound
     * const tournamentRound = await prisma.tournamentRound.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TournamentRoundFindUniqueOrThrowArgs>(args: SelectSubset<T, TournamentRoundFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TournamentRoundClient<$Result.GetResult<Prisma.$TournamentRoundPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TournamentRound that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentRoundFindFirstArgs} args - Arguments to find a TournamentRound
     * @example
     * // Get one TournamentRound
     * const tournamentRound = await prisma.tournamentRound.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TournamentRoundFindFirstArgs>(args?: SelectSubset<T, TournamentRoundFindFirstArgs<ExtArgs>>): Prisma__TournamentRoundClient<$Result.GetResult<Prisma.$TournamentRoundPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TournamentRound that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentRoundFindFirstOrThrowArgs} args - Arguments to find a TournamentRound
     * @example
     * // Get one TournamentRound
     * const tournamentRound = await prisma.tournamentRound.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TournamentRoundFindFirstOrThrowArgs>(args?: SelectSubset<T, TournamentRoundFindFirstOrThrowArgs<ExtArgs>>): Prisma__TournamentRoundClient<$Result.GetResult<Prisma.$TournamentRoundPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TournamentRounds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentRoundFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TournamentRounds
     * const tournamentRounds = await prisma.tournamentRound.findMany()
     * 
     * // Get first 10 TournamentRounds
     * const tournamentRounds = await prisma.tournamentRound.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tournamentRoundWithIdOnly = await prisma.tournamentRound.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TournamentRoundFindManyArgs>(args?: SelectSubset<T, TournamentRoundFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentRoundPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TournamentRound.
     * @param {TournamentRoundCreateArgs} args - Arguments to create a TournamentRound.
     * @example
     * // Create one TournamentRound
     * const TournamentRound = await prisma.tournamentRound.create({
     *   data: {
     *     // ... data to create a TournamentRound
     *   }
     * })
     * 
     */
    create<T extends TournamentRoundCreateArgs>(args: SelectSubset<T, TournamentRoundCreateArgs<ExtArgs>>): Prisma__TournamentRoundClient<$Result.GetResult<Prisma.$TournamentRoundPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TournamentRounds.
     * @param {TournamentRoundCreateManyArgs} args - Arguments to create many TournamentRounds.
     * @example
     * // Create many TournamentRounds
     * const tournamentRound = await prisma.tournamentRound.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TournamentRoundCreateManyArgs>(args?: SelectSubset<T, TournamentRoundCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TournamentRounds and returns the data saved in the database.
     * @param {TournamentRoundCreateManyAndReturnArgs} args - Arguments to create many TournamentRounds.
     * @example
     * // Create many TournamentRounds
     * const tournamentRound = await prisma.tournamentRound.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TournamentRounds and only return the `id`
     * const tournamentRoundWithIdOnly = await prisma.tournamentRound.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TournamentRoundCreateManyAndReturnArgs>(args?: SelectSubset<T, TournamentRoundCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentRoundPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TournamentRound.
     * @param {TournamentRoundDeleteArgs} args - Arguments to delete one TournamentRound.
     * @example
     * // Delete one TournamentRound
     * const TournamentRound = await prisma.tournamentRound.delete({
     *   where: {
     *     // ... filter to delete one TournamentRound
     *   }
     * })
     * 
     */
    delete<T extends TournamentRoundDeleteArgs>(args: SelectSubset<T, TournamentRoundDeleteArgs<ExtArgs>>): Prisma__TournamentRoundClient<$Result.GetResult<Prisma.$TournamentRoundPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TournamentRound.
     * @param {TournamentRoundUpdateArgs} args - Arguments to update one TournamentRound.
     * @example
     * // Update one TournamentRound
     * const tournamentRound = await prisma.tournamentRound.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TournamentRoundUpdateArgs>(args: SelectSubset<T, TournamentRoundUpdateArgs<ExtArgs>>): Prisma__TournamentRoundClient<$Result.GetResult<Prisma.$TournamentRoundPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TournamentRounds.
     * @param {TournamentRoundDeleteManyArgs} args - Arguments to filter TournamentRounds to delete.
     * @example
     * // Delete a few TournamentRounds
     * const { count } = await prisma.tournamentRound.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TournamentRoundDeleteManyArgs>(args?: SelectSubset<T, TournamentRoundDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TournamentRounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentRoundUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TournamentRounds
     * const tournamentRound = await prisma.tournamentRound.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TournamentRoundUpdateManyArgs>(args: SelectSubset<T, TournamentRoundUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TournamentRounds and returns the data updated in the database.
     * @param {TournamentRoundUpdateManyAndReturnArgs} args - Arguments to update many TournamentRounds.
     * @example
     * // Update many TournamentRounds
     * const tournamentRound = await prisma.tournamentRound.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TournamentRounds and only return the `id`
     * const tournamentRoundWithIdOnly = await prisma.tournamentRound.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TournamentRoundUpdateManyAndReturnArgs>(args: SelectSubset<T, TournamentRoundUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentRoundPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TournamentRound.
     * @param {TournamentRoundUpsertArgs} args - Arguments to update or create a TournamentRound.
     * @example
     * // Update or create a TournamentRound
     * const tournamentRound = await prisma.tournamentRound.upsert({
     *   create: {
     *     // ... data to create a TournamentRound
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TournamentRound we want to update
     *   }
     * })
     */
    upsert<T extends TournamentRoundUpsertArgs>(args: SelectSubset<T, TournamentRoundUpsertArgs<ExtArgs>>): Prisma__TournamentRoundClient<$Result.GetResult<Prisma.$TournamentRoundPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TournamentRounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentRoundCountArgs} args - Arguments to filter TournamentRounds to count.
     * @example
     * // Count the number of TournamentRounds
     * const count = await prisma.tournamentRound.count({
     *   where: {
     *     // ... the filter for the TournamentRounds we want to count
     *   }
     * })
    **/
    count<T extends TournamentRoundCountArgs>(
      args?: Subset<T, TournamentRoundCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TournamentRoundCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TournamentRound.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentRoundAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TournamentRoundAggregateArgs>(args: Subset<T, TournamentRoundAggregateArgs>): Prisma.PrismaPromise<GetTournamentRoundAggregateType<T>>

    /**
     * Group by TournamentRound.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentRoundGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TournamentRoundGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TournamentRoundGroupByArgs['orderBy'] }
        : { orderBy?: TournamentRoundGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TournamentRoundGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentRoundGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TournamentRound model
   */
  readonly fields: TournamentRoundFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TournamentRound.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TournamentRoundClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tournament<T extends TournamentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TournamentDefaultArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    matches<T extends TournamentRound$matchesArgs<ExtArgs> = {}>(args?: Subset<T, TournamentRound$matchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TournamentRound model
   */
  interface TournamentRoundFieldRefs {
    readonly id: FieldRef<"TournamentRound", 'String'>
    readonly tournamentId: FieldRef<"TournamentRound", 'String'>
    readonly roundNumber: FieldRef<"TournamentRound", 'Int'>
    readonly name: FieldRef<"TournamentRound", 'String'>
    readonly status: FieldRef<"TournamentRound", 'String'>
    readonly startTime: FieldRef<"TournamentRound", 'DateTime'>
    readonly endTime: FieldRef<"TournamentRound", 'DateTime'>
    readonly createdAt: FieldRef<"TournamentRound", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TournamentRound findUnique
   */
  export type TournamentRoundFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentRound
     */
    select?: TournamentRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentRound
     */
    omit?: TournamentRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentRoundInclude<ExtArgs> | null
    /**
     * Filter, which TournamentRound to fetch.
     */
    where: TournamentRoundWhereUniqueInput
  }

  /**
   * TournamentRound findUniqueOrThrow
   */
  export type TournamentRoundFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentRound
     */
    select?: TournamentRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentRound
     */
    omit?: TournamentRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentRoundInclude<ExtArgs> | null
    /**
     * Filter, which TournamentRound to fetch.
     */
    where: TournamentRoundWhereUniqueInput
  }

  /**
   * TournamentRound findFirst
   */
  export type TournamentRoundFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentRound
     */
    select?: TournamentRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentRound
     */
    omit?: TournamentRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentRoundInclude<ExtArgs> | null
    /**
     * Filter, which TournamentRound to fetch.
     */
    where?: TournamentRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentRounds to fetch.
     */
    orderBy?: TournamentRoundOrderByWithRelationInput | TournamentRoundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TournamentRounds.
     */
    cursor?: TournamentRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentRounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentRounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TournamentRounds.
     */
    distinct?: TournamentRoundScalarFieldEnum | TournamentRoundScalarFieldEnum[]
  }

  /**
   * TournamentRound findFirstOrThrow
   */
  export type TournamentRoundFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentRound
     */
    select?: TournamentRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentRound
     */
    omit?: TournamentRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentRoundInclude<ExtArgs> | null
    /**
     * Filter, which TournamentRound to fetch.
     */
    where?: TournamentRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentRounds to fetch.
     */
    orderBy?: TournamentRoundOrderByWithRelationInput | TournamentRoundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TournamentRounds.
     */
    cursor?: TournamentRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentRounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentRounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TournamentRounds.
     */
    distinct?: TournamentRoundScalarFieldEnum | TournamentRoundScalarFieldEnum[]
  }

  /**
   * TournamentRound findMany
   */
  export type TournamentRoundFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentRound
     */
    select?: TournamentRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentRound
     */
    omit?: TournamentRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentRoundInclude<ExtArgs> | null
    /**
     * Filter, which TournamentRounds to fetch.
     */
    where?: TournamentRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentRounds to fetch.
     */
    orderBy?: TournamentRoundOrderByWithRelationInput | TournamentRoundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TournamentRounds.
     */
    cursor?: TournamentRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentRounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentRounds.
     */
    skip?: number
    distinct?: TournamentRoundScalarFieldEnum | TournamentRoundScalarFieldEnum[]
  }

  /**
   * TournamentRound create
   */
  export type TournamentRoundCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentRound
     */
    select?: TournamentRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentRound
     */
    omit?: TournamentRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentRoundInclude<ExtArgs> | null
    /**
     * The data needed to create a TournamentRound.
     */
    data: XOR<TournamentRoundCreateInput, TournamentRoundUncheckedCreateInput>
  }

  /**
   * TournamentRound createMany
   */
  export type TournamentRoundCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TournamentRounds.
     */
    data: TournamentRoundCreateManyInput | TournamentRoundCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TournamentRound createManyAndReturn
   */
  export type TournamentRoundCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentRound
     */
    select?: TournamentRoundSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentRound
     */
    omit?: TournamentRoundOmit<ExtArgs> | null
    /**
     * The data used to create many TournamentRounds.
     */
    data: TournamentRoundCreateManyInput | TournamentRoundCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentRoundIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TournamentRound update
   */
  export type TournamentRoundUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentRound
     */
    select?: TournamentRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentRound
     */
    omit?: TournamentRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentRoundInclude<ExtArgs> | null
    /**
     * The data needed to update a TournamentRound.
     */
    data: XOR<TournamentRoundUpdateInput, TournamentRoundUncheckedUpdateInput>
    /**
     * Choose, which TournamentRound to update.
     */
    where: TournamentRoundWhereUniqueInput
  }

  /**
   * TournamentRound updateMany
   */
  export type TournamentRoundUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TournamentRounds.
     */
    data: XOR<TournamentRoundUpdateManyMutationInput, TournamentRoundUncheckedUpdateManyInput>
    /**
     * Filter which TournamentRounds to update
     */
    where?: TournamentRoundWhereInput
    /**
     * Limit how many TournamentRounds to update.
     */
    limit?: number
  }

  /**
   * TournamentRound updateManyAndReturn
   */
  export type TournamentRoundUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentRound
     */
    select?: TournamentRoundSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentRound
     */
    omit?: TournamentRoundOmit<ExtArgs> | null
    /**
     * The data used to update TournamentRounds.
     */
    data: XOR<TournamentRoundUpdateManyMutationInput, TournamentRoundUncheckedUpdateManyInput>
    /**
     * Filter which TournamentRounds to update
     */
    where?: TournamentRoundWhereInput
    /**
     * Limit how many TournamentRounds to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentRoundIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TournamentRound upsert
   */
  export type TournamentRoundUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentRound
     */
    select?: TournamentRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentRound
     */
    omit?: TournamentRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentRoundInclude<ExtArgs> | null
    /**
     * The filter to search for the TournamentRound to update in case it exists.
     */
    where: TournamentRoundWhereUniqueInput
    /**
     * In case the TournamentRound found by the `where` argument doesn't exist, create a new TournamentRound with this data.
     */
    create: XOR<TournamentRoundCreateInput, TournamentRoundUncheckedCreateInput>
    /**
     * In case the TournamentRound was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TournamentRoundUpdateInput, TournamentRoundUncheckedUpdateInput>
  }

  /**
   * TournamentRound delete
   */
  export type TournamentRoundDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentRound
     */
    select?: TournamentRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentRound
     */
    omit?: TournamentRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentRoundInclude<ExtArgs> | null
    /**
     * Filter which TournamentRound to delete.
     */
    where: TournamentRoundWhereUniqueInput
  }

  /**
   * TournamentRound deleteMany
   */
  export type TournamentRoundDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TournamentRounds to delete
     */
    where?: TournamentRoundWhereInput
    /**
     * Limit how many TournamentRounds to delete.
     */
    limit?: number
  }

  /**
   * TournamentRound.matches
   */
  export type TournamentRound$matchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentMatch
     */
    omit?: TournamentMatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    where?: TournamentMatchWhereInput
    orderBy?: TournamentMatchOrderByWithRelationInput | TournamentMatchOrderByWithRelationInput[]
    cursor?: TournamentMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentMatchScalarFieldEnum | TournamentMatchScalarFieldEnum[]
  }

  /**
   * TournamentRound without action
   */
  export type TournamentRoundDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentRound
     */
    select?: TournamentRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentRound
     */
    omit?: TournamentRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentRoundInclude<ExtArgs> | null
  }


  /**
   * Model TournamentMatch
   */

  export type AggregateTournamentMatch = {
    _count: TournamentMatchCountAggregateOutputType | null
    _avg: TournamentMatchAvgAggregateOutputType | null
    _sum: TournamentMatchSumAggregateOutputType | null
    _min: TournamentMatchMinAggregateOutputType | null
    _max: TournamentMatchMaxAggregateOutputType | null
  }

  export type TournamentMatchAvgAggregateOutputType = {
    bracketPosition: number | null
    player1Score: number | null
    player2Score: number | null
  }

  export type TournamentMatchSumAggregateOutputType = {
    bracketPosition: number | null
    player1Score: number | null
    player2Score: number | null
  }

  export type TournamentMatchMinAggregateOutputType = {
    id: string | null
    tournamentId: string | null
    roundId: string | null
    player1Id: string | null
    player2Id: string | null
    winnerId: string | null
    status: string | null
    gameSessionId: string | null
    bracketPosition: number | null
    player1Score: number | null
    player2Score: number | null
    startTime: Date | null
    endTime: Date | null
    createdAt: Date | null
  }

  export type TournamentMatchMaxAggregateOutputType = {
    id: string | null
    tournamentId: string | null
    roundId: string | null
    player1Id: string | null
    player2Id: string | null
    winnerId: string | null
    status: string | null
    gameSessionId: string | null
    bracketPosition: number | null
    player1Score: number | null
    player2Score: number | null
    startTime: Date | null
    endTime: Date | null
    createdAt: Date | null
  }

  export type TournamentMatchCountAggregateOutputType = {
    id: number
    tournamentId: number
    roundId: number
    player1Id: number
    player2Id: number
    winnerId: number
    status: number
    gameSessionId: number
    bracketPosition: number
    player1Score: number
    player2Score: number
    matchData: number
    startTime: number
    endTime: number
    createdAt: number
    _all: number
  }


  export type TournamentMatchAvgAggregateInputType = {
    bracketPosition?: true
    player1Score?: true
    player2Score?: true
  }

  export type TournamentMatchSumAggregateInputType = {
    bracketPosition?: true
    player1Score?: true
    player2Score?: true
  }

  export type TournamentMatchMinAggregateInputType = {
    id?: true
    tournamentId?: true
    roundId?: true
    player1Id?: true
    player2Id?: true
    winnerId?: true
    status?: true
    gameSessionId?: true
    bracketPosition?: true
    player1Score?: true
    player2Score?: true
    startTime?: true
    endTime?: true
    createdAt?: true
  }

  export type TournamentMatchMaxAggregateInputType = {
    id?: true
    tournamentId?: true
    roundId?: true
    player1Id?: true
    player2Id?: true
    winnerId?: true
    status?: true
    gameSessionId?: true
    bracketPosition?: true
    player1Score?: true
    player2Score?: true
    startTime?: true
    endTime?: true
    createdAt?: true
  }

  export type TournamentMatchCountAggregateInputType = {
    id?: true
    tournamentId?: true
    roundId?: true
    player1Id?: true
    player2Id?: true
    winnerId?: true
    status?: true
    gameSessionId?: true
    bracketPosition?: true
    player1Score?: true
    player2Score?: true
    matchData?: true
    startTime?: true
    endTime?: true
    createdAt?: true
    _all?: true
  }

  export type TournamentMatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TournamentMatch to aggregate.
     */
    where?: TournamentMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentMatches to fetch.
     */
    orderBy?: TournamentMatchOrderByWithRelationInput | TournamentMatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TournamentMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentMatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentMatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TournamentMatches
    **/
    _count?: true | TournamentMatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TournamentMatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TournamentMatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TournamentMatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TournamentMatchMaxAggregateInputType
  }

  export type GetTournamentMatchAggregateType<T extends TournamentMatchAggregateArgs> = {
        [P in keyof T & keyof AggregateTournamentMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTournamentMatch[P]>
      : GetScalarType<T[P], AggregateTournamentMatch[P]>
  }




  export type TournamentMatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentMatchWhereInput
    orderBy?: TournamentMatchOrderByWithAggregationInput | TournamentMatchOrderByWithAggregationInput[]
    by: TournamentMatchScalarFieldEnum[] | TournamentMatchScalarFieldEnum
    having?: TournamentMatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TournamentMatchCountAggregateInputType | true
    _avg?: TournamentMatchAvgAggregateInputType
    _sum?: TournamentMatchSumAggregateInputType
    _min?: TournamentMatchMinAggregateInputType
    _max?: TournamentMatchMaxAggregateInputType
  }

  export type TournamentMatchGroupByOutputType = {
    id: string
    tournamentId: string
    roundId: string
    player1Id: string | null
    player2Id: string | null
    winnerId: string | null
    status: string
    gameSessionId: string | null
    bracketPosition: number | null
    player1Score: number
    player2Score: number
    matchData: JsonValue | null
    startTime: Date | null
    endTime: Date | null
    createdAt: Date
    _count: TournamentMatchCountAggregateOutputType | null
    _avg: TournamentMatchAvgAggregateOutputType | null
    _sum: TournamentMatchSumAggregateOutputType | null
    _min: TournamentMatchMinAggregateOutputType | null
    _max: TournamentMatchMaxAggregateOutputType | null
  }

  type GetTournamentMatchGroupByPayload<T extends TournamentMatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TournamentMatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TournamentMatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TournamentMatchGroupByOutputType[P]>
            : GetScalarType<T[P], TournamentMatchGroupByOutputType[P]>
        }
      >
    >


  export type TournamentMatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournamentId?: boolean
    roundId?: boolean
    player1Id?: boolean
    player2Id?: boolean
    winnerId?: boolean
    status?: boolean
    gameSessionId?: boolean
    bracketPosition?: boolean
    player1Score?: boolean
    player2Score?: boolean
    matchData?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    round?: boolean | TournamentRoundDefaultArgs<ExtArgs>
    player1?: boolean | TournamentMatch$player1Args<ExtArgs>
    player2?: boolean | TournamentMatch$player2Args<ExtArgs>
    winner?: boolean | TournamentMatch$winnerArgs<ExtArgs>
    results?: boolean | TournamentMatch$resultsArgs<ExtArgs>
    _count?: boolean | TournamentMatchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournamentMatch"]>

  export type TournamentMatchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournamentId?: boolean
    roundId?: boolean
    player1Id?: boolean
    player2Id?: boolean
    winnerId?: boolean
    status?: boolean
    gameSessionId?: boolean
    bracketPosition?: boolean
    player1Score?: boolean
    player2Score?: boolean
    matchData?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    round?: boolean | TournamentRoundDefaultArgs<ExtArgs>
    player1?: boolean | TournamentMatch$player1Args<ExtArgs>
    player2?: boolean | TournamentMatch$player2Args<ExtArgs>
    winner?: boolean | TournamentMatch$winnerArgs<ExtArgs>
  }, ExtArgs["result"]["tournamentMatch"]>

  export type TournamentMatchSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournamentId?: boolean
    roundId?: boolean
    player1Id?: boolean
    player2Id?: boolean
    winnerId?: boolean
    status?: boolean
    gameSessionId?: boolean
    bracketPosition?: boolean
    player1Score?: boolean
    player2Score?: boolean
    matchData?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    round?: boolean | TournamentRoundDefaultArgs<ExtArgs>
    player1?: boolean | TournamentMatch$player1Args<ExtArgs>
    player2?: boolean | TournamentMatch$player2Args<ExtArgs>
    winner?: boolean | TournamentMatch$winnerArgs<ExtArgs>
  }, ExtArgs["result"]["tournamentMatch"]>

  export type TournamentMatchSelectScalar = {
    id?: boolean
    tournamentId?: boolean
    roundId?: boolean
    player1Id?: boolean
    player2Id?: boolean
    winnerId?: boolean
    status?: boolean
    gameSessionId?: boolean
    bracketPosition?: boolean
    player1Score?: boolean
    player2Score?: boolean
    matchData?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
  }

  export type TournamentMatchOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tournamentId" | "roundId" | "player1Id" | "player2Id" | "winnerId" | "status" | "gameSessionId" | "bracketPosition" | "player1Score" | "player2Score" | "matchData" | "startTime" | "endTime" | "createdAt", ExtArgs["result"]["tournamentMatch"]>
  export type TournamentMatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    round?: boolean | TournamentRoundDefaultArgs<ExtArgs>
    player1?: boolean | TournamentMatch$player1Args<ExtArgs>
    player2?: boolean | TournamentMatch$player2Args<ExtArgs>
    winner?: boolean | TournamentMatch$winnerArgs<ExtArgs>
    results?: boolean | TournamentMatch$resultsArgs<ExtArgs>
    _count?: boolean | TournamentMatchCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TournamentMatchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    round?: boolean | TournamentRoundDefaultArgs<ExtArgs>
    player1?: boolean | TournamentMatch$player1Args<ExtArgs>
    player2?: boolean | TournamentMatch$player2Args<ExtArgs>
    winner?: boolean | TournamentMatch$winnerArgs<ExtArgs>
  }
  export type TournamentMatchIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    round?: boolean | TournamentRoundDefaultArgs<ExtArgs>
    player1?: boolean | TournamentMatch$player1Args<ExtArgs>
    player2?: boolean | TournamentMatch$player2Args<ExtArgs>
    winner?: boolean | TournamentMatch$winnerArgs<ExtArgs>
  }

  export type $TournamentMatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TournamentMatch"
    objects: {
      tournament: Prisma.$TournamentPayload<ExtArgs>
      round: Prisma.$TournamentRoundPayload<ExtArgs>
      player1: Prisma.$UserPayload<ExtArgs> | null
      player2: Prisma.$UserPayload<ExtArgs> | null
      winner: Prisma.$UserPayload<ExtArgs> | null
      results: Prisma.$MatchResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tournamentId: string
      roundId: string
      player1Id: string | null
      player2Id: string | null
      winnerId: string | null
      status: string
      gameSessionId: string | null
      bracketPosition: number | null
      player1Score: number
      player2Score: number
      matchData: Prisma.JsonValue | null
      startTime: Date | null
      endTime: Date | null
      createdAt: Date
    }, ExtArgs["result"]["tournamentMatch"]>
    composites: {}
  }

  type TournamentMatchGetPayload<S extends boolean | null | undefined | TournamentMatchDefaultArgs> = $Result.GetResult<Prisma.$TournamentMatchPayload, S>

  type TournamentMatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TournamentMatchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TournamentMatchCountAggregateInputType | true
    }

  export interface TournamentMatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TournamentMatch'], meta: { name: 'TournamentMatch' } }
    /**
     * Find zero or one TournamentMatch that matches the filter.
     * @param {TournamentMatchFindUniqueArgs} args - Arguments to find a TournamentMatch
     * @example
     * // Get one TournamentMatch
     * const tournamentMatch = await prisma.tournamentMatch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TournamentMatchFindUniqueArgs>(args: SelectSubset<T, TournamentMatchFindUniqueArgs<ExtArgs>>): Prisma__TournamentMatchClient<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TournamentMatch that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TournamentMatchFindUniqueOrThrowArgs} args - Arguments to find a TournamentMatch
     * @example
     * // Get one TournamentMatch
     * const tournamentMatch = await prisma.tournamentMatch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TournamentMatchFindUniqueOrThrowArgs>(args: SelectSubset<T, TournamentMatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TournamentMatchClient<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TournamentMatch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchFindFirstArgs} args - Arguments to find a TournamentMatch
     * @example
     * // Get one TournamentMatch
     * const tournamentMatch = await prisma.tournamentMatch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TournamentMatchFindFirstArgs>(args?: SelectSubset<T, TournamentMatchFindFirstArgs<ExtArgs>>): Prisma__TournamentMatchClient<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TournamentMatch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchFindFirstOrThrowArgs} args - Arguments to find a TournamentMatch
     * @example
     * // Get one TournamentMatch
     * const tournamentMatch = await prisma.tournamentMatch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TournamentMatchFindFirstOrThrowArgs>(args?: SelectSubset<T, TournamentMatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__TournamentMatchClient<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TournamentMatches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TournamentMatches
     * const tournamentMatches = await prisma.tournamentMatch.findMany()
     * 
     * // Get first 10 TournamentMatches
     * const tournamentMatches = await prisma.tournamentMatch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tournamentMatchWithIdOnly = await prisma.tournamentMatch.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TournamentMatchFindManyArgs>(args?: SelectSubset<T, TournamentMatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TournamentMatch.
     * @param {TournamentMatchCreateArgs} args - Arguments to create a TournamentMatch.
     * @example
     * // Create one TournamentMatch
     * const TournamentMatch = await prisma.tournamentMatch.create({
     *   data: {
     *     // ... data to create a TournamentMatch
     *   }
     * })
     * 
     */
    create<T extends TournamentMatchCreateArgs>(args: SelectSubset<T, TournamentMatchCreateArgs<ExtArgs>>): Prisma__TournamentMatchClient<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TournamentMatches.
     * @param {TournamentMatchCreateManyArgs} args - Arguments to create many TournamentMatches.
     * @example
     * // Create many TournamentMatches
     * const tournamentMatch = await prisma.tournamentMatch.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TournamentMatchCreateManyArgs>(args?: SelectSubset<T, TournamentMatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TournamentMatches and returns the data saved in the database.
     * @param {TournamentMatchCreateManyAndReturnArgs} args - Arguments to create many TournamentMatches.
     * @example
     * // Create many TournamentMatches
     * const tournamentMatch = await prisma.tournamentMatch.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TournamentMatches and only return the `id`
     * const tournamentMatchWithIdOnly = await prisma.tournamentMatch.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TournamentMatchCreateManyAndReturnArgs>(args?: SelectSubset<T, TournamentMatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TournamentMatch.
     * @param {TournamentMatchDeleteArgs} args - Arguments to delete one TournamentMatch.
     * @example
     * // Delete one TournamentMatch
     * const TournamentMatch = await prisma.tournamentMatch.delete({
     *   where: {
     *     // ... filter to delete one TournamentMatch
     *   }
     * })
     * 
     */
    delete<T extends TournamentMatchDeleteArgs>(args: SelectSubset<T, TournamentMatchDeleteArgs<ExtArgs>>): Prisma__TournamentMatchClient<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TournamentMatch.
     * @param {TournamentMatchUpdateArgs} args - Arguments to update one TournamentMatch.
     * @example
     * // Update one TournamentMatch
     * const tournamentMatch = await prisma.tournamentMatch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TournamentMatchUpdateArgs>(args: SelectSubset<T, TournamentMatchUpdateArgs<ExtArgs>>): Prisma__TournamentMatchClient<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TournamentMatches.
     * @param {TournamentMatchDeleteManyArgs} args - Arguments to filter TournamentMatches to delete.
     * @example
     * // Delete a few TournamentMatches
     * const { count } = await prisma.tournamentMatch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TournamentMatchDeleteManyArgs>(args?: SelectSubset<T, TournamentMatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TournamentMatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TournamentMatches
     * const tournamentMatch = await prisma.tournamentMatch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TournamentMatchUpdateManyArgs>(args: SelectSubset<T, TournamentMatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TournamentMatches and returns the data updated in the database.
     * @param {TournamentMatchUpdateManyAndReturnArgs} args - Arguments to update many TournamentMatches.
     * @example
     * // Update many TournamentMatches
     * const tournamentMatch = await prisma.tournamentMatch.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TournamentMatches and only return the `id`
     * const tournamentMatchWithIdOnly = await prisma.tournamentMatch.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TournamentMatchUpdateManyAndReturnArgs>(args: SelectSubset<T, TournamentMatchUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TournamentMatch.
     * @param {TournamentMatchUpsertArgs} args - Arguments to update or create a TournamentMatch.
     * @example
     * // Update or create a TournamentMatch
     * const tournamentMatch = await prisma.tournamentMatch.upsert({
     *   create: {
     *     // ... data to create a TournamentMatch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TournamentMatch we want to update
     *   }
     * })
     */
    upsert<T extends TournamentMatchUpsertArgs>(args: SelectSubset<T, TournamentMatchUpsertArgs<ExtArgs>>): Prisma__TournamentMatchClient<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TournamentMatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchCountArgs} args - Arguments to filter TournamentMatches to count.
     * @example
     * // Count the number of TournamentMatches
     * const count = await prisma.tournamentMatch.count({
     *   where: {
     *     // ... the filter for the TournamentMatches we want to count
     *   }
     * })
    **/
    count<T extends TournamentMatchCountArgs>(
      args?: Subset<T, TournamentMatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TournamentMatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TournamentMatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TournamentMatchAggregateArgs>(args: Subset<T, TournamentMatchAggregateArgs>): Prisma.PrismaPromise<GetTournamentMatchAggregateType<T>>

    /**
     * Group by TournamentMatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentMatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TournamentMatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TournamentMatchGroupByArgs['orderBy'] }
        : { orderBy?: TournamentMatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TournamentMatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TournamentMatch model
   */
  readonly fields: TournamentMatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TournamentMatch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TournamentMatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tournament<T extends TournamentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TournamentDefaultArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    round<T extends TournamentRoundDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TournamentRoundDefaultArgs<ExtArgs>>): Prisma__TournamentRoundClient<$Result.GetResult<Prisma.$TournamentRoundPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    player1<T extends TournamentMatch$player1Args<ExtArgs> = {}>(args?: Subset<T, TournamentMatch$player1Args<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    player2<T extends TournamentMatch$player2Args<ExtArgs> = {}>(args?: Subset<T, TournamentMatch$player2Args<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    winner<T extends TournamentMatch$winnerArgs<ExtArgs> = {}>(args?: Subset<T, TournamentMatch$winnerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    results<T extends TournamentMatch$resultsArgs<ExtArgs> = {}>(args?: Subset<T, TournamentMatch$resultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TournamentMatch model
   */
  interface TournamentMatchFieldRefs {
    readonly id: FieldRef<"TournamentMatch", 'String'>
    readonly tournamentId: FieldRef<"TournamentMatch", 'String'>
    readonly roundId: FieldRef<"TournamentMatch", 'String'>
    readonly player1Id: FieldRef<"TournamentMatch", 'String'>
    readonly player2Id: FieldRef<"TournamentMatch", 'String'>
    readonly winnerId: FieldRef<"TournamentMatch", 'String'>
    readonly status: FieldRef<"TournamentMatch", 'String'>
    readonly gameSessionId: FieldRef<"TournamentMatch", 'String'>
    readonly bracketPosition: FieldRef<"TournamentMatch", 'Int'>
    readonly player1Score: FieldRef<"TournamentMatch", 'Int'>
    readonly player2Score: FieldRef<"TournamentMatch", 'Int'>
    readonly matchData: FieldRef<"TournamentMatch", 'Json'>
    readonly startTime: FieldRef<"TournamentMatch", 'DateTime'>
    readonly endTime: FieldRef<"TournamentMatch", 'DateTime'>
    readonly createdAt: FieldRef<"TournamentMatch", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TournamentMatch findUnique
   */
  export type TournamentMatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentMatch
     */
    omit?: TournamentMatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    /**
     * Filter, which TournamentMatch to fetch.
     */
    where: TournamentMatchWhereUniqueInput
  }

  /**
   * TournamentMatch findUniqueOrThrow
   */
  export type TournamentMatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentMatch
     */
    omit?: TournamentMatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    /**
     * Filter, which TournamentMatch to fetch.
     */
    where: TournamentMatchWhereUniqueInput
  }

  /**
   * TournamentMatch findFirst
   */
  export type TournamentMatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentMatch
     */
    omit?: TournamentMatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    /**
     * Filter, which TournamentMatch to fetch.
     */
    where?: TournamentMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentMatches to fetch.
     */
    orderBy?: TournamentMatchOrderByWithRelationInput | TournamentMatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TournamentMatches.
     */
    cursor?: TournamentMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentMatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentMatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TournamentMatches.
     */
    distinct?: TournamentMatchScalarFieldEnum | TournamentMatchScalarFieldEnum[]
  }

  /**
   * TournamentMatch findFirstOrThrow
   */
  export type TournamentMatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentMatch
     */
    omit?: TournamentMatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    /**
     * Filter, which TournamentMatch to fetch.
     */
    where?: TournamentMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentMatches to fetch.
     */
    orderBy?: TournamentMatchOrderByWithRelationInput | TournamentMatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TournamentMatches.
     */
    cursor?: TournamentMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentMatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentMatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TournamentMatches.
     */
    distinct?: TournamentMatchScalarFieldEnum | TournamentMatchScalarFieldEnum[]
  }

  /**
   * TournamentMatch findMany
   */
  export type TournamentMatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentMatch
     */
    omit?: TournamentMatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    /**
     * Filter, which TournamentMatches to fetch.
     */
    where?: TournamentMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentMatches to fetch.
     */
    orderBy?: TournamentMatchOrderByWithRelationInput | TournamentMatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TournamentMatches.
     */
    cursor?: TournamentMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentMatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentMatches.
     */
    skip?: number
    distinct?: TournamentMatchScalarFieldEnum | TournamentMatchScalarFieldEnum[]
  }

  /**
   * TournamentMatch create
   */
  export type TournamentMatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentMatch
     */
    omit?: TournamentMatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    /**
     * The data needed to create a TournamentMatch.
     */
    data: XOR<TournamentMatchCreateInput, TournamentMatchUncheckedCreateInput>
  }

  /**
   * TournamentMatch createMany
   */
  export type TournamentMatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TournamentMatches.
     */
    data: TournamentMatchCreateManyInput | TournamentMatchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TournamentMatch createManyAndReturn
   */
  export type TournamentMatchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentMatch
     */
    omit?: TournamentMatchOmit<ExtArgs> | null
    /**
     * The data used to create many TournamentMatches.
     */
    data: TournamentMatchCreateManyInput | TournamentMatchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TournamentMatch update
   */
  export type TournamentMatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentMatch
     */
    omit?: TournamentMatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    /**
     * The data needed to update a TournamentMatch.
     */
    data: XOR<TournamentMatchUpdateInput, TournamentMatchUncheckedUpdateInput>
    /**
     * Choose, which TournamentMatch to update.
     */
    where: TournamentMatchWhereUniqueInput
  }

  /**
   * TournamentMatch updateMany
   */
  export type TournamentMatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TournamentMatches.
     */
    data: XOR<TournamentMatchUpdateManyMutationInput, TournamentMatchUncheckedUpdateManyInput>
    /**
     * Filter which TournamentMatches to update
     */
    where?: TournamentMatchWhereInput
    /**
     * Limit how many TournamentMatches to update.
     */
    limit?: number
  }

  /**
   * TournamentMatch updateManyAndReturn
   */
  export type TournamentMatchUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentMatch
     */
    omit?: TournamentMatchOmit<ExtArgs> | null
    /**
     * The data used to update TournamentMatches.
     */
    data: XOR<TournamentMatchUpdateManyMutationInput, TournamentMatchUncheckedUpdateManyInput>
    /**
     * Filter which TournamentMatches to update
     */
    where?: TournamentMatchWhereInput
    /**
     * Limit how many TournamentMatches to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TournamentMatch upsert
   */
  export type TournamentMatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentMatch
     */
    omit?: TournamentMatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    /**
     * The filter to search for the TournamentMatch to update in case it exists.
     */
    where: TournamentMatchWhereUniqueInput
    /**
     * In case the TournamentMatch found by the `where` argument doesn't exist, create a new TournamentMatch with this data.
     */
    create: XOR<TournamentMatchCreateInput, TournamentMatchUncheckedCreateInput>
    /**
     * In case the TournamentMatch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TournamentMatchUpdateInput, TournamentMatchUncheckedUpdateInput>
  }

  /**
   * TournamentMatch delete
   */
  export type TournamentMatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentMatch
     */
    omit?: TournamentMatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
    /**
     * Filter which TournamentMatch to delete.
     */
    where: TournamentMatchWhereUniqueInput
  }

  /**
   * TournamentMatch deleteMany
   */
  export type TournamentMatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TournamentMatches to delete
     */
    where?: TournamentMatchWhereInput
    /**
     * Limit how many TournamentMatches to delete.
     */
    limit?: number
  }

  /**
   * TournamentMatch.player1
   */
  export type TournamentMatch$player1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * TournamentMatch.player2
   */
  export type TournamentMatch$player2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * TournamentMatch.winner
   */
  export type TournamentMatch$winnerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * TournamentMatch.results
   */
  export type TournamentMatch$resultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchResult
     */
    select?: MatchResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchResult
     */
    omit?: MatchResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchResultInclude<ExtArgs> | null
    where?: MatchResultWhereInput
    orderBy?: MatchResultOrderByWithRelationInput | MatchResultOrderByWithRelationInput[]
    cursor?: MatchResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchResultScalarFieldEnum | MatchResultScalarFieldEnum[]
  }

  /**
   * TournamentMatch without action
   */
  export type TournamentMatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentMatch
     */
    select?: TournamentMatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentMatch
     */
    omit?: TournamentMatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentMatchInclude<ExtArgs> | null
  }


  /**
   * Model MatchResult
   */

  export type AggregateMatchResult = {
    _count: MatchResultCountAggregateOutputType | null
    _avg: MatchResultAvgAggregateOutputType | null
    _sum: MatchResultSumAggregateOutputType | null
    _min: MatchResultMinAggregateOutputType | null
    _max: MatchResultMaxAggregateOutputType | null
  }

  export type MatchResultAvgAggregateOutputType = {
    winnerScore: number | null
    loserScore: number | null
    gameLength: number | null
  }

  export type MatchResultSumAggregateOutputType = {
    winnerScore: number | null
    loserScore: number | null
    gameLength: number | null
  }

  export type MatchResultMinAggregateOutputType = {
    id: string | null
    matchId: string | null
    winnerId: string | null
    loserId: string | null
    winnerScore: number | null
    loserScore: number | null
    gameLength: number | null
    resultType: string | null
    notes: string | null
    reportedById: string | null
    verifiedById: string | null
    isVerified: boolean | null
    createdAt: Date | null
  }

  export type MatchResultMaxAggregateOutputType = {
    id: string | null
    matchId: string | null
    winnerId: string | null
    loserId: string | null
    winnerScore: number | null
    loserScore: number | null
    gameLength: number | null
    resultType: string | null
    notes: string | null
    reportedById: string | null
    verifiedById: string | null
    isVerified: boolean | null
    createdAt: Date | null
  }

  export type MatchResultCountAggregateOutputType = {
    id: number
    matchId: number
    winnerId: number
    loserId: number
    winnerScore: number
    loserScore: number
    gameLength: number
    resultType: number
    notes: number
    reportedById: number
    verifiedById: number
    isVerified: number
    createdAt: number
    _all: number
  }


  export type MatchResultAvgAggregateInputType = {
    winnerScore?: true
    loserScore?: true
    gameLength?: true
  }

  export type MatchResultSumAggregateInputType = {
    winnerScore?: true
    loserScore?: true
    gameLength?: true
  }

  export type MatchResultMinAggregateInputType = {
    id?: true
    matchId?: true
    winnerId?: true
    loserId?: true
    winnerScore?: true
    loserScore?: true
    gameLength?: true
    resultType?: true
    notes?: true
    reportedById?: true
    verifiedById?: true
    isVerified?: true
    createdAt?: true
  }

  export type MatchResultMaxAggregateInputType = {
    id?: true
    matchId?: true
    winnerId?: true
    loserId?: true
    winnerScore?: true
    loserScore?: true
    gameLength?: true
    resultType?: true
    notes?: true
    reportedById?: true
    verifiedById?: true
    isVerified?: true
    createdAt?: true
  }

  export type MatchResultCountAggregateInputType = {
    id?: true
    matchId?: true
    winnerId?: true
    loserId?: true
    winnerScore?: true
    loserScore?: true
    gameLength?: true
    resultType?: true
    notes?: true
    reportedById?: true
    verifiedById?: true
    isVerified?: true
    createdAt?: true
    _all?: true
  }

  export type MatchResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchResult to aggregate.
     */
    where?: MatchResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchResults to fetch.
     */
    orderBy?: MatchResultOrderByWithRelationInput | MatchResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MatchResults
    **/
    _count?: true | MatchResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchResultMaxAggregateInputType
  }

  export type GetMatchResultAggregateType<T extends MatchResultAggregateArgs> = {
        [P in keyof T & keyof AggregateMatchResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatchResult[P]>
      : GetScalarType<T[P], AggregateMatchResult[P]>
  }




  export type MatchResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchResultWhereInput
    orderBy?: MatchResultOrderByWithAggregationInput | MatchResultOrderByWithAggregationInput[]
    by: MatchResultScalarFieldEnum[] | MatchResultScalarFieldEnum
    having?: MatchResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchResultCountAggregateInputType | true
    _avg?: MatchResultAvgAggregateInputType
    _sum?: MatchResultSumAggregateInputType
    _min?: MatchResultMinAggregateInputType
    _max?: MatchResultMaxAggregateInputType
  }

  export type MatchResultGroupByOutputType = {
    id: string
    matchId: string
    winnerId: string
    loserId: string | null
    winnerScore: number
    loserScore: number
    gameLength: number | null
    resultType: string
    notes: string | null
    reportedById: string
    verifiedById: string | null
    isVerified: boolean
    createdAt: Date
    _count: MatchResultCountAggregateOutputType | null
    _avg: MatchResultAvgAggregateOutputType | null
    _sum: MatchResultSumAggregateOutputType | null
    _min: MatchResultMinAggregateOutputType | null
    _max: MatchResultMaxAggregateOutputType | null
  }

  type GetMatchResultGroupByPayload<T extends MatchResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchResultGroupByOutputType[P]>
            : GetScalarType<T[P], MatchResultGroupByOutputType[P]>
        }
      >
    >


  export type MatchResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchId?: boolean
    winnerId?: boolean
    loserId?: boolean
    winnerScore?: boolean
    loserScore?: boolean
    gameLength?: boolean
    resultType?: boolean
    notes?: boolean
    reportedById?: boolean
    verifiedById?: boolean
    isVerified?: boolean
    createdAt?: boolean
    match?: boolean | TournamentMatchDefaultArgs<ExtArgs>
    winner?: boolean | UserDefaultArgs<ExtArgs>
    loser?: boolean | MatchResult$loserArgs<ExtArgs>
    reportedBy?: boolean | UserDefaultArgs<ExtArgs>
    verifiedBy?: boolean | MatchResult$verifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["matchResult"]>

  export type MatchResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchId?: boolean
    winnerId?: boolean
    loserId?: boolean
    winnerScore?: boolean
    loserScore?: boolean
    gameLength?: boolean
    resultType?: boolean
    notes?: boolean
    reportedById?: boolean
    verifiedById?: boolean
    isVerified?: boolean
    createdAt?: boolean
    match?: boolean | TournamentMatchDefaultArgs<ExtArgs>
    winner?: boolean | UserDefaultArgs<ExtArgs>
    loser?: boolean | MatchResult$loserArgs<ExtArgs>
    reportedBy?: boolean | UserDefaultArgs<ExtArgs>
    verifiedBy?: boolean | MatchResult$verifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["matchResult"]>

  export type MatchResultSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchId?: boolean
    winnerId?: boolean
    loserId?: boolean
    winnerScore?: boolean
    loserScore?: boolean
    gameLength?: boolean
    resultType?: boolean
    notes?: boolean
    reportedById?: boolean
    verifiedById?: boolean
    isVerified?: boolean
    createdAt?: boolean
    match?: boolean | TournamentMatchDefaultArgs<ExtArgs>
    winner?: boolean | UserDefaultArgs<ExtArgs>
    loser?: boolean | MatchResult$loserArgs<ExtArgs>
    reportedBy?: boolean | UserDefaultArgs<ExtArgs>
    verifiedBy?: boolean | MatchResult$verifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["matchResult"]>

  export type MatchResultSelectScalar = {
    id?: boolean
    matchId?: boolean
    winnerId?: boolean
    loserId?: boolean
    winnerScore?: boolean
    loserScore?: boolean
    gameLength?: boolean
    resultType?: boolean
    notes?: boolean
    reportedById?: boolean
    verifiedById?: boolean
    isVerified?: boolean
    createdAt?: boolean
  }

  export type MatchResultOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "matchId" | "winnerId" | "loserId" | "winnerScore" | "loserScore" | "gameLength" | "resultType" | "notes" | "reportedById" | "verifiedById" | "isVerified" | "createdAt", ExtArgs["result"]["matchResult"]>
  export type MatchResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | TournamentMatchDefaultArgs<ExtArgs>
    winner?: boolean | UserDefaultArgs<ExtArgs>
    loser?: boolean | MatchResult$loserArgs<ExtArgs>
    reportedBy?: boolean | UserDefaultArgs<ExtArgs>
    verifiedBy?: boolean | MatchResult$verifiedByArgs<ExtArgs>
  }
  export type MatchResultIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | TournamentMatchDefaultArgs<ExtArgs>
    winner?: boolean | UserDefaultArgs<ExtArgs>
    loser?: boolean | MatchResult$loserArgs<ExtArgs>
    reportedBy?: boolean | UserDefaultArgs<ExtArgs>
    verifiedBy?: boolean | MatchResult$verifiedByArgs<ExtArgs>
  }
  export type MatchResultIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | TournamentMatchDefaultArgs<ExtArgs>
    winner?: boolean | UserDefaultArgs<ExtArgs>
    loser?: boolean | MatchResult$loserArgs<ExtArgs>
    reportedBy?: boolean | UserDefaultArgs<ExtArgs>
    verifiedBy?: boolean | MatchResult$verifiedByArgs<ExtArgs>
  }

  export type $MatchResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MatchResult"
    objects: {
      match: Prisma.$TournamentMatchPayload<ExtArgs>
      winner: Prisma.$UserPayload<ExtArgs>
      loser: Prisma.$UserPayload<ExtArgs> | null
      reportedBy: Prisma.$UserPayload<ExtArgs>
      verifiedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      matchId: string
      winnerId: string
      loserId: string | null
      winnerScore: number
      loserScore: number
      gameLength: number | null
      resultType: string
      notes: string | null
      reportedById: string
      verifiedById: string | null
      isVerified: boolean
      createdAt: Date
    }, ExtArgs["result"]["matchResult"]>
    composites: {}
  }

  type MatchResultGetPayload<S extends boolean | null | undefined | MatchResultDefaultArgs> = $Result.GetResult<Prisma.$MatchResultPayload, S>

  type MatchResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MatchResultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MatchResultCountAggregateInputType | true
    }

  export interface MatchResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MatchResult'], meta: { name: 'MatchResult' } }
    /**
     * Find zero or one MatchResult that matches the filter.
     * @param {MatchResultFindUniqueArgs} args - Arguments to find a MatchResult
     * @example
     * // Get one MatchResult
     * const matchResult = await prisma.matchResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchResultFindUniqueArgs>(args: SelectSubset<T, MatchResultFindUniqueArgs<ExtArgs>>): Prisma__MatchResultClient<$Result.GetResult<Prisma.$MatchResultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MatchResult that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MatchResultFindUniqueOrThrowArgs} args - Arguments to find a MatchResult
     * @example
     * // Get one MatchResult
     * const matchResult = await prisma.matchResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchResultFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchResultClient<$Result.GetResult<Prisma.$MatchResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MatchResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchResultFindFirstArgs} args - Arguments to find a MatchResult
     * @example
     * // Get one MatchResult
     * const matchResult = await prisma.matchResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchResultFindFirstArgs>(args?: SelectSubset<T, MatchResultFindFirstArgs<ExtArgs>>): Prisma__MatchResultClient<$Result.GetResult<Prisma.$MatchResultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MatchResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchResultFindFirstOrThrowArgs} args - Arguments to find a MatchResult
     * @example
     * // Get one MatchResult
     * const matchResult = await prisma.matchResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchResultFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchResultClient<$Result.GetResult<Prisma.$MatchResultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MatchResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MatchResults
     * const matchResults = await prisma.matchResult.findMany()
     * 
     * // Get first 10 MatchResults
     * const matchResults = await prisma.matchResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchResultWithIdOnly = await prisma.matchResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchResultFindManyArgs>(args?: SelectSubset<T, MatchResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MatchResult.
     * @param {MatchResultCreateArgs} args - Arguments to create a MatchResult.
     * @example
     * // Create one MatchResult
     * const MatchResult = await prisma.matchResult.create({
     *   data: {
     *     // ... data to create a MatchResult
     *   }
     * })
     * 
     */
    create<T extends MatchResultCreateArgs>(args: SelectSubset<T, MatchResultCreateArgs<ExtArgs>>): Prisma__MatchResultClient<$Result.GetResult<Prisma.$MatchResultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MatchResults.
     * @param {MatchResultCreateManyArgs} args - Arguments to create many MatchResults.
     * @example
     * // Create many MatchResults
     * const matchResult = await prisma.matchResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchResultCreateManyArgs>(args?: SelectSubset<T, MatchResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MatchResults and returns the data saved in the database.
     * @param {MatchResultCreateManyAndReturnArgs} args - Arguments to create many MatchResults.
     * @example
     * // Create many MatchResults
     * const matchResult = await prisma.matchResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MatchResults and only return the `id`
     * const matchResultWithIdOnly = await prisma.matchResult.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchResultCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchResultPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MatchResult.
     * @param {MatchResultDeleteArgs} args - Arguments to delete one MatchResult.
     * @example
     * // Delete one MatchResult
     * const MatchResult = await prisma.matchResult.delete({
     *   where: {
     *     // ... filter to delete one MatchResult
     *   }
     * })
     * 
     */
    delete<T extends MatchResultDeleteArgs>(args: SelectSubset<T, MatchResultDeleteArgs<ExtArgs>>): Prisma__MatchResultClient<$Result.GetResult<Prisma.$MatchResultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MatchResult.
     * @param {MatchResultUpdateArgs} args - Arguments to update one MatchResult.
     * @example
     * // Update one MatchResult
     * const matchResult = await prisma.matchResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchResultUpdateArgs>(args: SelectSubset<T, MatchResultUpdateArgs<ExtArgs>>): Prisma__MatchResultClient<$Result.GetResult<Prisma.$MatchResultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MatchResults.
     * @param {MatchResultDeleteManyArgs} args - Arguments to filter MatchResults to delete.
     * @example
     * // Delete a few MatchResults
     * const { count } = await prisma.matchResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchResultDeleteManyArgs>(args?: SelectSubset<T, MatchResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MatchResults
     * const matchResult = await prisma.matchResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchResultUpdateManyArgs>(args: SelectSubset<T, MatchResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchResults and returns the data updated in the database.
     * @param {MatchResultUpdateManyAndReturnArgs} args - Arguments to update many MatchResults.
     * @example
     * // Update many MatchResults
     * const matchResult = await prisma.matchResult.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MatchResults and only return the `id`
     * const matchResultWithIdOnly = await prisma.matchResult.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MatchResultUpdateManyAndReturnArgs>(args: SelectSubset<T, MatchResultUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchResultPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MatchResult.
     * @param {MatchResultUpsertArgs} args - Arguments to update or create a MatchResult.
     * @example
     * // Update or create a MatchResult
     * const matchResult = await prisma.matchResult.upsert({
     *   create: {
     *     // ... data to create a MatchResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MatchResult we want to update
     *   }
     * })
     */
    upsert<T extends MatchResultUpsertArgs>(args: SelectSubset<T, MatchResultUpsertArgs<ExtArgs>>): Prisma__MatchResultClient<$Result.GetResult<Prisma.$MatchResultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MatchResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchResultCountArgs} args - Arguments to filter MatchResults to count.
     * @example
     * // Count the number of MatchResults
     * const count = await prisma.matchResult.count({
     *   where: {
     *     // ... the filter for the MatchResults we want to count
     *   }
     * })
    **/
    count<T extends MatchResultCountArgs>(
      args?: Subset<T, MatchResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MatchResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchResultAggregateArgs>(args: Subset<T, MatchResultAggregateArgs>): Prisma.PrismaPromise<GetMatchResultAggregateType<T>>

    /**
     * Group by MatchResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchResultGroupByArgs['orderBy'] }
        : { orderBy?: MatchResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MatchResult model
   */
  readonly fields: MatchResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MatchResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    match<T extends TournamentMatchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TournamentMatchDefaultArgs<ExtArgs>>): Prisma__TournamentMatchClient<$Result.GetResult<Prisma.$TournamentMatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    winner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    loser<T extends MatchResult$loserArgs<ExtArgs> = {}>(args?: Subset<T, MatchResult$loserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    reportedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    verifiedBy<T extends MatchResult$verifiedByArgs<ExtArgs> = {}>(args?: Subset<T, MatchResult$verifiedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MatchResult model
   */
  interface MatchResultFieldRefs {
    readonly id: FieldRef<"MatchResult", 'String'>
    readonly matchId: FieldRef<"MatchResult", 'String'>
    readonly winnerId: FieldRef<"MatchResult", 'String'>
    readonly loserId: FieldRef<"MatchResult", 'String'>
    readonly winnerScore: FieldRef<"MatchResult", 'Int'>
    readonly loserScore: FieldRef<"MatchResult", 'Int'>
    readonly gameLength: FieldRef<"MatchResult", 'Int'>
    readonly resultType: FieldRef<"MatchResult", 'String'>
    readonly notes: FieldRef<"MatchResult", 'String'>
    readonly reportedById: FieldRef<"MatchResult", 'String'>
    readonly verifiedById: FieldRef<"MatchResult", 'String'>
    readonly isVerified: FieldRef<"MatchResult", 'Boolean'>
    readonly createdAt: FieldRef<"MatchResult", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MatchResult findUnique
   */
  export type MatchResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchResult
     */
    select?: MatchResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchResult
     */
    omit?: MatchResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchResultInclude<ExtArgs> | null
    /**
     * Filter, which MatchResult to fetch.
     */
    where: MatchResultWhereUniqueInput
  }

  /**
   * MatchResult findUniqueOrThrow
   */
  export type MatchResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchResult
     */
    select?: MatchResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchResult
     */
    omit?: MatchResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchResultInclude<ExtArgs> | null
    /**
     * Filter, which MatchResult to fetch.
     */
    where: MatchResultWhereUniqueInput
  }

  /**
   * MatchResult findFirst
   */
  export type MatchResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchResult
     */
    select?: MatchResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchResult
     */
    omit?: MatchResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchResultInclude<ExtArgs> | null
    /**
     * Filter, which MatchResult to fetch.
     */
    where?: MatchResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchResults to fetch.
     */
    orderBy?: MatchResultOrderByWithRelationInput | MatchResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchResults.
     */
    cursor?: MatchResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchResults.
     */
    distinct?: MatchResultScalarFieldEnum | MatchResultScalarFieldEnum[]
  }

  /**
   * MatchResult findFirstOrThrow
   */
  export type MatchResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchResult
     */
    select?: MatchResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchResult
     */
    omit?: MatchResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchResultInclude<ExtArgs> | null
    /**
     * Filter, which MatchResult to fetch.
     */
    where?: MatchResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchResults to fetch.
     */
    orderBy?: MatchResultOrderByWithRelationInput | MatchResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchResults.
     */
    cursor?: MatchResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchResults.
     */
    distinct?: MatchResultScalarFieldEnum | MatchResultScalarFieldEnum[]
  }

  /**
   * MatchResult findMany
   */
  export type MatchResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchResult
     */
    select?: MatchResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchResult
     */
    omit?: MatchResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchResultInclude<ExtArgs> | null
    /**
     * Filter, which MatchResults to fetch.
     */
    where?: MatchResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchResults to fetch.
     */
    orderBy?: MatchResultOrderByWithRelationInput | MatchResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MatchResults.
     */
    cursor?: MatchResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchResults.
     */
    skip?: number
    distinct?: MatchResultScalarFieldEnum | MatchResultScalarFieldEnum[]
  }

  /**
   * MatchResult create
   */
  export type MatchResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchResult
     */
    select?: MatchResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchResult
     */
    omit?: MatchResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchResultInclude<ExtArgs> | null
    /**
     * The data needed to create a MatchResult.
     */
    data: XOR<MatchResultCreateInput, MatchResultUncheckedCreateInput>
  }

  /**
   * MatchResult createMany
   */
  export type MatchResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MatchResults.
     */
    data: MatchResultCreateManyInput | MatchResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MatchResult createManyAndReturn
   */
  export type MatchResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchResult
     */
    select?: MatchResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MatchResult
     */
    omit?: MatchResultOmit<ExtArgs> | null
    /**
     * The data used to create many MatchResults.
     */
    data: MatchResultCreateManyInput | MatchResultCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchResultIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MatchResult update
   */
  export type MatchResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchResult
     */
    select?: MatchResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchResult
     */
    omit?: MatchResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchResultInclude<ExtArgs> | null
    /**
     * The data needed to update a MatchResult.
     */
    data: XOR<MatchResultUpdateInput, MatchResultUncheckedUpdateInput>
    /**
     * Choose, which MatchResult to update.
     */
    where: MatchResultWhereUniqueInput
  }

  /**
   * MatchResult updateMany
   */
  export type MatchResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MatchResults.
     */
    data: XOR<MatchResultUpdateManyMutationInput, MatchResultUncheckedUpdateManyInput>
    /**
     * Filter which MatchResults to update
     */
    where?: MatchResultWhereInput
    /**
     * Limit how many MatchResults to update.
     */
    limit?: number
  }

  /**
   * MatchResult updateManyAndReturn
   */
  export type MatchResultUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchResult
     */
    select?: MatchResultSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MatchResult
     */
    omit?: MatchResultOmit<ExtArgs> | null
    /**
     * The data used to update MatchResults.
     */
    data: XOR<MatchResultUpdateManyMutationInput, MatchResultUncheckedUpdateManyInput>
    /**
     * Filter which MatchResults to update
     */
    where?: MatchResultWhereInput
    /**
     * Limit how many MatchResults to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchResultIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MatchResult upsert
   */
  export type MatchResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchResult
     */
    select?: MatchResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchResult
     */
    omit?: MatchResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchResultInclude<ExtArgs> | null
    /**
     * The filter to search for the MatchResult to update in case it exists.
     */
    where: MatchResultWhereUniqueInput
    /**
     * In case the MatchResult found by the `where` argument doesn't exist, create a new MatchResult with this data.
     */
    create: XOR<MatchResultCreateInput, MatchResultUncheckedCreateInput>
    /**
     * In case the MatchResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchResultUpdateInput, MatchResultUncheckedUpdateInput>
  }

  /**
   * MatchResult delete
   */
  export type MatchResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchResult
     */
    select?: MatchResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchResult
     */
    omit?: MatchResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchResultInclude<ExtArgs> | null
    /**
     * Filter which MatchResult to delete.
     */
    where: MatchResultWhereUniqueInput
  }

  /**
   * MatchResult deleteMany
   */
  export type MatchResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchResults to delete
     */
    where?: MatchResultWhereInput
    /**
     * Limit how many MatchResults to delete.
     */
    limit?: number
  }

  /**
   * MatchResult.loser
   */
  export type MatchResult$loserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * MatchResult.verifiedBy
   */
  export type MatchResult$verifiedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * MatchResult without action
   */
  export type MatchResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchResult
     */
    select?: MatchResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchResult
     */
    omit?: MatchResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchResultInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    message: string | null
    type: string | null
    isRead: boolean | null
    actionUrl: string | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    message: string | null
    type: string | null
    isRead: boolean | null
    actionUrl: string | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    message: number
    type: number
    isRead: number
    actionUrl: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    actionUrl?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    actionUrl?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    actionUrl?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    title: string
    message: string
    type: string
    isRead: boolean
    actionUrl: string | null
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    actionUrl?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    actionUrl?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    actionUrl?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    actionUrl?: boolean
    createdAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "title" | "message" | "type" | "isRead" | "actionUrl" | "createdAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      title: string
      message: string
      type: string
      isRead: boolean
      actionUrl: string | null
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly actionUrl: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    senderId: string | null
    receiverId: string | null
    subject: string | null
    content: string | null
    isRead: boolean | null
    createdAt: Date | null
    editedAt: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    senderId: string | null
    receiverId: string | null
    subject: string | null
    content: string | null
    isRead: boolean | null
    createdAt: Date | null
    editedAt: Date | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    senderId: number
    receiverId: number
    subject: number
    content: number
    isRead: number
    createdAt: number
    editedAt: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    subject?: true
    content?: true
    isRead?: true
    createdAt?: true
    editedAt?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    subject?: true
    content?: true
    isRead?: true
    createdAt?: true
    editedAt?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    subject?: true
    content?: true
    isRead?: true
    createdAt?: true
    editedAt?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    senderId: string
    receiverId: string
    subject: string | null
    content: string
    isRead: boolean
    createdAt: Date
    editedAt: Date | null
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    subject?: boolean
    content?: boolean
    isRead?: boolean
    createdAt?: boolean
    editedAt?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    subject?: boolean
    content?: boolean
    isRead?: boolean
    createdAt?: boolean
    editedAt?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    subject?: boolean
    content?: boolean
    isRead?: boolean
    createdAt?: boolean
    editedAt?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    subject?: boolean
    content?: boolean
    isRead?: boolean
    createdAt?: boolean
    editedAt?: boolean
  }

  export type MessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "senderId" | "receiverId" | "subject" | "content" | "isRead" | "createdAt" | "editedAt", ExtArgs["result"]["message"]>
  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      sender: Prisma.$UserPayload<ExtArgs>
      receiver: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      senderId: string
      receiverId: string
      subject: string | null
      content: string
      isRead: boolean
      createdAt: Date
      editedAt: Date | null
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages and returns the data updated in the database.
     * @param {MessageUpdateManyAndReturnArgs} args - Arguments to update many Messages.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    receiver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly senderId: FieldRef<"Message", 'String'>
    readonly receiverId: FieldRef<"Message", 'String'>
    readonly subject: FieldRef<"Message", 'String'>
    readonly content: FieldRef<"Message", 'String'>
    readonly isRead: FieldRef<"Message", 'Boolean'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
    readonly editedAt: FieldRef<"Message", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
  }

  /**
   * Message updateManyAndReturn
   */
  export type MessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to delete.
     */
    limit?: number
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model GameSession
   */

  export type AggregateGameSession = {
    _count: GameSessionCountAggregateOutputType | null
    _avg: GameSessionAvgAggregateOutputType | null
    _sum: GameSessionSumAggregateOutputType | null
    _min: GameSessionMinAggregateOutputType | null
    _max: GameSessionMaxAggregateOutputType | null
  }

  export type GameSessionAvgAggregateOutputType = {
    maxPlayers: number | null
    currentPlayers: number | null
  }

  export type GameSessionSumAggregateOutputType = {
    maxPlayers: number | null
    currentPlayers: number | null
  }

  export type GameSessionMinAggregateOutputType = {
    id: string | null
    name: string | null
    gameType: string | null
    hostId: string | null
    coHostId: string | null
    maxPlayers: number | null
    currentPlayers: number | null
    status: string | null
    isPrivate: boolean | null
    gameRoomUrl: string | null
    createdAt: Date | null
    startedAt: Date | null
    endedAt: Date | null
  }

  export type GameSessionMaxAggregateOutputType = {
    id: string | null
    name: string | null
    gameType: string | null
    hostId: string | null
    coHostId: string | null
    maxPlayers: number | null
    currentPlayers: number | null
    status: string | null
    isPrivate: boolean | null
    gameRoomUrl: string | null
    createdAt: Date | null
    startedAt: Date | null
    endedAt: Date | null
  }

  export type GameSessionCountAggregateOutputType = {
    id: number
    name: number
    gameType: number
    hostId: number
    coHostId: number
    maxPlayers: number
    currentPlayers: number
    status: number
    isPrivate: number
    gameRoomUrl: number
    settings: number
    createdAt: number
    startedAt: number
    endedAt: number
    _all: number
  }


  export type GameSessionAvgAggregateInputType = {
    maxPlayers?: true
    currentPlayers?: true
  }

  export type GameSessionSumAggregateInputType = {
    maxPlayers?: true
    currentPlayers?: true
  }

  export type GameSessionMinAggregateInputType = {
    id?: true
    name?: true
    gameType?: true
    hostId?: true
    coHostId?: true
    maxPlayers?: true
    currentPlayers?: true
    status?: true
    isPrivate?: true
    gameRoomUrl?: true
    createdAt?: true
    startedAt?: true
    endedAt?: true
  }

  export type GameSessionMaxAggregateInputType = {
    id?: true
    name?: true
    gameType?: true
    hostId?: true
    coHostId?: true
    maxPlayers?: true
    currentPlayers?: true
    status?: true
    isPrivate?: true
    gameRoomUrl?: true
    createdAt?: true
    startedAt?: true
    endedAt?: true
  }

  export type GameSessionCountAggregateInputType = {
    id?: true
    name?: true
    gameType?: true
    hostId?: true
    coHostId?: true
    maxPlayers?: true
    currentPlayers?: true
    status?: true
    isPrivate?: true
    gameRoomUrl?: true
    settings?: true
    createdAt?: true
    startedAt?: true
    endedAt?: true
    _all?: true
  }

  export type GameSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameSession to aggregate.
     */
    where?: GameSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSessions to fetch.
     */
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameSessions
    **/
    _count?: true | GameSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameSessionMaxAggregateInputType
  }

  export type GetGameSessionAggregateType<T extends GameSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateGameSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameSession[P]>
      : GetScalarType<T[P], AggregateGameSession[P]>
  }




  export type GameSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameSessionWhereInput
    orderBy?: GameSessionOrderByWithAggregationInput | GameSessionOrderByWithAggregationInput[]
    by: GameSessionScalarFieldEnum[] | GameSessionScalarFieldEnum
    having?: GameSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameSessionCountAggregateInputType | true
    _avg?: GameSessionAvgAggregateInputType
    _sum?: GameSessionSumAggregateInputType
    _min?: GameSessionMinAggregateInputType
    _max?: GameSessionMaxAggregateInputType
  }

  export type GameSessionGroupByOutputType = {
    id: string
    name: string
    gameType: string
    hostId: string
    coHostId: string | null
    maxPlayers: number
    currentPlayers: number
    status: string
    isPrivate: boolean
    gameRoomUrl: string | null
    settings: JsonValue | null
    createdAt: Date
    startedAt: Date | null
    endedAt: Date | null
    _count: GameSessionCountAggregateOutputType | null
    _avg: GameSessionAvgAggregateOutputType | null
    _sum: GameSessionSumAggregateOutputType | null
    _min: GameSessionMinAggregateOutputType | null
    _max: GameSessionMaxAggregateOutputType | null
  }

  type GetGameSessionGroupByPayload<T extends GameSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameSessionGroupByOutputType[P]>
            : GetScalarType<T[P], GameSessionGroupByOutputType[P]>
        }
      >
    >


  export type GameSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    gameType?: boolean
    hostId?: boolean
    coHostId?: boolean
    maxPlayers?: boolean
    currentPlayers?: boolean
    status?: boolean
    isPrivate?: boolean
    gameRoomUrl?: boolean
    settings?: boolean
    createdAt?: boolean
    startedAt?: boolean
    endedAt?: boolean
    host?: boolean | UserDefaultArgs<ExtArgs>
    coHost?: boolean | GameSession$coHostArgs<ExtArgs>
  }, ExtArgs["result"]["gameSession"]>

  export type GameSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    gameType?: boolean
    hostId?: boolean
    coHostId?: boolean
    maxPlayers?: boolean
    currentPlayers?: boolean
    status?: boolean
    isPrivate?: boolean
    gameRoomUrl?: boolean
    settings?: boolean
    createdAt?: boolean
    startedAt?: boolean
    endedAt?: boolean
    host?: boolean | UserDefaultArgs<ExtArgs>
    coHost?: boolean | GameSession$coHostArgs<ExtArgs>
  }, ExtArgs["result"]["gameSession"]>

  export type GameSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    gameType?: boolean
    hostId?: boolean
    coHostId?: boolean
    maxPlayers?: boolean
    currentPlayers?: boolean
    status?: boolean
    isPrivate?: boolean
    gameRoomUrl?: boolean
    settings?: boolean
    createdAt?: boolean
    startedAt?: boolean
    endedAt?: boolean
    host?: boolean | UserDefaultArgs<ExtArgs>
    coHost?: boolean | GameSession$coHostArgs<ExtArgs>
  }, ExtArgs["result"]["gameSession"]>

  export type GameSessionSelectScalar = {
    id?: boolean
    name?: boolean
    gameType?: boolean
    hostId?: boolean
    coHostId?: boolean
    maxPlayers?: boolean
    currentPlayers?: boolean
    status?: boolean
    isPrivate?: boolean
    gameRoomUrl?: boolean
    settings?: boolean
    createdAt?: boolean
    startedAt?: boolean
    endedAt?: boolean
  }

  export type GameSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "gameType" | "hostId" | "coHostId" | "maxPlayers" | "currentPlayers" | "status" | "isPrivate" | "gameRoomUrl" | "settings" | "createdAt" | "startedAt" | "endedAt", ExtArgs["result"]["gameSession"]>
  export type GameSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    host?: boolean | UserDefaultArgs<ExtArgs>
    coHost?: boolean | GameSession$coHostArgs<ExtArgs>
  }
  export type GameSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    host?: boolean | UserDefaultArgs<ExtArgs>
    coHost?: boolean | GameSession$coHostArgs<ExtArgs>
  }
  export type GameSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    host?: boolean | UserDefaultArgs<ExtArgs>
    coHost?: boolean | GameSession$coHostArgs<ExtArgs>
  }

  export type $GameSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameSession"
    objects: {
      host: Prisma.$UserPayload<ExtArgs>
      coHost: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      gameType: string
      hostId: string
      coHostId: string | null
      maxPlayers: number
      currentPlayers: number
      status: string
      isPrivate: boolean
      gameRoomUrl: string | null
      settings: Prisma.JsonValue | null
      createdAt: Date
      startedAt: Date | null
      endedAt: Date | null
    }, ExtArgs["result"]["gameSession"]>
    composites: {}
  }

  type GameSessionGetPayload<S extends boolean | null | undefined | GameSessionDefaultArgs> = $Result.GetResult<Prisma.$GameSessionPayload, S>

  type GameSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameSessionCountAggregateInputType | true
    }

  export interface GameSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameSession'], meta: { name: 'GameSession' } }
    /**
     * Find zero or one GameSession that matches the filter.
     * @param {GameSessionFindUniqueArgs} args - Arguments to find a GameSession
     * @example
     * // Get one GameSession
     * const gameSession = await prisma.gameSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameSessionFindUniqueArgs>(args: SelectSubset<T, GameSessionFindUniqueArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameSessionFindUniqueOrThrowArgs} args - Arguments to find a GameSession
     * @example
     * // Get one GameSession
     * const gameSession = await prisma.gameSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, GameSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionFindFirstArgs} args - Arguments to find a GameSession
     * @example
     * // Get one GameSession
     * const gameSession = await prisma.gameSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameSessionFindFirstArgs>(args?: SelectSubset<T, GameSessionFindFirstArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionFindFirstOrThrowArgs} args - Arguments to find a GameSession
     * @example
     * // Get one GameSession
     * const gameSession = await prisma.gameSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, GameSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameSessions
     * const gameSessions = await prisma.gameSession.findMany()
     * 
     * // Get first 10 GameSessions
     * const gameSessions = await prisma.gameSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameSessionWithIdOnly = await prisma.gameSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameSessionFindManyArgs>(args?: SelectSubset<T, GameSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameSession.
     * @param {GameSessionCreateArgs} args - Arguments to create a GameSession.
     * @example
     * // Create one GameSession
     * const GameSession = await prisma.gameSession.create({
     *   data: {
     *     // ... data to create a GameSession
     *   }
     * })
     * 
     */
    create<T extends GameSessionCreateArgs>(args: SelectSubset<T, GameSessionCreateArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameSessions.
     * @param {GameSessionCreateManyArgs} args - Arguments to create many GameSessions.
     * @example
     * // Create many GameSessions
     * const gameSession = await prisma.gameSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameSessionCreateManyArgs>(args?: SelectSubset<T, GameSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameSessions and returns the data saved in the database.
     * @param {GameSessionCreateManyAndReturnArgs} args - Arguments to create many GameSessions.
     * @example
     * // Create many GameSessions
     * const gameSession = await prisma.gameSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameSessions and only return the `id`
     * const gameSessionWithIdOnly = await prisma.gameSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, GameSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameSession.
     * @param {GameSessionDeleteArgs} args - Arguments to delete one GameSession.
     * @example
     * // Delete one GameSession
     * const GameSession = await prisma.gameSession.delete({
     *   where: {
     *     // ... filter to delete one GameSession
     *   }
     * })
     * 
     */
    delete<T extends GameSessionDeleteArgs>(args: SelectSubset<T, GameSessionDeleteArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameSession.
     * @param {GameSessionUpdateArgs} args - Arguments to update one GameSession.
     * @example
     * // Update one GameSession
     * const gameSession = await prisma.gameSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameSessionUpdateArgs>(args: SelectSubset<T, GameSessionUpdateArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameSessions.
     * @param {GameSessionDeleteManyArgs} args - Arguments to filter GameSessions to delete.
     * @example
     * // Delete a few GameSessions
     * const { count } = await prisma.gameSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameSessionDeleteManyArgs>(args?: SelectSubset<T, GameSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameSessions
     * const gameSession = await prisma.gameSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameSessionUpdateManyArgs>(args: SelectSubset<T, GameSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameSessions and returns the data updated in the database.
     * @param {GameSessionUpdateManyAndReturnArgs} args - Arguments to update many GameSessions.
     * @example
     * // Update many GameSessions
     * const gameSession = await prisma.gameSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameSessions and only return the `id`
     * const gameSessionWithIdOnly = await prisma.gameSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, GameSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameSession.
     * @param {GameSessionUpsertArgs} args - Arguments to update or create a GameSession.
     * @example
     * // Update or create a GameSession
     * const gameSession = await prisma.gameSession.upsert({
     *   create: {
     *     // ... data to create a GameSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameSession we want to update
     *   }
     * })
     */
    upsert<T extends GameSessionUpsertArgs>(args: SelectSubset<T, GameSessionUpsertArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionCountArgs} args - Arguments to filter GameSessions to count.
     * @example
     * // Count the number of GameSessions
     * const count = await prisma.gameSession.count({
     *   where: {
     *     // ... the filter for the GameSessions we want to count
     *   }
     * })
    **/
    count<T extends GameSessionCountArgs>(
      args?: Subset<T, GameSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameSessionAggregateArgs>(args: Subset<T, GameSessionAggregateArgs>): Prisma.PrismaPromise<GetGameSessionAggregateType<T>>

    /**
     * Group by GameSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameSessionGroupByArgs['orderBy'] }
        : { orderBy?: GameSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameSession model
   */
  readonly fields: GameSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    host<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    coHost<T extends GameSession$coHostArgs<ExtArgs> = {}>(args?: Subset<T, GameSession$coHostArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameSession model
   */
  interface GameSessionFieldRefs {
    readonly id: FieldRef<"GameSession", 'String'>
    readonly name: FieldRef<"GameSession", 'String'>
    readonly gameType: FieldRef<"GameSession", 'String'>
    readonly hostId: FieldRef<"GameSession", 'String'>
    readonly coHostId: FieldRef<"GameSession", 'String'>
    readonly maxPlayers: FieldRef<"GameSession", 'Int'>
    readonly currentPlayers: FieldRef<"GameSession", 'Int'>
    readonly status: FieldRef<"GameSession", 'String'>
    readonly isPrivate: FieldRef<"GameSession", 'Boolean'>
    readonly gameRoomUrl: FieldRef<"GameSession", 'String'>
    readonly settings: FieldRef<"GameSession", 'Json'>
    readonly createdAt: FieldRef<"GameSession", 'DateTime'>
    readonly startedAt: FieldRef<"GameSession", 'DateTime'>
    readonly endedAt: FieldRef<"GameSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GameSession findUnique
   */
  export type GameSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter, which GameSession to fetch.
     */
    where: GameSessionWhereUniqueInput
  }

  /**
   * GameSession findUniqueOrThrow
   */
  export type GameSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter, which GameSession to fetch.
     */
    where: GameSessionWhereUniqueInput
  }

  /**
   * GameSession findFirst
   */
  export type GameSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter, which GameSession to fetch.
     */
    where?: GameSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSessions to fetch.
     */
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameSessions.
     */
    cursor?: GameSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameSessions.
     */
    distinct?: GameSessionScalarFieldEnum | GameSessionScalarFieldEnum[]
  }

  /**
   * GameSession findFirstOrThrow
   */
  export type GameSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter, which GameSession to fetch.
     */
    where?: GameSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSessions to fetch.
     */
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameSessions.
     */
    cursor?: GameSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameSessions.
     */
    distinct?: GameSessionScalarFieldEnum | GameSessionScalarFieldEnum[]
  }

  /**
   * GameSession findMany
   */
  export type GameSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter, which GameSessions to fetch.
     */
    where?: GameSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSessions to fetch.
     */
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameSessions.
     */
    cursor?: GameSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSessions.
     */
    skip?: number
    distinct?: GameSessionScalarFieldEnum | GameSessionScalarFieldEnum[]
  }

  /**
   * GameSession create
   */
  export type GameSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a GameSession.
     */
    data: XOR<GameSessionCreateInput, GameSessionUncheckedCreateInput>
  }

  /**
   * GameSession createMany
   */
  export type GameSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameSessions.
     */
    data: GameSessionCreateManyInput | GameSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameSession createManyAndReturn
   */
  export type GameSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * The data used to create many GameSessions.
     */
    data: GameSessionCreateManyInput | GameSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameSession update
   */
  export type GameSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a GameSession.
     */
    data: XOR<GameSessionUpdateInput, GameSessionUncheckedUpdateInput>
    /**
     * Choose, which GameSession to update.
     */
    where: GameSessionWhereUniqueInput
  }

  /**
   * GameSession updateMany
   */
  export type GameSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameSessions.
     */
    data: XOR<GameSessionUpdateManyMutationInput, GameSessionUncheckedUpdateManyInput>
    /**
     * Filter which GameSessions to update
     */
    where?: GameSessionWhereInput
    /**
     * Limit how many GameSessions to update.
     */
    limit?: number
  }

  /**
   * GameSession updateManyAndReturn
   */
  export type GameSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * The data used to update GameSessions.
     */
    data: XOR<GameSessionUpdateManyMutationInput, GameSessionUncheckedUpdateManyInput>
    /**
     * Filter which GameSessions to update
     */
    where?: GameSessionWhereInput
    /**
     * Limit how many GameSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameSession upsert
   */
  export type GameSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the GameSession to update in case it exists.
     */
    where: GameSessionWhereUniqueInput
    /**
     * In case the GameSession found by the `where` argument doesn't exist, create a new GameSession with this data.
     */
    create: XOR<GameSessionCreateInput, GameSessionUncheckedCreateInput>
    /**
     * In case the GameSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameSessionUpdateInput, GameSessionUncheckedUpdateInput>
  }

  /**
   * GameSession delete
   */
  export type GameSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter which GameSession to delete.
     */
    where: GameSessionWhereUniqueInput
  }

  /**
   * GameSession deleteMany
   */
  export type GameSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameSessions to delete
     */
    where?: GameSessionWhereInput
    /**
     * Limit how many GameSessions to delete.
     */
    limit?: number
  }

  /**
   * GameSession.coHost
   */
  export type GameSession$coHostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * GameSession without action
   */
  export type GameSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSession
     */
    omit?: GameSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
  }


  /**
   * Model UserSocialLink
   */

  export type AggregateUserSocialLink = {
    _count: UserSocialLinkCountAggregateOutputType | null
    _min: UserSocialLinkMinAggregateOutputType | null
    _max: UserSocialLinkMaxAggregateOutputType | null
  }

  export type UserSocialLinkMinAggregateOutputType = {
    id: string | null
    userId: string | null
    platform: string | null
    url: string | null
    username: string | null
    isPublic: boolean | null
    createdAt: Date | null
  }

  export type UserSocialLinkMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    platform: string | null
    url: string | null
    username: string | null
    isPublic: boolean | null
    createdAt: Date | null
  }

  export type UserSocialLinkCountAggregateOutputType = {
    id: number
    userId: number
    platform: number
    url: number
    username: number
    isPublic: number
    createdAt: number
    _all: number
  }


  export type UserSocialLinkMinAggregateInputType = {
    id?: true
    userId?: true
    platform?: true
    url?: true
    username?: true
    isPublic?: true
    createdAt?: true
  }

  export type UserSocialLinkMaxAggregateInputType = {
    id?: true
    userId?: true
    platform?: true
    url?: true
    username?: true
    isPublic?: true
    createdAt?: true
  }

  export type UserSocialLinkCountAggregateInputType = {
    id?: true
    userId?: true
    platform?: true
    url?: true
    username?: true
    isPublic?: true
    createdAt?: true
    _all?: true
  }

  export type UserSocialLinkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSocialLink to aggregate.
     */
    where?: UserSocialLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSocialLinks to fetch.
     */
    orderBy?: UserSocialLinkOrderByWithRelationInput | UserSocialLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSocialLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSocialLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSocialLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSocialLinks
    **/
    _count?: true | UserSocialLinkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSocialLinkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSocialLinkMaxAggregateInputType
  }

  export type GetUserSocialLinkAggregateType<T extends UserSocialLinkAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSocialLink]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSocialLink[P]>
      : GetScalarType<T[P], AggregateUserSocialLink[P]>
  }




  export type UserSocialLinkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSocialLinkWhereInput
    orderBy?: UserSocialLinkOrderByWithAggregationInput | UserSocialLinkOrderByWithAggregationInput[]
    by: UserSocialLinkScalarFieldEnum[] | UserSocialLinkScalarFieldEnum
    having?: UserSocialLinkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSocialLinkCountAggregateInputType | true
    _min?: UserSocialLinkMinAggregateInputType
    _max?: UserSocialLinkMaxAggregateInputType
  }

  export type UserSocialLinkGroupByOutputType = {
    id: string
    userId: string
    platform: string
    url: string
    username: string | null
    isPublic: boolean
    createdAt: Date
    _count: UserSocialLinkCountAggregateOutputType | null
    _min: UserSocialLinkMinAggregateOutputType | null
    _max: UserSocialLinkMaxAggregateOutputType | null
  }

  type GetUserSocialLinkGroupByPayload<T extends UserSocialLinkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSocialLinkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSocialLinkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSocialLinkGroupByOutputType[P]>
            : GetScalarType<T[P], UserSocialLinkGroupByOutputType[P]>
        }
      >
    >


  export type UserSocialLinkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    platform?: boolean
    url?: boolean
    username?: boolean
    isPublic?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSocialLink"]>

  export type UserSocialLinkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    platform?: boolean
    url?: boolean
    username?: boolean
    isPublic?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSocialLink"]>

  export type UserSocialLinkSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    platform?: boolean
    url?: boolean
    username?: boolean
    isPublic?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSocialLink"]>

  export type UserSocialLinkSelectScalar = {
    id?: boolean
    userId?: boolean
    platform?: boolean
    url?: boolean
    username?: boolean
    isPublic?: boolean
    createdAt?: boolean
  }

  export type UserSocialLinkOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "platform" | "url" | "username" | "isPublic" | "createdAt", ExtArgs["result"]["userSocialLink"]>
  export type UserSocialLinkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSocialLinkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSocialLinkIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserSocialLinkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSocialLink"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      platform: string
      url: string
      username: string | null
      isPublic: boolean
      createdAt: Date
    }, ExtArgs["result"]["userSocialLink"]>
    composites: {}
  }

  type UserSocialLinkGetPayload<S extends boolean | null | undefined | UserSocialLinkDefaultArgs> = $Result.GetResult<Prisma.$UserSocialLinkPayload, S>

  type UserSocialLinkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSocialLinkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSocialLinkCountAggregateInputType | true
    }

  export interface UserSocialLinkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSocialLink'], meta: { name: 'UserSocialLink' } }
    /**
     * Find zero or one UserSocialLink that matches the filter.
     * @param {UserSocialLinkFindUniqueArgs} args - Arguments to find a UserSocialLink
     * @example
     * // Get one UserSocialLink
     * const userSocialLink = await prisma.userSocialLink.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSocialLinkFindUniqueArgs>(args: SelectSubset<T, UserSocialLinkFindUniqueArgs<ExtArgs>>): Prisma__UserSocialLinkClient<$Result.GetResult<Prisma.$UserSocialLinkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSocialLink that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSocialLinkFindUniqueOrThrowArgs} args - Arguments to find a UserSocialLink
     * @example
     * // Get one UserSocialLink
     * const userSocialLink = await prisma.userSocialLink.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSocialLinkFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSocialLinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSocialLinkClient<$Result.GetResult<Prisma.$UserSocialLinkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSocialLink that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialLinkFindFirstArgs} args - Arguments to find a UserSocialLink
     * @example
     * // Get one UserSocialLink
     * const userSocialLink = await prisma.userSocialLink.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSocialLinkFindFirstArgs>(args?: SelectSubset<T, UserSocialLinkFindFirstArgs<ExtArgs>>): Prisma__UserSocialLinkClient<$Result.GetResult<Prisma.$UserSocialLinkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSocialLink that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialLinkFindFirstOrThrowArgs} args - Arguments to find a UserSocialLink
     * @example
     * // Get one UserSocialLink
     * const userSocialLink = await prisma.userSocialLink.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSocialLinkFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSocialLinkFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSocialLinkClient<$Result.GetResult<Prisma.$UserSocialLinkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSocialLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialLinkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSocialLinks
     * const userSocialLinks = await prisma.userSocialLink.findMany()
     * 
     * // Get first 10 UserSocialLinks
     * const userSocialLinks = await prisma.userSocialLink.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSocialLinkWithIdOnly = await prisma.userSocialLink.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSocialLinkFindManyArgs>(args?: SelectSubset<T, UserSocialLinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSocialLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSocialLink.
     * @param {UserSocialLinkCreateArgs} args - Arguments to create a UserSocialLink.
     * @example
     * // Create one UserSocialLink
     * const UserSocialLink = await prisma.userSocialLink.create({
     *   data: {
     *     // ... data to create a UserSocialLink
     *   }
     * })
     * 
     */
    create<T extends UserSocialLinkCreateArgs>(args: SelectSubset<T, UserSocialLinkCreateArgs<ExtArgs>>): Prisma__UserSocialLinkClient<$Result.GetResult<Prisma.$UserSocialLinkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSocialLinks.
     * @param {UserSocialLinkCreateManyArgs} args - Arguments to create many UserSocialLinks.
     * @example
     * // Create many UserSocialLinks
     * const userSocialLink = await prisma.userSocialLink.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSocialLinkCreateManyArgs>(args?: SelectSubset<T, UserSocialLinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSocialLinks and returns the data saved in the database.
     * @param {UserSocialLinkCreateManyAndReturnArgs} args - Arguments to create many UserSocialLinks.
     * @example
     * // Create many UserSocialLinks
     * const userSocialLink = await prisma.userSocialLink.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSocialLinks and only return the `id`
     * const userSocialLinkWithIdOnly = await prisma.userSocialLink.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSocialLinkCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSocialLinkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSocialLinkPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSocialLink.
     * @param {UserSocialLinkDeleteArgs} args - Arguments to delete one UserSocialLink.
     * @example
     * // Delete one UserSocialLink
     * const UserSocialLink = await prisma.userSocialLink.delete({
     *   where: {
     *     // ... filter to delete one UserSocialLink
     *   }
     * })
     * 
     */
    delete<T extends UserSocialLinkDeleteArgs>(args: SelectSubset<T, UserSocialLinkDeleteArgs<ExtArgs>>): Prisma__UserSocialLinkClient<$Result.GetResult<Prisma.$UserSocialLinkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSocialLink.
     * @param {UserSocialLinkUpdateArgs} args - Arguments to update one UserSocialLink.
     * @example
     * // Update one UserSocialLink
     * const userSocialLink = await prisma.userSocialLink.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSocialLinkUpdateArgs>(args: SelectSubset<T, UserSocialLinkUpdateArgs<ExtArgs>>): Prisma__UserSocialLinkClient<$Result.GetResult<Prisma.$UserSocialLinkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSocialLinks.
     * @param {UserSocialLinkDeleteManyArgs} args - Arguments to filter UserSocialLinks to delete.
     * @example
     * // Delete a few UserSocialLinks
     * const { count } = await prisma.userSocialLink.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSocialLinkDeleteManyArgs>(args?: SelectSubset<T, UserSocialLinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSocialLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialLinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSocialLinks
     * const userSocialLink = await prisma.userSocialLink.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSocialLinkUpdateManyArgs>(args: SelectSubset<T, UserSocialLinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSocialLinks and returns the data updated in the database.
     * @param {UserSocialLinkUpdateManyAndReturnArgs} args - Arguments to update many UserSocialLinks.
     * @example
     * // Update many UserSocialLinks
     * const userSocialLink = await prisma.userSocialLink.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSocialLinks and only return the `id`
     * const userSocialLinkWithIdOnly = await prisma.userSocialLink.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSocialLinkUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSocialLinkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSocialLinkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSocialLink.
     * @param {UserSocialLinkUpsertArgs} args - Arguments to update or create a UserSocialLink.
     * @example
     * // Update or create a UserSocialLink
     * const userSocialLink = await prisma.userSocialLink.upsert({
     *   create: {
     *     // ... data to create a UserSocialLink
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSocialLink we want to update
     *   }
     * })
     */
    upsert<T extends UserSocialLinkUpsertArgs>(args: SelectSubset<T, UserSocialLinkUpsertArgs<ExtArgs>>): Prisma__UserSocialLinkClient<$Result.GetResult<Prisma.$UserSocialLinkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSocialLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialLinkCountArgs} args - Arguments to filter UserSocialLinks to count.
     * @example
     * // Count the number of UserSocialLinks
     * const count = await prisma.userSocialLink.count({
     *   where: {
     *     // ... the filter for the UserSocialLinks we want to count
     *   }
     * })
    **/
    count<T extends UserSocialLinkCountArgs>(
      args?: Subset<T, UserSocialLinkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSocialLinkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSocialLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSocialLinkAggregateArgs>(args: Subset<T, UserSocialLinkAggregateArgs>): Prisma.PrismaPromise<GetUserSocialLinkAggregateType<T>>

    /**
     * Group by UserSocialLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialLinkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSocialLinkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSocialLinkGroupByArgs['orderBy'] }
        : { orderBy?: UserSocialLinkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSocialLinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSocialLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSocialLink model
   */
  readonly fields: UserSocialLinkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSocialLink.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSocialLinkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSocialLink model
   */
  interface UserSocialLinkFieldRefs {
    readonly id: FieldRef<"UserSocialLink", 'String'>
    readonly userId: FieldRef<"UserSocialLink", 'String'>
    readonly platform: FieldRef<"UserSocialLink", 'String'>
    readonly url: FieldRef<"UserSocialLink", 'String'>
    readonly username: FieldRef<"UserSocialLink", 'String'>
    readonly isPublic: FieldRef<"UserSocialLink", 'Boolean'>
    readonly createdAt: FieldRef<"UserSocialLink", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserSocialLink findUnique
   */
  export type UserSocialLinkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialLink
     */
    select?: UserSocialLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialLink
     */
    omit?: UserSocialLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialLinkInclude<ExtArgs> | null
    /**
     * Filter, which UserSocialLink to fetch.
     */
    where: UserSocialLinkWhereUniqueInput
  }

  /**
   * UserSocialLink findUniqueOrThrow
   */
  export type UserSocialLinkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialLink
     */
    select?: UserSocialLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialLink
     */
    omit?: UserSocialLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialLinkInclude<ExtArgs> | null
    /**
     * Filter, which UserSocialLink to fetch.
     */
    where: UserSocialLinkWhereUniqueInput
  }

  /**
   * UserSocialLink findFirst
   */
  export type UserSocialLinkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialLink
     */
    select?: UserSocialLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialLink
     */
    omit?: UserSocialLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialLinkInclude<ExtArgs> | null
    /**
     * Filter, which UserSocialLink to fetch.
     */
    where?: UserSocialLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSocialLinks to fetch.
     */
    orderBy?: UserSocialLinkOrderByWithRelationInput | UserSocialLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSocialLinks.
     */
    cursor?: UserSocialLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSocialLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSocialLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSocialLinks.
     */
    distinct?: UserSocialLinkScalarFieldEnum | UserSocialLinkScalarFieldEnum[]
  }

  /**
   * UserSocialLink findFirstOrThrow
   */
  export type UserSocialLinkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialLink
     */
    select?: UserSocialLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialLink
     */
    omit?: UserSocialLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialLinkInclude<ExtArgs> | null
    /**
     * Filter, which UserSocialLink to fetch.
     */
    where?: UserSocialLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSocialLinks to fetch.
     */
    orderBy?: UserSocialLinkOrderByWithRelationInput | UserSocialLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSocialLinks.
     */
    cursor?: UserSocialLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSocialLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSocialLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSocialLinks.
     */
    distinct?: UserSocialLinkScalarFieldEnum | UserSocialLinkScalarFieldEnum[]
  }

  /**
   * UserSocialLink findMany
   */
  export type UserSocialLinkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialLink
     */
    select?: UserSocialLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialLink
     */
    omit?: UserSocialLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialLinkInclude<ExtArgs> | null
    /**
     * Filter, which UserSocialLinks to fetch.
     */
    where?: UserSocialLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSocialLinks to fetch.
     */
    orderBy?: UserSocialLinkOrderByWithRelationInput | UserSocialLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSocialLinks.
     */
    cursor?: UserSocialLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSocialLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSocialLinks.
     */
    skip?: number
    distinct?: UserSocialLinkScalarFieldEnum | UserSocialLinkScalarFieldEnum[]
  }

  /**
   * UserSocialLink create
   */
  export type UserSocialLinkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialLink
     */
    select?: UserSocialLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialLink
     */
    omit?: UserSocialLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialLinkInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSocialLink.
     */
    data: XOR<UserSocialLinkCreateInput, UserSocialLinkUncheckedCreateInput>
  }

  /**
   * UserSocialLink createMany
   */
  export type UserSocialLinkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSocialLinks.
     */
    data: UserSocialLinkCreateManyInput | UserSocialLinkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSocialLink createManyAndReturn
   */
  export type UserSocialLinkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialLink
     */
    select?: UserSocialLinkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialLink
     */
    omit?: UserSocialLinkOmit<ExtArgs> | null
    /**
     * The data used to create many UserSocialLinks.
     */
    data: UserSocialLinkCreateManyInput | UserSocialLinkCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialLinkIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSocialLink update
   */
  export type UserSocialLinkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialLink
     */
    select?: UserSocialLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialLink
     */
    omit?: UserSocialLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialLinkInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSocialLink.
     */
    data: XOR<UserSocialLinkUpdateInput, UserSocialLinkUncheckedUpdateInput>
    /**
     * Choose, which UserSocialLink to update.
     */
    where: UserSocialLinkWhereUniqueInput
  }

  /**
   * UserSocialLink updateMany
   */
  export type UserSocialLinkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSocialLinks.
     */
    data: XOR<UserSocialLinkUpdateManyMutationInput, UserSocialLinkUncheckedUpdateManyInput>
    /**
     * Filter which UserSocialLinks to update
     */
    where?: UserSocialLinkWhereInput
    /**
     * Limit how many UserSocialLinks to update.
     */
    limit?: number
  }

  /**
   * UserSocialLink updateManyAndReturn
   */
  export type UserSocialLinkUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialLink
     */
    select?: UserSocialLinkSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialLink
     */
    omit?: UserSocialLinkOmit<ExtArgs> | null
    /**
     * The data used to update UserSocialLinks.
     */
    data: XOR<UserSocialLinkUpdateManyMutationInput, UserSocialLinkUncheckedUpdateManyInput>
    /**
     * Filter which UserSocialLinks to update
     */
    where?: UserSocialLinkWhereInput
    /**
     * Limit how many UserSocialLinks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialLinkIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSocialLink upsert
   */
  export type UserSocialLinkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialLink
     */
    select?: UserSocialLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialLink
     */
    omit?: UserSocialLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialLinkInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSocialLink to update in case it exists.
     */
    where: UserSocialLinkWhereUniqueInput
    /**
     * In case the UserSocialLink found by the `where` argument doesn't exist, create a new UserSocialLink with this data.
     */
    create: XOR<UserSocialLinkCreateInput, UserSocialLinkUncheckedCreateInput>
    /**
     * In case the UserSocialLink was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSocialLinkUpdateInput, UserSocialLinkUncheckedUpdateInput>
  }

  /**
   * UserSocialLink delete
   */
  export type UserSocialLinkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialLink
     */
    select?: UserSocialLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialLink
     */
    omit?: UserSocialLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialLinkInclude<ExtArgs> | null
    /**
     * Filter which UserSocialLink to delete.
     */
    where: UserSocialLinkWhereUniqueInput
  }

  /**
   * UserSocialLink deleteMany
   */
  export type UserSocialLinkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSocialLinks to delete
     */
    where?: UserSocialLinkWhereInput
    /**
     * Limit how many UserSocialLinks to delete.
     */
    limit?: number
  }

  /**
   * UserSocialLink without action
   */
  export type UserSocialLinkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialLink
     */
    select?: UserSocialLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialLink
     */
    omit?: UserSocialLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialLinkInclude<ExtArgs> | null
  }


  /**
   * Model UserGamingProfile
   */

  export type AggregateUserGamingProfile = {
    _count: UserGamingProfileCountAggregateOutputType | null
    _min: UserGamingProfileMinAggregateOutputType | null
    _max: UserGamingProfileMaxAggregateOutputType | null
  }

  export type UserGamingProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    platform: string | null
    username: string | null
    skillLevel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserGamingProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    platform: string | null
    username: string | null
    skillLevel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserGamingProfileCountAggregateOutputType = {
    id: number
    userId: number
    platform: number
    username: number
    skillLevel: number
    preferredFormats: number
    achievementBadges: number
    statistics: number
    streamingSettings: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserGamingProfileMinAggregateInputType = {
    id?: true
    userId?: true
    platform?: true
    username?: true
    skillLevel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserGamingProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    platform?: true
    username?: true
    skillLevel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserGamingProfileCountAggregateInputType = {
    id?: true
    userId?: true
    platform?: true
    username?: true
    skillLevel?: true
    preferredFormats?: true
    achievementBadges?: true
    statistics?: true
    streamingSettings?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserGamingProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserGamingProfile to aggregate.
     */
    where?: UserGamingProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserGamingProfiles to fetch.
     */
    orderBy?: UserGamingProfileOrderByWithRelationInput | UserGamingProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserGamingProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserGamingProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserGamingProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserGamingProfiles
    **/
    _count?: true | UserGamingProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserGamingProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserGamingProfileMaxAggregateInputType
  }

  export type GetUserGamingProfileAggregateType<T extends UserGamingProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateUserGamingProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserGamingProfile[P]>
      : GetScalarType<T[P], AggregateUserGamingProfile[P]>
  }




  export type UserGamingProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserGamingProfileWhereInput
    orderBy?: UserGamingProfileOrderByWithAggregationInput | UserGamingProfileOrderByWithAggregationInput[]
    by: UserGamingProfileScalarFieldEnum[] | UserGamingProfileScalarFieldEnum
    having?: UserGamingProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserGamingProfileCountAggregateInputType | true
    _min?: UserGamingProfileMinAggregateInputType
    _max?: UserGamingProfileMaxAggregateInputType
  }

  export type UserGamingProfileGroupByOutputType = {
    id: string
    userId: string
    platform: string
    username: string
    skillLevel: string | null
    preferredFormats: JsonValue | null
    achievementBadges: JsonValue | null
    statistics: JsonValue | null
    streamingSettings: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: UserGamingProfileCountAggregateOutputType | null
    _min: UserGamingProfileMinAggregateOutputType | null
    _max: UserGamingProfileMaxAggregateOutputType | null
  }

  type GetUserGamingProfileGroupByPayload<T extends UserGamingProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGamingProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGamingProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGamingProfileGroupByOutputType[P]>
            : GetScalarType<T[P], UserGamingProfileGroupByOutputType[P]>
        }
      >
    >


  export type UserGamingProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    platform?: boolean
    username?: boolean
    skillLevel?: boolean
    preferredFormats?: boolean
    achievementBadges?: boolean
    statistics?: boolean
    streamingSettings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userGamingProfile"]>

  export type UserGamingProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    platform?: boolean
    username?: boolean
    skillLevel?: boolean
    preferredFormats?: boolean
    achievementBadges?: boolean
    statistics?: boolean
    streamingSettings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userGamingProfile"]>

  export type UserGamingProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    platform?: boolean
    username?: boolean
    skillLevel?: boolean
    preferredFormats?: boolean
    achievementBadges?: boolean
    statistics?: boolean
    streamingSettings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userGamingProfile"]>

  export type UserGamingProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    platform?: boolean
    username?: boolean
    skillLevel?: boolean
    preferredFormats?: boolean
    achievementBadges?: boolean
    statistics?: boolean
    streamingSettings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserGamingProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "platform" | "username" | "skillLevel" | "preferredFormats" | "achievementBadges" | "statistics" | "streamingSettings" | "createdAt" | "updatedAt", ExtArgs["result"]["userGamingProfile"]>
  export type UserGamingProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserGamingProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserGamingProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserGamingProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserGamingProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      platform: string
      username: string
      skillLevel: string | null
      preferredFormats: Prisma.JsonValue | null
      achievementBadges: Prisma.JsonValue | null
      statistics: Prisma.JsonValue | null
      streamingSettings: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userGamingProfile"]>
    composites: {}
  }

  type UserGamingProfileGetPayload<S extends boolean | null | undefined | UserGamingProfileDefaultArgs> = $Result.GetResult<Prisma.$UserGamingProfilePayload, S>

  type UserGamingProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserGamingProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserGamingProfileCountAggregateInputType | true
    }

  export interface UserGamingProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserGamingProfile'], meta: { name: 'UserGamingProfile' } }
    /**
     * Find zero or one UserGamingProfile that matches the filter.
     * @param {UserGamingProfileFindUniqueArgs} args - Arguments to find a UserGamingProfile
     * @example
     * // Get one UserGamingProfile
     * const userGamingProfile = await prisma.userGamingProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserGamingProfileFindUniqueArgs>(args: SelectSubset<T, UserGamingProfileFindUniqueArgs<ExtArgs>>): Prisma__UserGamingProfileClient<$Result.GetResult<Prisma.$UserGamingProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserGamingProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserGamingProfileFindUniqueOrThrowArgs} args - Arguments to find a UserGamingProfile
     * @example
     * // Get one UserGamingProfile
     * const userGamingProfile = await prisma.userGamingProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserGamingProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, UserGamingProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserGamingProfileClient<$Result.GetResult<Prisma.$UserGamingProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserGamingProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGamingProfileFindFirstArgs} args - Arguments to find a UserGamingProfile
     * @example
     * // Get one UserGamingProfile
     * const userGamingProfile = await prisma.userGamingProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserGamingProfileFindFirstArgs>(args?: SelectSubset<T, UserGamingProfileFindFirstArgs<ExtArgs>>): Prisma__UserGamingProfileClient<$Result.GetResult<Prisma.$UserGamingProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserGamingProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGamingProfileFindFirstOrThrowArgs} args - Arguments to find a UserGamingProfile
     * @example
     * // Get one UserGamingProfile
     * const userGamingProfile = await prisma.userGamingProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserGamingProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, UserGamingProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserGamingProfileClient<$Result.GetResult<Prisma.$UserGamingProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserGamingProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGamingProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserGamingProfiles
     * const userGamingProfiles = await prisma.userGamingProfile.findMany()
     * 
     * // Get first 10 UserGamingProfiles
     * const userGamingProfiles = await prisma.userGamingProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userGamingProfileWithIdOnly = await prisma.userGamingProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserGamingProfileFindManyArgs>(args?: SelectSubset<T, UserGamingProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserGamingProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserGamingProfile.
     * @param {UserGamingProfileCreateArgs} args - Arguments to create a UserGamingProfile.
     * @example
     * // Create one UserGamingProfile
     * const UserGamingProfile = await prisma.userGamingProfile.create({
     *   data: {
     *     // ... data to create a UserGamingProfile
     *   }
     * })
     * 
     */
    create<T extends UserGamingProfileCreateArgs>(args: SelectSubset<T, UserGamingProfileCreateArgs<ExtArgs>>): Prisma__UserGamingProfileClient<$Result.GetResult<Prisma.$UserGamingProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserGamingProfiles.
     * @param {UserGamingProfileCreateManyArgs} args - Arguments to create many UserGamingProfiles.
     * @example
     * // Create many UserGamingProfiles
     * const userGamingProfile = await prisma.userGamingProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserGamingProfileCreateManyArgs>(args?: SelectSubset<T, UserGamingProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserGamingProfiles and returns the data saved in the database.
     * @param {UserGamingProfileCreateManyAndReturnArgs} args - Arguments to create many UserGamingProfiles.
     * @example
     * // Create many UserGamingProfiles
     * const userGamingProfile = await prisma.userGamingProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserGamingProfiles and only return the `id`
     * const userGamingProfileWithIdOnly = await prisma.userGamingProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserGamingProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, UserGamingProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserGamingProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserGamingProfile.
     * @param {UserGamingProfileDeleteArgs} args - Arguments to delete one UserGamingProfile.
     * @example
     * // Delete one UserGamingProfile
     * const UserGamingProfile = await prisma.userGamingProfile.delete({
     *   where: {
     *     // ... filter to delete one UserGamingProfile
     *   }
     * })
     * 
     */
    delete<T extends UserGamingProfileDeleteArgs>(args: SelectSubset<T, UserGamingProfileDeleteArgs<ExtArgs>>): Prisma__UserGamingProfileClient<$Result.GetResult<Prisma.$UserGamingProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserGamingProfile.
     * @param {UserGamingProfileUpdateArgs} args - Arguments to update one UserGamingProfile.
     * @example
     * // Update one UserGamingProfile
     * const userGamingProfile = await prisma.userGamingProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserGamingProfileUpdateArgs>(args: SelectSubset<T, UserGamingProfileUpdateArgs<ExtArgs>>): Prisma__UserGamingProfileClient<$Result.GetResult<Prisma.$UserGamingProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserGamingProfiles.
     * @param {UserGamingProfileDeleteManyArgs} args - Arguments to filter UserGamingProfiles to delete.
     * @example
     * // Delete a few UserGamingProfiles
     * const { count } = await prisma.userGamingProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserGamingProfileDeleteManyArgs>(args?: SelectSubset<T, UserGamingProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserGamingProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGamingProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserGamingProfiles
     * const userGamingProfile = await prisma.userGamingProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserGamingProfileUpdateManyArgs>(args: SelectSubset<T, UserGamingProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserGamingProfiles and returns the data updated in the database.
     * @param {UserGamingProfileUpdateManyAndReturnArgs} args - Arguments to update many UserGamingProfiles.
     * @example
     * // Update many UserGamingProfiles
     * const userGamingProfile = await prisma.userGamingProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserGamingProfiles and only return the `id`
     * const userGamingProfileWithIdOnly = await prisma.userGamingProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserGamingProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, UserGamingProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserGamingProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserGamingProfile.
     * @param {UserGamingProfileUpsertArgs} args - Arguments to update or create a UserGamingProfile.
     * @example
     * // Update or create a UserGamingProfile
     * const userGamingProfile = await prisma.userGamingProfile.upsert({
     *   create: {
     *     // ... data to create a UserGamingProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserGamingProfile we want to update
     *   }
     * })
     */
    upsert<T extends UserGamingProfileUpsertArgs>(args: SelectSubset<T, UserGamingProfileUpsertArgs<ExtArgs>>): Prisma__UserGamingProfileClient<$Result.GetResult<Prisma.$UserGamingProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserGamingProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGamingProfileCountArgs} args - Arguments to filter UserGamingProfiles to count.
     * @example
     * // Count the number of UserGamingProfiles
     * const count = await prisma.userGamingProfile.count({
     *   where: {
     *     // ... the filter for the UserGamingProfiles we want to count
     *   }
     * })
    **/
    count<T extends UserGamingProfileCountArgs>(
      args?: Subset<T, UserGamingProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserGamingProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserGamingProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGamingProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserGamingProfileAggregateArgs>(args: Subset<T, UserGamingProfileAggregateArgs>): Prisma.PrismaPromise<GetUserGamingProfileAggregateType<T>>

    /**
     * Group by UserGamingProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGamingProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGamingProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGamingProfileGroupByArgs['orderBy'] }
        : { orderBy?: UserGamingProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGamingProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGamingProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserGamingProfile model
   */
  readonly fields: UserGamingProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserGamingProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserGamingProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserGamingProfile model
   */
  interface UserGamingProfileFieldRefs {
    readonly id: FieldRef<"UserGamingProfile", 'String'>
    readonly userId: FieldRef<"UserGamingProfile", 'String'>
    readonly platform: FieldRef<"UserGamingProfile", 'String'>
    readonly username: FieldRef<"UserGamingProfile", 'String'>
    readonly skillLevel: FieldRef<"UserGamingProfile", 'String'>
    readonly preferredFormats: FieldRef<"UserGamingProfile", 'Json'>
    readonly achievementBadges: FieldRef<"UserGamingProfile", 'Json'>
    readonly statistics: FieldRef<"UserGamingProfile", 'Json'>
    readonly streamingSettings: FieldRef<"UserGamingProfile", 'Json'>
    readonly createdAt: FieldRef<"UserGamingProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"UserGamingProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserGamingProfile findUnique
   */
  export type UserGamingProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGamingProfile
     */
    select?: UserGamingProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGamingProfile
     */
    omit?: UserGamingProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGamingProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserGamingProfile to fetch.
     */
    where: UserGamingProfileWhereUniqueInput
  }

  /**
   * UserGamingProfile findUniqueOrThrow
   */
  export type UserGamingProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGamingProfile
     */
    select?: UserGamingProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGamingProfile
     */
    omit?: UserGamingProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGamingProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserGamingProfile to fetch.
     */
    where: UserGamingProfileWhereUniqueInput
  }

  /**
   * UserGamingProfile findFirst
   */
  export type UserGamingProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGamingProfile
     */
    select?: UserGamingProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGamingProfile
     */
    omit?: UserGamingProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGamingProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserGamingProfile to fetch.
     */
    where?: UserGamingProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserGamingProfiles to fetch.
     */
    orderBy?: UserGamingProfileOrderByWithRelationInput | UserGamingProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserGamingProfiles.
     */
    cursor?: UserGamingProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserGamingProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserGamingProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserGamingProfiles.
     */
    distinct?: UserGamingProfileScalarFieldEnum | UserGamingProfileScalarFieldEnum[]
  }

  /**
   * UserGamingProfile findFirstOrThrow
   */
  export type UserGamingProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGamingProfile
     */
    select?: UserGamingProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGamingProfile
     */
    omit?: UserGamingProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGamingProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserGamingProfile to fetch.
     */
    where?: UserGamingProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserGamingProfiles to fetch.
     */
    orderBy?: UserGamingProfileOrderByWithRelationInput | UserGamingProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserGamingProfiles.
     */
    cursor?: UserGamingProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserGamingProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserGamingProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserGamingProfiles.
     */
    distinct?: UserGamingProfileScalarFieldEnum | UserGamingProfileScalarFieldEnum[]
  }

  /**
   * UserGamingProfile findMany
   */
  export type UserGamingProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGamingProfile
     */
    select?: UserGamingProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGamingProfile
     */
    omit?: UserGamingProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGamingProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserGamingProfiles to fetch.
     */
    where?: UserGamingProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserGamingProfiles to fetch.
     */
    orderBy?: UserGamingProfileOrderByWithRelationInput | UserGamingProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserGamingProfiles.
     */
    cursor?: UserGamingProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserGamingProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserGamingProfiles.
     */
    skip?: number
    distinct?: UserGamingProfileScalarFieldEnum | UserGamingProfileScalarFieldEnum[]
  }

  /**
   * UserGamingProfile create
   */
  export type UserGamingProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGamingProfile
     */
    select?: UserGamingProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGamingProfile
     */
    omit?: UserGamingProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGamingProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a UserGamingProfile.
     */
    data: XOR<UserGamingProfileCreateInput, UserGamingProfileUncheckedCreateInput>
  }

  /**
   * UserGamingProfile createMany
   */
  export type UserGamingProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserGamingProfiles.
     */
    data: UserGamingProfileCreateManyInput | UserGamingProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserGamingProfile createManyAndReturn
   */
  export type UserGamingProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGamingProfile
     */
    select?: UserGamingProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserGamingProfile
     */
    omit?: UserGamingProfileOmit<ExtArgs> | null
    /**
     * The data used to create many UserGamingProfiles.
     */
    data: UserGamingProfileCreateManyInput | UserGamingProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGamingProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserGamingProfile update
   */
  export type UserGamingProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGamingProfile
     */
    select?: UserGamingProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGamingProfile
     */
    omit?: UserGamingProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGamingProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a UserGamingProfile.
     */
    data: XOR<UserGamingProfileUpdateInput, UserGamingProfileUncheckedUpdateInput>
    /**
     * Choose, which UserGamingProfile to update.
     */
    where: UserGamingProfileWhereUniqueInput
  }

  /**
   * UserGamingProfile updateMany
   */
  export type UserGamingProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserGamingProfiles.
     */
    data: XOR<UserGamingProfileUpdateManyMutationInput, UserGamingProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserGamingProfiles to update
     */
    where?: UserGamingProfileWhereInput
    /**
     * Limit how many UserGamingProfiles to update.
     */
    limit?: number
  }

  /**
   * UserGamingProfile updateManyAndReturn
   */
  export type UserGamingProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGamingProfile
     */
    select?: UserGamingProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserGamingProfile
     */
    omit?: UserGamingProfileOmit<ExtArgs> | null
    /**
     * The data used to update UserGamingProfiles.
     */
    data: XOR<UserGamingProfileUpdateManyMutationInput, UserGamingProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserGamingProfiles to update
     */
    where?: UserGamingProfileWhereInput
    /**
     * Limit how many UserGamingProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGamingProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserGamingProfile upsert
   */
  export type UserGamingProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGamingProfile
     */
    select?: UserGamingProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGamingProfile
     */
    omit?: UserGamingProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGamingProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the UserGamingProfile to update in case it exists.
     */
    where: UserGamingProfileWhereUniqueInput
    /**
     * In case the UserGamingProfile found by the `where` argument doesn't exist, create a new UserGamingProfile with this data.
     */
    create: XOR<UserGamingProfileCreateInput, UserGamingProfileUncheckedCreateInput>
    /**
     * In case the UserGamingProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserGamingProfileUpdateInput, UserGamingProfileUncheckedUpdateInput>
  }

  /**
   * UserGamingProfile delete
   */
  export type UserGamingProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGamingProfile
     */
    select?: UserGamingProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGamingProfile
     */
    omit?: UserGamingProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGamingProfileInclude<ExtArgs> | null
    /**
     * Filter which UserGamingProfile to delete.
     */
    where: UserGamingProfileWhereUniqueInput
  }

  /**
   * UserGamingProfile deleteMany
   */
  export type UserGamingProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserGamingProfiles to delete
     */
    where?: UserGamingProfileWhereInput
    /**
     * Limit how many UserGamingProfiles to delete.
     */
    limit?: number
  }

  /**
   * UserGamingProfile without action
   */
  export type UserGamingProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGamingProfile
     */
    select?: UserGamingProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserGamingProfile
     */
    omit?: UserGamingProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserGamingProfileInclude<ExtArgs> | null
  }


  /**
   * Model Friendship
   */

  export type AggregateFriendship = {
    _count: FriendshipCountAggregateOutputType | null
    _min: FriendshipMinAggregateOutputType | null
    _max: FriendshipMaxAggregateOutputType | null
  }

  export type FriendshipMinAggregateOutputType = {
    id: string | null
    requesterId: string | null
    receiverId: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FriendshipMaxAggregateOutputType = {
    id: string | null
    requesterId: string | null
    receiverId: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FriendshipCountAggregateOutputType = {
    id: number
    requesterId: number
    receiverId: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FriendshipMinAggregateInputType = {
    id?: true
    requesterId?: true
    receiverId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FriendshipMaxAggregateInputType = {
    id?: true
    requesterId?: true
    receiverId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FriendshipCountAggregateInputType = {
    id?: true
    requesterId?: true
    receiverId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FriendshipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Friendship to aggregate.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Friendships
    **/
    _count?: true | FriendshipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FriendshipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FriendshipMaxAggregateInputType
  }

  export type GetFriendshipAggregateType<T extends FriendshipAggregateArgs> = {
        [P in keyof T & keyof AggregateFriendship]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFriendship[P]>
      : GetScalarType<T[P], AggregateFriendship[P]>
  }




  export type FriendshipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FriendshipWhereInput
    orderBy?: FriendshipOrderByWithAggregationInput | FriendshipOrderByWithAggregationInput[]
    by: FriendshipScalarFieldEnum[] | FriendshipScalarFieldEnum
    having?: FriendshipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FriendshipCountAggregateInputType | true
    _min?: FriendshipMinAggregateInputType
    _max?: FriendshipMaxAggregateInputType
  }

  export type FriendshipGroupByOutputType = {
    id: string
    requesterId: string
    receiverId: string
    status: string
    createdAt: Date
    updatedAt: Date
    _count: FriendshipCountAggregateOutputType | null
    _min: FriendshipMinAggregateOutputType | null
    _max: FriendshipMaxAggregateOutputType | null
  }

  type GetFriendshipGroupByPayload<T extends FriendshipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FriendshipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FriendshipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FriendshipGroupByOutputType[P]>
            : GetScalarType<T[P], FriendshipGroupByOutputType[P]>
        }
      >
    >


  export type FriendshipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requesterId?: boolean
    receiverId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requester?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["friendship"]>

  export type FriendshipSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requesterId?: boolean
    receiverId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requester?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["friendship"]>

  export type FriendshipSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requesterId?: boolean
    receiverId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requester?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["friendship"]>

  export type FriendshipSelectScalar = {
    id?: boolean
    requesterId?: boolean
    receiverId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FriendshipOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "requesterId" | "receiverId" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["friendship"]>
  export type FriendshipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requester?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FriendshipIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requester?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FriendshipIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requester?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FriendshipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Friendship"
    objects: {
      requester: Prisma.$UserPayload<ExtArgs>
      receiver: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      requesterId: string
      receiverId: string
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["friendship"]>
    composites: {}
  }

  type FriendshipGetPayload<S extends boolean | null | undefined | FriendshipDefaultArgs> = $Result.GetResult<Prisma.$FriendshipPayload, S>

  type FriendshipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FriendshipFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FriendshipCountAggregateInputType | true
    }

  export interface FriendshipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Friendship'], meta: { name: 'Friendship' } }
    /**
     * Find zero or one Friendship that matches the filter.
     * @param {FriendshipFindUniqueArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FriendshipFindUniqueArgs>(args: SelectSubset<T, FriendshipFindUniqueArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Friendship that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FriendshipFindUniqueOrThrowArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FriendshipFindUniqueOrThrowArgs>(args: SelectSubset<T, FriendshipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Friendship that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindFirstArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FriendshipFindFirstArgs>(args?: SelectSubset<T, FriendshipFindFirstArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Friendship that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindFirstOrThrowArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FriendshipFindFirstOrThrowArgs>(args?: SelectSubset<T, FriendshipFindFirstOrThrowArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Friendships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Friendships
     * const friendships = await prisma.friendship.findMany()
     * 
     * // Get first 10 Friendships
     * const friendships = await prisma.friendship.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const friendshipWithIdOnly = await prisma.friendship.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FriendshipFindManyArgs>(args?: SelectSubset<T, FriendshipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Friendship.
     * @param {FriendshipCreateArgs} args - Arguments to create a Friendship.
     * @example
     * // Create one Friendship
     * const Friendship = await prisma.friendship.create({
     *   data: {
     *     // ... data to create a Friendship
     *   }
     * })
     * 
     */
    create<T extends FriendshipCreateArgs>(args: SelectSubset<T, FriendshipCreateArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Friendships.
     * @param {FriendshipCreateManyArgs} args - Arguments to create many Friendships.
     * @example
     * // Create many Friendships
     * const friendship = await prisma.friendship.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FriendshipCreateManyArgs>(args?: SelectSubset<T, FriendshipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Friendships and returns the data saved in the database.
     * @param {FriendshipCreateManyAndReturnArgs} args - Arguments to create many Friendships.
     * @example
     * // Create many Friendships
     * const friendship = await prisma.friendship.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Friendships and only return the `id`
     * const friendshipWithIdOnly = await prisma.friendship.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FriendshipCreateManyAndReturnArgs>(args?: SelectSubset<T, FriendshipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Friendship.
     * @param {FriendshipDeleteArgs} args - Arguments to delete one Friendship.
     * @example
     * // Delete one Friendship
     * const Friendship = await prisma.friendship.delete({
     *   where: {
     *     // ... filter to delete one Friendship
     *   }
     * })
     * 
     */
    delete<T extends FriendshipDeleteArgs>(args: SelectSubset<T, FriendshipDeleteArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Friendship.
     * @param {FriendshipUpdateArgs} args - Arguments to update one Friendship.
     * @example
     * // Update one Friendship
     * const friendship = await prisma.friendship.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FriendshipUpdateArgs>(args: SelectSubset<T, FriendshipUpdateArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Friendships.
     * @param {FriendshipDeleteManyArgs} args - Arguments to filter Friendships to delete.
     * @example
     * // Delete a few Friendships
     * const { count } = await prisma.friendship.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FriendshipDeleteManyArgs>(args?: SelectSubset<T, FriendshipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Friendships
     * const friendship = await prisma.friendship.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FriendshipUpdateManyArgs>(args: SelectSubset<T, FriendshipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Friendships and returns the data updated in the database.
     * @param {FriendshipUpdateManyAndReturnArgs} args - Arguments to update many Friendships.
     * @example
     * // Update many Friendships
     * const friendship = await prisma.friendship.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Friendships and only return the `id`
     * const friendshipWithIdOnly = await prisma.friendship.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FriendshipUpdateManyAndReturnArgs>(args: SelectSubset<T, FriendshipUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Friendship.
     * @param {FriendshipUpsertArgs} args - Arguments to update or create a Friendship.
     * @example
     * // Update or create a Friendship
     * const friendship = await prisma.friendship.upsert({
     *   create: {
     *     // ... data to create a Friendship
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Friendship we want to update
     *   }
     * })
     */
    upsert<T extends FriendshipUpsertArgs>(args: SelectSubset<T, FriendshipUpsertArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipCountArgs} args - Arguments to filter Friendships to count.
     * @example
     * // Count the number of Friendships
     * const count = await prisma.friendship.count({
     *   where: {
     *     // ... the filter for the Friendships we want to count
     *   }
     * })
    **/
    count<T extends FriendshipCountArgs>(
      args?: Subset<T, FriendshipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FriendshipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Friendship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FriendshipAggregateArgs>(args: Subset<T, FriendshipAggregateArgs>): Prisma.PrismaPromise<GetFriendshipAggregateType<T>>

    /**
     * Group by Friendship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FriendshipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FriendshipGroupByArgs['orderBy'] }
        : { orderBy?: FriendshipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FriendshipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFriendshipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Friendship model
   */
  readonly fields: FriendshipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Friendship.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FriendshipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    requester<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    receiver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Friendship model
   */
  interface FriendshipFieldRefs {
    readonly id: FieldRef<"Friendship", 'String'>
    readonly requesterId: FieldRef<"Friendship", 'String'>
    readonly receiverId: FieldRef<"Friendship", 'String'>
    readonly status: FieldRef<"Friendship", 'String'>
    readonly createdAt: FieldRef<"Friendship", 'DateTime'>
    readonly updatedAt: FieldRef<"Friendship", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Friendship findUnique
   */
  export type FriendshipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter, which Friendship to fetch.
     */
    where: FriendshipWhereUniqueInput
  }

  /**
   * Friendship findUniqueOrThrow
   */
  export type FriendshipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter, which Friendship to fetch.
     */
    where: FriendshipWhereUniqueInput
  }

  /**
   * Friendship findFirst
   */
  export type FriendshipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter, which Friendship to fetch.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friendships.
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friendships.
     */
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * Friendship findFirstOrThrow
   */
  export type FriendshipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter, which Friendship to fetch.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friendships.
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friendships.
     */
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * Friendship findMany
   */
  export type FriendshipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter, which Friendships to fetch.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Friendships.
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * Friendship create
   */
  export type FriendshipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * The data needed to create a Friendship.
     */
    data: XOR<FriendshipCreateInput, FriendshipUncheckedCreateInput>
  }

  /**
   * Friendship createMany
   */
  export type FriendshipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Friendships.
     */
    data: FriendshipCreateManyInput | FriendshipCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Friendship createManyAndReturn
   */
  export type FriendshipCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * The data used to create many Friendships.
     */
    data: FriendshipCreateManyInput | FriendshipCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Friendship update
   */
  export type FriendshipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * The data needed to update a Friendship.
     */
    data: XOR<FriendshipUpdateInput, FriendshipUncheckedUpdateInput>
    /**
     * Choose, which Friendship to update.
     */
    where: FriendshipWhereUniqueInput
  }

  /**
   * Friendship updateMany
   */
  export type FriendshipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Friendships.
     */
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyInput>
    /**
     * Filter which Friendships to update
     */
    where?: FriendshipWhereInput
    /**
     * Limit how many Friendships to update.
     */
    limit?: number
  }

  /**
   * Friendship updateManyAndReturn
   */
  export type FriendshipUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * The data used to update Friendships.
     */
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyInput>
    /**
     * Filter which Friendships to update
     */
    where?: FriendshipWhereInput
    /**
     * Limit how many Friendships to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Friendship upsert
   */
  export type FriendshipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * The filter to search for the Friendship to update in case it exists.
     */
    where: FriendshipWhereUniqueInput
    /**
     * In case the Friendship found by the `where` argument doesn't exist, create a new Friendship with this data.
     */
    create: XOR<FriendshipCreateInput, FriendshipUncheckedCreateInput>
    /**
     * In case the Friendship was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FriendshipUpdateInput, FriendshipUncheckedUpdateInput>
  }

  /**
   * Friendship delete
   */
  export type FriendshipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter which Friendship to delete.
     */
    where: FriendshipWhereUniqueInput
  }

  /**
   * Friendship deleteMany
   */
  export type FriendshipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Friendships to delete
     */
    where?: FriendshipWhereInput
    /**
     * Limit how many Friendships to delete.
     */
    limit?: number
  }

  /**
   * Friendship without action
   */
  export type FriendshipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
  }


  /**
   * Model UserActivity
   */

  export type AggregateUserActivity = {
    _count: UserActivityCountAggregateOutputType | null
    _min: UserActivityMinAggregateOutputType | null
    _max: UserActivityMaxAggregateOutputType | null
  }

  export type UserActivityMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    description: string | null
    createdAt: Date | null
  }

  export type UserActivityMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    description: string | null
    createdAt: Date | null
  }

  export type UserActivityCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    description: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type UserActivityMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    description?: true
    createdAt?: true
  }

  export type UserActivityMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    description?: true
    createdAt?: true
  }

  export type UserActivityCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    description?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type UserActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserActivity to aggregate.
     */
    where?: UserActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivities to fetch.
     */
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserActivities
    **/
    _count?: true | UserActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserActivityMaxAggregateInputType
  }

  export type GetUserActivityAggregateType<T extends UserActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateUserActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserActivity[P]>
      : GetScalarType<T[P], AggregateUserActivity[P]>
  }




  export type UserActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserActivityWhereInput
    orderBy?: UserActivityOrderByWithAggregationInput | UserActivityOrderByWithAggregationInput[]
    by: UserActivityScalarFieldEnum[] | UserActivityScalarFieldEnum
    having?: UserActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserActivityCountAggregateInputType | true
    _min?: UserActivityMinAggregateInputType
    _max?: UserActivityMaxAggregateInputType
  }

  export type UserActivityGroupByOutputType = {
    id: string
    userId: string
    type: string
    description: string
    metadata: JsonValue | null
    createdAt: Date
    _count: UserActivityCountAggregateOutputType | null
    _min: UserActivityMinAggregateOutputType | null
    _max: UserActivityMaxAggregateOutputType | null
  }

  type GetUserActivityGroupByPayload<T extends UserActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserActivityGroupByOutputType[P]>
            : GetScalarType<T[P], UserActivityGroupByOutputType[P]>
        }
      >
    >


  export type UserActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userActivity"]>

  export type UserActivitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userActivity"]>

  export type UserActivitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userActivity"]>

  export type UserActivitySelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type UserActivityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "description" | "metadata" | "createdAt", ExtArgs["result"]["userActivity"]>
  export type UserActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserActivityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserActivityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserActivity"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      description: string
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["userActivity"]>
    composites: {}
  }

  type UserActivityGetPayload<S extends boolean | null | undefined | UserActivityDefaultArgs> = $Result.GetResult<Prisma.$UserActivityPayload, S>

  type UserActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserActivityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserActivityCountAggregateInputType | true
    }

  export interface UserActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserActivity'], meta: { name: 'UserActivity' } }
    /**
     * Find zero or one UserActivity that matches the filter.
     * @param {UserActivityFindUniqueArgs} args - Arguments to find a UserActivity
     * @example
     * // Get one UserActivity
     * const userActivity = await prisma.userActivity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserActivityFindUniqueArgs>(args: SelectSubset<T, UserActivityFindUniqueArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserActivity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserActivityFindUniqueOrThrowArgs} args - Arguments to find a UserActivity
     * @example
     * // Get one UserActivity
     * const userActivity = await prisma.userActivity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, UserActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserActivity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityFindFirstArgs} args - Arguments to find a UserActivity
     * @example
     * // Get one UserActivity
     * const userActivity = await prisma.userActivity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserActivityFindFirstArgs>(args?: SelectSubset<T, UserActivityFindFirstArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserActivity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityFindFirstOrThrowArgs} args - Arguments to find a UserActivity
     * @example
     * // Get one UserActivity
     * const userActivity = await prisma.userActivity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, UserActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserActivities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserActivities
     * const userActivities = await prisma.userActivity.findMany()
     * 
     * // Get first 10 UserActivities
     * const userActivities = await prisma.userActivity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userActivityWithIdOnly = await prisma.userActivity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserActivityFindManyArgs>(args?: SelectSubset<T, UserActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserActivity.
     * @param {UserActivityCreateArgs} args - Arguments to create a UserActivity.
     * @example
     * // Create one UserActivity
     * const UserActivity = await prisma.userActivity.create({
     *   data: {
     *     // ... data to create a UserActivity
     *   }
     * })
     * 
     */
    create<T extends UserActivityCreateArgs>(args: SelectSubset<T, UserActivityCreateArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserActivities.
     * @param {UserActivityCreateManyArgs} args - Arguments to create many UserActivities.
     * @example
     * // Create many UserActivities
     * const userActivity = await prisma.userActivity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserActivityCreateManyArgs>(args?: SelectSubset<T, UserActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserActivities and returns the data saved in the database.
     * @param {UserActivityCreateManyAndReturnArgs} args - Arguments to create many UserActivities.
     * @example
     * // Create many UserActivities
     * const userActivity = await prisma.userActivity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserActivities and only return the `id`
     * const userActivityWithIdOnly = await prisma.userActivity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserActivityCreateManyAndReturnArgs>(args?: SelectSubset<T, UserActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserActivity.
     * @param {UserActivityDeleteArgs} args - Arguments to delete one UserActivity.
     * @example
     * // Delete one UserActivity
     * const UserActivity = await prisma.userActivity.delete({
     *   where: {
     *     // ... filter to delete one UserActivity
     *   }
     * })
     * 
     */
    delete<T extends UserActivityDeleteArgs>(args: SelectSubset<T, UserActivityDeleteArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserActivity.
     * @param {UserActivityUpdateArgs} args - Arguments to update one UserActivity.
     * @example
     * // Update one UserActivity
     * const userActivity = await prisma.userActivity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserActivityUpdateArgs>(args: SelectSubset<T, UserActivityUpdateArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserActivities.
     * @param {UserActivityDeleteManyArgs} args - Arguments to filter UserActivities to delete.
     * @example
     * // Delete a few UserActivities
     * const { count } = await prisma.userActivity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserActivityDeleteManyArgs>(args?: SelectSubset<T, UserActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserActivities
     * const userActivity = await prisma.userActivity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserActivityUpdateManyArgs>(args: SelectSubset<T, UserActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserActivities and returns the data updated in the database.
     * @param {UserActivityUpdateManyAndReturnArgs} args - Arguments to update many UserActivities.
     * @example
     * // Update many UserActivities
     * const userActivity = await prisma.userActivity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserActivities and only return the `id`
     * const userActivityWithIdOnly = await prisma.userActivity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserActivityUpdateManyAndReturnArgs>(args: SelectSubset<T, UserActivityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserActivity.
     * @param {UserActivityUpsertArgs} args - Arguments to update or create a UserActivity.
     * @example
     * // Update or create a UserActivity
     * const userActivity = await prisma.userActivity.upsert({
     *   create: {
     *     // ... data to create a UserActivity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserActivity we want to update
     *   }
     * })
     */
    upsert<T extends UserActivityUpsertArgs>(args: SelectSubset<T, UserActivityUpsertArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityCountArgs} args - Arguments to filter UserActivities to count.
     * @example
     * // Count the number of UserActivities
     * const count = await prisma.userActivity.count({
     *   where: {
     *     // ... the filter for the UserActivities we want to count
     *   }
     * })
    **/
    count<T extends UserActivityCountArgs>(
      args?: Subset<T, UserActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserActivityAggregateArgs>(args: Subset<T, UserActivityAggregateArgs>): Prisma.PrismaPromise<GetUserActivityAggregateType<T>>

    /**
     * Group by UserActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserActivityGroupByArgs['orderBy'] }
        : { orderBy?: UserActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserActivity model
   */
  readonly fields: UserActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserActivity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserActivity model
   */
  interface UserActivityFieldRefs {
    readonly id: FieldRef<"UserActivity", 'String'>
    readonly userId: FieldRef<"UserActivity", 'String'>
    readonly type: FieldRef<"UserActivity", 'String'>
    readonly description: FieldRef<"UserActivity", 'String'>
    readonly metadata: FieldRef<"UserActivity", 'Json'>
    readonly createdAt: FieldRef<"UserActivity", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserActivity findUnique
   */
  export type UserActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivity to fetch.
     */
    where: UserActivityWhereUniqueInput
  }

  /**
   * UserActivity findUniqueOrThrow
   */
  export type UserActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivity to fetch.
     */
    where: UserActivityWhereUniqueInput
  }

  /**
   * UserActivity findFirst
   */
  export type UserActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivity to fetch.
     */
    where?: UserActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivities to fetch.
     */
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserActivities.
     */
    cursor?: UserActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserActivities.
     */
    distinct?: UserActivityScalarFieldEnum | UserActivityScalarFieldEnum[]
  }

  /**
   * UserActivity findFirstOrThrow
   */
  export type UserActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivity to fetch.
     */
    where?: UserActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivities to fetch.
     */
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserActivities.
     */
    cursor?: UserActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserActivities.
     */
    distinct?: UserActivityScalarFieldEnum | UserActivityScalarFieldEnum[]
  }

  /**
   * UserActivity findMany
   */
  export type UserActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivities to fetch.
     */
    where?: UserActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivities to fetch.
     */
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserActivities.
     */
    cursor?: UserActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivities.
     */
    skip?: number
    distinct?: UserActivityScalarFieldEnum | UserActivityScalarFieldEnum[]
  }

  /**
   * UserActivity create
   */
  export type UserActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a UserActivity.
     */
    data: XOR<UserActivityCreateInput, UserActivityUncheckedCreateInput>
  }

  /**
   * UserActivity createMany
   */
  export type UserActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserActivities.
     */
    data: UserActivityCreateManyInput | UserActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserActivity createManyAndReturn
   */
  export type UserActivityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * The data used to create many UserActivities.
     */
    data: UserActivityCreateManyInput | UserActivityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserActivity update
   */
  export type UserActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a UserActivity.
     */
    data: XOR<UserActivityUpdateInput, UserActivityUncheckedUpdateInput>
    /**
     * Choose, which UserActivity to update.
     */
    where: UserActivityWhereUniqueInput
  }

  /**
   * UserActivity updateMany
   */
  export type UserActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserActivities.
     */
    data: XOR<UserActivityUpdateManyMutationInput, UserActivityUncheckedUpdateManyInput>
    /**
     * Filter which UserActivities to update
     */
    where?: UserActivityWhereInput
    /**
     * Limit how many UserActivities to update.
     */
    limit?: number
  }

  /**
   * UserActivity updateManyAndReturn
   */
  export type UserActivityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * The data used to update UserActivities.
     */
    data: XOR<UserActivityUpdateManyMutationInput, UserActivityUncheckedUpdateManyInput>
    /**
     * Filter which UserActivities to update
     */
    where?: UserActivityWhereInput
    /**
     * Limit how many UserActivities to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserActivity upsert
   */
  export type UserActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the UserActivity to update in case it exists.
     */
    where: UserActivityWhereUniqueInput
    /**
     * In case the UserActivity found by the `where` argument doesn't exist, create a new UserActivity with this data.
     */
    create: XOR<UserActivityCreateInput, UserActivityUncheckedCreateInput>
    /**
     * In case the UserActivity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserActivityUpdateInput, UserActivityUncheckedUpdateInput>
  }

  /**
   * UserActivity delete
   */
  export type UserActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter which UserActivity to delete.
     */
    where: UserActivityWhereUniqueInput
  }

  /**
   * UserActivity deleteMany
   */
  export type UserActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserActivities to delete
     */
    where?: UserActivityWhereInput
    /**
     * Limit how many UserActivities to delete.
     */
    limit?: number
  }

  /**
   * UserActivity without action
   */
  export type UserActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
  }


  /**
   * Model UserSettings
   */

  export type AggregateUserSettings = {
    _count: UserSettingsCountAggregateOutputType | null
    _min: UserSettingsMinAggregateOutputType | null
    _max: UserSettingsMaxAggregateOutputType | null
  }

  export type UserSettingsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    emailNotifications: boolean | null
    pushNotifications: boolean | null
    profileVisibility: string | null
    showOnlineStatus: boolean | null
    allowFriendRequests: boolean | null
    allowDirectMessages: boolean | null
    language: string | null
    timezone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSettingsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    emailNotifications: boolean | null
    pushNotifications: boolean | null
    profileVisibility: string | null
    showOnlineStatus: boolean | null
    allowFriendRequests: boolean | null
    allowDirectMessages: boolean | null
    language: string | null
    timezone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSettingsCountAggregateOutputType = {
    id: number
    userId: number
    emailNotifications: number
    pushNotifications: number
    profileVisibility: number
    showOnlineStatus: number
    allowFriendRequests: number
    allowDirectMessages: number
    language: number
    timezone: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserSettingsMinAggregateInputType = {
    id?: true
    userId?: true
    emailNotifications?: true
    pushNotifications?: true
    profileVisibility?: true
    showOnlineStatus?: true
    allowFriendRequests?: true
    allowDirectMessages?: true
    language?: true
    timezone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSettingsMaxAggregateInputType = {
    id?: true
    userId?: true
    emailNotifications?: true
    pushNotifications?: true
    profileVisibility?: true
    showOnlineStatus?: true
    allowFriendRequests?: true
    allowDirectMessages?: true
    language?: true
    timezone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSettingsCountAggregateInputType = {
    id?: true
    userId?: true
    emailNotifications?: true
    pushNotifications?: true
    profileVisibility?: true
    showOnlineStatus?: true
    allowFriendRequests?: true
    allowDirectMessages?: true
    language?: true
    timezone?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSettings to aggregate.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSettings
    **/
    _count?: true | UserSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSettingsMaxAggregateInputType
  }

  export type GetUserSettingsAggregateType<T extends UserSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSettings[P]>
      : GetScalarType<T[P], AggregateUserSettings[P]>
  }




  export type UserSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSettingsWhereInput
    orderBy?: UserSettingsOrderByWithAggregationInput | UserSettingsOrderByWithAggregationInput[]
    by: UserSettingsScalarFieldEnum[] | UserSettingsScalarFieldEnum
    having?: UserSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSettingsCountAggregateInputType | true
    _min?: UserSettingsMinAggregateInputType
    _max?: UserSettingsMaxAggregateInputType
  }

  export type UserSettingsGroupByOutputType = {
    id: string
    userId: string
    emailNotifications: boolean
    pushNotifications: boolean
    profileVisibility: string
    showOnlineStatus: boolean
    allowFriendRequests: boolean
    allowDirectMessages: boolean
    language: string
    timezone: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserSettingsCountAggregateOutputType | null
    _min: UserSettingsMinAggregateOutputType | null
    _max: UserSettingsMaxAggregateOutputType | null
  }

  type GetUserSettingsGroupByPayload<T extends UserSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], UserSettingsGroupByOutputType[P]>
        }
      >
    >


  export type UserSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    profileVisibility?: boolean
    showOnlineStatus?: boolean
    allowFriendRequests?: boolean
    allowDirectMessages?: boolean
    language?: boolean
    timezone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSettings"]>

  export type UserSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    profileVisibility?: boolean
    showOnlineStatus?: boolean
    allowFriendRequests?: boolean
    allowDirectMessages?: boolean
    language?: boolean
    timezone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSettings"]>

  export type UserSettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    profileVisibility?: boolean
    showOnlineStatus?: boolean
    allowFriendRequests?: boolean
    allowDirectMessages?: boolean
    language?: boolean
    timezone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSettings"]>

  export type UserSettingsSelectScalar = {
    id?: boolean
    userId?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    profileVisibility?: boolean
    showOnlineStatus?: boolean
    allowFriendRequests?: boolean
    allowDirectMessages?: boolean
    language?: boolean
    timezone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserSettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "emailNotifications" | "pushNotifications" | "profileVisibility" | "showOnlineStatus" | "allowFriendRequests" | "allowDirectMessages" | "language" | "timezone" | "createdAt" | "updatedAt", ExtArgs["result"]["userSettings"]>
  export type UserSettingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSettingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSettingsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSettings"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      emailNotifications: boolean
      pushNotifications: boolean
      profileVisibility: string
      showOnlineStatus: boolean
      allowFriendRequests: boolean
      allowDirectMessages: boolean
      language: string
      timezone: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userSettings"]>
    composites: {}
  }

  type UserSettingsGetPayload<S extends boolean | null | undefined | UserSettingsDefaultArgs> = $Result.GetResult<Prisma.$UserSettingsPayload, S>

  type UserSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSettingsCountAggregateInputType | true
    }

  export interface UserSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSettings'], meta: { name: 'UserSettings' } }
    /**
     * Find zero or one UserSettings that matches the filter.
     * @param {UserSettingsFindUniqueArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSettingsFindUniqueArgs>(args: SelectSubset<T, UserSettingsFindUniqueArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSettings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSettingsFindUniqueOrThrowArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindFirstArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSettingsFindFirstArgs>(args?: SelectSubset<T, UserSettingsFindFirstArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindFirstOrThrowArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSettings
     * const userSettings = await prisma.userSettings.findMany()
     * 
     * // Get first 10 UserSettings
     * const userSettings = await prisma.userSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSettingsWithIdOnly = await prisma.userSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSettingsFindManyArgs>(args?: SelectSubset<T, UserSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSettings.
     * @param {UserSettingsCreateArgs} args - Arguments to create a UserSettings.
     * @example
     * // Create one UserSettings
     * const UserSettings = await prisma.userSettings.create({
     *   data: {
     *     // ... data to create a UserSettings
     *   }
     * })
     * 
     */
    create<T extends UserSettingsCreateArgs>(args: SelectSubset<T, UserSettingsCreateArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSettings.
     * @param {UserSettingsCreateManyArgs} args - Arguments to create many UserSettings.
     * @example
     * // Create many UserSettings
     * const userSettings = await prisma.userSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSettingsCreateManyArgs>(args?: SelectSubset<T, UserSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSettings and returns the data saved in the database.
     * @param {UserSettingsCreateManyAndReturnArgs} args - Arguments to create many UserSettings.
     * @example
     * // Create many UserSettings
     * const userSettings = await prisma.userSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSettings and only return the `id`
     * const userSettingsWithIdOnly = await prisma.userSettings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSettings.
     * @param {UserSettingsDeleteArgs} args - Arguments to delete one UserSettings.
     * @example
     * // Delete one UserSettings
     * const UserSettings = await prisma.userSettings.delete({
     *   where: {
     *     // ... filter to delete one UserSettings
     *   }
     * })
     * 
     */
    delete<T extends UserSettingsDeleteArgs>(args: SelectSubset<T, UserSettingsDeleteArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSettings.
     * @param {UserSettingsUpdateArgs} args - Arguments to update one UserSettings.
     * @example
     * // Update one UserSettings
     * const userSettings = await prisma.userSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSettingsUpdateArgs>(args: SelectSubset<T, UserSettingsUpdateArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSettings.
     * @param {UserSettingsDeleteManyArgs} args - Arguments to filter UserSettings to delete.
     * @example
     * // Delete a few UserSettings
     * const { count } = await prisma.userSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSettingsDeleteManyArgs>(args?: SelectSubset<T, UserSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSettings
     * const userSettings = await prisma.userSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSettingsUpdateManyArgs>(args: SelectSubset<T, UserSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSettings and returns the data updated in the database.
     * @param {UserSettingsUpdateManyAndReturnArgs} args - Arguments to update many UserSettings.
     * @example
     * // Update many UserSettings
     * const userSettings = await prisma.userSettings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSettings and only return the `id`
     * const userSettingsWithIdOnly = await prisma.userSettings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSettings.
     * @param {UserSettingsUpsertArgs} args - Arguments to update or create a UserSettings.
     * @example
     * // Update or create a UserSettings
     * const userSettings = await prisma.userSettings.upsert({
     *   create: {
     *     // ... data to create a UserSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSettings we want to update
     *   }
     * })
     */
    upsert<T extends UserSettingsUpsertArgs>(args: SelectSubset<T, UserSettingsUpsertArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsCountArgs} args - Arguments to filter UserSettings to count.
     * @example
     * // Count the number of UserSettings
     * const count = await prisma.userSettings.count({
     *   where: {
     *     // ... the filter for the UserSettings we want to count
     *   }
     * })
    **/
    count<T extends UserSettingsCountArgs>(
      args?: Subset<T, UserSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSettingsAggregateArgs>(args: Subset<T, UserSettingsAggregateArgs>): Prisma.PrismaPromise<GetUserSettingsAggregateType<T>>

    /**
     * Group by UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSettingsGroupByArgs['orderBy'] }
        : { orderBy?: UserSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSettings model
   */
  readonly fields: UserSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSettings model
   */
  interface UserSettingsFieldRefs {
    readonly id: FieldRef<"UserSettings", 'String'>
    readonly userId: FieldRef<"UserSettings", 'String'>
    readonly emailNotifications: FieldRef<"UserSettings", 'Boolean'>
    readonly pushNotifications: FieldRef<"UserSettings", 'Boolean'>
    readonly profileVisibility: FieldRef<"UserSettings", 'String'>
    readonly showOnlineStatus: FieldRef<"UserSettings", 'Boolean'>
    readonly allowFriendRequests: FieldRef<"UserSettings", 'Boolean'>
    readonly allowDirectMessages: FieldRef<"UserSettings", 'Boolean'>
    readonly language: FieldRef<"UserSettings", 'String'>
    readonly timezone: FieldRef<"UserSettings", 'String'>
    readonly createdAt: FieldRef<"UserSettings", 'DateTime'>
    readonly updatedAt: FieldRef<"UserSettings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserSettings findUnique
   */
  export type UserSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings findUniqueOrThrow
   */
  export type UserSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings findFirst
   */
  export type UserSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSettings.
     */
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * UserSettings findFirstOrThrow
   */
  export type UserSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSettings.
     */
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * UserSettings findMany
   */
  export type UserSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * UserSettings create
   */
  export type UserSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSettings.
     */
    data: XOR<UserSettingsCreateInput, UserSettingsUncheckedCreateInput>
  }

  /**
   * UserSettings createMany
   */
  export type UserSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSettings.
     */
    data: UserSettingsCreateManyInput | UserSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSettings createManyAndReturn
   */
  export type UserSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * The data used to create many UserSettings.
     */
    data: UserSettingsCreateManyInput | UserSettingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSettings update
   */
  export type UserSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSettings.
     */
    data: XOR<UserSettingsUpdateInput, UserSettingsUncheckedUpdateInput>
    /**
     * Choose, which UserSettings to update.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings updateMany
   */
  export type UserSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSettings.
     */
    data: XOR<UserSettingsUpdateManyMutationInput, UserSettingsUncheckedUpdateManyInput>
    /**
     * Filter which UserSettings to update
     */
    where?: UserSettingsWhereInput
    /**
     * Limit how many UserSettings to update.
     */
    limit?: number
  }

  /**
   * UserSettings updateManyAndReturn
   */
  export type UserSettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * The data used to update UserSettings.
     */
    data: XOR<UserSettingsUpdateManyMutationInput, UserSettingsUncheckedUpdateManyInput>
    /**
     * Filter which UserSettings to update
     */
    where?: UserSettingsWhereInput
    /**
     * Limit how many UserSettings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSettings upsert
   */
  export type UserSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSettings to update in case it exists.
     */
    where: UserSettingsWhereUniqueInput
    /**
     * In case the UserSettings found by the `where` argument doesn't exist, create a new UserSettings with this data.
     */
    create: XOR<UserSettingsCreateInput, UserSettingsUncheckedCreateInput>
    /**
     * In case the UserSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSettingsUpdateInput, UserSettingsUncheckedUpdateInput>
  }

  /**
   * UserSettings delete
   */
  export type UserSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter which UserSettings to delete.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings deleteMany
   */
  export type UserSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSettings to delete
     */
    where?: UserSettingsWhereInput
    /**
     * Limit how many UserSettings to delete.
     */
    limit?: number
  }

  /**
   * UserSettings without action
   */
  export type UserSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
  }


  /**
   * Model MatchmakingPreference
   */

  export type AggregateMatchmakingPreference = {
    _count: MatchmakingPreferenceCountAggregateOutputType | null
    _avg: MatchmakingPreferenceAvgAggregateOutputType | null
    _sum: MatchmakingPreferenceSumAggregateOutputType | null
    _min: MatchmakingPreferenceMinAggregateOutputType | null
    _max: MatchmakingPreferenceMaxAggregateOutputType | null
  }

  export type MatchmakingPreferenceAvgAggregateOutputType = {
    powerLevelMin: number | null
    powerLevelMax: number | null
    maxDistance: number | null
  }

  export type MatchmakingPreferenceSumAggregateOutputType = {
    powerLevelMin: number | null
    powerLevelMax: number | null
    maxDistance: number | null
  }

  export type MatchmakingPreferenceMinAggregateOutputType = {
    id: string | null
    userId: string | null
    powerLevelMin: number | null
    powerLevelMax: number | null
    playstyle: string | null
    location: string | null
    onlineOnly: boolean | null
    availability: string | null
    language: string | null
    maxDistance: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MatchmakingPreferenceMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    powerLevelMin: number | null
    powerLevelMax: number | null
    playstyle: string | null
    location: string | null
    onlineOnly: boolean | null
    availability: string | null
    language: string | null
    maxDistance: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MatchmakingPreferenceCountAggregateOutputType = {
    id: number
    userId: number
    selectedGames: number
    selectedFormats: number
    powerLevelMin: number
    powerLevelMax: number
    playstyle: number
    location: number
    onlineOnly: number
    availability: number
    language: number
    maxDistance: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MatchmakingPreferenceAvgAggregateInputType = {
    powerLevelMin?: true
    powerLevelMax?: true
    maxDistance?: true
  }

  export type MatchmakingPreferenceSumAggregateInputType = {
    powerLevelMin?: true
    powerLevelMax?: true
    maxDistance?: true
  }

  export type MatchmakingPreferenceMinAggregateInputType = {
    id?: true
    userId?: true
    powerLevelMin?: true
    powerLevelMax?: true
    playstyle?: true
    location?: true
    onlineOnly?: true
    availability?: true
    language?: true
    maxDistance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MatchmakingPreferenceMaxAggregateInputType = {
    id?: true
    userId?: true
    powerLevelMin?: true
    powerLevelMax?: true
    playstyle?: true
    location?: true
    onlineOnly?: true
    availability?: true
    language?: true
    maxDistance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MatchmakingPreferenceCountAggregateInputType = {
    id?: true
    userId?: true
    selectedGames?: true
    selectedFormats?: true
    powerLevelMin?: true
    powerLevelMax?: true
    playstyle?: true
    location?: true
    onlineOnly?: true
    availability?: true
    language?: true
    maxDistance?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MatchmakingPreferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchmakingPreference to aggregate.
     */
    where?: MatchmakingPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchmakingPreferences to fetch.
     */
    orderBy?: MatchmakingPreferenceOrderByWithRelationInput | MatchmakingPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchmakingPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchmakingPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchmakingPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MatchmakingPreferences
    **/
    _count?: true | MatchmakingPreferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchmakingPreferenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchmakingPreferenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchmakingPreferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchmakingPreferenceMaxAggregateInputType
  }

  export type GetMatchmakingPreferenceAggregateType<T extends MatchmakingPreferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateMatchmakingPreference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatchmakingPreference[P]>
      : GetScalarType<T[P], AggregateMatchmakingPreference[P]>
  }




  export type MatchmakingPreferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchmakingPreferenceWhereInput
    orderBy?: MatchmakingPreferenceOrderByWithAggregationInput | MatchmakingPreferenceOrderByWithAggregationInput[]
    by: MatchmakingPreferenceScalarFieldEnum[] | MatchmakingPreferenceScalarFieldEnum
    having?: MatchmakingPreferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchmakingPreferenceCountAggregateInputType | true
    _avg?: MatchmakingPreferenceAvgAggregateInputType
    _sum?: MatchmakingPreferenceSumAggregateInputType
    _min?: MatchmakingPreferenceMinAggregateInputType
    _max?: MatchmakingPreferenceMaxAggregateInputType
  }

  export type MatchmakingPreferenceGroupByOutputType = {
    id: string
    userId: string
    selectedGames: JsonValue
    selectedFormats: JsonValue
    powerLevelMin: number
    powerLevelMax: number
    playstyle: string
    location: string | null
    onlineOnly: boolean
    availability: string
    language: string
    maxDistance: number
    createdAt: Date
    updatedAt: Date
    _count: MatchmakingPreferenceCountAggregateOutputType | null
    _avg: MatchmakingPreferenceAvgAggregateOutputType | null
    _sum: MatchmakingPreferenceSumAggregateOutputType | null
    _min: MatchmakingPreferenceMinAggregateOutputType | null
    _max: MatchmakingPreferenceMaxAggregateOutputType | null
  }

  type GetMatchmakingPreferenceGroupByPayload<T extends MatchmakingPreferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchmakingPreferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchmakingPreferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchmakingPreferenceGroupByOutputType[P]>
            : GetScalarType<T[P], MatchmakingPreferenceGroupByOutputType[P]>
        }
      >
    >


  export type MatchmakingPreferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    selectedGames?: boolean
    selectedFormats?: boolean
    powerLevelMin?: boolean
    powerLevelMax?: boolean
    playstyle?: boolean
    location?: boolean
    onlineOnly?: boolean
    availability?: boolean
    language?: boolean
    maxDistance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchmakingPreference"]>

  export type MatchmakingPreferenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    selectedGames?: boolean
    selectedFormats?: boolean
    powerLevelMin?: boolean
    powerLevelMax?: boolean
    playstyle?: boolean
    location?: boolean
    onlineOnly?: boolean
    availability?: boolean
    language?: boolean
    maxDistance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchmakingPreference"]>

  export type MatchmakingPreferenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    selectedGames?: boolean
    selectedFormats?: boolean
    powerLevelMin?: boolean
    powerLevelMax?: boolean
    playstyle?: boolean
    location?: boolean
    onlineOnly?: boolean
    availability?: boolean
    language?: boolean
    maxDistance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchmakingPreference"]>

  export type MatchmakingPreferenceSelectScalar = {
    id?: boolean
    userId?: boolean
    selectedGames?: boolean
    selectedFormats?: boolean
    powerLevelMin?: boolean
    powerLevelMax?: boolean
    playstyle?: boolean
    location?: boolean
    onlineOnly?: boolean
    availability?: boolean
    language?: boolean
    maxDistance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MatchmakingPreferenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "selectedGames" | "selectedFormats" | "powerLevelMin" | "powerLevelMax" | "playstyle" | "location" | "onlineOnly" | "availability" | "language" | "maxDistance" | "createdAt" | "updatedAt", ExtArgs["result"]["matchmakingPreference"]>
  export type MatchmakingPreferenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MatchmakingPreferenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MatchmakingPreferenceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MatchmakingPreferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MatchmakingPreference"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      selectedGames: Prisma.JsonValue
      selectedFormats: Prisma.JsonValue
      powerLevelMin: number
      powerLevelMax: number
      playstyle: string
      location: string | null
      onlineOnly: boolean
      availability: string
      language: string
      maxDistance: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["matchmakingPreference"]>
    composites: {}
  }

  type MatchmakingPreferenceGetPayload<S extends boolean | null | undefined | MatchmakingPreferenceDefaultArgs> = $Result.GetResult<Prisma.$MatchmakingPreferencePayload, S>

  type MatchmakingPreferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MatchmakingPreferenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MatchmakingPreferenceCountAggregateInputType | true
    }

  export interface MatchmakingPreferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MatchmakingPreference'], meta: { name: 'MatchmakingPreference' } }
    /**
     * Find zero or one MatchmakingPreference that matches the filter.
     * @param {MatchmakingPreferenceFindUniqueArgs} args - Arguments to find a MatchmakingPreference
     * @example
     * // Get one MatchmakingPreference
     * const matchmakingPreference = await prisma.matchmakingPreference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchmakingPreferenceFindUniqueArgs>(args: SelectSubset<T, MatchmakingPreferenceFindUniqueArgs<ExtArgs>>): Prisma__MatchmakingPreferenceClient<$Result.GetResult<Prisma.$MatchmakingPreferencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MatchmakingPreference that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MatchmakingPreferenceFindUniqueOrThrowArgs} args - Arguments to find a MatchmakingPreference
     * @example
     * // Get one MatchmakingPreference
     * const matchmakingPreference = await prisma.matchmakingPreference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchmakingPreferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchmakingPreferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchmakingPreferenceClient<$Result.GetResult<Prisma.$MatchmakingPreferencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MatchmakingPreference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchmakingPreferenceFindFirstArgs} args - Arguments to find a MatchmakingPreference
     * @example
     * // Get one MatchmakingPreference
     * const matchmakingPreference = await prisma.matchmakingPreference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchmakingPreferenceFindFirstArgs>(args?: SelectSubset<T, MatchmakingPreferenceFindFirstArgs<ExtArgs>>): Prisma__MatchmakingPreferenceClient<$Result.GetResult<Prisma.$MatchmakingPreferencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MatchmakingPreference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchmakingPreferenceFindFirstOrThrowArgs} args - Arguments to find a MatchmakingPreference
     * @example
     * // Get one MatchmakingPreference
     * const matchmakingPreference = await prisma.matchmakingPreference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchmakingPreferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchmakingPreferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchmakingPreferenceClient<$Result.GetResult<Prisma.$MatchmakingPreferencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MatchmakingPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchmakingPreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MatchmakingPreferences
     * const matchmakingPreferences = await prisma.matchmakingPreference.findMany()
     * 
     * // Get first 10 MatchmakingPreferences
     * const matchmakingPreferences = await prisma.matchmakingPreference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchmakingPreferenceWithIdOnly = await prisma.matchmakingPreference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchmakingPreferenceFindManyArgs>(args?: SelectSubset<T, MatchmakingPreferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchmakingPreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MatchmakingPreference.
     * @param {MatchmakingPreferenceCreateArgs} args - Arguments to create a MatchmakingPreference.
     * @example
     * // Create one MatchmakingPreference
     * const MatchmakingPreference = await prisma.matchmakingPreference.create({
     *   data: {
     *     // ... data to create a MatchmakingPreference
     *   }
     * })
     * 
     */
    create<T extends MatchmakingPreferenceCreateArgs>(args: SelectSubset<T, MatchmakingPreferenceCreateArgs<ExtArgs>>): Prisma__MatchmakingPreferenceClient<$Result.GetResult<Prisma.$MatchmakingPreferencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MatchmakingPreferences.
     * @param {MatchmakingPreferenceCreateManyArgs} args - Arguments to create many MatchmakingPreferences.
     * @example
     * // Create many MatchmakingPreferences
     * const matchmakingPreference = await prisma.matchmakingPreference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchmakingPreferenceCreateManyArgs>(args?: SelectSubset<T, MatchmakingPreferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MatchmakingPreferences and returns the data saved in the database.
     * @param {MatchmakingPreferenceCreateManyAndReturnArgs} args - Arguments to create many MatchmakingPreferences.
     * @example
     * // Create many MatchmakingPreferences
     * const matchmakingPreference = await prisma.matchmakingPreference.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MatchmakingPreferences and only return the `id`
     * const matchmakingPreferenceWithIdOnly = await prisma.matchmakingPreference.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchmakingPreferenceCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchmakingPreferenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchmakingPreferencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MatchmakingPreference.
     * @param {MatchmakingPreferenceDeleteArgs} args - Arguments to delete one MatchmakingPreference.
     * @example
     * // Delete one MatchmakingPreference
     * const MatchmakingPreference = await prisma.matchmakingPreference.delete({
     *   where: {
     *     // ... filter to delete one MatchmakingPreference
     *   }
     * })
     * 
     */
    delete<T extends MatchmakingPreferenceDeleteArgs>(args: SelectSubset<T, MatchmakingPreferenceDeleteArgs<ExtArgs>>): Prisma__MatchmakingPreferenceClient<$Result.GetResult<Prisma.$MatchmakingPreferencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MatchmakingPreference.
     * @param {MatchmakingPreferenceUpdateArgs} args - Arguments to update one MatchmakingPreference.
     * @example
     * // Update one MatchmakingPreference
     * const matchmakingPreference = await prisma.matchmakingPreference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchmakingPreferenceUpdateArgs>(args: SelectSubset<T, MatchmakingPreferenceUpdateArgs<ExtArgs>>): Prisma__MatchmakingPreferenceClient<$Result.GetResult<Prisma.$MatchmakingPreferencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MatchmakingPreferences.
     * @param {MatchmakingPreferenceDeleteManyArgs} args - Arguments to filter MatchmakingPreferences to delete.
     * @example
     * // Delete a few MatchmakingPreferences
     * const { count } = await prisma.matchmakingPreference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchmakingPreferenceDeleteManyArgs>(args?: SelectSubset<T, MatchmakingPreferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchmakingPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchmakingPreferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MatchmakingPreferences
     * const matchmakingPreference = await prisma.matchmakingPreference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchmakingPreferenceUpdateManyArgs>(args: SelectSubset<T, MatchmakingPreferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchmakingPreferences and returns the data updated in the database.
     * @param {MatchmakingPreferenceUpdateManyAndReturnArgs} args - Arguments to update many MatchmakingPreferences.
     * @example
     * // Update many MatchmakingPreferences
     * const matchmakingPreference = await prisma.matchmakingPreference.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MatchmakingPreferences and only return the `id`
     * const matchmakingPreferenceWithIdOnly = await prisma.matchmakingPreference.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MatchmakingPreferenceUpdateManyAndReturnArgs>(args: SelectSubset<T, MatchmakingPreferenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchmakingPreferencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MatchmakingPreference.
     * @param {MatchmakingPreferenceUpsertArgs} args - Arguments to update or create a MatchmakingPreference.
     * @example
     * // Update or create a MatchmakingPreference
     * const matchmakingPreference = await prisma.matchmakingPreference.upsert({
     *   create: {
     *     // ... data to create a MatchmakingPreference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MatchmakingPreference we want to update
     *   }
     * })
     */
    upsert<T extends MatchmakingPreferenceUpsertArgs>(args: SelectSubset<T, MatchmakingPreferenceUpsertArgs<ExtArgs>>): Prisma__MatchmakingPreferenceClient<$Result.GetResult<Prisma.$MatchmakingPreferencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MatchmakingPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchmakingPreferenceCountArgs} args - Arguments to filter MatchmakingPreferences to count.
     * @example
     * // Count the number of MatchmakingPreferences
     * const count = await prisma.matchmakingPreference.count({
     *   where: {
     *     // ... the filter for the MatchmakingPreferences we want to count
     *   }
     * })
    **/
    count<T extends MatchmakingPreferenceCountArgs>(
      args?: Subset<T, MatchmakingPreferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchmakingPreferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MatchmakingPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchmakingPreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchmakingPreferenceAggregateArgs>(args: Subset<T, MatchmakingPreferenceAggregateArgs>): Prisma.PrismaPromise<GetMatchmakingPreferenceAggregateType<T>>

    /**
     * Group by MatchmakingPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchmakingPreferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchmakingPreferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchmakingPreferenceGroupByArgs['orderBy'] }
        : { orderBy?: MatchmakingPreferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchmakingPreferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchmakingPreferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MatchmakingPreference model
   */
  readonly fields: MatchmakingPreferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MatchmakingPreference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchmakingPreferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MatchmakingPreference model
   */
  interface MatchmakingPreferenceFieldRefs {
    readonly id: FieldRef<"MatchmakingPreference", 'String'>
    readonly userId: FieldRef<"MatchmakingPreference", 'String'>
    readonly selectedGames: FieldRef<"MatchmakingPreference", 'Json'>
    readonly selectedFormats: FieldRef<"MatchmakingPreference", 'Json'>
    readonly powerLevelMin: FieldRef<"MatchmakingPreference", 'Int'>
    readonly powerLevelMax: FieldRef<"MatchmakingPreference", 'Int'>
    readonly playstyle: FieldRef<"MatchmakingPreference", 'String'>
    readonly location: FieldRef<"MatchmakingPreference", 'String'>
    readonly onlineOnly: FieldRef<"MatchmakingPreference", 'Boolean'>
    readonly availability: FieldRef<"MatchmakingPreference", 'String'>
    readonly language: FieldRef<"MatchmakingPreference", 'String'>
    readonly maxDistance: FieldRef<"MatchmakingPreference", 'Int'>
    readonly createdAt: FieldRef<"MatchmakingPreference", 'DateTime'>
    readonly updatedAt: FieldRef<"MatchmakingPreference", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MatchmakingPreference findUnique
   */
  export type MatchmakingPreferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingPreference
     */
    select?: MatchmakingPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchmakingPreference
     */
    omit?: MatchmakingPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchmakingPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which MatchmakingPreference to fetch.
     */
    where: MatchmakingPreferenceWhereUniqueInput
  }

  /**
   * MatchmakingPreference findUniqueOrThrow
   */
  export type MatchmakingPreferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingPreference
     */
    select?: MatchmakingPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchmakingPreference
     */
    omit?: MatchmakingPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchmakingPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which MatchmakingPreference to fetch.
     */
    where: MatchmakingPreferenceWhereUniqueInput
  }

  /**
   * MatchmakingPreference findFirst
   */
  export type MatchmakingPreferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingPreference
     */
    select?: MatchmakingPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchmakingPreference
     */
    omit?: MatchmakingPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchmakingPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which MatchmakingPreference to fetch.
     */
    where?: MatchmakingPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchmakingPreferences to fetch.
     */
    orderBy?: MatchmakingPreferenceOrderByWithRelationInput | MatchmakingPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchmakingPreferences.
     */
    cursor?: MatchmakingPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchmakingPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchmakingPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchmakingPreferences.
     */
    distinct?: MatchmakingPreferenceScalarFieldEnum | MatchmakingPreferenceScalarFieldEnum[]
  }

  /**
   * MatchmakingPreference findFirstOrThrow
   */
  export type MatchmakingPreferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingPreference
     */
    select?: MatchmakingPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchmakingPreference
     */
    omit?: MatchmakingPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchmakingPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which MatchmakingPreference to fetch.
     */
    where?: MatchmakingPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchmakingPreferences to fetch.
     */
    orderBy?: MatchmakingPreferenceOrderByWithRelationInput | MatchmakingPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchmakingPreferences.
     */
    cursor?: MatchmakingPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchmakingPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchmakingPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchmakingPreferences.
     */
    distinct?: MatchmakingPreferenceScalarFieldEnum | MatchmakingPreferenceScalarFieldEnum[]
  }

  /**
   * MatchmakingPreference findMany
   */
  export type MatchmakingPreferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingPreference
     */
    select?: MatchmakingPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchmakingPreference
     */
    omit?: MatchmakingPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchmakingPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which MatchmakingPreferences to fetch.
     */
    where?: MatchmakingPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchmakingPreferences to fetch.
     */
    orderBy?: MatchmakingPreferenceOrderByWithRelationInput | MatchmakingPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MatchmakingPreferences.
     */
    cursor?: MatchmakingPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchmakingPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchmakingPreferences.
     */
    skip?: number
    distinct?: MatchmakingPreferenceScalarFieldEnum | MatchmakingPreferenceScalarFieldEnum[]
  }

  /**
   * MatchmakingPreference create
   */
  export type MatchmakingPreferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingPreference
     */
    select?: MatchmakingPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchmakingPreference
     */
    omit?: MatchmakingPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchmakingPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to create a MatchmakingPreference.
     */
    data: XOR<MatchmakingPreferenceCreateInput, MatchmakingPreferenceUncheckedCreateInput>
  }

  /**
   * MatchmakingPreference createMany
   */
  export type MatchmakingPreferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MatchmakingPreferences.
     */
    data: MatchmakingPreferenceCreateManyInput | MatchmakingPreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MatchmakingPreference createManyAndReturn
   */
  export type MatchmakingPreferenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingPreference
     */
    select?: MatchmakingPreferenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MatchmakingPreference
     */
    omit?: MatchmakingPreferenceOmit<ExtArgs> | null
    /**
     * The data used to create many MatchmakingPreferences.
     */
    data: MatchmakingPreferenceCreateManyInput | MatchmakingPreferenceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchmakingPreferenceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MatchmakingPreference update
   */
  export type MatchmakingPreferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingPreference
     */
    select?: MatchmakingPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchmakingPreference
     */
    omit?: MatchmakingPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchmakingPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to update a MatchmakingPreference.
     */
    data: XOR<MatchmakingPreferenceUpdateInput, MatchmakingPreferenceUncheckedUpdateInput>
    /**
     * Choose, which MatchmakingPreference to update.
     */
    where: MatchmakingPreferenceWhereUniqueInput
  }

  /**
   * MatchmakingPreference updateMany
   */
  export type MatchmakingPreferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MatchmakingPreferences.
     */
    data: XOR<MatchmakingPreferenceUpdateManyMutationInput, MatchmakingPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which MatchmakingPreferences to update
     */
    where?: MatchmakingPreferenceWhereInput
    /**
     * Limit how many MatchmakingPreferences to update.
     */
    limit?: number
  }

  /**
   * MatchmakingPreference updateManyAndReturn
   */
  export type MatchmakingPreferenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingPreference
     */
    select?: MatchmakingPreferenceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MatchmakingPreference
     */
    omit?: MatchmakingPreferenceOmit<ExtArgs> | null
    /**
     * The data used to update MatchmakingPreferences.
     */
    data: XOR<MatchmakingPreferenceUpdateManyMutationInput, MatchmakingPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which MatchmakingPreferences to update
     */
    where?: MatchmakingPreferenceWhereInput
    /**
     * Limit how many MatchmakingPreferences to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchmakingPreferenceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MatchmakingPreference upsert
   */
  export type MatchmakingPreferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingPreference
     */
    select?: MatchmakingPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchmakingPreference
     */
    omit?: MatchmakingPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchmakingPreferenceInclude<ExtArgs> | null
    /**
     * The filter to search for the MatchmakingPreference to update in case it exists.
     */
    where: MatchmakingPreferenceWhereUniqueInput
    /**
     * In case the MatchmakingPreference found by the `where` argument doesn't exist, create a new MatchmakingPreference with this data.
     */
    create: XOR<MatchmakingPreferenceCreateInput, MatchmakingPreferenceUncheckedCreateInput>
    /**
     * In case the MatchmakingPreference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchmakingPreferenceUpdateInput, MatchmakingPreferenceUncheckedUpdateInput>
  }

  /**
   * MatchmakingPreference delete
   */
  export type MatchmakingPreferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingPreference
     */
    select?: MatchmakingPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchmakingPreference
     */
    omit?: MatchmakingPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchmakingPreferenceInclude<ExtArgs> | null
    /**
     * Filter which MatchmakingPreference to delete.
     */
    where: MatchmakingPreferenceWhereUniqueInput
  }

  /**
   * MatchmakingPreference deleteMany
   */
  export type MatchmakingPreferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchmakingPreferences to delete
     */
    where?: MatchmakingPreferenceWhereInput
    /**
     * Limit how many MatchmakingPreferences to delete.
     */
    limit?: number
  }

  /**
   * MatchmakingPreference without action
   */
  export type MatchmakingPreferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingPreference
     */
    select?: MatchmakingPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchmakingPreference
     */
    omit?: MatchmakingPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchmakingPreferenceInclude<ExtArgs> | null
  }


  /**
   * Model ForumPost
   */

  export type AggregateForumPost = {
    _count: ForumPostCountAggregateOutputType | null
    _avg: ForumPostAvgAggregateOutputType | null
    _sum: ForumPostSumAggregateOutputType | null
    _min: ForumPostMinAggregateOutputType | null
    _max: ForumPostMaxAggregateOutputType | null
  }

  export type ForumPostAvgAggregateOutputType = {
    viewCount: number | null
    likeCount: number | null
    replyCount: number | null
  }

  export type ForumPostSumAggregateOutputType = {
    viewCount: number | null
    likeCount: number | null
    replyCount: number | null
  }

  export type ForumPostMinAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    authorId: string | null
    communityId: string | null
    category: string | null
    isPinned: boolean | null
    isLocked: boolean | null
    viewCount: number | null
    likeCount: number | null
    replyCount: number | null
    lastReplyAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ForumPostMaxAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    authorId: string | null
    communityId: string | null
    category: string | null
    isPinned: boolean | null
    isLocked: boolean | null
    viewCount: number | null
    likeCount: number | null
    replyCount: number | null
    lastReplyAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ForumPostCountAggregateOutputType = {
    id: number
    title: number
    content: number
    authorId: number
    communityId: number
    category: number
    isPinned: number
    isLocked: number
    viewCount: number
    likeCount: number
    replyCount: number
    lastReplyAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ForumPostAvgAggregateInputType = {
    viewCount?: true
    likeCount?: true
    replyCount?: true
  }

  export type ForumPostSumAggregateInputType = {
    viewCount?: true
    likeCount?: true
    replyCount?: true
  }

  export type ForumPostMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    authorId?: true
    communityId?: true
    category?: true
    isPinned?: true
    isLocked?: true
    viewCount?: true
    likeCount?: true
    replyCount?: true
    lastReplyAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ForumPostMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    authorId?: true
    communityId?: true
    category?: true
    isPinned?: true
    isLocked?: true
    viewCount?: true
    likeCount?: true
    replyCount?: true
    lastReplyAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ForumPostCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    authorId?: true
    communityId?: true
    category?: true
    isPinned?: true
    isLocked?: true
    viewCount?: true
    likeCount?: true
    replyCount?: true
    lastReplyAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ForumPostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumPost to aggregate.
     */
    where?: ForumPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumPosts to fetch.
     */
    orderBy?: ForumPostOrderByWithRelationInput | ForumPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ForumPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ForumPosts
    **/
    _count?: true | ForumPostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ForumPostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ForumPostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ForumPostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ForumPostMaxAggregateInputType
  }

  export type GetForumPostAggregateType<T extends ForumPostAggregateArgs> = {
        [P in keyof T & keyof AggregateForumPost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForumPost[P]>
      : GetScalarType<T[P], AggregateForumPost[P]>
  }




  export type ForumPostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumPostWhereInput
    orderBy?: ForumPostOrderByWithAggregationInput | ForumPostOrderByWithAggregationInput[]
    by: ForumPostScalarFieldEnum[] | ForumPostScalarFieldEnum
    having?: ForumPostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ForumPostCountAggregateInputType | true
    _avg?: ForumPostAvgAggregateInputType
    _sum?: ForumPostSumAggregateInputType
    _min?: ForumPostMinAggregateInputType
    _max?: ForumPostMaxAggregateInputType
  }

  export type ForumPostGroupByOutputType = {
    id: string
    title: string
    content: string
    authorId: string
    communityId: string
    category: string
    isPinned: boolean
    isLocked: boolean
    viewCount: number
    likeCount: number
    replyCount: number
    lastReplyAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ForumPostCountAggregateOutputType | null
    _avg: ForumPostAvgAggregateOutputType | null
    _sum: ForumPostSumAggregateOutputType | null
    _min: ForumPostMinAggregateOutputType | null
    _max: ForumPostMaxAggregateOutputType | null
  }

  type GetForumPostGroupByPayload<T extends ForumPostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ForumPostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ForumPostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ForumPostGroupByOutputType[P]>
            : GetScalarType<T[P], ForumPostGroupByOutputType[P]>
        }
      >
    >


  export type ForumPostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    authorId?: boolean
    communityId?: boolean
    category?: boolean
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: boolean
    likeCount?: boolean
    replyCount?: boolean
    lastReplyAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
    replies?: boolean | ForumPost$repliesArgs<ExtArgs>
    likes?: boolean | ForumPost$likesArgs<ExtArgs>
    _count?: boolean | ForumPostCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumPost"]>

  export type ForumPostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    authorId?: boolean
    communityId?: boolean
    category?: boolean
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: boolean
    likeCount?: boolean
    replyCount?: boolean
    lastReplyAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumPost"]>

  export type ForumPostSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    authorId?: boolean
    communityId?: boolean
    category?: boolean
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: boolean
    likeCount?: boolean
    replyCount?: boolean
    lastReplyAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumPost"]>

  export type ForumPostSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    authorId?: boolean
    communityId?: boolean
    category?: boolean
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: boolean
    likeCount?: boolean
    replyCount?: boolean
    lastReplyAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ForumPostOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "content" | "authorId" | "communityId" | "category" | "isPinned" | "isLocked" | "viewCount" | "likeCount" | "replyCount" | "lastReplyAt" | "createdAt" | "updatedAt", ExtArgs["result"]["forumPost"]>
  export type ForumPostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
    replies?: boolean | ForumPost$repliesArgs<ExtArgs>
    likes?: boolean | ForumPost$likesArgs<ExtArgs>
    _count?: boolean | ForumPostCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ForumPostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
  }
  export type ForumPostIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
  }

  export type $ForumPostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ForumPost"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      community: Prisma.$CommunityPayload<ExtArgs>
      replies: Prisma.$ForumReplyPayload<ExtArgs>[]
      likes: Prisma.$ForumPostLikePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      content: string
      authorId: string
      communityId: string
      category: string
      isPinned: boolean
      isLocked: boolean
      viewCount: number
      likeCount: number
      replyCount: number
      lastReplyAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["forumPost"]>
    composites: {}
  }

  type ForumPostGetPayload<S extends boolean | null | undefined | ForumPostDefaultArgs> = $Result.GetResult<Prisma.$ForumPostPayload, S>

  type ForumPostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ForumPostFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ForumPostCountAggregateInputType | true
    }

  export interface ForumPostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ForumPost'], meta: { name: 'ForumPost' } }
    /**
     * Find zero or one ForumPost that matches the filter.
     * @param {ForumPostFindUniqueArgs} args - Arguments to find a ForumPost
     * @example
     * // Get one ForumPost
     * const forumPost = await prisma.forumPost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ForumPostFindUniqueArgs>(args: SelectSubset<T, ForumPostFindUniqueArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ForumPost that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ForumPostFindUniqueOrThrowArgs} args - Arguments to find a ForumPost
     * @example
     * // Get one ForumPost
     * const forumPost = await prisma.forumPost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ForumPostFindUniqueOrThrowArgs>(args: SelectSubset<T, ForumPostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumPost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostFindFirstArgs} args - Arguments to find a ForumPost
     * @example
     * // Get one ForumPost
     * const forumPost = await prisma.forumPost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ForumPostFindFirstArgs>(args?: SelectSubset<T, ForumPostFindFirstArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumPost that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostFindFirstOrThrowArgs} args - Arguments to find a ForumPost
     * @example
     * // Get one ForumPost
     * const forumPost = await prisma.forumPost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ForumPostFindFirstOrThrowArgs>(args?: SelectSubset<T, ForumPostFindFirstOrThrowArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ForumPosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ForumPosts
     * const forumPosts = await prisma.forumPost.findMany()
     * 
     * // Get first 10 ForumPosts
     * const forumPosts = await prisma.forumPost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const forumPostWithIdOnly = await prisma.forumPost.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ForumPostFindManyArgs>(args?: SelectSubset<T, ForumPostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ForumPost.
     * @param {ForumPostCreateArgs} args - Arguments to create a ForumPost.
     * @example
     * // Create one ForumPost
     * const ForumPost = await prisma.forumPost.create({
     *   data: {
     *     // ... data to create a ForumPost
     *   }
     * })
     * 
     */
    create<T extends ForumPostCreateArgs>(args: SelectSubset<T, ForumPostCreateArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ForumPosts.
     * @param {ForumPostCreateManyArgs} args - Arguments to create many ForumPosts.
     * @example
     * // Create many ForumPosts
     * const forumPost = await prisma.forumPost.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ForumPostCreateManyArgs>(args?: SelectSubset<T, ForumPostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ForumPosts and returns the data saved in the database.
     * @param {ForumPostCreateManyAndReturnArgs} args - Arguments to create many ForumPosts.
     * @example
     * // Create many ForumPosts
     * const forumPost = await prisma.forumPost.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ForumPosts and only return the `id`
     * const forumPostWithIdOnly = await prisma.forumPost.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ForumPostCreateManyAndReturnArgs>(args?: SelectSubset<T, ForumPostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ForumPost.
     * @param {ForumPostDeleteArgs} args - Arguments to delete one ForumPost.
     * @example
     * // Delete one ForumPost
     * const ForumPost = await prisma.forumPost.delete({
     *   where: {
     *     // ... filter to delete one ForumPost
     *   }
     * })
     * 
     */
    delete<T extends ForumPostDeleteArgs>(args: SelectSubset<T, ForumPostDeleteArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ForumPost.
     * @param {ForumPostUpdateArgs} args - Arguments to update one ForumPost.
     * @example
     * // Update one ForumPost
     * const forumPost = await prisma.forumPost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ForumPostUpdateArgs>(args: SelectSubset<T, ForumPostUpdateArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ForumPosts.
     * @param {ForumPostDeleteManyArgs} args - Arguments to filter ForumPosts to delete.
     * @example
     * // Delete a few ForumPosts
     * const { count } = await prisma.forumPost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ForumPostDeleteManyArgs>(args?: SelectSubset<T, ForumPostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ForumPosts
     * const forumPost = await prisma.forumPost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ForumPostUpdateManyArgs>(args: SelectSubset<T, ForumPostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumPosts and returns the data updated in the database.
     * @param {ForumPostUpdateManyAndReturnArgs} args - Arguments to update many ForumPosts.
     * @example
     * // Update many ForumPosts
     * const forumPost = await prisma.forumPost.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ForumPosts and only return the `id`
     * const forumPostWithIdOnly = await prisma.forumPost.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ForumPostUpdateManyAndReturnArgs>(args: SelectSubset<T, ForumPostUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ForumPost.
     * @param {ForumPostUpsertArgs} args - Arguments to update or create a ForumPost.
     * @example
     * // Update or create a ForumPost
     * const forumPost = await prisma.forumPost.upsert({
     *   create: {
     *     // ... data to create a ForumPost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ForumPost we want to update
     *   }
     * })
     */
    upsert<T extends ForumPostUpsertArgs>(args: SelectSubset<T, ForumPostUpsertArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ForumPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostCountArgs} args - Arguments to filter ForumPosts to count.
     * @example
     * // Count the number of ForumPosts
     * const count = await prisma.forumPost.count({
     *   where: {
     *     // ... the filter for the ForumPosts we want to count
     *   }
     * })
    **/
    count<T extends ForumPostCountArgs>(
      args?: Subset<T, ForumPostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ForumPostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ForumPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ForumPostAggregateArgs>(args: Subset<T, ForumPostAggregateArgs>): Prisma.PrismaPromise<GetForumPostAggregateType<T>>

    /**
     * Group by ForumPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ForumPostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ForumPostGroupByArgs['orderBy'] }
        : { orderBy?: ForumPostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ForumPostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetForumPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ForumPost model
   */
  readonly fields: ForumPostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ForumPost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ForumPostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    community<T extends CommunityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommunityDefaultArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    replies<T extends ForumPost$repliesArgs<ExtArgs> = {}>(args?: Subset<T, ForumPost$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumReplyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likes<T extends ForumPost$likesArgs<ExtArgs> = {}>(args?: Subset<T, ForumPost$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumPostLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ForumPost model
   */
  interface ForumPostFieldRefs {
    readonly id: FieldRef<"ForumPost", 'String'>
    readonly title: FieldRef<"ForumPost", 'String'>
    readonly content: FieldRef<"ForumPost", 'String'>
    readonly authorId: FieldRef<"ForumPost", 'String'>
    readonly communityId: FieldRef<"ForumPost", 'String'>
    readonly category: FieldRef<"ForumPost", 'String'>
    readonly isPinned: FieldRef<"ForumPost", 'Boolean'>
    readonly isLocked: FieldRef<"ForumPost", 'Boolean'>
    readonly viewCount: FieldRef<"ForumPost", 'Int'>
    readonly likeCount: FieldRef<"ForumPost", 'Int'>
    readonly replyCount: FieldRef<"ForumPost", 'Int'>
    readonly lastReplyAt: FieldRef<"ForumPost", 'DateTime'>
    readonly createdAt: FieldRef<"ForumPost", 'DateTime'>
    readonly updatedAt: FieldRef<"ForumPost", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ForumPost findUnique
   */
  export type ForumPostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    /**
     * Filter, which ForumPost to fetch.
     */
    where: ForumPostWhereUniqueInput
  }

  /**
   * ForumPost findUniqueOrThrow
   */
  export type ForumPostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    /**
     * Filter, which ForumPost to fetch.
     */
    where: ForumPostWhereUniqueInput
  }

  /**
   * ForumPost findFirst
   */
  export type ForumPostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    /**
     * Filter, which ForumPost to fetch.
     */
    where?: ForumPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumPosts to fetch.
     */
    orderBy?: ForumPostOrderByWithRelationInput | ForumPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumPosts.
     */
    cursor?: ForumPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumPosts.
     */
    distinct?: ForumPostScalarFieldEnum | ForumPostScalarFieldEnum[]
  }

  /**
   * ForumPost findFirstOrThrow
   */
  export type ForumPostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    /**
     * Filter, which ForumPost to fetch.
     */
    where?: ForumPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumPosts to fetch.
     */
    orderBy?: ForumPostOrderByWithRelationInput | ForumPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumPosts.
     */
    cursor?: ForumPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumPosts.
     */
    distinct?: ForumPostScalarFieldEnum | ForumPostScalarFieldEnum[]
  }

  /**
   * ForumPost findMany
   */
  export type ForumPostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    /**
     * Filter, which ForumPosts to fetch.
     */
    where?: ForumPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumPosts to fetch.
     */
    orderBy?: ForumPostOrderByWithRelationInput | ForumPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ForumPosts.
     */
    cursor?: ForumPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumPosts.
     */
    skip?: number
    distinct?: ForumPostScalarFieldEnum | ForumPostScalarFieldEnum[]
  }

  /**
   * ForumPost create
   */
  export type ForumPostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    /**
     * The data needed to create a ForumPost.
     */
    data: XOR<ForumPostCreateInput, ForumPostUncheckedCreateInput>
  }

  /**
   * ForumPost createMany
   */
  export type ForumPostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ForumPosts.
     */
    data: ForumPostCreateManyInput | ForumPostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ForumPost createManyAndReturn
   */
  export type ForumPostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * The data used to create many ForumPosts.
     */
    data: ForumPostCreateManyInput | ForumPostCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumPost update
   */
  export type ForumPostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    /**
     * The data needed to update a ForumPost.
     */
    data: XOR<ForumPostUpdateInput, ForumPostUncheckedUpdateInput>
    /**
     * Choose, which ForumPost to update.
     */
    where: ForumPostWhereUniqueInput
  }

  /**
   * ForumPost updateMany
   */
  export type ForumPostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ForumPosts.
     */
    data: XOR<ForumPostUpdateManyMutationInput, ForumPostUncheckedUpdateManyInput>
    /**
     * Filter which ForumPosts to update
     */
    where?: ForumPostWhereInput
    /**
     * Limit how many ForumPosts to update.
     */
    limit?: number
  }

  /**
   * ForumPost updateManyAndReturn
   */
  export type ForumPostUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * The data used to update ForumPosts.
     */
    data: XOR<ForumPostUpdateManyMutationInput, ForumPostUncheckedUpdateManyInput>
    /**
     * Filter which ForumPosts to update
     */
    where?: ForumPostWhereInput
    /**
     * Limit how many ForumPosts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumPost upsert
   */
  export type ForumPostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    /**
     * The filter to search for the ForumPost to update in case it exists.
     */
    where: ForumPostWhereUniqueInput
    /**
     * In case the ForumPost found by the `where` argument doesn't exist, create a new ForumPost with this data.
     */
    create: XOR<ForumPostCreateInput, ForumPostUncheckedCreateInput>
    /**
     * In case the ForumPost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ForumPostUpdateInput, ForumPostUncheckedUpdateInput>
  }

  /**
   * ForumPost delete
   */
  export type ForumPostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
    /**
     * Filter which ForumPost to delete.
     */
    where: ForumPostWhereUniqueInput
  }

  /**
   * ForumPost deleteMany
   */
  export type ForumPostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumPosts to delete
     */
    where?: ForumPostWhereInput
    /**
     * Limit how many ForumPosts to delete.
     */
    limit?: number
  }

  /**
   * ForumPost.replies
   */
  export type ForumPost$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReply
     */
    select?: ForumReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReply
     */
    omit?: ForumReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyInclude<ExtArgs> | null
    where?: ForumReplyWhereInput
    orderBy?: ForumReplyOrderByWithRelationInput | ForumReplyOrderByWithRelationInput[]
    cursor?: ForumReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumReplyScalarFieldEnum | ForumReplyScalarFieldEnum[]
  }

  /**
   * ForumPost.likes
   */
  export type ForumPost$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostLike
     */
    select?: ForumPostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostLike
     */
    omit?: ForumPostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostLikeInclude<ExtArgs> | null
    where?: ForumPostLikeWhereInput
    orderBy?: ForumPostLikeOrderByWithRelationInput | ForumPostLikeOrderByWithRelationInput[]
    cursor?: ForumPostLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumPostLikeScalarFieldEnum | ForumPostLikeScalarFieldEnum[]
  }

  /**
   * ForumPost without action
   */
  export type ForumPostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPost
     */
    select?: ForumPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPost
     */
    omit?: ForumPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostInclude<ExtArgs> | null
  }


  /**
   * Model ForumReply
   */

  export type AggregateForumReply = {
    _count: ForumReplyCountAggregateOutputType | null
    _avg: ForumReplyAvgAggregateOutputType | null
    _sum: ForumReplySumAggregateOutputType | null
    _min: ForumReplyMinAggregateOutputType | null
    _max: ForumReplyMaxAggregateOutputType | null
  }

  export type ForumReplyAvgAggregateOutputType = {
    likeCount: number | null
  }

  export type ForumReplySumAggregateOutputType = {
    likeCount: number | null
  }

  export type ForumReplyMinAggregateOutputType = {
    id: string | null
    postId: string | null
    authorId: string | null
    content: string | null
    parentReplyId: string | null
    likeCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ForumReplyMaxAggregateOutputType = {
    id: string | null
    postId: string | null
    authorId: string | null
    content: string | null
    parentReplyId: string | null
    likeCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ForumReplyCountAggregateOutputType = {
    id: number
    postId: number
    authorId: number
    content: number
    parentReplyId: number
    likeCount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ForumReplyAvgAggregateInputType = {
    likeCount?: true
  }

  export type ForumReplySumAggregateInputType = {
    likeCount?: true
  }

  export type ForumReplyMinAggregateInputType = {
    id?: true
    postId?: true
    authorId?: true
    content?: true
    parentReplyId?: true
    likeCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ForumReplyMaxAggregateInputType = {
    id?: true
    postId?: true
    authorId?: true
    content?: true
    parentReplyId?: true
    likeCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ForumReplyCountAggregateInputType = {
    id?: true
    postId?: true
    authorId?: true
    content?: true
    parentReplyId?: true
    likeCount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ForumReplyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumReply to aggregate.
     */
    where?: ForumReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumReplies to fetch.
     */
    orderBy?: ForumReplyOrderByWithRelationInput | ForumReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ForumReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ForumReplies
    **/
    _count?: true | ForumReplyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ForumReplyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ForumReplySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ForumReplyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ForumReplyMaxAggregateInputType
  }

  export type GetForumReplyAggregateType<T extends ForumReplyAggregateArgs> = {
        [P in keyof T & keyof AggregateForumReply]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForumReply[P]>
      : GetScalarType<T[P], AggregateForumReply[P]>
  }




  export type ForumReplyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumReplyWhereInput
    orderBy?: ForumReplyOrderByWithAggregationInput | ForumReplyOrderByWithAggregationInput[]
    by: ForumReplyScalarFieldEnum[] | ForumReplyScalarFieldEnum
    having?: ForumReplyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ForumReplyCountAggregateInputType | true
    _avg?: ForumReplyAvgAggregateInputType
    _sum?: ForumReplySumAggregateInputType
    _min?: ForumReplyMinAggregateInputType
    _max?: ForumReplyMaxAggregateInputType
  }

  export type ForumReplyGroupByOutputType = {
    id: string
    postId: string
    authorId: string
    content: string
    parentReplyId: string | null
    likeCount: number
    createdAt: Date
    updatedAt: Date
    _count: ForumReplyCountAggregateOutputType | null
    _avg: ForumReplyAvgAggregateOutputType | null
    _sum: ForumReplySumAggregateOutputType | null
    _min: ForumReplyMinAggregateOutputType | null
    _max: ForumReplyMaxAggregateOutputType | null
  }

  type GetForumReplyGroupByPayload<T extends ForumReplyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ForumReplyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ForumReplyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ForumReplyGroupByOutputType[P]>
            : GetScalarType<T[P], ForumReplyGroupByOutputType[P]>
        }
      >
    >


  export type ForumReplySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    authorId?: boolean
    content?: boolean
    parentReplyId?: boolean
    likeCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    likes?: boolean | ForumReply$likesArgs<ExtArgs>
    _count?: boolean | ForumReplyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumReply"]>

  export type ForumReplySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    authorId?: boolean
    content?: boolean
    parentReplyId?: boolean
    likeCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumReply"]>

  export type ForumReplySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    authorId?: boolean
    content?: boolean
    parentReplyId?: boolean
    likeCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumReply"]>

  export type ForumReplySelectScalar = {
    id?: boolean
    postId?: boolean
    authorId?: boolean
    content?: boolean
    parentReplyId?: boolean
    likeCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ForumReplyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "postId" | "authorId" | "content" | "parentReplyId" | "likeCount" | "createdAt" | "updatedAt", ExtArgs["result"]["forumReply"]>
  export type ForumReplyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    likes?: boolean | ForumReply$likesArgs<ExtArgs>
    _count?: boolean | ForumReplyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ForumReplyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ForumReplyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ForumReplyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ForumReply"
    objects: {
      post: Prisma.$ForumPostPayload<ExtArgs>
      author: Prisma.$UserPayload<ExtArgs>
      likes: Prisma.$ForumReplyLikePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      postId: string
      authorId: string
      content: string
      parentReplyId: string | null
      likeCount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["forumReply"]>
    composites: {}
  }

  type ForumReplyGetPayload<S extends boolean | null | undefined | ForumReplyDefaultArgs> = $Result.GetResult<Prisma.$ForumReplyPayload, S>

  type ForumReplyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ForumReplyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ForumReplyCountAggregateInputType | true
    }

  export interface ForumReplyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ForumReply'], meta: { name: 'ForumReply' } }
    /**
     * Find zero or one ForumReply that matches the filter.
     * @param {ForumReplyFindUniqueArgs} args - Arguments to find a ForumReply
     * @example
     * // Get one ForumReply
     * const forumReply = await prisma.forumReply.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ForumReplyFindUniqueArgs>(args: SelectSubset<T, ForumReplyFindUniqueArgs<ExtArgs>>): Prisma__ForumReplyClient<$Result.GetResult<Prisma.$ForumReplyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ForumReply that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ForumReplyFindUniqueOrThrowArgs} args - Arguments to find a ForumReply
     * @example
     * // Get one ForumReply
     * const forumReply = await prisma.forumReply.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ForumReplyFindUniqueOrThrowArgs>(args: SelectSubset<T, ForumReplyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ForumReplyClient<$Result.GetResult<Prisma.$ForumReplyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumReply that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumReplyFindFirstArgs} args - Arguments to find a ForumReply
     * @example
     * // Get one ForumReply
     * const forumReply = await prisma.forumReply.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ForumReplyFindFirstArgs>(args?: SelectSubset<T, ForumReplyFindFirstArgs<ExtArgs>>): Prisma__ForumReplyClient<$Result.GetResult<Prisma.$ForumReplyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumReply that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumReplyFindFirstOrThrowArgs} args - Arguments to find a ForumReply
     * @example
     * // Get one ForumReply
     * const forumReply = await prisma.forumReply.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ForumReplyFindFirstOrThrowArgs>(args?: SelectSubset<T, ForumReplyFindFirstOrThrowArgs<ExtArgs>>): Prisma__ForumReplyClient<$Result.GetResult<Prisma.$ForumReplyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ForumReplies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumReplyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ForumReplies
     * const forumReplies = await prisma.forumReply.findMany()
     * 
     * // Get first 10 ForumReplies
     * const forumReplies = await prisma.forumReply.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const forumReplyWithIdOnly = await prisma.forumReply.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ForumReplyFindManyArgs>(args?: SelectSubset<T, ForumReplyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumReplyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ForumReply.
     * @param {ForumReplyCreateArgs} args - Arguments to create a ForumReply.
     * @example
     * // Create one ForumReply
     * const ForumReply = await prisma.forumReply.create({
     *   data: {
     *     // ... data to create a ForumReply
     *   }
     * })
     * 
     */
    create<T extends ForumReplyCreateArgs>(args: SelectSubset<T, ForumReplyCreateArgs<ExtArgs>>): Prisma__ForumReplyClient<$Result.GetResult<Prisma.$ForumReplyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ForumReplies.
     * @param {ForumReplyCreateManyArgs} args - Arguments to create many ForumReplies.
     * @example
     * // Create many ForumReplies
     * const forumReply = await prisma.forumReply.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ForumReplyCreateManyArgs>(args?: SelectSubset<T, ForumReplyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ForumReplies and returns the data saved in the database.
     * @param {ForumReplyCreateManyAndReturnArgs} args - Arguments to create many ForumReplies.
     * @example
     * // Create many ForumReplies
     * const forumReply = await prisma.forumReply.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ForumReplies and only return the `id`
     * const forumReplyWithIdOnly = await prisma.forumReply.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ForumReplyCreateManyAndReturnArgs>(args?: SelectSubset<T, ForumReplyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumReplyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ForumReply.
     * @param {ForumReplyDeleteArgs} args - Arguments to delete one ForumReply.
     * @example
     * // Delete one ForumReply
     * const ForumReply = await prisma.forumReply.delete({
     *   where: {
     *     // ... filter to delete one ForumReply
     *   }
     * })
     * 
     */
    delete<T extends ForumReplyDeleteArgs>(args: SelectSubset<T, ForumReplyDeleteArgs<ExtArgs>>): Prisma__ForumReplyClient<$Result.GetResult<Prisma.$ForumReplyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ForumReply.
     * @param {ForumReplyUpdateArgs} args - Arguments to update one ForumReply.
     * @example
     * // Update one ForumReply
     * const forumReply = await prisma.forumReply.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ForumReplyUpdateArgs>(args: SelectSubset<T, ForumReplyUpdateArgs<ExtArgs>>): Prisma__ForumReplyClient<$Result.GetResult<Prisma.$ForumReplyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ForumReplies.
     * @param {ForumReplyDeleteManyArgs} args - Arguments to filter ForumReplies to delete.
     * @example
     * // Delete a few ForumReplies
     * const { count } = await prisma.forumReply.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ForumReplyDeleteManyArgs>(args?: SelectSubset<T, ForumReplyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumReplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumReplyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ForumReplies
     * const forumReply = await prisma.forumReply.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ForumReplyUpdateManyArgs>(args: SelectSubset<T, ForumReplyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumReplies and returns the data updated in the database.
     * @param {ForumReplyUpdateManyAndReturnArgs} args - Arguments to update many ForumReplies.
     * @example
     * // Update many ForumReplies
     * const forumReply = await prisma.forumReply.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ForumReplies and only return the `id`
     * const forumReplyWithIdOnly = await prisma.forumReply.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ForumReplyUpdateManyAndReturnArgs>(args: SelectSubset<T, ForumReplyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumReplyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ForumReply.
     * @param {ForumReplyUpsertArgs} args - Arguments to update or create a ForumReply.
     * @example
     * // Update or create a ForumReply
     * const forumReply = await prisma.forumReply.upsert({
     *   create: {
     *     // ... data to create a ForumReply
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ForumReply we want to update
     *   }
     * })
     */
    upsert<T extends ForumReplyUpsertArgs>(args: SelectSubset<T, ForumReplyUpsertArgs<ExtArgs>>): Prisma__ForumReplyClient<$Result.GetResult<Prisma.$ForumReplyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ForumReplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumReplyCountArgs} args - Arguments to filter ForumReplies to count.
     * @example
     * // Count the number of ForumReplies
     * const count = await prisma.forumReply.count({
     *   where: {
     *     // ... the filter for the ForumReplies we want to count
     *   }
     * })
    **/
    count<T extends ForumReplyCountArgs>(
      args?: Subset<T, ForumReplyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ForumReplyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ForumReply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumReplyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ForumReplyAggregateArgs>(args: Subset<T, ForumReplyAggregateArgs>): Prisma.PrismaPromise<GetForumReplyAggregateType<T>>

    /**
     * Group by ForumReply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumReplyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ForumReplyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ForumReplyGroupByArgs['orderBy'] }
        : { orderBy?: ForumReplyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ForumReplyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetForumReplyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ForumReply model
   */
  readonly fields: ForumReplyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ForumReply.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ForumReplyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends ForumPostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ForumPostDefaultArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    likes<T extends ForumReply$likesArgs<ExtArgs> = {}>(args?: Subset<T, ForumReply$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumReplyLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ForumReply model
   */
  interface ForumReplyFieldRefs {
    readonly id: FieldRef<"ForumReply", 'String'>
    readonly postId: FieldRef<"ForumReply", 'String'>
    readonly authorId: FieldRef<"ForumReply", 'String'>
    readonly content: FieldRef<"ForumReply", 'String'>
    readonly parentReplyId: FieldRef<"ForumReply", 'String'>
    readonly likeCount: FieldRef<"ForumReply", 'Int'>
    readonly createdAt: FieldRef<"ForumReply", 'DateTime'>
    readonly updatedAt: FieldRef<"ForumReply", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ForumReply findUnique
   */
  export type ForumReplyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReply
     */
    select?: ForumReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReply
     */
    omit?: ForumReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyInclude<ExtArgs> | null
    /**
     * Filter, which ForumReply to fetch.
     */
    where: ForumReplyWhereUniqueInput
  }

  /**
   * ForumReply findUniqueOrThrow
   */
  export type ForumReplyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReply
     */
    select?: ForumReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReply
     */
    omit?: ForumReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyInclude<ExtArgs> | null
    /**
     * Filter, which ForumReply to fetch.
     */
    where: ForumReplyWhereUniqueInput
  }

  /**
   * ForumReply findFirst
   */
  export type ForumReplyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReply
     */
    select?: ForumReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReply
     */
    omit?: ForumReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyInclude<ExtArgs> | null
    /**
     * Filter, which ForumReply to fetch.
     */
    where?: ForumReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumReplies to fetch.
     */
    orderBy?: ForumReplyOrderByWithRelationInput | ForumReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumReplies.
     */
    cursor?: ForumReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumReplies.
     */
    distinct?: ForumReplyScalarFieldEnum | ForumReplyScalarFieldEnum[]
  }

  /**
   * ForumReply findFirstOrThrow
   */
  export type ForumReplyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReply
     */
    select?: ForumReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReply
     */
    omit?: ForumReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyInclude<ExtArgs> | null
    /**
     * Filter, which ForumReply to fetch.
     */
    where?: ForumReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumReplies to fetch.
     */
    orderBy?: ForumReplyOrderByWithRelationInput | ForumReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumReplies.
     */
    cursor?: ForumReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumReplies.
     */
    distinct?: ForumReplyScalarFieldEnum | ForumReplyScalarFieldEnum[]
  }

  /**
   * ForumReply findMany
   */
  export type ForumReplyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReply
     */
    select?: ForumReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReply
     */
    omit?: ForumReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyInclude<ExtArgs> | null
    /**
     * Filter, which ForumReplies to fetch.
     */
    where?: ForumReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumReplies to fetch.
     */
    orderBy?: ForumReplyOrderByWithRelationInput | ForumReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ForumReplies.
     */
    cursor?: ForumReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumReplies.
     */
    skip?: number
    distinct?: ForumReplyScalarFieldEnum | ForumReplyScalarFieldEnum[]
  }

  /**
   * ForumReply create
   */
  export type ForumReplyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReply
     */
    select?: ForumReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReply
     */
    omit?: ForumReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyInclude<ExtArgs> | null
    /**
     * The data needed to create a ForumReply.
     */
    data: XOR<ForumReplyCreateInput, ForumReplyUncheckedCreateInput>
  }

  /**
   * ForumReply createMany
   */
  export type ForumReplyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ForumReplies.
     */
    data: ForumReplyCreateManyInput | ForumReplyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ForumReply createManyAndReturn
   */
  export type ForumReplyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReply
     */
    select?: ForumReplySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReply
     */
    omit?: ForumReplyOmit<ExtArgs> | null
    /**
     * The data used to create many ForumReplies.
     */
    data: ForumReplyCreateManyInput | ForumReplyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumReply update
   */
  export type ForumReplyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReply
     */
    select?: ForumReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReply
     */
    omit?: ForumReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyInclude<ExtArgs> | null
    /**
     * The data needed to update a ForumReply.
     */
    data: XOR<ForumReplyUpdateInput, ForumReplyUncheckedUpdateInput>
    /**
     * Choose, which ForumReply to update.
     */
    where: ForumReplyWhereUniqueInput
  }

  /**
   * ForumReply updateMany
   */
  export type ForumReplyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ForumReplies.
     */
    data: XOR<ForumReplyUpdateManyMutationInput, ForumReplyUncheckedUpdateManyInput>
    /**
     * Filter which ForumReplies to update
     */
    where?: ForumReplyWhereInput
    /**
     * Limit how many ForumReplies to update.
     */
    limit?: number
  }

  /**
   * ForumReply updateManyAndReturn
   */
  export type ForumReplyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReply
     */
    select?: ForumReplySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReply
     */
    omit?: ForumReplyOmit<ExtArgs> | null
    /**
     * The data used to update ForumReplies.
     */
    data: XOR<ForumReplyUpdateManyMutationInput, ForumReplyUncheckedUpdateManyInput>
    /**
     * Filter which ForumReplies to update
     */
    where?: ForumReplyWhereInput
    /**
     * Limit how many ForumReplies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumReply upsert
   */
  export type ForumReplyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReply
     */
    select?: ForumReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReply
     */
    omit?: ForumReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyInclude<ExtArgs> | null
    /**
     * The filter to search for the ForumReply to update in case it exists.
     */
    where: ForumReplyWhereUniqueInput
    /**
     * In case the ForumReply found by the `where` argument doesn't exist, create a new ForumReply with this data.
     */
    create: XOR<ForumReplyCreateInput, ForumReplyUncheckedCreateInput>
    /**
     * In case the ForumReply was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ForumReplyUpdateInput, ForumReplyUncheckedUpdateInput>
  }

  /**
   * ForumReply delete
   */
  export type ForumReplyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReply
     */
    select?: ForumReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReply
     */
    omit?: ForumReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyInclude<ExtArgs> | null
    /**
     * Filter which ForumReply to delete.
     */
    where: ForumReplyWhereUniqueInput
  }

  /**
   * ForumReply deleteMany
   */
  export type ForumReplyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumReplies to delete
     */
    where?: ForumReplyWhereInput
    /**
     * Limit how many ForumReplies to delete.
     */
    limit?: number
  }

  /**
   * ForumReply.likes
   */
  export type ForumReply$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReplyLike
     */
    select?: ForumReplyLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReplyLike
     */
    omit?: ForumReplyLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyLikeInclude<ExtArgs> | null
    where?: ForumReplyLikeWhereInput
    orderBy?: ForumReplyLikeOrderByWithRelationInput | ForumReplyLikeOrderByWithRelationInput[]
    cursor?: ForumReplyLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ForumReplyLikeScalarFieldEnum | ForumReplyLikeScalarFieldEnum[]
  }

  /**
   * ForumReply without action
   */
  export type ForumReplyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReply
     */
    select?: ForumReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReply
     */
    omit?: ForumReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyInclude<ExtArgs> | null
  }


  /**
   * Model ForumPostLike
   */

  export type AggregateForumPostLike = {
    _count: ForumPostLikeCountAggregateOutputType | null
    _min: ForumPostLikeMinAggregateOutputType | null
    _max: ForumPostLikeMaxAggregateOutputType | null
  }

  export type ForumPostLikeMinAggregateOutputType = {
    id: string | null
    postId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type ForumPostLikeMaxAggregateOutputType = {
    id: string | null
    postId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type ForumPostLikeCountAggregateOutputType = {
    id: number
    postId: number
    userId: number
    createdAt: number
    _all: number
  }


  export type ForumPostLikeMinAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    createdAt?: true
  }

  export type ForumPostLikeMaxAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    createdAt?: true
  }

  export type ForumPostLikeCountAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type ForumPostLikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumPostLike to aggregate.
     */
    where?: ForumPostLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumPostLikes to fetch.
     */
    orderBy?: ForumPostLikeOrderByWithRelationInput | ForumPostLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ForumPostLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumPostLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumPostLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ForumPostLikes
    **/
    _count?: true | ForumPostLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ForumPostLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ForumPostLikeMaxAggregateInputType
  }

  export type GetForumPostLikeAggregateType<T extends ForumPostLikeAggregateArgs> = {
        [P in keyof T & keyof AggregateForumPostLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForumPostLike[P]>
      : GetScalarType<T[P], AggregateForumPostLike[P]>
  }




  export type ForumPostLikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumPostLikeWhereInput
    orderBy?: ForumPostLikeOrderByWithAggregationInput | ForumPostLikeOrderByWithAggregationInput[]
    by: ForumPostLikeScalarFieldEnum[] | ForumPostLikeScalarFieldEnum
    having?: ForumPostLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ForumPostLikeCountAggregateInputType | true
    _min?: ForumPostLikeMinAggregateInputType
    _max?: ForumPostLikeMaxAggregateInputType
  }

  export type ForumPostLikeGroupByOutputType = {
    id: string
    postId: string
    userId: string
    createdAt: Date
    _count: ForumPostLikeCountAggregateOutputType | null
    _min: ForumPostLikeMinAggregateOutputType | null
    _max: ForumPostLikeMaxAggregateOutputType | null
  }

  type GetForumPostLikeGroupByPayload<T extends ForumPostLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ForumPostLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ForumPostLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ForumPostLikeGroupByOutputType[P]>
            : GetScalarType<T[P], ForumPostLikeGroupByOutputType[P]>
        }
      >
    >


  export type ForumPostLikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    userId?: boolean
    createdAt?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumPostLike"]>

  export type ForumPostLikeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    userId?: boolean
    createdAt?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumPostLike"]>

  export type ForumPostLikeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    userId?: boolean
    createdAt?: boolean
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumPostLike"]>

  export type ForumPostLikeSelectScalar = {
    id?: boolean
    postId?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type ForumPostLikeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "postId" | "userId" | "createdAt", ExtArgs["result"]["forumPostLike"]>
  export type ForumPostLikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ForumPostLikeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ForumPostLikeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ForumPostDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ForumPostLikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ForumPostLike"
    objects: {
      post: Prisma.$ForumPostPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      postId: string
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["forumPostLike"]>
    composites: {}
  }

  type ForumPostLikeGetPayload<S extends boolean | null | undefined | ForumPostLikeDefaultArgs> = $Result.GetResult<Prisma.$ForumPostLikePayload, S>

  type ForumPostLikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ForumPostLikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ForumPostLikeCountAggregateInputType | true
    }

  export interface ForumPostLikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ForumPostLike'], meta: { name: 'ForumPostLike' } }
    /**
     * Find zero or one ForumPostLike that matches the filter.
     * @param {ForumPostLikeFindUniqueArgs} args - Arguments to find a ForumPostLike
     * @example
     * // Get one ForumPostLike
     * const forumPostLike = await prisma.forumPostLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ForumPostLikeFindUniqueArgs>(args: SelectSubset<T, ForumPostLikeFindUniqueArgs<ExtArgs>>): Prisma__ForumPostLikeClient<$Result.GetResult<Prisma.$ForumPostLikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ForumPostLike that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ForumPostLikeFindUniqueOrThrowArgs} args - Arguments to find a ForumPostLike
     * @example
     * // Get one ForumPostLike
     * const forumPostLike = await prisma.forumPostLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ForumPostLikeFindUniqueOrThrowArgs>(args: SelectSubset<T, ForumPostLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ForumPostLikeClient<$Result.GetResult<Prisma.$ForumPostLikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumPostLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostLikeFindFirstArgs} args - Arguments to find a ForumPostLike
     * @example
     * // Get one ForumPostLike
     * const forumPostLike = await prisma.forumPostLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ForumPostLikeFindFirstArgs>(args?: SelectSubset<T, ForumPostLikeFindFirstArgs<ExtArgs>>): Prisma__ForumPostLikeClient<$Result.GetResult<Prisma.$ForumPostLikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumPostLike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostLikeFindFirstOrThrowArgs} args - Arguments to find a ForumPostLike
     * @example
     * // Get one ForumPostLike
     * const forumPostLike = await prisma.forumPostLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ForumPostLikeFindFirstOrThrowArgs>(args?: SelectSubset<T, ForumPostLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ForumPostLikeClient<$Result.GetResult<Prisma.$ForumPostLikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ForumPostLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostLikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ForumPostLikes
     * const forumPostLikes = await prisma.forumPostLike.findMany()
     * 
     * // Get first 10 ForumPostLikes
     * const forumPostLikes = await prisma.forumPostLike.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const forumPostLikeWithIdOnly = await prisma.forumPostLike.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ForumPostLikeFindManyArgs>(args?: SelectSubset<T, ForumPostLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumPostLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ForumPostLike.
     * @param {ForumPostLikeCreateArgs} args - Arguments to create a ForumPostLike.
     * @example
     * // Create one ForumPostLike
     * const ForumPostLike = await prisma.forumPostLike.create({
     *   data: {
     *     // ... data to create a ForumPostLike
     *   }
     * })
     * 
     */
    create<T extends ForumPostLikeCreateArgs>(args: SelectSubset<T, ForumPostLikeCreateArgs<ExtArgs>>): Prisma__ForumPostLikeClient<$Result.GetResult<Prisma.$ForumPostLikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ForumPostLikes.
     * @param {ForumPostLikeCreateManyArgs} args - Arguments to create many ForumPostLikes.
     * @example
     * // Create many ForumPostLikes
     * const forumPostLike = await prisma.forumPostLike.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ForumPostLikeCreateManyArgs>(args?: SelectSubset<T, ForumPostLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ForumPostLikes and returns the data saved in the database.
     * @param {ForumPostLikeCreateManyAndReturnArgs} args - Arguments to create many ForumPostLikes.
     * @example
     * // Create many ForumPostLikes
     * const forumPostLike = await prisma.forumPostLike.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ForumPostLikes and only return the `id`
     * const forumPostLikeWithIdOnly = await prisma.forumPostLike.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ForumPostLikeCreateManyAndReturnArgs>(args?: SelectSubset<T, ForumPostLikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumPostLikePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ForumPostLike.
     * @param {ForumPostLikeDeleteArgs} args - Arguments to delete one ForumPostLike.
     * @example
     * // Delete one ForumPostLike
     * const ForumPostLike = await prisma.forumPostLike.delete({
     *   where: {
     *     // ... filter to delete one ForumPostLike
     *   }
     * })
     * 
     */
    delete<T extends ForumPostLikeDeleteArgs>(args: SelectSubset<T, ForumPostLikeDeleteArgs<ExtArgs>>): Prisma__ForumPostLikeClient<$Result.GetResult<Prisma.$ForumPostLikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ForumPostLike.
     * @param {ForumPostLikeUpdateArgs} args - Arguments to update one ForumPostLike.
     * @example
     * // Update one ForumPostLike
     * const forumPostLike = await prisma.forumPostLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ForumPostLikeUpdateArgs>(args: SelectSubset<T, ForumPostLikeUpdateArgs<ExtArgs>>): Prisma__ForumPostLikeClient<$Result.GetResult<Prisma.$ForumPostLikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ForumPostLikes.
     * @param {ForumPostLikeDeleteManyArgs} args - Arguments to filter ForumPostLikes to delete.
     * @example
     * // Delete a few ForumPostLikes
     * const { count } = await prisma.forumPostLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ForumPostLikeDeleteManyArgs>(args?: SelectSubset<T, ForumPostLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumPostLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ForumPostLikes
     * const forumPostLike = await prisma.forumPostLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ForumPostLikeUpdateManyArgs>(args: SelectSubset<T, ForumPostLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumPostLikes and returns the data updated in the database.
     * @param {ForumPostLikeUpdateManyAndReturnArgs} args - Arguments to update many ForumPostLikes.
     * @example
     * // Update many ForumPostLikes
     * const forumPostLike = await prisma.forumPostLike.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ForumPostLikes and only return the `id`
     * const forumPostLikeWithIdOnly = await prisma.forumPostLike.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ForumPostLikeUpdateManyAndReturnArgs>(args: SelectSubset<T, ForumPostLikeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumPostLikePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ForumPostLike.
     * @param {ForumPostLikeUpsertArgs} args - Arguments to update or create a ForumPostLike.
     * @example
     * // Update or create a ForumPostLike
     * const forumPostLike = await prisma.forumPostLike.upsert({
     *   create: {
     *     // ... data to create a ForumPostLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ForumPostLike we want to update
     *   }
     * })
     */
    upsert<T extends ForumPostLikeUpsertArgs>(args: SelectSubset<T, ForumPostLikeUpsertArgs<ExtArgs>>): Prisma__ForumPostLikeClient<$Result.GetResult<Prisma.$ForumPostLikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ForumPostLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostLikeCountArgs} args - Arguments to filter ForumPostLikes to count.
     * @example
     * // Count the number of ForumPostLikes
     * const count = await prisma.forumPostLike.count({
     *   where: {
     *     // ... the filter for the ForumPostLikes we want to count
     *   }
     * })
    **/
    count<T extends ForumPostLikeCountArgs>(
      args?: Subset<T, ForumPostLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ForumPostLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ForumPostLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ForumPostLikeAggregateArgs>(args: Subset<T, ForumPostLikeAggregateArgs>): Prisma.PrismaPromise<GetForumPostLikeAggregateType<T>>

    /**
     * Group by ForumPostLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumPostLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ForumPostLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ForumPostLikeGroupByArgs['orderBy'] }
        : { orderBy?: ForumPostLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ForumPostLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetForumPostLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ForumPostLike model
   */
  readonly fields: ForumPostLikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ForumPostLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ForumPostLikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends ForumPostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ForumPostDefaultArgs<ExtArgs>>): Prisma__ForumPostClient<$Result.GetResult<Prisma.$ForumPostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ForumPostLike model
   */
  interface ForumPostLikeFieldRefs {
    readonly id: FieldRef<"ForumPostLike", 'String'>
    readonly postId: FieldRef<"ForumPostLike", 'String'>
    readonly userId: FieldRef<"ForumPostLike", 'String'>
    readonly createdAt: FieldRef<"ForumPostLike", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ForumPostLike findUnique
   */
  export type ForumPostLikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostLike
     */
    select?: ForumPostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostLike
     */
    omit?: ForumPostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostLikeInclude<ExtArgs> | null
    /**
     * Filter, which ForumPostLike to fetch.
     */
    where: ForumPostLikeWhereUniqueInput
  }

  /**
   * ForumPostLike findUniqueOrThrow
   */
  export type ForumPostLikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostLike
     */
    select?: ForumPostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostLike
     */
    omit?: ForumPostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostLikeInclude<ExtArgs> | null
    /**
     * Filter, which ForumPostLike to fetch.
     */
    where: ForumPostLikeWhereUniqueInput
  }

  /**
   * ForumPostLike findFirst
   */
  export type ForumPostLikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostLike
     */
    select?: ForumPostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostLike
     */
    omit?: ForumPostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostLikeInclude<ExtArgs> | null
    /**
     * Filter, which ForumPostLike to fetch.
     */
    where?: ForumPostLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumPostLikes to fetch.
     */
    orderBy?: ForumPostLikeOrderByWithRelationInput | ForumPostLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumPostLikes.
     */
    cursor?: ForumPostLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumPostLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumPostLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumPostLikes.
     */
    distinct?: ForumPostLikeScalarFieldEnum | ForumPostLikeScalarFieldEnum[]
  }

  /**
   * ForumPostLike findFirstOrThrow
   */
  export type ForumPostLikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostLike
     */
    select?: ForumPostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostLike
     */
    omit?: ForumPostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostLikeInclude<ExtArgs> | null
    /**
     * Filter, which ForumPostLike to fetch.
     */
    where?: ForumPostLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumPostLikes to fetch.
     */
    orderBy?: ForumPostLikeOrderByWithRelationInput | ForumPostLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumPostLikes.
     */
    cursor?: ForumPostLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumPostLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumPostLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumPostLikes.
     */
    distinct?: ForumPostLikeScalarFieldEnum | ForumPostLikeScalarFieldEnum[]
  }

  /**
   * ForumPostLike findMany
   */
  export type ForumPostLikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostLike
     */
    select?: ForumPostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostLike
     */
    omit?: ForumPostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostLikeInclude<ExtArgs> | null
    /**
     * Filter, which ForumPostLikes to fetch.
     */
    where?: ForumPostLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumPostLikes to fetch.
     */
    orderBy?: ForumPostLikeOrderByWithRelationInput | ForumPostLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ForumPostLikes.
     */
    cursor?: ForumPostLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumPostLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumPostLikes.
     */
    skip?: number
    distinct?: ForumPostLikeScalarFieldEnum | ForumPostLikeScalarFieldEnum[]
  }

  /**
   * ForumPostLike create
   */
  export type ForumPostLikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostLike
     */
    select?: ForumPostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostLike
     */
    omit?: ForumPostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostLikeInclude<ExtArgs> | null
    /**
     * The data needed to create a ForumPostLike.
     */
    data: XOR<ForumPostLikeCreateInput, ForumPostLikeUncheckedCreateInput>
  }

  /**
   * ForumPostLike createMany
   */
  export type ForumPostLikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ForumPostLikes.
     */
    data: ForumPostLikeCreateManyInput | ForumPostLikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ForumPostLike createManyAndReturn
   */
  export type ForumPostLikeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostLike
     */
    select?: ForumPostLikeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostLike
     */
    omit?: ForumPostLikeOmit<ExtArgs> | null
    /**
     * The data used to create many ForumPostLikes.
     */
    data: ForumPostLikeCreateManyInput | ForumPostLikeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostLikeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumPostLike update
   */
  export type ForumPostLikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostLike
     */
    select?: ForumPostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostLike
     */
    omit?: ForumPostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostLikeInclude<ExtArgs> | null
    /**
     * The data needed to update a ForumPostLike.
     */
    data: XOR<ForumPostLikeUpdateInput, ForumPostLikeUncheckedUpdateInput>
    /**
     * Choose, which ForumPostLike to update.
     */
    where: ForumPostLikeWhereUniqueInput
  }

  /**
   * ForumPostLike updateMany
   */
  export type ForumPostLikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ForumPostLikes.
     */
    data: XOR<ForumPostLikeUpdateManyMutationInput, ForumPostLikeUncheckedUpdateManyInput>
    /**
     * Filter which ForumPostLikes to update
     */
    where?: ForumPostLikeWhereInput
    /**
     * Limit how many ForumPostLikes to update.
     */
    limit?: number
  }

  /**
   * ForumPostLike updateManyAndReturn
   */
  export type ForumPostLikeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostLike
     */
    select?: ForumPostLikeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostLike
     */
    omit?: ForumPostLikeOmit<ExtArgs> | null
    /**
     * The data used to update ForumPostLikes.
     */
    data: XOR<ForumPostLikeUpdateManyMutationInput, ForumPostLikeUncheckedUpdateManyInput>
    /**
     * Filter which ForumPostLikes to update
     */
    where?: ForumPostLikeWhereInput
    /**
     * Limit how many ForumPostLikes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostLikeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumPostLike upsert
   */
  export type ForumPostLikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostLike
     */
    select?: ForumPostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostLike
     */
    omit?: ForumPostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostLikeInclude<ExtArgs> | null
    /**
     * The filter to search for the ForumPostLike to update in case it exists.
     */
    where: ForumPostLikeWhereUniqueInput
    /**
     * In case the ForumPostLike found by the `where` argument doesn't exist, create a new ForumPostLike with this data.
     */
    create: XOR<ForumPostLikeCreateInput, ForumPostLikeUncheckedCreateInput>
    /**
     * In case the ForumPostLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ForumPostLikeUpdateInput, ForumPostLikeUncheckedUpdateInput>
  }

  /**
   * ForumPostLike delete
   */
  export type ForumPostLikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostLike
     */
    select?: ForumPostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostLike
     */
    omit?: ForumPostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostLikeInclude<ExtArgs> | null
    /**
     * Filter which ForumPostLike to delete.
     */
    where: ForumPostLikeWhereUniqueInput
  }

  /**
   * ForumPostLike deleteMany
   */
  export type ForumPostLikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumPostLikes to delete
     */
    where?: ForumPostLikeWhereInput
    /**
     * Limit how many ForumPostLikes to delete.
     */
    limit?: number
  }

  /**
   * ForumPostLike without action
   */
  export type ForumPostLikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumPostLike
     */
    select?: ForumPostLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumPostLike
     */
    omit?: ForumPostLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumPostLikeInclude<ExtArgs> | null
  }


  /**
   * Model ForumReplyLike
   */

  export type AggregateForumReplyLike = {
    _count: ForumReplyLikeCountAggregateOutputType | null
    _min: ForumReplyLikeMinAggregateOutputType | null
    _max: ForumReplyLikeMaxAggregateOutputType | null
  }

  export type ForumReplyLikeMinAggregateOutputType = {
    id: string | null
    replyId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type ForumReplyLikeMaxAggregateOutputType = {
    id: string | null
    replyId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type ForumReplyLikeCountAggregateOutputType = {
    id: number
    replyId: number
    userId: number
    createdAt: number
    _all: number
  }


  export type ForumReplyLikeMinAggregateInputType = {
    id?: true
    replyId?: true
    userId?: true
    createdAt?: true
  }

  export type ForumReplyLikeMaxAggregateInputType = {
    id?: true
    replyId?: true
    userId?: true
    createdAt?: true
  }

  export type ForumReplyLikeCountAggregateInputType = {
    id?: true
    replyId?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type ForumReplyLikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumReplyLike to aggregate.
     */
    where?: ForumReplyLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumReplyLikes to fetch.
     */
    orderBy?: ForumReplyLikeOrderByWithRelationInput | ForumReplyLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ForumReplyLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumReplyLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumReplyLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ForumReplyLikes
    **/
    _count?: true | ForumReplyLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ForumReplyLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ForumReplyLikeMaxAggregateInputType
  }

  export type GetForumReplyLikeAggregateType<T extends ForumReplyLikeAggregateArgs> = {
        [P in keyof T & keyof AggregateForumReplyLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForumReplyLike[P]>
      : GetScalarType<T[P], AggregateForumReplyLike[P]>
  }




  export type ForumReplyLikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ForumReplyLikeWhereInput
    orderBy?: ForumReplyLikeOrderByWithAggregationInput | ForumReplyLikeOrderByWithAggregationInput[]
    by: ForumReplyLikeScalarFieldEnum[] | ForumReplyLikeScalarFieldEnum
    having?: ForumReplyLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ForumReplyLikeCountAggregateInputType | true
    _min?: ForumReplyLikeMinAggregateInputType
    _max?: ForumReplyLikeMaxAggregateInputType
  }

  export type ForumReplyLikeGroupByOutputType = {
    id: string
    replyId: string
    userId: string
    createdAt: Date
    _count: ForumReplyLikeCountAggregateOutputType | null
    _min: ForumReplyLikeMinAggregateOutputType | null
    _max: ForumReplyLikeMaxAggregateOutputType | null
  }

  type GetForumReplyLikeGroupByPayload<T extends ForumReplyLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ForumReplyLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ForumReplyLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ForumReplyLikeGroupByOutputType[P]>
            : GetScalarType<T[P], ForumReplyLikeGroupByOutputType[P]>
        }
      >
    >


  export type ForumReplyLikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    replyId?: boolean
    userId?: boolean
    createdAt?: boolean
    reply?: boolean | ForumReplyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumReplyLike"]>

  export type ForumReplyLikeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    replyId?: boolean
    userId?: boolean
    createdAt?: boolean
    reply?: boolean | ForumReplyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumReplyLike"]>

  export type ForumReplyLikeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    replyId?: boolean
    userId?: boolean
    createdAt?: boolean
    reply?: boolean | ForumReplyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forumReplyLike"]>

  export type ForumReplyLikeSelectScalar = {
    id?: boolean
    replyId?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type ForumReplyLikeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "replyId" | "userId" | "createdAt", ExtArgs["result"]["forumReplyLike"]>
  export type ForumReplyLikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reply?: boolean | ForumReplyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ForumReplyLikeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reply?: boolean | ForumReplyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ForumReplyLikeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reply?: boolean | ForumReplyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ForumReplyLikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ForumReplyLike"
    objects: {
      reply: Prisma.$ForumReplyPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      replyId: string
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["forumReplyLike"]>
    composites: {}
  }

  type ForumReplyLikeGetPayload<S extends boolean | null | undefined | ForumReplyLikeDefaultArgs> = $Result.GetResult<Prisma.$ForumReplyLikePayload, S>

  type ForumReplyLikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ForumReplyLikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ForumReplyLikeCountAggregateInputType | true
    }

  export interface ForumReplyLikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ForumReplyLike'], meta: { name: 'ForumReplyLike' } }
    /**
     * Find zero or one ForumReplyLike that matches the filter.
     * @param {ForumReplyLikeFindUniqueArgs} args - Arguments to find a ForumReplyLike
     * @example
     * // Get one ForumReplyLike
     * const forumReplyLike = await prisma.forumReplyLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ForumReplyLikeFindUniqueArgs>(args: SelectSubset<T, ForumReplyLikeFindUniqueArgs<ExtArgs>>): Prisma__ForumReplyLikeClient<$Result.GetResult<Prisma.$ForumReplyLikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ForumReplyLike that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ForumReplyLikeFindUniqueOrThrowArgs} args - Arguments to find a ForumReplyLike
     * @example
     * // Get one ForumReplyLike
     * const forumReplyLike = await prisma.forumReplyLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ForumReplyLikeFindUniqueOrThrowArgs>(args: SelectSubset<T, ForumReplyLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ForumReplyLikeClient<$Result.GetResult<Prisma.$ForumReplyLikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumReplyLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumReplyLikeFindFirstArgs} args - Arguments to find a ForumReplyLike
     * @example
     * // Get one ForumReplyLike
     * const forumReplyLike = await prisma.forumReplyLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ForumReplyLikeFindFirstArgs>(args?: SelectSubset<T, ForumReplyLikeFindFirstArgs<ExtArgs>>): Prisma__ForumReplyLikeClient<$Result.GetResult<Prisma.$ForumReplyLikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ForumReplyLike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumReplyLikeFindFirstOrThrowArgs} args - Arguments to find a ForumReplyLike
     * @example
     * // Get one ForumReplyLike
     * const forumReplyLike = await prisma.forumReplyLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ForumReplyLikeFindFirstOrThrowArgs>(args?: SelectSubset<T, ForumReplyLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ForumReplyLikeClient<$Result.GetResult<Prisma.$ForumReplyLikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ForumReplyLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumReplyLikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ForumReplyLikes
     * const forumReplyLikes = await prisma.forumReplyLike.findMany()
     * 
     * // Get first 10 ForumReplyLikes
     * const forumReplyLikes = await prisma.forumReplyLike.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const forumReplyLikeWithIdOnly = await prisma.forumReplyLike.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ForumReplyLikeFindManyArgs>(args?: SelectSubset<T, ForumReplyLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumReplyLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ForumReplyLike.
     * @param {ForumReplyLikeCreateArgs} args - Arguments to create a ForumReplyLike.
     * @example
     * // Create one ForumReplyLike
     * const ForumReplyLike = await prisma.forumReplyLike.create({
     *   data: {
     *     // ... data to create a ForumReplyLike
     *   }
     * })
     * 
     */
    create<T extends ForumReplyLikeCreateArgs>(args: SelectSubset<T, ForumReplyLikeCreateArgs<ExtArgs>>): Prisma__ForumReplyLikeClient<$Result.GetResult<Prisma.$ForumReplyLikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ForumReplyLikes.
     * @param {ForumReplyLikeCreateManyArgs} args - Arguments to create many ForumReplyLikes.
     * @example
     * // Create many ForumReplyLikes
     * const forumReplyLike = await prisma.forumReplyLike.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ForumReplyLikeCreateManyArgs>(args?: SelectSubset<T, ForumReplyLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ForumReplyLikes and returns the data saved in the database.
     * @param {ForumReplyLikeCreateManyAndReturnArgs} args - Arguments to create many ForumReplyLikes.
     * @example
     * // Create many ForumReplyLikes
     * const forumReplyLike = await prisma.forumReplyLike.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ForumReplyLikes and only return the `id`
     * const forumReplyLikeWithIdOnly = await prisma.forumReplyLike.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ForumReplyLikeCreateManyAndReturnArgs>(args?: SelectSubset<T, ForumReplyLikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumReplyLikePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ForumReplyLike.
     * @param {ForumReplyLikeDeleteArgs} args - Arguments to delete one ForumReplyLike.
     * @example
     * // Delete one ForumReplyLike
     * const ForumReplyLike = await prisma.forumReplyLike.delete({
     *   where: {
     *     // ... filter to delete one ForumReplyLike
     *   }
     * })
     * 
     */
    delete<T extends ForumReplyLikeDeleteArgs>(args: SelectSubset<T, ForumReplyLikeDeleteArgs<ExtArgs>>): Prisma__ForumReplyLikeClient<$Result.GetResult<Prisma.$ForumReplyLikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ForumReplyLike.
     * @param {ForumReplyLikeUpdateArgs} args - Arguments to update one ForumReplyLike.
     * @example
     * // Update one ForumReplyLike
     * const forumReplyLike = await prisma.forumReplyLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ForumReplyLikeUpdateArgs>(args: SelectSubset<T, ForumReplyLikeUpdateArgs<ExtArgs>>): Prisma__ForumReplyLikeClient<$Result.GetResult<Prisma.$ForumReplyLikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ForumReplyLikes.
     * @param {ForumReplyLikeDeleteManyArgs} args - Arguments to filter ForumReplyLikes to delete.
     * @example
     * // Delete a few ForumReplyLikes
     * const { count } = await prisma.forumReplyLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ForumReplyLikeDeleteManyArgs>(args?: SelectSubset<T, ForumReplyLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumReplyLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumReplyLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ForumReplyLikes
     * const forumReplyLike = await prisma.forumReplyLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ForumReplyLikeUpdateManyArgs>(args: SelectSubset<T, ForumReplyLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForumReplyLikes and returns the data updated in the database.
     * @param {ForumReplyLikeUpdateManyAndReturnArgs} args - Arguments to update many ForumReplyLikes.
     * @example
     * // Update many ForumReplyLikes
     * const forumReplyLike = await prisma.forumReplyLike.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ForumReplyLikes and only return the `id`
     * const forumReplyLikeWithIdOnly = await prisma.forumReplyLike.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ForumReplyLikeUpdateManyAndReturnArgs>(args: SelectSubset<T, ForumReplyLikeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ForumReplyLikePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ForumReplyLike.
     * @param {ForumReplyLikeUpsertArgs} args - Arguments to update or create a ForumReplyLike.
     * @example
     * // Update or create a ForumReplyLike
     * const forumReplyLike = await prisma.forumReplyLike.upsert({
     *   create: {
     *     // ... data to create a ForumReplyLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ForumReplyLike we want to update
     *   }
     * })
     */
    upsert<T extends ForumReplyLikeUpsertArgs>(args: SelectSubset<T, ForumReplyLikeUpsertArgs<ExtArgs>>): Prisma__ForumReplyLikeClient<$Result.GetResult<Prisma.$ForumReplyLikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ForumReplyLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumReplyLikeCountArgs} args - Arguments to filter ForumReplyLikes to count.
     * @example
     * // Count the number of ForumReplyLikes
     * const count = await prisma.forumReplyLike.count({
     *   where: {
     *     // ... the filter for the ForumReplyLikes we want to count
     *   }
     * })
    **/
    count<T extends ForumReplyLikeCountArgs>(
      args?: Subset<T, ForumReplyLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ForumReplyLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ForumReplyLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumReplyLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ForumReplyLikeAggregateArgs>(args: Subset<T, ForumReplyLikeAggregateArgs>): Prisma.PrismaPromise<GetForumReplyLikeAggregateType<T>>

    /**
     * Group by ForumReplyLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForumReplyLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ForumReplyLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ForumReplyLikeGroupByArgs['orderBy'] }
        : { orderBy?: ForumReplyLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ForumReplyLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetForumReplyLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ForumReplyLike model
   */
  readonly fields: ForumReplyLikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ForumReplyLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ForumReplyLikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reply<T extends ForumReplyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ForumReplyDefaultArgs<ExtArgs>>): Prisma__ForumReplyClient<$Result.GetResult<Prisma.$ForumReplyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ForumReplyLike model
   */
  interface ForumReplyLikeFieldRefs {
    readonly id: FieldRef<"ForumReplyLike", 'String'>
    readonly replyId: FieldRef<"ForumReplyLike", 'String'>
    readonly userId: FieldRef<"ForumReplyLike", 'String'>
    readonly createdAt: FieldRef<"ForumReplyLike", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ForumReplyLike findUnique
   */
  export type ForumReplyLikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReplyLike
     */
    select?: ForumReplyLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReplyLike
     */
    omit?: ForumReplyLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyLikeInclude<ExtArgs> | null
    /**
     * Filter, which ForumReplyLike to fetch.
     */
    where: ForumReplyLikeWhereUniqueInput
  }

  /**
   * ForumReplyLike findUniqueOrThrow
   */
  export type ForumReplyLikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReplyLike
     */
    select?: ForumReplyLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReplyLike
     */
    omit?: ForumReplyLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyLikeInclude<ExtArgs> | null
    /**
     * Filter, which ForumReplyLike to fetch.
     */
    where: ForumReplyLikeWhereUniqueInput
  }

  /**
   * ForumReplyLike findFirst
   */
  export type ForumReplyLikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReplyLike
     */
    select?: ForumReplyLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReplyLike
     */
    omit?: ForumReplyLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyLikeInclude<ExtArgs> | null
    /**
     * Filter, which ForumReplyLike to fetch.
     */
    where?: ForumReplyLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumReplyLikes to fetch.
     */
    orderBy?: ForumReplyLikeOrderByWithRelationInput | ForumReplyLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumReplyLikes.
     */
    cursor?: ForumReplyLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumReplyLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumReplyLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumReplyLikes.
     */
    distinct?: ForumReplyLikeScalarFieldEnum | ForumReplyLikeScalarFieldEnum[]
  }

  /**
   * ForumReplyLike findFirstOrThrow
   */
  export type ForumReplyLikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReplyLike
     */
    select?: ForumReplyLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReplyLike
     */
    omit?: ForumReplyLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyLikeInclude<ExtArgs> | null
    /**
     * Filter, which ForumReplyLike to fetch.
     */
    where?: ForumReplyLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumReplyLikes to fetch.
     */
    orderBy?: ForumReplyLikeOrderByWithRelationInput | ForumReplyLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForumReplyLikes.
     */
    cursor?: ForumReplyLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumReplyLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumReplyLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForumReplyLikes.
     */
    distinct?: ForumReplyLikeScalarFieldEnum | ForumReplyLikeScalarFieldEnum[]
  }

  /**
   * ForumReplyLike findMany
   */
  export type ForumReplyLikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReplyLike
     */
    select?: ForumReplyLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReplyLike
     */
    omit?: ForumReplyLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyLikeInclude<ExtArgs> | null
    /**
     * Filter, which ForumReplyLikes to fetch.
     */
    where?: ForumReplyLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForumReplyLikes to fetch.
     */
    orderBy?: ForumReplyLikeOrderByWithRelationInput | ForumReplyLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ForumReplyLikes.
     */
    cursor?: ForumReplyLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForumReplyLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForumReplyLikes.
     */
    skip?: number
    distinct?: ForumReplyLikeScalarFieldEnum | ForumReplyLikeScalarFieldEnum[]
  }

  /**
   * ForumReplyLike create
   */
  export type ForumReplyLikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReplyLike
     */
    select?: ForumReplyLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReplyLike
     */
    omit?: ForumReplyLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyLikeInclude<ExtArgs> | null
    /**
     * The data needed to create a ForumReplyLike.
     */
    data: XOR<ForumReplyLikeCreateInput, ForumReplyLikeUncheckedCreateInput>
  }

  /**
   * ForumReplyLike createMany
   */
  export type ForumReplyLikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ForumReplyLikes.
     */
    data: ForumReplyLikeCreateManyInput | ForumReplyLikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ForumReplyLike createManyAndReturn
   */
  export type ForumReplyLikeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReplyLike
     */
    select?: ForumReplyLikeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReplyLike
     */
    omit?: ForumReplyLikeOmit<ExtArgs> | null
    /**
     * The data used to create many ForumReplyLikes.
     */
    data: ForumReplyLikeCreateManyInput | ForumReplyLikeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyLikeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumReplyLike update
   */
  export type ForumReplyLikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReplyLike
     */
    select?: ForumReplyLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReplyLike
     */
    omit?: ForumReplyLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyLikeInclude<ExtArgs> | null
    /**
     * The data needed to update a ForumReplyLike.
     */
    data: XOR<ForumReplyLikeUpdateInput, ForumReplyLikeUncheckedUpdateInput>
    /**
     * Choose, which ForumReplyLike to update.
     */
    where: ForumReplyLikeWhereUniqueInput
  }

  /**
   * ForumReplyLike updateMany
   */
  export type ForumReplyLikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ForumReplyLikes.
     */
    data: XOR<ForumReplyLikeUpdateManyMutationInput, ForumReplyLikeUncheckedUpdateManyInput>
    /**
     * Filter which ForumReplyLikes to update
     */
    where?: ForumReplyLikeWhereInput
    /**
     * Limit how many ForumReplyLikes to update.
     */
    limit?: number
  }

  /**
   * ForumReplyLike updateManyAndReturn
   */
  export type ForumReplyLikeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReplyLike
     */
    select?: ForumReplyLikeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReplyLike
     */
    omit?: ForumReplyLikeOmit<ExtArgs> | null
    /**
     * The data used to update ForumReplyLikes.
     */
    data: XOR<ForumReplyLikeUpdateManyMutationInput, ForumReplyLikeUncheckedUpdateManyInput>
    /**
     * Filter which ForumReplyLikes to update
     */
    where?: ForumReplyLikeWhereInput
    /**
     * Limit how many ForumReplyLikes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyLikeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ForumReplyLike upsert
   */
  export type ForumReplyLikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReplyLike
     */
    select?: ForumReplyLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReplyLike
     */
    omit?: ForumReplyLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyLikeInclude<ExtArgs> | null
    /**
     * The filter to search for the ForumReplyLike to update in case it exists.
     */
    where: ForumReplyLikeWhereUniqueInput
    /**
     * In case the ForumReplyLike found by the `where` argument doesn't exist, create a new ForumReplyLike with this data.
     */
    create: XOR<ForumReplyLikeCreateInput, ForumReplyLikeUncheckedCreateInput>
    /**
     * In case the ForumReplyLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ForumReplyLikeUpdateInput, ForumReplyLikeUncheckedUpdateInput>
  }

  /**
   * ForumReplyLike delete
   */
  export type ForumReplyLikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReplyLike
     */
    select?: ForumReplyLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReplyLike
     */
    omit?: ForumReplyLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyLikeInclude<ExtArgs> | null
    /**
     * Filter which ForumReplyLike to delete.
     */
    where: ForumReplyLikeWhereUniqueInput
  }

  /**
   * ForumReplyLike deleteMany
   */
  export type ForumReplyLikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ForumReplyLikes to delete
     */
    where?: ForumReplyLikeWhereInput
    /**
     * Limit how many ForumReplyLikes to delete.
     */
    limit?: number
  }

  /**
   * ForumReplyLike without action
   */
  export type ForumReplyLikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ForumReplyLike
     */
    select?: ForumReplyLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ForumReplyLike
     */
    omit?: ForumReplyLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ForumReplyLikeInclude<ExtArgs> | null
  }


  /**
   * Model PasswordResetToken
   */

  export type AggregatePasswordResetToken = {
    _count: PasswordResetTokenCountAggregateOutputType | null
    _min: PasswordResetTokenMinAggregateOutputType | null
    _max: PasswordResetTokenMaxAggregateOutputType | null
  }

  export type PasswordResetTokenMinAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    isUsed: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type PasswordResetTokenMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    isUsed: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type PasswordResetTokenCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    isUsed: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type PasswordResetTokenMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    isUsed?: true
    expiresAt?: true
    createdAt?: true
  }

  export type PasswordResetTokenMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    isUsed?: true
    expiresAt?: true
    createdAt?: true
  }

  export type PasswordResetTokenCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    isUsed?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type PasswordResetTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResetToken to aggregate.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PasswordResetTokens
    **/
    _count?: true | PasswordResetTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordResetTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordResetTokenMaxAggregateInputType
  }

  export type GetPasswordResetTokenAggregateType<T extends PasswordResetTokenAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordResetToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordResetToken[P]>
      : GetScalarType<T[P], AggregatePasswordResetToken[P]>
  }




  export type PasswordResetTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetTokenWhereInput
    orderBy?: PasswordResetTokenOrderByWithAggregationInput | PasswordResetTokenOrderByWithAggregationInput[]
    by: PasswordResetTokenScalarFieldEnum[] | PasswordResetTokenScalarFieldEnum
    having?: PasswordResetTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordResetTokenCountAggregateInputType | true
    _min?: PasswordResetTokenMinAggregateInputType
    _max?: PasswordResetTokenMaxAggregateInputType
  }

  export type PasswordResetTokenGroupByOutputType = {
    id: string
    userId: string
    token: string
    isUsed: boolean
    expiresAt: Date
    createdAt: Date
    _count: PasswordResetTokenCountAggregateOutputType | null
    _min: PasswordResetTokenMinAggregateOutputType | null
    _max: PasswordResetTokenMaxAggregateOutputType | null
  }

  type GetPasswordResetTokenGroupByPayload<T extends PasswordResetTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordResetTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordResetTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordResetTokenGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordResetTokenGroupByOutputType[P]>
        }
      >
    >


  export type PasswordResetTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    isUsed?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    isUsed?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    isUsed?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    isUsed?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type PasswordResetTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "token" | "isUsed" | "expiresAt" | "createdAt", ExtArgs["result"]["passwordResetToken"]>

  export type $PasswordResetTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PasswordResetToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      token: string
      isUsed: boolean
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["passwordResetToken"]>
    composites: {}
  }

  type PasswordResetTokenGetPayload<S extends boolean | null | undefined | PasswordResetTokenDefaultArgs> = $Result.GetResult<Prisma.$PasswordResetTokenPayload, S>

  type PasswordResetTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PasswordResetTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PasswordResetTokenCountAggregateInputType | true
    }

  export interface PasswordResetTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordResetToken'], meta: { name: 'PasswordResetToken' } }
    /**
     * Find zero or one PasswordResetToken that matches the filter.
     * @param {PasswordResetTokenFindUniqueArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PasswordResetTokenFindUniqueArgs>(args: SelectSubset<T, PasswordResetTokenFindUniqueArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PasswordResetToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PasswordResetTokenFindUniqueOrThrowArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PasswordResetTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordResetToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindFirstArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PasswordResetTokenFindFirstArgs>(args?: SelectSubset<T, PasswordResetTokenFindFirstArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordResetToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindFirstOrThrowArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PasswordResetTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, PasswordResetTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PasswordResetTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordResetTokens
     * const passwordResetTokens = await prisma.passwordResetToken.findMany()
     * 
     * // Get first 10 PasswordResetTokens
     * const passwordResetTokens = await prisma.passwordResetToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PasswordResetTokenFindManyArgs>(args?: SelectSubset<T, PasswordResetTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PasswordResetToken.
     * @param {PasswordResetTokenCreateArgs} args - Arguments to create a PasswordResetToken.
     * @example
     * // Create one PasswordResetToken
     * const PasswordResetToken = await prisma.passwordResetToken.create({
     *   data: {
     *     // ... data to create a PasswordResetToken
     *   }
     * })
     * 
     */
    create<T extends PasswordResetTokenCreateArgs>(args: SelectSubset<T, PasswordResetTokenCreateArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PasswordResetTokens.
     * @param {PasswordResetTokenCreateManyArgs} args - Arguments to create many PasswordResetTokens.
     * @example
     * // Create many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PasswordResetTokenCreateManyArgs>(args?: SelectSubset<T, PasswordResetTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PasswordResetTokens and returns the data saved in the database.
     * @param {PasswordResetTokenCreateManyAndReturnArgs} args - Arguments to create many PasswordResetTokens.
     * @example
     * // Create many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PasswordResetTokens and only return the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PasswordResetTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, PasswordResetTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PasswordResetToken.
     * @param {PasswordResetTokenDeleteArgs} args - Arguments to delete one PasswordResetToken.
     * @example
     * // Delete one PasswordResetToken
     * const PasswordResetToken = await prisma.passwordResetToken.delete({
     *   where: {
     *     // ... filter to delete one PasswordResetToken
     *   }
     * })
     * 
     */
    delete<T extends PasswordResetTokenDeleteArgs>(args: SelectSubset<T, PasswordResetTokenDeleteArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PasswordResetToken.
     * @param {PasswordResetTokenUpdateArgs} args - Arguments to update one PasswordResetToken.
     * @example
     * // Update one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PasswordResetTokenUpdateArgs>(args: SelectSubset<T, PasswordResetTokenUpdateArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PasswordResetTokens.
     * @param {PasswordResetTokenDeleteManyArgs} args - Arguments to filter PasswordResetTokens to delete.
     * @example
     * // Delete a few PasswordResetTokens
     * const { count } = await prisma.passwordResetToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PasswordResetTokenDeleteManyArgs>(args?: SelectSubset<T, PasswordResetTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PasswordResetTokenUpdateManyArgs>(args: SelectSubset<T, PasswordResetTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResetTokens and returns the data updated in the database.
     * @param {PasswordResetTokenUpdateManyAndReturnArgs} args - Arguments to update many PasswordResetTokens.
     * @example
     * // Update many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PasswordResetTokens and only return the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PasswordResetTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PasswordResetToken.
     * @param {PasswordResetTokenUpsertArgs} args - Arguments to update or create a PasswordResetToken.
     * @example
     * // Update or create a PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.upsert({
     *   create: {
     *     // ... data to create a PasswordResetToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordResetToken we want to update
     *   }
     * })
     */
    upsert<T extends PasswordResetTokenUpsertArgs>(args: SelectSubset<T, PasswordResetTokenUpsertArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PasswordResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenCountArgs} args - Arguments to filter PasswordResetTokens to count.
     * @example
     * // Count the number of PasswordResetTokens
     * const count = await prisma.passwordResetToken.count({
     *   where: {
     *     // ... the filter for the PasswordResetTokens we want to count
     *   }
     * })
    **/
    count<T extends PasswordResetTokenCountArgs>(
      args?: Subset<T, PasswordResetTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordResetTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordResetToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordResetTokenAggregateArgs>(args: Subset<T, PasswordResetTokenAggregateArgs>): Prisma.PrismaPromise<GetPasswordResetTokenAggregateType<T>>

    /**
     * Group by PasswordResetToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordResetTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordResetTokenGroupByArgs['orderBy'] }
        : { orderBy?: PasswordResetTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordResetTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordResetTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PasswordResetToken model
   */
  readonly fields: PasswordResetTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PasswordResetToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PasswordResetTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PasswordResetToken model
   */
  interface PasswordResetTokenFieldRefs {
    readonly id: FieldRef<"PasswordResetToken", 'String'>
    readonly userId: FieldRef<"PasswordResetToken", 'String'>
    readonly token: FieldRef<"PasswordResetToken", 'String'>
    readonly isUsed: FieldRef<"PasswordResetToken", 'Boolean'>
    readonly expiresAt: FieldRef<"PasswordResetToken", 'DateTime'>
    readonly createdAt: FieldRef<"PasswordResetToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PasswordResetToken findUnique
   */
  export type PasswordResetTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken findUniqueOrThrow
   */
  export type PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken findFirst
   */
  export type PasswordResetTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResetTokens.
     */
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken findFirstOrThrow
   */
  export type PasswordResetTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResetTokens.
     */
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken findMany
   */
  export type PasswordResetTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter, which PasswordResetTokens to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken create
   */
  export type PasswordResetTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a PasswordResetToken.
     */
    data: XOR<PasswordResetTokenCreateInput, PasswordResetTokenUncheckedCreateInput>
  }

  /**
   * PasswordResetToken createMany
   */
  export type PasswordResetTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PasswordResetTokens.
     */
    data: PasswordResetTokenCreateManyInput | PasswordResetTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PasswordResetToken createManyAndReturn
   */
  export type PasswordResetTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data used to create many PasswordResetTokens.
     */
    data: PasswordResetTokenCreateManyInput | PasswordResetTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PasswordResetToken update
   */
  export type PasswordResetTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a PasswordResetToken.
     */
    data: XOR<PasswordResetTokenUpdateInput, PasswordResetTokenUncheckedUpdateInput>
    /**
     * Choose, which PasswordResetToken to update.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken updateMany
   */
  export type PasswordResetTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PasswordResetTokens.
     */
    data: XOR<PasswordResetTokenUpdateManyMutationInput, PasswordResetTokenUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResetTokens to update
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to update.
     */
    limit?: number
  }

  /**
   * PasswordResetToken updateManyAndReturn
   */
  export type PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data used to update PasswordResetTokens.
     */
    data: XOR<PasswordResetTokenUpdateManyMutationInput, PasswordResetTokenUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResetTokens to update
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to update.
     */
    limit?: number
  }

  /**
   * PasswordResetToken upsert
   */
  export type PasswordResetTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the PasswordResetToken to update in case it exists.
     */
    where: PasswordResetTokenWhereUniqueInput
    /**
     * In case the PasswordResetToken found by the `where` argument doesn't exist, create a new PasswordResetToken with this data.
     */
    create: XOR<PasswordResetTokenCreateInput, PasswordResetTokenUncheckedCreateInput>
    /**
     * In case the PasswordResetToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PasswordResetTokenUpdateInput, PasswordResetTokenUncheckedUpdateInput>
  }

  /**
   * PasswordResetToken delete
   */
  export type PasswordResetTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter which PasswordResetToken to delete.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken deleteMany
   */
  export type PasswordResetTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResetTokens to delete
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to delete.
     */
    limit?: number
  }

  /**
   * PasswordResetToken without action
   */
  export type PasswordResetTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const LegacySessionScalarFieldEnum: {
    sid: 'sid',
    sess: 'sess',
    expire: 'expire'
  };

  export type LegacySessionScalarFieldEnum = (typeof LegacySessionScalarFieldEnum)[keyof typeof LegacySessionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    firstName: 'firstName',
    lastName: 'lastName',
    profileImageUrl: 'profileImageUrl',
    primaryCommunity: 'primaryCommunity',
    username: 'username',
    bio: 'bio',
    location: 'location',
    website: 'website',
    status: 'status',
    statusMessage: 'statusMessage',
    timezone: 'timezone',
    dateOfBirth: 'dateOfBirth',
    isPrivate: 'isPrivate',
    showOnlineStatus: 'showOnlineStatus',
    allowDirectMessages: 'allowDirectMessages',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CommunityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    displayName: 'displayName',
    description: 'description',
    themeColor: 'themeColor',
    iconClass: 'iconClass',
    isActive: 'isActive',
    createdAt: 'createdAt'
  };

  export type CommunityScalarFieldEnum = (typeof CommunityScalarFieldEnum)[keyof typeof CommunityScalarFieldEnum]


  export const UserCommunityScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    communityId: 'communityId',
    isPrimary: 'isPrimary',
    joinedAt: 'joinedAt'
  };

  export type UserCommunityScalarFieldEnum = (typeof UserCommunityScalarFieldEnum)[keyof typeof UserCommunityScalarFieldEnum]


  export const ThemePreferenceScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    communityId: 'communityId',
    themeMode: 'themeMode',
    customColors: 'customColors',
    updatedAt: 'updatedAt'
  };

  export type ThemePreferenceScalarFieldEnum = (typeof ThemePreferenceScalarFieldEnum)[keyof typeof ThemePreferenceScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    type: 'type',
    date: 'date',
    time: 'time',
    location: 'location',
    communityId: 'communityId',
    creatorId: 'creatorId',
    hostId: 'hostId',
    coHostId: 'coHostId',
    maxAttendees: 'maxAttendees',
    isPublic: 'isPublic',
    status: 'status',
    playerSlots: 'playerSlots',
    alternateSlots: 'alternateSlots',
    gameFormat: 'gameFormat',
    powerLevel: 'powerLevel',
    isRecurring: 'isRecurring',
    recurrencePattern: 'recurrencePattern',
    recurrenceInterval: 'recurrenceInterval',
    recurrenceEndDate: 'recurrenceEndDate',
    parentEventId: 'parentEventId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const EventAttendeeScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    userId: 'userId',
    status: 'status',
    role: 'role',
    playerType: 'playerType',
    joinedAt: 'joinedAt'
  };

  export type EventAttendeeScalarFieldEnum = (typeof EventAttendeeScalarFieldEnum)[keyof typeof EventAttendeeScalarFieldEnum]


  export const TournamentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    gameFormat: 'gameFormat',
    communityId: 'communityId',
    organizerId: 'organizerId',
    maxParticipants: 'maxParticipants',
    currentParticipants: 'currentParticipants',
    status: 'status',
    startDate: 'startDate',
    endDate: 'endDate',
    bracketData: 'bracketData',
    prizePool: 'prizePool',
    rules: 'rules',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TournamentScalarFieldEnum = (typeof TournamentScalarFieldEnum)[keyof typeof TournamentScalarFieldEnum]


  export const TournamentParticipantScalarFieldEnum: {
    id: 'id',
    tournamentId: 'tournamentId',
    userId: 'userId',
    seed: 'seed',
    status: 'status',
    joinedAt: 'joinedAt'
  };

  export type TournamentParticipantScalarFieldEnum = (typeof TournamentParticipantScalarFieldEnum)[keyof typeof TournamentParticipantScalarFieldEnum]


  export const TournamentFormatScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    supportsSeeding: 'supportsSeeding',
    requiresEvenParticipants: 'requiresEvenParticipants',
    isActive: 'isActive'
  };

  export type TournamentFormatScalarFieldEnum = (typeof TournamentFormatScalarFieldEnum)[keyof typeof TournamentFormatScalarFieldEnum]


  export const TournamentRoundScalarFieldEnum: {
    id: 'id',
    tournamentId: 'tournamentId',
    roundNumber: 'roundNumber',
    name: 'name',
    status: 'status',
    startTime: 'startTime',
    endTime: 'endTime',
    createdAt: 'createdAt'
  };

  export type TournamentRoundScalarFieldEnum = (typeof TournamentRoundScalarFieldEnum)[keyof typeof TournamentRoundScalarFieldEnum]


  export const TournamentMatchScalarFieldEnum: {
    id: 'id',
    tournamentId: 'tournamentId',
    roundId: 'roundId',
    player1Id: 'player1Id',
    player2Id: 'player2Id',
    winnerId: 'winnerId',
    status: 'status',
    gameSessionId: 'gameSessionId',
    bracketPosition: 'bracketPosition',
    player1Score: 'player1Score',
    player2Score: 'player2Score',
    matchData: 'matchData',
    startTime: 'startTime',
    endTime: 'endTime',
    createdAt: 'createdAt'
  };

  export type TournamentMatchScalarFieldEnum = (typeof TournamentMatchScalarFieldEnum)[keyof typeof TournamentMatchScalarFieldEnum]


  export const MatchResultScalarFieldEnum: {
    id: 'id',
    matchId: 'matchId',
    winnerId: 'winnerId',
    loserId: 'loserId',
    winnerScore: 'winnerScore',
    loserScore: 'loserScore',
    gameLength: 'gameLength',
    resultType: 'resultType',
    notes: 'notes',
    reportedById: 'reportedById',
    verifiedById: 'verifiedById',
    isVerified: 'isVerified',
    createdAt: 'createdAt'
  };

  export type MatchResultScalarFieldEnum = (typeof MatchResultScalarFieldEnum)[keyof typeof MatchResultScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    message: 'message',
    type: 'type',
    isRead: 'isRead',
    actionUrl: 'actionUrl',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    senderId: 'senderId',
    receiverId: 'receiverId',
    subject: 'subject',
    content: 'content',
    isRead: 'isRead',
    createdAt: 'createdAt',
    editedAt: 'editedAt'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const GameSessionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    gameType: 'gameType',
    hostId: 'hostId',
    coHostId: 'coHostId',
    maxPlayers: 'maxPlayers',
    currentPlayers: 'currentPlayers',
    status: 'status',
    isPrivate: 'isPrivate',
    gameRoomUrl: 'gameRoomUrl',
    settings: 'settings',
    createdAt: 'createdAt',
    startedAt: 'startedAt',
    endedAt: 'endedAt'
  };

  export type GameSessionScalarFieldEnum = (typeof GameSessionScalarFieldEnum)[keyof typeof GameSessionScalarFieldEnum]


  export const UserSocialLinkScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    platform: 'platform',
    url: 'url',
    username: 'username',
    isPublic: 'isPublic',
    createdAt: 'createdAt'
  };

  export type UserSocialLinkScalarFieldEnum = (typeof UserSocialLinkScalarFieldEnum)[keyof typeof UserSocialLinkScalarFieldEnum]


  export const UserGamingProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    platform: 'platform',
    username: 'username',
    skillLevel: 'skillLevel',
    preferredFormats: 'preferredFormats',
    achievementBadges: 'achievementBadges',
    statistics: 'statistics',
    streamingSettings: 'streamingSettings',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserGamingProfileScalarFieldEnum = (typeof UserGamingProfileScalarFieldEnum)[keyof typeof UserGamingProfileScalarFieldEnum]


  export const FriendshipScalarFieldEnum: {
    id: 'id',
    requesterId: 'requesterId',
    receiverId: 'receiverId',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FriendshipScalarFieldEnum = (typeof FriendshipScalarFieldEnum)[keyof typeof FriendshipScalarFieldEnum]


  export const UserActivityScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    description: 'description',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type UserActivityScalarFieldEnum = (typeof UserActivityScalarFieldEnum)[keyof typeof UserActivityScalarFieldEnum]


  export const UserSettingsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    emailNotifications: 'emailNotifications',
    pushNotifications: 'pushNotifications',
    profileVisibility: 'profileVisibility',
    showOnlineStatus: 'showOnlineStatus',
    allowFriendRequests: 'allowFriendRequests',
    allowDirectMessages: 'allowDirectMessages',
    language: 'language',
    timezone: 'timezone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserSettingsScalarFieldEnum = (typeof UserSettingsScalarFieldEnum)[keyof typeof UserSettingsScalarFieldEnum]


  export const MatchmakingPreferenceScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    selectedGames: 'selectedGames',
    selectedFormats: 'selectedFormats',
    powerLevelMin: 'powerLevelMin',
    powerLevelMax: 'powerLevelMax',
    playstyle: 'playstyle',
    location: 'location',
    onlineOnly: 'onlineOnly',
    availability: 'availability',
    language: 'language',
    maxDistance: 'maxDistance',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MatchmakingPreferenceScalarFieldEnum = (typeof MatchmakingPreferenceScalarFieldEnum)[keyof typeof MatchmakingPreferenceScalarFieldEnum]


  export const ForumPostScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    authorId: 'authorId',
    communityId: 'communityId',
    category: 'category',
    isPinned: 'isPinned',
    isLocked: 'isLocked',
    viewCount: 'viewCount',
    likeCount: 'likeCount',
    replyCount: 'replyCount',
    lastReplyAt: 'lastReplyAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ForumPostScalarFieldEnum = (typeof ForumPostScalarFieldEnum)[keyof typeof ForumPostScalarFieldEnum]


  export const ForumReplyScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    authorId: 'authorId',
    content: 'content',
    parentReplyId: 'parentReplyId',
    likeCount: 'likeCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ForumReplyScalarFieldEnum = (typeof ForumReplyScalarFieldEnum)[keyof typeof ForumReplyScalarFieldEnum]


  export const ForumPostLikeScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type ForumPostLikeScalarFieldEnum = (typeof ForumPostLikeScalarFieldEnum)[keyof typeof ForumPostLikeScalarFieldEnum]


  export const ForumReplyLikeScalarFieldEnum: {
    id: 'id',
    replyId: 'replyId',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type ForumReplyLikeScalarFieldEnum = (typeof ForumReplyLikeScalarFieldEnum)[keyof typeof ForumReplyLikeScalarFieldEnum]


  export const PasswordResetTokenScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    isUsed: 'isUsed',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type PasswordResetTokenScalarFieldEnum = (typeof PasswordResetTokenScalarFieldEnum)[keyof typeof PasswordResetTokenScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "token" | "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type LegacySessionWhereInput = {
    AND?: LegacySessionWhereInput | LegacySessionWhereInput[]
    OR?: LegacySessionWhereInput[]
    NOT?: LegacySessionWhereInput | LegacySessionWhereInput[]
    sid?: StringFilter<"LegacySession"> | string
    sess?: JsonFilter<"LegacySession">
    expire?: DateTimeFilter<"LegacySession"> | Date | string
  }

  export type LegacySessionOrderByWithRelationInput = {
    sid?: SortOrder
    sess?: SortOrder
    expire?: SortOrder
  }

  export type LegacySessionWhereUniqueInput = Prisma.AtLeast<{
    sid?: string
    AND?: LegacySessionWhereInput | LegacySessionWhereInput[]
    OR?: LegacySessionWhereInput[]
    NOT?: LegacySessionWhereInput | LegacySessionWhereInput[]
    sess?: JsonFilter<"LegacySession">
    expire?: DateTimeFilter<"LegacySession"> | Date | string
  }, "sid">

  export type LegacySessionOrderByWithAggregationInput = {
    sid?: SortOrder
    sess?: SortOrder
    expire?: SortOrder
    _count?: LegacySessionCountOrderByAggregateInput
    _max?: LegacySessionMaxOrderByAggregateInput
    _min?: LegacySessionMinOrderByAggregateInput
  }

  export type LegacySessionScalarWhereWithAggregatesInput = {
    AND?: LegacySessionScalarWhereWithAggregatesInput | LegacySessionScalarWhereWithAggregatesInput[]
    OR?: LegacySessionScalarWhereWithAggregatesInput[]
    NOT?: LegacySessionScalarWhereWithAggregatesInput | LegacySessionScalarWhereWithAggregatesInput[]
    sid?: StringWithAggregatesFilter<"LegacySession"> | string
    sess?: JsonWithAggregatesFilter<"LegacySession">
    expire?: DateTimeWithAggregatesFilter<"LegacySession"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    profileImageUrl?: StringNullableFilter<"User"> | string | null
    primaryCommunity?: StringNullableFilter<"User"> | string | null
    username?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    location?: StringNullableFilter<"User"> | string | null
    website?: StringNullableFilter<"User"> | string | null
    status?: StringNullableFilter<"User"> | string | null
    statusMessage?: StringNullableFilter<"User"> | string | null
    timezone?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: StringNullableFilter<"User"> | string | null
    isPrivate?: BoolFilter<"User"> | boolean
    showOnlineStatus?: StringFilter<"User"> | string
    allowDirectMessages?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    userCommunities?: UserCommunityListRelationFilter
    themePreferences?: ThemePreferenceListRelationFilter
    createdEvents?: EventListRelationFilter
    hostedEvents?: EventListRelationFilter
    coHostedEvents?: EventListRelationFilter
    eventAttendees?: EventAttendeeListRelationFilter
    notifications?: NotificationListRelationFilter
    sentMessages?: MessageListRelationFilter
    receivedMessages?: MessageListRelationFilter
    hostedGameSessions?: GameSessionListRelationFilter
    coHostedGameSessions?: GameSessionListRelationFilter
    socialLinks?: UserSocialLinkListRelationFilter
    gamingProfiles?: UserGamingProfileListRelationFilter
    sentFriendRequests?: FriendshipListRelationFilter
    receivedFriendRequests?: FriendshipListRelationFilter
    activities?: UserActivityListRelationFilter
    settings?: UserSettingsListRelationFilter
    matchmakingPreferences?: MatchmakingPreferenceListRelationFilter
    organizedTournaments?: TournamentListRelationFilter
    tournamentParticipation?: TournamentParticipantListRelationFilter
    forumPosts?: ForumPostListRelationFilter
    forumReplies?: ForumReplyListRelationFilter
    forumPostLikes?: ForumPostLikeListRelationFilter
    forumReplyLikes?: ForumReplyLikeListRelationFilter
    tournamentMatchesPlayer1?: TournamentMatchListRelationFilter
    tournamentMatchesPlayer2?: TournamentMatchListRelationFilter
    tournamentMatchWins?: TournamentMatchListRelationFilter
    matchResultsWins?: MatchResultListRelationFilter
    matchResultsLosses?: MatchResultListRelationFilter
    matchResultsReported?: MatchResultListRelationFilter
    matchResultsVerified?: MatchResultListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    profileImageUrl?: SortOrderInput | SortOrder
    primaryCommunity?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    statusMessage?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    isPrivate?: SortOrder
    showOnlineStatus?: SortOrder
    allowDirectMessages?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    userCommunities?: UserCommunityOrderByRelationAggregateInput
    themePreferences?: ThemePreferenceOrderByRelationAggregateInput
    createdEvents?: EventOrderByRelationAggregateInput
    hostedEvents?: EventOrderByRelationAggregateInput
    coHostedEvents?: EventOrderByRelationAggregateInput
    eventAttendees?: EventAttendeeOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    sentMessages?: MessageOrderByRelationAggregateInput
    receivedMessages?: MessageOrderByRelationAggregateInput
    hostedGameSessions?: GameSessionOrderByRelationAggregateInput
    coHostedGameSessions?: GameSessionOrderByRelationAggregateInput
    socialLinks?: UserSocialLinkOrderByRelationAggregateInput
    gamingProfiles?: UserGamingProfileOrderByRelationAggregateInput
    sentFriendRequests?: FriendshipOrderByRelationAggregateInput
    receivedFriendRequests?: FriendshipOrderByRelationAggregateInput
    activities?: UserActivityOrderByRelationAggregateInput
    settings?: UserSettingsOrderByRelationAggregateInput
    matchmakingPreferences?: MatchmakingPreferenceOrderByRelationAggregateInput
    organizedTournaments?: TournamentOrderByRelationAggregateInput
    tournamentParticipation?: TournamentParticipantOrderByRelationAggregateInput
    forumPosts?: ForumPostOrderByRelationAggregateInput
    forumReplies?: ForumReplyOrderByRelationAggregateInput
    forumPostLikes?: ForumPostLikeOrderByRelationAggregateInput
    forumReplyLikes?: ForumReplyLikeOrderByRelationAggregateInput
    tournamentMatchesPlayer1?: TournamentMatchOrderByRelationAggregateInput
    tournamentMatchesPlayer2?: TournamentMatchOrderByRelationAggregateInput
    tournamentMatchWins?: TournamentMatchOrderByRelationAggregateInput
    matchResultsWins?: MatchResultOrderByRelationAggregateInput
    matchResultsLosses?: MatchResultOrderByRelationAggregateInput
    matchResultsReported?: MatchResultOrderByRelationAggregateInput
    matchResultsVerified?: MatchResultOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    profileImageUrl?: StringNullableFilter<"User"> | string | null
    primaryCommunity?: StringNullableFilter<"User"> | string | null
    username?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    location?: StringNullableFilter<"User"> | string | null
    website?: StringNullableFilter<"User"> | string | null
    status?: StringNullableFilter<"User"> | string | null
    statusMessage?: StringNullableFilter<"User"> | string | null
    timezone?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: StringNullableFilter<"User"> | string | null
    isPrivate?: BoolFilter<"User"> | boolean
    showOnlineStatus?: StringFilter<"User"> | string
    allowDirectMessages?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    userCommunities?: UserCommunityListRelationFilter
    themePreferences?: ThemePreferenceListRelationFilter
    createdEvents?: EventListRelationFilter
    hostedEvents?: EventListRelationFilter
    coHostedEvents?: EventListRelationFilter
    eventAttendees?: EventAttendeeListRelationFilter
    notifications?: NotificationListRelationFilter
    sentMessages?: MessageListRelationFilter
    receivedMessages?: MessageListRelationFilter
    hostedGameSessions?: GameSessionListRelationFilter
    coHostedGameSessions?: GameSessionListRelationFilter
    socialLinks?: UserSocialLinkListRelationFilter
    gamingProfiles?: UserGamingProfileListRelationFilter
    sentFriendRequests?: FriendshipListRelationFilter
    receivedFriendRequests?: FriendshipListRelationFilter
    activities?: UserActivityListRelationFilter
    settings?: UserSettingsListRelationFilter
    matchmakingPreferences?: MatchmakingPreferenceListRelationFilter
    organizedTournaments?: TournamentListRelationFilter
    tournamentParticipation?: TournamentParticipantListRelationFilter
    forumPosts?: ForumPostListRelationFilter
    forumReplies?: ForumReplyListRelationFilter
    forumPostLikes?: ForumPostLikeListRelationFilter
    forumReplyLikes?: ForumReplyLikeListRelationFilter
    tournamentMatchesPlayer1?: TournamentMatchListRelationFilter
    tournamentMatchesPlayer2?: TournamentMatchListRelationFilter
    tournamentMatchWins?: TournamentMatchListRelationFilter
    matchResultsWins?: MatchResultListRelationFilter
    matchResultsLosses?: MatchResultListRelationFilter
    matchResultsReported?: MatchResultListRelationFilter
    matchResultsVerified?: MatchResultListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    profileImageUrl?: SortOrderInput | SortOrder
    primaryCommunity?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    statusMessage?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    isPrivate?: SortOrder
    showOnlineStatus?: SortOrder
    allowDirectMessages?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    profileImageUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    primaryCommunity?: StringNullableWithAggregatesFilter<"User"> | string | null
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    location?: StringNullableWithAggregatesFilter<"User"> | string | null
    website?: StringNullableWithAggregatesFilter<"User"> | string | null
    status?: StringNullableWithAggregatesFilter<"User"> | string | null
    statusMessage?: StringNullableWithAggregatesFilter<"User"> | string | null
    timezone?: StringNullableWithAggregatesFilter<"User"> | string | null
    dateOfBirth?: StringNullableWithAggregatesFilter<"User"> | string | null
    isPrivate?: BoolWithAggregatesFilter<"User"> | boolean
    showOnlineStatus?: StringWithAggregatesFilter<"User"> | string
    allowDirectMessages?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CommunityWhereInput = {
    AND?: CommunityWhereInput | CommunityWhereInput[]
    OR?: CommunityWhereInput[]
    NOT?: CommunityWhereInput | CommunityWhereInput[]
    id?: StringFilter<"Community"> | string
    name?: StringFilter<"Community"> | string
    displayName?: StringFilter<"Community"> | string
    description?: StringNullableFilter<"Community"> | string | null
    themeColor?: StringFilter<"Community"> | string
    iconClass?: StringFilter<"Community"> | string
    isActive?: BoolFilter<"Community"> | boolean
    createdAt?: DateTimeFilter<"Community"> | Date | string
    userCommunities?: UserCommunityListRelationFilter
    themePreferences?: ThemePreferenceListRelationFilter
    events?: EventListRelationFilter
    forumPosts?: ForumPostListRelationFilter
    tournaments?: TournamentListRelationFilter
  }

  export type CommunityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    description?: SortOrderInput | SortOrder
    themeColor?: SortOrder
    iconClass?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    userCommunities?: UserCommunityOrderByRelationAggregateInput
    themePreferences?: ThemePreferenceOrderByRelationAggregateInput
    events?: EventOrderByRelationAggregateInput
    forumPosts?: ForumPostOrderByRelationAggregateInput
    tournaments?: TournamentOrderByRelationAggregateInput
  }

  export type CommunityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommunityWhereInput | CommunityWhereInput[]
    OR?: CommunityWhereInput[]
    NOT?: CommunityWhereInput | CommunityWhereInput[]
    name?: StringFilter<"Community"> | string
    displayName?: StringFilter<"Community"> | string
    description?: StringNullableFilter<"Community"> | string | null
    themeColor?: StringFilter<"Community"> | string
    iconClass?: StringFilter<"Community"> | string
    isActive?: BoolFilter<"Community"> | boolean
    createdAt?: DateTimeFilter<"Community"> | Date | string
    userCommunities?: UserCommunityListRelationFilter
    themePreferences?: ThemePreferenceListRelationFilter
    events?: EventListRelationFilter
    forumPosts?: ForumPostListRelationFilter
    tournaments?: TournamentListRelationFilter
  }, "id">

  export type CommunityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    description?: SortOrderInput | SortOrder
    themeColor?: SortOrder
    iconClass?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    _count?: CommunityCountOrderByAggregateInput
    _max?: CommunityMaxOrderByAggregateInput
    _min?: CommunityMinOrderByAggregateInput
  }

  export type CommunityScalarWhereWithAggregatesInput = {
    AND?: CommunityScalarWhereWithAggregatesInput | CommunityScalarWhereWithAggregatesInput[]
    OR?: CommunityScalarWhereWithAggregatesInput[]
    NOT?: CommunityScalarWhereWithAggregatesInput | CommunityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Community"> | string
    name?: StringWithAggregatesFilter<"Community"> | string
    displayName?: StringWithAggregatesFilter<"Community"> | string
    description?: StringNullableWithAggregatesFilter<"Community"> | string | null
    themeColor?: StringWithAggregatesFilter<"Community"> | string
    iconClass?: StringWithAggregatesFilter<"Community"> | string
    isActive?: BoolWithAggregatesFilter<"Community"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Community"> | Date | string
  }

  export type UserCommunityWhereInput = {
    AND?: UserCommunityWhereInput | UserCommunityWhereInput[]
    OR?: UserCommunityWhereInput[]
    NOT?: UserCommunityWhereInput | UserCommunityWhereInput[]
    id?: StringFilter<"UserCommunity"> | string
    userId?: StringFilter<"UserCommunity"> | string
    communityId?: StringFilter<"UserCommunity"> | string
    isPrimary?: BoolFilter<"UserCommunity"> | boolean
    joinedAt?: DateTimeFilter<"UserCommunity"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    community?: XOR<CommunityScalarRelationFilter, CommunityWhereInput>
  }

  export type UserCommunityOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    communityId?: SortOrder
    isPrimary?: SortOrder
    joinedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    community?: CommunityOrderByWithRelationInput
  }

  export type UserCommunityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserCommunityWhereInput | UserCommunityWhereInput[]
    OR?: UserCommunityWhereInput[]
    NOT?: UserCommunityWhereInput | UserCommunityWhereInput[]
    userId?: StringFilter<"UserCommunity"> | string
    communityId?: StringFilter<"UserCommunity"> | string
    isPrimary?: BoolFilter<"UserCommunity"> | boolean
    joinedAt?: DateTimeFilter<"UserCommunity"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    community?: XOR<CommunityScalarRelationFilter, CommunityWhereInput>
  }, "id">

  export type UserCommunityOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    communityId?: SortOrder
    isPrimary?: SortOrder
    joinedAt?: SortOrder
    _count?: UserCommunityCountOrderByAggregateInput
    _max?: UserCommunityMaxOrderByAggregateInput
    _min?: UserCommunityMinOrderByAggregateInput
  }

  export type UserCommunityScalarWhereWithAggregatesInput = {
    AND?: UserCommunityScalarWhereWithAggregatesInput | UserCommunityScalarWhereWithAggregatesInput[]
    OR?: UserCommunityScalarWhereWithAggregatesInput[]
    NOT?: UserCommunityScalarWhereWithAggregatesInput | UserCommunityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserCommunity"> | string
    userId?: StringWithAggregatesFilter<"UserCommunity"> | string
    communityId?: StringWithAggregatesFilter<"UserCommunity"> | string
    isPrimary?: BoolWithAggregatesFilter<"UserCommunity"> | boolean
    joinedAt?: DateTimeWithAggregatesFilter<"UserCommunity"> | Date | string
  }

  export type ThemePreferenceWhereInput = {
    AND?: ThemePreferenceWhereInput | ThemePreferenceWhereInput[]
    OR?: ThemePreferenceWhereInput[]
    NOT?: ThemePreferenceWhereInput | ThemePreferenceWhereInput[]
    id?: StringFilter<"ThemePreference"> | string
    userId?: StringFilter<"ThemePreference"> | string
    communityId?: StringNullableFilter<"ThemePreference"> | string | null
    themeMode?: StringFilter<"ThemePreference"> | string
    customColors?: JsonNullableFilter<"ThemePreference">
    updatedAt?: DateTimeFilter<"ThemePreference"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    community?: XOR<CommunityNullableScalarRelationFilter, CommunityWhereInput> | null
  }

  export type ThemePreferenceOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    communityId?: SortOrderInput | SortOrder
    themeMode?: SortOrder
    customColors?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    community?: CommunityOrderByWithRelationInput
  }

  export type ThemePreferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ThemePreferenceWhereInput | ThemePreferenceWhereInput[]
    OR?: ThemePreferenceWhereInput[]
    NOT?: ThemePreferenceWhereInput | ThemePreferenceWhereInput[]
    userId?: StringFilter<"ThemePreference"> | string
    communityId?: StringNullableFilter<"ThemePreference"> | string | null
    themeMode?: StringFilter<"ThemePreference"> | string
    customColors?: JsonNullableFilter<"ThemePreference">
    updatedAt?: DateTimeFilter<"ThemePreference"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    community?: XOR<CommunityNullableScalarRelationFilter, CommunityWhereInput> | null
  }, "id">

  export type ThemePreferenceOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    communityId?: SortOrderInput | SortOrder
    themeMode?: SortOrder
    customColors?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    _count?: ThemePreferenceCountOrderByAggregateInput
    _max?: ThemePreferenceMaxOrderByAggregateInput
    _min?: ThemePreferenceMinOrderByAggregateInput
  }

  export type ThemePreferenceScalarWhereWithAggregatesInput = {
    AND?: ThemePreferenceScalarWhereWithAggregatesInput | ThemePreferenceScalarWhereWithAggregatesInput[]
    OR?: ThemePreferenceScalarWhereWithAggregatesInput[]
    NOT?: ThemePreferenceScalarWhereWithAggregatesInput | ThemePreferenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ThemePreference"> | string
    userId?: StringWithAggregatesFilter<"ThemePreference"> | string
    communityId?: StringNullableWithAggregatesFilter<"ThemePreference"> | string | null
    themeMode?: StringWithAggregatesFilter<"ThemePreference"> | string
    customColors?: JsonNullableWithAggregatesFilter<"ThemePreference">
    updatedAt?: DateTimeWithAggregatesFilter<"ThemePreference"> | Date | string
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    type?: StringFilter<"Event"> | string
    date?: StringFilter<"Event"> | string
    time?: StringFilter<"Event"> | string
    location?: StringFilter<"Event"> | string
    communityId?: StringNullableFilter<"Event"> | string | null
    creatorId?: StringFilter<"Event"> | string
    hostId?: StringFilter<"Event"> | string
    coHostId?: StringNullableFilter<"Event"> | string | null
    maxAttendees?: IntNullableFilter<"Event"> | number | null
    isPublic?: BoolFilter<"Event"> | boolean
    status?: StringFilter<"Event"> | string
    playerSlots?: IntFilter<"Event"> | number
    alternateSlots?: IntFilter<"Event"> | number
    gameFormat?: StringNullableFilter<"Event"> | string | null
    powerLevel?: IntNullableFilter<"Event"> | number | null
    isRecurring?: BoolFilter<"Event"> | boolean
    recurrencePattern?: StringNullableFilter<"Event"> | string | null
    recurrenceInterval?: IntFilter<"Event"> | number
    recurrenceEndDate?: StringNullableFilter<"Event"> | string | null
    parentEventId?: StringNullableFilter<"Event"> | string | null
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    community?: XOR<CommunityNullableScalarRelationFilter, CommunityWhereInput> | null
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    host?: XOR<UserScalarRelationFilter, UserWhereInput>
    coHost?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    attendees?: EventAttendeeListRelationFilter
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    date?: SortOrder
    time?: SortOrder
    location?: SortOrder
    communityId?: SortOrderInput | SortOrder
    creatorId?: SortOrder
    hostId?: SortOrder
    coHostId?: SortOrderInput | SortOrder
    maxAttendees?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    status?: SortOrder
    playerSlots?: SortOrder
    alternateSlots?: SortOrder
    gameFormat?: SortOrderInput | SortOrder
    powerLevel?: SortOrderInput | SortOrder
    isRecurring?: SortOrder
    recurrencePattern?: SortOrderInput | SortOrder
    recurrenceInterval?: SortOrder
    recurrenceEndDate?: SortOrderInput | SortOrder
    parentEventId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    community?: CommunityOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    host?: UserOrderByWithRelationInput
    coHost?: UserOrderByWithRelationInput
    attendees?: EventAttendeeOrderByRelationAggregateInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    title?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    type?: StringFilter<"Event"> | string
    date?: StringFilter<"Event"> | string
    time?: StringFilter<"Event"> | string
    location?: StringFilter<"Event"> | string
    communityId?: StringNullableFilter<"Event"> | string | null
    creatorId?: StringFilter<"Event"> | string
    hostId?: StringFilter<"Event"> | string
    coHostId?: StringNullableFilter<"Event"> | string | null
    maxAttendees?: IntNullableFilter<"Event"> | number | null
    isPublic?: BoolFilter<"Event"> | boolean
    status?: StringFilter<"Event"> | string
    playerSlots?: IntFilter<"Event"> | number
    alternateSlots?: IntFilter<"Event"> | number
    gameFormat?: StringNullableFilter<"Event"> | string | null
    powerLevel?: IntNullableFilter<"Event"> | number | null
    isRecurring?: BoolFilter<"Event"> | boolean
    recurrencePattern?: StringNullableFilter<"Event"> | string | null
    recurrenceInterval?: IntFilter<"Event"> | number
    recurrenceEndDate?: StringNullableFilter<"Event"> | string | null
    parentEventId?: StringNullableFilter<"Event"> | string | null
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    community?: XOR<CommunityNullableScalarRelationFilter, CommunityWhereInput> | null
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    host?: XOR<UserScalarRelationFilter, UserWhereInput>
    coHost?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    attendees?: EventAttendeeListRelationFilter
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    date?: SortOrder
    time?: SortOrder
    location?: SortOrder
    communityId?: SortOrderInput | SortOrder
    creatorId?: SortOrder
    hostId?: SortOrder
    coHostId?: SortOrderInput | SortOrder
    maxAttendees?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    status?: SortOrder
    playerSlots?: SortOrder
    alternateSlots?: SortOrder
    gameFormat?: SortOrderInput | SortOrder
    powerLevel?: SortOrderInput | SortOrder
    isRecurring?: SortOrder
    recurrencePattern?: SortOrderInput | SortOrder
    recurrenceInterval?: SortOrder
    recurrenceEndDate?: SortOrderInput | SortOrder
    parentEventId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _avg?: EventAvgOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
    _sum?: EventSumOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Event"> | string
    title?: StringWithAggregatesFilter<"Event"> | string
    description?: StringNullableWithAggregatesFilter<"Event"> | string | null
    type?: StringWithAggregatesFilter<"Event"> | string
    date?: StringWithAggregatesFilter<"Event"> | string
    time?: StringWithAggregatesFilter<"Event"> | string
    location?: StringWithAggregatesFilter<"Event"> | string
    communityId?: StringNullableWithAggregatesFilter<"Event"> | string | null
    creatorId?: StringWithAggregatesFilter<"Event"> | string
    hostId?: StringWithAggregatesFilter<"Event"> | string
    coHostId?: StringNullableWithAggregatesFilter<"Event"> | string | null
    maxAttendees?: IntNullableWithAggregatesFilter<"Event"> | number | null
    isPublic?: BoolWithAggregatesFilter<"Event"> | boolean
    status?: StringWithAggregatesFilter<"Event"> | string
    playerSlots?: IntWithAggregatesFilter<"Event"> | number
    alternateSlots?: IntWithAggregatesFilter<"Event"> | number
    gameFormat?: StringNullableWithAggregatesFilter<"Event"> | string | null
    powerLevel?: IntNullableWithAggregatesFilter<"Event"> | number | null
    isRecurring?: BoolWithAggregatesFilter<"Event"> | boolean
    recurrencePattern?: StringNullableWithAggregatesFilter<"Event"> | string | null
    recurrenceInterval?: IntWithAggregatesFilter<"Event"> | number
    recurrenceEndDate?: StringNullableWithAggregatesFilter<"Event"> | string | null
    parentEventId?: StringNullableWithAggregatesFilter<"Event"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
  }

  export type EventAttendeeWhereInput = {
    AND?: EventAttendeeWhereInput | EventAttendeeWhereInput[]
    OR?: EventAttendeeWhereInput[]
    NOT?: EventAttendeeWhereInput | EventAttendeeWhereInput[]
    id?: StringFilter<"EventAttendee"> | string
    eventId?: StringFilter<"EventAttendee"> | string
    userId?: StringFilter<"EventAttendee"> | string
    status?: StringFilter<"EventAttendee"> | string
    role?: StringFilter<"EventAttendee"> | string
    playerType?: StringFilter<"EventAttendee"> | string
    joinedAt?: DateTimeFilter<"EventAttendee"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type EventAttendeeOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    role?: SortOrder
    playerType?: SortOrder
    joinedAt?: SortOrder
    event?: EventOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type EventAttendeeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventAttendeeWhereInput | EventAttendeeWhereInput[]
    OR?: EventAttendeeWhereInput[]
    NOT?: EventAttendeeWhereInput | EventAttendeeWhereInput[]
    eventId?: StringFilter<"EventAttendee"> | string
    userId?: StringFilter<"EventAttendee"> | string
    status?: StringFilter<"EventAttendee"> | string
    role?: StringFilter<"EventAttendee"> | string
    playerType?: StringFilter<"EventAttendee"> | string
    joinedAt?: DateTimeFilter<"EventAttendee"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type EventAttendeeOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    role?: SortOrder
    playerType?: SortOrder
    joinedAt?: SortOrder
    _count?: EventAttendeeCountOrderByAggregateInput
    _max?: EventAttendeeMaxOrderByAggregateInput
    _min?: EventAttendeeMinOrderByAggregateInput
  }

  export type EventAttendeeScalarWhereWithAggregatesInput = {
    AND?: EventAttendeeScalarWhereWithAggregatesInput | EventAttendeeScalarWhereWithAggregatesInput[]
    OR?: EventAttendeeScalarWhereWithAggregatesInput[]
    NOT?: EventAttendeeScalarWhereWithAggregatesInput | EventAttendeeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EventAttendee"> | string
    eventId?: StringWithAggregatesFilter<"EventAttendee"> | string
    userId?: StringWithAggregatesFilter<"EventAttendee"> | string
    status?: StringWithAggregatesFilter<"EventAttendee"> | string
    role?: StringWithAggregatesFilter<"EventAttendee"> | string
    playerType?: StringWithAggregatesFilter<"EventAttendee"> | string
    joinedAt?: DateTimeWithAggregatesFilter<"EventAttendee"> | Date | string
  }

  export type TournamentWhereInput = {
    AND?: TournamentWhereInput | TournamentWhereInput[]
    OR?: TournamentWhereInput[]
    NOT?: TournamentWhereInput | TournamentWhereInput[]
    id?: StringFilter<"Tournament"> | string
    name?: StringFilter<"Tournament"> | string
    description?: StringNullableFilter<"Tournament"> | string | null
    gameFormat?: StringFilter<"Tournament"> | string
    communityId?: StringFilter<"Tournament"> | string
    organizerId?: StringFilter<"Tournament"> | string
    maxParticipants?: IntFilter<"Tournament"> | number
    currentParticipants?: IntFilter<"Tournament"> | number
    status?: StringFilter<"Tournament"> | string
    startDate?: DateTimeNullableFilter<"Tournament"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Tournament"> | Date | string | null
    bracketData?: JsonNullableFilter<"Tournament">
    prizePool?: StringNullableFilter<"Tournament"> | string | null
    rules?: StringNullableFilter<"Tournament"> | string | null
    createdAt?: DateTimeFilter<"Tournament"> | Date | string
    updatedAt?: DateTimeFilter<"Tournament"> | Date | string
    community?: XOR<CommunityScalarRelationFilter, CommunityWhereInput>
    organizer?: XOR<UserScalarRelationFilter, UserWhereInput>
    participants?: TournamentParticipantListRelationFilter
    rounds?: TournamentRoundListRelationFilter
    matches?: TournamentMatchListRelationFilter
  }

  export type TournamentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    gameFormat?: SortOrder
    communityId?: SortOrder
    organizerId?: SortOrder
    maxParticipants?: SortOrder
    currentParticipants?: SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    bracketData?: SortOrderInput | SortOrder
    prizePool?: SortOrderInput | SortOrder
    rules?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    community?: CommunityOrderByWithRelationInput
    organizer?: UserOrderByWithRelationInput
    participants?: TournamentParticipantOrderByRelationAggregateInput
    rounds?: TournamentRoundOrderByRelationAggregateInput
    matches?: TournamentMatchOrderByRelationAggregateInput
  }

  export type TournamentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TournamentWhereInput | TournamentWhereInput[]
    OR?: TournamentWhereInput[]
    NOT?: TournamentWhereInput | TournamentWhereInput[]
    name?: StringFilter<"Tournament"> | string
    description?: StringNullableFilter<"Tournament"> | string | null
    gameFormat?: StringFilter<"Tournament"> | string
    communityId?: StringFilter<"Tournament"> | string
    organizerId?: StringFilter<"Tournament"> | string
    maxParticipants?: IntFilter<"Tournament"> | number
    currentParticipants?: IntFilter<"Tournament"> | number
    status?: StringFilter<"Tournament"> | string
    startDate?: DateTimeNullableFilter<"Tournament"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Tournament"> | Date | string | null
    bracketData?: JsonNullableFilter<"Tournament">
    prizePool?: StringNullableFilter<"Tournament"> | string | null
    rules?: StringNullableFilter<"Tournament"> | string | null
    createdAt?: DateTimeFilter<"Tournament"> | Date | string
    updatedAt?: DateTimeFilter<"Tournament"> | Date | string
    community?: XOR<CommunityScalarRelationFilter, CommunityWhereInput>
    organizer?: XOR<UserScalarRelationFilter, UserWhereInput>
    participants?: TournamentParticipantListRelationFilter
    rounds?: TournamentRoundListRelationFilter
    matches?: TournamentMatchListRelationFilter
  }, "id">

  export type TournamentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    gameFormat?: SortOrder
    communityId?: SortOrder
    organizerId?: SortOrder
    maxParticipants?: SortOrder
    currentParticipants?: SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    bracketData?: SortOrderInput | SortOrder
    prizePool?: SortOrderInput | SortOrder
    rules?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TournamentCountOrderByAggregateInput
    _avg?: TournamentAvgOrderByAggregateInput
    _max?: TournamentMaxOrderByAggregateInput
    _min?: TournamentMinOrderByAggregateInput
    _sum?: TournamentSumOrderByAggregateInput
  }

  export type TournamentScalarWhereWithAggregatesInput = {
    AND?: TournamentScalarWhereWithAggregatesInput | TournamentScalarWhereWithAggregatesInput[]
    OR?: TournamentScalarWhereWithAggregatesInput[]
    NOT?: TournamentScalarWhereWithAggregatesInput | TournamentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tournament"> | string
    name?: StringWithAggregatesFilter<"Tournament"> | string
    description?: StringNullableWithAggregatesFilter<"Tournament"> | string | null
    gameFormat?: StringWithAggregatesFilter<"Tournament"> | string
    communityId?: StringWithAggregatesFilter<"Tournament"> | string
    organizerId?: StringWithAggregatesFilter<"Tournament"> | string
    maxParticipants?: IntWithAggregatesFilter<"Tournament"> | number
    currentParticipants?: IntWithAggregatesFilter<"Tournament"> | number
    status?: StringWithAggregatesFilter<"Tournament"> | string
    startDate?: DateTimeNullableWithAggregatesFilter<"Tournament"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"Tournament"> | Date | string | null
    bracketData?: JsonNullableWithAggregatesFilter<"Tournament">
    prizePool?: StringNullableWithAggregatesFilter<"Tournament"> | string | null
    rules?: StringNullableWithAggregatesFilter<"Tournament"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Tournament"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tournament"> | Date | string
  }

  export type TournamentParticipantWhereInput = {
    AND?: TournamentParticipantWhereInput | TournamentParticipantWhereInput[]
    OR?: TournamentParticipantWhereInput[]
    NOT?: TournamentParticipantWhereInput | TournamentParticipantWhereInput[]
    id?: StringFilter<"TournamentParticipant"> | string
    tournamentId?: StringFilter<"TournamentParticipant"> | string
    userId?: StringFilter<"TournamentParticipant"> | string
    seed?: IntNullableFilter<"TournamentParticipant"> | number | null
    status?: StringFilter<"TournamentParticipant"> | string
    joinedAt?: DateTimeFilter<"TournamentParticipant"> | Date | string
    tournament?: XOR<TournamentScalarRelationFilter, TournamentWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TournamentParticipantOrderByWithRelationInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    userId?: SortOrder
    seed?: SortOrderInput | SortOrder
    status?: SortOrder
    joinedAt?: SortOrder
    tournament?: TournamentOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type TournamentParticipantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TournamentParticipantWhereInput | TournamentParticipantWhereInput[]
    OR?: TournamentParticipantWhereInput[]
    NOT?: TournamentParticipantWhereInput | TournamentParticipantWhereInput[]
    tournamentId?: StringFilter<"TournamentParticipant"> | string
    userId?: StringFilter<"TournamentParticipant"> | string
    seed?: IntNullableFilter<"TournamentParticipant"> | number | null
    status?: StringFilter<"TournamentParticipant"> | string
    joinedAt?: DateTimeFilter<"TournamentParticipant"> | Date | string
    tournament?: XOR<TournamentScalarRelationFilter, TournamentWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type TournamentParticipantOrderByWithAggregationInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    userId?: SortOrder
    seed?: SortOrderInput | SortOrder
    status?: SortOrder
    joinedAt?: SortOrder
    _count?: TournamentParticipantCountOrderByAggregateInput
    _avg?: TournamentParticipantAvgOrderByAggregateInput
    _max?: TournamentParticipantMaxOrderByAggregateInput
    _min?: TournamentParticipantMinOrderByAggregateInput
    _sum?: TournamentParticipantSumOrderByAggregateInput
  }

  export type TournamentParticipantScalarWhereWithAggregatesInput = {
    AND?: TournamentParticipantScalarWhereWithAggregatesInput | TournamentParticipantScalarWhereWithAggregatesInput[]
    OR?: TournamentParticipantScalarWhereWithAggregatesInput[]
    NOT?: TournamentParticipantScalarWhereWithAggregatesInput | TournamentParticipantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TournamentParticipant"> | string
    tournamentId?: StringWithAggregatesFilter<"TournamentParticipant"> | string
    userId?: StringWithAggregatesFilter<"TournamentParticipant"> | string
    seed?: IntNullableWithAggregatesFilter<"TournamentParticipant"> | number | null
    status?: StringWithAggregatesFilter<"TournamentParticipant"> | string
    joinedAt?: DateTimeWithAggregatesFilter<"TournamentParticipant"> | Date | string
  }

  export type TournamentFormatWhereInput = {
    AND?: TournamentFormatWhereInput | TournamentFormatWhereInput[]
    OR?: TournamentFormatWhereInput[]
    NOT?: TournamentFormatWhereInput | TournamentFormatWhereInput[]
    id?: StringFilter<"TournamentFormat"> | string
    name?: StringFilter<"TournamentFormat"> | string
    code?: StringFilter<"TournamentFormat"> | string
    description?: StringNullableFilter<"TournamentFormat"> | string | null
    supportsSeeding?: BoolFilter<"TournamentFormat"> | boolean
    requiresEvenParticipants?: BoolFilter<"TournamentFormat"> | boolean
    isActive?: BoolFilter<"TournamentFormat"> | boolean
  }

  export type TournamentFormatOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    supportsSeeding?: SortOrder
    requiresEvenParticipants?: SortOrder
    isActive?: SortOrder
  }

  export type TournamentFormatWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: TournamentFormatWhereInput | TournamentFormatWhereInput[]
    OR?: TournamentFormatWhereInput[]
    NOT?: TournamentFormatWhereInput | TournamentFormatWhereInput[]
    name?: StringFilter<"TournamentFormat"> | string
    description?: StringNullableFilter<"TournamentFormat"> | string | null
    supportsSeeding?: BoolFilter<"TournamentFormat"> | boolean
    requiresEvenParticipants?: BoolFilter<"TournamentFormat"> | boolean
    isActive?: BoolFilter<"TournamentFormat"> | boolean
  }, "id" | "code">

  export type TournamentFormatOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    supportsSeeding?: SortOrder
    requiresEvenParticipants?: SortOrder
    isActive?: SortOrder
    _count?: TournamentFormatCountOrderByAggregateInput
    _max?: TournamentFormatMaxOrderByAggregateInput
    _min?: TournamentFormatMinOrderByAggregateInput
  }

  export type TournamentFormatScalarWhereWithAggregatesInput = {
    AND?: TournamentFormatScalarWhereWithAggregatesInput | TournamentFormatScalarWhereWithAggregatesInput[]
    OR?: TournamentFormatScalarWhereWithAggregatesInput[]
    NOT?: TournamentFormatScalarWhereWithAggregatesInput | TournamentFormatScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TournamentFormat"> | string
    name?: StringWithAggregatesFilter<"TournamentFormat"> | string
    code?: StringWithAggregatesFilter<"TournamentFormat"> | string
    description?: StringNullableWithAggregatesFilter<"TournamentFormat"> | string | null
    supportsSeeding?: BoolWithAggregatesFilter<"TournamentFormat"> | boolean
    requiresEvenParticipants?: BoolWithAggregatesFilter<"TournamentFormat"> | boolean
    isActive?: BoolWithAggregatesFilter<"TournamentFormat"> | boolean
  }

  export type TournamentRoundWhereInput = {
    AND?: TournamentRoundWhereInput | TournamentRoundWhereInput[]
    OR?: TournamentRoundWhereInput[]
    NOT?: TournamentRoundWhereInput | TournamentRoundWhereInput[]
    id?: StringFilter<"TournamentRound"> | string
    tournamentId?: StringFilter<"TournamentRound"> | string
    roundNumber?: IntFilter<"TournamentRound"> | number
    name?: StringNullableFilter<"TournamentRound"> | string | null
    status?: StringFilter<"TournamentRound"> | string
    startTime?: DateTimeNullableFilter<"TournamentRound"> | Date | string | null
    endTime?: DateTimeNullableFilter<"TournamentRound"> | Date | string | null
    createdAt?: DateTimeFilter<"TournamentRound"> | Date | string
    tournament?: XOR<TournamentScalarRelationFilter, TournamentWhereInput>
    matches?: TournamentMatchListRelationFilter
  }

  export type TournamentRoundOrderByWithRelationInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    roundNumber?: SortOrder
    name?: SortOrderInput | SortOrder
    status?: SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    tournament?: TournamentOrderByWithRelationInput
    matches?: TournamentMatchOrderByRelationAggregateInput
  }

  export type TournamentRoundWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TournamentRoundWhereInput | TournamentRoundWhereInput[]
    OR?: TournamentRoundWhereInput[]
    NOT?: TournamentRoundWhereInput | TournamentRoundWhereInput[]
    tournamentId?: StringFilter<"TournamentRound"> | string
    roundNumber?: IntFilter<"TournamentRound"> | number
    name?: StringNullableFilter<"TournamentRound"> | string | null
    status?: StringFilter<"TournamentRound"> | string
    startTime?: DateTimeNullableFilter<"TournamentRound"> | Date | string | null
    endTime?: DateTimeNullableFilter<"TournamentRound"> | Date | string | null
    createdAt?: DateTimeFilter<"TournamentRound"> | Date | string
    tournament?: XOR<TournamentScalarRelationFilter, TournamentWhereInput>
    matches?: TournamentMatchListRelationFilter
  }, "id">

  export type TournamentRoundOrderByWithAggregationInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    roundNumber?: SortOrder
    name?: SortOrderInput | SortOrder
    status?: SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: TournamentRoundCountOrderByAggregateInput
    _avg?: TournamentRoundAvgOrderByAggregateInput
    _max?: TournamentRoundMaxOrderByAggregateInput
    _min?: TournamentRoundMinOrderByAggregateInput
    _sum?: TournamentRoundSumOrderByAggregateInput
  }

  export type TournamentRoundScalarWhereWithAggregatesInput = {
    AND?: TournamentRoundScalarWhereWithAggregatesInput | TournamentRoundScalarWhereWithAggregatesInput[]
    OR?: TournamentRoundScalarWhereWithAggregatesInput[]
    NOT?: TournamentRoundScalarWhereWithAggregatesInput | TournamentRoundScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TournamentRound"> | string
    tournamentId?: StringWithAggregatesFilter<"TournamentRound"> | string
    roundNumber?: IntWithAggregatesFilter<"TournamentRound"> | number
    name?: StringNullableWithAggregatesFilter<"TournamentRound"> | string | null
    status?: StringWithAggregatesFilter<"TournamentRound"> | string
    startTime?: DateTimeNullableWithAggregatesFilter<"TournamentRound"> | Date | string | null
    endTime?: DateTimeNullableWithAggregatesFilter<"TournamentRound"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TournamentRound"> | Date | string
  }

  export type TournamentMatchWhereInput = {
    AND?: TournamentMatchWhereInput | TournamentMatchWhereInput[]
    OR?: TournamentMatchWhereInput[]
    NOT?: TournamentMatchWhereInput | TournamentMatchWhereInput[]
    id?: StringFilter<"TournamentMatch"> | string
    tournamentId?: StringFilter<"TournamentMatch"> | string
    roundId?: StringFilter<"TournamentMatch"> | string
    player1Id?: StringNullableFilter<"TournamentMatch"> | string | null
    player2Id?: StringNullableFilter<"TournamentMatch"> | string | null
    winnerId?: StringNullableFilter<"TournamentMatch"> | string | null
    status?: StringFilter<"TournamentMatch"> | string
    gameSessionId?: StringNullableFilter<"TournamentMatch"> | string | null
    bracketPosition?: IntNullableFilter<"TournamentMatch"> | number | null
    player1Score?: IntFilter<"TournamentMatch"> | number
    player2Score?: IntFilter<"TournamentMatch"> | number
    matchData?: JsonNullableFilter<"TournamentMatch">
    startTime?: DateTimeNullableFilter<"TournamentMatch"> | Date | string | null
    endTime?: DateTimeNullableFilter<"TournamentMatch"> | Date | string | null
    createdAt?: DateTimeFilter<"TournamentMatch"> | Date | string
    tournament?: XOR<TournamentScalarRelationFilter, TournamentWhereInput>
    round?: XOR<TournamentRoundScalarRelationFilter, TournamentRoundWhereInput>
    player1?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    player2?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    winner?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    results?: MatchResultListRelationFilter
  }

  export type TournamentMatchOrderByWithRelationInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    roundId?: SortOrder
    player1Id?: SortOrderInput | SortOrder
    player2Id?: SortOrderInput | SortOrder
    winnerId?: SortOrderInput | SortOrder
    status?: SortOrder
    gameSessionId?: SortOrderInput | SortOrder
    bracketPosition?: SortOrderInput | SortOrder
    player1Score?: SortOrder
    player2Score?: SortOrder
    matchData?: SortOrderInput | SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    tournament?: TournamentOrderByWithRelationInput
    round?: TournamentRoundOrderByWithRelationInput
    player1?: UserOrderByWithRelationInput
    player2?: UserOrderByWithRelationInput
    winner?: UserOrderByWithRelationInput
    results?: MatchResultOrderByRelationAggregateInput
  }

  export type TournamentMatchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TournamentMatchWhereInput | TournamentMatchWhereInput[]
    OR?: TournamentMatchWhereInput[]
    NOT?: TournamentMatchWhereInput | TournamentMatchWhereInput[]
    tournamentId?: StringFilter<"TournamentMatch"> | string
    roundId?: StringFilter<"TournamentMatch"> | string
    player1Id?: StringNullableFilter<"TournamentMatch"> | string | null
    player2Id?: StringNullableFilter<"TournamentMatch"> | string | null
    winnerId?: StringNullableFilter<"TournamentMatch"> | string | null
    status?: StringFilter<"TournamentMatch"> | string
    gameSessionId?: StringNullableFilter<"TournamentMatch"> | string | null
    bracketPosition?: IntNullableFilter<"TournamentMatch"> | number | null
    player1Score?: IntFilter<"TournamentMatch"> | number
    player2Score?: IntFilter<"TournamentMatch"> | number
    matchData?: JsonNullableFilter<"TournamentMatch">
    startTime?: DateTimeNullableFilter<"TournamentMatch"> | Date | string | null
    endTime?: DateTimeNullableFilter<"TournamentMatch"> | Date | string | null
    createdAt?: DateTimeFilter<"TournamentMatch"> | Date | string
    tournament?: XOR<TournamentScalarRelationFilter, TournamentWhereInput>
    round?: XOR<TournamentRoundScalarRelationFilter, TournamentRoundWhereInput>
    player1?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    player2?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    winner?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    results?: MatchResultListRelationFilter
  }, "id">

  export type TournamentMatchOrderByWithAggregationInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    roundId?: SortOrder
    player1Id?: SortOrderInput | SortOrder
    player2Id?: SortOrderInput | SortOrder
    winnerId?: SortOrderInput | SortOrder
    status?: SortOrder
    gameSessionId?: SortOrderInput | SortOrder
    bracketPosition?: SortOrderInput | SortOrder
    player1Score?: SortOrder
    player2Score?: SortOrder
    matchData?: SortOrderInput | SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: TournamentMatchCountOrderByAggregateInput
    _avg?: TournamentMatchAvgOrderByAggregateInput
    _max?: TournamentMatchMaxOrderByAggregateInput
    _min?: TournamentMatchMinOrderByAggregateInput
    _sum?: TournamentMatchSumOrderByAggregateInput
  }

  export type TournamentMatchScalarWhereWithAggregatesInput = {
    AND?: TournamentMatchScalarWhereWithAggregatesInput | TournamentMatchScalarWhereWithAggregatesInput[]
    OR?: TournamentMatchScalarWhereWithAggregatesInput[]
    NOT?: TournamentMatchScalarWhereWithAggregatesInput | TournamentMatchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TournamentMatch"> | string
    tournamentId?: StringWithAggregatesFilter<"TournamentMatch"> | string
    roundId?: StringWithAggregatesFilter<"TournamentMatch"> | string
    player1Id?: StringNullableWithAggregatesFilter<"TournamentMatch"> | string | null
    player2Id?: StringNullableWithAggregatesFilter<"TournamentMatch"> | string | null
    winnerId?: StringNullableWithAggregatesFilter<"TournamentMatch"> | string | null
    status?: StringWithAggregatesFilter<"TournamentMatch"> | string
    gameSessionId?: StringNullableWithAggregatesFilter<"TournamentMatch"> | string | null
    bracketPosition?: IntNullableWithAggregatesFilter<"TournamentMatch"> | number | null
    player1Score?: IntWithAggregatesFilter<"TournamentMatch"> | number
    player2Score?: IntWithAggregatesFilter<"TournamentMatch"> | number
    matchData?: JsonNullableWithAggregatesFilter<"TournamentMatch">
    startTime?: DateTimeNullableWithAggregatesFilter<"TournamentMatch"> | Date | string | null
    endTime?: DateTimeNullableWithAggregatesFilter<"TournamentMatch"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TournamentMatch"> | Date | string
  }

  export type MatchResultWhereInput = {
    AND?: MatchResultWhereInput | MatchResultWhereInput[]
    OR?: MatchResultWhereInput[]
    NOT?: MatchResultWhereInput | MatchResultWhereInput[]
    id?: StringFilter<"MatchResult"> | string
    matchId?: StringFilter<"MatchResult"> | string
    winnerId?: StringFilter<"MatchResult"> | string
    loserId?: StringNullableFilter<"MatchResult"> | string | null
    winnerScore?: IntFilter<"MatchResult"> | number
    loserScore?: IntFilter<"MatchResult"> | number
    gameLength?: IntNullableFilter<"MatchResult"> | number | null
    resultType?: StringFilter<"MatchResult"> | string
    notes?: StringNullableFilter<"MatchResult"> | string | null
    reportedById?: StringFilter<"MatchResult"> | string
    verifiedById?: StringNullableFilter<"MatchResult"> | string | null
    isVerified?: BoolFilter<"MatchResult"> | boolean
    createdAt?: DateTimeFilter<"MatchResult"> | Date | string
    match?: XOR<TournamentMatchScalarRelationFilter, TournamentMatchWhereInput>
    winner?: XOR<UserScalarRelationFilter, UserWhereInput>
    loser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    reportedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    verifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type MatchResultOrderByWithRelationInput = {
    id?: SortOrder
    matchId?: SortOrder
    winnerId?: SortOrder
    loserId?: SortOrderInput | SortOrder
    winnerScore?: SortOrder
    loserScore?: SortOrder
    gameLength?: SortOrderInput | SortOrder
    resultType?: SortOrder
    notes?: SortOrderInput | SortOrder
    reportedById?: SortOrder
    verifiedById?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    match?: TournamentMatchOrderByWithRelationInput
    winner?: UserOrderByWithRelationInput
    loser?: UserOrderByWithRelationInput
    reportedBy?: UserOrderByWithRelationInput
    verifiedBy?: UserOrderByWithRelationInput
  }

  export type MatchResultWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MatchResultWhereInput | MatchResultWhereInput[]
    OR?: MatchResultWhereInput[]
    NOT?: MatchResultWhereInput | MatchResultWhereInput[]
    matchId?: StringFilter<"MatchResult"> | string
    winnerId?: StringFilter<"MatchResult"> | string
    loserId?: StringNullableFilter<"MatchResult"> | string | null
    winnerScore?: IntFilter<"MatchResult"> | number
    loserScore?: IntFilter<"MatchResult"> | number
    gameLength?: IntNullableFilter<"MatchResult"> | number | null
    resultType?: StringFilter<"MatchResult"> | string
    notes?: StringNullableFilter<"MatchResult"> | string | null
    reportedById?: StringFilter<"MatchResult"> | string
    verifiedById?: StringNullableFilter<"MatchResult"> | string | null
    isVerified?: BoolFilter<"MatchResult"> | boolean
    createdAt?: DateTimeFilter<"MatchResult"> | Date | string
    match?: XOR<TournamentMatchScalarRelationFilter, TournamentMatchWhereInput>
    winner?: XOR<UserScalarRelationFilter, UserWhereInput>
    loser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    reportedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    verifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type MatchResultOrderByWithAggregationInput = {
    id?: SortOrder
    matchId?: SortOrder
    winnerId?: SortOrder
    loserId?: SortOrderInput | SortOrder
    winnerScore?: SortOrder
    loserScore?: SortOrder
    gameLength?: SortOrderInput | SortOrder
    resultType?: SortOrder
    notes?: SortOrderInput | SortOrder
    reportedById?: SortOrder
    verifiedById?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    _count?: MatchResultCountOrderByAggregateInput
    _avg?: MatchResultAvgOrderByAggregateInput
    _max?: MatchResultMaxOrderByAggregateInput
    _min?: MatchResultMinOrderByAggregateInput
    _sum?: MatchResultSumOrderByAggregateInput
  }

  export type MatchResultScalarWhereWithAggregatesInput = {
    AND?: MatchResultScalarWhereWithAggregatesInput | MatchResultScalarWhereWithAggregatesInput[]
    OR?: MatchResultScalarWhereWithAggregatesInput[]
    NOT?: MatchResultScalarWhereWithAggregatesInput | MatchResultScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MatchResult"> | string
    matchId?: StringWithAggregatesFilter<"MatchResult"> | string
    winnerId?: StringWithAggregatesFilter<"MatchResult"> | string
    loserId?: StringNullableWithAggregatesFilter<"MatchResult"> | string | null
    winnerScore?: IntWithAggregatesFilter<"MatchResult"> | number
    loserScore?: IntWithAggregatesFilter<"MatchResult"> | number
    gameLength?: IntNullableWithAggregatesFilter<"MatchResult"> | number | null
    resultType?: StringWithAggregatesFilter<"MatchResult"> | string
    notes?: StringNullableWithAggregatesFilter<"MatchResult"> | string | null
    reportedById?: StringWithAggregatesFilter<"MatchResult"> | string
    verifiedById?: StringNullableWithAggregatesFilter<"MatchResult"> | string | null
    isVerified?: BoolWithAggregatesFilter<"MatchResult"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"MatchResult"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    actionUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    actionUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    type?: StringWithAggregatesFilter<"Notification"> | string
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    actionUrl?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    receiverId?: StringFilter<"Message"> | string
    subject?: StringNullableFilter<"Message"> | string | null
    content?: StringFilter<"Message"> | string
    isRead?: BoolFilter<"Message"> | boolean
    createdAt?: DateTimeFilter<"Message"> | Date | string
    editedAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
    receiver?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    subject?: SortOrderInput | SortOrder
    content?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    editedAt?: SortOrderInput | SortOrder
    sender?: UserOrderByWithRelationInput
    receiver?: UserOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    senderId?: StringFilter<"Message"> | string
    receiverId?: StringFilter<"Message"> | string
    subject?: StringNullableFilter<"Message"> | string | null
    content?: StringFilter<"Message"> | string
    isRead?: BoolFilter<"Message"> | boolean
    createdAt?: DateTimeFilter<"Message"> | Date | string
    editedAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
    receiver?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    subject?: SortOrderInput | SortOrder
    content?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    editedAt?: SortOrderInput | SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Message"> | string
    senderId?: StringWithAggregatesFilter<"Message"> | string
    receiverId?: StringWithAggregatesFilter<"Message"> | string
    subject?: StringNullableWithAggregatesFilter<"Message"> | string | null
    content?: StringWithAggregatesFilter<"Message"> | string
    isRead?: BoolWithAggregatesFilter<"Message"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    editedAt?: DateTimeNullableWithAggregatesFilter<"Message"> | Date | string | null
  }

  export type GameSessionWhereInput = {
    AND?: GameSessionWhereInput | GameSessionWhereInput[]
    OR?: GameSessionWhereInput[]
    NOT?: GameSessionWhereInput | GameSessionWhereInput[]
    id?: StringFilter<"GameSession"> | string
    name?: StringFilter<"GameSession"> | string
    gameType?: StringFilter<"GameSession"> | string
    hostId?: StringFilter<"GameSession"> | string
    coHostId?: StringNullableFilter<"GameSession"> | string | null
    maxPlayers?: IntFilter<"GameSession"> | number
    currentPlayers?: IntFilter<"GameSession"> | number
    status?: StringFilter<"GameSession"> | string
    isPrivate?: BoolFilter<"GameSession"> | boolean
    gameRoomUrl?: StringNullableFilter<"GameSession"> | string | null
    settings?: JsonNullableFilter<"GameSession">
    createdAt?: DateTimeFilter<"GameSession"> | Date | string
    startedAt?: DateTimeNullableFilter<"GameSession"> | Date | string | null
    endedAt?: DateTimeNullableFilter<"GameSession"> | Date | string | null
    host?: XOR<UserScalarRelationFilter, UserWhereInput>
    coHost?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type GameSessionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    gameType?: SortOrder
    hostId?: SortOrder
    coHostId?: SortOrderInput | SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    status?: SortOrder
    isPrivate?: SortOrder
    gameRoomUrl?: SortOrderInput | SortOrder
    settings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    endedAt?: SortOrderInput | SortOrder
    host?: UserOrderByWithRelationInput
    coHost?: UserOrderByWithRelationInput
  }

  export type GameSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GameSessionWhereInput | GameSessionWhereInput[]
    OR?: GameSessionWhereInput[]
    NOT?: GameSessionWhereInput | GameSessionWhereInput[]
    name?: StringFilter<"GameSession"> | string
    gameType?: StringFilter<"GameSession"> | string
    hostId?: StringFilter<"GameSession"> | string
    coHostId?: StringNullableFilter<"GameSession"> | string | null
    maxPlayers?: IntFilter<"GameSession"> | number
    currentPlayers?: IntFilter<"GameSession"> | number
    status?: StringFilter<"GameSession"> | string
    isPrivate?: BoolFilter<"GameSession"> | boolean
    gameRoomUrl?: StringNullableFilter<"GameSession"> | string | null
    settings?: JsonNullableFilter<"GameSession">
    createdAt?: DateTimeFilter<"GameSession"> | Date | string
    startedAt?: DateTimeNullableFilter<"GameSession"> | Date | string | null
    endedAt?: DateTimeNullableFilter<"GameSession"> | Date | string | null
    host?: XOR<UserScalarRelationFilter, UserWhereInput>
    coHost?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type GameSessionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    gameType?: SortOrder
    hostId?: SortOrder
    coHostId?: SortOrderInput | SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    status?: SortOrder
    isPrivate?: SortOrder
    gameRoomUrl?: SortOrderInput | SortOrder
    settings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    endedAt?: SortOrderInput | SortOrder
    _count?: GameSessionCountOrderByAggregateInput
    _avg?: GameSessionAvgOrderByAggregateInput
    _max?: GameSessionMaxOrderByAggregateInput
    _min?: GameSessionMinOrderByAggregateInput
    _sum?: GameSessionSumOrderByAggregateInput
  }

  export type GameSessionScalarWhereWithAggregatesInput = {
    AND?: GameSessionScalarWhereWithAggregatesInput | GameSessionScalarWhereWithAggregatesInput[]
    OR?: GameSessionScalarWhereWithAggregatesInput[]
    NOT?: GameSessionScalarWhereWithAggregatesInput | GameSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GameSession"> | string
    name?: StringWithAggregatesFilter<"GameSession"> | string
    gameType?: StringWithAggregatesFilter<"GameSession"> | string
    hostId?: StringWithAggregatesFilter<"GameSession"> | string
    coHostId?: StringNullableWithAggregatesFilter<"GameSession"> | string | null
    maxPlayers?: IntWithAggregatesFilter<"GameSession"> | number
    currentPlayers?: IntWithAggregatesFilter<"GameSession"> | number
    status?: StringWithAggregatesFilter<"GameSession"> | string
    isPrivate?: BoolWithAggregatesFilter<"GameSession"> | boolean
    gameRoomUrl?: StringNullableWithAggregatesFilter<"GameSession"> | string | null
    settings?: JsonNullableWithAggregatesFilter<"GameSession">
    createdAt?: DateTimeWithAggregatesFilter<"GameSession"> | Date | string
    startedAt?: DateTimeNullableWithAggregatesFilter<"GameSession"> | Date | string | null
    endedAt?: DateTimeNullableWithAggregatesFilter<"GameSession"> | Date | string | null
  }

  export type UserSocialLinkWhereInput = {
    AND?: UserSocialLinkWhereInput | UserSocialLinkWhereInput[]
    OR?: UserSocialLinkWhereInput[]
    NOT?: UserSocialLinkWhereInput | UserSocialLinkWhereInput[]
    id?: StringFilter<"UserSocialLink"> | string
    userId?: StringFilter<"UserSocialLink"> | string
    platform?: StringFilter<"UserSocialLink"> | string
    url?: StringFilter<"UserSocialLink"> | string
    username?: StringNullableFilter<"UserSocialLink"> | string | null
    isPublic?: BoolFilter<"UserSocialLink"> | boolean
    createdAt?: DateTimeFilter<"UserSocialLink"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserSocialLinkOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    platform?: SortOrder
    url?: SortOrder
    username?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserSocialLinkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserSocialLinkWhereInput | UserSocialLinkWhereInput[]
    OR?: UserSocialLinkWhereInput[]
    NOT?: UserSocialLinkWhereInput | UserSocialLinkWhereInput[]
    userId?: StringFilter<"UserSocialLink"> | string
    platform?: StringFilter<"UserSocialLink"> | string
    url?: StringFilter<"UserSocialLink"> | string
    username?: StringNullableFilter<"UserSocialLink"> | string | null
    isPublic?: BoolFilter<"UserSocialLink"> | boolean
    createdAt?: DateTimeFilter<"UserSocialLink"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserSocialLinkOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    platform?: SortOrder
    url?: SortOrder
    username?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    _count?: UserSocialLinkCountOrderByAggregateInput
    _max?: UserSocialLinkMaxOrderByAggregateInput
    _min?: UserSocialLinkMinOrderByAggregateInput
  }

  export type UserSocialLinkScalarWhereWithAggregatesInput = {
    AND?: UserSocialLinkScalarWhereWithAggregatesInput | UserSocialLinkScalarWhereWithAggregatesInput[]
    OR?: UserSocialLinkScalarWhereWithAggregatesInput[]
    NOT?: UserSocialLinkScalarWhereWithAggregatesInput | UserSocialLinkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSocialLink"> | string
    userId?: StringWithAggregatesFilter<"UserSocialLink"> | string
    platform?: StringWithAggregatesFilter<"UserSocialLink"> | string
    url?: StringWithAggregatesFilter<"UserSocialLink"> | string
    username?: StringNullableWithAggregatesFilter<"UserSocialLink"> | string | null
    isPublic?: BoolWithAggregatesFilter<"UserSocialLink"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UserSocialLink"> | Date | string
  }

  export type UserGamingProfileWhereInput = {
    AND?: UserGamingProfileWhereInput | UserGamingProfileWhereInput[]
    OR?: UserGamingProfileWhereInput[]
    NOT?: UserGamingProfileWhereInput | UserGamingProfileWhereInput[]
    id?: StringFilter<"UserGamingProfile"> | string
    userId?: StringFilter<"UserGamingProfile"> | string
    platform?: StringFilter<"UserGamingProfile"> | string
    username?: StringFilter<"UserGamingProfile"> | string
    skillLevel?: StringNullableFilter<"UserGamingProfile"> | string | null
    preferredFormats?: JsonNullableFilter<"UserGamingProfile">
    achievementBadges?: JsonNullableFilter<"UserGamingProfile">
    statistics?: JsonNullableFilter<"UserGamingProfile">
    streamingSettings?: JsonNullableFilter<"UserGamingProfile">
    createdAt?: DateTimeFilter<"UserGamingProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserGamingProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserGamingProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    platform?: SortOrder
    username?: SortOrder
    skillLevel?: SortOrderInput | SortOrder
    preferredFormats?: SortOrderInput | SortOrder
    achievementBadges?: SortOrderInput | SortOrder
    statistics?: SortOrderInput | SortOrder
    streamingSettings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserGamingProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserGamingProfileWhereInput | UserGamingProfileWhereInput[]
    OR?: UserGamingProfileWhereInput[]
    NOT?: UserGamingProfileWhereInput | UserGamingProfileWhereInput[]
    userId?: StringFilter<"UserGamingProfile"> | string
    platform?: StringFilter<"UserGamingProfile"> | string
    username?: StringFilter<"UserGamingProfile"> | string
    skillLevel?: StringNullableFilter<"UserGamingProfile"> | string | null
    preferredFormats?: JsonNullableFilter<"UserGamingProfile">
    achievementBadges?: JsonNullableFilter<"UserGamingProfile">
    statistics?: JsonNullableFilter<"UserGamingProfile">
    streamingSettings?: JsonNullableFilter<"UserGamingProfile">
    createdAt?: DateTimeFilter<"UserGamingProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserGamingProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserGamingProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    platform?: SortOrder
    username?: SortOrder
    skillLevel?: SortOrderInput | SortOrder
    preferredFormats?: SortOrderInput | SortOrder
    achievementBadges?: SortOrderInput | SortOrder
    statistics?: SortOrderInput | SortOrder
    streamingSettings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserGamingProfileCountOrderByAggregateInput
    _max?: UserGamingProfileMaxOrderByAggregateInput
    _min?: UserGamingProfileMinOrderByAggregateInput
  }

  export type UserGamingProfileScalarWhereWithAggregatesInput = {
    AND?: UserGamingProfileScalarWhereWithAggregatesInput | UserGamingProfileScalarWhereWithAggregatesInput[]
    OR?: UserGamingProfileScalarWhereWithAggregatesInput[]
    NOT?: UserGamingProfileScalarWhereWithAggregatesInput | UserGamingProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserGamingProfile"> | string
    userId?: StringWithAggregatesFilter<"UserGamingProfile"> | string
    platform?: StringWithAggregatesFilter<"UserGamingProfile"> | string
    username?: StringWithAggregatesFilter<"UserGamingProfile"> | string
    skillLevel?: StringNullableWithAggregatesFilter<"UserGamingProfile"> | string | null
    preferredFormats?: JsonNullableWithAggregatesFilter<"UserGamingProfile">
    achievementBadges?: JsonNullableWithAggregatesFilter<"UserGamingProfile">
    statistics?: JsonNullableWithAggregatesFilter<"UserGamingProfile">
    streamingSettings?: JsonNullableWithAggregatesFilter<"UserGamingProfile">
    createdAt?: DateTimeWithAggregatesFilter<"UserGamingProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserGamingProfile"> | Date | string
  }

  export type FriendshipWhereInput = {
    AND?: FriendshipWhereInput | FriendshipWhereInput[]
    OR?: FriendshipWhereInput[]
    NOT?: FriendshipWhereInput | FriendshipWhereInput[]
    id?: StringFilter<"Friendship"> | string
    requesterId?: StringFilter<"Friendship"> | string
    receiverId?: StringFilter<"Friendship"> | string
    status?: StringFilter<"Friendship"> | string
    createdAt?: DateTimeFilter<"Friendship"> | Date | string
    updatedAt?: DateTimeFilter<"Friendship"> | Date | string
    requester?: XOR<UserScalarRelationFilter, UserWhereInput>
    receiver?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FriendshipOrderByWithRelationInput = {
    id?: SortOrder
    requesterId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requester?: UserOrderByWithRelationInput
    receiver?: UserOrderByWithRelationInput
  }

  export type FriendshipWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FriendshipWhereInput | FriendshipWhereInput[]
    OR?: FriendshipWhereInput[]
    NOT?: FriendshipWhereInput | FriendshipWhereInput[]
    requesterId?: StringFilter<"Friendship"> | string
    receiverId?: StringFilter<"Friendship"> | string
    status?: StringFilter<"Friendship"> | string
    createdAt?: DateTimeFilter<"Friendship"> | Date | string
    updatedAt?: DateTimeFilter<"Friendship"> | Date | string
    requester?: XOR<UserScalarRelationFilter, UserWhereInput>
    receiver?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type FriendshipOrderByWithAggregationInput = {
    id?: SortOrder
    requesterId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FriendshipCountOrderByAggregateInput
    _max?: FriendshipMaxOrderByAggregateInput
    _min?: FriendshipMinOrderByAggregateInput
  }

  export type FriendshipScalarWhereWithAggregatesInput = {
    AND?: FriendshipScalarWhereWithAggregatesInput | FriendshipScalarWhereWithAggregatesInput[]
    OR?: FriendshipScalarWhereWithAggregatesInput[]
    NOT?: FriendshipScalarWhereWithAggregatesInput | FriendshipScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Friendship"> | string
    requesterId?: StringWithAggregatesFilter<"Friendship"> | string
    receiverId?: StringWithAggregatesFilter<"Friendship"> | string
    status?: StringWithAggregatesFilter<"Friendship"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Friendship"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Friendship"> | Date | string
  }

  export type UserActivityWhereInput = {
    AND?: UserActivityWhereInput | UserActivityWhereInput[]
    OR?: UserActivityWhereInput[]
    NOT?: UserActivityWhereInput | UserActivityWhereInput[]
    id?: StringFilter<"UserActivity"> | string
    userId?: StringFilter<"UserActivity"> | string
    type?: StringFilter<"UserActivity"> | string
    description?: StringFilter<"UserActivity"> | string
    metadata?: JsonNullableFilter<"UserActivity">
    createdAt?: DateTimeFilter<"UserActivity"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserActivityOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserActivityWhereInput | UserActivityWhereInput[]
    OR?: UserActivityWhereInput[]
    NOT?: UserActivityWhereInput | UserActivityWhereInput[]
    userId?: StringFilter<"UserActivity"> | string
    type?: StringFilter<"UserActivity"> | string
    description?: StringFilter<"UserActivity"> | string
    metadata?: JsonNullableFilter<"UserActivity">
    createdAt?: DateTimeFilter<"UserActivity"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserActivityOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserActivityCountOrderByAggregateInput
    _max?: UserActivityMaxOrderByAggregateInput
    _min?: UserActivityMinOrderByAggregateInput
  }

  export type UserActivityScalarWhereWithAggregatesInput = {
    AND?: UserActivityScalarWhereWithAggregatesInput | UserActivityScalarWhereWithAggregatesInput[]
    OR?: UserActivityScalarWhereWithAggregatesInput[]
    NOT?: UserActivityScalarWhereWithAggregatesInput | UserActivityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserActivity"> | string
    userId?: StringWithAggregatesFilter<"UserActivity"> | string
    type?: StringWithAggregatesFilter<"UserActivity"> | string
    description?: StringWithAggregatesFilter<"UserActivity"> | string
    metadata?: JsonNullableWithAggregatesFilter<"UserActivity">
    createdAt?: DateTimeWithAggregatesFilter<"UserActivity"> | Date | string
  }

  export type UserSettingsWhereInput = {
    AND?: UserSettingsWhereInput | UserSettingsWhereInput[]
    OR?: UserSettingsWhereInput[]
    NOT?: UserSettingsWhereInput | UserSettingsWhereInput[]
    id?: StringFilter<"UserSettings"> | string
    userId?: StringFilter<"UserSettings"> | string
    emailNotifications?: BoolFilter<"UserSettings"> | boolean
    pushNotifications?: BoolFilter<"UserSettings"> | boolean
    profileVisibility?: StringFilter<"UserSettings"> | string
    showOnlineStatus?: BoolFilter<"UserSettings"> | boolean
    allowFriendRequests?: BoolFilter<"UserSettings"> | boolean
    allowDirectMessages?: BoolFilter<"UserSettings"> | boolean
    language?: StringFilter<"UserSettings"> | string
    timezone?: StringNullableFilter<"UserSettings"> | string | null
    createdAt?: DateTimeFilter<"UserSettings"> | Date | string
    updatedAt?: DateTimeFilter<"UserSettings"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserSettingsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    profileVisibility?: SortOrder
    showOnlineStatus?: SortOrder
    allowFriendRequests?: SortOrder
    allowDirectMessages?: SortOrder
    language?: SortOrder
    timezone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserSettingsWhereInput | UserSettingsWhereInput[]
    OR?: UserSettingsWhereInput[]
    NOT?: UserSettingsWhereInput | UserSettingsWhereInput[]
    userId?: StringFilter<"UserSettings"> | string
    emailNotifications?: BoolFilter<"UserSettings"> | boolean
    pushNotifications?: BoolFilter<"UserSettings"> | boolean
    profileVisibility?: StringFilter<"UserSettings"> | string
    showOnlineStatus?: BoolFilter<"UserSettings"> | boolean
    allowFriendRequests?: BoolFilter<"UserSettings"> | boolean
    allowDirectMessages?: BoolFilter<"UserSettings"> | boolean
    language?: StringFilter<"UserSettings"> | string
    timezone?: StringNullableFilter<"UserSettings"> | string | null
    createdAt?: DateTimeFilter<"UserSettings"> | Date | string
    updatedAt?: DateTimeFilter<"UserSettings"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    profileVisibility?: SortOrder
    showOnlineStatus?: SortOrder
    allowFriendRequests?: SortOrder
    allowDirectMessages?: SortOrder
    language?: SortOrder
    timezone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserSettingsCountOrderByAggregateInput
    _max?: UserSettingsMaxOrderByAggregateInput
    _min?: UserSettingsMinOrderByAggregateInput
  }

  export type UserSettingsScalarWhereWithAggregatesInput = {
    AND?: UserSettingsScalarWhereWithAggregatesInput | UserSettingsScalarWhereWithAggregatesInput[]
    OR?: UserSettingsScalarWhereWithAggregatesInput[]
    NOT?: UserSettingsScalarWhereWithAggregatesInput | UserSettingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSettings"> | string
    userId?: StringWithAggregatesFilter<"UserSettings"> | string
    emailNotifications?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    pushNotifications?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    profileVisibility?: StringWithAggregatesFilter<"UserSettings"> | string
    showOnlineStatus?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    allowFriendRequests?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    allowDirectMessages?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    language?: StringWithAggregatesFilter<"UserSettings"> | string
    timezone?: StringNullableWithAggregatesFilter<"UserSettings"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserSettings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserSettings"> | Date | string
  }

  export type MatchmakingPreferenceWhereInput = {
    AND?: MatchmakingPreferenceWhereInput | MatchmakingPreferenceWhereInput[]
    OR?: MatchmakingPreferenceWhereInput[]
    NOT?: MatchmakingPreferenceWhereInput | MatchmakingPreferenceWhereInput[]
    id?: StringFilter<"MatchmakingPreference"> | string
    userId?: StringFilter<"MatchmakingPreference"> | string
    selectedGames?: JsonFilter<"MatchmakingPreference">
    selectedFormats?: JsonFilter<"MatchmakingPreference">
    powerLevelMin?: IntFilter<"MatchmakingPreference"> | number
    powerLevelMax?: IntFilter<"MatchmakingPreference"> | number
    playstyle?: StringFilter<"MatchmakingPreference"> | string
    location?: StringNullableFilter<"MatchmakingPreference"> | string | null
    onlineOnly?: BoolFilter<"MatchmakingPreference"> | boolean
    availability?: StringFilter<"MatchmakingPreference"> | string
    language?: StringFilter<"MatchmakingPreference"> | string
    maxDistance?: IntFilter<"MatchmakingPreference"> | number
    createdAt?: DateTimeFilter<"MatchmakingPreference"> | Date | string
    updatedAt?: DateTimeFilter<"MatchmakingPreference"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MatchmakingPreferenceOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    selectedGames?: SortOrder
    selectedFormats?: SortOrder
    powerLevelMin?: SortOrder
    powerLevelMax?: SortOrder
    playstyle?: SortOrder
    location?: SortOrderInput | SortOrder
    onlineOnly?: SortOrder
    availability?: SortOrder
    language?: SortOrder
    maxDistance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type MatchmakingPreferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: MatchmakingPreferenceWhereInput | MatchmakingPreferenceWhereInput[]
    OR?: MatchmakingPreferenceWhereInput[]
    NOT?: MatchmakingPreferenceWhereInput | MatchmakingPreferenceWhereInput[]
    selectedGames?: JsonFilter<"MatchmakingPreference">
    selectedFormats?: JsonFilter<"MatchmakingPreference">
    powerLevelMin?: IntFilter<"MatchmakingPreference"> | number
    powerLevelMax?: IntFilter<"MatchmakingPreference"> | number
    playstyle?: StringFilter<"MatchmakingPreference"> | string
    location?: StringNullableFilter<"MatchmakingPreference"> | string | null
    onlineOnly?: BoolFilter<"MatchmakingPreference"> | boolean
    availability?: StringFilter<"MatchmakingPreference"> | string
    language?: StringFilter<"MatchmakingPreference"> | string
    maxDistance?: IntFilter<"MatchmakingPreference"> | number
    createdAt?: DateTimeFilter<"MatchmakingPreference"> | Date | string
    updatedAt?: DateTimeFilter<"MatchmakingPreference"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type MatchmakingPreferenceOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    selectedGames?: SortOrder
    selectedFormats?: SortOrder
    powerLevelMin?: SortOrder
    powerLevelMax?: SortOrder
    playstyle?: SortOrder
    location?: SortOrderInput | SortOrder
    onlineOnly?: SortOrder
    availability?: SortOrder
    language?: SortOrder
    maxDistance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MatchmakingPreferenceCountOrderByAggregateInput
    _avg?: MatchmakingPreferenceAvgOrderByAggregateInput
    _max?: MatchmakingPreferenceMaxOrderByAggregateInput
    _min?: MatchmakingPreferenceMinOrderByAggregateInput
    _sum?: MatchmakingPreferenceSumOrderByAggregateInput
  }

  export type MatchmakingPreferenceScalarWhereWithAggregatesInput = {
    AND?: MatchmakingPreferenceScalarWhereWithAggregatesInput | MatchmakingPreferenceScalarWhereWithAggregatesInput[]
    OR?: MatchmakingPreferenceScalarWhereWithAggregatesInput[]
    NOT?: MatchmakingPreferenceScalarWhereWithAggregatesInput | MatchmakingPreferenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MatchmakingPreference"> | string
    userId?: StringWithAggregatesFilter<"MatchmakingPreference"> | string
    selectedGames?: JsonWithAggregatesFilter<"MatchmakingPreference">
    selectedFormats?: JsonWithAggregatesFilter<"MatchmakingPreference">
    powerLevelMin?: IntWithAggregatesFilter<"MatchmakingPreference"> | number
    powerLevelMax?: IntWithAggregatesFilter<"MatchmakingPreference"> | number
    playstyle?: StringWithAggregatesFilter<"MatchmakingPreference"> | string
    location?: StringNullableWithAggregatesFilter<"MatchmakingPreference"> | string | null
    onlineOnly?: BoolWithAggregatesFilter<"MatchmakingPreference"> | boolean
    availability?: StringWithAggregatesFilter<"MatchmakingPreference"> | string
    language?: StringWithAggregatesFilter<"MatchmakingPreference"> | string
    maxDistance?: IntWithAggregatesFilter<"MatchmakingPreference"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MatchmakingPreference"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MatchmakingPreference"> | Date | string
  }

  export type ForumPostWhereInput = {
    AND?: ForumPostWhereInput | ForumPostWhereInput[]
    OR?: ForumPostWhereInput[]
    NOT?: ForumPostWhereInput | ForumPostWhereInput[]
    id?: StringFilter<"ForumPost"> | string
    title?: StringFilter<"ForumPost"> | string
    content?: StringFilter<"ForumPost"> | string
    authorId?: StringFilter<"ForumPost"> | string
    communityId?: StringFilter<"ForumPost"> | string
    category?: StringFilter<"ForumPost"> | string
    isPinned?: BoolFilter<"ForumPost"> | boolean
    isLocked?: BoolFilter<"ForumPost"> | boolean
    viewCount?: IntFilter<"ForumPost"> | number
    likeCount?: IntFilter<"ForumPost"> | number
    replyCount?: IntFilter<"ForumPost"> | number
    lastReplyAt?: DateTimeNullableFilter<"ForumPost"> | Date | string | null
    createdAt?: DateTimeFilter<"ForumPost"> | Date | string
    updatedAt?: DateTimeFilter<"ForumPost"> | Date | string
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    community?: XOR<CommunityScalarRelationFilter, CommunityWhereInput>
    replies?: ForumReplyListRelationFilter
    likes?: ForumPostLikeListRelationFilter
  }

  export type ForumPostOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    authorId?: SortOrder
    communityId?: SortOrder
    category?: SortOrder
    isPinned?: SortOrder
    isLocked?: SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    replyCount?: SortOrder
    lastReplyAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    author?: UserOrderByWithRelationInput
    community?: CommunityOrderByWithRelationInput
    replies?: ForumReplyOrderByRelationAggregateInput
    likes?: ForumPostLikeOrderByRelationAggregateInput
  }

  export type ForumPostWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ForumPostWhereInput | ForumPostWhereInput[]
    OR?: ForumPostWhereInput[]
    NOT?: ForumPostWhereInput | ForumPostWhereInput[]
    title?: StringFilter<"ForumPost"> | string
    content?: StringFilter<"ForumPost"> | string
    authorId?: StringFilter<"ForumPost"> | string
    communityId?: StringFilter<"ForumPost"> | string
    category?: StringFilter<"ForumPost"> | string
    isPinned?: BoolFilter<"ForumPost"> | boolean
    isLocked?: BoolFilter<"ForumPost"> | boolean
    viewCount?: IntFilter<"ForumPost"> | number
    likeCount?: IntFilter<"ForumPost"> | number
    replyCount?: IntFilter<"ForumPost"> | number
    lastReplyAt?: DateTimeNullableFilter<"ForumPost"> | Date | string | null
    createdAt?: DateTimeFilter<"ForumPost"> | Date | string
    updatedAt?: DateTimeFilter<"ForumPost"> | Date | string
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    community?: XOR<CommunityScalarRelationFilter, CommunityWhereInput>
    replies?: ForumReplyListRelationFilter
    likes?: ForumPostLikeListRelationFilter
  }, "id">

  export type ForumPostOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    authorId?: SortOrder
    communityId?: SortOrder
    category?: SortOrder
    isPinned?: SortOrder
    isLocked?: SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    replyCount?: SortOrder
    lastReplyAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ForumPostCountOrderByAggregateInput
    _avg?: ForumPostAvgOrderByAggregateInput
    _max?: ForumPostMaxOrderByAggregateInput
    _min?: ForumPostMinOrderByAggregateInput
    _sum?: ForumPostSumOrderByAggregateInput
  }

  export type ForumPostScalarWhereWithAggregatesInput = {
    AND?: ForumPostScalarWhereWithAggregatesInput | ForumPostScalarWhereWithAggregatesInput[]
    OR?: ForumPostScalarWhereWithAggregatesInput[]
    NOT?: ForumPostScalarWhereWithAggregatesInput | ForumPostScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ForumPost"> | string
    title?: StringWithAggregatesFilter<"ForumPost"> | string
    content?: StringWithAggregatesFilter<"ForumPost"> | string
    authorId?: StringWithAggregatesFilter<"ForumPost"> | string
    communityId?: StringWithAggregatesFilter<"ForumPost"> | string
    category?: StringWithAggregatesFilter<"ForumPost"> | string
    isPinned?: BoolWithAggregatesFilter<"ForumPost"> | boolean
    isLocked?: BoolWithAggregatesFilter<"ForumPost"> | boolean
    viewCount?: IntWithAggregatesFilter<"ForumPost"> | number
    likeCount?: IntWithAggregatesFilter<"ForumPost"> | number
    replyCount?: IntWithAggregatesFilter<"ForumPost"> | number
    lastReplyAt?: DateTimeNullableWithAggregatesFilter<"ForumPost"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ForumPost"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ForumPost"> | Date | string
  }

  export type ForumReplyWhereInput = {
    AND?: ForumReplyWhereInput | ForumReplyWhereInput[]
    OR?: ForumReplyWhereInput[]
    NOT?: ForumReplyWhereInput | ForumReplyWhereInput[]
    id?: StringFilter<"ForumReply"> | string
    postId?: StringFilter<"ForumReply"> | string
    authorId?: StringFilter<"ForumReply"> | string
    content?: StringFilter<"ForumReply"> | string
    parentReplyId?: StringNullableFilter<"ForumReply"> | string | null
    likeCount?: IntFilter<"ForumReply"> | number
    createdAt?: DateTimeFilter<"ForumReply"> | Date | string
    updatedAt?: DateTimeFilter<"ForumReply"> | Date | string
    post?: XOR<ForumPostScalarRelationFilter, ForumPostWhereInput>
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    likes?: ForumReplyLikeListRelationFilter
  }

  export type ForumReplyOrderByWithRelationInput = {
    id?: SortOrder
    postId?: SortOrder
    authorId?: SortOrder
    content?: SortOrder
    parentReplyId?: SortOrderInput | SortOrder
    likeCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    post?: ForumPostOrderByWithRelationInput
    author?: UserOrderByWithRelationInput
    likes?: ForumReplyLikeOrderByRelationAggregateInput
  }

  export type ForumReplyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ForumReplyWhereInput | ForumReplyWhereInput[]
    OR?: ForumReplyWhereInput[]
    NOT?: ForumReplyWhereInput | ForumReplyWhereInput[]
    postId?: StringFilter<"ForumReply"> | string
    authorId?: StringFilter<"ForumReply"> | string
    content?: StringFilter<"ForumReply"> | string
    parentReplyId?: StringNullableFilter<"ForumReply"> | string | null
    likeCount?: IntFilter<"ForumReply"> | number
    createdAt?: DateTimeFilter<"ForumReply"> | Date | string
    updatedAt?: DateTimeFilter<"ForumReply"> | Date | string
    post?: XOR<ForumPostScalarRelationFilter, ForumPostWhereInput>
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    likes?: ForumReplyLikeListRelationFilter
  }, "id">

  export type ForumReplyOrderByWithAggregationInput = {
    id?: SortOrder
    postId?: SortOrder
    authorId?: SortOrder
    content?: SortOrder
    parentReplyId?: SortOrderInput | SortOrder
    likeCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ForumReplyCountOrderByAggregateInput
    _avg?: ForumReplyAvgOrderByAggregateInput
    _max?: ForumReplyMaxOrderByAggregateInput
    _min?: ForumReplyMinOrderByAggregateInput
    _sum?: ForumReplySumOrderByAggregateInput
  }

  export type ForumReplyScalarWhereWithAggregatesInput = {
    AND?: ForumReplyScalarWhereWithAggregatesInput | ForumReplyScalarWhereWithAggregatesInput[]
    OR?: ForumReplyScalarWhereWithAggregatesInput[]
    NOT?: ForumReplyScalarWhereWithAggregatesInput | ForumReplyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ForumReply"> | string
    postId?: StringWithAggregatesFilter<"ForumReply"> | string
    authorId?: StringWithAggregatesFilter<"ForumReply"> | string
    content?: StringWithAggregatesFilter<"ForumReply"> | string
    parentReplyId?: StringNullableWithAggregatesFilter<"ForumReply"> | string | null
    likeCount?: IntWithAggregatesFilter<"ForumReply"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ForumReply"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ForumReply"> | Date | string
  }

  export type ForumPostLikeWhereInput = {
    AND?: ForumPostLikeWhereInput | ForumPostLikeWhereInput[]
    OR?: ForumPostLikeWhereInput[]
    NOT?: ForumPostLikeWhereInput | ForumPostLikeWhereInput[]
    id?: StringFilter<"ForumPostLike"> | string
    postId?: StringFilter<"ForumPostLike"> | string
    userId?: StringFilter<"ForumPostLike"> | string
    createdAt?: DateTimeFilter<"ForumPostLike"> | Date | string
    post?: XOR<ForumPostScalarRelationFilter, ForumPostWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ForumPostLikeOrderByWithRelationInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    post?: ForumPostOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ForumPostLikeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ForumPostLikeWhereInput | ForumPostLikeWhereInput[]
    OR?: ForumPostLikeWhereInput[]
    NOT?: ForumPostLikeWhereInput | ForumPostLikeWhereInput[]
    postId?: StringFilter<"ForumPostLike"> | string
    userId?: StringFilter<"ForumPostLike"> | string
    createdAt?: DateTimeFilter<"ForumPostLike"> | Date | string
    post?: XOR<ForumPostScalarRelationFilter, ForumPostWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ForumPostLikeOrderByWithAggregationInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: ForumPostLikeCountOrderByAggregateInput
    _max?: ForumPostLikeMaxOrderByAggregateInput
    _min?: ForumPostLikeMinOrderByAggregateInput
  }

  export type ForumPostLikeScalarWhereWithAggregatesInput = {
    AND?: ForumPostLikeScalarWhereWithAggregatesInput | ForumPostLikeScalarWhereWithAggregatesInput[]
    OR?: ForumPostLikeScalarWhereWithAggregatesInput[]
    NOT?: ForumPostLikeScalarWhereWithAggregatesInput | ForumPostLikeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ForumPostLike"> | string
    postId?: StringWithAggregatesFilter<"ForumPostLike"> | string
    userId?: StringWithAggregatesFilter<"ForumPostLike"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ForumPostLike"> | Date | string
  }

  export type ForumReplyLikeWhereInput = {
    AND?: ForumReplyLikeWhereInput | ForumReplyLikeWhereInput[]
    OR?: ForumReplyLikeWhereInput[]
    NOT?: ForumReplyLikeWhereInput | ForumReplyLikeWhereInput[]
    id?: StringFilter<"ForumReplyLike"> | string
    replyId?: StringFilter<"ForumReplyLike"> | string
    userId?: StringFilter<"ForumReplyLike"> | string
    createdAt?: DateTimeFilter<"ForumReplyLike"> | Date | string
    reply?: XOR<ForumReplyScalarRelationFilter, ForumReplyWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ForumReplyLikeOrderByWithRelationInput = {
    id?: SortOrder
    replyId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    reply?: ForumReplyOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ForumReplyLikeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ForumReplyLikeWhereInput | ForumReplyLikeWhereInput[]
    OR?: ForumReplyLikeWhereInput[]
    NOT?: ForumReplyLikeWhereInput | ForumReplyLikeWhereInput[]
    replyId?: StringFilter<"ForumReplyLike"> | string
    userId?: StringFilter<"ForumReplyLike"> | string
    createdAt?: DateTimeFilter<"ForumReplyLike"> | Date | string
    reply?: XOR<ForumReplyScalarRelationFilter, ForumReplyWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ForumReplyLikeOrderByWithAggregationInput = {
    id?: SortOrder
    replyId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: ForumReplyLikeCountOrderByAggregateInput
    _max?: ForumReplyLikeMaxOrderByAggregateInput
    _min?: ForumReplyLikeMinOrderByAggregateInput
  }

  export type ForumReplyLikeScalarWhereWithAggregatesInput = {
    AND?: ForumReplyLikeScalarWhereWithAggregatesInput | ForumReplyLikeScalarWhereWithAggregatesInput[]
    OR?: ForumReplyLikeScalarWhereWithAggregatesInput[]
    NOT?: ForumReplyLikeScalarWhereWithAggregatesInput | ForumReplyLikeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ForumReplyLike"> | string
    replyId?: StringWithAggregatesFilter<"ForumReplyLike"> | string
    userId?: StringWithAggregatesFilter<"ForumReplyLike"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ForumReplyLike"> | Date | string
  }

  export type PasswordResetTokenWhereInput = {
    AND?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    OR?: PasswordResetTokenWhereInput[]
    NOT?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    id?: StringFilter<"PasswordResetToken"> | string
    userId?: StringFilter<"PasswordResetToken"> | string
    token?: StringFilter<"PasswordResetToken"> | string
    isUsed?: BoolFilter<"PasswordResetToken"> | boolean
    expiresAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
    createdAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
  }

  export type PasswordResetTokenOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    isUsed?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    OR?: PasswordResetTokenWhereInput[]
    NOT?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    userId?: StringFilter<"PasswordResetToken"> | string
    isUsed?: BoolFilter<"PasswordResetToken"> | boolean
    expiresAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
    createdAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
  }, "id" | "token">

  export type PasswordResetTokenOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    isUsed?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: PasswordResetTokenCountOrderByAggregateInput
    _max?: PasswordResetTokenMaxOrderByAggregateInput
    _min?: PasswordResetTokenMinOrderByAggregateInput
  }

  export type PasswordResetTokenScalarWhereWithAggregatesInput = {
    AND?: PasswordResetTokenScalarWhereWithAggregatesInput | PasswordResetTokenScalarWhereWithAggregatesInput[]
    OR?: PasswordResetTokenScalarWhereWithAggregatesInput[]
    NOT?: PasswordResetTokenScalarWhereWithAggregatesInput | PasswordResetTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    userId?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    token?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    isUsed?: BoolWithAggregatesFilter<"PasswordResetToken"> | boolean
    expiresAt?: DateTimeWithAggregatesFilter<"PasswordResetToken"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"PasswordResetToken"> | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LegacySessionCreateInput = {
    sid: string
    sess: JsonNullValueInput | InputJsonValue
    expire: Date | string
  }

  export type LegacySessionUncheckedCreateInput = {
    sid: string
    sess: JsonNullValueInput | InputJsonValue
    expire: Date | string
  }

  export type LegacySessionUpdateInput = {
    sid?: StringFieldUpdateOperationsInput | string
    sess?: JsonNullValueInput | InputJsonValue
    expire?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LegacySessionUncheckedUpdateInput = {
    sid?: StringFieldUpdateOperationsInput | string
    sess?: JsonNullValueInput | InputJsonValue
    expire?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LegacySessionCreateManyInput = {
    sid: string
    sess: JsonNullValueInput | InputJsonValue
    expire: Date | string
  }

  export type LegacySessionUpdateManyMutationInput = {
    sid?: StringFieldUpdateOperationsInput | string
    sess?: JsonNullValueInput | InputJsonValue
    expire?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LegacySessionUncheckedUpdateManyInput = {
    sid?: StringFieldUpdateOperationsInput | string
    sess?: JsonNullValueInput | InputJsonValue
    expire?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityCreateInput = {
    id: string
    name: string
    displayName: string
    description?: string | null
    themeColor: string
    iconClass: string
    isActive?: boolean
    createdAt?: Date | string
    userCommunities?: UserCommunityCreateNestedManyWithoutCommunityInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutCommunityInput
    events?: EventCreateNestedManyWithoutCommunityInput
    forumPosts?: ForumPostCreateNestedManyWithoutCommunityInput
    tournaments?: TournamentCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUncheckedCreateInput = {
    id: string
    name: string
    displayName: string
    description?: string | null
    themeColor: string
    iconClass: string
    isActive?: boolean
    createdAt?: Date | string
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutCommunityInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutCommunityInput
    events?: EventUncheckedCreateNestedManyWithoutCommunityInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutCommunityInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    themeColor?: StringFieldUpdateOperationsInput | string
    iconClass?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userCommunities?: UserCommunityUpdateManyWithoutCommunityNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutCommunityNestedInput
    events?: EventUpdateManyWithoutCommunityNestedInput
    forumPosts?: ForumPostUpdateManyWithoutCommunityNestedInput
    tournaments?: TournamentUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    themeColor?: StringFieldUpdateOperationsInput | string
    iconClass?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutCommunityNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutCommunityNestedInput
    events?: EventUncheckedUpdateManyWithoutCommunityNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutCommunityNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityCreateManyInput = {
    id: string
    name: string
    displayName: string
    description?: string | null
    themeColor: string
    iconClass: string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type CommunityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    themeColor?: StringFieldUpdateOperationsInput | string
    iconClass?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    themeColor?: StringFieldUpdateOperationsInput | string
    iconClass?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCommunityCreateInput = {
    id?: string
    isPrimary?: boolean
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutUserCommunitiesInput
    community: CommunityCreateNestedOneWithoutUserCommunitiesInput
  }

  export type UserCommunityUncheckedCreateInput = {
    id?: string
    userId: string
    communityId: string
    isPrimary?: boolean
    joinedAt?: Date | string
  }

  export type UserCommunityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserCommunitiesNestedInput
    community?: CommunityUpdateOneRequiredWithoutUserCommunitiesNestedInput
  }

  export type UserCommunityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCommunityCreateManyInput = {
    id?: string
    userId: string
    communityId: string
    isPrimary?: boolean
    joinedAt?: Date | string
  }

  export type UserCommunityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCommunityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThemePreferenceCreateInput = {
    id?: string
    themeMode?: string
    customColors?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutThemePreferencesInput
    community?: CommunityCreateNestedOneWithoutThemePreferencesInput
  }

  export type ThemePreferenceUncheckedCreateInput = {
    id?: string
    userId: string
    communityId?: string | null
    themeMode?: string
    customColors?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
  }

  export type ThemePreferenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    themeMode?: StringFieldUpdateOperationsInput | string
    customColors?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutThemePreferencesNestedInput
    community?: CommunityUpdateOneWithoutThemePreferencesNestedInput
  }

  export type ThemePreferenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    themeMode?: StringFieldUpdateOperationsInput | string
    customColors?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThemePreferenceCreateManyInput = {
    id?: string
    userId: string
    communityId?: string | null
    themeMode?: string
    customColors?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
  }

  export type ThemePreferenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    themeMode?: StringFieldUpdateOperationsInput | string
    customColors?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThemePreferenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    themeMode?: StringFieldUpdateOperationsInput | string
    customColors?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    date: string
    time: string
    location: string
    maxAttendees?: number | null
    isPublic?: boolean
    status?: string
    playerSlots?: number
    alternateSlots?: number
    gameFormat?: string | null
    powerLevel?: number | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    recurrenceInterval?: number
    recurrenceEndDate?: string | null
    parentEventId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    community?: CommunityCreateNestedOneWithoutEventsInput
    creator: UserCreateNestedOneWithoutCreatedEventsInput
    host: UserCreateNestedOneWithoutHostedEventsInput
    coHost?: UserCreateNestedOneWithoutCoHostedEventsInput
    attendees?: EventAttendeeCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    date: string
    time: string
    location: string
    communityId?: string | null
    creatorId: string
    hostId: string
    coHostId?: string | null
    maxAttendees?: number | null
    isPublic?: boolean
    status?: string
    playerSlots?: number
    alternateSlots?: number
    gameFormat?: string | null
    powerLevel?: number | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    recurrenceInterval?: number
    recurrenceEndDate?: string | null
    parentEventId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attendees?: EventAttendeeUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    playerSlots?: IntFieldUpdateOperationsInput | number
    alternateSlots?: IntFieldUpdateOperationsInput | number
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    powerLevel?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceInterval?: IntFieldUpdateOperationsInput | number
    recurrenceEndDate?: NullableStringFieldUpdateOperationsInput | string | null
    parentEventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    community?: CommunityUpdateOneWithoutEventsNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedEventsNestedInput
    host?: UserUpdateOneRequiredWithoutHostedEventsNestedInput
    coHost?: UserUpdateOneWithoutCoHostedEventsNestedInput
    attendees?: EventAttendeeUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: StringFieldUpdateOperationsInput | string
    hostId?: StringFieldUpdateOperationsInput | string
    coHostId?: NullableStringFieldUpdateOperationsInput | string | null
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    playerSlots?: IntFieldUpdateOperationsInput | number
    alternateSlots?: IntFieldUpdateOperationsInput | number
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    powerLevel?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceInterval?: IntFieldUpdateOperationsInput | number
    recurrenceEndDate?: NullableStringFieldUpdateOperationsInput | string | null
    parentEventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: EventAttendeeUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    date: string
    time: string
    location: string
    communityId?: string | null
    creatorId: string
    hostId: string
    coHostId?: string | null
    maxAttendees?: number | null
    isPublic?: boolean
    status?: string
    playerSlots?: number
    alternateSlots?: number
    gameFormat?: string | null
    powerLevel?: number | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    recurrenceInterval?: number
    recurrenceEndDate?: string | null
    parentEventId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    playerSlots?: IntFieldUpdateOperationsInput | number
    alternateSlots?: IntFieldUpdateOperationsInput | number
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    powerLevel?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceInterval?: IntFieldUpdateOperationsInput | number
    recurrenceEndDate?: NullableStringFieldUpdateOperationsInput | string | null
    parentEventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: StringFieldUpdateOperationsInput | string
    hostId?: StringFieldUpdateOperationsInput | string
    coHostId?: NullableStringFieldUpdateOperationsInput | string | null
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    playerSlots?: IntFieldUpdateOperationsInput | number
    alternateSlots?: IntFieldUpdateOperationsInput | number
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    powerLevel?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceInterval?: IntFieldUpdateOperationsInput | number
    recurrenceEndDate?: NullableStringFieldUpdateOperationsInput | string | null
    parentEventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventAttendeeCreateInput = {
    id?: string
    status?: string
    role?: string
    playerType?: string
    joinedAt?: Date | string
    event: EventCreateNestedOneWithoutAttendeesInput
    user: UserCreateNestedOneWithoutEventAttendeesInput
  }

  export type EventAttendeeUncheckedCreateInput = {
    id?: string
    eventId: string
    userId: string
    status?: string
    role?: string
    playerType?: string
    joinedAt?: Date | string
  }

  export type EventAttendeeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    playerType?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutAttendeesNestedInput
    user?: UserUpdateOneRequiredWithoutEventAttendeesNestedInput
  }

  export type EventAttendeeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    playerType?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventAttendeeCreateManyInput = {
    id?: string
    eventId: string
    userId: string
    status?: string
    role?: string
    playerType?: string
    joinedAt?: Date | string
  }

  export type EventAttendeeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    playerType?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventAttendeeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    playerType?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentCreateInput = {
    id?: string
    name: string
    description?: string | null
    gameFormat: string
    maxParticipants?: number
    currentParticipants?: number
    status?: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: string | null
    rules?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    community: CommunityCreateNestedOneWithoutTournamentsInput
    organizer: UserCreateNestedOneWithoutOrganizedTournamentsInput
    participants?: TournamentParticipantCreateNestedManyWithoutTournamentInput
    rounds?: TournamentRoundCreateNestedManyWithoutTournamentInput
    matches?: TournamentMatchCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    gameFormat: string
    communityId: string
    organizerId: string
    maxParticipants?: number
    currentParticipants?: number
    status?: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: string | null
    rules?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: TournamentParticipantUncheckedCreateNestedManyWithoutTournamentInput
    rounds?: TournamentRoundUncheckedCreateNestedManyWithoutTournamentInput
    matches?: TournamentMatchUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentParticipants?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    community?: CommunityUpdateOneRequiredWithoutTournamentsNestedInput
    organizer?: UserUpdateOneRequiredWithoutOrganizedTournamentsNestedInput
    participants?: TournamentParticipantUpdateManyWithoutTournamentNestedInput
    rounds?: TournamentRoundUpdateManyWithoutTournamentNestedInput
    matches?: TournamentMatchUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
    organizerId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentParticipants?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: TournamentParticipantUncheckedUpdateManyWithoutTournamentNestedInput
    rounds?: TournamentRoundUncheckedUpdateManyWithoutTournamentNestedInput
    matches?: TournamentMatchUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    gameFormat: string
    communityId: string
    organizerId: string
    maxParticipants?: number
    currentParticipants?: number
    status?: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: string | null
    rules?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentParticipants?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
    organizerId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentParticipants?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentParticipantCreateInput = {
    id?: string
    seed?: number | null
    status?: string
    joinedAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutParticipantsInput
    user: UserCreateNestedOneWithoutTournamentParticipationInput
  }

  export type TournamentParticipantUncheckedCreateInput = {
    id?: string
    tournamentId: string
    userId: string
    seed?: number | null
    status?: string
    joinedAt?: Date | string
  }

  export type TournamentParticipantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    seed?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutParticipantsNestedInput
    user?: UserUpdateOneRequiredWithoutTournamentParticipationNestedInput
  }

  export type TournamentParticipantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    seed?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentParticipantCreateManyInput = {
    id?: string
    tournamentId: string
    userId: string
    seed?: number | null
    status?: string
    joinedAt?: Date | string
  }

  export type TournamentParticipantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    seed?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentParticipantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    seed?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentFormatCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    supportsSeeding?: boolean
    requiresEvenParticipants?: boolean
    isActive?: boolean
  }

  export type TournamentFormatUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    supportsSeeding?: boolean
    requiresEvenParticipants?: boolean
    isActive?: boolean
  }

  export type TournamentFormatUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    supportsSeeding?: BoolFieldUpdateOperationsInput | boolean
    requiresEvenParticipants?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TournamentFormatUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    supportsSeeding?: BoolFieldUpdateOperationsInput | boolean
    requiresEvenParticipants?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TournamentFormatCreateManyInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    supportsSeeding?: boolean
    requiresEvenParticipants?: boolean
    isActive?: boolean
  }

  export type TournamentFormatUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    supportsSeeding?: BoolFieldUpdateOperationsInput | boolean
    requiresEvenParticipants?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TournamentFormatUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    supportsSeeding?: BoolFieldUpdateOperationsInput | boolean
    requiresEvenParticipants?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TournamentRoundCreateInput = {
    id?: string
    roundNumber: number
    name?: string | null
    status?: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutRoundsInput
    matches?: TournamentMatchCreateNestedManyWithoutRoundInput
  }

  export type TournamentRoundUncheckedCreateInput = {
    id?: string
    tournamentId: string
    roundNumber: number
    name?: string | null
    status?: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    matches?: TournamentMatchUncheckedCreateNestedManyWithoutRoundInput
  }

  export type TournamentRoundUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutRoundsNestedInput
    matches?: TournamentMatchUpdateManyWithoutRoundNestedInput
  }

  export type TournamentRoundUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: TournamentMatchUncheckedUpdateManyWithoutRoundNestedInput
  }

  export type TournamentRoundCreateManyInput = {
    id?: string
    tournamentId: string
    roundNumber: number
    name?: string | null
    status?: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
  }

  export type TournamentRoundUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentRoundUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchCreateInput = {
    id?: string
    status?: string
    gameSessionId?: string | null
    bracketPosition?: number | null
    player1Score?: number
    player2Score?: number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutMatchesInput
    round: TournamentRoundCreateNestedOneWithoutMatchesInput
    player1?: UserCreateNestedOneWithoutTournamentMatchesPlayer1Input
    player2?: UserCreateNestedOneWithoutTournamentMatchesPlayer2Input
    winner?: UserCreateNestedOneWithoutTournamentMatchWinsInput
    results?: MatchResultCreateNestedManyWithoutMatchInput
  }

  export type TournamentMatchUncheckedCreateInput = {
    id?: string
    tournamentId: string
    roundId: string
    player1Id?: string | null
    player2Id?: string | null
    winnerId?: string | null
    status?: string
    gameSessionId?: string | null
    bracketPosition?: number | null
    player1Score?: number
    player2Score?: number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    results?: MatchResultUncheckedCreateNestedManyWithoutMatchInput
  }

  export type TournamentMatchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutMatchesNestedInput
    round?: TournamentRoundUpdateOneRequiredWithoutMatchesNestedInput
    player1?: UserUpdateOneWithoutTournamentMatchesPlayer1NestedInput
    player2?: UserUpdateOneWithoutTournamentMatchesPlayer2NestedInput
    winner?: UserUpdateOneWithoutTournamentMatchWinsNestedInput
    results?: MatchResultUpdateManyWithoutMatchNestedInput
  }

  export type TournamentMatchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    roundId?: StringFieldUpdateOperationsInput | string
    player1Id?: NullableStringFieldUpdateOperationsInput | string | null
    player2Id?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    results?: MatchResultUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type TournamentMatchCreateManyInput = {
    id?: string
    tournamentId: string
    roundId: string
    player1Id?: string | null
    player2Id?: string | null
    winnerId?: string | null
    status?: string
    gameSessionId?: string | null
    bracketPosition?: number | null
    player1Score?: number
    player2Score?: number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
  }

  export type TournamentMatchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    roundId?: StringFieldUpdateOperationsInput | string
    player1Id?: NullableStringFieldUpdateOperationsInput | string | null
    player2Id?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchResultCreateInput = {
    id?: string
    winnerScore: number
    loserScore: number
    gameLength?: number | null
    resultType?: string
    notes?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    match: TournamentMatchCreateNestedOneWithoutResultsInput
    winner: UserCreateNestedOneWithoutMatchResultsWinsInput
    loser?: UserCreateNestedOneWithoutMatchResultsLossesInput
    reportedBy: UserCreateNestedOneWithoutMatchResultsReportedInput
    verifiedBy?: UserCreateNestedOneWithoutMatchResultsVerifiedInput
  }

  export type MatchResultUncheckedCreateInput = {
    id?: string
    matchId: string
    winnerId: string
    loserId?: string | null
    winnerScore: number
    loserScore: number
    gameLength?: number | null
    resultType?: string
    notes?: string | null
    reportedById: string
    verifiedById?: string | null
    isVerified?: boolean
    createdAt?: Date | string
  }

  export type MatchResultUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    winnerScore?: IntFieldUpdateOperationsInput | number
    loserScore?: IntFieldUpdateOperationsInput | number
    gameLength?: NullableIntFieldUpdateOperationsInput | number | null
    resultType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: TournamentMatchUpdateOneRequiredWithoutResultsNestedInput
    winner?: UserUpdateOneRequiredWithoutMatchResultsWinsNestedInput
    loser?: UserUpdateOneWithoutMatchResultsLossesNestedInput
    reportedBy?: UserUpdateOneRequiredWithoutMatchResultsReportedNestedInput
    verifiedBy?: UserUpdateOneWithoutMatchResultsVerifiedNestedInput
  }

  export type MatchResultUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    winnerId?: StringFieldUpdateOperationsInput | string
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    winnerScore?: IntFieldUpdateOperationsInput | number
    loserScore?: IntFieldUpdateOperationsInput | number
    gameLength?: NullableIntFieldUpdateOperationsInput | number | null
    resultType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: StringFieldUpdateOperationsInput | string
    verifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchResultCreateManyInput = {
    id?: string
    matchId: string
    winnerId: string
    loserId?: string | null
    winnerScore: number
    loserScore: number
    gameLength?: number | null
    resultType?: string
    notes?: string | null
    reportedById: string
    verifiedById?: string | null
    isVerified?: boolean
    createdAt?: Date | string
  }

  export type MatchResultUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    winnerScore?: IntFieldUpdateOperationsInput | number
    loserScore?: IntFieldUpdateOperationsInput | number
    gameLength?: NullableIntFieldUpdateOperationsInput | number | null
    resultType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchResultUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    winnerId?: StringFieldUpdateOperationsInput | string
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    winnerScore?: IntFieldUpdateOperationsInput | number
    loserScore?: IntFieldUpdateOperationsInput | number
    gameLength?: NullableIntFieldUpdateOperationsInput | number | null
    resultType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: StringFieldUpdateOperationsInput | string
    verifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    title: string
    message: string
    type: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    title: string
    message: string
    type: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    title: string
    message: string
    type: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateInput = {
    id?: string
    subject?: string | null
    content: string
    isRead?: boolean
    createdAt?: Date | string
    editedAt?: Date | string | null
    sender: UserCreateNestedOneWithoutSentMessagesInput
    receiver: UserCreateNestedOneWithoutReceivedMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    senderId: string
    receiverId: string
    subject?: string | null
    content: string
    isRead?: boolean
    createdAt?: Date | string
    editedAt?: Date | string | null
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
    receiver?: UserUpdateOneRequiredWithoutReceivedMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MessageCreateManyInput = {
    id?: string
    senderId: string
    receiverId: string
    subject?: string | null
    content: string
    isRead?: boolean
    createdAt?: Date | string
    editedAt?: Date | string | null
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GameSessionCreateInput = {
    id?: string
    name: string
    gameType: string
    maxPlayers?: number
    currentPlayers?: number
    status?: string
    isPrivate?: boolean
    gameRoomUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    host: UserCreateNestedOneWithoutHostedGameSessionsInput
    coHost?: UserCreateNestedOneWithoutCoHostedGameSessionsInput
  }

  export type GameSessionUncheckedCreateInput = {
    id?: string
    name: string
    gameType: string
    hostId: string
    coHostId?: string | null
    maxPlayers?: number
    currentPlayers?: number
    status?: string
    isPrivate?: boolean
    gameRoomUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
  }

  export type GameSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gameType?: StringFieldUpdateOperationsInput | string
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    gameRoomUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    host?: UserUpdateOneRequiredWithoutHostedGameSessionsNestedInput
    coHost?: UserUpdateOneWithoutCoHostedGameSessionsNestedInput
  }

  export type GameSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gameType?: StringFieldUpdateOperationsInput | string
    hostId?: StringFieldUpdateOperationsInput | string
    coHostId?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    gameRoomUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GameSessionCreateManyInput = {
    id?: string
    name: string
    gameType: string
    hostId: string
    coHostId?: string | null
    maxPlayers?: number
    currentPlayers?: number
    status?: string
    isPrivate?: boolean
    gameRoomUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
  }

  export type GameSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gameType?: StringFieldUpdateOperationsInput | string
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    gameRoomUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GameSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gameType?: StringFieldUpdateOperationsInput | string
    hostId?: StringFieldUpdateOperationsInput | string
    coHostId?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    gameRoomUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserSocialLinkCreateInput = {
    id?: string
    platform: string
    url: string
    username?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSocialLinksInput
  }

  export type UserSocialLinkUncheckedCreateInput = {
    id?: string
    userId: string
    platform: string
    url: string
    username?: string | null
    isPublic?: boolean
    createdAt?: Date | string
  }

  export type UserSocialLinkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSocialLinksNestedInput
  }

  export type UserSocialLinkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSocialLinkCreateManyInput = {
    id?: string
    userId: string
    platform: string
    url: string
    username?: string | null
    isPublic?: boolean
    createdAt?: Date | string
  }

  export type UserSocialLinkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSocialLinkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserGamingProfileCreateInput = {
    id?: string
    platform: string
    username: string
    skillLevel?: string | null
    preferredFormats?: NullableJsonNullValueInput | InputJsonValue
    achievementBadges?: NullableJsonNullValueInput | InputJsonValue
    statistics?: NullableJsonNullValueInput | InputJsonValue
    streamingSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutGamingProfilesInput
  }

  export type UserGamingProfileUncheckedCreateInput = {
    id?: string
    userId: string
    platform: string
    username: string
    skillLevel?: string | null
    preferredFormats?: NullableJsonNullValueInput | InputJsonValue
    achievementBadges?: NullableJsonNullValueInput | InputJsonValue
    statistics?: NullableJsonNullValueInput | InputJsonValue
    streamingSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserGamingProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    skillLevel?: NullableStringFieldUpdateOperationsInput | string | null
    preferredFormats?: NullableJsonNullValueInput | InputJsonValue
    achievementBadges?: NullableJsonNullValueInput | InputJsonValue
    statistics?: NullableJsonNullValueInput | InputJsonValue
    streamingSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGamingProfilesNestedInput
  }

  export type UserGamingProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    skillLevel?: NullableStringFieldUpdateOperationsInput | string | null
    preferredFormats?: NullableJsonNullValueInput | InputJsonValue
    achievementBadges?: NullableJsonNullValueInput | InputJsonValue
    statistics?: NullableJsonNullValueInput | InputJsonValue
    streamingSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserGamingProfileCreateManyInput = {
    id?: string
    userId: string
    platform: string
    username: string
    skillLevel?: string | null
    preferredFormats?: NullableJsonNullValueInput | InputJsonValue
    achievementBadges?: NullableJsonNullValueInput | InputJsonValue
    statistics?: NullableJsonNullValueInput | InputJsonValue
    streamingSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserGamingProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    skillLevel?: NullableStringFieldUpdateOperationsInput | string | null
    preferredFormats?: NullableJsonNullValueInput | InputJsonValue
    achievementBadges?: NullableJsonNullValueInput | InputJsonValue
    statistics?: NullableJsonNullValueInput | InputJsonValue
    streamingSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserGamingProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    skillLevel?: NullableStringFieldUpdateOperationsInput | string | null
    preferredFormats?: NullableJsonNullValueInput | InputJsonValue
    achievementBadges?: NullableJsonNullValueInput | InputJsonValue
    statistics?: NullableJsonNullValueInput | InputJsonValue
    streamingSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendshipCreateInput = {
    id?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutSentFriendRequestsInput
    receiver: UserCreateNestedOneWithoutReceivedFriendRequestsInput
  }

  export type FriendshipUncheckedCreateInput = {
    id?: string
    requesterId: string
    receiverId: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendshipUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutSentFriendRequestsNestedInput
    receiver?: UserUpdateOneRequiredWithoutReceivedFriendRequestsNestedInput
  }

  export type FriendshipUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requesterId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendshipCreateManyInput = {
    id?: string
    requesterId: string
    receiverId: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendshipUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendshipUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    requesterId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActivityCreateInput = {
    id?: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutActivitiesInput
  }

  export type UserActivityUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserActivityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutActivitiesNestedInput
  }

  export type UserActivityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActivityCreateManyInput = {
    id?: string
    userId: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserActivityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActivityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingsCreateInput = {
    id?: string
    emailNotifications?: boolean
    pushNotifications?: boolean
    profileVisibility?: string
    showOnlineStatus?: boolean
    allowFriendRequests?: boolean
    allowDirectMessages?: boolean
    language?: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSettingsInput
  }

  export type UserSettingsUncheckedCreateInput = {
    id?: string
    userId: string
    emailNotifications?: boolean
    pushNotifications?: boolean
    profileVisibility?: string
    showOnlineStatus?: boolean
    allowFriendRequests?: boolean
    allowDirectMessages?: boolean
    language?: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSettingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    profileVisibility?: StringFieldUpdateOperationsInput | string
    showOnlineStatus?: BoolFieldUpdateOperationsInput | boolean
    allowFriendRequests?: BoolFieldUpdateOperationsInput | boolean
    allowDirectMessages?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSettingsNestedInput
  }

  export type UserSettingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    profileVisibility?: StringFieldUpdateOperationsInput | string
    showOnlineStatus?: BoolFieldUpdateOperationsInput | boolean
    allowFriendRequests?: BoolFieldUpdateOperationsInput | boolean
    allowDirectMessages?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingsCreateManyInput = {
    id?: string
    userId: string
    emailNotifications?: boolean
    pushNotifications?: boolean
    profileVisibility?: string
    showOnlineStatus?: boolean
    allowFriendRequests?: boolean
    allowDirectMessages?: boolean
    language?: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSettingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    profileVisibility?: StringFieldUpdateOperationsInput | string
    showOnlineStatus?: BoolFieldUpdateOperationsInput | boolean
    allowFriendRequests?: BoolFieldUpdateOperationsInput | boolean
    allowDirectMessages?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    profileVisibility?: StringFieldUpdateOperationsInput | string
    showOnlineStatus?: BoolFieldUpdateOperationsInput | boolean
    allowFriendRequests?: BoolFieldUpdateOperationsInput | boolean
    allowDirectMessages?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchmakingPreferenceCreateInput = {
    id?: string
    selectedGames?: JsonNullValueInput | InputJsonValue
    selectedFormats?: JsonNullValueInput | InputJsonValue
    powerLevelMin?: number
    powerLevelMax?: number
    playstyle?: string
    location?: string | null
    onlineOnly?: boolean
    availability?: string
    language?: string
    maxDistance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMatchmakingPreferencesInput
  }

  export type MatchmakingPreferenceUncheckedCreateInput = {
    id?: string
    userId: string
    selectedGames?: JsonNullValueInput | InputJsonValue
    selectedFormats?: JsonNullValueInput | InputJsonValue
    powerLevelMin?: number
    powerLevelMax?: number
    playstyle?: string
    location?: string | null
    onlineOnly?: boolean
    availability?: string
    language?: string
    maxDistance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchmakingPreferenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedGames?: JsonNullValueInput | InputJsonValue
    selectedFormats?: JsonNullValueInput | InputJsonValue
    powerLevelMin?: IntFieldUpdateOperationsInput | number
    powerLevelMax?: IntFieldUpdateOperationsInput | number
    playstyle?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    onlineOnly?: BoolFieldUpdateOperationsInput | boolean
    availability?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    maxDistance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMatchmakingPreferencesNestedInput
  }

  export type MatchmakingPreferenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    selectedGames?: JsonNullValueInput | InputJsonValue
    selectedFormats?: JsonNullValueInput | InputJsonValue
    powerLevelMin?: IntFieldUpdateOperationsInput | number
    powerLevelMax?: IntFieldUpdateOperationsInput | number
    playstyle?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    onlineOnly?: BoolFieldUpdateOperationsInput | boolean
    availability?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    maxDistance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchmakingPreferenceCreateManyInput = {
    id?: string
    userId: string
    selectedGames?: JsonNullValueInput | InputJsonValue
    selectedFormats?: JsonNullValueInput | InputJsonValue
    powerLevelMin?: number
    powerLevelMax?: number
    playstyle?: string
    location?: string | null
    onlineOnly?: boolean
    availability?: string
    language?: string
    maxDistance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchmakingPreferenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedGames?: JsonNullValueInput | InputJsonValue
    selectedFormats?: JsonNullValueInput | InputJsonValue
    powerLevelMin?: IntFieldUpdateOperationsInput | number
    powerLevelMax?: IntFieldUpdateOperationsInput | number
    playstyle?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    onlineOnly?: BoolFieldUpdateOperationsInput | boolean
    availability?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    maxDistance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchmakingPreferenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    selectedGames?: JsonNullValueInput | InputJsonValue
    selectedFormats?: JsonNullValueInput | InputJsonValue
    powerLevelMin?: IntFieldUpdateOperationsInput | number
    powerLevelMax?: IntFieldUpdateOperationsInput | number
    playstyle?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    onlineOnly?: BoolFieldUpdateOperationsInput | boolean
    availability?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    maxDistance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumPostCreateInput = {
    id?: string
    title: string
    content: string
    category: string
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    likeCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutForumPostsInput
    community: CommunityCreateNestedOneWithoutForumPostsInput
    replies?: ForumReplyCreateNestedManyWithoutPostInput
    likes?: ForumPostLikeCreateNestedManyWithoutPostInput
  }

  export type ForumPostUncheckedCreateInput = {
    id?: string
    title: string
    content: string
    authorId: string
    communityId: string
    category: string
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    likeCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: ForumReplyUncheckedCreateNestedManyWithoutPostInput
    likes?: ForumPostLikeUncheckedCreateNestedManyWithoutPostInput
  }

  export type ForumPostUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutForumPostsNestedInput
    community?: CommunityUpdateOneRequiredWithoutForumPostsNestedInput
    replies?: ForumReplyUpdateManyWithoutPostNestedInput
    likes?: ForumPostLikeUpdateManyWithoutPostNestedInput
  }

  export type ForumPostUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: ForumReplyUncheckedUpdateManyWithoutPostNestedInput
    likes?: ForumPostLikeUncheckedUpdateManyWithoutPostNestedInput
  }

  export type ForumPostCreateManyInput = {
    id?: string
    title: string
    content: string
    authorId: string
    communityId: string
    category: string
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    likeCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ForumPostUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumPostUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumReplyCreateInput = {
    id?: string
    content: string
    parentReplyId?: string | null
    likeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    post: ForumPostCreateNestedOneWithoutRepliesInput
    author: UserCreateNestedOneWithoutForumRepliesInput
    likes?: ForumReplyLikeCreateNestedManyWithoutReplyInput
  }

  export type ForumReplyUncheckedCreateInput = {
    id?: string
    postId: string
    authorId: string
    content: string
    parentReplyId?: string | null
    likeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    likes?: ForumReplyLikeUncheckedCreateNestedManyWithoutReplyInput
  }

  export type ForumReplyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    parentReplyId?: NullableStringFieldUpdateOperationsInput | string | null
    likeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: ForumPostUpdateOneRequiredWithoutRepliesNestedInput
    author?: UserUpdateOneRequiredWithoutForumRepliesNestedInput
    likes?: ForumReplyLikeUpdateManyWithoutReplyNestedInput
  }

  export type ForumReplyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    parentReplyId?: NullableStringFieldUpdateOperationsInput | string | null
    likeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likes?: ForumReplyLikeUncheckedUpdateManyWithoutReplyNestedInput
  }

  export type ForumReplyCreateManyInput = {
    id?: string
    postId: string
    authorId: string
    content: string
    parentReplyId?: string | null
    likeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ForumReplyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    parentReplyId?: NullableStringFieldUpdateOperationsInput | string | null
    likeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumReplyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    parentReplyId?: NullableStringFieldUpdateOperationsInput | string | null
    likeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumPostLikeCreateInput = {
    id?: string
    createdAt?: Date | string
    post: ForumPostCreateNestedOneWithoutLikesInput
    user: UserCreateNestedOneWithoutForumPostLikesInput
  }

  export type ForumPostLikeUncheckedCreateInput = {
    id?: string
    postId: string
    userId: string
    createdAt?: Date | string
  }

  export type ForumPostLikeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: ForumPostUpdateOneRequiredWithoutLikesNestedInput
    user?: UserUpdateOneRequiredWithoutForumPostLikesNestedInput
  }

  export type ForumPostLikeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumPostLikeCreateManyInput = {
    id?: string
    postId: string
    userId: string
    createdAt?: Date | string
  }

  export type ForumPostLikeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumPostLikeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumReplyLikeCreateInput = {
    id?: string
    createdAt?: Date | string
    reply: ForumReplyCreateNestedOneWithoutLikesInput
    user: UserCreateNestedOneWithoutForumReplyLikesInput
  }

  export type ForumReplyLikeUncheckedCreateInput = {
    id?: string
    replyId: string
    userId: string
    createdAt?: Date | string
  }

  export type ForumReplyLikeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reply?: ForumReplyUpdateOneRequiredWithoutLikesNestedInput
    user?: UserUpdateOneRequiredWithoutForumReplyLikesNestedInput
  }

  export type ForumReplyLikeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    replyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumReplyLikeCreateManyInput = {
    id?: string
    replyId: string
    userId: string
    createdAt?: Date | string
  }

  export type ForumReplyLikeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumReplyLikeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    replyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenCreateInput = {
    id?: string
    userId: string
    token: string
    isUsed?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type PasswordResetTokenUncheckedCreateInput = {
    id?: string
    userId: string
    token: string
    isUsed?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type PasswordResetTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenCreateManyInput = {
    id?: string
    userId: string
    token: string
    isUsed?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type PasswordResetTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type LegacySessionCountOrderByAggregateInput = {
    sid?: SortOrder
    sess?: SortOrder
    expire?: SortOrder
  }

  export type LegacySessionMaxOrderByAggregateInput = {
    sid?: SortOrder
    expire?: SortOrder
  }

  export type LegacySessionMinOrderByAggregateInput = {
    sid?: SortOrder
    expire?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type UserCommunityListRelationFilter = {
    every?: UserCommunityWhereInput
    some?: UserCommunityWhereInput
    none?: UserCommunityWhereInput
  }

  export type ThemePreferenceListRelationFilter = {
    every?: ThemePreferenceWhereInput
    some?: ThemePreferenceWhereInput
    none?: ThemePreferenceWhereInput
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type EventAttendeeListRelationFilter = {
    every?: EventAttendeeWhereInput
    some?: EventAttendeeWhereInput
    none?: EventAttendeeWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type GameSessionListRelationFilter = {
    every?: GameSessionWhereInput
    some?: GameSessionWhereInput
    none?: GameSessionWhereInput
  }

  export type UserSocialLinkListRelationFilter = {
    every?: UserSocialLinkWhereInput
    some?: UserSocialLinkWhereInput
    none?: UserSocialLinkWhereInput
  }

  export type UserGamingProfileListRelationFilter = {
    every?: UserGamingProfileWhereInput
    some?: UserGamingProfileWhereInput
    none?: UserGamingProfileWhereInput
  }

  export type FriendshipListRelationFilter = {
    every?: FriendshipWhereInput
    some?: FriendshipWhereInput
    none?: FriendshipWhereInput
  }

  export type UserActivityListRelationFilter = {
    every?: UserActivityWhereInput
    some?: UserActivityWhereInput
    none?: UserActivityWhereInput
  }

  export type UserSettingsListRelationFilter = {
    every?: UserSettingsWhereInput
    some?: UserSettingsWhereInput
    none?: UserSettingsWhereInput
  }

  export type MatchmakingPreferenceListRelationFilter = {
    every?: MatchmakingPreferenceWhereInput
    some?: MatchmakingPreferenceWhereInput
    none?: MatchmakingPreferenceWhereInput
  }

  export type TournamentListRelationFilter = {
    every?: TournamentWhereInput
    some?: TournamentWhereInput
    none?: TournamentWhereInput
  }

  export type TournamentParticipantListRelationFilter = {
    every?: TournamentParticipantWhereInput
    some?: TournamentParticipantWhereInput
    none?: TournamentParticipantWhereInput
  }

  export type ForumPostListRelationFilter = {
    every?: ForumPostWhereInput
    some?: ForumPostWhereInput
    none?: ForumPostWhereInput
  }

  export type ForumReplyListRelationFilter = {
    every?: ForumReplyWhereInput
    some?: ForumReplyWhereInput
    none?: ForumReplyWhereInput
  }

  export type ForumPostLikeListRelationFilter = {
    every?: ForumPostLikeWhereInput
    some?: ForumPostLikeWhereInput
    none?: ForumPostLikeWhereInput
  }

  export type ForumReplyLikeListRelationFilter = {
    every?: ForumReplyLikeWhereInput
    some?: ForumReplyLikeWhereInput
    none?: ForumReplyLikeWhereInput
  }

  export type TournamentMatchListRelationFilter = {
    every?: TournamentMatchWhereInput
    some?: TournamentMatchWhereInput
    none?: TournamentMatchWhereInput
  }

  export type MatchResultListRelationFilter = {
    every?: MatchResultWhereInput
    some?: MatchResultWhereInput
    none?: MatchResultWhereInput
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCommunityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ThemePreferenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventAttendeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSocialLinkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserGamingProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FriendshipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSettingsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchmakingPreferenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TournamentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TournamentParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ForumPostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ForumReplyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ForumPostLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ForumReplyLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TournamentMatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    profileImageUrl?: SortOrder
    primaryCommunity?: SortOrder
    username?: SortOrder
    bio?: SortOrder
    location?: SortOrder
    website?: SortOrder
    status?: SortOrder
    statusMessage?: SortOrder
    timezone?: SortOrder
    dateOfBirth?: SortOrder
    isPrivate?: SortOrder
    showOnlineStatus?: SortOrder
    allowDirectMessages?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    profileImageUrl?: SortOrder
    primaryCommunity?: SortOrder
    username?: SortOrder
    bio?: SortOrder
    location?: SortOrder
    website?: SortOrder
    status?: SortOrder
    statusMessage?: SortOrder
    timezone?: SortOrder
    dateOfBirth?: SortOrder
    isPrivate?: SortOrder
    showOnlineStatus?: SortOrder
    allowDirectMessages?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    profileImageUrl?: SortOrder
    primaryCommunity?: SortOrder
    username?: SortOrder
    bio?: SortOrder
    location?: SortOrder
    website?: SortOrder
    status?: SortOrder
    statusMessage?: SortOrder
    timezone?: SortOrder
    dateOfBirth?: SortOrder
    isPrivate?: SortOrder
    showOnlineStatus?: SortOrder
    allowDirectMessages?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CommunityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    description?: SortOrder
    themeColor?: SortOrder
    iconClass?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type CommunityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    description?: SortOrder
    themeColor?: SortOrder
    iconClass?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type CommunityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    description?: SortOrder
    themeColor?: SortOrder
    iconClass?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type CommunityScalarRelationFilter = {
    is?: CommunityWhereInput
    isNot?: CommunityWhereInput
  }

  export type UserCommunityCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    communityId?: SortOrder
    isPrimary?: SortOrder
    joinedAt?: SortOrder
  }

  export type UserCommunityMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    communityId?: SortOrder
    isPrimary?: SortOrder
    joinedAt?: SortOrder
  }

  export type UserCommunityMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    communityId?: SortOrder
    isPrimary?: SortOrder
    joinedAt?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type CommunityNullableScalarRelationFilter = {
    is?: CommunityWhereInput | null
    isNot?: CommunityWhereInput | null
  }

  export type ThemePreferenceCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    communityId?: SortOrder
    themeMode?: SortOrder
    customColors?: SortOrder
    updatedAt?: SortOrder
  }

  export type ThemePreferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    communityId?: SortOrder
    themeMode?: SortOrder
    updatedAt?: SortOrder
  }

  export type ThemePreferenceMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    communityId?: SortOrder
    themeMode?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    date?: SortOrder
    time?: SortOrder
    location?: SortOrder
    communityId?: SortOrder
    creatorId?: SortOrder
    hostId?: SortOrder
    coHostId?: SortOrder
    maxAttendees?: SortOrder
    isPublic?: SortOrder
    status?: SortOrder
    playerSlots?: SortOrder
    alternateSlots?: SortOrder
    gameFormat?: SortOrder
    powerLevel?: SortOrder
    isRecurring?: SortOrder
    recurrencePattern?: SortOrder
    recurrenceInterval?: SortOrder
    recurrenceEndDate?: SortOrder
    parentEventId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventAvgOrderByAggregateInput = {
    maxAttendees?: SortOrder
    playerSlots?: SortOrder
    alternateSlots?: SortOrder
    powerLevel?: SortOrder
    recurrenceInterval?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    date?: SortOrder
    time?: SortOrder
    location?: SortOrder
    communityId?: SortOrder
    creatorId?: SortOrder
    hostId?: SortOrder
    coHostId?: SortOrder
    maxAttendees?: SortOrder
    isPublic?: SortOrder
    status?: SortOrder
    playerSlots?: SortOrder
    alternateSlots?: SortOrder
    gameFormat?: SortOrder
    powerLevel?: SortOrder
    isRecurring?: SortOrder
    recurrencePattern?: SortOrder
    recurrenceInterval?: SortOrder
    recurrenceEndDate?: SortOrder
    parentEventId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    date?: SortOrder
    time?: SortOrder
    location?: SortOrder
    communityId?: SortOrder
    creatorId?: SortOrder
    hostId?: SortOrder
    coHostId?: SortOrder
    maxAttendees?: SortOrder
    isPublic?: SortOrder
    status?: SortOrder
    playerSlots?: SortOrder
    alternateSlots?: SortOrder
    gameFormat?: SortOrder
    powerLevel?: SortOrder
    isRecurring?: SortOrder
    recurrencePattern?: SortOrder
    recurrenceInterval?: SortOrder
    recurrenceEndDate?: SortOrder
    parentEventId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventSumOrderByAggregateInput = {
    maxAttendees?: SortOrder
    playerSlots?: SortOrder
    alternateSlots?: SortOrder
    powerLevel?: SortOrder
    recurrenceInterval?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EventScalarRelationFilter = {
    is?: EventWhereInput
    isNot?: EventWhereInput
  }

  export type EventAttendeeCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    role?: SortOrder
    playerType?: SortOrder
    joinedAt?: SortOrder
  }

  export type EventAttendeeMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    role?: SortOrder
    playerType?: SortOrder
    joinedAt?: SortOrder
  }

  export type EventAttendeeMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    role?: SortOrder
    playerType?: SortOrder
    joinedAt?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type TournamentRoundListRelationFilter = {
    every?: TournamentRoundWhereInput
    some?: TournamentRoundWhereInput
    none?: TournamentRoundWhereInput
  }

  export type TournamentRoundOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TournamentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    gameFormat?: SortOrder
    communityId?: SortOrder
    organizerId?: SortOrder
    maxParticipants?: SortOrder
    currentParticipants?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    bracketData?: SortOrder
    prizePool?: SortOrder
    rules?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentAvgOrderByAggregateInput = {
    maxParticipants?: SortOrder
    currentParticipants?: SortOrder
  }

  export type TournamentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    gameFormat?: SortOrder
    communityId?: SortOrder
    organizerId?: SortOrder
    maxParticipants?: SortOrder
    currentParticipants?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    prizePool?: SortOrder
    rules?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    gameFormat?: SortOrder
    communityId?: SortOrder
    organizerId?: SortOrder
    maxParticipants?: SortOrder
    currentParticipants?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    prizePool?: SortOrder
    rules?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentSumOrderByAggregateInput = {
    maxParticipants?: SortOrder
    currentParticipants?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type TournamentScalarRelationFilter = {
    is?: TournamentWhereInput
    isNot?: TournamentWhereInput
  }

  export type TournamentParticipantCountOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    userId?: SortOrder
    seed?: SortOrder
    status?: SortOrder
    joinedAt?: SortOrder
  }

  export type TournamentParticipantAvgOrderByAggregateInput = {
    seed?: SortOrder
  }

  export type TournamentParticipantMaxOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    userId?: SortOrder
    seed?: SortOrder
    status?: SortOrder
    joinedAt?: SortOrder
  }

  export type TournamentParticipantMinOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    userId?: SortOrder
    seed?: SortOrder
    status?: SortOrder
    joinedAt?: SortOrder
  }

  export type TournamentParticipantSumOrderByAggregateInput = {
    seed?: SortOrder
  }

  export type TournamentFormatCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    supportsSeeding?: SortOrder
    requiresEvenParticipants?: SortOrder
    isActive?: SortOrder
  }

  export type TournamentFormatMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    supportsSeeding?: SortOrder
    requiresEvenParticipants?: SortOrder
    isActive?: SortOrder
  }

  export type TournamentFormatMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    supportsSeeding?: SortOrder
    requiresEvenParticipants?: SortOrder
    isActive?: SortOrder
  }

  export type TournamentRoundCountOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    roundNumber?: SortOrder
    name?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
  }

  export type TournamentRoundAvgOrderByAggregateInput = {
    roundNumber?: SortOrder
  }

  export type TournamentRoundMaxOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    roundNumber?: SortOrder
    name?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
  }

  export type TournamentRoundMinOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    roundNumber?: SortOrder
    name?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
  }

  export type TournamentRoundSumOrderByAggregateInput = {
    roundNumber?: SortOrder
  }

  export type TournamentRoundScalarRelationFilter = {
    is?: TournamentRoundWhereInput
    isNot?: TournamentRoundWhereInput
  }

  export type TournamentMatchCountOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    roundId?: SortOrder
    player1Id?: SortOrder
    player2Id?: SortOrder
    winnerId?: SortOrder
    status?: SortOrder
    gameSessionId?: SortOrder
    bracketPosition?: SortOrder
    player1Score?: SortOrder
    player2Score?: SortOrder
    matchData?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
  }

  export type TournamentMatchAvgOrderByAggregateInput = {
    bracketPosition?: SortOrder
    player1Score?: SortOrder
    player2Score?: SortOrder
  }

  export type TournamentMatchMaxOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    roundId?: SortOrder
    player1Id?: SortOrder
    player2Id?: SortOrder
    winnerId?: SortOrder
    status?: SortOrder
    gameSessionId?: SortOrder
    bracketPosition?: SortOrder
    player1Score?: SortOrder
    player2Score?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
  }

  export type TournamentMatchMinOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    roundId?: SortOrder
    player1Id?: SortOrder
    player2Id?: SortOrder
    winnerId?: SortOrder
    status?: SortOrder
    gameSessionId?: SortOrder
    bracketPosition?: SortOrder
    player1Score?: SortOrder
    player2Score?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
  }

  export type TournamentMatchSumOrderByAggregateInput = {
    bracketPosition?: SortOrder
    player1Score?: SortOrder
    player2Score?: SortOrder
  }

  export type TournamentMatchScalarRelationFilter = {
    is?: TournamentMatchWhereInput
    isNot?: TournamentMatchWhereInput
  }

  export type MatchResultCountOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    winnerId?: SortOrder
    loserId?: SortOrder
    winnerScore?: SortOrder
    loserScore?: SortOrder
    gameLength?: SortOrder
    resultType?: SortOrder
    notes?: SortOrder
    reportedById?: SortOrder
    verifiedById?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
  }

  export type MatchResultAvgOrderByAggregateInput = {
    winnerScore?: SortOrder
    loserScore?: SortOrder
    gameLength?: SortOrder
  }

  export type MatchResultMaxOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    winnerId?: SortOrder
    loserId?: SortOrder
    winnerScore?: SortOrder
    loserScore?: SortOrder
    gameLength?: SortOrder
    resultType?: SortOrder
    notes?: SortOrder
    reportedById?: SortOrder
    verifiedById?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
  }

  export type MatchResultMinOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    winnerId?: SortOrder
    loserId?: SortOrder
    winnerScore?: SortOrder
    loserScore?: SortOrder
    gameLength?: SortOrder
    resultType?: SortOrder
    notes?: SortOrder
    reportedById?: SortOrder
    verifiedById?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
  }

  export type MatchResultSumOrderByAggregateInput = {
    winnerScore?: SortOrder
    loserScore?: SortOrder
    gameLength?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    actionUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    actionUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    actionUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    editedAt?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    editedAt?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    editedAt?: SortOrder
  }

  export type GameSessionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    gameType?: SortOrder
    hostId?: SortOrder
    coHostId?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    status?: SortOrder
    isPrivate?: SortOrder
    gameRoomUrl?: SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
  }

  export type GameSessionAvgOrderByAggregateInput = {
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
  }

  export type GameSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    gameType?: SortOrder
    hostId?: SortOrder
    coHostId?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    status?: SortOrder
    isPrivate?: SortOrder
    gameRoomUrl?: SortOrder
    createdAt?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
  }

  export type GameSessionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    gameType?: SortOrder
    hostId?: SortOrder
    coHostId?: SortOrder
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
    status?: SortOrder
    isPrivate?: SortOrder
    gameRoomUrl?: SortOrder
    createdAt?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
  }

  export type GameSessionSumOrderByAggregateInput = {
    maxPlayers?: SortOrder
    currentPlayers?: SortOrder
  }

  export type UserSocialLinkCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    platform?: SortOrder
    url?: SortOrder
    username?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSocialLinkMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    platform?: SortOrder
    url?: SortOrder
    username?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSocialLinkMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    platform?: SortOrder
    url?: SortOrder
    username?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
  }

  export type UserGamingProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    platform?: SortOrder
    username?: SortOrder
    skillLevel?: SortOrder
    preferredFormats?: SortOrder
    achievementBadges?: SortOrder
    statistics?: SortOrder
    streamingSettings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserGamingProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    platform?: SortOrder
    username?: SortOrder
    skillLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserGamingProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    platform?: SortOrder
    username?: SortOrder
    skillLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FriendshipCountOrderByAggregateInput = {
    id?: SortOrder
    requesterId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FriendshipMaxOrderByAggregateInput = {
    id?: SortOrder
    requesterId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FriendshipMinOrderByAggregateInput = {
    id?: SortOrder
    requesterId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserActivityCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type UserActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type UserActivityMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    profileVisibility?: SortOrder
    showOnlineStatus?: SortOrder
    allowFriendRequests?: SortOrder
    allowDirectMessages?: SortOrder
    language?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    profileVisibility?: SortOrder
    showOnlineStatus?: SortOrder
    allowFriendRequests?: SortOrder
    allowDirectMessages?: SortOrder
    language?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    profileVisibility?: SortOrder
    showOnlineStatus?: SortOrder
    allowFriendRequests?: SortOrder
    allowDirectMessages?: SortOrder
    language?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchmakingPreferenceCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    selectedGames?: SortOrder
    selectedFormats?: SortOrder
    powerLevelMin?: SortOrder
    powerLevelMax?: SortOrder
    playstyle?: SortOrder
    location?: SortOrder
    onlineOnly?: SortOrder
    availability?: SortOrder
    language?: SortOrder
    maxDistance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchmakingPreferenceAvgOrderByAggregateInput = {
    powerLevelMin?: SortOrder
    powerLevelMax?: SortOrder
    maxDistance?: SortOrder
  }

  export type MatchmakingPreferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    powerLevelMin?: SortOrder
    powerLevelMax?: SortOrder
    playstyle?: SortOrder
    location?: SortOrder
    onlineOnly?: SortOrder
    availability?: SortOrder
    language?: SortOrder
    maxDistance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchmakingPreferenceMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    powerLevelMin?: SortOrder
    powerLevelMax?: SortOrder
    playstyle?: SortOrder
    location?: SortOrder
    onlineOnly?: SortOrder
    availability?: SortOrder
    language?: SortOrder
    maxDistance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchmakingPreferenceSumOrderByAggregateInput = {
    powerLevelMin?: SortOrder
    powerLevelMax?: SortOrder
    maxDistance?: SortOrder
  }

  export type ForumPostCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    authorId?: SortOrder
    communityId?: SortOrder
    category?: SortOrder
    isPinned?: SortOrder
    isLocked?: SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    replyCount?: SortOrder
    lastReplyAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ForumPostAvgOrderByAggregateInput = {
    viewCount?: SortOrder
    likeCount?: SortOrder
    replyCount?: SortOrder
  }

  export type ForumPostMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    authorId?: SortOrder
    communityId?: SortOrder
    category?: SortOrder
    isPinned?: SortOrder
    isLocked?: SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    replyCount?: SortOrder
    lastReplyAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ForumPostMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    authorId?: SortOrder
    communityId?: SortOrder
    category?: SortOrder
    isPinned?: SortOrder
    isLocked?: SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    replyCount?: SortOrder
    lastReplyAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ForumPostSumOrderByAggregateInput = {
    viewCount?: SortOrder
    likeCount?: SortOrder
    replyCount?: SortOrder
  }

  export type ForumPostScalarRelationFilter = {
    is?: ForumPostWhereInput
    isNot?: ForumPostWhereInput
  }

  export type ForumReplyCountOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    authorId?: SortOrder
    content?: SortOrder
    parentReplyId?: SortOrder
    likeCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ForumReplyAvgOrderByAggregateInput = {
    likeCount?: SortOrder
  }

  export type ForumReplyMaxOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    authorId?: SortOrder
    content?: SortOrder
    parentReplyId?: SortOrder
    likeCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ForumReplyMinOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    authorId?: SortOrder
    content?: SortOrder
    parentReplyId?: SortOrder
    likeCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ForumReplySumOrderByAggregateInput = {
    likeCount?: SortOrder
  }

  export type ForumPostLikeCountOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type ForumPostLikeMaxOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type ForumPostLikeMinOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type ForumReplyScalarRelationFilter = {
    is?: ForumReplyWhereInput
    isNot?: ForumReplyWhereInput
  }

  export type ForumReplyLikeCountOrderByAggregateInput = {
    id?: SortOrder
    replyId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type ForumReplyLikeMaxOrderByAggregateInput = {
    id?: SortOrder
    replyId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type ForumReplyLikeMinOrderByAggregateInput = {
    id?: SortOrder
    replyId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetTokenCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    isUsed?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    isUsed?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetTokenMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    isUsed?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type UserCommunityCreateNestedManyWithoutUserInput = {
    create?: XOR<UserCommunityCreateWithoutUserInput, UserCommunityUncheckedCreateWithoutUserInput> | UserCommunityCreateWithoutUserInput[] | UserCommunityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCommunityCreateOrConnectWithoutUserInput | UserCommunityCreateOrConnectWithoutUserInput[]
    createMany?: UserCommunityCreateManyUserInputEnvelope
    connect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
  }

  export type ThemePreferenceCreateNestedManyWithoutUserInput = {
    create?: XOR<ThemePreferenceCreateWithoutUserInput, ThemePreferenceUncheckedCreateWithoutUserInput> | ThemePreferenceCreateWithoutUserInput[] | ThemePreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThemePreferenceCreateOrConnectWithoutUserInput | ThemePreferenceCreateOrConnectWithoutUserInput[]
    createMany?: ThemePreferenceCreateManyUserInputEnvelope
    connect?: ThemePreferenceWhereUniqueInput | ThemePreferenceWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutCreatorInput = {
    create?: XOR<EventCreateWithoutCreatorInput, EventUncheckedCreateWithoutCreatorInput> | EventCreateWithoutCreatorInput[] | EventUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCreatorInput | EventCreateOrConnectWithoutCreatorInput[]
    createMany?: EventCreateManyCreatorInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutHostInput = {
    create?: XOR<EventCreateWithoutHostInput, EventUncheckedCreateWithoutHostInput> | EventCreateWithoutHostInput[] | EventUncheckedCreateWithoutHostInput[]
    connectOrCreate?: EventCreateOrConnectWithoutHostInput | EventCreateOrConnectWithoutHostInput[]
    createMany?: EventCreateManyHostInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutCoHostInput = {
    create?: XOR<EventCreateWithoutCoHostInput, EventUncheckedCreateWithoutCoHostInput> | EventCreateWithoutCoHostInput[] | EventUncheckedCreateWithoutCoHostInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCoHostInput | EventCreateOrConnectWithoutCoHostInput[]
    createMany?: EventCreateManyCoHostInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type EventAttendeeCreateNestedManyWithoutUserInput = {
    create?: XOR<EventAttendeeCreateWithoutUserInput, EventAttendeeUncheckedCreateWithoutUserInput> | EventAttendeeCreateWithoutUserInput[] | EventAttendeeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventAttendeeCreateOrConnectWithoutUserInput | EventAttendeeCreateOrConnectWithoutUserInput[]
    createMany?: EventAttendeeCreateManyUserInputEnvelope
    connect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutReceiverInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type GameSessionCreateNestedManyWithoutHostInput = {
    create?: XOR<GameSessionCreateWithoutHostInput, GameSessionUncheckedCreateWithoutHostInput> | GameSessionCreateWithoutHostInput[] | GameSessionUncheckedCreateWithoutHostInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutHostInput | GameSessionCreateOrConnectWithoutHostInput[]
    createMany?: GameSessionCreateManyHostInputEnvelope
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
  }

  export type GameSessionCreateNestedManyWithoutCoHostInput = {
    create?: XOR<GameSessionCreateWithoutCoHostInput, GameSessionUncheckedCreateWithoutCoHostInput> | GameSessionCreateWithoutCoHostInput[] | GameSessionUncheckedCreateWithoutCoHostInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutCoHostInput | GameSessionCreateOrConnectWithoutCoHostInput[]
    createMany?: GameSessionCreateManyCoHostInputEnvelope
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
  }

  export type UserSocialLinkCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSocialLinkCreateWithoutUserInput, UserSocialLinkUncheckedCreateWithoutUserInput> | UserSocialLinkCreateWithoutUserInput[] | UserSocialLinkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSocialLinkCreateOrConnectWithoutUserInput | UserSocialLinkCreateOrConnectWithoutUserInput[]
    createMany?: UserSocialLinkCreateManyUserInputEnvelope
    connect?: UserSocialLinkWhereUniqueInput | UserSocialLinkWhereUniqueInput[]
  }

  export type UserGamingProfileCreateNestedManyWithoutUserInput = {
    create?: XOR<UserGamingProfileCreateWithoutUserInput, UserGamingProfileUncheckedCreateWithoutUserInput> | UserGamingProfileCreateWithoutUserInput[] | UserGamingProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserGamingProfileCreateOrConnectWithoutUserInput | UserGamingProfileCreateOrConnectWithoutUserInput[]
    createMany?: UserGamingProfileCreateManyUserInputEnvelope
    connect?: UserGamingProfileWhereUniqueInput | UserGamingProfileWhereUniqueInput[]
  }

  export type FriendshipCreateNestedManyWithoutRequesterInput = {
    create?: XOR<FriendshipCreateWithoutRequesterInput, FriendshipUncheckedCreateWithoutRequesterInput> | FriendshipCreateWithoutRequesterInput[] | FriendshipUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutRequesterInput | FriendshipCreateOrConnectWithoutRequesterInput[]
    createMany?: FriendshipCreateManyRequesterInputEnvelope
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
  }

  export type FriendshipCreateNestedManyWithoutReceiverInput = {
    create?: XOR<FriendshipCreateWithoutReceiverInput, FriendshipUncheckedCreateWithoutReceiverInput> | FriendshipCreateWithoutReceiverInput[] | FriendshipUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutReceiverInput | FriendshipCreateOrConnectWithoutReceiverInput[]
    createMany?: FriendshipCreateManyReceiverInputEnvelope
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
  }

  export type UserActivityCreateNestedManyWithoutUserInput = {
    create?: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput> | UserActivityCreateWithoutUserInput[] | UserActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActivityCreateOrConnectWithoutUserInput | UserActivityCreateOrConnectWithoutUserInput[]
    createMany?: UserActivityCreateManyUserInputEnvelope
    connect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
  }

  export type UserSettingsCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput> | UserSettingsCreateWithoutUserInput[] | UserSettingsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput | UserSettingsCreateOrConnectWithoutUserInput[]
    createMany?: UserSettingsCreateManyUserInputEnvelope
    connect?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
  }

  export type MatchmakingPreferenceCreateNestedManyWithoutUserInput = {
    create?: XOR<MatchmakingPreferenceCreateWithoutUserInput, MatchmakingPreferenceUncheckedCreateWithoutUserInput> | MatchmakingPreferenceCreateWithoutUserInput[] | MatchmakingPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MatchmakingPreferenceCreateOrConnectWithoutUserInput | MatchmakingPreferenceCreateOrConnectWithoutUserInput[]
    createMany?: MatchmakingPreferenceCreateManyUserInputEnvelope
    connect?: MatchmakingPreferenceWhereUniqueInput | MatchmakingPreferenceWhereUniqueInput[]
  }

  export type TournamentCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<TournamentCreateWithoutOrganizerInput, TournamentUncheckedCreateWithoutOrganizerInput> | TournamentCreateWithoutOrganizerInput[] | TournamentUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutOrganizerInput | TournamentCreateOrConnectWithoutOrganizerInput[]
    createMany?: TournamentCreateManyOrganizerInputEnvelope
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
  }

  export type TournamentParticipantCreateNestedManyWithoutUserInput = {
    create?: XOR<TournamentParticipantCreateWithoutUserInput, TournamentParticipantUncheckedCreateWithoutUserInput> | TournamentParticipantCreateWithoutUserInput[] | TournamentParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TournamentParticipantCreateOrConnectWithoutUserInput | TournamentParticipantCreateOrConnectWithoutUserInput[]
    createMany?: TournamentParticipantCreateManyUserInputEnvelope
    connect?: TournamentParticipantWhereUniqueInput | TournamentParticipantWhereUniqueInput[]
  }

  export type ForumPostCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ForumPostCreateWithoutAuthorInput, ForumPostUncheckedCreateWithoutAuthorInput> | ForumPostCreateWithoutAuthorInput[] | ForumPostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ForumPostCreateOrConnectWithoutAuthorInput | ForumPostCreateOrConnectWithoutAuthorInput[]
    createMany?: ForumPostCreateManyAuthorInputEnvelope
    connect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
  }

  export type ForumReplyCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ForumReplyCreateWithoutAuthorInput, ForumReplyUncheckedCreateWithoutAuthorInput> | ForumReplyCreateWithoutAuthorInput[] | ForumReplyUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ForumReplyCreateOrConnectWithoutAuthorInput | ForumReplyCreateOrConnectWithoutAuthorInput[]
    createMany?: ForumReplyCreateManyAuthorInputEnvelope
    connect?: ForumReplyWhereUniqueInput | ForumReplyWhereUniqueInput[]
  }

  export type ForumPostLikeCreateNestedManyWithoutUserInput = {
    create?: XOR<ForumPostLikeCreateWithoutUserInput, ForumPostLikeUncheckedCreateWithoutUserInput> | ForumPostLikeCreateWithoutUserInput[] | ForumPostLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumPostLikeCreateOrConnectWithoutUserInput | ForumPostLikeCreateOrConnectWithoutUserInput[]
    createMany?: ForumPostLikeCreateManyUserInputEnvelope
    connect?: ForumPostLikeWhereUniqueInput | ForumPostLikeWhereUniqueInput[]
  }

  export type ForumReplyLikeCreateNestedManyWithoutUserInput = {
    create?: XOR<ForumReplyLikeCreateWithoutUserInput, ForumReplyLikeUncheckedCreateWithoutUserInput> | ForumReplyLikeCreateWithoutUserInput[] | ForumReplyLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumReplyLikeCreateOrConnectWithoutUserInput | ForumReplyLikeCreateOrConnectWithoutUserInput[]
    createMany?: ForumReplyLikeCreateManyUserInputEnvelope
    connect?: ForumReplyLikeWhereUniqueInput | ForumReplyLikeWhereUniqueInput[]
  }

  export type TournamentMatchCreateNestedManyWithoutPlayer1Input = {
    create?: XOR<TournamentMatchCreateWithoutPlayer1Input, TournamentMatchUncheckedCreateWithoutPlayer1Input> | TournamentMatchCreateWithoutPlayer1Input[] | TournamentMatchUncheckedCreateWithoutPlayer1Input[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutPlayer1Input | TournamentMatchCreateOrConnectWithoutPlayer1Input[]
    createMany?: TournamentMatchCreateManyPlayer1InputEnvelope
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
  }

  export type TournamentMatchCreateNestedManyWithoutPlayer2Input = {
    create?: XOR<TournamentMatchCreateWithoutPlayer2Input, TournamentMatchUncheckedCreateWithoutPlayer2Input> | TournamentMatchCreateWithoutPlayer2Input[] | TournamentMatchUncheckedCreateWithoutPlayer2Input[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutPlayer2Input | TournamentMatchCreateOrConnectWithoutPlayer2Input[]
    createMany?: TournamentMatchCreateManyPlayer2InputEnvelope
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
  }

  export type TournamentMatchCreateNestedManyWithoutWinnerInput = {
    create?: XOR<TournamentMatchCreateWithoutWinnerInput, TournamentMatchUncheckedCreateWithoutWinnerInput> | TournamentMatchCreateWithoutWinnerInput[] | TournamentMatchUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutWinnerInput | TournamentMatchCreateOrConnectWithoutWinnerInput[]
    createMany?: TournamentMatchCreateManyWinnerInputEnvelope
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
  }

  export type MatchResultCreateNestedManyWithoutWinnerInput = {
    create?: XOR<MatchResultCreateWithoutWinnerInput, MatchResultUncheckedCreateWithoutWinnerInput> | MatchResultCreateWithoutWinnerInput[] | MatchResultUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: MatchResultCreateOrConnectWithoutWinnerInput | MatchResultCreateOrConnectWithoutWinnerInput[]
    createMany?: MatchResultCreateManyWinnerInputEnvelope
    connect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
  }

  export type MatchResultCreateNestedManyWithoutLoserInput = {
    create?: XOR<MatchResultCreateWithoutLoserInput, MatchResultUncheckedCreateWithoutLoserInput> | MatchResultCreateWithoutLoserInput[] | MatchResultUncheckedCreateWithoutLoserInput[]
    connectOrCreate?: MatchResultCreateOrConnectWithoutLoserInput | MatchResultCreateOrConnectWithoutLoserInput[]
    createMany?: MatchResultCreateManyLoserInputEnvelope
    connect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
  }

  export type MatchResultCreateNestedManyWithoutReportedByInput = {
    create?: XOR<MatchResultCreateWithoutReportedByInput, MatchResultUncheckedCreateWithoutReportedByInput> | MatchResultCreateWithoutReportedByInput[] | MatchResultUncheckedCreateWithoutReportedByInput[]
    connectOrCreate?: MatchResultCreateOrConnectWithoutReportedByInput | MatchResultCreateOrConnectWithoutReportedByInput[]
    createMany?: MatchResultCreateManyReportedByInputEnvelope
    connect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
  }

  export type MatchResultCreateNestedManyWithoutVerifiedByInput = {
    create?: XOR<MatchResultCreateWithoutVerifiedByInput, MatchResultUncheckedCreateWithoutVerifiedByInput> | MatchResultCreateWithoutVerifiedByInput[] | MatchResultUncheckedCreateWithoutVerifiedByInput[]
    connectOrCreate?: MatchResultCreateOrConnectWithoutVerifiedByInput | MatchResultCreateOrConnectWithoutVerifiedByInput[]
    createMany?: MatchResultCreateManyVerifiedByInputEnvelope
    connect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type UserCommunityUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserCommunityCreateWithoutUserInput, UserCommunityUncheckedCreateWithoutUserInput> | UserCommunityCreateWithoutUserInput[] | UserCommunityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCommunityCreateOrConnectWithoutUserInput | UserCommunityCreateOrConnectWithoutUserInput[]
    createMany?: UserCommunityCreateManyUserInputEnvelope
    connect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
  }

  export type ThemePreferenceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ThemePreferenceCreateWithoutUserInput, ThemePreferenceUncheckedCreateWithoutUserInput> | ThemePreferenceCreateWithoutUserInput[] | ThemePreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThemePreferenceCreateOrConnectWithoutUserInput | ThemePreferenceCreateOrConnectWithoutUserInput[]
    createMany?: ThemePreferenceCreateManyUserInputEnvelope
    connect?: ThemePreferenceWhereUniqueInput | ThemePreferenceWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<EventCreateWithoutCreatorInput, EventUncheckedCreateWithoutCreatorInput> | EventCreateWithoutCreatorInput[] | EventUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCreatorInput | EventCreateOrConnectWithoutCreatorInput[]
    createMany?: EventCreateManyCreatorInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutHostInput = {
    create?: XOR<EventCreateWithoutHostInput, EventUncheckedCreateWithoutHostInput> | EventCreateWithoutHostInput[] | EventUncheckedCreateWithoutHostInput[]
    connectOrCreate?: EventCreateOrConnectWithoutHostInput | EventCreateOrConnectWithoutHostInput[]
    createMany?: EventCreateManyHostInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutCoHostInput = {
    create?: XOR<EventCreateWithoutCoHostInput, EventUncheckedCreateWithoutCoHostInput> | EventCreateWithoutCoHostInput[] | EventUncheckedCreateWithoutCoHostInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCoHostInput | EventCreateOrConnectWithoutCoHostInput[]
    createMany?: EventCreateManyCoHostInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type EventAttendeeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EventAttendeeCreateWithoutUserInput, EventAttendeeUncheckedCreateWithoutUserInput> | EventAttendeeCreateWithoutUserInput[] | EventAttendeeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventAttendeeCreateOrConnectWithoutUserInput | EventAttendeeCreateOrConnectWithoutUserInput[]
    createMany?: EventAttendeeCreateManyUserInputEnvelope
    connect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type GameSessionUncheckedCreateNestedManyWithoutHostInput = {
    create?: XOR<GameSessionCreateWithoutHostInput, GameSessionUncheckedCreateWithoutHostInput> | GameSessionCreateWithoutHostInput[] | GameSessionUncheckedCreateWithoutHostInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutHostInput | GameSessionCreateOrConnectWithoutHostInput[]
    createMany?: GameSessionCreateManyHostInputEnvelope
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
  }

  export type GameSessionUncheckedCreateNestedManyWithoutCoHostInput = {
    create?: XOR<GameSessionCreateWithoutCoHostInput, GameSessionUncheckedCreateWithoutCoHostInput> | GameSessionCreateWithoutCoHostInput[] | GameSessionUncheckedCreateWithoutCoHostInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutCoHostInput | GameSessionCreateOrConnectWithoutCoHostInput[]
    createMany?: GameSessionCreateManyCoHostInputEnvelope
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
  }

  export type UserSocialLinkUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSocialLinkCreateWithoutUserInput, UserSocialLinkUncheckedCreateWithoutUserInput> | UserSocialLinkCreateWithoutUserInput[] | UserSocialLinkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSocialLinkCreateOrConnectWithoutUserInput | UserSocialLinkCreateOrConnectWithoutUserInput[]
    createMany?: UserSocialLinkCreateManyUserInputEnvelope
    connect?: UserSocialLinkWhereUniqueInput | UserSocialLinkWhereUniqueInput[]
  }

  export type UserGamingProfileUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserGamingProfileCreateWithoutUserInput, UserGamingProfileUncheckedCreateWithoutUserInput> | UserGamingProfileCreateWithoutUserInput[] | UserGamingProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserGamingProfileCreateOrConnectWithoutUserInput | UserGamingProfileCreateOrConnectWithoutUserInput[]
    createMany?: UserGamingProfileCreateManyUserInputEnvelope
    connect?: UserGamingProfileWhereUniqueInput | UserGamingProfileWhereUniqueInput[]
  }

  export type FriendshipUncheckedCreateNestedManyWithoutRequesterInput = {
    create?: XOR<FriendshipCreateWithoutRequesterInput, FriendshipUncheckedCreateWithoutRequesterInput> | FriendshipCreateWithoutRequesterInput[] | FriendshipUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutRequesterInput | FriendshipCreateOrConnectWithoutRequesterInput[]
    createMany?: FriendshipCreateManyRequesterInputEnvelope
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
  }

  export type FriendshipUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<FriendshipCreateWithoutReceiverInput, FriendshipUncheckedCreateWithoutReceiverInput> | FriendshipCreateWithoutReceiverInput[] | FriendshipUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutReceiverInput | FriendshipCreateOrConnectWithoutReceiverInput[]
    createMany?: FriendshipCreateManyReceiverInputEnvelope
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
  }

  export type UserActivityUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput> | UserActivityCreateWithoutUserInput[] | UserActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActivityCreateOrConnectWithoutUserInput | UserActivityCreateOrConnectWithoutUserInput[]
    createMany?: UserActivityCreateManyUserInputEnvelope
    connect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
  }

  export type UserSettingsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput> | UserSettingsCreateWithoutUserInput[] | UserSettingsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput | UserSettingsCreateOrConnectWithoutUserInput[]
    createMany?: UserSettingsCreateManyUserInputEnvelope
    connect?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
  }

  export type MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MatchmakingPreferenceCreateWithoutUserInput, MatchmakingPreferenceUncheckedCreateWithoutUserInput> | MatchmakingPreferenceCreateWithoutUserInput[] | MatchmakingPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MatchmakingPreferenceCreateOrConnectWithoutUserInput | MatchmakingPreferenceCreateOrConnectWithoutUserInput[]
    createMany?: MatchmakingPreferenceCreateManyUserInputEnvelope
    connect?: MatchmakingPreferenceWhereUniqueInput | MatchmakingPreferenceWhereUniqueInput[]
  }

  export type TournamentUncheckedCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<TournamentCreateWithoutOrganizerInput, TournamentUncheckedCreateWithoutOrganizerInput> | TournamentCreateWithoutOrganizerInput[] | TournamentUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutOrganizerInput | TournamentCreateOrConnectWithoutOrganizerInput[]
    createMany?: TournamentCreateManyOrganizerInputEnvelope
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
  }

  export type TournamentParticipantUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TournamentParticipantCreateWithoutUserInput, TournamentParticipantUncheckedCreateWithoutUserInput> | TournamentParticipantCreateWithoutUserInput[] | TournamentParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TournamentParticipantCreateOrConnectWithoutUserInput | TournamentParticipantCreateOrConnectWithoutUserInput[]
    createMany?: TournamentParticipantCreateManyUserInputEnvelope
    connect?: TournamentParticipantWhereUniqueInput | TournamentParticipantWhereUniqueInput[]
  }

  export type ForumPostUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ForumPostCreateWithoutAuthorInput, ForumPostUncheckedCreateWithoutAuthorInput> | ForumPostCreateWithoutAuthorInput[] | ForumPostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ForumPostCreateOrConnectWithoutAuthorInput | ForumPostCreateOrConnectWithoutAuthorInput[]
    createMany?: ForumPostCreateManyAuthorInputEnvelope
    connect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
  }

  export type ForumReplyUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ForumReplyCreateWithoutAuthorInput, ForumReplyUncheckedCreateWithoutAuthorInput> | ForumReplyCreateWithoutAuthorInput[] | ForumReplyUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ForumReplyCreateOrConnectWithoutAuthorInput | ForumReplyCreateOrConnectWithoutAuthorInput[]
    createMany?: ForumReplyCreateManyAuthorInputEnvelope
    connect?: ForumReplyWhereUniqueInput | ForumReplyWhereUniqueInput[]
  }

  export type ForumPostLikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ForumPostLikeCreateWithoutUserInput, ForumPostLikeUncheckedCreateWithoutUserInput> | ForumPostLikeCreateWithoutUserInput[] | ForumPostLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumPostLikeCreateOrConnectWithoutUserInput | ForumPostLikeCreateOrConnectWithoutUserInput[]
    createMany?: ForumPostLikeCreateManyUserInputEnvelope
    connect?: ForumPostLikeWhereUniqueInput | ForumPostLikeWhereUniqueInput[]
  }

  export type ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ForumReplyLikeCreateWithoutUserInput, ForumReplyLikeUncheckedCreateWithoutUserInput> | ForumReplyLikeCreateWithoutUserInput[] | ForumReplyLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumReplyLikeCreateOrConnectWithoutUserInput | ForumReplyLikeCreateOrConnectWithoutUserInput[]
    createMany?: ForumReplyLikeCreateManyUserInputEnvelope
    connect?: ForumReplyLikeWhereUniqueInput | ForumReplyLikeWhereUniqueInput[]
  }

  export type TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input = {
    create?: XOR<TournamentMatchCreateWithoutPlayer1Input, TournamentMatchUncheckedCreateWithoutPlayer1Input> | TournamentMatchCreateWithoutPlayer1Input[] | TournamentMatchUncheckedCreateWithoutPlayer1Input[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutPlayer1Input | TournamentMatchCreateOrConnectWithoutPlayer1Input[]
    createMany?: TournamentMatchCreateManyPlayer1InputEnvelope
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
  }

  export type TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input = {
    create?: XOR<TournamentMatchCreateWithoutPlayer2Input, TournamentMatchUncheckedCreateWithoutPlayer2Input> | TournamentMatchCreateWithoutPlayer2Input[] | TournamentMatchUncheckedCreateWithoutPlayer2Input[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutPlayer2Input | TournamentMatchCreateOrConnectWithoutPlayer2Input[]
    createMany?: TournamentMatchCreateManyPlayer2InputEnvelope
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
  }

  export type TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput = {
    create?: XOR<TournamentMatchCreateWithoutWinnerInput, TournamentMatchUncheckedCreateWithoutWinnerInput> | TournamentMatchCreateWithoutWinnerInput[] | TournamentMatchUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutWinnerInput | TournamentMatchCreateOrConnectWithoutWinnerInput[]
    createMany?: TournamentMatchCreateManyWinnerInputEnvelope
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
  }

  export type MatchResultUncheckedCreateNestedManyWithoutWinnerInput = {
    create?: XOR<MatchResultCreateWithoutWinnerInput, MatchResultUncheckedCreateWithoutWinnerInput> | MatchResultCreateWithoutWinnerInput[] | MatchResultUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: MatchResultCreateOrConnectWithoutWinnerInput | MatchResultCreateOrConnectWithoutWinnerInput[]
    createMany?: MatchResultCreateManyWinnerInputEnvelope
    connect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
  }

  export type MatchResultUncheckedCreateNestedManyWithoutLoserInput = {
    create?: XOR<MatchResultCreateWithoutLoserInput, MatchResultUncheckedCreateWithoutLoserInput> | MatchResultCreateWithoutLoserInput[] | MatchResultUncheckedCreateWithoutLoserInput[]
    connectOrCreate?: MatchResultCreateOrConnectWithoutLoserInput | MatchResultCreateOrConnectWithoutLoserInput[]
    createMany?: MatchResultCreateManyLoserInputEnvelope
    connect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
  }

  export type MatchResultUncheckedCreateNestedManyWithoutReportedByInput = {
    create?: XOR<MatchResultCreateWithoutReportedByInput, MatchResultUncheckedCreateWithoutReportedByInput> | MatchResultCreateWithoutReportedByInput[] | MatchResultUncheckedCreateWithoutReportedByInput[]
    connectOrCreate?: MatchResultCreateOrConnectWithoutReportedByInput | MatchResultCreateOrConnectWithoutReportedByInput[]
    createMany?: MatchResultCreateManyReportedByInputEnvelope
    connect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
  }

  export type MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput = {
    create?: XOR<MatchResultCreateWithoutVerifiedByInput, MatchResultUncheckedCreateWithoutVerifiedByInput> | MatchResultCreateWithoutVerifiedByInput[] | MatchResultUncheckedCreateWithoutVerifiedByInput[]
    connectOrCreate?: MatchResultCreateOrConnectWithoutVerifiedByInput | MatchResultCreateOrConnectWithoutVerifiedByInput[]
    createMany?: MatchResultCreateManyVerifiedByInputEnvelope
    connect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserCommunityUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserCommunityCreateWithoutUserInput, UserCommunityUncheckedCreateWithoutUserInput> | UserCommunityCreateWithoutUserInput[] | UserCommunityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCommunityCreateOrConnectWithoutUserInput | UserCommunityCreateOrConnectWithoutUserInput[]
    upsert?: UserCommunityUpsertWithWhereUniqueWithoutUserInput | UserCommunityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserCommunityCreateManyUserInputEnvelope
    set?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    disconnect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    delete?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    connect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    update?: UserCommunityUpdateWithWhereUniqueWithoutUserInput | UserCommunityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserCommunityUpdateManyWithWhereWithoutUserInput | UserCommunityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserCommunityScalarWhereInput | UserCommunityScalarWhereInput[]
  }

  export type ThemePreferenceUpdateManyWithoutUserNestedInput = {
    create?: XOR<ThemePreferenceCreateWithoutUserInput, ThemePreferenceUncheckedCreateWithoutUserInput> | ThemePreferenceCreateWithoutUserInput[] | ThemePreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThemePreferenceCreateOrConnectWithoutUserInput | ThemePreferenceCreateOrConnectWithoutUserInput[]
    upsert?: ThemePreferenceUpsertWithWhereUniqueWithoutUserInput | ThemePreferenceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ThemePreferenceCreateManyUserInputEnvelope
    set?: ThemePreferenceWhereUniqueInput | ThemePreferenceWhereUniqueInput[]
    disconnect?: ThemePreferenceWhereUniqueInput | ThemePreferenceWhereUniqueInput[]
    delete?: ThemePreferenceWhereUniqueInput | ThemePreferenceWhereUniqueInput[]
    connect?: ThemePreferenceWhereUniqueInput | ThemePreferenceWhereUniqueInput[]
    update?: ThemePreferenceUpdateWithWhereUniqueWithoutUserInput | ThemePreferenceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ThemePreferenceUpdateManyWithWhereWithoutUserInput | ThemePreferenceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ThemePreferenceScalarWhereInput | ThemePreferenceScalarWhereInput[]
  }

  export type EventUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<EventCreateWithoutCreatorInput, EventUncheckedCreateWithoutCreatorInput> | EventCreateWithoutCreatorInput[] | EventUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCreatorInput | EventCreateOrConnectWithoutCreatorInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutCreatorInput | EventUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: EventCreateManyCreatorInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutCreatorInput | EventUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: EventUpdateManyWithWhereWithoutCreatorInput | EventUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type EventUpdateManyWithoutHostNestedInput = {
    create?: XOR<EventCreateWithoutHostInput, EventUncheckedCreateWithoutHostInput> | EventCreateWithoutHostInput[] | EventUncheckedCreateWithoutHostInput[]
    connectOrCreate?: EventCreateOrConnectWithoutHostInput | EventCreateOrConnectWithoutHostInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutHostInput | EventUpsertWithWhereUniqueWithoutHostInput[]
    createMany?: EventCreateManyHostInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutHostInput | EventUpdateWithWhereUniqueWithoutHostInput[]
    updateMany?: EventUpdateManyWithWhereWithoutHostInput | EventUpdateManyWithWhereWithoutHostInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type EventUpdateManyWithoutCoHostNestedInput = {
    create?: XOR<EventCreateWithoutCoHostInput, EventUncheckedCreateWithoutCoHostInput> | EventCreateWithoutCoHostInput[] | EventUncheckedCreateWithoutCoHostInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCoHostInput | EventCreateOrConnectWithoutCoHostInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutCoHostInput | EventUpsertWithWhereUniqueWithoutCoHostInput[]
    createMany?: EventCreateManyCoHostInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutCoHostInput | EventUpdateWithWhereUniqueWithoutCoHostInput[]
    updateMany?: EventUpdateManyWithWhereWithoutCoHostInput | EventUpdateManyWithWhereWithoutCoHostInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type EventAttendeeUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventAttendeeCreateWithoutUserInput, EventAttendeeUncheckedCreateWithoutUserInput> | EventAttendeeCreateWithoutUserInput[] | EventAttendeeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventAttendeeCreateOrConnectWithoutUserInput | EventAttendeeCreateOrConnectWithoutUserInput[]
    upsert?: EventAttendeeUpsertWithWhereUniqueWithoutUserInput | EventAttendeeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventAttendeeCreateManyUserInputEnvelope
    set?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    disconnect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    delete?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    connect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    update?: EventAttendeeUpdateWithWhereUniqueWithoutUserInput | EventAttendeeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventAttendeeUpdateManyWithWhereWithoutUserInput | EventAttendeeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventAttendeeScalarWhereInput | EventAttendeeScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReceiverInput | MessageUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReceiverInput | MessageUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReceiverInput | MessageUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type GameSessionUpdateManyWithoutHostNestedInput = {
    create?: XOR<GameSessionCreateWithoutHostInput, GameSessionUncheckedCreateWithoutHostInput> | GameSessionCreateWithoutHostInput[] | GameSessionUncheckedCreateWithoutHostInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutHostInput | GameSessionCreateOrConnectWithoutHostInput[]
    upsert?: GameSessionUpsertWithWhereUniqueWithoutHostInput | GameSessionUpsertWithWhereUniqueWithoutHostInput[]
    createMany?: GameSessionCreateManyHostInputEnvelope
    set?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    disconnect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    delete?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    update?: GameSessionUpdateWithWhereUniqueWithoutHostInput | GameSessionUpdateWithWhereUniqueWithoutHostInput[]
    updateMany?: GameSessionUpdateManyWithWhereWithoutHostInput | GameSessionUpdateManyWithWhereWithoutHostInput[]
    deleteMany?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
  }

  export type GameSessionUpdateManyWithoutCoHostNestedInput = {
    create?: XOR<GameSessionCreateWithoutCoHostInput, GameSessionUncheckedCreateWithoutCoHostInput> | GameSessionCreateWithoutCoHostInput[] | GameSessionUncheckedCreateWithoutCoHostInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutCoHostInput | GameSessionCreateOrConnectWithoutCoHostInput[]
    upsert?: GameSessionUpsertWithWhereUniqueWithoutCoHostInput | GameSessionUpsertWithWhereUniqueWithoutCoHostInput[]
    createMany?: GameSessionCreateManyCoHostInputEnvelope
    set?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    disconnect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    delete?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    update?: GameSessionUpdateWithWhereUniqueWithoutCoHostInput | GameSessionUpdateWithWhereUniqueWithoutCoHostInput[]
    updateMany?: GameSessionUpdateManyWithWhereWithoutCoHostInput | GameSessionUpdateManyWithWhereWithoutCoHostInput[]
    deleteMany?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
  }

  export type UserSocialLinkUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSocialLinkCreateWithoutUserInput, UserSocialLinkUncheckedCreateWithoutUserInput> | UserSocialLinkCreateWithoutUserInput[] | UserSocialLinkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSocialLinkCreateOrConnectWithoutUserInput | UserSocialLinkCreateOrConnectWithoutUserInput[]
    upsert?: UserSocialLinkUpsertWithWhereUniqueWithoutUserInput | UserSocialLinkUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSocialLinkCreateManyUserInputEnvelope
    set?: UserSocialLinkWhereUniqueInput | UserSocialLinkWhereUniqueInput[]
    disconnect?: UserSocialLinkWhereUniqueInput | UserSocialLinkWhereUniqueInput[]
    delete?: UserSocialLinkWhereUniqueInput | UserSocialLinkWhereUniqueInput[]
    connect?: UserSocialLinkWhereUniqueInput | UserSocialLinkWhereUniqueInput[]
    update?: UserSocialLinkUpdateWithWhereUniqueWithoutUserInput | UserSocialLinkUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSocialLinkUpdateManyWithWhereWithoutUserInput | UserSocialLinkUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSocialLinkScalarWhereInput | UserSocialLinkScalarWhereInput[]
  }

  export type UserGamingProfileUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserGamingProfileCreateWithoutUserInput, UserGamingProfileUncheckedCreateWithoutUserInput> | UserGamingProfileCreateWithoutUserInput[] | UserGamingProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserGamingProfileCreateOrConnectWithoutUserInput | UserGamingProfileCreateOrConnectWithoutUserInput[]
    upsert?: UserGamingProfileUpsertWithWhereUniqueWithoutUserInput | UserGamingProfileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserGamingProfileCreateManyUserInputEnvelope
    set?: UserGamingProfileWhereUniqueInput | UserGamingProfileWhereUniqueInput[]
    disconnect?: UserGamingProfileWhereUniqueInput | UserGamingProfileWhereUniqueInput[]
    delete?: UserGamingProfileWhereUniqueInput | UserGamingProfileWhereUniqueInput[]
    connect?: UserGamingProfileWhereUniqueInput | UserGamingProfileWhereUniqueInput[]
    update?: UserGamingProfileUpdateWithWhereUniqueWithoutUserInput | UserGamingProfileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserGamingProfileUpdateManyWithWhereWithoutUserInput | UserGamingProfileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserGamingProfileScalarWhereInput | UserGamingProfileScalarWhereInput[]
  }

  export type FriendshipUpdateManyWithoutRequesterNestedInput = {
    create?: XOR<FriendshipCreateWithoutRequesterInput, FriendshipUncheckedCreateWithoutRequesterInput> | FriendshipCreateWithoutRequesterInput[] | FriendshipUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutRequesterInput | FriendshipCreateOrConnectWithoutRequesterInput[]
    upsert?: FriendshipUpsertWithWhereUniqueWithoutRequesterInput | FriendshipUpsertWithWhereUniqueWithoutRequesterInput[]
    createMany?: FriendshipCreateManyRequesterInputEnvelope
    set?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    disconnect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    delete?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    update?: FriendshipUpdateWithWhereUniqueWithoutRequesterInput | FriendshipUpdateWithWhereUniqueWithoutRequesterInput[]
    updateMany?: FriendshipUpdateManyWithWhereWithoutRequesterInput | FriendshipUpdateManyWithWhereWithoutRequesterInput[]
    deleteMany?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
  }

  export type FriendshipUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<FriendshipCreateWithoutReceiverInput, FriendshipUncheckedCreateWithoutReceiverInput> | FriendshipCreateWithoutReceiverInput[] | FriendshipUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutReceiverInput | FriendshipCreateOrConnectWithoutReceiverInput[]
    upsert?: FriendshipUpsertWithWhereUniqueWithoutReceiverInput | FriendshipUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: FriendshipCreateManyReceiverInputEnvelope
    set?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    disconnect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    delete?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    update?: FriendshipUpdateWithWhereUniqueWithoutReceiverInput | FriendshipUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: FriendshipUpdateManyWithWhereWithoutReceiverInput | FriendshipUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
  }

  export type UserActivityUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput> | UserActivityCreateWithoutUserInput[] | UserActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActivityCreateOrConnectWithoutUserInput | UserActivityCreateOrConnectWithoutUserInput[]
    upsert?: UserActivityUpsertWithWhereUniqueWithoutUserInput | UserActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserActivityCreateManyUserInputEnvelope
    set?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    disconnect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    delete?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    connect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    update?: UserActivityUpdateWithWhereUniqueWithoutUserInput | UserActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserActivityUpdateManyWithWhereWithoutUserInput | UserActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserActivityScalarWhereInput | UserActivityScalarWhereInput[]
  }

  export type UserSettingsUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput> | UserSettingsCreateWithoutUserInput[] | UserSettingsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput | UserSettingsCreateOrConnectWithoutUserInput[]
    upsert?: UserSettingsUpsertWithWhereUniqueWithoutUserInput | UserSettingsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSettingsCreateManyUserInputEnvelope
    set?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    disconnect?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    delete?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    connect?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    update?: UserSettingsUpdateWithWhereUniqueWithoutUserInput | UserSettingsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSettingsUpdateManyWithWhereWithoutUserInput | UserSettingsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSettingsScalarWhereInput | UserSettingsScalarWhereInput[]
  }

  export type MatchmakingPreferenceUpdateManyWithoutUserNestedInput = {
    create?: XOR<MatchmakingPreferenceCreateWithoutUserInput, MatchmakingPreferenceUncheckedCreateWithoutUserInput> | MatchmakingPreferenceCreateWithoutUserInput[] | MatchmakingPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MatchmakingPreferenceCreateOrConnectWithoutUserInput | MatchmakingPreferenceCreateOrConnectWithoutUserInput[]
    upsert?: MatchmakingPreferenceUpsertWithWhereUniqueWithoutUserInput | MatchmakingPreferenceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MatchmakingPreferenceCreateManyUserInputEnvelope
    set?: MatchmakingPreferenceWhereUniqueInput | MatchmakingPreferenceWhereUniqueInput[]
    disconnect?: MatchmakingPreferenceWhereUniqueInput | MatchmakingPreferenceWhereUniqueInput[]
    delete?: MatchmakingPreferenceWhereUniqueInput | MatchmakingPreferenceWhereUniqueInput[]
    connect?: MatchmakingPreferenceWhereUniqueInput | MatchmakingPreferenceWhereUniqueInput[]
    update?: MatchmakingPreferenceUpdateWithWhereUniqueWithoutUserInput | MatchmakingPreferenceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MatchmakingPreferenceUpdateManyWithWhereWithoutUserInput | MatchmakingPreferenceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MatchmakingPreferenceScalarWhereInput | MatchmakingPreferenceScalarWhereInput[]
  }

  export type TournamentUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<TournamentCreateWithoutOrganizerInput, TournamentUncheckedCreateWithoutOrganizerInput> | TournamentCreateWithoutOrganizerInput[] | TournamentUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutOrganizerInput | TournamentCreateOrConnectWithoutOrganizerInput[]
    upsert?: TournamentUpsertWithWhereUniqueWithoutOrganizerInput | TournamentUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: TournamentCreateManyOrganizerInputEnvelope
    set?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    disconnect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    delete?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    update?: TournamentUpdateWithWhereUniqueWithoutOrganizerInput | TournamentUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: TournamentUpdateManyWithWhereWithoutOrganizerInput | TournamentUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: TournamentScalarWhereInput | TournamentScalarWhereInput[]
  }

  export type TournamentParticipantUpdateManyWithoutUserNestedInput = {
    create?: XOR<TournamentParticipantCreateWithoutUserInput, TournamentParticipantUncheckedCreateWithoutUserInput> | TournamentParticipantCreateWithoutUserInput[] | TournamentParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TournamentParticipantCreateOrConnectWithoutUserInput | TournamentParticipantCreateOrConnectWithoutUserInput[]
    upsert?: TournamentParticipantUpsertWithWhereUniqueWithoutUserInput | TournamentParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TournamentParticipantCreateManyUserInputEnvelope
    set?: TournamentParticipantWhereUniqueInput | TournamentParticipantWhereUniqueInput[]
    disconnect?: TournamentParticipantWhereUniqueInput | TournamentParticipantWhereUniqueInput[]
    delete?: TournamentParticipantWhereUniqueInput | TournamentParticipantWhereUniqueInput[]
    connect?: TournamentParticipantWhereUniqueInput | TournamentParticipantWhereUniqueInput[]
    update?: TournamentParticipantUpdateWithWhereUniqueWithoutUserInput | TournamentParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TournamentParticipantUpdateManyWithWhereWithoutUserInput | TournamentParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TournamentParticipantScalarWhereInput | TournamentParticipantScalarWhereInput[]
  }

  export type ForumPostUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ForumPostCreateWithoutAuthorInput, ForumPostUncheckedCreateWithoutAuthorInput> | ForumPostCreateWithoutAuthorInput[] | ForumPostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ForumPostCreateOrConnectWithoutAuthorInput | ForumPostCreateOrConnectWithoutAuthorInput[]
    upsert?: ForumPostUpsertWithWhereUniqueWithoutAuthorInput | ForumPostUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ForumPostCreateManyAuthorInputEnvelope
    set?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    disconnect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    delete?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    connect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    update?: ForumPostUpdateWithWhereUniqueWithoutAuthorInput | ForumPostUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ForumPostUpdateManyWithWhereWithoutAuthorInput | ForumPostUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ForumPostScalarWhereInput | ForumPostScalarWhereInput[]
  }

  export type ForumReplyUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ForumReplyCreateWithoutAuthorInput, ForumReplyUncheckedCreateWithoutAuthorInput> | ForumReplyCreateWithoutAuthorInput[] | ForumReplyUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ForumReplyCreateOrConnectWithoutAuthorInput | ForumReplyCreateOrConnectWithoutAuthorInput[]
    upsert?: ForumReplyUpsertWithWhereUniqueWithoutAuthorInput | ForumReplyUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ForumReplyCreateManyAuthorInputEnvelope
    set?: ForumReplyWhereUniqueInput | ForumReplyWhereUniqueInput[]
    disconnect?: ForumReplyWhereUniqueInput | ForumReplyWhereUniqueInput[]
    delete?: ForumReplyWhereUniqueInput | ForumReplyWhereUniqueInput[]
    connect?: ForumReplyWhereUniqueInput | ForumReplyWhereUniqueInput[]
    update?: ForumReplyUpdateWithWhereUniqueWithoutAuthorInput | ForumReplyUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ForumReplyUpdateManyWithWhereWithoutAuthorInput | ForumReplyUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ForumReplyScalarWhereInput | ForumReplyScalarWhereInput[]
  }

  export type ForumPostLikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<ForumPostLikeCreateWithoutUserInput, ForumPostLikeUncheckedCreateWithoutUserInput> | ForumPostLikeCreateWithoutUserInput[] | ForumPostLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumPostLikeCreateOrConnectWithoutUserInput | ForumPostLikeCreateOrConnectWithoutUserInput[]
    upsert?: ForumPostLikeUpsertWithWhereUniqueWithoutUserInput | ForumPostLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ForumPostLikeCreateManyUserInputEnvelope
    set?: ForumPostLikeWhereUniqueInput | ForumPostLikeWhereUniqueInput[]
    disconnect?: ForumPostLikeWhereUniqueInput | ForumPostLikeWhereUniqueInput[]
    delete?: ForumPostLikeWhereUniqueInput | ForumPostLikeWhereUniqueInput[]
    connect?: ForumPostLikeWhereUniqueInput | ForumPostLikeWhereUniqueInput[]
    update?: ForumPostLikeUpdateWithWhereUniqueWithoutUserInput | ForumPostLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ForumPostLikeUpdateManyWithWhereWithoutUserInput | ForumPostLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ForumPostLikeScalarWhereInput | ForumPostLikeScalarWhereInput[]
  }

  export type ForumReplyLikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<ForumReplyLikeCreateWithoutUserInput, ForumReplyLikeUncheckedCreateWithoutUserInput> | ForumReplyLikeCreateWithoutUserInput[] | ForumReplyLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumReplyLikeCreateOrConnectWithoutUserInput | ForumReplyLikeCreateOrConnectWithoutUserInput[]
    upsert?: ForumReplyLikeUpsertWithWhereUniqueWithoutUserInput | ForumReplyLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ForumReplyLikeCreateManyUserInputEnvelope
    set?: ForumReplyLikeWhereUniqueInput | ForumReplyLikeWhereUniqueInput[]
    disconnect?: ForumReplyLikeWhereUniqueInput | ForumReplyLikeWhereUniqueInput[]
    delete?: ForumReplyLikeWhereUniqueInput | ForumReplyLikeWhereUniqueInput[]
    connect?: ForumReplyLikeWhereUniqueInput | ForumReplyLikeWhereUniqueInput[]
    update?: ForumReplyLikeUpdateWithWhereUniqueWithoutUserInput | ForumReplyLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ForumReplyLikeUpdateManyWithWhereWithoutUserInput | ForumReplyLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ForumReplyLikeScalarWhereInput | ForumReplyLikeScalarWhereInput[]
  }

  export type TournamentMatchUpdateManyWithoutPlayer1NestedInput = {
    create?: XOR<TournamentMatchCreateWithoutPlayer1Input, TournamentMatchUncheckedCreateWithoutPlayer1Input> | TournamentMatchCreateWithoutPlayer1Input[] | TournamentMatchUncheckedCreateWithoutPlayer1Input[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutPlayer1Input | TournamentMatchCreateOrConnectWithoutPlayer1Input[]
    upsert?: TournamentMatchUpsertWithWhereUniqueWithoutPlayer1Input | TournamentMatchUpsertWithWhereUniqueWithoutPlayer1Input[]
    createMany?: TournamentMatchCreateManyPlayer1InputEnvelope
    set?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    disconnect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    delete?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    update?: TournamentMatchUpdateWithWhereUniqueWithoutPlayer1Input | TournamentMatchUpdateWithWhereUniqueWithoutPlayer1Input[]
    updateMany?: TournamentMatchUpdateManyWithWhereWithoutPlayer1Input | TournamentMatchUpdateManyWithWhereWithoutPlayer1Input[]
    deleteMany?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
  }

  export type TournamentMatchUpdateManyWithoutPlayer2NestedInput = {
    create?: XOR<TournamentMatchCreateWithoutPlayer2Input, TournamentMatchUncheckedCreateWithoutPlayer2Input> | TournamentMatchCreateWithoutPlayer2Input[] | TournamentMatchUncheckedCreateWithoutPlayer2Input[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutPlayer2Input | TournamentMatchCreateOrConnectWithoutPlayer2Input[]
    upsert?: TournamentMatchUpsertWithWhereUniqueWithoutPlayer2Input | TournamentMatchUpsertWithWhereUniqueWithoutPlayer2Input[]
    createMany?: TournamentMatchCreateManyPlayer2InputEnvelope
    set?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    disconnect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    delete?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    update?: TournamentMatchUpdateWithWhereUniqueWithoutPlayer2Input | TournamentMatchUpdateWithWhereUniqueWithoutPlayer2Input[]
    updateMany?: TournamentMatchUpdateManyWithWhereWithoutPlayer2Input | TournamentMatchUpdateManyWithWhereWithoutPlayer2Input[]
    deleteMany?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
  }

  export type TournamentMatchUpdateManyWithoutWinnerNestedInput = {
    create?: XOR<TournamentMatchCreateWithoutWinnerInput, TournamentMatchUncheckedCreateWithoutWinnerInput> | TournamentMatchCreateWithoutWinnerInput[] | TournamentMatchUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutWinnerInput | TournamentMatchCreateOrConnectWithoutWinnerInput[]
    upsert?: TournamentMatchUpsertWithWhereUniqueWithoutWinnerInput | TournamentMatchUpsertWithWhereUniqueWithoutWinnerInput[]
    createMany?: TournamentMatchCreateManyWinnerInputEnvelope
    set?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    disconnect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    delete?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    update?: TournamentMatchUpdateWithWhereUniqueWithoutWinnerInput | TournamentMatchUpdateWithWhereUniqueWithoutWinnerInput[]
    updateMany?: TournamentMatchUpdateManyWithWhereWithoutWinnerInput | TournamentMatchUpdateManyWithWhereWithoutWinnerInput[]
    deleteMany?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
  }

  export type MatchResultUpdateManyWithoutWinnerNestedInput = {
    create?: XOR<MatchResultCreateWithoutWinnerInput, MatchResultUncheckedCreateWithoutWinnerInput> | MatchResultCreateWithoutWinnerInput[] | MatchResultUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: MatchResultCreateOrConnectWithoutWinnerInput | MatchResultCreateOrConnectWithoutWinnerInput[]
    upsert?: MatchResultUpsertWithWhereUniqueWithoutWinnerInput | MatchResultUpsertWithWhereUniqueWithoutWinnerInput[]
    createMany?: MatchResultCreateManyWinnerInputEnvelope
    set?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    disconnect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    delete?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    connect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    update?: MatchResultUpdateWithWhereUniqueWithoutWinnerInput | MatchResultUpdateWithWhereUniqueWithoutWinnerInput[]
    updateMany?: MatchResultUpdateManyWithWhereWithoutWinnerInput | MatchResultUpdateManyWithWhereWithoutWinnerInput[]
    deleteMany?: MatchResultScalarWhereInput | MatchResultScalarWhereInput[]
  }

  export type MatchResultUpdateManyWithoutLoserNestedInput = {
    create?: XOR<MatchResultCreateWithoutLoserInput, MatchResultUncheckedCreateWithoutLoserInput> | MatchResultCreateWithoutLoserInput[] | MatchResultUncheckedCreateWithoutLoserInput[]
    connectOrCreate?: MatchResultCreateOrConnectWithoutLoserInput | MatchResultCreateOrConnectWithoutLoserInput[]
    upsert?: MatchResultUpsertWithWhereUniqueWithoutLoserInput | MatchResultUpsertWithWhereUniqueWithoutLoserInput[]
    createMany?: MatchResultCreateManyLoserInputEnvelope
    set?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    disconnect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    delete?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    connect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    update?: MatchResultUpdateWithWhereUniqueWithoutLoserInput | MatchResultUpdateWithWhereUniqueWithoutLoserInput[]
    updateMany?: MatchResultUpdateManyWithWhereWithoutLoserInput | MatchResultUpdateManyWithWhereWithoutLoserInput[]
    deleteMany?: MatchResultScalarWhereInput | MatchResultScalarWhereInput[]
  }

  export type MatchResultUpdateManyWithoutReportedByNestedInput = {
    create?: XOR<MatchResultCreateWithoutReportedByInput, MatchResultUncheckedCreateWithoutReportedByInput> | MatchResultCreateWithoutReportedByInput[] | MatchResultUncheckedCreateWithoutReportedByInput[]
    connectOrCreate?: MatchResultCreateOrConnectWithoutReportedByInput | MatchResultCreateOrConnectWithoutReportedByInput[]
    upsert?: MatchResultUpsertWithWhereUniqueWithoutReportedByInput | MatchResultUpsertWithWhereUniqueWithoutReportedByInput[]
    createMany?: MatchResultCreateManyReportedByInputEnvelope
    set?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    disconnect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    delete?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    connect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    update?: MatchResultUpdateWithWhereUniqueWithoutReportedByInput | MatchResultUpdateWithWhereUniqueWithoutReportedByInput[]
    updateMany?: MatchResultUpdateManyWithWhereWithoutReportedByInput | MatchResultUpdateManyWithWhereWithoutReportedByInput[]
    deleteMany?: MatchResultScalarWhereInput | MatchResultScalarWhereInput[]
  }

  export type MatchResultUpdateManyWithoutVerifiedByNestedInput = {
    create?: XOR<MatchResultCreateWithoutVerifiedByInput, MatchResultUncheckedCreateWithoutVerifiedByInput> | MatchResultCreateWithoutVerifiedByInput[] | MatchResultUncheckedCreateWithoutVerifiedByInput[]
    connectOrCreate?: MatchResultCreateOrConnectWithoutVerifiedByInput | MatchResultCreateOrConnectWithoutVerifiedByInput[]
    upsert?: MatchResultUpsertWithWhereUniqueWithoutVerifiedByInput | MatchResultUpsertWithWhereUniqueWithoutVerifiedByInput[]
    createMany?: MatchResultCreateManyVerifiedByInputEnvelope
    set?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    disconnect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    delete?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    connect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    update?: MatchResultUpdateWithWhereUniqueWithoutVerifiedByInput | MatchResultUpdateWithWhereUniqueWithoutVerifiedByInput[]
    updateMany?: MatchResultUpdateManyWithWhereWithoutVerifiedByInput | MatchResultUpdateManyWithWhereWithoutVerifiedByInput[]
    deleteMany?: MatchResultScalarWhereInput | MatchResultScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserCommunityUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserCommunityCreateWithoutUserInput, UserCommunityUncheckedCreateWithoutUserInput> | UserCommunityCreateWithoutUserInput[] | UserCommunityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCommunityCreateOrConnectWithoutUserInput | UserCommunityCreateOrConnectWithoutUserInput[]
    upsert?: UserCommunityUpsertWithWhereUniqueWithoutUserInput | UserCommunityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserCommunityCreateManyUserInputEnvelope
    set?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    disconnect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    delete?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    connect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    update?: UserCommunityUpdateWithWhereUniqueWithoutUserInput | UserCommunityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserCommunityUpdateManyWithWhereWithoutUserInput | UserCommunityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserCommunityScalarWhereInput | UserCommunityScalarWhereInput[]
  }

  export type ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ThemePreferenceCreateWithoutUserInput, ThemePreferenceUncheckedCreateWithoutUserInput> | ThemePreferenceCreateWithoutUserInput[] | ThemePreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThemePreferenceCreateOrConnectWithoutUserInput | ThemePreferenceCreateOrConnectWithoutUserInput[]
    upsert?: ThemePreferenceUpsertWithWhereUniqueWithoutUserInput | ThemePreferenceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ThemePreferenceCreateManyUserInputEnvelope
    set?: ThemePreferenceWhereUniqueInput | ThemePreferenceWhereUniqueInput[]
    disconnect?: ThemePreferenceWhereUniqueInput | ThemePreferenceWhereUniqueInput[]
    delete?: ThemePreferenceWhereUniqueInput | ThemePreferenceWhereUniqueInput[]
    connect?: ThemePreferenceWhereUniqueInput | ThemePreferenceWhereUniqueInput[]
    update?: ThemePreferenceUpdateWithWhereUniqueWithoutUserInput | ThemePreferenceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ThemePreferenceUpdateManyWithWhereWithoutUserInput | ThemePreferenceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ThemePreferenceScalarWhereInput | ThemePreferenceScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<EventCreateWithoutCreatorInput, EventUncheckedCreateWithoutCreatorInput> | EventCreateWithoutCreatorInput[] | EventUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCreatorInput | EventCreateOrConnectWithoutCreatorInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutCreatorInput | EventUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: EventCreateManyCreatorInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutCreatorInput | EventUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: EventUpdateManyWithWhereWithoutCreatorInput | EventUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutHostNestedInput = {
    create?: XOR<EventCreateWithoutHostInput, EventUncheckedCreateWithoutHostInput> | EventCreateWithoutHostInput[] | EventUncheckedCreateWithoutHostInput[]
    connectOrCreate?: EventCreateOrConnectWithoutHostInput | EventCreateOrConnectWithoutHostInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutHostInput | EventUpsertWithWhereUniqueWithoutHostInput[]
    createMany?: EventCreateManyHostInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutHostInput | EventUpdateWithWhereUniqueWithoutHostInput[]
    updateMany?: EventUpdateManyWithWhereWithoutHostInput | EventUpdateManyWithWhereWithoutHostInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutCoHostNestedInput = {
    create?: XOR<EventCreateWithoutCoHostInput, EventUncheckedCreateWithoutCoHostInput> | EventCreateWithoutCoHostInput[] | EventUncheckedCreateWithoutCoHostInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCoHostInput | EventCreateOrConnectWithoutCoHostInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutCoHostInput | EventUpsertWithWhereUniqueWithoutCoHostInput[]
    createMany?: EventCreateManyCoHostInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutCoHostInput | EventUpdateWithWhereUniqueWithoutCoHostInput[]
    updateMany?: EventUpdateManyWithWhereWithoutCoHostInput | EventUpdateManyWithWhereWithoutCoHostInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type EventAttendeeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventAttendeeCreateWithoutUserInput, EventAttendeeUncheckedCreateWithoutUserInput> | EventAttendeeCreateWithoutUserInput[] | EventAttendeeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventAttendeeCreateOrConnectWithoutUserInput | EventAttendeeCreateOrConnectWithoutUserInput[]
    upsert?: EventAttendeeUpsertWithWhereUniqueWithoutUserInput | EventAttendeeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventAttendeeCreateManyUserInputEnvelope
    set?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    disconnect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    delete?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    connect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    update?: EventAttendeeUpdateWithWhereUniqueWithoutUserInput | EventAttendeeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventAttendeeUpdateManyWithWhereWithoutUserInput | EventAttendeeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventAttendeeScalarWhereInput | EventAttendeeScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReceiverInput | MessageUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReceiverInput | MessageUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReceiverInput | MessageUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type GameSessionUncheckedUpdateManyWithoutHostNestedInput = {
    create?: XOR<GameSessionCreateWithoutHostInput, GameSessionUncheckedCreateWithoutHostInput> | GameSessionCreateWithoutHostInput[] | GameSessionUncheckedCreateWithoutHostInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutHostInput | GameSessionCreateOrConnectWithoutHostInput[]
    upsert?: GameSessionUpsertWithWhereUniqueWithoutHostInput | GameSessionUpsertWithWhereUniqueWithoutHostInput[]
    createMany?: GameSessionCreateManyHostInputEnvelope
    set?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    disconnect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    delete?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    update?: GameSessionUpdateWithWhereUniqueWithoutHostInput | GameSessionUpdateWithWhereUniqueWithoutHostInput[]
    updateMany?: GameSessionUpdateManyWithWhereWithoutHostInput | GameSessionUpdateManyWithWhereWithoutHostInput[]
    deleteMany?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
  }

  export type GameSessionUncheckedUpdateManyWithoutCoHostNestedInput = {
    create?: XOR<GameSessionCreateWithoutCoHostInput, GameSessionUncheckedCreateWithoutCoHostInput> | GameSessionCreateWithoutCoHostInput[] | GameSessionUncheckedCreateWithoutCoHostInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutCoHostInput | GameSessionCreateOrConnectWithoutCoHostInput[]
    upsert?: GameSessionUpsertWithWhereUniqueWithoutCoHostInput | GameSessionUpsertWithWhereUniqueWithoutCoHostInput[]
    createMany?: GameSessionCreateManyCoHostInputEnvelope
    set?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    disconnect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    delete?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    update?: GameSessionUpdateWithWhereUniqueWithoutCoHostInput | GameSessionUpdateWithWhereUniqueWithoutCoHostInput[]
    updateMany?: GameSessionUpdateManyWithWhereWithoutCoHostInput | GameSessionUpdateManyWithWhereWithoutCoHostInput[]
    deleteMany?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
  }

  export type UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSocialLinkCreateWithoutUserInput, UserSocialLinkUncheckedCreateWithoutUserInput> | UserSocialLinkCreateWithoutUserInput[] | UserSocialLinkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSocialLinkCreateOrConnectWithoutUserInput | UserSocialLinkCreateOrConnectWithoutUserInput[]
    upsert?: UserSocialLinkUpsertWithWhereUniqueWithoutUserInput | UserSocialLinkUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSocialLinkCreateManyUserInputEnvelope
    set?: UserSocialLinkWhereUniqueInput | UserSocialLinkWhereUniqueInput[]
    disconnect?: UserSocialLinkWhereUniqueInput | UserSocialLinkWhereUniqueInput[]
    delete?: UserSocialLinkWhereUniqueInput | UserSocialLinkWhereUniqueInput[]
    connect?: UserSocialLinkWhereUniqueInput | UserSocialLinkWhereUniqueInput[]
    update?: UserSocialLinkUpdateWithWhereUniqueWithoutUserInput | UserSocialLinkUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSocialLinkUpdateManyWithWhereWithoutUserInput | UserSocialLinkUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSocialLinkScalarWhereInput | UserSocialLinkScalarWhereInput[]
  }

  export type UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserGamingProfileCreateWithoutUserInput, UserGamingProfileUncheckedCreateWithoutUserInput> | UserGamingProfileCreateWithoutUserInput[] | UserGamingProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserGamingProfileCreateOrConnectWithoutUserInput | UserGamingProfileCreateOrConnectWithoutUserInput[]
    upsert?: UserGamingProfileUpsertWithWhereUniqueWithoutUserInput | UserGamingProfileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserGamingProfileCreateManyUserInputEnvelope
    set?: UserGamingProfileWhereUniqueInput | UserGamingProfileWhereUniqueInput[]
    disconnect?: UserGamingProfileWhereUniqueInput | UserGamingProfileWhereUniqueInput[]
    delete?: UserGamingProfileWhereUniqueInput | UserGamingProfileWhereUniqueInput[]
    connect?: UserGamingProfileWhereUniqueInput | UserGamingProfileWhereUniqueInput[]
    update?: UserGamingProfileUpdateWithWhereUniqueWithoutUserInput | UserGamingProfileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserGamingProfileUpdateManyWithWhereWithoutUserInput | UserGamingProfileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserGamingProfileScalarWhereInput | UserGamingProfileScalarWhereInput[]
  }

  export type FriendshipUncheckedUpdateManyWithoutRequesterNestedInput = {
    create?: XOR<FriendshipCreateWithoutRequesterInput, FriendshipUncheckedCreateWithoutRequesterInput> | FriendshipCreateWithoutRequesterInput[] | FriendshipUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutRequesterInput | FriendshipCreateOrConnectWithoutRequesterInput[]
    upsert?: FriendshipUpsertWithWhereUniqueWithoutRequesterInput | FriendshipUpsertWithWhereUniqueWithoutRequesterInput[]
    createMany?: FriendshipCreateManyRequesterInputEnvelope
    set?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    disconnect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    delete?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    update?: FriendshipUpdateWithWhereUniqueWithoutRequesterInput | FriendshipUpdateWithWhereUniqueWithoutRequesterInput[]
    updateMany?: FriendshipUpdateManyWithWhereWithoutRequesterInput | FriendshipUpdateManyWithWhereWithoutRequesterInput[]
    deleteMany?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
  }

  export type FriendshipUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<FriendshipCreateWithoutReceiverInput, FriendshipUncheckedCreateWithoutReceiverInput> | FriendshipCreateWithoutReceiverInput[] | FriendshipUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutReceiverInput | FriendshipCreateOrConnectWithoutReceiverInput[]
    upsert?: FriendshipUpsertWithWhereUniqueWithoutReceiverInput | FriendshipUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: FriendshipCreateManyReceiverInputEnvelope
    set?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    disconnect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    delete?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    update?: FriendshipUpdateWithWhereUniqueWithoutReceiverInput | FriendshipUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: FriendshipUpdateManyWithWhereWithoutReceiverInput | FriendshipUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
  }

  export type UserActivityUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput> | UserActivityCreateWithoutUserInput[] | UserActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActivityCreateOrConnectWithoutUserInput | UserActivityCreateOrConnectWithoutUserInput[]
    upsert?: UserActivityUpsertWithWhereUniqueWithoutUserInput | UserActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserActivityCreateManyUserInputEnvelope
    set?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    disconnect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    delete?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    connect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    update?: UserActivityUpdateWithWhereUniqueWithoutUserInput | UserActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserActivityUpdateManyWithWhereWithoutUserInput | UserActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserActivityScalarWhereInput | UserActivityScalarWhereInput[]
  }

  export type UserSettingsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput> | UserSettingsCreateWithoutUserInput[] | UserSettingsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput | UserSettingsCreateOrConnectWithoutUserInput[]
    upsert?: UserSettingsUpsertWithWhereUniqueWithoutUserInput | UserSettingsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSettingsCreateManyUserInputEnvelope
    set?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    disconnect?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    delete?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    connect?: UserSettingsWhereUniqueInput | UserSettingsWhereUniqueInput[]
    update?: UserSettingsUpdateWithWhereUniqueWithoutUserInput | UserSettingsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSettingsUpdateManyWithWhereWithoutUserInput | UserSettingsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSettingsScalarWhereInput | UserSettingsScalarWhereInput[]
  }

  export type MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MatchmakingPreferenceCreateWithoutUserInput, MatchmakingPreferenceUncheckedCreateWithoutUserInput> | MatchmakingPreferenceCreateWithoutUserInput[] | MatchmakingPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MatchmakingPreferenceCreateOrConnectWithoutUserInput | MatchmakingPreferenceCreateOrConnectWithoutUserInput[]
    upsert?: MatchmakingPreferenceUpsertWithWhereUniqueWithoutUserInput | MatchmakingPreferenceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MatchmakingPreferenceCreateManyUserInputEnvelope
    set?: MatchmakingPreferenceWhereUniqueInput | MatchmakingPreferenceWhereUniqueInput[]
    disconnect?: MatchmakingPreferenceWhereUniqueInput | MatchmakingPreferenceWhereUniqueInput[]
    delete?: MatchmakingPreferenceWhereUniqueInput | MatchmakingPreferenceWhereUniqueInput[]
    connect?: MatchmakingPreferenceWhereUniqueInput | MatchmakingPreferenceWhereUniqueInput[]
    update?: MatchmakingPreferenceUpdateWithWhereUniqueWithoutUserInput | MatchmakingPreferenceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MatchmakingPreferenceUpdateManyWithWhereWithoutUserInput | MatchmakingPreferenceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MatchmakingPreferenceScalarWhereInput | MatchmakingPreferenceScalarWhereInput[]
  }

  export type TournamentUncheckedUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<TournamentCreateWithoutOrganizerInput, TournamentUncheckedCreateWithoutOrganizerInput> | TournamentCreateWithoutOrganizerInput[] | TournamentUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutOrganizerInput | TournamentCreateOrConnectWithoutOrganizerInput[]
    upsert?: TournamentUpsertWithWhereUniqueWithoutOrganizerInput | TournamentUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: TournamentCreateManyOrganizerInputEnvelope
    set?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    disconnect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    delete?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    update?: TournamentUpdateWithWhereUniqueWithoutOrganizerInput | TournamentUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: TournamentUpdateManyWithWhereWithoutOrganizerInput | TournamentUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: TournamentScalarWhereInput | TournamentScalarWhereInput[]
  }

  export type TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TournamentParticipantCreateWithoutUserInput, TournamentParticipantUncheckedCreateWithoutUserInput> | TournamentParticipantCreateWithoutUserInput[] | TournamentParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TournamentParticipantCreateOrConnectWithoutUserInput | TournamentParticipantCreateOrConnectWithoutUserInput[]
    upsert?: TournamentParticipantUpsertWithWhereUniqueWithoutUserInput | TournamentParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TournamentParticipantCreateManyUserInputEnvelope
    set?: TournamentParticipantWhereUniqueInput | TournamentParticipantWhereUniqueInput[]
    disconnect?: TournamentParticipantWhereUniqueInput | TournamentParticipantWhereUniqueInput[]
    delete?: TournamentParticipantWhereUniqueInput | TournamentParticipantWhereUniqueInput[]
    connect?: TournamentParticipantWhereUniqueInput | TournamentParticipantWhereUniqueInput[]
    update?: TournamentParticipantUpdateWithWhereUniqueWithoutUserInput | TournamentParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TournamentParticipantUpdateManyWithWhereWithoutUserInput | TournamentParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TournamentParticipantScalarWhereInput | TournamentParticipantScalarWhereInput[]
  }

  export type ForumPostUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ForumPostCreateWithoutAuthorInput, ForumPostUncheckedCreateWithoutAuthorInput> | ForumPostCreateWithoutAuthorInput[] | ForumPostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ForumPostCreateOrConnectWithoutAuthorInput | ForumPostCreateOrConnectWithoutAuthorInput[]
    upsert?: ForumPostUpsertWithWhereUniqueWithoutAuthorInput | ForumPostUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ForumPostCreateManyAuthorInputEnvelope
    set?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    disconnect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    delete?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    connect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    update?: ForumPostUpdateWithWhereUniqueWithoutAuthorInput | ForumPostUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ForumPostUpdateManyWithWhereWithoutAuthorInput | ForumPostUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ForumPostScalarWhereInput | ForumPostScalarWhereInput[]
  }

  export type ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ForumReplyCreateWithoutAuthorInput, ForumReplyUncheckedCreateWithoutAuthorInput> | ForumReplyCreateWithoutAuthorInput[] | ForumReplyUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ForumReplyCreateOrConnectWithoutAuthorInput | ForumReplyCreateOrConnectWithoutAuthorInput[]
    upsert?: ForumReplyUpsertWithWhereUniqueWithoutAuthorInput | ForumReplyUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ForumReplyCreateManyAuthorInputEnvelope
    set?: ForumReplyWhereUniqueInput | ForumReplyWhereUniqueInput[]
    disconnect?: ForumReplyWhereUniqueInput | ForumReplyWhereUniqueInput[]
    delete?: ForumReplyWhereUniqueInput | ForumReplyWhereUniqueInput[]
    connect?: ForumReplyWhereUniqueInput | ForumReplyWhereUniqueInput[]
    update?: ForumReplyUpdateWithWhereUniqueWithoutAuthorInput | ForumReplyUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ForumReplyUpdateManyWithWhereWithoutAuthorInput | ForumReplyUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ForumReplyScalarWhereInput | ForumReplyScalarWhereInput[]
  }

  export type ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ForumPostLikeCreateWithoutUserInput, ForumPostLikeUncheckedCreateWithoutUserInput> | ForumPostLikeCreateWithoutUserInput[] | ForumPostLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumPostLikeCreateOrConnectWithoutUserInput | ForumPostLikeCreateOrConnectWithoutUserInput[]
    upsert?: ForumPostLikeUpsertWithWhereUniqueWithoutUserInput | ForumPostLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ForumPostLikeCreateManyUserInputEnvelope
    set?: ForumPostLikeWhereUniqueInput | ForumPostLikeWhereUniqueInput[]
    disconnect?: ForumPostLikeWhereUniqueInput | ForumPostLikeWhereUniqueInput[]
    delete?: ForumPostLikeWhereUniqueInput | ForumPostLikeWhereUniqueInput[]
    connect?: ForumPostLikeWhereUniqueInput | ForumPostLikeWhereUniqueInput[]
    update?: ForumPostLikeUpdateWithWhereUniqueWithoutUserInput | ForumPostLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ForumPostLikeUpdateManyWithWhereWithoutUserInput | ForumPostLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ForumPostLikeScalarWhereInput | ForumPostLikeScalarWhereInput[]
  }

  export type ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ForumReplyLikeCreateWithoutUserInput, ForumReplyLikeUncheckedCreateWithoutUserInput> | ForumReplyLikeCreateWithoutUserInput[] | ForumReplyLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ForumReplyLikeCreateOrConnectWithoutUserInput | ForumReplyLikeCreateOrConnectWithoutUserInput[]
    upsert?: ForumReplyLikeUpsertWithWhereUniqueWithoutUserInput | ForumReplyLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ForumReplyLikeCreateManyUserInputEnvelope
    set?: ForumReplyLikeWhereUniqueInput | ForumReplyLikeWhereUniqueInput[]
    disconnect?: ForumReplyLikeWhereUniqueInput | ForumReplyLikeWhereUniqueInput[]
    delete?: ForumReplyLikeWhereUniqueInput | ForumReplyLikeWhereUniqueInput[]
    connect?: ForumReplyLikeWhereUniqueInput | ForumReplyLikeWhereUniqueInput[]
    update?: ForumReplyLikeUpdateWithWhereUniqueWithoutUserInput | ForumReplyLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ForumReplyLikeUpdateManyWithWhereWithoutUserInput | ForumReplyLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ForumReplyLikeScalarWhereInput | ForumReplyLikeScalarWhereInput[]
  }

  export type TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput = {
    create?: XOR<TournamentMatchCreateWithoutPlayer1Input, TournamentMatchUncheckedCreateWithoutPlayer1Input> | TournamentMatchCreateWithoutPlayer1Input[] | TournamentMatchUncheckedCreateWithoutPlayer1Input[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutPlayer1Input | TournamentMatchCreateOrConnectWithoutPlayer1Input[]
    upsert?: TournamentMatchUpsertWithWhereUniqueWithoutPlayer1Input | TournamentMatchUpsertWithWhereUniqueWithoutPlayer1Input[]
    createMany?: TournamentMatchCreateManyPlayer1InputEnvelope
    set?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    disconnect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    delete?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    update?: TournamentMatchUpdateWithWhereUniqueWithoutPlayer1Input | TournamentMatchUpdateWithWhereUniqueWithoutPlayer1Input[]
    updateMany?: TournamentMatchUpdateManyWithWhereWithoutPlayer1Input | TournamentMatchUpdateManyWithWhereWithoutPlayer1Input[]
    deleteMany?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
  }

  export type TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput = {
    create?: XOR<TournamentMatchCreateWithoutPlayer2Input, TournamentMatchUncheckedCreateWithoutPlayer2Input> | TournamentMatchCreateWithoutPlayer2Input[] | TournamentMatchUncheckedCreateWithoutPlayer2Input[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutPlayer2Input | TournamentMatchCreateOrConnectWithoutPlayer2Input[]
    upsert?: TournamentMatchUpsertWithWhereUniqueWithoutPlayer2Input | TournamentMatchUpsertWithWhereUniqueWithoutPlayer2Input[]
    createMany?: TournamentMatchCreateManyPlayer2InputEnvelope
    set?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    disconnect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    delete?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    update?: TournamentMatchUpdateWithWhereUniqueWithoutPlayer2Input | TournamentMatchUpdateWithWhereUniqueWithoutPlayer2Input[]
    updateMany?: TournamentMatchUpdateManyWithWhereWithoutPlayer2Input | TournamentMatchUpdateManyWithWhereWithoutPlayer2Input[]
    deleteMany?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
  }

  export type TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput = {
    create?: XOR<TournamentMatchCreateWithoutWinnerInput, TournamentMatchUncheckedCreateWithoutWinnerInput> | TournamentMatchCreateWithoutWinnerInput[] | TournamentMatchUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutWinnerInput | TournamentMatchCreateOrConnectWithoutWinnerInput[]
    upsert?: TournamentMatchUpsertWithWhereUniqueWithoutWinnerInput | TournamentMatchUpsertWithWhereUniqueWithoutWinnerInput[]
    createMany?: TournamentMatchCreateManyWinnerInputEnvelope
    set?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    disconnect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    delete?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    update?: TournamentMatchUpdateWithWhereUniqueWithoutWinnerInput | TournamentMatchUpdateWithWhereUniqueWithoutWinnerInput[]
    updateMany?: TournamentMatchUpdateManyWithWhereWithoutWinnerInput | TournamentMatchUpdateManyWithWhereWithoutWinnerInput[]
    deleteMany?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
  }

  export type MatchResultUncheckedUpdateManyWithoutWinnerNestedInput = {
    create?: XOR<MatchResultCreateWithoutWinnerInput, MatchResultUncheckedCreateWithoutWinnerInput> | MatchResultCreateWithoutWinnerInput[] | MatchResultUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: MatchResultCreateOrConnectWithoutWinnerInput | MatchResultCreateOrConnectWithoutWinnerInput[]
    upsert?: MatchResultUpsertWithWhereUniqueWithoutWinnerInput | MatchResultUpsertWithWhereUniqueWithoutWinnerInput[]
    createMany?: MatchResultCreateManyWinnerInputEnvelope
    set?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    disconnect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    delete?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    connect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    update?: MatchResultUpdateWithWhereUniqueWithoutWinnerInput | MatchResultUpdateWithWhereUniqueWithoutWinnerInput[]
    updateMany?: MatchResultUpdateManyWithWhereWithoutWinnerInput | MatchResultUpdateManyWithWhereWithoutWinnerInput[]
    deleteMany?: MatchResultScalarWhereInput | MatchResultScalarWhereInput[]
  }

  export type MatchResultUncheckedUpdateManyWithoutLoserNestedInput = {
    create?: XOR<MatchResultCreateWithoutLoserInput, MatchResultUncheckedCreateWithoutLoserInput> | MatchResultCreateWithoutLoserInput[] | MatchResultUncheckedCreateWithoutLoserInput[]
    connectOrCreate?: MatchResultCreateOrConnectWithoutLoserInput | MatchResultCreateOrConnectWithoutLoserInput[]
    upsert?: MatchResultUpsertWithWhereUniqueWithoutLoserInput | MatchResultUpsertWithWhereUniqueWithoutLoserInput[]
    createMany?: MatchResultCreateManyLoserInputEnvelope
    set?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    disconnect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    delete?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    connect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    update?: MatchResultUpdateWithWhereUniqueWithoutLoserInput | MatchResultUpdateWithWhereUniqueWithoutLoserInput[]
    updateMany?: MatchResultUpdateManyWithWhereWithoutLoserInput | MatchResultUpdateManyWithWhereWithoutLoserInput[]
    deleteMany?: MatchResultScalarWhereInput | MatchResultScalarWhereInput[]
  }

  export type MatchResultUncheckedUpdateManyWithoutReportedByNestedInput = {
    create?: XOR<MatchResultCreateWithoutReportedByInput, MatchResultUncheckedCreateWithoutReportedByInput> | MatchResultCreateWithoutReportedByInput[] | MatchResultUncheckedCreateWithoutReportedByInput[]
    connectOrCreate?: MatchResultCreateOrConnectWithoutReportedByInput | MatchResultCreateOrConnectWithoutReportedByInput[]
    upsert?: MatchResultUpsertWithWhereUniqueWithoutReportedByInput | MatchResultUpsertWithWhereUniqueWithoutReportedByInput[]
    createMany?: MatchResultCreateManyReportedByInputEnvelope
    set?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    disconnect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    delete?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    connect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    update?: MatchResultUpdateWithWhereUniqueWithoutReportedByInput | MatchResultUpdateWithWhereUniqueWithoutReportedByInput[]
    updateMany?: MatchResultUpdateManyWithWhereWithoutReportedByInput | MatchResultUpdateManyWithWhereWithoutReportedByInput[]
    deleteMany?: MatchResultScalarWhereInput | MatchResultScalarWhereInput[]
  }

  export type MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput = {
    create?: XOR<MatchResultCreateWithoutVerifiedByInput, MatchResultUncheckedCreateWithoutVerifiedByInput> | MatchResultCreateWithoutVerifiedByInput[] | MatchResultUncheckedCreateWithoutVerifiedByInput[]
    connectOrCreate?: MatchResultCreateOrConnectWithoutVerifiedByInput | MatchResultCreateOrConnectWithoutVerifiedByInput[]
    upsert?: MatchResultUpsertWithWhereUniqueWithoutVerifiedByInput | MatchResultUpsertWithWhereUniqueWithoutVerifiedByInput[]
    createMany?: MatchResultCreateManyVerifiedByInputEnvelope
    set?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    disconnect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    delete?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    connect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    update?: MatchResultUpdateWithWhereUniqueWithoutVerifiedByInput | MatchResultUpdateWithWhereUniqueWithoutVerifiedByInput[]
    updateMany?: MatchResultUpdateManyWithWhereWithoutVerifiedByInput | MatchResultUpdateManyWithWhereWithoutVerifiedByInput[]
    deleteMany?: MatchResultScalarWhereInput | MatchResultScalarWhereInput[]
  }

  export type UserCommunityCreateNestedManyWithoutCommunityInput = {
    create?: XOR<UserCommunityCreateWithoutCommunityInput, UserCommunityUncheckedCreateWithoutCommunityInput> | UserCommunityCreateWithoutCommunityInput[] | UserCommunityUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: UserCommunityCreateOrConnectWithoutCommunityInput | UserCommunityCreateOrConnectWithoutCommunityInput[]
    createMany?: UserCommunityCreateManyCommunityInputEnvelope
    connect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
  }

  export type ThemePreferenceCreateNestedManyWithoutCommunityInput = {
    create?: XOR<ThemePreferenceCreateWithoutCommunityInput, ThemePreferenceUncheckedCreateWithoutCommunityInput> | ThemePreferenceCreateWithoutCommunityInput[] | ThemePreferenceUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: ThemePreferenceCreateOrConnectWithoutCommunityInput | ThemePreferenceCreateOrConnectWithoutCommunityInput[]
    createMany?: ThemePreferenceCreateManyCommunityInputEnvelope
    connect?: ThemePreferenceWhereUniqueInput | ThemePreferenceWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutCommunityInput = {
    create?: XOR<EventCreateWithoutCommunityInput, EventUncheckedCreateWithoutCommunityInput> | EventCreateWithoutCommunityInput[] | EventUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCommunityInput | EventCreateOrConnectWithoutCommunityInput[]
    createMany?: EventCreateManyCommunityInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type ForumPostCreateNestedManyWithoutCommunityInput = {
    create?: XOR<ForumPostCreateWithoutCommunityInput, ForumPostUncheckedCreateWithoutCommunityInput> | ForumPostCreateWithoutCommunityInput[] | ForumPostUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: ForumPostCreateOrConnectWithoutCommunityInput | ForumPostCreateOrConnectWithoutCommunityInput[]
    createMany?: ForumPostCreateManyCommunityInputEnvelope
    connect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
  }

  export type TournamentCreateNestedManyWithoutCommunityInput = {
    create?: XOR<TournamentCreateWithoutCommunityInput, TournamentUncheckedCreateWithoutCommunityInput> | TournamentCreateWithoutCommunityInput[] | TournamentUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutCommunityInput | TournamentCreateOrConnectWithoutCommunityInput[]
    createMany?: TournamentCreateManyCommunityInputEnvelope
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
  }

  export type UserCommunityUncheckedCreateNestedManyWithoutCommunityInput = {
    create?: XOR<UserCommunityCreateWithoutCommunityInput, UserCommunityUncheckedCreateWithoutCommunityInput> | UserCommunityCreateWithoutCommunityInput[] | UserCommunityUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: UserCommunityCreateOrConnectWithoutCommunityInput | UserCommunityCreateOrConnectWithoutCommunityInput[]
    createMany?: UserCommunityCreateManyCommunityInputEnvelope
    connect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
  }

  export type ThemePreferenceUncheckedCreateNestedManyWithoutCommunityInput = {
    create?: XOR<ThemePreferenceCreateWithoutCommunityInput, ThemePreferenceUncheckedCreateWithoutCommunityInput> | ThemePreferenceCreateWithoutCommunityInput[] | ThemePreferenceUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: ThemePreferenceCreateOrConnectWithoutCommunityInput | ThemePreferenceCreateOrConnectWithoutCommunityInput[]
    createMany?: ThemePreferenceCreateManyCommunityInputEnvelope
    connect?: ThemePreferenceWhereUniqueInput | ThemePreferenceWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutCommunityInput = {
    create?: XOR<EventCreateWithoutCommunityInput, EventUncheckedCreateWithoutCommunityInput> | EventCreateWithoutCommunityInput[] | EventUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCommunityInput | EventCreateOrConnectWithoutCommunityInput[]
    createMany?: EventCreateManyCommunityInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type ForumPostUncheckedCreateNestedManyWithoutCommunityInput = {
    create?: XOR<ForumPostCreateWithoutCommunityInput, ForumPostUncheckedCreateWithoutCommunityInput> | ForumPostCreateWithoutCommunityInput[] | ForumPostUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: ForumPostCreateOrConnectWithoutCommunityInput | ForumPostCreateOrConnectWithoutCommunityInput[]
    createMany?: ForumPostCreateManyCommunityInputEnvelope
    connect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
  }

  export type TournamentUncheckedCreateNestedManyWithoutCommunityInput = {
    create?: XOR<TournamentCreateWithoutCommunityInput, TournamentUncheckedCreateWithoutCommunityInput> | TournamentCreateWithoutCommunityInput[] | TournamentUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutCommunityInput | TournamentCreateOrConnectWithoutCommunityInput[]
    createMany?: TournamentCreateManyCommunityInputEnvelope
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
  }

  export type UserCommunityUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<UserCommunityCreateWithoutCommunityInput, UserCommunityUncheckedCreateWithoutCommunityInput> | UserCommunityCreateWithoutCommunityInput[] | UserCommunityUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: UserCommunityCreateOrConnectWithoutCommunityInput | UserCommunityCreateOrConnectWithoutCommunityInput[]
    upsert?: UserCommunityUpsertWithWhereUniqueWithoutCommunityInput | UserCommunityUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: UserCommunityCreateManyCommunityInputEnvelope
    set?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    disconnect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    delete?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    connect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    update?: UserCommunityUpdateWithWhereUniqueWithoutCommunityInput | UserCommunityUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: UserCommunityUpdateManyWithWhereWithoutCommunityInput | UserCommunityUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: UserCommunityScalarWhereInput | UserCommunityScalarWhereInput[]
  }

  export type ThemePreferenceUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<ThemePreferenceCreateWithoutCommunityInput, ThemePreferenceUncheckedCreateWithoutCommunityInput> | ThemePreferenceCreateWithoutCommunityInput[] | ThemePreferenceUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: ThemePreferenceCreateOrConnectWithoutCommunityInput | ThemePreferenceCreateOrConnectWithoutCommunityInput[]
    upsert?: ThemePreferenceUpsertWithWhereUniqueWithoutCommunityInput | ThemePreferenceUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: ThemePreferenceCreateManyCommunityInputEnvelope
    set?: ThemePreferenceWhereUniqueInput | ThemePreferenceWhereUniqueInput[]
    disconnect?: ThemePreferenceWhereUniqueInput | ThemePreferenceWhereUniqueInput[]
    delete?: ThemePreferenceWhereUniqueInput | ThemePreferenceWhereUniqueInput[]
    connect?: ThemePreferenceWhereUniqueInput | ThemePreferenceWhereUniqueInput[]
    update?: ThemePreferenceUpdateWithWhereUniqueWithoutCommunityInput | ThemePreferenceUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: ThemePreferenceUpdateManyWithWhereWithoutCommunityInput | ThemePreferenceUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: ThemePreferenceScalarWhereInput | ThemePreferenceScalarWhereInput[]
  }

  export type EventUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<EventCreateWithoutCommunityInput, EventUncheckedCreateWithoutCommunityInput> | EventCreateWithoutCommunityInput[] | EventUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCommunityInput | EventCreateOrConnectWithoutCommunityInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutCommunityInput | EventUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: EventCreateManyCommunityInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutCommunityInput | EventUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: EventUpdateManyWithWhereWithoutCommunityInput | EventUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type ForumPostUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<ForumPostCreateWithoutCommunityInput, ForumPostUncheckedCreateWithoutCommunityInput> | ForumPostCreateWithoutCommunityInput[] | ForumPostUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: ForumPostCreateOrConnectWithoutCommunityInput | ForumPostCreateOrConnectWithoutCommunityInput[]
    upsert?: ForumPostUpsertWithWhereUniqueWithoutCommunityInput | ForumPostUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: ForumPostCreateManyCommunityInputEnvelope
    set?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    disconnect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    delete?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    connect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    update?: ForumPostUpdateWithWhereUniqueWithoutCommunityInput | ForumPostUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: ForumPostUpdateManyWithWhereWithoutCommunityInput | ForumPostUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: ForumPostScalarWhereInput | ForumPostScalarWhereInput[]
  }

  export type TournamentUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<TournamentCreateWithoutCommunityInput, TournamentUncheckedCreateWithoutCommunityInput> | TournamentCreateWithoutCommunityInput[] | TournamentUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutCommunityInput | TournamentCreateOrConnectWithoutCommunityInput[]
    upsert?: TournamentUpsertWithWhereUniqueWithoutCommunityInput | TournamentUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: TournamentCreateManyCommunityInputEnvelope
    set?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    disconnect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    delete?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    update?: TournamentUpdateWithWhereUniqueWithoutCommunityInput | TournamentUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: TournamentUpdateManyWithWhereWithoutCommunityInput | TournamentUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: TournamentScalarWhereInput | TournamentScalarWhereInput[]
  }

  export type UserCommunityUncheckedUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<UserCommunityCreateWithoutCommunityInput, UserCommunityUncheckedCreateWithoutCommunityInput> | UserCommunityCreateWithoutCommunityInput[] | UserCommunityUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: UserCommunityCreateOrConnectWithoutCommunityInput | UserCommunityCreateOrConnectWithoutCommunityInput[]
    upsert?: UserCommunityUpsertWithWhereUniqueWithoutCommunityInput | UserCommunityUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: UserCommunityCreateManyCommunityInputEnvelope
    set?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    disconnect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    delete?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    connect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    update?: UserCommunityUpdateWithWhereUniqueWithoutCommunityInput | UserCommunityUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: UserCommunityUpdateManyWithWhereWithoutCommunityInput | UserCommunityUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: UserCommunityScalarWhereInput | UserCommunityScalarWhereInput[]
  }

  export type ThemePreferenceUncheckedUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<ThemePreferenceCreateWithoutCommunityInput, ThemePreferenceUncheckedCreateWithoutCommunityInput> | ThemePreferenceCreateWithoutCommunityInput[] | ThemePreferenceUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: ThemePreferenceCreateOrConnectWithoutCommunityInput | ThemePreferenceCreateOrConnectWithoutCommunityInput[]
    upsert?: ThemePreferenceUpsertWithWhereUniqueWithoutCommunityInput | ThemePreferenceUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: ThemePreferenceCreateManyCommunityInputEnvelope
    set?: ThemePreferenceWhereUniqueInput | ThemePreferenceWhereUniqueInput[]
    disconnect?: ThemePreferenceWhereUniqueInput | ThemePreferenceWhereUniqueInput[]
    delete?: ThemePreferenceWhereUniqueInput | ThemePreferenceWhereUniqueInput[]
    connect?: ThemePreferenceWhereUniqueInput | ThemePreferenceWhereUniqueInput[]
    update?: ThemePreferenceUpdateWithWhereUniqueWithoutCommunityInput | ThemePreferenceUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: ThemePreferenceUpdateManyWithWhereWithoutCommunityInput | ThemePreferenceUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: ThemePreferenceScalarWhereInput | ThemePreferenceScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<EventCreateWithoutCommunityInput, EventUncheckedCreateWithoutCommunityInput> | EventCreateWithoutCommunityInput[] | EventUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCommunityInput | EventCreateOrConnectWithoutCommunityInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutCommunityInput | EventUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: EventCreateManyCommunityInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutCommunityInput | EventUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: EventUpdateManyWithWhereWithoutCommunityInput | EventUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type ForumPostUncheckedUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<ForumPostCreateWithoutCommunityInput, ForumPostUncheckedCreateWithoutCommunityInput> | ForumPostCreateWithoutCommunityInput[] | ForumPostUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: ForumPostCreateOrConnectWithoutCommunityInput | ForumPostCreateOrConnectWithoutCommunityInput[]
    upsert?: ForumPostUpsertWithWhereUniqueWithoutCommunityInput | ForumPostUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: ForumPostCreateManyCommunityInputEnvelope
    set?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    disconnect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    delete?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    connect?: ForumPostWhereUniqueInput | ForumPostWhereUniqueInput[]
    update?: ForumPostUpdateWithWhereUniqueWithoutCommunityInput | ForumPostUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: ForumPostUpdateManyWithWhereWithoutCommunityInput | ForumPostUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: ForumPostScalarWhereInput | ForumPostScalarWhereInput[]
  }

  export type TournamentUncheckedUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<TournamentCreateWithoutCommunityInput, TournamentUncheckedCreateWithoutCommunityInput> | TournamentCreateWithoutCommunityInput[] | TournamentUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutCommunityInput | TournamentCreateOrConnectWithoutCommunityInput[]
    upsert?: TournamentUpsertWithWhereUniqueWithoutCommunityInput | TournamentUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: TournamentCreateManyCommunityInputEnvelope
    set?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    disconnect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    delete?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    update?: TournamentUpdateWithWhereUniqueWithoutCommunityInput | TournamentUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: TournamentUpdateManyWithWhereWithoutCommunityInput | TournamentUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: TournamentScalarWhereInput | TournamentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserCommunitiesInput = {
    create?: XOR<UserCreateWithoutUserCommunitiesInput, UserUncheckedCreateWithoutUserCommunitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserCommunitiesInput
    connect?: UserWhereUniqueInput
  }

  export type CommunityCreateNestedOneWithoutUserCommunitiesInput = {
    create?: XOR<CommunityCreateWithoutUserCommunitiesInput, CommunityUncheckedCreateWithoutUserCommunitiesInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutUserCommunitiesInput
    connect?: CommunityWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserCommunitiesNestedInput = {
    create?: XOR<UserCreateWithoutUserCommunitiesInput, UserUncheckedCreateWithoutUserCommunitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserCommunitiesInput
    upsert?: UserUpsertWithoutUserCommunitiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserCommunitiesInput, UserUpdateWithoutUserCommunitiesInput>, UserUncheckedUpdateWithoutUserCommunitiesInput>
  }

  export type CommunityUpdateOneRequiredWithoutUserCommunitiesNestedInput = {
    create?: XOR<CommunityCreateWithoutUserCommunitiesInput, CommunityUncheckedCreateWithoutUserCommunitiesInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutUserCommunitiesInput
    upsert?: CommunityUpsertWithoutUserCommunitiesInput
    connect?: CommunityWhereUniqueInput
    update?: XOR<XOR<CommunityUpdateToOneWithWhereWithoutUserCommunitiesInput, CommunityUpdateWithoutUserCommunitiesInput>, CommunityUncheckedUpdateWithoutUserCommunitiesInput>
  }

  export type UserCreateNestedOneWithoutThemePreferencesInput = {
    create?: XOR<UserCreateWithoutThemePreferencesInput, UserUncheckedCreateWithoutThemePreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutThemePreferencesInput
    connect?: UserWhereUniqueInput
  }

  export type CommunityCreateNestedOneWithoutThemePreferencesInput = {
    create?: XOR<CommunityCreateWithoutThemePreferencesInput, CommunityUncheckedCreateWithoutThemePreferencesInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutThemePreferencesInput
    connect?: CommunityWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutThemePreferencesNestedInput = {
    create?: XOR<UserCreateWithoutThemePreferencesInput, UserUncheckedCreateWithoutThemePreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutThemePreferencesInput
    upsert?: UserUpsertWithoutThemePreferencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutThemePreferencesInput, UserUpdateWithoutThemePreferencesInput>, UserUncheckedUpdateWithoutThemePreferencesInput>
  }

  export type CommunityUpdateOneWithoutThemePreferencesNestedInput = {
    create?: XOR<CommunityCreateWithoutThemePreferencesInput, CommunityUncheckedCreateWithoutThemePreferencesInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutThemePreferencesInput
    upsert?: CommunityUpsertWithoutThemePreferencesInput
    disconnect?: CommunityWhereInput | boolean
    delete?: CommunityWhereInput | boolean
    connect?: CommunityWhereUniqueInput
    update?: XOR<XOR<CommunityUpdateToOneWithWhereWithoutThemePreferencesInput, CommunityUpdateWithoutThemePreferencesInput>, CommunityUncheckedUpdateWithoutThemePreferencesInput>
  }

  export type CommunityCreateNestedOneWithoutEventsInput = {
    create?: XOR<CommunityCreateWithoutEventsInput, CommunityUncheckedCreateWithoutEventsInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutEventsInput
    connect?: CommunityWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedEventsInput = {
    create?: XOR<UserCreateWithoutCreatedEventsInput, UserUncheckedCreateWithoutCreatedEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedEventsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutHostedEventsInput = {
    create?: XOR<UserCreateWithoutHostedEventsInput, UserUncheckedCreateWithoutHostedEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutHostedEventsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCoHostedEventsInput = {
    create?: XOR<UserCreateWithoutCoHostedEventsInput, UserUncheckedCreateWithoutCoHostedEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCoHostedEventsInput
    connect?: UserWhereUniqueInput
  }

  export type EventAttendeeCreateNestedManyWithoutEventInput = {
    create?: XOR<EventAttendeeCreateWithoutEventInput, EventAttendeeUncheckedCreateWithoutEventInput> | EventAttendeeCreateWithoutEventInput[] | EventAttendeeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventAttendeeCreateOrConnectWithoutEventInput | EventAttendeeCreateOrConnectWithoutEventInput[]
    createMany?: EventAttendeeCreateManyEventInputEnvelope
    connect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
  }

  export type EventAttendeeUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<EventAttendeeCreateWithoutEventInput, EventAttendeeUncheckedCreateWithoutEventInput> | EventAttendeeCreateWithoutEventInput[] | EventAttendeeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventAttendeeCreateOrConnectWithoutEventInput | EventAttendeeCreateOrConnectWithoutEventInput[]
    createMany?: EventAttendeeCreateManyEventInputEnvelope
    connect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CommunityUpdateOneWithoutEventsNestedInput = {
    create?: XOR<CommunityCreateWithoutEventsInput, CommunityUncheckedCreateWithoutEventsInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutEventsInput
    upsert?: CommunityUpsertWithoutEventsInput
    disconnect?: CommunityWhereInput | boolean
    delete?: CommunityWhereInput | boolean
    connect?: CommunityWhereUniqueInput
    update?: XOR<XOR<CommunityUpdateToOneWithWhereWithoutEventsInput, CommunityUpdateWithoutEventsInput>, CommunityUncheckedUpdateWithoutEventsInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedEventsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedEventsInput, UserUncheckedCreateWithoutCreatedEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedEventsInput
    upsert?: UserUpsertWithoutCreatedEventsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedEventsInput, UserUpdateWithoutCreatedEventsInput>, UserUncheckedUpdateWithoutCreatedEventsInput>
  }

  export type UserUpdateOneRequiredWithoutHostedEventsNestedInput = {
    create?: XOR<UserCreateWithoutHostedEventsInput, UserUncheckedCreateWithoutHostedEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutHostedEventsInput
    upsert?: UserUpsertWithoutHostedEventsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHostedEventsInput, UserUpdateWithoutHostedEventsInput>, UserUncheckedUpdateWithoutHostedEventsInput>
  }

  export type UserUpdateOneWithoutCoHostedEventsNestedInput = {
    create?: XOR<UserCreateWithoutCoHostedEventsInput, UserUncheckedCreateWithoutCoHostedEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCoHostedEventsInput
    upsert?: UserUpsertWithoutCoHostedEventsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCoHostedEventsInput, UserUpdateWithoutCoHostedEventsInput>, UserUncheckedUpdateWithoutCoHostedEventsInput>
  }

  export type EventAttendeeUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventAttendeeCreateWithoutEventInput, EventAttendeeUncheckedCreateWithoutEventInput> | EventAttendeeCreateWithoutEventInput[] | EventAttendeeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventAttendeeCreateOrConnectWithoutEventInput | EventAttendeeCreateOrConnectWithoutEventInput[]
    upsert?: EventAttendeeUpsertWithWhereUniqueWithoutEventInput | EventAttendeeUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventAttendeeCreateManyEventInputEnvelope
    set?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    disconnect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    delete?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    connect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    update?: EventAttendeeUpdateWithWhereUniqueWithoutEventInput | EventAttendeeUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventAttendeeUpdateManyWithWhereWithoutEventInput | EventAttendeeUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventAttendeeScalarWhereInput | EventAttendeeScalarWhereInput[]
  }

  export type EventAttendeeUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventAttendeeCreateWithoutEventInput, EventAttendeeUncheckedCreateWithoutEventInput> | EventAttendeeCreateWithoutEventInput[] | EventAttendeeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventAttendeeCreateOrConnectWithoutEventInput | EventAttendeeCreateOrConnectWithoutEventInput[]
    upsert?: EventAttendeeUpsertWithWhereUniqueWithoutEventInput | EventAttendeeUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventAttendeeCreateManyEventInputEnvelope
    set?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    disconnect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    delete?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    connect?: EventAttendeeWhereUniqueInput | EventAttendeeWhereUniqueInput[]
    update?: EventAttendeeUpdateWithWhereUniqueWithoutEventInput | EventAttendeeUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventAttendeeUpdateManyWithWhereWithoutEventInput | EventAttendeeUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventAttendeeScalarWhereInput | EventAttendeeScalarWhereInput[]
  }

  export type EventCreateNestedOneWithoutAttendeesInput = {
    create?: XOR<EventCreateWithoutAttendeesInput, EventUncheckedCreateWithoutAttendeesInput>
    connectOrCreate?: EventCreateOrConnectWithoutAttendeesInput
    connect?: EventWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutEventAttendeesInput = {
    create?: XOR<UserCreateWithoutEventAttendeesInput, UserUncheckedCreateWithoutEventAttendeesInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventAttendeesInput
    connect?: UserWhereUniqueInput
  }

  export type EventUpdateOneRequiredWithoutAttendeesNestedInput = {
    create?: XOR<EventCreateWithoutAttendeesInput, EventUncheckedCreateWithoutAttendeesInput>
    connectOrCreate?: EventCreateOrConnectWithoutAttendeesInput
    upsert?: EventUpsertWithoutAttendeesInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutAttendeesInput, EventUpdateWithoutAttendeesInput>, EventUncheckedUpdateWithoutAttendeesInput>
  }

  export type UserUpdateOneRequiredWithoutEventAttendeesNestedInput = {
    create?: XOR<UserCreateWithoutEventAttendeesInput, UserUncheckedCreateWithoutEventAttendeesInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventAttendeesInput
    upsert?: UserUpsertWithoutEventAttendeesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEventAttendeesInput, UserUpdateWithoutEventAttendeesInput>, UserUncheckedUpdateWithoutEventAttendeesInput>
  }

  export type CommunityCreateNestedOneWithoutTournamentsInput = {
    create?: XOR<CommunityCreateWithoutTournamentsInput, CommunityUncheckedCreateWithoutTournamentsInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutTournamentsInput
    connect?: CommunityWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOrganizedTournamentsInput = {
    create?: XOR<UserCreateWithoutOrganizedTournamentsInput, UserUncheckedCreateWithoutOrganizedTournamentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrganizedTournamentsInput
    connect?: UserWhereUniqueInput
  }

  export type TournamentParticipantCreateNestedManyWithoutTournamentInput = {
    create?: XOR<TournamentParticipantCreateWithoutTournamentInput, TournamentParticipantUncheckedCreateWithoutTournamentInput> | TournamentParticipantCreateWithoutTournamentInput[] | TournamentParticipantUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TournamentParticipantCreateOrConnectWithoutTournamentInput | TournamentParticipantCreateOrConnectWithoutTournamentInput[]
    createMany?: TournamentParticipantCreateManyTournamentInputEnvelope
    connect?: TournamentParticipantWhereUniqueInput | TournamentParticipantWhereUniqueInput[]
  }

  export type TournamentRoundCreateNestedManyWithoutTournamentInput = {
    create?: XOR<TournamentRoundCreateWithoutTournamentInput, TournamentRoundUncheckedCreateWithoutTournamentInput> | TournamentRoundCreateWithoutTournamentInput[] | TournamentRoundUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TournamentRoundCreateOrConnectWithoutTournamentInput | TournamentRoundCreateOrConnectWithoutTournamentInput[]
    createMany?: TournamentRoundCreateManyTournamentInputEnvelope
    connect?: TournamentRoundWhereUniqueInput | TournamentRoundWhereUniqueInput[]
  }

  export type TournamentMatchCreateNestedManyWithoutTournamentInput = {
    create?: XOR<TournamentMatchCreateWithoutTournamentInput, TournamentMatchUncheckedCreateWithoutTournamentInput> | TournamentMatchCreateWithoutTournamentInput[] | TournamentMatchUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutTournamentInput | TournamentMatchCreateOrConnectWithoutTournamentInput[]
    createMany?: TournamentMatchCreateManyTournamentInputEnvelope
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
  }

  export type TournamentParticipantUncheckedCreateNestedManyWithoutTournamentInput = {
    create?: XOR<TournamentParticipantCreateWithoutTournamentInput, TournamentParticipantUncheckedCreateWithoutTournamentInput> | TournamentParticipantCreateWithoutTournamentInput[] | TournamentParticipantUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TournamentParticipantCreateOrConnectWithoutTournamentInput | TournamentParticipantCreateOrConnectWithoutTournamentInput[]
    createMany?: TournamentParticipantCreateManyTournamentInputEnvelope
    connect?: TournamentParticipantWhereUniqueInput | TournamentParticipantWhereUniqueInput[]
  }

  export type TournamentRoundUncheckedCreateNestedManyWithoutTournamentInput = {
    create?: XOR<TournamentRoundCreateWithoutTournamentInput, TournamentRoundUncheckedCreateWithoutTournamentInput> | TournamentRoundCreateWithoutTournamentInput[] | TournamentRoundUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TournamentRoundCreateOrConnectWithoutTournamentInput | TournamentRoundCreateOrConnectWithoutTournamentInput[]
    createMany?: TournamentRoundCreateManyTournamentInputEnvelope
    connect?: TournamentRoundWhereUniqueInput | TournamentRoundWhereUniqueInput[]
  }

  export type TournamentMatchUncheckedCreateNestedManyWithoutTournamentInput = {
    create?: XOR<TournamentMatchCreateWithoutTournamentInput, TournamentMatchUncheckedCreateWithoutTournamentInput> | TournamentMatchCreateWithoutTournamentInput[] | TournamentMatchUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutTournamentInput | TournamentMatchCreateOrConnectWithoutTournamentInput[]
    createMany?: TournamentMatchCreateManyTournamentInputEnvelope
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type CommunityUpdateOneRequiredWithoutTournamentsNestedInput = {
    create?: XOR<CommunityCreateWithoutTournamentsInput, CommunityUncheckedCreateWithoutTournamentsInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutTournamentsInput
    upsert?: CommunityUpsertWithoutTournamentsInput
    connect?: CommunityWhereUniqueInput
    update?: XOR<XOR<CommunityUpdateToOneWithWhereWithoutTournamentsInput, CommunityUpdateWithoutTournamentsInput>, CommunityUncheckedUpdateWithoutTournamentsInput>
  }

  export type UserUpdateOneRequiredWithoutOrganizedTournamentsNestedInput = {
    create?: XOR<UserCreateWithoutOrganizedTournamentsInput, UserUncheckedCreateWithoutOrganizedTournamentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrganizedTournamentsInput
    upsert?: UserUpsertWithoutOrganizedTournamentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrganizedTournamentsInput, UserUpdateWithoutOrganizedTournamentsInput>, UserUncheckedUpdateWithoutOrganizedTournamentsInput>
  }

  export type TournamentParticipantUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<TournamentParticipantCreateWithoutTournamentInput, TournamentParticipantUncheckedCreateWithoutTournamentInput> | TournamentParticipantCreateWithoutTournamentInput[] | TournamentParticipantUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TournamentParticipantCreateOrConnectWithoutTournamentInput | TournamentParticipantCreateOrConnectWithoutTournamentInput[]
    upsert?: TournamentParticipantUpsertWithWhereUniqueWithoutTournamentInput | TournamentParticipantUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: TournamentParticipantCreateManyTournamentInputEnvelope
    set?: TournamentParticipantWhereUniqueInput | TournamentParticipantWhereUniqueInput[]
    disconnect?: TournamentParticipantWhereUniqueInput | TournamentParticipantWhereUniqueInput[]
    delete?: TournamentParticipantWhereUniqueInput | TournamentParticipantWhereUniqueInput[]
    connect?: TournamentParticipantWhereUniqueInput | TournamentParticipantWhereUniqueInput[]
    update?: TournamentParticipantUpdateWithWhereUniqueWithoutTournamentInput | TournamentParticipantUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: TournamentParticipantUpdateManyWithWhereWithoutTournamentInput | TournamentParticipantUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: TournamentParticipantScalarWhereInput | TournamentParticipantScalarWhereInput[]
  }

  export type TournamentRoundUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<TournamentRoundCreateWithoutTournamentInput, TournamentRoundUncheckedCreateWithoutTournamentInput> | TournamentRoundCreateWithoutTournamentInput[] | TournamentRoundUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TournamentRoundCreateOrConnectWithoutTournamentInput | TournamentRoundCreateOrConnectWithoutTournamentInput[]
    upsert?: TournamentRoundUpsertWithWhereUniqueWithoutTournamentInput | TournamentRoundUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: TournamentRoundCreateManyTournamentInputEnvelope
    set?: TournamentRoundWhereUniqueInput | TournamentRoundWhereUniqueInput[]
    disconnect?: TournamentRoundWhereUniqueInput | TournamentRoundWhereUniqueInput[]
    delete?: TournamentRoundWhereUniqueInput | TournamentRoundWhereUniqueInput[]
    connect?: TournamentRoundWhereUniqueInput | TournamentRoundWhereUniqueInput[]
    update?: TournamentRoundUpdateWithWhereUniqueWithoutTournamentInput | TournamentRoundUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: TournamentRoundUpdateManyWithWhereWithoutTournamentInput | TournamentRoundUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: TournamentRoundScalarWhereInput | TournamentRoundScalarWhereInput[]
  }

  export type TournamentMatchUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<TournamentMatchCreateWithoutTournamentInput, TournamentMatchUncheckedCreateWithoutTournamentInput> | TournamentMatchCreateWithoutTournamentInput[] | TournamentMatchUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutTournamentInput | TournamentMatchCreateOrConnectWithoutTournamentInput[]
    upsert?: TournamentMatchUpsertWithWhereUniqueWithoutTournamentInput | TournamentMatchUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: TournamentMatchCreateManyTournamentInputEnvelope
    set?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    disconnect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    delete?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    update?: TournamentMatchUpdateWithWhereUniqueWithoutTournamentInput | TournamentMatchUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: TournamentMatchUpdateManyWithWhereWithoutTournamentInput | TournamentMatchUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
  }

  export type TournamentParticipantUncheckedUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<TournamentParticipantCreateWithoutTournamentInput, TournamentParticipantUncheckedCreateWithoutTournamentInput> | TournamentParticipantCreateWithoutTournamentInput[] | TournamentParticipantUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TournamentParticipantCreateOrConnectWithoutTournamentInput | TournamentParticipantCreateOrConnectWithoutTournamentInput[]
    upsert?: TournamentParticipantUpsertWithWhereUniqueWithoutTournamentInput | TournamentParticipantUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: TournamentParticipantCreateManyTournamentInputEnvelope
    set?: TournamentParticipantWhereUniqueInput | TournamentParticipantWhereUniqueInput[]
    disconnect?: TournamentParticipantWhereUniqueInput | TournamentParticipantWhereUniqueInput[]
    delete?: TournamentParticipantWhereUniqueInput | TournamentParticipantWhereUniqueInput[]
    connect?: TournamentParticipantWhereUniqueInput | TournamentParticipantWhereUniqueInput[]
    update?: TournamentParticipantUpdateWithWhereUniqueWithoutTournamentInput | TournamentParticipantUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: TournamentParticipantUpdateManyWithWhereWithoutTournamentInput | TournamentParticipantUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: TournamentParticipantScalarWhereInput | TournamentParticipantScalarWhereInput[]
  }

  export type TournamentRoundUncheckedUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<TournamentRoundCreateWithoutTournamentInput, TournamentRoundUncheckedCreateWithoutTournamentInput> | TournamentRoundCreateWithoutTournamentInput[] | TournamentRoundUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TournamentRoundCreateOrConnectWithoutTournamentInput | TournamentRoundCreateOrConnectWithoutTournamentInput[]
    upsert?: TournamentRoundUpsertWithWhereUniqueWithoutTournamentInput | TournamentRoundUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: TournamentRoundCreateManyTournamentInputEnvelope
    set?: TournamentRoundWhereUniqueInput | TournamentRoundWhereUniqueInput[]
    disconnect?: TournamentRoundWhereUniqueInput | TournamentRoundWhereUniqueInput[]
    delete?: TournamentRoundWhereUniqueInput | TournamentRoundWhereUniqueInput[]
    connect?: TournamentRoundWhereUniqueInput | TournamentRoundWhereUniqueInput[]
    update?: TournamentRoundUpdateWithWhereUniqueWithoutTournamentInput | TournamentRoundUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: TournamentRoundUpdateManyWithWhereWithoutTournamentInput | TournamentRoundUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: TournamentRoundScalarWhereInput | TournamentRoundScalarWhereInput[]
  }

  export type TournamentMatchUncheckedUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<TournamentMatchCreateWithoutTournamentInput, TournamentMatchUncheckedCreateWithoutTournamentInput> | TournamentMatchCreateWithoutTournamentInput[] | TournamentMatchUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutTournamentInput | TournamentMatchCreateOrConnectWithoutTournamentInput[]
    upsert?: TournamentMatchUpsertWithWhereUniqueWithoutTournamentInput | TournamentMatchUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: TournamentMatchCreateManyTournamentInputEnvelope
    set?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    disconnect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    delete?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    update?: TournamentMatchUpdateWithWhereUniqueWithoutTournamentInput | TournamentMatchUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: TournamentMatchUpdateManyWithWhereWithoutTournamentInput | TournamentMatchUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
  }

  export type TournamentCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<TournamentCreateWithoutParticipantsInput, TournamentUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutParticipantsInput
    connect?: TournamentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTournamentParticipationInput = {
    create?: XOR<UserCreateWithoutTournamentParticipationInput, UserUncheckedCreateWithoutTournamentParticipationInput>
    connectOrCreate?: UserCreateOrConnectWithoutTournamentParticipationInput
    connect?: UserWhereUniqueInput
  }

  export type TournamentUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<TournamentCreateWithoutParticipantsInput, TournamentUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutParticipantsInput
    upsert?: TournamentUpsertWithoutParticipantsInput
    connect?: TournamentWhereUniqueInput
    update?: XOR<XOR<TournamentUpdateToOneWithWhereWithoutParticipantsInput, TournamentUpdateWithoutParticipantsInput>, TournamentUncheckedUpdateWithoutParticipantsInput>
  }

  export type UserUpdateOneRequiredWithoutTournamentParticipationNestedInput = {
    create?: XOR<UserCreateWithoutTournamentParticipationInput, UserUncheckedCreateWithoutTournamentParticipationInput>
    connectOrCreate?: UserCreateOrConnectWithoutTournamentParticipationInput
    upsert?: UserUpsertWithoutTournamentParticipationInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTournamentParticipationInput, UserUpdateWithoutTournamentParticipationInput>, UserUncheckedUpdateWithoutTournamentParticipationInput>
  }

  export type TournamentCreateNestedOneWithoutRoundsInput = {
    create?: XOR<TournamentCreateWithoutRoundsInput, TournamentUncheckedCreateWithoutRoundsInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutRoundsInput
    connect?: TournamentWhereUniqueInput
  }

  export type TournamentMatchCreateNestedManyWithoutRoundInput = {
    create?: XOR<TournamentMatchCreateWithoutRoundInput, TournamentMatchUncheckedCreateWithoutRoundInput> | TournamentMatchCreateWithoutRoundInput[] | TournamentMatchUncheckedCreateWithoutRoundInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutRoundInput | TournamentMatchCreateOrConnectWithoutRoundInput[]
    createMany?: TournamentMatchCreateManyRoundInputEnvelope
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
  }

  export type TournamentMatchUncheckedCreateNestedManyWithoutRoundInput = {
    create?: XOR<TournamentMatchCreateWithoutRoundInput, TournamentMatchUncheckedCreateWithoutRoundInput> | TournamentMatchCreateWithoutRoundInput[] | TournamentMatchUncheckedCreateWithoutRoundInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutRoundInput | TournamentMatchCreateOrConnectWithoutRoundInput[]
    createMany?: TournamentMatchCreateManyRoundInputEnvelope
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
  }

  export type TournamentUpdateOneRequiredWithoutRoundsNestedInput = {
    create?: XOR<TournamentCreateWithoutRoundsInput, TournamentUncheckedCreateWithoutRoundsInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutRoundsInput
    upsert?: TournamentUpsertWithoutRoundsInput
    connect?: TournamentWhereUniqueInput
    update?: XOR<XOR<TournamentUpdateToOneWithWhereWithoutRoundsInput, TournamentUpdateWithoutRoundsInput>, TournamentUncheckedUpdateWithoutRoundsInput>
  }

  export type TournamentMatchUpdateManyWithoutRoundNestedInput = {
    create?: XOR<TournamentMatchCreateWithoutRoundInput, TournamentMatchUncheckedCreateWithoutRoundInput> | TournamentMatchCreateWithoutRoundInput[] | TournamentMatchUncheckedCreateWithoutRoundInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutRoundInput | TournamentMatchCreateOrConnectWithoutRoundInput[]
    upsert?: TournamentMatchUpsertWithWhereUniqueWithoutRoundInput | TournamentMatchUpsertWithWhereUniqueWithoutRoundInput[]
    createMany?: TournamentMatchCreateManyRoundInputEnvelope
    set?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    disconnect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    delete?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    update?: TournamentMatchUpdateWithWhereUniqueWithoutRoundInput | TournamentMatchUpdateWithWhereUniqueWithoutRoundInput[]
    updateMany?: TournamentMatchUpdateManyWithWhereWithoutRoundInput | TournamentMatchUpdateManyWithWhereWithoutRoundInput[]
    deleteMany?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
  }

  export type TournamentMatchUncheckedUpdateManyWithoutRoundNestedInput = {
    create?: XOR<TournamentMatchCreateWithoutRoundInput, TournamentMatchUncheckedCreateWithoutRoundInput> | TournamentMatchCreateWithoutRoundInput[] | TournamentMatchUncheckedCreateWithoutRoundInput[]
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutRoundInput | TournamentMatchCreateOrConnectWithoutRoundInput[]
    upsert?: TournamentMatchUpsertWithWhereUniqueWithoutRoundInput | TournamentMatchUpsertWithWhereUniqueWithoutRoundInput[]
    createMany?: TournamentMatchCreateManyRoundInputEnvelope
    set?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    disconnect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    delete?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    connect?: TournamentMatchWhereUniqueInput | TournamentMatchWhereUniqueInput[]
    update?: TournamentMatchUpdateWithWhereUniqueWithoutRoundInput | TournamentMatchUpdateWithWhereUniqueWithoutRoundInput[]
    updateMany?: TournamentMatchUpdateManyWithWhereWithoutRoundInput | TournamentMatchUpdateManyWithWhereWithoutRoundInput[]
    deleteMany?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
  }

  export type TournamentCreateNestedOneWithoutMatchesInput = {
    create?: XOR<TournamentCreateWithoutMatchesInput, TournamentUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutMatchesInput
    connect?: TournamentWhereUniqueInput
  }

  export type TournamentRoundCreateNestedOneWithoutMatchesInput = {
    create?: XOR<TournamentRoundCreateWithoutMatchesInput, TournamentRoundUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: TournamentRoundCreateOrConnectWithoutMatchesInput
    connect?: TournamentRoundWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTournamentMatchesPlayer1Input = {
    create?: XOR<UserCreateWithoutTournamentMatchesPlayer1Input, UserUncheckedCreateWithoutTournamentMatchesPlayer1Input>
    connectOrCreate?: UserCreateOrConnectWithoutTournamentMatchesPlayer1Input
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTournamentMatchesPlayer2Input = {
    create?: XOR<UserCreateWithoutTournamentMatchesPlayer2Input, UserUncheckedCreateWithoutTournamentMatchesPlayer2Input>
    connectOrCreate?: UserCreateOrConnectWithoutTournamentMatchesPlayer2Input
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTournamentMatchWinsInput = {
    create?: XOR<UserCreateWithoutTournamentMatchWinsInput, UserUncheckedCreateWithoutTournamentMatchWinsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTournamentMatchWinsInput
    connect?: UserWhereUniqueInput
  }

  export type MatchResultCreateNestedManyWithoutMatchInput = {
    create?: XOR<MatchResultCreateWithoutMatchInput, MatchResultUncheckedCreateWithoutMatchInput> | MatchResultCreateWithoutMatchInput[] | MatchResultUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchResultCreateOrConnectWithoutMatchInput | MatchResultCreateOrConnectWithoutMatchInput[]
    createMany?: MatchResultCreateManyMatchInputEnvelope
    connect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
  }

  export type MatchResultUncheckedCreateNestedManyWithoutMatchInput = {
    create?: XOR<MatchResultCreateWithoutMatchInput, MatchResultUncheckedCreateWithoutMatchInput> | MatchResultCreateWithoutMatchInput[] | MatchResultUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchResultCreateOrConnectWithoutMatchInput | MatchResultCreateOrConnectWithoutMatchInput[]
    createMany?: MatchResultCreateManyMatchInputEnvelope
    connect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
  }

  export type TournamentUpdateOneRequiredWithoutMatchesNestedInput = {
    create?: XOR<TournamentCreateWithoutMatchesInput, TournamentUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutMatchesInput
    upsert?: TournamentUpsertWithoutMatchesInput
    connect?: TournamentWhereUniqueInput
    update?: XOR<XOR<TournamentUpdateToOneWithWhereWithoutMatchesInput, TournamentUpdateWithoutMatchesInput>, TournamentUncheckedUpdateWithoutMatchesInput>
  }

  export type TournamentRoundUpdateOneRequiredWithoutMatchesNestedInput = {
    create?: XOR<TournamentRoundCreateWithoutMatchesInput, TournamentRoundUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: TournamentRoundCreateOrConnectWithoutMatchesInput
    upsert?: TournamentRoundUpsertWithoutMatchesInput
    connect?: TournamentRoundWhereUniqueInput
    update?: XOR<XOR<TournamentRoundUpdateToOneWithWhereWithoutMatchesInput, TournamentRoundUpdateWithoutMatchesInput>, TournamentRoundUncheckedUpdateWithoutMatchesInput>
  }

  export type UserUpdateOneWithoutTournamentMatchesPlayer1NestedInput = {
    create?: XOR<UserCreateWithoutTournamentMatchesPlayer1Input, UserUncheckedCreateWithoutTournamentMatchesPlayer1Input>
    connectOrCreate?: UserCreateOrConnectWithoutTournamentMatchesPlayer1Input
    upsert?: UserUpsertWithoutTournamentMatchesPlayer1Input
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTournamentMatchesPlayer1Input, UserUpdateWithoutTournamentMatchesPlayer1Input>, UserUncheckedUpdateWithoutTournamentMatchesPlayer1Input>
  }

  export type UserUpdateOneWithoutTournamentMatchesPlayer2NestedInput = {
    create?: XOR<UserCreateWithoutTournamentMatchesPlayer2Input, UserUncheckedCreateWithoutTournamentMatchesPlayer2Input>
    connectOrCreate?: UserCreateOrConnectWithoutTournamentMatchesPlayer2Input
    upsert?: UserUpsertWithoutTournamentMatchesPlayer2Input
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTournamentMatchesPlayer2Input, UserUpdateWithoutTournamentMatchesPlayer2Input>, UserUncheckedUpdateWithoutTournamentMatchesPlayer2Input>
  }

  export type UserUpdateOneWithoutTournamentMatchWinsNestedInput = {
    create?: XOR<UserCreateWithoutTournamentMatchWinsInput, UserUncheckedCreateWithoutTournamentMatchWinsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTournamentMatchWinsInput
    upsert?: UserUpsertWithoutTournamentMatchWinsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTournamentMatchWinsInput, UserUpdateWithoutTournamentMatchWinsInput>, UserUncheckedUpdateWithoutTournamentMatchWinsInput>
  }

  export type MatchResultUpdateManyWithoutMatchNestedInput = {
    create?: XOR<MatchResultCreateWithoutMatchInput, MatchResultUncheckedCreateWithoutMatchInput> | MatchResultCreateWithoutMatchInput[] | MatchResultUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchResultCreateOrConnectWithoutMatchInput | MatchResultCreateOrConnectWithoutMatchInput[]
    upsert?: MatchResultUpsertWithWhereUniqueWithoutMatchInput | MatchResultUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: MatchResultCreateManyMatchInputEnvelope
    set?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    disconnect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    delete?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    connect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    update?: MatchResultUpdateWithWhereUniqueWithoutMatchInput | MatchResultUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: MatchResultUpdateManyWithWhereWithoutMatchInput | MatchResultUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: MatchResultScalarWhereInput | MatchResultScalarWhereInput[]
  }

  export type MatchResultUncheckedUpdateManyWithoutMatchNestedInput = {
    create?: XOR<MatchResultCreateWithoutMatchInput, MatchResultUncheckedCreateWithoutMatchInput> | MatchResultCreateWithoutMatchInput[] | MatchResultUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchResultCreateOrConnectWithoutMatchInput | MatchResultCreateOrConnectWithoutMatchInput[]
    upsert?: MatchResultUpsertWithWhereUniqueWithoutMatchInput | MatchResultUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: MatchResultCreateManyMatchInputEnvelope
    set?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    disconnect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    delete?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    connect?: MatchResultWhereUniqueInput | MatchResultWhereUniqueInput[]
    update?: MatchResultUpdateWithWhereUniqueWithoutMatchInput | MatchResultUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: MatchResultUpdateManyWithWhereWithoutMatchInput | MatchResultUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: MatchResultScalarWhereInput | MatchResultScalarWhereInput[]
  }

  export type TournamentMatchCreateNestedOneWithoutResultsInput = {
    create?: XOR<TournamentMatchCreateWithoutResultsInput, TournamentMatchUncheckedCreateWithoutResultsInput>
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutResultsInput
    connect?: TournamentMatchWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMatchResultsWinsInput = {
    create?: XOR<UserCreateWithoutMatchResultsWinsInput, UserUncheckedCreateWithoutMatchResultsWinsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchResultsWinsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMatchResultsLossesInput = {
    create?: XOR<UserCreateWithoutMatchResultsLossesInput, UserUncheckedCreateWithoutMatchResultsLossesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchResultsLossesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMatchResultsReportedInput = {
    create?: XOR<UserCreateWithoutMatchResultsReportedInput, UserUncheckedCreateWithoutMatchResultsReportedInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchResultsReportedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMatchResultsVerifiedInput = {
    create?: XOR<UserCreateWithoutMatchResultsVerifiedInput, UserUncheckedCreateWithoutMatchResultsVerifiedInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchResultsVerifiedInput
    connect?: UserWhereUniqueInput
  }

  export type TournamentMatchUpdateOneRequiredWithoutResultsNestedInput = {
    create?: XOR<TournamentMatchCreateWithoutResultsInput, TournamentMatchUncheckedCreateWithoutResultsInput>
    connectOrCreate?: TournamentMatchCreateOrConnectWithoutResultsInput
    upsert?: TournamentMatchUpsertWithoutResultsInput
    connect?: TournamentMatchWhereUniqueInput
    update?: XOR<XOR<TournamentMatchUpdateToOneWithWhereWithoutResultsInput, TournamentMatchUpdateWithoutResultsInput>, TournamentMatchUncheckedUpdateWithoutResultsInput>
  }

  export type UserUpdateOneRequiredWithoutMatchResultsWinsNestedInput = {
    create?: XOR<UserCreateWithoutMatchResultsWinsInput, UserUncheckedCreateWithoutMatchResultsWinsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchResultsWinsInput
    upsert?: UserUpsertWithoutMatchResultsWinsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMatchResultsWinsInput, UserUpdateWithoutMatchResultsWinsInput>, UserUncheckedUpdateWithoutMatchResultsWinsInput>
  }

  export type UserUpdateOneWithoutMatchResultsLossesNestedInput = {
    create?: XOR<UserCreateWithoutMatchResultsLossesInput, UserUncheckedCreateWithoutMatchResultsLossesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchResultsLossesInput
    upsert?: UserUpsertWithoutMatchResultsLossesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMatchResultsLossesInput, UserUpdateWithoutMatchResultsLossesInput>, UserUncheckedUpdateWithoutMatchResultsLossesInput>
  }

  export type UserUpdateOneRequiredWithoutMatchResultsReportedNestedInput = {
    create?: XOR<UserCreateWithoutMatchResultsReportedInput, UserUncheckedCreateWithoutMatchResultsReportedInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchResultsReportedInput
    upsert?: UserUpsertWithoutMatchResultsReportedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMatchResultsReportedInput, UserUpdateWithoutMatchResultsReportedInput>, UserUncheckedUpdateWithoutMatchResultsReportedInput>
  }

  export type UserUpdateOneWithoutMatchResultsVerifiedNestedInput = {
    create?: XOR<UserCreateWithoutMatchResultsVerifiedInput, UserUncheckedCreateWithoutMatchResultsVerifiedInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchResultsVerifiedInput
    upsert?: UserUpsertWithoutMatchResultsVerifiedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMatchResultsVerifiedInput, UserUpdateWithoutMatchResultsVerifiedInput>, UserUncheckedUpdateWithoutMatchResultsVerifiedInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutSentMessagesInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedMessagesInput = {
    create?: XOR<UserCreateWithoutReceivedMessagesInput, UserUncheckedCreateWithoutReceivedMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSentMessagesNestedInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    upsert?: UserUpsertWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentMessagesInput, UserUpdateWithoutSentMessagesInput>, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserUpdateOneRequiredWithoutReceivedMessagesNestedInput = {
    create?: XOR<UserCreateWithoutReceivedMessagesInput, UserUncheckedCreateWithoutReceivedMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedMessagesInput
    upsert?: UserUpsertWithoutReceivedMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedMessagesInput, UserUpdateWithoutReceivedMessagesInput>, UserUncheckedUpdateWithoutReceivedMessagesInput>
  }

  export type UserCreateNestedOneWithoutHostedGameSessionsInput = {
    create?: XOR<UserCreateWithoutHostedGameSessionsInput, UserUncheckedCreateWithoutHostedGameSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutHostedGameSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCoHostedGameSessionsInput = {
    create?: XOR<UserCreateWithoutCoHostedGameSessionsInput, UserUncheckedCreateWithoutCoHostedGameSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCoHostedGameSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutHostedGameSessionsNestedInput = {
    create?: XOR<UserCreateWithoutHostedGameSessionsInput, UserUncheckedCreateWithoutHostedGameSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutHostedGameSessionsInput
    upsert?: UserUpsertWithoutHostedGameSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHostedGameSessionsInput, UserUpdateWithoutHostedGameSessionsInput>, UserUncheckedUpdateWithoutHostedGameSessionsInput>
  }

  export type UserUpdateOneWithoutCoHostedGameSessionsNestedInput = {
    create?: XOR<UserCreateWithoutCoHostedGameSessionsInput, UserUncheckedCreateWithoutCoHostedGameSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCoHostedGameSessionsInput
    upsert?: UserUpsertWithoutCoHostedGameSessionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCoHostedGameSessionsInput, UserUpdateWithoutCoHostedGameSessionsInput>, UserUncheckedUpdateWithoutCoHostedGameSessionsInput>
  }

  export type UserCreateNestedOneWithoutSocialLinksInput = {
    create?: XOR<UserCreateWithoutSocialLinksInput, UserUncheckedCreateWithoutSocialLinksInput>
    connectOrCreate?: UserCreateOrConnectWithoutSocialLinksInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSocialLinksNestedInput = {
    create?: XOR<UserCreateWithoutSocialLinksInput, UserUncheckedCreateWithoutSocialLinksInput>
    connectOrCreate?: UserCreateOrConnectWithoutSocialLinksInput
    upsert?: UserUpsertWithoutSocialLinksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSocialLinksInput, UserUpdateWithoutSocialLinksInput>, UserUncheckedUpdateWithoutSocialLinksInput>
  }

  export type UserCreateNestedOneWithoutGamingProfilesInput = {
    create?: XOR<UserCreateWithoutGamingProfilesInput, UserUncheckedCreateWithoutGamingProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutGamingProfilesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutGamingProfilesNestedInput = {
    create?: XOR<UserCreateWithoutGamingProfilesInput, UserUncheckedCreateWithoutGamingProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutGamingProfilesInput
    upsert?: UserUpsertWithoutGamingProfilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGamingProfilesInput, UserUpdateWithoutGamingProfilesInput>, UserUncheckedUpdateWithoutGamingProfilesInput>
  }

  export type UserCreateNestedOneWithoutSentFriendRequestsInput = {
    create?: XOR<UserCreateWithoutSentFriendRequestsInput, UserUncheckedCreateWithoutSentFriendRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentFriendRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedFriendRequestsInput = {
    create?: XOR<UserCreateWithoutReceivedFriendRequestsInput, UserUncheckedCreateWithoutReceivedFriendRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedFriendRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSentFriendRequestsNestedInput = {
    create?: XOR<UserCreateWithoutSentFriendRequestsInput, UserUncheckedCreateWithoutSentFriendRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentFriendRequestsInput
    upsert?: UserUpsertWithoutSentFriendRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentFriendRequestsInput, UserUpdateWithoutSentFriendRequestsInput>, UserUncheckedUpdateWithoutSentFriendRequestsInput>
  }

  export type UserUpdateOneRequiredWithoutReceivedFriendRequestsNestedInput = {
    create?: XOR<UserCreateWithoutReceivedFriendRequestsInput, UserUncheckedCreateWithoutReceivedFriendRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedFriendRequestsInput
    upsert?: UserUpsertWithoutReceivedFriendRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedFriendRequestsInput, UserUpdateWithoutReceivedFriendRequestsInput>, UserUncheckedUpdateWithoutReceivedFriendRequestsInput>
  }

  export type UserCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutActivitiesNestedInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    upsert?: UserUpsertWithoutActivitiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivitiesInput, UserUpdateWithoutActivitiesInput>, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type UserCreateNestedOneWithoutSettingsInput = {
    create?: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSettingsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSettingsNestedInput = {
    create?: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSettingsInput
    upsert?: UserUpsertWithoutSettingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSettingsInput, UserUpdateWithoutSettingsInput>, UserUncheckedUpdateWithoutSettingsInput>
  }

  export type UserCreateNestedOneWithoutMatchmakingPreferencesInput = {
    create?: XOR<UserCreateWithoutMatchmakingPreferencesInput, UserUncheckedCreateWithoutMatchmakingPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchmakingPreferencesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMatchmakingPreferencesNestedInput = {
    create?: XOR<UserCreateWithoutMatchmakingPreferencesInput, UserUncheckedCreateWithoutMatchmakingPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchmakingPreferencesInput
    upsert?: UserUpsertWithoutMatchmakingPreferencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMatchmakingPreferencesInput, UserUpdateWithoutMatchmakingPreferencesInput>, UserUncheckedUpdateWithoutMatchmakingPreferencesInput>
  }

  export type UserCreateNestedOneWithoutForumPostsInput = {
    create?: XOR<UserCreateWithoutForumPostsInput, UserUncheckedCreateWithoutForumPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutForumPostsInput
    connect?: UserWhereUniqueInput
  }

  export type CommunityCreateNestedOneWithoutForumPostsInput = {
    create?: XOR<CommunityCreateWithoutForumPostsInput, CommunityUncheckedCreateWithoutForumPostsInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutForumPostsInput
    connect?: CommunityWhereUniqueInput
  }

  export type ForumReplyCreateNestedManyWithoutPostInput = {
    create?: XOR<ForumReplyCreateWithoutPostInput, ForumReplyUncheckedCreateWithoutPostInput> | ForumReplyCreateWithoutPostInput[] | ForumReplyUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumReplyCreateOrConnectWithoutPostInput | ForumReplyCreateOrConnectWithoutPostInput[]
    createMany?: ForumReplyCreateManyPostInputEnvelope
    connect?: ForumReplyWhereUniqueInput | ForumReplyWhereUniqueInput[]
  }

  export type ForumPostLikeCreateNestedManyWithoutPostInput = {
    create?: XOR<ForumPostLikeCreateWithoutPostInput, ForumPostLikeUncheckedCreateWithoutPostInput> | ForumPostLikeCreateWithoutPostInput[] | ForumPostLikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumPostLikeCreateOrConnectWithoutPostInput | ForumPostLikeCreateOrConnectWithoutPostInput[]
    createMany?: ForumPostLikeCreateManyPostInputEnvelope
    connect?: ForumPostLikeWhereUniqueInput | ForumPostLikeWhereUniqueInput[]
  }

  export type ForumReplyUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<ForumReplyCreateWithoutPostInput, ForumReplyUncheckedCreateWithoutPostInput> | ForumReplyCreateWithoutPostInput[] | ForumReplyUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumReplyCreateOrConnectWithoutPostInput | ForumReplyCreateOrConnectWithoutPostInput[]
    createMany?: ForumReplyCreateManyPostInputEnvelope
    connect?: ForumReplyWhereUniqueInput | ForumReplyWhereUniqueInput[]
  }

  export type ForumPostLikeUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<ForumPostLikeCreateWithoutPostInput, ForumPostLikeUncheckedCreateWithoutPostInput> | ForumPostLikeCreateWithoutPostInput[] | ForumPostLikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumPostLikeCreateOrConnectWithoutPostInput | ForumPostLikeCreateOrConnectWithoutPostInput[]
    createMany?: ForumPostLikeCreateManyPostInputEnvelope
    connect?: ForumPostLikeWhereUniqueInput | ForumPostLikeWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutForumPostsNestedInput = {
    create?: XOR<UserCreateWithoutForumPostsInput, UserUncheckedCreateWithoutForumPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutForumPostsInput
    upsert?: UserUpsertWithoutForumPostsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutForumPostsInput, UserUpdateWithoutForumPostsInput>, UserUncheckedUpdateWithoutForumPostsInput>
  }

  export type CommunityUpdateOneRequiredWithoutForumPostsNestedInput = {
    create?: XOR<CommunityCreateWithoutForumPostsInput, CommunityUncheckedCreateWithoutForumPostsInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutForumPostsInput
    upsert?: CommunityUpsertWithoutForumPostsInput
    connect?: CommunityWhereUniqueInput
    update?: XOR<XOR<CommunityUpdateToOneWithWhereWithoutForumPostsInput, CommunityUpdateWithoutForumPostsInput>, CommunityUncheckedUpdateWithoutForumPostsInput>
  }

  export type ForumReplyUpdateManyWithoutPostNestedInput = {
    create?: XOR<ForumReplyCreateWithoutPostInput, ForumReplyUncheckedCreateWithoutPostInput> | ForumReplyCreateWithoutPostInput[] | ForumReplyUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumReplyCreateOrConnectWithoutPostInput | ForumReplyCreateOrConnectWithoutPostInput[]
    upsert?: ForumReplyUpsertWithWhereUniqueWithoutPostInput | ForumReplyUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ForumReplyCreateManyPostInputEnvelope
    set?: ForumReplyWhereUniqueInput | ForumReplyWhereUniqueInput[]
    disconnect?: ForumReplyWhereUniqueInput | ForumReplyWhereUniqueInput[]
    delete?: ForumReplyWhereUniqueInput | ForumReplyWhereUniqueInput[]
    connect?: ForumReplyWhereUniqueInput | ForumReplyWhereUniqueInput[]
    update?: ForumReplyUpdateWithWhereUniqueWithoutPostInput | ForumReplyUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ForumReplyUpdateManyWithWhereWithoutPostInput | ForumReplyUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ForumReplyScalarWhereInput | ForumReplyScalarWhereInput[]
  }

  export type ForumPostLikeUpdateManyWithoutPostNestedInput = {
    create?: XOR<ForumPostLikeCreateWithoutPostInput, ForumPostLikeUncheckedCreateWithoutPostInput> | ForumPostLikeCreateWithoutPostInput[] | ForumPostLikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumPostLikeCreateOrConnectWithoutPostInput | ForumPostLikeCreateOrConnectWithoutPostInput[]
    upsert?: ForumPostLikeUpsertWithWhereUniqueWithoutPostInput | ForumPostLikeUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ForumPostLikeCreateManyPostInputEnvelope
    set?: ForumPostLikeWhereUniqueInput | ForumPostLikeWhereUniqueInput[]
    disconnect?: ForumPostLikeWhereUniqueInput | ForumPostLikeWhereUniqueInput[]
    delete?: ForumPostLikeWhereUniqueInput | ForumPostLikeWhereUniqueInput[]
    connect?: ForumPostLikeWhereUniqueInput | ForumPostLikeWhereUniqueInput[]
    update?: ForumPostLikeUpdateWithWhereUniqueWithoutPostInput | ForumPostLikeUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ForumPostLikeUpdateManyWithWhereWithoutPostInput | ForumPostLikeUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ForumPostLikeScalarWhereInput | ForumPostLikeScalarWhereInput[]
  }

  export type ForumReplyUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<ForumReplyCreateWithoutPostInput, ForumReplyUncheckedCreateWithoutPostInput> | ForumReplyCreateWithoutPostInput[] | ForumReplyUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumReplyCreateOrConnectWithoutPostInput | ForumReplyCreateOrConnectWithoutPostInput[]
    upsert?: ForumReplyUpsertWithWhereUniqueWithoutPostInput | ForumReplyUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ForumReplyCreateManyPostInputEnvelope
    set?: ForumReplyWhereUniqueInput | ForumReplyWhereUniqueInput[]
    disconnect?: ForumReplyWhereUniqueInput | ForumReplyWhereUniqueInput[]
    delete?: ForumReplyWhereUniqueInput | ForumReplyWhereUniqueInput[]
    connect?: ForumReplyWhereUniqueInput | ForumReplyWhereUniqueInput[]
    update?: ForumReplyUpdateWithWhereUniqueWithoutPostInput | ForumReplyUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ForumReplyUpdateManyWithWhereWithoutPostInput | ForumReplyUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ForumReplyScalarWhereInput | ForumReplyScalarWhereInput[]
  }

  export type ForumPostLikeUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<ForumPostLikeCreateWithoutPostInput, ForumPostLikeUncheckedCreateWithoutPostInput> | ForumPostLikeCreateWithoutPostInput[] | ForumPostLikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ForumPostLikeCreateOrConnectWithoutPostInput | ForumPostLikeCreateOrConnectWithoutPostInput[]
    upsert?: ForumPostLikeUpsertWithWhereUniqueWithoutPostInput | ForumPostLikeUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ForumPostLikeCreateManyPostInputEnvelope
    set?: ForumPostLikeWhereUniqueInput | ForumPostLikeWhereUniqueInput[]
    disconnect?: ForumPostLikeWhereUniqueInput | ForumPostLikeWhereUniqueInput[]
    delete?: ForumPostLikeWhereUniqueInput | ForumPostLikeWhereUniqueInput[]
    connect?: ForumPostLikeWhereUniqueInput | ForumPostLikeWhereUniqueInput[]
    update?: ForumPostLikeUpdateWithWhereUniqueWithoutPostInput | ForumPostLikeUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ForumPostLikeUpdateManyWithWhereWithoutPostInput | ForumPostLikeUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ForumPostLikeScalarWhereInput | ForumPostLikeScalarWhereInput[]
  }

  export type ForumPostCreateNestedOneWithoutRepliesInput = {
    create?: XOR<ForumPostCreateWithoutRepliesInput, ForumPostUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: ForumPostCreateOrConnectWithoutRepliesInput
    connect?: ForumPostWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutForumRepliesInput = {
    create?: XOR<UserCreateWithoutForumRepliesInput, UserUncheckedCreateWithoutForumRepliesInput>
    connectOrCreate?: UserCreateOrConnectWithoutForumRepliesInput
    connect?: UserWhereUniqueInput
  }

  export type ForumReplyLikeCreateNestedManyWithoutReplyInput = {
    create?: XOR<ForumReplyLikeCreateWithoutReplyInput, ForumReplyLikeUncheckedCreateWithoutReplyInput> | ForumReplyLikeCreateWithoutReplyInput[] | ForumReplyLikeUncheckedCreateWithoutReplyInput[]
    connectOrCreate?: ForumReplyLikeCreateOrConnectWithoutReplyInput | ForumReplyLikeCreateOrConnectWithoutReplyInput[]
    createMany?: ForumReplyLikeCreateManyReplyInputEnvelope
    connect?: ForumReplyLikeWhereUniqueInput | ForumReplyLikeWhereUniqueInput[]
  }

  export type ForumReplyLikeUncheckedCreateNestedManyWithoutReplyInput = {
    create?: XOR<ForumReplyLikeCreateWithoutReplyInput, ForumReplyLikeUncheckedCreateWithoutReplyInput> | ForumReplyLikeCreateWithoutReplyInput[] | ForumReplyLikeUncheckedCreateWithoutReplyInput[]
    connectOrCreate?: ForumReplyLikeCreateOrConnectWithoutReplyInput | ForumReplyLikeCreateOrConnectWithoutReplyInput[]
    createMany?: ForumReplyLikeCreateManyReplyInputEnvelope
    connect?: ForumReplyLikeWhereUniqueInput | ForumReplyLikeWhereUniqueInput[]
  }

  export type ForumPostUpdateOneRequiredWithoutRepliesNestedInput = {
    create?: XOR<ForumPostCreateWithoutRepliesInput, ForumPostUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: ForumPostCreateOrConnectWithoutRepliesInput
    upsert?: ForumPostUpsertWithoutRepliesInput
    connect?: ForumPostWhereUniqueInput
    update?: XOR<XOR<ForumPostUpdateToOneWithWhereWithoutRepliesInput, ForumPostUpdateWithoutRepliesInput>, ForumPostUncheckedUpdateWithoutRepliesInput>
  }

  export type UserUpdateOneRequiredWithoutForumRepliesNestedInput = {
    create?: XOR<UserCreateWithoutForumRepliesInput, UserUncheckedCreateWithoutForumRepliesInput>
    connectOrCreate?: UserCreateOrConnectWithoutForumRepliesInput
    upsert?: UserUpsertWithoutForumRepliesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutForumRepliesInput, UserUpdateWithoutForumRepliesInput>, UserUncheckedUpdateWithoutForumRepliesInput>
  }

  export type ForumReplyLikeUpdateManyWithoutReplyNestedInput = {
    create?: XOR<ForumReplyLikeCreateWithoutReplyInput, ForumReplyLikeUncheckedCreateWithoutReplyInput> | ForumReplyLikeCreateWithoutReplyInput[] | ForumReplyLikeUncheckedCreateWithoutReplyInput[]
    connectOrCreate?: ForumReplyLikeCreateOrConnectWithoutReplyInput | ForumReplyLikeCreateOrConnectWithoutReplyInput[]
    upsert?: ForumReplyLikeUpsertWithWhereUniqueWithoutReplyInput | ForumReplyLikeUpsertWithWhereUniqueWithoutReplyInput[]
    createMany?: ForumReplyLikeCreateManyReplyInputEnvelope
    set?: ForumReplyLikeWhereUniqueInput | ForumReplyLikeWhereUniqueInput[]
    disconnect?: ForumReplyLikeWhereUniqueInput | ForumReplyLikeWhereUniqueInput[]
    delete?: ForumReplyLikeWhereUniqueInput | ForumReplyLikeWhereUniqueInput[]
    connect?: ForumReplyLikeWhereUniqueInput | ForumReplyLikeWhereUniqueInput[]
    update?: ForumReplyLikeUpdateWithWhereUniqueWithoutReplyInput | ForumReplyLikeUpdateWithWhereUniqueWithoutReplyInput[]
    updateMany?: ForumReplyLikeUpdateManyWithWhereWithoutReplyInput | ForumReplyLikeUpdateManyWithWhereWithoutReplyInput[]
    deleteMany?: ForumReplyLikeScalarWhereInput | ForumReplyLikeScalarWhereInput[]
  }

  export type ForumReplyLikeUncheckedUpdateManyWithoutReplyNestedInput = {
    create?: XOR<ForumReplyLikeCreateWithoutReplyInput, ForumReplyLikeUncheckedCreateWithoutReplyInput> | ForumReplyLikeCreateWithoutReplyInput[] | ForumReplyLikeUncheckedCreateWithoutReplyInput[]
    connectOrCreate?: ForumReplyLikeCreateOrConnectWithoutReplyInput | ForumReplyLikeCreateOrConnectWithoutReplyInput[]
    upsert?: ForumReplyLikeUpsertWithWhereUniqueWithoutReplyInput | ForumReplyLikeUpsertWithWhereUniqueWithoutReplyInput[]
    createMany?: ForumReplyLikeCreateManyReplyInputEnvelope
    set?: ForumReplyLikeWhereUniqueInput | ForumReplyLikeWhereUniqueInput[]
    disconnect?: ForumReplyLikeWhereUniqueInput | ForumReplyLikeWhereUniqueInput[]
    delete?: ForumReplyLikeWhereUniqueInput | ForumReplyLikeWhereUniqueInput[]
    connect?: ForumReplyLikeWhereUniqueInput | ForumReplyLikeWhereUniqueInput[]
    update?: ForumReplyLikeUpdateWithWhereUniqueWithoutReplyInput | ForumReplyLikeUpdateWithWhereUniqueWithoutReplyInput[]
    updateMany?: ForumReplyLikeUpdateManyWithWhereWithoutReplyInput | ForumReplyLikeUpdateManyWithWhereWithoutReplyInput[]
    deleteMany?: ForumReplyLikeScalarWhereInput | ForumReplyLikeScalarWhereInput[]
  }

  export type ForumPostCreateNestedOneWithoutLikesInput = {
    create?: XOR<ForumPostCreateWithoutLikesInput, ForumPostUncheckedCreateWithoutLikesInput>
    connectOrCreate?: ForumPostCreateOrConnectWithoutLikesInput
    connect?: ForumPostWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutForumPostLikesInput = {
    create?: XOR<UserCreateWithoutForumPostLikesInput, UserUncheckedCreateWithoutForumPostLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutForumPostLikesInput
    connect?: UserWhereUniqueInput
  }

  export type ForumPostUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<ForumPostCreateWithoutLikesInput, ForumPostUncheckedCreateWithoutLikesInput>
    connectOrCreate?: ForumPostCreateOrConnectWithoutLikesInput
    upsert?: ForumPostUpsertWithoutLikesInput
    connect?: ForumPostWhereUniqueInput
    update?: XOR<XOR<ForumPostUpdateToOneWithWhereWithoutLikesInput, ForumPostUpdateWithoutLikesInput>, ForumPostUncheckedUpdateWithoutLikesInput>
  }

  export type UserUpdateOneRequiredWithoutForumPostLikesNestedInput = {
    create?: XOR<UserCreateWithoutForumPostLikesInput, UserUncheckedCreateWithoutForumPostLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutForumPostLikesInput
    upsert?: UserUpsertWithoutForumPostLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutForumPostLikesInput, UserUpdateWithoutForumPostLikesInput>, UserUncheckedUpdateWithoutForumPostLikesInput>
  }

  export type ForumReplyCreateNestedOneWithoutLikesInput = {
    create?: XOR<ForumReplyCreateWithoutLikesInput, ForumReplyUncheckedCreateWithoutLikesInput>
    connectOrCreate?: ForumReplyCreateOrConnectWithoutLikesInput
    connect?: ForumReplyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutForumReplyLikesInput = {
    create?: XOR<UserCreateWithoutForumReplyLikesInput, UserUncheckedCreateWithoutForumReplyLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutForumReplyLikesInput
    connect?: UserWhereUniqueInput
  }

  export type ForumReplyUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<ForumReplyCreateWithoutLikesInput, ForumReplyUncheckedCreateWithoutLikesInput>
    connectOrCreate?: ForumReplyCreateOrConnectWithoutLikesInput
    upsert?: ForumReplyUpsertWithoutLikesInput
    connect?: ForumReplyWhereUniqueInput
    update?: XOR<XOR<ForumReplyUpdateToOneWithWhereWithoutLikesInput, ForumReplyUpdateWithoutLikesInput>, ForumReplyUncheckedUpdateWithoutLikesInput>
  }

  export type UserUpdateOneRequiredWithoutForumReplyLikesNestedInput = {
    create?: XOR<UserCreateWithoutForumReplyLikesInput, UserUncheckedCreateWithoutForumReplyLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutForumReplyLikesInput
    upsert?: UserUpsertWithoutForumReplyLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutForumReplyLikesInput, UserUpdateWithoutForumReplyLikesInput>, UserUncheckedUpdateWithoutForumReplyLikesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserCommunityCreateWithoutUserInput = {
    id?: string
    isPrimary?: boolean
    joinedAt?: Date | string
    community: CommunityCreateNestedOneWithoutUserCommunitiesInput
  }

  export type UserCommunityUncheckedCreateWithoutUserInput = {
    id?: string
    communityId: string
    isPrimary?: boolean
    joinedAt?: Date | string
  }

  export type UserCommunityCreateOrConnectWithoutUserInput = {
    where: UserCommunityWhereUniqueInput
    create: XOR<UserCommunityCreateWithoutUserInput, UserCommunityUncheckedCreateWithoutUserInput>
  }

  export type UserCommunityCreateManyUserInputEnvelope = {
    data: UserCommunityCreateManyUserInput | UserCommunityCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ThemePreferenceCreateWithoutUserInput = {
    id?: string
    themeMode?: string
    customColors?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
    community?: CommunityCreateNestedOneWithoutThemePreferencesInput
  }

  export type ThemePreferenceUncheckedCreateWithoutUserInput = {
    id?: string
    communityId?: string | null
    themeMode?: string
    customColors?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
  }

  export type ThemePreferenceCreateOrConnectWithoutUserInput = {
    where: ThemePreferenceWhereUniqueInput
    create: XOR<ThemePreferenceCreateWithoutUserInput, ThemePreferenceUncheckedCreateWithoutUserInput>
  }

  export type ThemePreferenceCreateManyUserInputEnvelope = {
    data: ThemePreferenceCreateManyUserInput | ThemePreferenceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutCreatorInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    date: string
    time: string
    location: string
    maxAttendees?: number | null
    isPublic?: boolean
    status?: string
    playerSlots?: number
    alternateSlots?: number
    gameFormat?: string | null
    powerLevel?: number | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    recurrenceInterval?: number
    recurrenceEndDate?: string | null
    parentEventId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    community?: CommunityCreateNestedOneWithoutEventsInput
    host: UserCreateNestedOneWithoutHostedEventsInput
    coHost?: UserCreateNestedOneWithoutCoHostedEventsInput
    attendees?: EventAttendeeCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutCreatorInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    date: string
    time: string
    location: string
    communityId?: string | null
    hostId: string
    coHostId?: string | null
    maxAttendees?: number | null
    isPublic?: boolean
    status?: string
    playerSlots?: number
    alternateSlots?: number
    gameFormat?: string | null
    powerLevel?: number | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    recurrenceInterval?: number
    recurrenceEndDate?: string | null
    parentEventId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attendees?: EventAttendeeUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutCreatorInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutCreatorInput, EventUncheckedCreateWithoutCreatorInput>
  }

  export type EventCreateManyCreatorInputEnvelope = {
    data: EventCreateManyCreatorInput | EventCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutHostInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    date: string
    time: string
    location: string
    maxAttendees?: number | null
    isPublic?: boolean
    status?: string
    playerSlots?: number
    alternateSlots?: number
    gameFormat?: string | null
    powerLevel?: number | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    recurrenceInterval?: number
    recurrenceEndDate?: string | null
    parentEventId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    community?: CommunityCreateNestedOneWithoutEventsInput
    creator: UserCreateNestedOneWithoutCreatedEventsInput
    coHost?: UserCreateNestedOneWithoutCoHostedEventsInput
    attendees?: EventAttendeeCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutHostInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    date: string
    time: string
    location: string
    communityId?: string | null
    creatorId: string
    coHostId?: string | null
    maxAttendees?: number | null
    isPublic?: boolean
    status?: string
    playerSlots?: number
    alternateSlots?: number
    gameFormat?: string | null
    powerLevel?: number | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    recurrenceInterval?: number
    recurrenceEndDate?: string | null
    parentEventId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attendees?: EventAttendeeUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutHostInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutHostInput, EventUncheckedCreateWithoutHostInput>
  }

  export type EventCreateManyHostInputEnvelope = {
    data: EventCreateManyHostInput | EventCreateManyHostInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutCoHostInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    date: string
    time: string
    location: string
    maxAttendees?: number | null
    isPublic?: boolean
    status?: string
    playerSlots?: number
    alternateSlots?: number
    gameFormat?: string | null
    powerLevel?: number | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    recurrenceInterval?: number
    recurrenceEndDate?: string | null
    parentEventId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    community?: CommunityCreateNestedOneWithoutEventsInput
    creator: UserCreateNestedOneWithoutCreatedEventsInput
    host: UserCreateNestedOneWithoutHostedEventsInput
    attendees?: EventAttendeeCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutCoHostInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    date: string
    time: string
    location: string
    communityId?: string | null
    creatorId: string
    hostId: string
    maxAttendees?: number | null
    isPublic?: boolean
    status?: string
    playerSlots?: number
    alternateSlots?: number
    gameFormat?: string | null
    powerLevel?: number | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    recurrenceInterval?: number
    recurrenceEndDate?: string | null
    parentEventId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attendees?: EventAttendeeUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutCoHostInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutCoHostInput, EventUncheckedCreateWithoutCoHostInput>
  }

  export type EventCreateManyCoHostInputEnvelope = {
    data: EventCreateManyCoHostInput | EventCreateManyCoHostInput[]
    skipDuplicates?: boolean
  }

  export type EventAttendeeCreateWithoutUserInput = {
    id?: string
    status?: string
    role?: string
    playerType?: string
    joinedAt?: Date | string
    event: EventCreateNestedOneWithoutAttendeesInput
  }

  export type EventAttendeeUncheckedCreateWithoutUserInput = {
    id?: string
    eventId: string
    status?: string
    role?: string
    playerType?: string
    joinedAt?: Date | string
  }

  export type EventAttendeeCreateOrConnectWithoutUserInput = {
    where: EventAttendeeWhereUniqueInput
    create: XOR<EventAttendeeCreateWithoutUserInput, EventAttendeeUncheckedCreateWithoutUserInput>
  }

  export type EventAttendeeCreateManyUserInputEnvelope = {
    data: EventAttendeeCreateManyUserInput | EventAttendeeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    type: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    type: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutSenderInput = {
    id?: string
    subject?: string | null
    content: string
    isRead?: boolean
    createdAt?: Date | string
    editedAt?: Date | string | null
    receiver: UserCreateNestedOneWithoutReceivedMessagesInput
  }

  export type MessageUncheckedCreateWithoutSenderInput = {
    id?: string
    receiverId: string
    subject?: string | null
    content: string
    isRead?: boolean
    createdAt?: Date | string
    editedAt?: Date | string | null
  }

  export type MessageCreateOrConnectWithoutSenderInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageCreateManySenderInputEnvelope = {
    data: MessageCreateManySenderInput | MessageCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutReceiverInput = {
    id?: string
    subject?: string | null
    content: string
    isRead?: boolean
    createdAt?: Date | string
    editedAt?: Date | string | null
    sender: UserCreateNestedOneWithoutSentMessagesInput
  }

  export type MessageUncheckedCreateWithoutReceiverInput = {
    id?: string
    senderId: string
    subject?: string | null
    content: string
    isRead?: boolean
    createdAt?: Date | string
    editedAt?: Date | string | null
  }

  export type MessageCreateOrConnectWithoutReceiverInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput>
  }

  export type MessageCreateManyReceiverInputEnvelope = {
    data: MessageCreateManyReceiverInput | MessageCreateManyReceiverInput[]
    skipDuplicates?: boolean
  }

  export type GameSessionCreateWithoutHostInput = {
    id?: string
    name: string
    gameType: string
    maxPlayers?: number
    currentPlayers?: number
    status?: string
    isPrivate?: boolean
    gameRoomUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    coHost?: UserCreateNestedOneWithoutCoHostedGameSessionsInput
  }

  export type GameSessionUncheckedCreateWithoutHostInput = {
    id?: string
    name: string
    gameType: string
    coHostId?: string | null
    maxPlayers?: number
    currentPlayers?: number
    status?: string
    isPrivate?: boolean
    gameRoomUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
  }

  export type GameSessionCreateOrConnectWithoutHostInput = {
    where: GameSessionWhereUniqueInput
    create: XOR<GameSessionCreateWithoutHostInput, GameSessionUncheckedCreateWithoutHostInput>
  }

  export type GameSessionCreateManyHostInputEnvelope = {
    data: GameSessionCreateManyHostInput | GameSessionCreateManyHostInput[]
    skipDuplicates?: boolean
  }

  export type GameSessionCreateWithoutCoHostInput = {
    id?: string
    name: string
    gameType: string
    maxPlayers?: number
    currentPlayers?: number
    status?: string
    isPrivate?: boolean
    gameRoomUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    host: UserCreateNestedOneWithoutHostedGameSessionsInput
  }

  export type GameSessionUncheckedCreateWithoutCoHostInput = {
    id?: string
    name: string
    gameType: string
    hostId: string
    maxPlayers?: number
    currentPlayers?: number
    status?: string
    isPrivate?: boolean
    gameRoomUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
  }

  export type GameSessionCreateOrConnectWithoutCoHostInput = {
    where: GameSessionWhereUniqueInput
    create: XOR<GameSessionCreateWithoutCoHostInput, GameSessionUncheckedCreateWithoutCoHostInput>
  }

  export type GameSessionCreateManyCoHostInputEnvelope = {
    data: GameSessionCreateManyCoHostInput | GameSessionCreateManyCoHostInput[]
    skipDuplicates?: boolean
  }

  export type UserSocialLinkCreateWithoutUserInput = {
    id?: string
    platform: string
    url: string
    username?: string | null
    isPublic?: boolean
    createdAt?: Date | string
  }

  export type UserSocialLinkUncheckedCreateWithoutUserInput = {
    id?: string
    platform: string
    url: string
    username?: string | null
    isPublic?: boolean
    createdAt?: Date | string
  }

  export type UserSocialLinkCreateOrConnectWithoutUserInput = {
    where: UserSocialLinkWhereUniqueInput
    create: XOR<UserSocialLinkCreateWithoutUserInput, UserSocialLinkUncheckedCreateWithoutUserInput>
  }

  export type UserSocialLinkCreateManyUserInputEnvelope = {
    data: UserSocialLinkCreateManyUserInput | UserSocialLinkCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserGamingProfileCreateWithoutUserInput = {
    id?: string
    platform: string
    username: string
    skillLevel?: string | null
    preferredFormats?: NullableJsonNullValueInput | InputJsonValue
    achievementBadges?: NullableJsonNullValueInput | InputJsonValue
    statistics?: NullableJsonNullValueInput | InputJsonValue
    streamingSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserGamingProfileUncheckedCreateWithoutUserInput = {
    id?: string
    platform: string
    username: string
    skillLevel?: string | null
    preferredFormats?: NullableJsonNullValueInput | InputJsonValue
    achievementBadges?: NullableJsonNullValueInput | InputJsonValue
    statistics?: NullableJsonNullValueInput | InputJsonValue
    streamingSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserGamingProfileCreateOrConnectWithoutUserInput = {
    where: UserGamingProfileWhereUniqueInput
    create: XOR<UserGamingProfileCreateWithoutUserInput, UserGamingProfileUncheckedCreateWithoutUserInput>
  }

  export type UserGamingProfileCreateManyUserInputEnvelope = {
    data: UserGamingProfileCreateManyUserInput | UserGamingProfileCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FriendshipCreateWithoutRequesterInput = {
    id?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    receiver: UserCreateNestedOneWithoutReceivedFriendRequestsInput
  }

  export type FriendshipUncheckedCreateWithoutRequesterInput = {
    id?: string
    receiverId: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendshipCreateOrConnectWithoutRequesterInput = {
    where: FriendshipWhereUniqueInput
    create: XOR<FriendshipCreateWithoutRequesterInput, FriendshipUncheckedCreateWithoutRequesterInput>
  }

  export type FriendshipCreateManyRequesterInputEnvelope = {
    data: FriendshipCreateManyRequesterInput | FriendshipCreateManyRequesterInput[]
    skipDuplicates?: boolean
  }

  export type FriendshipCreateWithoutReceiverInput = {
    id?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutSentFriendRequestsInput
  }

  export type FriendshipUncheckedCreateWithoutReceiverInput = {
    id?: string
    requesterId: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendshipCreateOrConnectWithoutReceiverInput = {
    where: FriendshipWhereUniqueInput
    create: XOR<FriendshipCreateWithoutReceiverInput, FriendshipUncheckedCreateWithoutReceiverInput>
  }

  export type FriendshipCreateManyReceiverInputEnvelope = {
    data: FriendshipCreateManyReceiverInput | FriendshipCreateManyReceiverInput[]
    skipDuplicates?: boolean
  }

  export type UserActivityCreateWithoutUserInput = {
    id?: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserActivityUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserActivityCreateOrConnectWithoutUserInput = {
    where: UserActivityWhereUniqueInput
    create: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput>
  }

  export type UserActivityCreateManyUserInputEnvelope = {
    data: UserActivityCreateManyUserInput | UserActivityCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserSettingsCreateWithoutUserInput = {
    id?: string
    emailNotifications?: boolean
    pushNotifications?: boolean
    profileVisibility?: string
    showOnlineStatus?: boolean
    allowFriendRequests?: boolean
    allowDirectMessages?: boolean
    language?: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSettingsUncheckedCreateWithoutUserInput = {
    id?: string
    emailNotifications?: boolean
    pushNotifications?: boolean
    profileVisibility?: string
    showOnlineStatus?: boolean
    allowFriendRequests?: boolean
    allowDirectMessages?: boolean
    language?: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSettingsCreateOrConnectWithoutUserInput = {
    where: UserSettingsWhereUniqueInput
    create: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
  }

  export type UserSettingsCreateManyUserInputEnvelope = {
    data: UserSettingsCreateManyUserInput | UserSettingsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MatchmakingPreferenceCreateWithoutUserInput = {
    id?: string
    selectedGames?: JsonNullValueInput | InputJsonValue
    selectedFormats?: JsonNullValueInput | InputJsonValue
    powerLevelMin?: number
    powerLevelMax?: number
    playstyle?: string
    location?: string | null
    onlineOnly?: boolean
    availability?: string
    language?: string
    maxDistance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchmakingPreferenceUncheckedCreateWithoutUserInput = {
    id?: string
    selectedGames?: JsonNullValueInput | InputJsonValue
    selectedFormats?: JsonNullValueInput | InputJsonValue
    powerLevelMin?: number
    powerLevelMax?: number
    playstyle?: string
    location?: string | null
    onlineOnly?: boolean
    availability?: string
    language?: string
    maxDistance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchmakingPreferenceCreateOrConnectWithoutUserInput = {
    where: MatchmakingPreferenceWhereUniqueInput
    create: XOR<MatchmakingPreferenceCreateWithoutUserInput, MatchmakingPreferenceUncheckedCreateWithoutUserInput>
  }

  export type MatchmakingPreferenceCreateManyUserInputEnvelope = {
    data: MatchmakingPreferenceCreateManyUserInput | MatchmakingPreferenceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TournamentCreateWithoutOrganizerInput = {
    id?: string
    name: string
    description?: string | null
    gameFormat: string
    maxParticipants?: number
    currentParticipants?: number
    status?: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: string | null
    rules?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    community: CommunityCreateNestedOneWithoutTournamentsInput
    participants?: TournamentParticipantCreateNestedManyWithoutTournamentInput
    rounds?: TournamentRoundCreateNestedManyWithoutTournamentInput
    matches?: TournamentMatchCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUncheckedCreateWithoutOrganizerInput = {
    id?: string
    name: string
    description?: string | null
    gameFormat: string
    communityId: string
    maxParticipants?: number
    currentParticipants?: number
    status?: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: string | null
    rules?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: TournamentParticipantUncheckedCreateNestedManyWithoutTournamentInput
    rounds?: TournamentRoundUncheckedCreateNestedManyWithoutTournamentInput
    matches?: TournamentMatchUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type TournamentCreateOrConnectWithoutOrganizerInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutOrganizerInput, TournamentUncheckedCreateWithoutOrganizerInput>
  }

  export type TournamentCreateManyOrganizerInputEnvelope = {
    data: TournamentCreateManyOrganizerInput | TournamentCreateManyOrganizerInput[]
    skipDuplicates?: boolean
  }

  export type TournamentParticipantCreateWithoutUserInput = {
    id?: string
    seed?: number | null
    status?: string
    joinedAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutParticipantsInput
  }

  export type TournamentParticipantUncheckedCreateWithoutUserInput = {
    id?: string
    tournamentId: string
    seed?: number | null
    status?: string
    joinedAt?: Date | string
  }

  export type TournamentParticipantCreateOrConnectWithoutUserInput = {
    where: TournamentParticipantWhereUniqueInput
    create: XOR<TournamentParticipantCreateWithoutUserInput, TournamentParticipantUncheckedCreateWithoutUserInput>
  }

  export type TournamentParticipantCreateManyUserInputEnvelope = {
    data: TournamentParticipantCreateManyUserInput | TournamentParticipantCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ForumPostCreateWithoutAuthorInput = {
    id?: string
    title: string
    content: string
    category: string
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    likeCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    community: CommunityCreateNestedOneWithoutForumPostsInput
    replies?: ForumReplyCreateNestedManyWithoutPostInput
    likes?: ForumPostLikeCreateNestedManyWithoutPostInput
  }

  export type ForumPostUncheckedCreateWithoutAuthorInput = {
    id?: string
    title: string
    content: string
    communityId: string
    category: string
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    likeCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: ForumReplyUncheckedCreateNestedManyWithoutPostInput
    likes?: ForumPostLikeUncheckedCreateNestedManyWithoutPostInput
  }

  export type ForumPostCreateOrConnectWithoutAuthorInput = {
    where: ForumPostWhereUniqueInput
    create: XOR<ForumPostCreateWithoutAuthorInput, ForumPostUncheckedCreateWithoutAuthorInput>
  }

  export type ForumPostCreateManyAuthorInputEnvelope = {
    data: ForumPostCreateManyAuthorInput | ForumPostCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type ForumReplyCreateWithoutAuthorInput = {
    id?: string
    content: string
    parentReplyId?: string | null
    likeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    post: ForumPostCreateNestedOneWithoutRepliesInput
    likes?: ForumReplyLikeCreateNestedManyWithoutReplyInput
  }

  export type ForumReplyUncheckedCreateWithoutAuthorInput = {
    id?: string
    postId: string
    content: string
    parentReplyId?: string | null
    likeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    likes?: ForumReplyLikeUncheckedCreateNestedManyWithoutReplyInput
  }

  export type ForumReplyCreateOrConnectWithoutAuthorInput = {
    where: ForumReplyWhereUniqueInput
    create: XOR<ForumReplyCreateWithoutAuthorInput, ForumReplyUncheckedCreateWithoutAuthorInput>
  }

  export type ForumReplyCreateManyAuthorInputEnvelope = {
    data: ForumReplyCreateManyAuthorInput | ForumReplyCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type ForumPostLikeCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    post: ForumPostCreateNestedOneWithoutLikesInput
  }

  export type ForumPostLikeUncheckedCreateWithoutUserInput = {
    id?: string
    postId: string
    createdAt?: Date | string
  }

  export type ForumPostLikeCreateOrConnectWithoutUserInput = {
    where: ForumPostLikeWhereUniqueInput
    create: XOR<ForumPostLikeCreateWithoutUserInput, ForumPostLikeUncheckedCreateWithoutUserInput>
  }

  export type ForumPostLikeCreateManyUserInputEnvelope = {
    data: ForumPostLikeCreateManyUserInput | ForumPostLikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ForumReplyLikeCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    reply: ForumReplyCreateNestedOneWithoutLikesInput
  }

  export type ForumReplyLikeUncheckedCreateWithoutUserInput = {
    id?: string
    replyId: string
    createdAt?: Date | string
  }

  export type ForumReplyLikeCreateOrConnectWithoutUserInput = {
    where: ForumReplyLikeWhereUniqueInput
    create: XOR<ForumReplyLikeCreateWithoutUserInput, ForumReplyLikeUncheckedCreateWithoutUserInput>
  }

  export type ForumReplyLikeCreateManyUserInputEnvelope = {
    data: ForumReplyLikeCreateManyUserInput | ForumReplyLikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TournamentMatchCreateWithoutPlayer1Input = {
    id?: string
    status?: string
    gameSessionId?: string | null
    bracketPosition?: number | null
    player1Score?: number
    player2Score?: number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutMatchesInput
    round: TournamentRoundCreateNestedOneWithoutMatchesInput
    player2?: UserCreateNestedOneWithoutTournamentMatchesPlayer2Input
    winner?: UserCreateNestedOneWithoutTournamentMatchWinsInput
    results?: MatchResultCreateNestedManyWithoutMatchInput
  }

  export type TournamentMatchUncheckedCreateWithoutPlayer1Input = {
    id?: string
    tournamentId: string
    roundId: string
    player2Id?: string | null
    winnerId?: string | null
    status?: string
    gameSessionId?: string | null
    bracketPosition?: number | null
    player1Score?: number
    player2Score?: number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    results?: MatchResultUncheckedCreateNestedManyWithoutMatchInput
  }

  export type TournamentMatchCreateOrConnectWithoutPlayer1Input = {
    where: TournamentMatchWhereUniqueInput
    create: XOR<TournamentMatchCreateWithoutPlayer1Input, TournamentMatchUncheckedCreateWithoutPlayer1Input>
  }

  export type TournamentMatchCreateManyPlayer1InputEnvelope = {
    data: TournamentMatchCreateManyPlayer1Input | TournamentMatchCreateManyPlayer1Input[]
    skipDuplicates?: boolean
  }

  export type TournamentMatchCreateWithoutPlayer2Input = {
    id?: string
    status?: string
    gameSessionId?: string | null
    bracketPosition?: number | null
    player1Score?: number
    player2Score?: number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutMatchesInput
    round: TournamentRoundCreateNestedOneWithoutMatchesInput
    player1?: UserCreateNestedOneWithoutTournamentMatchesPlayer1Input
    winner?: UserCreateNestedOneWithoutTournamentMatchWinsInput
    results?: MatchResultCreateNestedManyWithoutMatchInput
  }

  export type TournamentMatchUncheckedCreateWithoutPlayer2Input = {
    id?: string
    tournamentId: string
    roundId: string
    player1Id?: string | null
    winnerId?: string | null
    status?: string
    gameSessionId?: string | null
    bracketPosition?: number | null
    player1Score?: number
    player2Score?: number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    results?: MatchResultUncheckedCreateNestedManyWithoutMatchInput
  }

  export type TournamentMatchCreateOrConnectWithoutPlayer2Input = {
    where: TournamentMatchWhereUniqueInput
    create: XOR<TournamentMatchCreateWithoutPlayer2Input, TournamentMatchUncheckedCreateWithoutPlayer2Input>
  }

  export type TournamentMatchCreateManyPlayer2InputEnvelope = {
    data: TournamentMatchCreateManyPlayer2Input | TournamentMatchCreateManyPlayer2Input[]
    skipDuplicates?: boolean
  }

  export type TournamentMatchCreateWithoutWinnerInput = {
    id?: string
    status?: string
    gameSessionId?: string | null
    bracketPosition?: number | null
    player1Score?: number
    player2Score?: number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutMatchesInput
    round: TournamentRoundCreateNestedOneWithoutMatchesInput
    player1?: UserCreateNestedOneWithoutTournamentMatchesPlayer1Input
    player2?: UserCreateNestedOneWithoutTournamentMatchesPlayer2Input
    results?: MatchResultCreateNestedManyWithoutMatchInput
  }

  export type TournamentMatchUncheckedCreateWithoutWinnerInput = {
    id?: string
    tournamentId: string
    roundId: string
    player1Id?: string | null
    player2Id?: string | null
    status?: string
    gameSessionId?: string | null
    bracketPosition?: number | null
    player1Score?: number
    player2Score?: number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    results?: MatchResultUncheckedCreateNestedManyWithoutMatchInput
  }

  export type TournamentMatchCreateOrConnectWithoutWinnerInput = {
    where: TournamentMatchWhereUniqueInput
    create: XOR<TournamentMatchCreateWithoutWinnerInput, TournamentMatchUncheckedCreateWithoutWinnerInput>
  }

  export type TournamentMatchCreateManyWinnerInputEnvelope = {
    data: TournamentMatchCreateManyWinnerInput | TournamentMatchCreateManyWinnerInput[]
    skipDuplicates?: boolean
  }

  export type MatchResultCreateWithoutWinnerInput = {
    id?: string
    winnerScore: number
    loserScore: number
    gameLength?: number | null
    resultType?: string
    notes?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    match: TournamentMatchCreateNestedOneWithoutResultsInput
    loser?: UserCreateNestedOneWithoutMatchResultsLossesInput
    reportedBy: UserCreateNestedOneWithoutMatchResultsReportedInput
    verifiedBy?: UserCreateNestedOneWithoutMatchResultsVerifiedInput
  }

  export type MatchResultUncheckedCreateWithoutWinnerInput = {
    id?: string
    matchId: string
    loserId?: string | null
    winnerScore: number
    loserScore: number
    gameLength?: number | null
    resultType?: string
    notes?: string | null
    reportedById: string
    verifiedById?: string | null
    isVerified?: boolean
    createdAt?: Date | string
  }

  export type MatchResultCreateOrConnectWithoutWinnerInput = {
    where: MatchResultWhereUniqueInput
    create: XOR<MatchResultCreateWithoutWinnerInput, MatchResultUncheckedCreateWithoutWinnerInput>
  }

  export type MatchResultCreateManyWinnerInputEnvelope = {
    data: MatchResultCreateManyWinnerInput | MatchResultCreateManyWinnerInput[]
    skipDuplicates?: boolean
  }

  export type MatchResultCreateWithoutLoserInput = {
    id?: string
    winnerScore: number
    loserScore: number
    gameLength?: number | null
    resultType?: string
    notes?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    match: TournamentMatchCreateNestedOneWithoutResultsInput
    winner: UserCreateNestedOneWithoutMatchResultsWinsInput
    reportedBy: UserCreateNestedOneWithoutMatchResultsReportedInput
    verifiedBy?: UserCreateNestedOneWithoutMatchResultsVerifiedInput
  }

  export type MatchResultUncheckedCreateWithoutLoserInput = {
    id?: string
    matchId: string
    winnerId: string
    winnerScore: number
    loserScore: number
    gameLength?: number | null
    resultType?: string
    notes?: string | null
    reportedById: string
    verifiedById?: string | null
    isVerified?: boolean
    createdAt?: Date | string
  }

  export type MatchResultCreateOrConnectWithoutLoserInput = {
    where: MatchResultWhereUniqueInput
    create: XOR<MatchResultCreateWithoutLoserInput, MatchResultUncheckedCreateWithoutLoserInput>
  }

  export type MatchResultCreateManyLoserInputEnvelope = {
    data: MatchResultCreateManyLoserInput | MatchResultCreateManyLoserInput[]
    skipDuplicates?: boolean
  }

  export type MatchResultCreateWithoutReportedByInput = {
    id?: string
    winnerScore: number
    loserScore: number
    gameLength?: number | null
    resultType?: string
    notes?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    match: TournamentMatchCreateNestedOneWithoutResultsInput
    winner: UserCreateNestedOneWithoutMatchResultsWinsInput
    loser?: UserCreateNestedOneWithoutMatchResultsLossesInput
    verifiedBy?: UserCreateNestedOneWithoutMatchResultsVerifiedInput
  }

  export type MatchResultUncheckedCreateWithoutReportedByInput = {
    id?: string
    matchId: string
    winnerId: string
    loserId?: string | null
    winnerScore: number
    loserScore: number
    gameLength?: number | null
    resultType?: string
    notes?: string | null
    verifiedById?: string | null
    isVerified?: boolean
    createdAt?: Date | string
  }

  export type MatchResultCreateOrConnectWithoutReportedByInput = {
    where: MatchResultWhereUniqueInput
    create: XOR<MatchResultCreateWithoutReportedByInput, MatchResultUncheckedCreateWithoutReportedByInput>
  }

  export type MatchResultCreateManyReportedByInputEnvelope = {
    data: MatchResultCreateManyReportedByInput | MatchResultCreateManyReportedByInput[]
    skipDuplicates?: boolean
  }

  export type MatchResultCreateWithoutVerifiedByInput = {
    id?: string
    winnerScore: number
    loserScore: number
    gameLength?: number | null
    resultType?: string
    notes?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    match: TournamentMatchCreateNestedOneWithoutResultsInput
    winner: UserCreateNestedOneWithoutMatchResultsWinsInput
    loser?: UserCreateNestedOneWithoutMatchResultsLossesInput
    reportedBy: UserCreateNestedOneWithoutMatchResultsReportedInput
  }

  export type MatchResultUncheckedCreateWithoutVerifiedByInput = {
    id?: string
    matchId: string
    winnerId: string
    loserId?: string | null
    winnerScore: number
    loserScore: number
    gameLength?: number | null
    resultType?: string
    notes?: string | null
    reportedById: string
    isVerified?: boolean
    createdAt?: Date | string
  }

  export type MatchResultCreateOrConnectWithoutVerifiedByInput = {
    where: MatchResultWhereUniqueInput
    create: XOR<MatchResultCreateWithoutVerifiedByInput, MatchResultUncheckedCreateWithoutVerifiedByInput>
  }

  export type MatchResultCreateManyVerifiedByInputEnvelope = {
    data: MatchResultCreateManyVerifiedByInput | MatchResultCreateManyVerifiedByInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type UserCommunityUpsertWithWhereUniqueWithoutUserInput = {
    where: UserCommunityWhereUniqueInput
    update: XOR<UserCommunityUpdateWithoutUserInput, UserCommunityUncheckedUpdateWithoutUserInput>
    create: XOR<UserCommunityCreateWithoutUserInput, UserCommunityUncheckedCreateWithoutUserInput>
  }

  export type UserCommunityUpdateWithWhereUniqueWithoutUserInput = {
    where: UserCommunityWhereUniqueInput
    data: XOR<UserCommunityUpdateWithoutUserInput, UserCommunityUncheckedUpdateWithoutUserInput>
  }

  export type UserCommunityUpdateManyWithWhereWithoutUserInput = {
    where: UserCommunityScalarWhereInput
    data: XOR<UserCommunityUpdateManyMutationInput, UserCommunityUncheckedUpdateManyWithoutUserInput>
  }

  export type UserCommunityScalarWhereInput = {
    AND?: UserCommunityScalarWhereInput | UserCommunityScalarWhereInput[]
    OR?: UserCommunityScalarWhereInput[]
    NOT?: UserCommunityScalarWhereInput | UserCommunityScalarWhereInput[]
    id?: StringFilter<"UserCommunity"> | string
    userId?: StringFilter<"UserCommunity"> | string
    communityId?: StringFilter<"UserCommunity"> | string
    isPrimary?: BoolFilter<"UserCommunity"> | boolean
    joinedAt?: DateTimeFilter<"UserCommunity"> | Date | string
  }

  export type ThemePreferenceUpsertWithWhereUniqueWithoutUserInput = {
    where: ThemePreferenceWhereUniqueInput
    update: XOR<ThemePreferenceUpdateWithoutUserInput, ThemePreferenceUncheckedUpdateWithoutUserInput>
    create: XOR<ThemePreferenceCreateWithoutUserInput, ThemePreferenceUncheckedCreateWithoutUserInput>
  }

  export type ThemePreferenceUpdateWithWhereUniqueWithoutUserInput = {
    where: ThemePreferenceWhereUniqueInput
    data: XOR<ThemePreferenceUpdateWithoutUserInput, ThemePreferenceUncheckedUpdateWithoutUserInput>
  }

  export type ThemePreferenceUpdateManyWithWhereWithoutUserInput = {
    where: ThemePreferenceScalarWhereInput
    data: XOR<ThemePreferenceUpdateManyMutationInput, ThemePreferenceUncheckedUpdateManyWithoutUserInput>
  }

  export type ThemePreferenceScalarWhereInput = {
    AND?: ThemePreferenceScalarWhereInput | ThemePreferenceScalarWhereInput[]
    OR?: ThemePreferenceScalarWhereInput[]
    NOT?: ThemePreferenceScalarWhereInput | ThemePreferenceScalarWhereInput[]
    id?: StringFilter<"ThemePreference"> | string
    userId?: StringFilter<"ThemePreference"> | string
    communityId?: StringNullableFilter<"ThemePreference"> | string | null
    themeMode?: StringFilter<"ThemePreference"> | string
    customColors?: JsonNullableFilter<"ThemePreference">
    updatedAt?: DateTimeFilter<"ThemePreference"> | Date | string
  }

  export type EventUpsertWithWhereUniqueWithoutCreatorInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutCreatorInput, EventUncheckedUpdateWithoutCreatorInput>
    create: XOR<EventCreateWithoutCreatorInput, EventUncheckedCreateWithoutCreatorInput>
  }

  export type EventUpdateWithWhereUniqueWithoutCreatorInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutCreatorInput, EventUncheckedUpdateWithoutCreatorInput>
  }

  export type EventUpdateManyWithWhereWithoutCreatorInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutCreatorInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    type?: StringFilter<"Event"> | string
    date?: StringFilter<"Event"> | string
    time?: StringFilter<"Event"> | string
    location?: StringFilter<"Event"> | string
    communityId?: StringNullableFilter<"Event"> | string | null
    creatorId?: StringFilter<"Event"> | string
    hostId?: StringFilter<"Event"> | string
    coHostId?: StringNullableFilter<"Event"> | string | null
    maxAttendees?: IntNullableFilter<"Event"> | number | null
    isPublic?: BoolFilter<"Event"> | boolean
    status?: StringFilter<"Event"> | string
    playerSlots?: IntFilter<"Event"> | number
    alternateSlots?: IntFilter<"Event"> | number
    gameFormat?: StringNullableFilter<"Event"> | string | null
    powerLevel?: IntNullableFilter<"Event"> | number | null
    isRecurring?: BoolFilter<"Event"> | boolean
    recurrencePattern?: StringNullableFilter<"Event"> | string | null
    recurrenceInterval?: IntFilter<"Event"> | number
    recurrenceEndDate?: StringNullableFilter<"Event"> | string | null
    parentEventId?: StringNullableFilter<"Event"> | string | null
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
  }

  export type EventUpsertWithWhereUniqueWithoutHostInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutHostInput, EventUncheckedUpdateWithoutHostInput>
    create: XOR<EventCreateWithoutHostInput, EventUncheckedCreateWithoutHostInput>
  }

  export type EventUpdateWithWhereUniqueWithoutHostInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutHostInput, EventUncheckedUpdateWithoutHostInput>
  }

  export type EventUpdateManyWithWhereWithoutHostInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutHostInput>
  }

  export type EventUpsertWithWhereUniqueWithoutCoHostInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutCoHostInput, EventUncheckedUpdateWithoutCoHostInput>
    create: XOR<EventCreateWithoutCoHostInput, EventUncheckedCreateWithoutCoHostInput>
  }

  export type EventUpdateWithWhereUniqueWithoutCoHostInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutCoHostInput, EventUncheckedUpdateWithoutCoHostInput>
  }

  export type EventUpdateManyWithWhereWithoutCoHostInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutCoHostInput>
  }

  export type EventAttendeeUpsertWithWhereUniqueWithoutUserInput = {
    where: EventAttendeeWhereUniqueInput
    update: XOR<EventAttendeeUpdateWithoutUserInput, EventAttendeeUncheckedUpdateWithoutUserInput>
    create: XOR<EventAttendeeCreateWithoutUserInput, EventAttendeeUncheckedCreateWithoutUserInput>
  }

  export type EventAttendeeUpdateWithWhereUniqueWithoutUserInput = {
    where: EventAttendeeWhereUniqueInput
    data: XOR<EventAttendeeUpdateWithoutUserInput, EventAttendeeUncheckedUpdateWithoutUserInput>
  }

  export type EventAttendeeUpdateManyWithWhereWithoutUserInput = {
    where: EventAttendeeScalarWhereInput
    data: XOR<EventAttendeeUpdateManyMutationInput, EventAttendeeUncheckedUpdateManyWithoutUserInput>
  }

  export type EventAttendeeScalarWhereInput = {
    AND?: EventAttendeeScalarWhereInput | EventAttendeeScalarWhereInput[]
    OR?: EventAttendeeScalarWhereInput[]
    NOT?: EventAttendeeScalarWhereInput | EventAttendeeScalarWhereInput[]
    id?: StringFilter<"EventAttendee"> | string
    eventId?: StringFilter<"EventAttendee"> | string
    userId?: StringFilter<"EventAttendee"> | string
    status?: StringFilter<"EventAttendee"> | string
    role?: StringFilter<"EventAttendee"> | string
    playerType?: StringFilter<"EventAttendee"> | string
    joinedAt?: DateTimeFilter<"EventAttendee"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    receiverId?: StringFilter<"Message"> | string
    subject?: StringNullableFilter<"Message"> | string | null
    content?: StringFilter<"Message"> | string
    isRead?: BoolFilter<"Message"> | boolean
    createdAt?: DateTimeFilter<"Message"> | Date | string
    editedAt?: DateTimeNullableFilter<"Message"> | Date | string | null
  }

  export type MessageUpsertWithWhereUniqueWithoutReceiverInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutReceiverInput, MessageUncheckedUpdateWithoutReceiverInput>
    create: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutReceiverInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutReceiverInput, MessageUncheckedUpdateWithoutReceiverInput>
  }

  export type MessageUpdateManyWithWhereWithoutReceiverInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutReceiverInput>
  }

  export type GameSessionUpsertWithWhereUniqueWithoutHostInput = {
    where: GameSessionWhereUniqueInput
    update: XOR<GameSessionUpdateWithoutHostInput, GameSessionUncheckedUpdateWithoutHostInput>
    create: XOR<GameSessionCreateWithoutHostInput, GameSessionUncheckedCreateWithoutHostInput>
  }

  export type GameSessionUpdateWithWhereUniqueWithoutHostInput = {
    where: GameSessionWhereUniqueInput
    data: XOR<GameSessionUpdateWithoutHostInput, GameSessionUncheckedUpdateWithoutHostInput>
  }

  export type GameSessionUpdateManyWithWhereWithoutHostInput = {
    where: GameSessionScalarWhereInput
    data: XOR<GameSessionUpdateManyMutationInput, GameSessionUncheckedUpdateManyWithoutHostInput>
  }

  export type GameSessionScalarWhereInput = {
    AND?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
    OR?: GameSessionScalarWhereInput[]
    NOT?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
    id?: StringFilter<"GameSession"> | string
    name?: StringFilter<"GameSession"> | string
    gameType?: StringFilter<"GameSession"> | string
    hostId?: StringFilter<"GameSession"> | string
    coHostId?: StringNullableFilter<"GameSession"> | string | null
    maxPlayers?: IntFilter<"GameSession"> | number
    currentPlayers?: IntFilter<"GameSession"> | number
    status?: StringFilter<"GameSession"> | string
    isPrivate?: BoolFilter<"GameSession"> | boolean
    gameRoomUrl?: StringNullableFilter<"GameSession"> | string | null
    settings?: JsonNullableFilter<"GameSession">
    createdAt?: DateTimeFilter<"GameSession"> | Date | string
    startedAt?: DateTimeNullableFilter<"GameSession"> | Date | string | null
    endedAt?: DateTimeNullableFilter<"GameSession"> | Date | string | null
  }

  export type GameSessionUpsertWithWhereUniqueWithoutCoHostInput = {
    where: GameSessionWhereUniqueInput
    update: XOR<GameSessionUpdateWithoutCoHostInput, GameSessionUncheckedUpdateWithoutCoHostInput>
    create: XOR<GameSessionCreateWithoutCoHostInput, GameSessionUncheckedCreateWithoutCoHostInput>
  }

  export type GameSessionUpdateWithWhereUniqueWithoutCoHostInput = {
    where: GameSessionWhereUniqueInput
    data: XOR<GameSessionUpdateWithoutCoHostInput, GameSessionUncheckedUpdateWithoutCoHostInput>
  }

  export type GameSessionUpdateManyWithWhereWithoutCoHostInput = {
    where: GameSessionScalarWhereInput
    data: XOR<GameSessionUpdateManyMutationInput, GameSessionUncheckedUpdateManyWithoutCoHostInput>
  }

  export type UserSocialLinkUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSocialLinkWhereUniqueInput
    update: XOR<UserSocialLinkUpdateWithoutUserInput, UserSocialLinkUncheckedUpdateWithoutUserInput>
    create: XOR<UserSocialLinkCreateWithoutUserInput, UserSocialLinkUncheckedCreateWithoutUserInput>
  }

  export type UserSocialLinkUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSocialLinkWhereUniqueInput
    data: XOR<UserSocialLinkUpdateWithoutUserInput, UserSocialLinkUncheckedUpdateWithoutUserInput>
  }

  export type UserSocialLinkUpdateManyWithWhereWithoutUserInput = {
    where: UserSocialLinkScalarWhereInput
    data: XOR<UserSocialLinkUpdateManyMutationInput, UserSocialLinkUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSocialLinkScalarWhereInput = {
    AND?: UserSocialLinkScalarWhereInput | UserSocialLinkScalarWhereInput[]
    OR?: UserSocialLinkScalarWhereInput[]
    NOT?: UserSocialLinkScalarWhereInput | UserSocialLinkScalarWhereInput[]
    id?: StringFilter<"UserSocialLink"> | string
    userId?: StringFilter<"UserSocialLink"> | string
    platform?: StringFilter<"UserSocialLink"> | string
    url?: StringFilter<"UserSocialLink"> | string
    username?: StringNullableFilter<"UserSocialLink"> | string | null
    isPublic?: BoolFilter<"UserSocialLink"> | boolean
    createdAt?: DateTimeFilter<"UserSocialLink"> | Date | string
  }

  export type UserGamingProfileUpsertWithWhereUniqueWithoutUserInput = {
    where: UserGamingProfileWhereUniqueInput
    update: XOR<UserGamingProfileUpdateWithoutUserInput, UserGamingProfileUncheckedUpdateWithoutUserInput>
    create: XOR<UserGamingProfileCreateWithoutUserInput, UserGamingProfileUncheckedCreateWithoutUserInput>
  }

  export type UserGamingProfileUpdateWithWhereUniqueWithoutUserInput = {
    where: UserGamingProfileWhereUniqueInput
    data: XOR<UserGamingProfileUpdateWithoutUserInput, UserGamingProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserGamingProfileUpdateManyWithWhereWithoutUserInput = {
    where: UserGamingProfileScalarWhereInput
    data: XOR<UserGamingProfileUpdateManyMutationInput, UserGamingProfileUncheckedUpdateManyWithoutUserInput>
  }

  export type UserGamingProfileScalarWhereInput = {
    AND?: UserGamingProfileScalarWhereInput | UserGamingProfileScalarWhereInput[]
    OR?: UserGamingProfileScalarWhereInput[]
    NOT?: UserGamingProfileScalarWhereInput | UserGamingProfileScalarWhereInput[]
    id?: StringFilter<"UserGamingProfile"> | string
    userId?: StringFilter<"UserGamingProfile"> | string
    platform?: StringFilter<"UserGamingProfile"> | string
    username?: StringFilter<"UserGamingProfile"> | string
    skillLevel?: StringNullableFilter<"UserGamingProfile"> | string | null
    preferredFormats?: JsonNullableFilter<"UserGamingProfile">
    achievementBadges?: JsonNullableFilter<"UserGamingProfile">
    statistics?: JsonNullableFilter<"UserGamingProfile">
    streamingSettings?: JsonNullableFilter<"UserGamingProfile">
    createdAt?: DateTimeFilter<"UserGamingProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserGamingProfile"> | Date | string
  }

  export type FriendshipUpsertWithWhereUniqueWithoutRequesterInput = {
    where: FriendshipWhereUniqueInput
    update: XOR<FriendshipUpdateWithoutRequesterInput, FriendshipUncheckedUpdateWithoutRequesterInput>
    create: XOR<FriendshipCreateWithoutRequesterInput, FriendshipUncheckedCreateWithoutRequesterInput>
  }

  export type FriendshipUpdateWithWhereUniqueWithoutRequesterInput = {
    where: FriendshipWhereUniqueInput
    data: XOR<FriendshipUpdateWithoutRequesterInput, FriendshipUncheckedUpdateWithoutRequesterInput>
  }

  export type FriendshipUpdateManyWithWhereWithoutRequesterInput = {
    where: FriendshipScalarWhereInput
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyWithoutRequesterInput>
  }

  export type FriendshipScalarWhereInput = {
    AND?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
    OR?: FriendshipScalarWhereInput[]
    NOT?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
    id?: StringFilter<"Friendship"> | string
    requesterId?: StringFilter<"Friendship"> | string
    receiverId?: StringFilter<"Friendship"> | string
    status?: StringFilter<"Friendship"> | string
    createdAt?: DateTimeFilter<"Friendship"> | Date | string
    updatedAt?: DateTimeFilter<"Friendship"> | Date | string
  }

  export type FriendshipUpsertWithWhereUniqueWithoutReceiverInput = {
    where: FriendshipWhereUniqueInput
    update: XOR<FriendshipUpdateWithoutReceiverInput, FriendshipUncheckedUpdateWithoutReceiverInput>
    create: XOR<FriendshipCreateWithoutReceiverInput, FriendshipUncheckedCreateWithoutReceiverInput>
  }

  export type FriendshipUpdateWithWhereUniqueWithoutReceiverInput = {
    where: FriendshipWhereUniqueInput
    data: XOR<FriendshipUpdateWithoutReceiverInput, FriendshipUncheckedUpdateWithoutReceiverInput>
  }

  export type FriendshipUpdateManyWithWhereWithoutReceiverInput = {
    where: FriendshipScalarWhereInput
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyWithoutReceiverInput>
  }

  export type UserActivityUpsertWithWhereUniqueWithoutUserInput = {
    where: UserActivityWhereUniqueInput
    update: XOR<UserActivityUpdateWithoutUserInput, UserActivityUncheckedUpdateWithoutUserInput>
    create: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput>
  }

  export type UserActivityUpdateWithWhereUniqueWithoutUserInput = {
    where: UserActivityWhereUniqueInput
    data: XOR<UserActivityUpdateWithoutUserInput, UserActivityUncheckedUpdateWithoutUserInput>
  }

  export type UserActivityUpdateManyWithWhereWithoutUserInput = {
    where: UserActivityScalarWhereInput
    data: XOR<UserActivityUpdateManyMutationInput, UserActivityUncheckedUpdateManyWithoutUserInput>
  }

  export type UserActivityScalarWhereInput = {
    AND?: UserActivityScalarWhereInput | UserActivityScalarWhereInput[]
    OR?: UserActivityScalarWhereInput[]
    NOT?: UserActivityScalarWhereInput | UserActivityScalarWhereInput[]
    id?: StringFilter<"UserActivity"> | string
    userId?: StringFilter<"UserActivity"> | string
    type?: StringFilter<"UserActivity"> | string
    description?: StringFilter<"UserActivity"> | string
    metadata?: JsonNullableFilter<"UserActivity">
    createdAt?: DateTimeFilter<"UserActivity"> | Date | string
  }

  export type UserSettingsUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSettingsWhereUniqueInput
    update: XOR<UserSettingsUpdateWithoutUserInput, UserSettingsUncheckedUpdateWithoutUserInput>
    create: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
  }

  export type UserSettingsUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSettingsWhereUniqueInput
    data: XOR<UserSettingsUpdateWithoutUserInput, UserSettingsUncheckedUpdateWithoutUserInput>
  }

  export type UserSettingsUpdateManyWithWhereWithoutUserInput = {
    where: UserSettingsScalarWhereInput
    data: XOR<UserSettingsUpdateManyMutationInput, UserSettingsUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSettingsScalarWhereInput = {
    AND?: UserSettingsScalarWhereInput | UserSettingsScalarWhereInput[]
    OR?: UserSettingsScalarWhereInput[]
    NOT?: UserSettingsScalarWhereInput | UserSettingsScalarWhereInput[]
    id?: StringFilter<"UserSettings"> | string
    userId?: StringFilter<"UserSettings"> | string
    emailNotifications?: BoolFilter<"UserSettings"> | boolean
    pushNotifications?: BoolFilter<"UserSettings"> | boolean
    profileVisibility?: StringFilter<"UserSettings"> | string
    showOnlineStatus?: BoolFilter<"UserSettings"> | boolean
    allowFriendRequests?: BoolFilter<"UserSettings"> | boolean
    allowDirectMessages?: BoolFilter<"UserSettings"> | boolean
    language?: StringFilter<"UserSettings"> | string
    timezone?: StringNullableFilter<"UserSettings"> | string | null
    createdAt?: DateTimeFilter<"UserSettings"> | Date | string
    updatedAt?: DateTimeFilter<"UserSettings"> | Date | string
  }

  export type MatchmakingPreferenceUpsertWithWhereUniqueWithoutUserInput = {
    where: MatchmakingPreferenceWhereUniqueInput
    update: XOR<MatchmakingPreferenceUpdateWithoutUserInput, MatchmakingPreferenceUncheckedUpdateWithoutUserInput>
    create: XOR<MatchmakingPreferenceCreateWithoutUserInput, MatchmakingPreferenceUncheckedCreateWithoutUserInput>
  }

  export type MatchmakingPreferenceUpdateWithWhereUniqueWithoutUserInput = {
    where: MatchmakingPreferenceWhereUniqueInput
    data: XOR<MatchmakingPreferenceUpdateWithoutUserInput, MatchmakingPreferenceUncheckedUpdateWithoutUserInput>
  }

  export type MatchmakingPreferenceUpdateManyWithWhereWithoutUserInput = {
    where: MatchmakingPreferenceScalarWhereInput
    data: XOR<MatchmakingPreferenceUpdateManyMutationInput, MatchmakingPreferenceUncheckedUpdateManyWithoutUserInput>
  }

  export type MatchmakingPreferenceScalarWhereInput = {
    AND?: MatchmakingPreferenceScalarWhereInput | MatchmakingPreferenceScalarWhereInput[]
    OR?: MatchmakingPreferenceScalarWhereInput[]
    NOT?: MatchmakingPreferenceScalarWhereInput | MatchmakingPreferenceScalarWhereInput[]
    id?: StringFilter<"MatchmakingPreference"> | string
    userId?: StringFilter<"MatchmakingPreference"> | string
    selectedGames?: JsonFilter<"MatchmakingPreference">
    selectedFormats?: JsonFilter<"MatchmakingPreference">
    powerLevelMin?: IntFilter<"MatchmakingPreference"> | number
    powerLevelMax?: IntFilter<"MatchmakingPreference"> | number
    playstyle?: StringFilter<"MatchmakingPreference"> | string
    location?: StringNullableFilter<"MatchmakingPreference"> | string | null
    onlineOnly?: BoolFilter<"MatchmakingPreference"> | boolean
    availability?: StringFilter<"MatchmakingPreference"> | string
    language?: StringFilter<"MatchmakingPreference"> | string
    maxDistance?: IntFilter<"MatchmakingPreference"> | number
    createdAt?: DateTimeFilter<"MatchmakingPreference"> | Date | string
    updatedAt?: DateTimeFilter<"MatchmakingPreference"> | Date | string
  }

  export type TournamentUpsertWithWhereUniqueWithoutOrganizerInput = {
    where: TournamentWhereUniqueInput
    update: XOR<TournamentUpdateWithoutOrganizerInput, TournamentUncheckedUpdateWithoutOrganizerInput>
    create: XOR<TournamentCreateWithoutOrganizerInput, TournamentUncheckedCreateWithoutOrganizerInput>
  }

  export type TournamentUpdateWithWhereUniqueWithoutOrganizerInput = {
    where: TournamentWhereUniqueInput
    data: XOR<TournamentUpdateWithoutOrganizerInput, TournamentUncheckedUpdateWithoutOrganizerInput>
  }

  export type TournamentUpdateManyWithWhereWithoutOrganizerInput = {
    where: TournamentScalarWhereInput
    data: XOR<TournamentUpdateManyMutationInput, TournamentUncheckedUpdateManyWithoutOrganizerInput>
  }

  export type TournamentScalarWhereInput = {
    AND?: TournamentScalarWhereInput | TournamentScalarWhereInput[]
    OR?: TournamentScalarWhereInput[]
    NOT?: TournamentScalarWhereInput | TournamentScalarWhereInput[]
    id?: StringFilter<"Tournament"> | string
    name?: StringFilter<"Tournament"> | string
    description?: StringNullableFilter<"Tournament"> | string | null
    gameFormat?: StringFilter<"Tournament"> | string
    communityId?: StringFilter<"Tournament"> | string
    organizerId?: StringFilter<"Tournament"> | string
    maxParticipants?: IntFilter<"Tournament"> | number
    currentParticipants?: IntFilter<"Tournament"> | number
    status?: StringFilter<"Tournament"> | string
    startDate?: DateTimeNullableFilter<"Tournament"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Tournament"> | Date | string | null
    bracketData?: JsonNullableFilter<"Tournament">
    prizePool?: StringNullableFilter<"Tournament"> | string | null
    rules?: StringNullableFilter<"Tournament"> | string | null
    createdAt?: DateTimeFilter<"Tournament"> | Date | string
    updatedAt?: DateTimeFilter<"Tournament"> | Date | string
  }

  export type TournamentParticipantUpsertWithWhereUniqueWithoutUserInput = {
    where: TournamentParticipantWhereUniqueInput
    update: XOR<TournamentParticipantUpdateWithoutUserInput, TournamentParticipantUncheckedUpdateWithoutUserInput>
    create: XOR<TournamentParticipantCreateWithoutUserInput, TournamentParticipantUncheckedCreateWithoutUserInput>
  }

  export type TournamentParticipantUpdateWithWhereUniqueWithoutUserInput = {
    where: TournamentParticipantWhereUniqueInput
    data: XOR<TournamentParticipantUpdateWithoutUserInput, TournamentParticipantUncheckedUpdateWithoutUserInput>
  }

  export type TournamentParticipantUpdateManyWithWhereWithoutUserInput = {
    where: TournamentParticipantScalarWhereInput
    data: XOR<TournamentParticipantUpdateManyMutationInput, TournamentParticipantUncheckedUpdateManyWithoutUserInput>
  }

  export type TournamentParticipantScalarWhereInput = {
    AND?: TournamentParticipantScalarWhereInput | TournamentParticipantScalarWhereInput[]
    OR?: TournamentParticipantScalarWhereInput[]
    NOT?: TournamentParticipantScalarWhereInput | TournamentParticipantScalarWhereInput[]
    id?: StringFilter<"TournamentParticipant"> | string
    tournamentId?: StringFilter<"TournamentParticipant"> | string
    userId?: StringFilter<"TournamentParticipant"> | string
    seed?: IntNullableFilter<"TournamentParticipant"> | number | null
    status?: StringFilter<"TournamentParticipant"> | string
    joinedAt?: DateTimeFilter<"TournamentParticipant"> | Date | string
  }

  export type ForumPostUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ForumPostWhereUniqueInput
    update: XOR<ForumPostUpdateWithoutAuthorInput, ForumPostUncheckedUpdateWithoutAuthorInput>
    create: XOR<ForumPostCreateWithoutAuthorInput, ForumPostUncheckedCreateWithoutAuthorInput>
  }

  export type ForumPostUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ForumPostWhereUniqueInput
    data: XOR<ForumPostUpdateWithoutAuthorInput, ForumPostUncheckedUpdateWithoutAuthorInput>
  }

  export type ForumPostUpdateManyWithWhereWithoutAuthorInput = {
    where: ForumPostScalarWhereInput
    data: XOR<ForumPostUpdateManyMutationInput, ForumPostUncheckedUpdateManyWithoutAuthorInput>
  }

  export type ForumPostScalarWhereInput = {
    AND?: ForumPostScalarWhereInput | ForumPostScalarWhereInput[]
    OR?: ForumPostScalarWhereInput[]
    NOT?: ForumPostScalarWhereInput | ForumPostScalarWhereInput[]
    id?: StringFilter<"ForumPost"> | string
    title?: StringFilter<"ForumPost"> | string
    content?: StringFilter<"ForumPost"> | string
    authorId?: StringFilter<"ForumPost"> | string
    communityId?: StringFilter<"ForumPost"> | string
    category?: StringFilter<"ForumPost"> | string
    isPinned?: BoolFilter<"ForumPost"> | boolean
    isLocked?: BoolFilter<"ForumPost"> | boolean
    viewCount?: IntFilter<"ForumPost"> | number
    likeCount?: IntFilter<"ForumPost"> | number
    replyCount?: IntFilter<"ForumPost"> | number
    lastReplyAt?: DateTimeNullableFilter<"ForumPost"> | Date | string | null
    createdAt?: DateTimeFilter<"ForumPost"> | Date | string
    updatedAt?: DateTimeFilter<"ForumPost"> | Date | string
  }

  export type ForumReplyUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ForumReplyWhereUniqueInput
    update: XOR<ForumReplyUpdateWithoutAuthorInput, ForumReplyUncheckedUpdateWithoutAuthorInput>
    create: XOR<ForumReplyCreateWithoutAuthorInput, ForumReplyUncheckedCreateWithoutAuthorInput>
  }

  export type ForumReplyUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ForumReplyWhereUniqueInput
    data: XOR<ForumReplyUpdateWithoutAuthorInput, ForumReplyUncheckedUpdateWithoutAuthorInput>
  }

  export type ForumReplyUpdateManyWithWhereWithoutAuthorInput = {
    where: ForumReplyScalarWhereInput
    data: XOR<ForumReplyUpdateManyMutationInput, ForumReplyUncheckedUpdateManyWithoutAuthorInput>
  }

  export type ForumReplyScalarWhereInput = {
    AND?: ForumReplyScalarWhereInput | ForumReplyScalarWhereInput[]
    OR?: ForumReplyScalarWhereInput[]
    NOT?: ForumReplyScalarWhereInput | ForumReplyScalarWhereInput[]
    id?: StringFilter<"ForumReply"> | string
    postId?: StringFilter<"ForumReply"> | string
    authorId?: StringFilter<"ForumReply"> | string
    content?: StringFilter<"ForumReply"> | string
    parentReplyId?: StringNullableFilter<"ForumReply"> | string | null
    likeCount?: IntFilter<"ForumReply"> | number
    createdAt?: DateTimeFilter<"ForumReply"> | Date | string
    updatedAt?: DateTimeFilter<"ForumReply"> | Date | string
  }

  export type ForumPostLikeUpsertWithWhereUniqueWithoutUserInput = {
    where: ForumPostLikeWhereUniqueInput
    update: XOR<ForumPostLikeUpdateWithoutUserInput, ForumPostLikeUncheckedUpdateWithoutUserInput>
    create: XOR<ForumPostLikeCreateWithoutUserInput, ForumPostLikeUncheckedCreateWithoutUserInput>
  }

  export type ForumPostLikeUpdateWithWhereUniqueWithoutUserInput = {
    where: ForumPostLikeWhereUniqueInput
    data: XOR<ForumPostLikeUpdateWithoutUserInput, ForumPostLikeUncheckedUpdateWithoutUserInput>
  }

  export type ForumPostLikeUpdateManyWithWhereWithoutUserInput = {
    where: ForumPostLikeScalarWhereInput
    data: XOR<ForumPostLikeUpdateManyMutationInput, ForumPostLikeUncheckedUpdateManyWithoutUserInput>
  }

  export type ForumPostLikeScalarWhereInput = {
    AND?: ForumPostLikeScalarWhereInput | ForumPostLikeScalarWhereInput[]
    OR?: ForumPostLikeScalarWhereInput[]
    NOT?: ForumPostLikeScalarWhereInput | ForumPostLikeScalarWhereInput[]
    id?: StringFilter<"ForumPostLike"> | string
    postId?: StringFilter<"ForumPostLike"> | string
    userId?: StringFilter<"ForumPostLike"> | string
    createdAt?: DateTimeFilter<"ForumPostLike"> | Date | string
  }

  export type ForumReplyLikeUpsertWithWhereUniqueWithoutUserInput = {
    where: ForumReplyLikeWhereUniqueInput
    update: XOR<ForumReplyLikeUpdateWithoutUserInput, ForumReplyLikeUncheckedUpdateWithoutUserInput>
    create: XOR<ForumReplyLikeCreateWithoutUserInput, ForumReplyLikeUncheckedCreateWithoutUserInput>
  }

  export type ForumReplyLikeUpdateWithWhereUniqueWithoutUserInput = {
    where: ForumReplyLikeWhereUniqueInput
    data: XOR<ForumReplyLikeUpdateWithoutUserInput, ForumReplyLikeUncheckedUpdateWithoutUserInput>
  }

  export type ForumReplyLikeUpdateManyWithWhereWithoutUserInput = {
    where: ForumReplyLikeScalarWhereInput
    data: XOR<ForumReplyLikeUpdateManyMutationInput, ForumReplyLikeUncheckedUpdateManyWithoutUserInput>
  }

  export type ForumReplyLikeScalarWhereInput = {
    AND?: ForumReplyLikeScalarWhereInput | ForumReplyLikeScalarWhereInput[]
    OR?: ForumReplyLikeScalarWhereInput[]
    NOT?: ForumReplyLikeScalarWhereInput | ForumReplyLikeScalarWhereInput[]
    id?: StringFilter<"ForumReplyLike"> | string
    replyId?: StringFilter<"ForumReplyLike"> | string
    userId?: StringFilter<"ForumReplyLike"> | string
    createdAt?: DateTimeFilter<"ForumReplyLike"> | Date | string
  }

  export type TournamentMatchUpsertWithWhereUniqueWithoutPlayer1Input = {
    where: TournamentMatchWhereUniqueInput
    update: XOR<TournamentMatchUpdateWithoutPlayer1Input, TournamentMatchUncheckedUpdateWithoutPlayer1Input>
    create: XOR<TournamentMatchCreateWithoutPlayer1Input, TournamentMatchUncheckedCreateWithoutPlayer1Input>
  }

  export type TournamentMatchUpdateWithWhereUniqueWithoutPlayer1Input = {
    where: TournamentMatchWhereUniqueInput
    data: XOR<TournamentMatchUpdateWithoutPlayer1Input, TournamentMatchUncheckedUpdateWithoutPlayer1Input>
  }

  export type TournamentMatchUpdateManyWithWhereWithoutPlayer1Input = {
    where: TournamentMatchScalarWhereInput
    data: XOR<TournamentMatchUpdateManyMutationInput, TournamentMatchUncheckedUpdateManyWithoutPlayer1Input>
  }

  export type TournamentMatchScalarWhereInput = {
    AND?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
    OR?: TournamentMatchScalarWhereInput[]
    NOT?: TournamentMatchScalarWhereInput | TournamentMatchScalarWhereInput[]
    id?: StringFilter<"TournamentMatch"> | string
    tournamentId?: StringFilter<"TournamentMatch"> | string
    roundId?: StringFilter<"TournamentMatch"> | string
    player1Id?: StringNullableFilter<"TournamentMatch"> | string | null
    player2Id?: StringNullableFilter<"TournamentMatch"> | string | null
    winnerId?: StringNullableFilter<"TournamentMatch"> | string | null
    status?: StringFilter<"TournamentMatch"> | string
    gameSessionId?: StringNullableFilter<"TournamentMatch"> | string | null
    bracketPosition?: IntNullableFilter<"TournamentMatch"> | number | null
    player1Score?: IntFilter<"TournamentMatch"> | number
    player2Score?: IntFilter<"TournamentMatch"> | number
    matchData?: JsonNullableFilter<"TournamentMatch">
    startTime?: DateTimeNullableFilter<"TournamentMatch"> | Date | string | null
    endTime?: DateTimeNullableFilter<"TournamentMatch"> | Date | string | null
    createdAt?: DateTimeFilter<"TournamentMatch"> | Date | string
  }

  export type TournamentMatchUpsertWithWhereUniqueWithoutPlayer2Input = {
    where: TournamentMatchWhereUniqueInput
    update: XOR<TournamentMatchUpdateWithoutPlayer2Input, TournamentMatchUncheckedUpdateWithoutPlayer2Input>
    create: XOR<TournamentMatchCreateWithoutPlayer2Input, TournamentMatchUncheckedCreateWithoutPlayer2Input>
  }

  export type TournamentMatchUpdateWithWhereUniqueWithoutPlayer2Input = {
    where: TournamentMatchWhereUniqueInput
    data: XOR<TournamentMatchUpdateWithoutPlayer2Input, TournamentMatchUncheckedUpdateWithoutPlayer2Input>
  }

  export type TournamentMatchUpdateManyWithWhereWithoutPlayer2Input = {
    where: TournamentMatchScalarWhereInput
    data: XOR<TournamentMatchUpdateManyMutationInput, TournamentMatchUncheckedUpdateManyWithoutPlayer2Input>
  }

  export type TournamentMatchUpsertWithWhereUniqueWithoutWinnerInput = {
    where: TournamentMatchWhereUniqueInput
    update: XOR<TournamentMatchUpdateWithoutWinnerInput, TournamentMatchUncheckedUpdateWithoutWinnerInput>
    create: XOR<TournamentMatchCreateWithoutWinnerInput, TournamentMatchUncheckedCreateWithoutWinnerInput>
  }

  export type TournamentMatchUpdateWithWhereUniqueWithoutWinnerInput = {
    where: TournamentMatchWhereUniqueInput
    data: XOR<TournamentMatchUpdateWithoutWinnerInput, TournamentMatchUncheckedUpdateWithoutWinnerInput>
  }

  export type TournamentMatchUpdateManyWithWhereWithoutWinnerInput = {
    where: TournamentMatchScalarWhereInput
    data: XOR<TournamentMatchUpdateManyMutationInput, TournamentMatchUncheckedUpdateManyWithoutWinnerInput>
  }

  export type MatchResultUpsertWithWhereUniqueWithoutWinnerInput = {
    where: MatchResultWhereUniqueInput
    update: XOR<MatchResultUpdateWithoutWinnerInput, MatchResultUncheckedUpdateWithoutWinnerInput>
    create: XOR<MatchResultCreateWithoutWinnerInput, MatchResultUncheckedCreateWithoutWinnerInput>
  }

  export type MatchResultUpdateWithWhereUniqueWithoutWinnerInput = {
    where: MatchResultWhereUniqueInput
    data: XOR<MatchResultUpdateWithoutWinnerInput, MatchResultUncheckedUpdateWithoutWinnerInput>
  }

  export type MatchResultUpdateManyWithWhereWithoutWinnerInput = {
    where: MatchResultScalarWhereInput
    data: XOR<MatchResultUpdateManyMutationInput, MatchResultUncheckedUpdateManyWithoutWinnerInput>
  }

  export type MatchResultScalarWhereInput = {
    AND?: MatchResultScalarWhereInput | MatchResultScalarWhereInput[]
    OR?: MatchResultScalarWhereInput[]
    NOT?: MatchResultScalarWhereInput | MatchResultScalarWhereInput[]
    id?: StringFilter<"MatchResult"> | string
    matchId?: StringFilter<"MatchResult"> | string
    winnerId?: StringFilter<"MatchResult"> | string
    loserId?: StringNullableFilter<"MatchResult"> | string | null
    winnerScore?: IntFilter<"MatchResult"> | number
    loserScore?: IntFilter<"MatchResult"> | number
    gameLength?: IntNullableFilter<"MatchResult"> | number | null
    resultType?: StringFilter<"MatchResult"> | string
    notes?: StringNullableFilter<"MatchResult"> | string | null
    reportedById?: StringFilter<"MatchResult"> | string
    verifiedById?: StringNullableFilter<"MatchResult"> | string | null
    isVerified?: BoolFilter<"MatchResult"> | boolean
    createdAt?: DateTimeFilter<"MatchResult"> | Date | string
  }

  export type MatchResultUpsertWithWhereUniqueWithoutLoserInput = {
    where: MatchResultWhereUniqueInput
    update: XOR<MatchResultUpdateWithoutLoserInput, MatchResultUncheckedUpdateWithoutLoserInput>
    create: XOR<MatchResultCreateWithoutLoserInput, MatchResultUncheckedCreateWithoutLoserInput>
  }

  export type MatchResultUpdateWithWhereUniqueWithoutLoserInput = {
    where: MatchResultWhereUniqueInput
    data: XOR<MatchResultUpdateWithoutLoserInput, MatchResultUncheckedUpdateWithoutLoserInput>
  }

  export type MatchResultUpdateManyWithWhereWithoutLoserInput = {
    where: MatchResultScalarWhereInput
    data: XOR<MatchResultUpdateManyMutationInput, MatchResultUncheckedUpdateManyWithoutLoserInput>
  }

  export type MatchResultUpsertWithWhereUniqueWithoutReportedByInput = {
    where: MatchResultWhereUniqueInput
    update: XOR<MatchResultUpdateWithoutReportedByInput, MatchResultUncheckedUpdateWithoutReportedByInput>
    create: XOR<MatchResultCreateWithoutReportedByInput, MatchResultUncheckedCreateWithoutReportedByInput>
  }

  export type MatchResultUpdateWithWhereUniqueWithoutReportedByInput = {
    where: MatchResultWhereUniqueInput
    data: XOR<MatchResultUpdateWithoutReportedByInput, MatchResultUncheckedUpdateWithoutReportedByInput>
  }

  export type MatchResultUpdateManyWithWhereWithoutReportedByInput = {
    where: MatchResultScalarWhereInput
    data: XOR<MatchResultUpdateManyMutationInput, MatchResultUncheckedUpdateManyWithoutReportedByInput>
  }

  export type MatchResultUpsertWithWhereUniqueWithoutVerifiedByInput = {
    where: MatchResultWhereUniqueInput
    update: XOR<MatchResultUpdateWithoutVerifiedByInput, MatchResultUncheckedUpdateWithoutVerifiedByInput>
    create: XOR<MatchResultCreateWithoutVerifiedByInput, MatchResultUncheckedCreateWithoutVerifiedByInput>
  }

  export type MatchResultUpdateWithWhereUniqueWithoutVerifiedByInput = {
    where: MatchResultWhereUniqueInput
    data: XOR<MatchResultUpdateWithoutVerifiedByInput, MatchResultUncheckedUpdateWithoutVerifiedByInput>
  }

  export type MatchResultUpdateManyWithWhereWithoutVerifiedByInput = {
    where: MatchResultScalarWhereInput
    data: XOR<MatchResultUpdateManyMutationInput, MatchResultUncheckedUpdateManyWithoutVerifiedByInput>
  }

  export type UserCommunityCreateWithoutCommunityInput = {
    id?: string
    isPrimary?: boolean
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutUserCommunitiesInput
  }

  export type UserCommunityUncheckedCreateWithoutCommunityInput = {
    id?: string
    userId: string
    isPrimary?: boolean
    joinedAt?: Date | string
  }

  export type UserCommunityCreateOrConnectWithoutCommunityInput = {
    where: UserCommunityWhereUniqueInput
    create: XOR<UserCommunityCreateWithoutCommunityInput, UserCommunityUncheckedCreateWithoutCommunityInput>
  }

  export type UserCommunityCreateManyCommunityInputEnvelope = {
    data: UserCommunityCreateManyCommunityInput | UserCommunityCreateManyCommunityInput[]
    skipDuplicates?: boolean
  }

  export type ThemePreferenceCreateWithoutCommunityInput = {
    id?: string
    themeMode?: string
    customColors?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutThemePreferencesInput
  }

  export type ThemePreferenceUncheckedCreateWithoutCommunityInput = {
    id?: string
    userId: string
    themeMode?: string
    customColors?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
  }

  export type ThemePreferenceCreateOrConnectWithoutCommunityInput = {
    where: ThemePreferenceWhereUniqueInput
    create: XOR<ThemePreferenceCreateWithoutCommunityInput, ThemePreferenceUncheckedCreateWithoutCommunityInput>
  }

  export type ThemePreferenceCreateManyCommunityInputEnvelope = {
    data: ThemePreferenceCreateManyCommunityInput | ThemePreferenceCreateManyCommunityInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutCommunityInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    date: string
    time: string
    location: string
    maxAttendees?: number | null
    isPublic?: boolean
    status?: string
    playerSlots?: number
    alternateSlots?: number
    gameFormat?: string | null
    powerLevel?: number | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    recurrenceInterval?: number
    recurrenceEndDate?: string | null
    parentEventId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedEventsInput
    host: UserCreateNestedOneWithoutHostedEventsInput
    coHost?: UserCreateNestedOneWithoutCoHostedEventsInput
    attendees?: EventAttendeeCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutCommunityInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    date: string
    time: string
    location: string
    creatorId: string
    hostId: string
    coHostId?: string | null
    maxAttendees?: number | null
    isPublic?: boolean
    status?: string
    playerSlots?: number
    alternateSlots?: number
    gameFormat?: string | null
    powerLevel?: number | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    recurrenceInterval?: number
    recurrenceEndDate?: string | null
    parentEventId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attendees?: EventAttendeeUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutCommunityInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutCommunityInput, EventUncheckedCreateWithoutCommunityInput>
  }

  export type EventCreateManyCommunityInputEnvelope = {
    data: EventCreateManyCommunityInput | EventCreateManyCommunityInput[]
    skipDuplicates?: boolean
  }

  export type ForumPostCreateWithoutCommunityInput = {
    id?: string
    title: string
    content: string
    category: string
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    likeCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutForumPostsInput
    replies?: ForumReplyCreateNestedManyWithoutPostInput
    likes?: ForumPostLikeCreateNestedManyWithoutPostInput
  }

  export type ForumPostUncheckedCreateWithoutCommunityInput = {
    id?: string
    title: string
    content: string
    authorId: string
    category: string
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    likeCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: ForumReplyUncheckedCreateNestedManyWithoutPostInput
    likes?: ForumPostLikeUncheckedCreateNestedManyWithoutPostInput
  }

  export type ForumPostCreateOrConnectWithoutCommunityInput = {
    where: ForumPostWhereUniqueInput
    create: XOR<ForumPostCreateWithoutCommunityInput, ForumPostUncheckedCreateWithoutCommunityInput>
  }

  export type ForumPostCreateManyCommunityInputEnvelope = {
    data: ForumPostCreateManyCommunityInput | ForumPostCreateManyCommunityInput[]
    skipDuplicates?: boolean
  }

  export type TournamentCreateWithoutCommunityInput = {
    id?: string
    name: string
    description?: string | null
    gameFormat: string
    maxParticipants?: number
    currentParticipants?: number
    status?: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: string | null
    rules?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizer: UserCreateNestedOneWithoutOrganizedTournamentsInput
    participants?: TournamentParticipantCreateNestedManyWithoutTournamentInput
    rounds?: TournamentRoundCreateNestedManyWithoutTournamentInput
    matches?: TournamentMatchCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUncheckedCreateWithoutCommunityInput = {
    id?: string
    name: string
    description?: string | null
    gameFormat: string
    organizerId: string
    maxParticipants?: number
    currentParticipants?: number
    status?: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: string | null
    rules?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: TournamentParticipantUncheckedCreateNestedManyWithoutTournamentInput
    rounds?: TournamentRoundUncheckedCreateNestedManyWithoutTournamentInput
    matches?: TournamentMatchUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type TournamentCreateOrConnectWithoutCommunityInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutCommunityInput, TournamentUncheckedCreateWithoutCommunityInput>
  }

  export type TournamentCreateManyCommunityInputEnvelope = {
    data: TournamentCreateManyCommunityInput | TournamentCreateManyCommunityInput[]
    skipDuplicates?: boolean
  }

  export type UserCommunityUpsertWithWhereUniqueWithoutCommunityInput = {
    where: UserCommunityWhereUniqueInput
    update: XOR<UserCommunityUpdateWithoutCommunityInput, UserCommunityUncheckedUpdateWithoutCommunityInput>
    create: XOR<UserCommunityCreateWithoutCommunityInput, UserCommunityUncheckedCreateWithoutCommunityInput>
  }

  export type UserCommunityUpdateWithWhereUniqueWithoutCommunityInput = {
    where: UserCommunityWhereUniqueInput
    data: XOR<UserCommunityUpdateWithoutCommunityInput, UserCommunityUncheckedUpdateWithoutCommunityInput>
  }

  export type UserCommunityUpdateManyWithWhereWithoutCommunityInput = {
    where: UserCommunityScalarWhereInput
    data: XOR<UserCommunityUpdateManyMutationInput, UserCommunityUncheckedUpdateManyWithoutCommunityInput>
  }

  export type ThemePreferenceUpsertWithWhereUniqueWithoutCommunityInput = {
    where: ThemePreferenceWhereUniqueInput
    update: XOR<ThemePreferenceUpdateWithoutCommunityInput, ThemePreferenceUncheckedUpdateWithoutCommunityInput>
    create: XOR<ThemePreferenceCreateWithoutCommunityInput, ThemePreferenceUncheckedCreateWithoutCommunityInput>
  }

  export type ThemePreferenceUpdateWithWhereUniqueWithoutCommunityInput = {
    where: ThemePreferenceWhereUniqueInput
    data: XOR<ThemePreferenceUpdateWithoutCommunityInput, ThemePreferenceUncheckedUpdateWithoutCommunityInput>
  }

  export type ThemePreferenceUpdateManyWithWhereWithoutCommunityInput = {
    where: ThemePreferenceScalarWhereInput
    data: XOR<ThemePreferenceUpdateManyMutationInput, ThemePreferenceUncheckedUpdateManyWithoutCommunityInput>
  }

  export type EventUpsertWithWhereUniqueWithoutCommunityInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutCommunityInput, EventUncheckedUpdateWithoutCommunityInput>
    create: XOR<EventCreateWithoutCommunityInput, EventUncheckedCreateWithoutCommunityInput>
  }

  export type EventUpdateWithWhereUniqueWithoutCommunityInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutCommunityInput, EventUncheckedUpdateWithoutCommunityInput>
  }

  export type EventUpdateManyWithWhereWithoutCommunityInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutCommunityInput>
  }

  export type ForumPostUpsertWithWhereUniqueWithoutCommunityInput = {
    where: ForumPostWhereUniqueInput
    update: XOR<ForumPostUpdateWithoutCommunityInput, ForumPostUncheckedUpdateWithoutCommunityInput>
    create: XOR<ForumPostCreateWithoutCommunityInput, ForumPostUncheckedCreateWithoutCommunityInput>
  }

  export type ForumPostUpdateWithWhereUniqueWithoutCommunityInput = {
    where: ForumPostWhereUniqueInput
    data: XOR<ForumPostUpdateWithoutCommunityInput, ForumPostUncheckedUpdateWithoutCommunityInput>
  }

  export type ForumPostUpdateManyWithWhereWithoutCommunityInput = {
    where: ForumPostScalarWhereInput
    data: XOR<ForumPostUpdateManyMutationInput, ForumPostUncheckedUpdateManyWithoutCommunityInput>
  }

  export type TournamentUpsertWithWhereUniqueWithoutCommunityInput = {
    where: TournamentWhereUniqueInput
    update: XOR<TournamentUpdateWithoutCommunityInput, TournamentUncheckedUpdateWithoutCommunityInput>
    create: XOR<TournamentCreateWithoutCommunityInput, TournamentUncheckedCreateWithoutCommunityInput>
  }

  export type TournamentUpdateWithWhereUniqueWithoutCommunityInput = {
    where: TournamentWhereUniqueInput
    data: XOR<TournamentUpdateWithoutCommunityInput, TournamentUncheckedUpdateWithoutCommunityInput>
  }

  export type TournamentUpdateManyWithWhereWithoutCommunityInput = {
    where: TournamentScalarWhereInput
    data: XOR<TournamentUpdateManyMutationInput, TournamentUncheckedUpdateManyWithoutCommunityInput>
  }

  export type UserCreateWithoutUserCommunitiesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutUserCommunitiesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutUserCommunitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserCommunitiesInput, UserUncheckedCreateWithoutUserCommunitiesInput>
  }

  export type CommunityCreateWithoutUserCommunitiesInput = {
    id: string
    name: string
    displayName: string
    description?: string | null
    themeColor: string
    iconClass: string
    isActive?: boolean
    createdAt?: Date | string
    themePreferences?: ThemePreferenceCreateNestedManyWithoutCommunityInput
    events?: EventCreateNestedManyWithoutCommunityInput
    forumPosts?: ForumPostCreateNestedManyWithoutCommunityInput
    tournaments?: TournamentCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUncheckedCreateWithoutUserCommunitiesInput = {
    id: string
    name: string
    displayName: string
    description?: string | null
    themeColor: string
    iconClass: string
    isActive?: boolean
    createdAt?: Date | string
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutCommunityInput
    events?: EventUncheckedCreateNestedManyWithoutCommunityInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutCommunityInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type CommunityCreateOrConnectWithoutUserCommunitiesInput = {
    where: CommunityWhereUniqueInput
    create: XOR<CommunityCreateWithoutUserCommunitiesInput, CommunityUncheckedCreateWithoutUserCommunitiesInput>
  }

  export type UserUpsertWithoutUserCommunitiesInput = {
    update: XOR<UserUpdateWithoutUserCommunitiesInput, UserUncheckedUpdateWithoutUserCommunitiesInput>
    create: XOR<UserCreateWithoutUserCommunitiesInput, UserUncheckedCreateWithoutUserCommunitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserCommunitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserCommunitiesInput, UserUncheckedUpdateWithoutUserCommunitiesInput>
  }

  export type UserUpdateWithoutUserCommunitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUserCommunitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type CommunityUpsertWithoutUserCommunitiesInput = {
    update: XOR<CommunityUpdateWithoutUserCommunitiesInput, CommunityUncheckedUpdateWithoutUserCommunitiesInput>
    create: XOR<CommunityCreateWithoutUserCommunitiesInput, CommunityUncheckedCreateWithoutUserCommunitiesInput>
    where?: CommunityWhereInput
  }

  export type CommunityUpdateToOneWithWhereWithoutUserCommunitiesInput = {
    where?: CommunityWhereInput
    data: XOR<CommunityUpdateWithoutUserCommunitiesInput, CommunityUncheckedUpdateWithoutUserCommunitiesInput>
  }

  export type CommunityUpdateWithoutUserCommunitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    themeColor?: StringFieldUpdateOperationsInput | string
    iconClass?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    themePreferences?: ThemePreferenceUpdateManyWithoutCommunityNestedInput
    events?: EventUpdateManyWithoutCommunityNestedInput
    forumPosts?: ForumPostUpdateManyWithoutCommunityNestedInput
    tournaments?: TournamentUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateWithoutUserCommunitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    themeColor?: StringFieldUpdateOperationsInput | string
    iconClass?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutCommunityNestedInput
    events?: EventUncheckedUpdateManyWithoutCommunityNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutCommunityNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutCommunityNestedInput
  }

  export type UserCreateWithoutThemePreferencesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutThemePreferencesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutThemePreferencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutThemePreferencesInput, UserUncheckedCreateWithoutThemePreferencesInput>
  }

  export type CommunityCreateWithoutThemePreferencesInput = {
    id: string
    name: string
    displayName: string
    description?: string | null
    themeColor: string
    iconClass: string
    isActive?: boolean
    createdAt?: Date | string
    userCommunities?: UserCommunityCreateNestedManyWithoutCommunityInput
    events?: EventCreateNestedManyWithoutCommunityInput
    forumPosts?: ForumPostCreateNestedManyWithoutCommunityInput
    tournaments?: TournamentCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUncheckedCreateWithoutThemePreferencesInput = {
    id: string
    name: string
    displayName: string
    description?: string | null
    themeColor: string
    iconClass: string
    isActive?: boolean
    createdAt?: Date | string
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutCommunityInput
    events?: EventUncheckedCreateNestedManyWithoutCommunityInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutCommunityInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type CommunityCreateOrConnectWithoutThemePreferencesInput = {
    where: CommunityWhereUniqueInput
    create: XOR<CommunityCreateWithoutThemePreferencesInput, CommunityUncheckedCreateWithoutThemePreferencesInput>
  }

  export type UserUpsertWithoutThemePreferencesInput = {
    update: XOR<UserUpdateWithoutThemePreferencesInput, UserUncheckedUpdateWithoutThemePreferencesInput>
    create: XOR<UserCreateWithoutThemePreferencesInput, UserUncheckedCreateWithoutThemePreferencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutThemePreferencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutThemePreferencesInput, UserUncheckedUpdateWithoutThemePreferencesInput>
  }

  export type UserUpdateWithoutThemePreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutThemePreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type CommunityUpsertWithoutThemePreferencesInput = {
    update: XOR<CommunityUpdateWithoutThemePreferencesInput, CommunityUncheckedUpdateWithoutThemePreferencesInput>
    create: XOR<CommunityCreateWithoutThemePreferencesInput, CommunityUncheckedCreateWithoutThemePreferencesInput>
    where?: CommunityWhereInput
  }

  export type CommunityUpdateToOneWithWhereWithoutThemePreferencesInput = {
    where?: CommunityWhereInput
    data: XOR<CommunityUpdateWithoutThemePreferencesInput, CommunityUncheckedUpdateWithoutThemePreferencesInput>
  }

  export type CommunityUpdateWithoutThemePreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    themeColor?: StringFieldUpdateOperationsInput | string
    iconClass?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userCommunities?: UserCommunityUpdateManyWithoutCommunityNestedInput
    events?: EventUpdateManyWithoutCommunityNestedInput
    forumPosts?: ForumPostUpdateManyWithoutCommunityNestedInput
    tournaments?: TournamentUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateWithoutThemePreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    themeColor?: StringFieldUpdateOperationsInput | string
    iconClass?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutCommunityNestedInput
    events?: EventUncheckedUpdateManyWithoutCommunityNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutCommunityNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityCreateWithoutEventsInput = {
    id: string
    name: string
    displayName: string
    description?: string | null
    themeColor: string
    iconClass: string
    isActive?: boolean
    createdAt?: Date | string
    userCommunities?: UserCommunityCreateNestedManyWithoutCommunityInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutCommunityInput
    forumPosts?: ForumPostCreateNestedManyWithoutCommunityInput
    tournaments?: TournamentCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUncheckedCreateWithoutEventsInput = {
    id: string
    name: string
    displayName: string
    description?: string | null
    themeColor: string
    iconClass: string
    isActive?: boolean
    createdAt?: Date | string
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutCommunityInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutCommunityInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutCommunityInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type CommunityCreateOrConnectWithoutEventsInput = {
    where: CommunityWhereUniqueInput
    create: XOR<CommunityCreateWithoutEventsInput, CommunityUncheckedCreateWithoutEventsInput>
  }

  export type UserCreateWithoutCreatedEventsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutCreatedEventsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutCreatedEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedEventsInput, UserUncheckedCreateWithoutCreatedEventsInput>
  }

  export type UserCreateWithoutHostedEventsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutHostedEventsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutHostedEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHostedEventsInput, UserUncheckedCreateWithoutHostedEventsInput>
  }

  export type UserCreateWithoutCoHostedEventsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutCoHostedEventsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutCoHostedEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCoHostedEventsInput, UserUncheckedCreateWithoutCoHostedEventsInput>
  }

  export type EventAttendeeCreateWithoutEventInput = {
    id?: string
    status?: string
    role?: string
    playerType?: string
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutEventAttendeesInput
  }

  export type EventAttendeeUncheckedCreateWithoutEventInput = {
    id?: string
    userId: string
    status?: string
    role?: string
    playerType?: string
    joinedAt?: Date | string
  }

  export type EventAttendeeCreateOrConnectWithoutEventInput = {
    where: EventAttendeeWhereUniqueInput
    create: XOR<EventAttendeeCreateWithoutEventInput, EventAttendeeUncheckedCreateWithoutEventInput>
  }

  export type EventAttendeeCreateManyEventInputEnvelope = {
    data: EventAttendeeCreateManyEventInput | EventAttendeeCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type CommunityUpsertWithoutEventsInput = {
    update: XOR<CommunityUpdateWithoutEventsInput, CommunityUncheckedUpdateWithoutEventsInput>
    create: XOR<CommunityCreateWithoutEventsInput, CommunityUncheckedCreateWithoutEventsInput>
    where?: CommunityWhereInput
  }

  export type CommunityUpdateToOneWithWhereWithoutEventsInput = {
    where?: CommunityWhereInput
    data: XOR<CommunityUpdateWithoutEventsInput, CommunityUncheckedUpdateWithoutEventsInput>
  }

  export type CommunityUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    themeColor?: StringFieldUpdateOperationsInput | string
    iconClass?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userCommunities?: UserCommunityUpdateManyWithoutCommunityNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutCommunityNestedInput
    forumPosts?: ForumPostUpdateManyWithoutCommunityNestedInput
    tournaments?: TournamentUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    themeColor?: StringFieldUpdateOperationsInput | string
    iconClass?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutCommunityNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutCommunityNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutCommunityNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutCommunityNestedInput
  }

  export type UserUpsertWithoutCreatedEventsInput = {
    update: XOR<UserUpdateWithoutCreatedEventsInput, UserUncheckedUpdateWithoutCreatedEventsInput>
    create: XOR<UserCreateWithoutCreatedEventsInput, UserUncheckedCreateWithoutCreatedEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedEventsInput, UserUncheckedUpdateWithoutCreatedEventsInput>
  }

  export type UserUpdateWithoutCreatedEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUpsertWithoutHostedEventsInput = {
    update: XOR<UserUpdateWithoutHostedEventsInput, UserUncheckedUpdateWithoutHostedEventsInput>
    create: XOR<UserCreateWithoutHostedEventsInput, UserUncheckedCreateWithoutHostedEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHostedEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHostedEventsInput, UserUncheckedUpdateWithoutHostedEventsInput>
  }

  export type UserUpdateWithoutHostedEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutHostedEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUpsertWithoutCoHostedEventsInput = {
    update: XOR<UserUpdateWithoutCoHostedEventsInput, UserUncheckedUpdateWithoutCoHostedEventsInput>
    create: XOR<UserCreateWithoutCoHostedEventsInput, UserUncheckedCreateWithoutCoHostedEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCoHostedEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCoHostedEventsInput, UserUncheckedUpdateWithoutCoHostedEventsInput>
  }

  export type UserUpdateWithoutCoHostedEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCoHostedEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type EventAttendeeUpsertWithWhereUniqueWithoutEventInput = {
    where: EventAttendeeWhereUniqueInput
    update: XOR<EventAttendeeUpdateWithoutEventInput, EventAttendeeUncheckedUpdateWithoutEventInput>
    create: XOR<EventAttendeeCreateWithoutEventInput, EventAttendeeUncheckedCreateWithoutEventInput>
  }

  export type EventAttendeeUpdateWithWhereUniqueWithoutEventInput = {
    where: EventAttendeeWhereUniqueInput
    data: XOR<EventAttendeeUpdateWithoutEventInput, EventAttendeeUncheckedUpdateWithoutEventInput>
  }

  export type EventAttendeeUpdateManyWithWhereWithoutEventInput = {
    where: EventAttendeeScalarWhereInput
    data: XOR<EventAttendeeUpdateManyMutationInput, EventAttendeeUncheckedUpdateManyWithoutEventInput>
  }

  export type EventCreateWithoutAttendeesInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    date: string
    time: string
    location: string
    maxAttendees?: number | null
    isPublic?: boolean
    status?: string
    playerSlots?: number
    alternateSlots?: number
    gameFormat?: string | null
    powerLevel?: number | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    recurrenceInterval?: number
    recurrenceEndDate?: string | null
    parentEventId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    community?: CommunityCreateNestedOneWithoutEventsInput
    creator: UserCreateNestedOneWithoutCreatedEventsInput
    host: UserCreateNestedOneWithoutHostedEventsInput
    coHost?: UserCreateNestedOneWithoutCoHostedEventsInput
  }

  export type EventUncheckedCreateWithoutAttendeesInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    date: string
    time: string
    location: string
    communityId?: string | null
    creatorId: string
    hostId: string
    coHostId?: string | null
    maxAttendees?: number | null
    isPublic?: boolean
    status?: string
    playerSlots?: number
    alternateSlots?: number
    gameFormat?: string | null
    powerLevel?: number | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    recurrenceInterval?: number
    recurrenceEndDate?: string | null
    parentEventId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventCreateOrConnectWithoutAttendeesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutAttendeesInput, EventUncheckedCreateWithoutAttendeesInput>
  }

  export type UserCreateWithoutEventAttendeesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutEventAttendeesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutEventAttendeesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEventAttendeesInput, UserUncheckedCreateWithoutEventAttendeesInput>
  }

  export type EventUpsertWithoutAttendeesInput = {
    update: XOR<EventUpdateWithoutAttendeesInput, EventUncheckedUpdateWithoutAttendeesInput>
    create: XOR<EventCreateWithoutAttendeesInput, EventUncheckedCreateWithoutAttendeesInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutAttendeesInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutAttendeesInput, EventUncheckedUpdateWithoutAttendeesInput>
  }

  export type EventUpdateWithoutAttendeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    playerSlots?: IntFieldUpdateOperationsInput | number
    alternateSlots?: IntFieldUpdateOperationsInput | number
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    powerLevel?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceInterval?: IntFieldUpdateOperationsInput | number
    recurrenceEndDate?: NullableStringFieldUpdateOperationsInput | string | null
    parentEventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    community?: CommunityUpdateOneWithoutEventsNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedEventsNestedInput
    host?: UserUpdateOneRequiredWithoutHostedEventsNestedInput
    coHost?: UserUpdateOneWithoutCoHostedEventsNestedInput
  }

  export type EventUncheckedUpdateWithoutAttendeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: StringFieldUpdateOperationsInput | string
    hostId?: StringFieldUpdateOperationsInput | string
    coHostId?: NullableStringFieldUpdateOperationsInput | string | null
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    playerSlots?: IntFieldUpdateOperationsInput | number
    alternateSlots?: IntFieldUpdateOperationsInput | number
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    powerLevel?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceInterval?: IntFieldUpdateOperationsInput | number
    recurrenceEndDate?: NullableStringFieldUpdateOperationsInput | string | null
    parentEventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutEventAttendeesInput = {
    update: XOR<UserUpdateWithoutEventAttendeesInput, UserUncheckedUpdateWithoutEventAttendeesInput>
    create: XOR<UserCreateWithoutEventAttendeesInput, UserUncheckedCreateWithoutEventAttendeesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEventAttendeesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEventAttendeesInput, UserUncheckedUpdateWithoutEventAttendeesInput>
  }

  export type UserUpdateWithoutEventAttendeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutEventAttendeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type CommunityCreateWithoutTournamentsInput = {
    id: string
    name: string
    displayName: string
    description?: string | null
    themeColor: string
    iconClass: string
    isActive?: boolean
    createdAt?: Date | string
    userCommunities?: UserCommunityCreateNestedManyWithoutCommunityInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutCommunityInput
    events?: EventCreateNestedManyWithoutCommunityInput
    forumPosts?: ForumPostCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUncheckedCreateWithoutTournamentsInput = {
    id: string
    name: string
    displayName: string
    description?: string | null
    themeColor: string
    iconClass: string
    isActive?: boolean
    createdAt?: Date | string
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutCommunityInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutCommunityInput
    events?: EventUncheckedCreateNestedManyWithoutCommunityInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type CommunityCreateOrConnectWithoutTournamentsInput = {
    where: CommunityWhereUniqueInput
    create: XOR<CommunityCreateWithoutTournamentsInput, CommunityUncheckedCreateWithoutTournamentsInput>
  }

  export type UserCreateWithoutOrganizedTournamentsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutOrganizedTournamentsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutOrganizedTournamentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizedTournamentsInput, UserUncheckedCreateWithoutOrganizedTournamentsInput>
  }

  export type TournamentParticipantCreateWithoutTournamentInput = {
    id?: string
    seed?: number | null
    status?: string
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutTournamentParticipationInput
  }

  export type TournamentParticipantUncheckedCreateWithoutTournamentInput = {
    id?: string
    userId: string
    seed?: number | null
    status?: string
    joinedAt?: Date | string
  }

  export type TournamentParticipantCreateOrConnectWithoutTournamentInput = {
    where: TournamentParticipantWhereUniqueInput
    create: XOR<TournamentParticipantCreateWithoutTournamentInput, TournamentParticipantUncheckedCreateWithoutTournamentInput>
  }

  export type TournamentParticipantCreateManyTournamentInputEnvelope = {
    data: TournamentParticipantCreateManyTournamentInput | TournamentParticipantCreateManyTournamentInput[]
    skipDuplicates?: boolean
  }

  export type TournamentRoundCreateWithoutTournamentInput = {
    id?: string
    roundNumber: number
    name?: string | null
    status?: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    matches?: TournamentMatchCreateNestedManyWithoutRoundInput
  }

  export type TournamentRoundUncheckedCreateWithoutTournamentInput = {
    id?: string
    roundNumber: number
    name?: string | null
    status?: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    matches?: TournamentMatchUncheckedCreateNestedManyWithoutRoundInput
  }

  export type TournamentRoundCreateOrConnectWithoutTournamentInput = {
    where: TournamentRoundWhereUniqueInput
    create: XOR<TournamentRoundCreateWithoutTournamentInput, TournamentRoundUncheckedCreateWithoutTournamentInput>
  }

  export type TournamentRoundCreateManyTournamentInputEnvelope = {
    data: TournamentRoundCreateManyTournamentInput | TournamentRoundCreateManyTournamentInput[]
    skipDuplicates?: boolean
  }

  export type TournamentMatchCreateWithoutTournamentInput = {
    id?: string
    status?: string
    gameSessionId?: string | null
    bracketPosition?: number | null
    player1Score?: number
    player2Score?: number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    round: TournamentRoundCreateNestedOneWithoutMatchesInput
    player1?: UserCreateNestedOneWithoutTournamentMatchesPlayer1Input
    player2?: UserCreateNestedOneWithoutTournamentMatchesPlayer2Input
    winner?: UserCreateNestedOneWithoutTournamentMatchWinsInput
    results?: MatchResultCreateNestedManyWithoutMatchInput
  }

  export type TournamentMatchUncheckedCreateWithoutTournamentInput = {
    id?: string
    roundId: string
    player1Id?: string | null
    player2Id?: string | null
    winnerId?: string | null
    status?: string
    gameSessionId?: string | null
    bracketPosition?: number | null
    player1Score?: number
    player2Score?: number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    results?: MatchResultUncheckedCreateNestedManyWithoutMatchInput
  }

  export type TournamentMatchCreateOrConnectWithoutTournamentInput = {
    where: TournamentMatchWhereUniqueInput
    create: XOR<TournamentMatchCreateWithoutTournamentInput, TournamentMatchUncheckedCreateWithoutTournamentInput>
  }

  export type TournamentMatchCreateManyTournamentInputEnvelope = {
    data: TournamentMatchCreateManyTournamentInput | TournamentMatchCreateManyTournamentInput[]
    skipDuplicates?: boolean
  }

  export type CommunityUpsertWithoutTournamentsInput = {
    update: XOR<CommunityUpdateWithoutTournamentsInput, CommunityUncheckedUpdateWithoutTournamentsInput>
    create: XOR<CommunityCreateWithoutTournamentsInput, CommunityUncheckedCreateWithoutTournamentsInput>
    where?: CommunityWhereInput
  }

  export type CommunityUpdateToOneWithWhereWithoutTournamentsInput = {
    where?: CommunityWhereInput
    data: XOR<CommunityUpdateWithoutTournamentsInput, CommunityUncheckedUpdateWithoutTournamentsInput>
  }

  export type CommunityUpdateWithoutTournamentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    themeColor?: StringFieldUpdateOperationsInput | string
    iconClass?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userCommunities?: UserCommunityUpdateManyWithoutCommunityNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutCommunityNestedInput
    events?: EventUpdateManyWithoutCommunityNestedInput
    forumPosts?: ForumPostUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateWithoutTournamentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    themeColor?: StringFieldUpdateOperationsInput | string
    iconClass?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutCommunityNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutCommunityNestedInput
    events?: EventUncheckedUpdateManyWithoutCommunityNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutCommunityNestedInput
  }

  export type UserUpsertWithoutOrganizedTournamentsInput = {
    update: XOR<UserUpdateWithoutOrganizedTournamentsInput, UserUncheckedUpdateWithoutOrganizedTournamentsInput>
    create: XOR<UserCreateWithoutOrganizedTournamentsInput, UserUncheckedCreateWithoutOrganizedTournamentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrganizedTournamentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrganizedTournamentsInput, UserUncheckedUpdateWithoutOrganizedTournamentsInput>
  }

  export type UserUpdateWithoutOrganizedTournamentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutOrganizedTournamentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type TournamentParticipantUpsertWithWhereUniqueWithoutTournamentInput = {
    where: TournamentParticipantWhereUniqueInput
    update: XOR<TournamentParticipantUpdateWithoutTournamentInput, TournamentParticipantUncheckedUpdateWithoutTournamentInput>
    create: XOR<TournamentParticipantCreateWithoutTournamentInput, TournamentParticipantUncheckedCreateWithoutTournamentInput>
  }

  export type TournamentParticipantUpdateWithWhereUniqueWithoutTournamentInput = {
    where: TournamentParticipantWhereUniqueInput
    data: XOR<TournamentParticipantUpdateWithoutTournamentInput, TournamentParticipantUncheckedUpdateWithoutTournamentInput>
  }

  export type TournamentParticipantUpdateManyWithWhereWithoutTournamentInput = {
    where: TournamentParticipantScalarWhereInput
    data: XOR<TournamentParticipantUpdateManyMutationInput, TournamentParticipantUncheckedUpdateManyWithoutTournamentInput>
  }

  export type TournamentRoundUpsertWithWhereUniqueWithoutTournamentInput = {
    where: TournamentRoundWhereUniqueInput
    update: XOR<TournamentRoundUpdateWithoutTournamentInput, TournamentRoundUncheckedUpdateWithoutTournamentInput>
    create: XOR<TournamentRoundCreateWithoutTournamentInput, TournamentRoundUncheckedCreateWithoutTournamentInput>
  }

  export type TournamentRoundUpdateWithWhereUniqueWithoutTournamentInput = {
    where: TournamentRoundWhereUniqueInput
    data: XOR<TournamentRoundUpdateWithoutTournamentInput, TournamentRoundUncheckedUpdateWithoutTournamentInput>
  }

  export type TournamentRoundUpdateManyWithWhereWithoutTournamentInput = {
    where: TournamentRoundScalarWhereInput
    data: XOR<TournamentRoundUpdateManyMutationInput, TournamentRoundUncheckedUpdateManyWithoutTournamentInput>
  }

  export type TournamentRoundScalarWhereInput = {
    AND?: TournamentRoundScalarWhereInput | TournamentRoundScalarWhereInput[]
    OR?: TournamentRoundScalarWhereInput[]
    NOT?: TournamentRoundScalarWhereInput | TournamentRoundScalarWhereInput[]
    id?: StringFilter<"TournamentRound"> | string
    tournamentId?: StringFilter<"TournamentRound"> | string
    roundNumber?: IntFilter<"TournamentRound"> | number
    name?: StringNullableFilter<"TournamentRound"> | string | null
    status?: StringFilter<"TournamentRound"> | string
    startTime?: DateTimeNullableFilter<"TournamentRound"> | Date | string | null
    endTime?: DateTimeNullableFilter<"TournamentRound"> | Date | string | null
    createdAt?: DateTimeFilter<"TournamentRound"> | Date | string
  }

  export type TournamentMatchUpsertWithWhereUniqueWithoutTournamentInput = {
    where: TournamentMatchWhereUniqueInput
    update: XOR<TournamentMatchUpdateWithoutTournamentInput, TournamentMatchUncheckedUpdateWithoutTournamentInput>
    create: XOR<TournamentMatchCreateWithoutTournamentInput, TournamentMatchUncheckedCreateWithoutTournamentInput>
  }

  export type TournamentMatchUpdateWithWhereUniqueWithoutTournamentInput = {
    where: TournamentMatchWhereUniqueInput
    data: XOR<TournamentMatchUpdateWithoutTournamentInput, TournamentMatchUncheckedUpdateWithoutTournamentInput>
  }

  export type TournamentMatchUpdateManyWithWhereWithoutTournamentInput = {
    where: TournamentMatchScalarWhereInput
    data: XOR<TournamentMatchUpdateManyMutationInput, TournamentMatchUncheckedUpdateManyWithoutTournamentInput>
  }

  export type TournamentCreateWithoutParticipantsInput = {
    id?: string
    name: string
    description?: string | null
    gameFormat: string
    maxParticipants?: number
    currentParticipants?: number
    status?: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: string | null
    rules?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    community: CommunityCreateNestedOneWithoutTournamentsInput
    organizer: UserCreateNestedOneWithoutOrganizedTournamentsInput
    rounds?: TournamentRoundCreateNestedManyWithoutTournamentInput
    matches?: TournamentMatchCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUncheckedCreateWithoutParticipantsInput = {
    id?: string
    name: string
    description?: string | null
    gameFormat: string
    communityId: string
    organizerId: string
    maxParticipants?: number
    currentParticipants?: number
    status?: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: string | null
    rules?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rounds?: TournamentRoundUncheckedCreateNestedManyWithoutTournamentInput
    matches?: TournamentMatchUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type TournamentCreateOrConnectWithoutParticipantsInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutParticipantsInput, TournamentUncheckedCreateWithoutParticipantsInput>
  }

  export type UserCreateWithoutTournamentParticipationInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutTournamentParticipationInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutTournamentParticipationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTournamentParticipationInput, UserUncheckedCreateWithoutTournamentParticipationInput>
  }

  export type TournamentUpsertWithoutParticipantsInput = {
    update: XOR<TournamentUpdateWithoutParticipantsInput, TournamentUncheckedUpdateWithoutParticipantsInput>
    create: XOR<TournamentCreateWithoutParticipantsInput, TournamentUncheckedCreateWithoutParticipantsInput>
    where?: TournamentWhereInput
  }

  export type TournamentUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: TournamentWhereInput
    data: XOR<TournamentUpdateWithoutParticipantsInput, TournamentUncheckedUpdateWithoutParticipantsInput>
  }

  export type TournamentUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentParticipants?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    community?: CommunityUpdateOneRequiredWithoutTournamentsNestedInput
    organizer?: UserUpdateOneRequiredWithoutOrganizedTournamentsNestedInput
    rounds?: TournamentRoundUpdateManyWithoutTournamentNestedInput
    matches?: TournamentMatchUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
    organizerId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentParticipants?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rounds?: TournamentRoundUncheckedUpdateManyWithoutTournamentNestedInput
    matches?: TournamentMatchUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type UserUpsertWithoutTournamentParticipationInput = {
    update: XOR<UserUpdateWithoutTournamentParticipationInput, UserUncheckedUpdateWithoutTournamentParticipationInput>
    create: XOR<UserCreateWithoutTournamentParticipationInput, UserUncheckedCreateWithoutTournamentParticipationInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTournamentParticipationInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTournamentParticipationInput, UserUncheckedUpdateWithoutTournamentParticipationInput>
  }

  export type UserUpdateWithoutTournamentParticipationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutTournamentParticipationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type TournamentCreateWithoutRoundsInput = {
    id?: string
    name: string
    description?: string | null
    gameFormat: string
    maxParticipants?: number
    currentParticipants?: number
    status?: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: string | null
    rules?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    community: CommunityCreateNestedOneWithoutTournamentsInput
    organizer: UserCreateNestedOneWithoutOrganizedTournamentsInput
    participants?: TournamentParticipantCreateNestedManyWithoutTournamentInput
    matches?: TournamentMatchCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUncheckedCreateWithoutRoundsInput = {
    id?: string
    name: string
    description?: string | null
    gameFormat: string
    communityId: string
    organizerId: string
    maxParticipants?: number
    currentParticipants?: number
    status?: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: string | null
    rules?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: TournamentParticipantUncheckedCreateNestedManyWithoutTournamentInput
    matches?: TournamentMatchUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type TournamentCreateOrConnectWithoutRoundsInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutRoundsInput, TournamentUncheckedCreateWithoutRoundsInput>
  }

  export type TournamentMatchCreateWithoutRoundInput = {
    id?: string
    status?: string
    gameSessionId?: string | null
    bracketPosition?: number | null
    player1Score?: number
    player2Score?: number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutMatchesInput
    player1?: UserCreateNestedOneWithoutTournamentMatchesPlayer1Input
    player2?: UserCreateNestedOneWithoutTournamentMatchesPlayer2Input
    winner?: UserCreateNestedOneWithoutTournamentMatchWinsInput
    results?: MatchResultCreateNestedManyWithoutMatchInput
  }

  export type TournamentMatchUncheckedCreateWithoutRoundInput = {
    id?: string
    tournamentId: string
    player1Id?: string | null
    player2Id?: string | null
    winnerId?: string | null
    status?: string
    gameSessionId?: string | null
    bracketPosition?: number | null
    player1Score?: number
    player2Score?: number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    results?: MatchResultUncheckedCreateNestedManyWithoutMatchInput
  }

  export type TournamentMatchCreateOrConnectWithoutRoundInput = {
    where: TournamentMatchWhereUniqueInput
    create: XOR<TournamentMatchCreateWithoutRoundInput, TournamentMatchUncheckedCreateWithoutRoundInput>
  }

  export type TournamentMatchCreateManyRoundInputEnvelope = {
    data: TournamentMatchCreateManyRoundInput | TournamentMatchCreateManyRoundInput[]
    skipDuplicates?: boolean
  }

  export type TournamentUpsertWithoutRoundsInput = {
    update: XOR<TournamentUpdateWithoutRoundsInput, TournamentUncheckedUpdateWithoutRoundsInput>
    create: XOR<TournamentCreateWithoutRoundsInput, TournamentUncheckedCreateWithoutRoundsInput>
    where?: TournamentWhereInput
  }

  export type TournamentUpdateToOneWithWhereWithoutRoundsInput = {
    where?: TournamentWhereInput
    data: XOR<TournamentUpdateWithoutRoundsInput, TournamentUncheckedUpdateWithoutRoundsInput>
  }

  export type TournamentUpdateWithoutRoundsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentParticipants?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    community?: CommunityUpdateOneRequiredWithoutTournamentsNestedInput
    organizer?: UserUpdateOneRequiredWithoutOrganizedTournamentsNestedInput
    participants?: TournamentParticipantUpdateManyWithoutTournamentNestedInput
    matches?: TournamentMatchUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateWithoutRoundsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
    organizerId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentParticipants?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: TournamentParticipantUncheckedUpdateManyWithoutTournamentNestedInput
    matches?: TournamentMatchUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentMatchUpsertWithWhereUniqueWithoutRoundInput = {
    where: TournamentMatchWhereUniqueInput
    update: XOR<TournamentMatchUpdateWithoutRoundInput, TournamentMatchUncheckedUpdateWithoutRoundInput>
    create: XOR<TournamentMatchCreateWithoutRoundInput, TournamentMatchUncheckedCreateWithoutRoundInput>
  }

  export type TournamentMatchUpdateWithWhereUniqueWithoutRoundInput = {
    where: TournamentMatchWhereUniqueInput
    data: XOR<TournamentMatchUpdateWithoutRoundInput, TournamentMatchUncheckedUpdateWithoutRoundInput>
  }

  export type TournamentMatchUpdateManyWithWhereWithoutRoundInput = {
    where: TournamentMatchScalarWhereInput
    data: XOR<TournamentMatchUpdateManyMutationInput, TournamentMatchUncheckedUpdateManyWithoutRoundInput>
  }

  export type TournamentCreateWithoutMatchesInput = {
    id?: string
    name: string
    description?: string | null
    gameFormat: string
    maxParticipants?: number
    currentParticipants?: number
    status?: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: string | null
    rules?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    community: CommunityCreateNestedOneWithoutTournamentsInput
    organizer: UserCreateNestedOneWithoutOrganizedTournamentsInput
    participants?: TournamentParticipantCreateNestedManyWithoutTournamentInput
    rounds?: TournamentRoundCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUncheckedCreateWithoutMatchesInput = {
    id?: string
    name: string
    description?: string | null
    gameFormat: string
    communityId: string
    organizerId: string
    maxParticipants?: number
    currentParticipants?: number
    status?: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: string | null
    rules?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: TournamentParticipantUncheckedCreateNestedManyWithoutTournamentInput
    rounds?: TournamentRoundUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type TournamentCreateOrConnectWithoutMatchesInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutMatchesInput, TournamentUncheckedCreateWithoutMatchesInput>
  }

  export type TournamentRoundCreateWithoutMatchesInput = {
    id?: string
    roundNumber: number
    name?: string | null
    status?: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutRoundsInput
  }

  export type TournamentRoundUncheckedCreateWithoutMatchesInput = {
    id?: string
    tournamentId: string
    roundNumber: number
    name?: string | null
    status?: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
  }

  export type TournamentRoundCreateOrConnectWithoutMatchesInput = {
    where: TournamentRoundWhereUniqueInput
    create: XOR<TournamentRoundCreateWithoutMatchesInput, TournamentRoundUncheckedCreateWithoutMatchesInput>
  }

  export type UserCreateWithoutTournamentMatchesPlayer1Input = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutTournamentMatchesPlayer1Input = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutTournamentMatchesPlayer1Input = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTournamentMatchesPlayer1Input, UserUncheckedCreateWithoutTournamentMatchesPlayer1Input>
  }

  export type UserCreateWithoutTournamentMatchesPlayer2Input = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutTournamentMatchesPlayer2Input = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutTournamentMatchesPlayer2Input = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTournamentMatchesPlayer2Input, UserUncheckedCreateWithoutTournamentMatchesPlayer2Input>
  }

  export type UserCreateWithoutTournamentMatchWinsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutTournamentMatchWinsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutTournamentMatchWinsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTournamentMatchWinsInput, UserUncheckedCreateWithoutTournamentMatchWinsInput>
  }

  export type MatchResultCreateWithoutMatchInput = {
    id?: string
    winnerScore: number
    loserScore: number
    gameLength?: number | null
    resultType?: string
    notes?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    winner: UserCreateNestedOneWithoutMatchResultsWinsInput
    loser?: UserCreateNestedOneWithoutMatchResultsLossesInput
    reportedBy: UserCreateNestedOneWithoutMatchResultsReportedInput
    verifiedBy?: UserCreateNestedOneWithoutMatchResultsVerifiedInput
  }

  export type MatchResultUncheckedCreateWithoutMatchInput = {
    id?: string
    winnerId: string
    loserId?: string | null
    winnerScore: number
    loserScore: number
    gameLength?: number | null
    resultType?: string
    notes?: string | null
    reportedById: string
    verifiedById?: string | null
    isVerified?: boolean
    createdAt?: Date | string
  }

  export type MatchResultCreateOrConnectWithoutMatchInput = {
    where: MatchResultWhereUniqueInput
    create: XOR<MatchResultCreateWithoutMatchInput, MatchResultUncheckedCreateWithoutMatchInput>
  }

  export type MatchResultCreateManyMatchInputEnvelope = {
    data: MatchResultCreateManyMatchInput | MatchResultCreateManyMatchInput[]
    skipDuplicates?: boolean
  }

  export type TournamentUpsertWithoutMatchesInput = {
    update: XOR<TournamentUpdateWithoutMatchesInput, TournamentUncheckedUpdateWithoutMatchesInput>
    create: XOR<TournamentCreateWithoutMatchesInput, TournamentUncheckedCreateWithoutMatchesInput>
    where?: TournamentWhereInput
  }

  export type TournamentUpdateToOneWithWhereWithoutMatchesInput = {
    where?: TournamentWhereInput
    data: XOR<TournamentUpdateWithoutMatchesInput, TournamentUncheckedUpdateWithoutMatchesInput>
  }

  export type TournamentUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentParticipants?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    community?: CommunityUpdateOneRequiredWithoutTournamentsNestedInput
    organizer?: UserUpdateOneRequiredWithoutOrganizedTournamentsNestedInput
    participants?: TournamentParticipantUpdateManyWithoutTournamentNestedInput
    rounds?: TournamentRoundUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
    organizerId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentParticipants?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: TournamentParticipantUncheckedUpdateManyWithoutTournamentNestedInput
    rounds?: TournamentRoundUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentRoundUpsertWithoutMatchesInput = {
    update: XOR<TournamentRoundUpdateWithoutMatchesInput, TournamentRoundUncheckedUpdateWithoutMatchesInput>
    create: XOR<TournamentRoundCreateWithoutMatchesInput, TournamentRoundUncheckedCreateWithoutMatchesInput>
    where?: TournamentRoundWhereInput
  }

  export type TournamentRoundUpdateToOneWithWhereWithoutMatchesInput = {
    where?: TournamentRoundWhereInput
    data: XOR<TournamentRoundUpdateWithoutMatchesInput, TournamentRoundUncheckedUpdateWithoutMatchesInput>
  }

  export type TournamentRoundUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutRoundsNestedInput
  }

  export type TournamentRoundUncheckedUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutTournamentMatchesPlayer1Input = {
    update: XOR<UserUpdateWithoutTournamentMatchesPlayer1Input, UserUncheckedUpdateWithoutTournamentMatchesPlayer1Input>
    create: XOR<UserCreateWithoutTournamentMatchesPlayer1Input, UserUncheckedCreateWithoutTournamentMatchesPlayer1Input>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTournamentMatchesPlayer1Input = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTournamentMatchesPlayer1Input, UserUncheckedUpdateWithoutTournamentMatchesPlayer1Input>
  }

  export type UserUpdateWithoutTournamentMatchesPlayer1Input = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutTournamentMatchesPlayer1Input = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUpsertWithoutTournamentMatchesPlayer2Input = {
    update: XOR<UserUpdateWithoutTournamentMatchesPlayer2Input, UserUncheckedUpdateWithoutTournamentMatchesPlayer2Input>
    create: XOR<UserCreateWithoutTournamentMatchesPlayer2Input, UserUncheckedCreateWithoutTournamentMatchesPlayer2Input>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTournamentMatchesPlayer2Input = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTournamentMatchesPlayer2Input, UserUncheckedUpdateWithoutTournamentMatchesPlayer2Input>
  }

  export type UserUpdateWithoutTournamentMatchesPlayer2Input = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutTournamentMatchesPlayer2Input = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUpsertWithoutTournamentMatchWinsInput = {
    update: XOR<UserUpdateWithoutTournamentMatchWinsInput, UserUncheckedUpdateWithoutTournamentMatchWinsInput>
    create: XOR<UserCreateWithoutTournamentMatchWinsInput, UserUncheckedCreateWithoutTournamentMatchWinsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTournamentMatchWinsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTournamentMatchWinsInput, UserUncheckedUpdateWithoutTournamentMatchWinsInput>
  }

  export type UserUpdateWithoutTournamentMatchWinsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutTournamentMatchWinsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type MatchResultUpsertWithWhereUniqueWithoutMatchInput = {
    where: MatchResultWhereUniqueInput
    update: XOR<MatchResultUpdateWithoutMatchInput, MatchResultUncheckedUpdateWithoutMatchInput>
    create: XOR<MatchResultCreateWithoutMatchInput, MatchResultUncheckedCreateWithoutMatchInput>
  }

  export type MatchResultUpdateWithWhereUniqueWithoutMatchInput = {
    where: MatchResultWhereUniqueInput
    data: XOR<MatchResultUpdateWithoutMatchInput, MatchResultUncheckedUpdateWithoutMatchInput>
  }

  export type MatchResultUpdateManyWithWhereWithoutMatchInput = {
    where: MatchResultScalarWhereInput
    data: XOR<MatchResultUpdateManyMutationInput, MatchResultUncheckedUpdateManyWithoutMatchInput>
  }

  export type TournamentMatchCreateWithoutResultsInput = {
    id?: string
    status?: string
    gameSessionId?: string | null
    bracketPosition?: number | null
    player1Score?: number
    player2Score?: number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutMatchesInput
    round: TournamentRoundCreateNestedOneWithoutMatchesInput
    player1?: UserCreateNestedOneWithoutTournamentMatchesPlayer1Input
    player2?: UserCreateNestedOneWithoutTournamentMatchesPlayer2Input
    winner?: UserCreateNestedOneWithoutTournamentMatchWinsInput
  }

  export type TournamentMatchUncheckedCreateWithoutResultsInput = {
    id?: string
    tournamentId: string
    roundId: string
    player1Id?: string | null
    player2Id?: string | null
    winnerId?: string | null
    status?: string
    gameSessionId?: string | null
    bracketPosition?: number | null
    player1Score?: number
    player2Score?: number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
  }

  export type TournamentMatchCreateOrConnectWithoutResultsInput = {
    where: TournamentMatchWhereUniqueInput
    create: XOR<TournamentMatchCreateWithoutResultsInput, TournamentMatchUncheckedCreateWithoutResultsInput>
  }

  export type UserCreateWithoutMatchResultsWinsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutMatchResultsWinsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutMatchResultsWinsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMatchResultsWinsInput, UserUncheckedCreateWithoutMatchResultsWinsInput>
  }

  export type UserCreateWithoutMatchResultsLossesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutMatchResultsLossesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutMatchResultsLossesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMatchResultsLossesInput, UserUncheckedCreateWithoutMatchResultsLossesInput>
  }

  export type UserCreateWithoutMatchResultsReportedInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutMatchResultsReportedInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutMatchResultsReportedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMatchResultsReportedInput, UserUncheckedCreateWithoutMatchResultsReportedInput>
  }

  export type UserCreateWithoutMatchResultsVerifiedInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
  }

  export type UserUncheckedCreateWithoutMatchResultsVerifiedInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
  }

  export type UserCreateOrConnectWithoutMatchResultsVerifiedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMatchResultsVerifiedInput, UserUncheckedCreateWithoutMatchResultsVerifiedInput>
  }

  export type TournamentMatchUpsertWithoutResultsInput = {
    update: XOR<TournamentMatchUpdateWithoutResultsInput, TournamentMatchUncheckedUpdateWithoutResultsInput>
    create: XOR<TournamentMatchCreateWithoutResultsInput, TournamentMatchUncheckedCreateWithoutResultsInput>
    where?: TournamentMatchWhereInput
  }

  export type TournamentMatchUpdateToOneWithWhereWithoutResultsInput = {
    where?: TournamentMatchWhereInput
    data: XOR<TournamentMatchUpdateWithoutResultsInput, TournamentMatchUncheckedUpdateWithoutResultsInput>
  }

  export type TournamentMatchUpdateWithoutResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutMatchesNestedInput
    round?: TournamentRoundUpdateOneRequiredWithoutMatchesNestedInput
    player1?: UserUpdateOneWithoutTournamentMatchesPlayer1NestedInput
    player2?: UserUpdateOneWithoutTournamentMatchesPlayer2NestedInput
    winner?: UserUpdateOneWithoutTournamentMatchWinsNestedInput
  }

  export type TournamentMatchUncheckedUpdateWithoutResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    roundId?: StringFieldUpdateOperationsInput | string
    player1Id?: NullableStringFieldUpdateOperationsInput | string | null
    player2Id?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutMatchResultsWinsInput = {
    update: XOR<UserUpdateWithoutMatchResultsWinsInput, UserUncheckedUpdateWithoutMatchResultsWinsInput>
    create: XOR<UserCreateWithoutMatchResultsWinsInput, UserUncheckedCreateWithoutMatchResultsWinsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMatchResultsWinsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMatchResultsWinsInput, UserUncheckedUpdateWithoutMatchResultsWinsInput>
  }

  export type UserUpdateWithoutMatchResultsWinsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutMatchResultsWinsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUpsertWithoutMatchResultsLossesInput = {
    update: XOR<UserUpdateWithoutMatchResultsLossesInput, UserUncheckedUpdateWithoutMatchResultsLossesInput>
    create: XOR<UserCreateWithoutMatchResultsLossesInput, UserUncheckedCreateWithoutMatchResultsLossesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMatchResultsLossesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMatchResultsLossesInput, UserUncheckedUpdateWithoutMatchResultsLossesInput>
  }

  export type UserUpdateWithoutMatchResultsLossesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutMatchResultsLossesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUpsertWithoutMatchResultsReportedInput = {
    update: XOR<UserUpdateWithoutMatchResultsReportedInput, UserUncheckedUpdateWithoutMatchResultsReportedInput>
    create: XOR<UserCreateWithoutMatchResultsReportedInput, UserUncheckedCreateWithoutMatchResultsReportedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMatchResultsReportedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMatchResultsReportedInput, UserUncheckedUpdateWithoutMatchResultsReportedInput>
  }

  export type UserUpdateWithoutMatchResultsReportedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutMatchResultsReportedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUpsertWithoutMatchResultsVerifiedInput = {
    update: XOR<UserUpdateWithoutMatchResultsVerifiedInput, UserUncheckedUpdateWithoutMatchResultsVerifiedInput>
    create: XOR<UserCreateWithoutMatchResultsVerifiedInput, UserUncheckedCreateWithoutMatchResultsVerifiedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMatchResultsVerifiedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMatchResultsVerifiedInput, UserUncheckedUpdateWithoutMatchResultsVerifiedInput>
  }

  export type UserUpdateWithoutMatchResultsVerifiedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
  }

  export type UserUncheckedUpdateWithoutMatchResultsVerifiedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserCreateWithoutSentMessagesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutSentMessagesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutSentMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
  }

  export type UserCreateWithoutReceivedMessagesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutReceivedMessagesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutReceivedMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedMessagesInput, UserUncheckedCreateWithoutReceivedMessagesInput>
  }

  export type UserUpsertWithoutSentMessagesInput = {
    update: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserUpdateWithoutSentMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSentMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUpsertWithoutReceivedMessagesInput = {
    update: XOR<UserUpdateWithoutReceivedMessagesInput, UserUncheckedUpdateWithoutReceivedMessagesInput>
    create: XOR<UserCreateWithoutReceivedMessagesInput, UserUncheckedCreateWithoutReceivedMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedMessagesInput, UserUncheckedUpdateWithoutReceivedMessagesInput>
  }

  export type UserUpdateWithoutReceivedMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserCreateWithoutHostedGameSessionsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutHostedGameSessionsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutHostedGameSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHostedGameSessionsInput, UserUncheckedCreateWithoutHostedGameSessionsInput>
  }

  export type UserCreateWithoutCoHostedGameSessionsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutCoHostedGameSessionsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutCoHostedGameSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCoHostedGameSessionsInput, UserUncheckedCreateWithoutCoHostedGameSessionsInput>
  }

  export type UserUpsertWithoutHostedGameSessionsInput = {
    update: XOR<UserUpdateWithoutHostedGameSessionsInput, UserUncheckedUpdateWithoutHostedGameSessionsInput>
    create: XOR<UserCreateWithoutHostedGameSessionsInput, UserUncheckedCreateWithoutHostedGameSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHostedGameSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHostedGameSessionsInput, UserUncheckedUpdateWithoutHostedGameSessionsInput>
  }

  export type UserUpdateWithoutHostedGameSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutHostedGameSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUpsertWithoutCoHostedGameSessionsInput = {
    update: XOR<UserUpdateWithoutCoHostedGameSessionsInput, UserUncheckedUpdateWithoutCoHostedGameSessionsInput>
    create: XOR<UserCreateWithoutCoHostedGameSessionsInput, UserUncheckedCreateWithoutCoHostedGameSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCoHostedGameSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCoHostedGameSessionsInput, UserUncheckedUpdateWithoutCoHostedGameSessionsInput>
  }

  export type UserUpdateWithoutCoHostedGameSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCoHostedGameSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserCreateWithoutSocialLinksInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutSocialLinksInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutSocialLinksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSocialLinksInput, UserUncheckedCreateWithoutSocialLinksInput>
  }

  export type UserUpsertWithoutSocialLinksInput = {
    update: XOR<UserUpdateWithoutSocialLinksInput, UserUncheckedUpdateWithoutSocialLinksInput>
    create: XOR<UserCreateWithoutSocialLinksInput, UserUncheckedCreateWithoutSocialLinksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSocialLinksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSocialLinksInput, UserUncheckedUpdateWithoutSocialLinksInput>
  }

  export type UserUpdateWithoutSocialLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSocialLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserCreateWithoutGamingProfilesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutGamingProfilesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutGamingProfilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGamingProfilesInput, UserUncheckedCreateWithoutGamingProfilesInput>
  }

  export type UserUpsertWithoutGamingProfilesInput = {
    update: XOR<UserUpdateWithoutGamingProfilesInput, UserUncheckedUpdateWithoutGamingProfilesInput>
    create: XOR<UserCreateWithoutGamingProfilesInput, UserUncheckedCreateWithoutGamingProfilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGamingProfilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGamingProfilesInput, UserUncheckedUpdateWithoutGamingProfilesInput>
  }

  export type UserUpdateWithoutGamingProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutGamingProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserCreateWithoutSentFriendRequestsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutSentFriendRequestsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutSentFriendRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentFriendRequestsInput, UserUncheckedCreateWithoutSentFriendRequestsInput>
  }

  export type UserCreateWithoutReceivedFriendRequestsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutReceivedFriendRequestsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutReceivedFriendRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedFriendRequestsInput, UserUncheckedCreateWithoutReceivedFriendRequestsInput>
  }

  export type UserUpsertWithoutSentFriendRequestsInput = {
    update: XOR<UserUpdateWithoutSentFriendRequestsInput, UserUncheckedUpdateWithoutSentFriendRequestsInput>
    create: XOR<UserCreateWithoutSentFriendRequestsInput, UserUncheckedCreateWithoutSentFriendRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentFriendRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentFriendRequestsInput, UserUncheckedUpdateWithoutSentFriendRequestsInput>
  }

  export type UserUpdateWithoutSentFriendRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSentFriendRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUpsertWithoutReceivedFriendRequestsInput = {
    update: XOR<UserUpdateWithoutReceivedFriendRequestsInput, UserUncheckedUpdateWithoutReceivedFriendRequestsInput>
    create: XOR<UserCreateWithoutReceivedFriendRequestsInput, UserUncheckedCreateWithoutReceivedFriendRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedFriendRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedFriendRequestsInput, UserUncheckedUpdateWithoutReceivedFriendRequestsInput>
  }

  export type UserUpdateWithoutReceivedFriendRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedFriendRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserCreateWithoutActivitiesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutActivitiesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutActivitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
  }

  export type UserUpsertWithoutActivitiesInput = {
    update: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type UserUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserCreateWithoutSettingsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutSettingsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutSettingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
  }

  export type UserUpsertWithoutSettingsInput = {
    update: XOR<UserUpdateWithoutSettingsInput, UserUncheckedUpdateWithoutSettingsInput>
    create: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSettingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSettingsInput, UserUncheckedUpdateWithoutSettingsInput>
  }

  export type UserUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserCreateWithoutMatchmakingPreferencesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutMatchmakingPreferencesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutMatchmakingPreferencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMatchmakingPreferencesInput, UserUncheckedCreateWithoutMatchmakingPreferencesInput>
  }

  export type UserUpsertWithoutMatchmakingPreferencesInput = {
    update: XOR<UserUpdateWithoutMatchmakingPreferencesInput, UserUncheckedUpdateWithoutMatchmakingPreferencesInput>
    create: XOR<UserCreateWithoutMatchmakingPreferencesInput, UserUncheckedCreateWithoutMatchmakingPreferencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMatchmakingPreferencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMatchmakingPreferencesInput, UserUncheckedUpdateWithoutMatchmakingPreferencesInput>
  }

  export type UserUpdateWithoutMatchmakingPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutMatchmakingPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserCreateWithoutForumPostsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutForumPostsInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutForumPostsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutForumPostsInput, UserUncheckedCreateWithoutForumPostsInput>
  }

  export type CommunityCreateWithoutForumPostsInput = {
    id: string
    name: string
    displayName: string
    description?: string | null
    themeColor: string
    iconClass: string
    isActive?: boolean
    createdAt?: Date | string
    userCommunities?: UserCommunityCreateNestedManyWithoutCommunityInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutCommunityInput
    events?: EventCreateNestedManyWithoutCommunityInput
    tournaments?: TournamentCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUncheckedCreateWithoutForumPostsInput = {
    id: string
    name: string
    displayName: string
    description?: string | null
    themeColor: string
    iconClass: string
    isActive?: boolean
    createdAt?: Date | string
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutCommunityInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutCommunityInput
    events?: EventUncheckedCreateNestedManyWithoutCommunityInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type CommunityCreateOrConnectWithoutForumPostsInput = {
    where: CommunityWhereUniqueInput
    create: XOR<CommunityCreateWithoutForumPostsInput, CommunityUncheckedCreateWithoutForumPostsInput>
  }

  export type ForumReplyCreateWithoutPostInput = {
    id?: string
    content: string
    parentReplyId?: string | null
    likeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutForumRepliesInput
    likes?: ForumReplyLikeCreateNestedManyWithoutReplyInput
  }

  export type ForumReplyUncheckedCreateWithoutPostInput = {
    id?: string
    authorId: string
    content: string
    parentReplyId?: string | null
    likeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    likes?: ForumReplyLikeUncheckedCreateNestedManyWithoutReplyInput
  }

  export type ForumReplyCreateOrConnectWithoutPostInput = {
    where: ForumReplyWhereUniqueInput
    create: XOR<ForumReplyCreateWithoutPostInput, ForumReplyUncheckedCreateWithoutPostInput>
  }

  export type ForumReplyCreateManyPostInputEnvelope = {
    data: ForumReplyCreateManyPostInput | ForumReplyCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type ForumPostLikeCreateWithoutPostInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutForumPostLikesInput
  }

  export type ForumPostLikeUncheckedCreateWithoutPostInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type ForumPostLikeCreateOrConnectWithoutPostInput = {
    where: ForumPostLikeWhereUniqueInput
    create: XOR<ForumPostLikeCreateWithoutPostInput, ForumPostLikeUncheckedCreateWithoutPostInput>
  }

  export type ForumPostLikeCreateManyPostInputEnvelope = {
    data: ForumPostLikeCreateManyPostInput | ForumPostLikeCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutForumPostsInput = {
    update: XOR<UserUpdateWithoutForumPostsInput, UserUncheckedUpdateWithoutForumPostsInput>
    create: XOR<UserCreateWithoutForumPostsInput, UserUncheckedCreateWithoutForumPostsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutForumPostsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutForumPostsInput, UserUncheckedUpdateWithoutForumPostsInput>
  }

  export type UserUpdateWithoutForumPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutForumPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type CommunityUpsertWithoutForumPostsInput = {
    update: XOR<CommunityUpdateWithoutForumPostsInput, CommunityUncheckedUpdateWithoutForumPostsInput>
    create: XOR<CommunityCreateWithoutForumPostsInput, CommunityUncheckedCreateWithoutForumPostsInput>
    where?: CommunityWhereInput
  }

  export type CommunityUpdateToOneWithWhereWithoutForumPostsInput = {
    where?: CommunityWhereInput
    data: XOR<CommunityUpdateWithoutForumPostsInput, CommunityUncheckedUpdateWithoutForumPostsInput>
  }

  export type CommunityUpdateWithoutForumPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    themeColor?: StringFieldUpdateOperationsInput | string
    iconClass?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userCommunities?: UserCommunityUpdateManyWithoutCommunityNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutCommunityNestedInput
    events?: EventUpdateManyWithoutCommunityNestedInput
    tournaments?: TournamentUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateWithoutForumPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    themeColor?: StringFieldUpdateOperationsInput | string
    iconClass?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutCommunityNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutCommunityNestedInput
    events?: EventUncheckedUpdateManyWithoutCommunityNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutCommunityNestedInput
  }

  export type ForumReplyUpsertWithWhereUniqueWithoutPostInput = {
    where: ForumReplyWhereUniqueInput
    update: XOR<ForumReplyUpdateWithoutPostInput, ForumReplyUncheckedUpdateWithoutPostInput>
    create: XOR<ForumReplyCreateWithoutPostInput, ForumReplyUncheckedCreateWithoutPostInput>
  }

  export type ForumReplyUpdateWithWhereUniqueWithoutPostInput = {
    where: ForumReplyWhereUniqueInput
    data: XOR<ForumReplyUpdateWithoutPostInput, ForumReplyUncheckedUpdateWithoutPostInput>
  }

  export type ForumReplyUpdateManyWithWhereWithoutPostInput = {
    where: ForumReplyScalarWhereInput
    data: XOR<ForumReplyUpdateManyMutationInput, ForumReplyUncheckedUpdateManyWithoutPostInput>
  }

  export type ForumPostLikeUpsertWithWhereUniqueWithoutPostInput = {
    where: ForumPostLikeWhereUniqueInput
    update: XOR<ForumPostLikeUpdateWithoutPostInput, ForumPostLikeUncheckedUpdateWithoutPostInput>
    create: XOR<ForumPostLikeCreateWithoutPostInput, ForumPostLikeUncheckedCreateWithoutPostInput>
  }

  export type ForumPostLikeUpdateWithWhereUniqueWithoutPostInput = {
    where: ForumPostLikeWhereUniqueInput
    data: XOR<ForumPostLikeUpdateWithoutPostInput, ForumPostLikeUncheckedUpdateWithoutPostInput>
  }

  export type ForumPostLikeUpdateManyWithWhereWithoutPostInput = {
    where: ForumPostLikeScalarWhereInput
    data: XOR<ForumPostLikeUpdateManyMutationInput, ForumPostLikeUncheckedUpdateManyWithoutPostInput>
  }

  export type ForumPostCreateWithoutRepliesInput = {
    id?: string
    title: string
    content: string
    category: string
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    likeCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutForumPostsInput
    community: CommunityCreateNestedOneWithoutForumPostsInput
    likes?: ForumPostLikeCreateNestedManyWithoutPostInput
  }

  export type ForumPostUncheckedCreateWithoutRepliesInput = {
    id?: string
    title: string
    content: string
    authorId: string
    communityId: string
    category: string
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    likeCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    likes?: ForumPostLikeUncheckedCreateNestedManyWithoutPostInput
  }

  export type ForumPostCreateOrConnectWithoutRepliesInput = {
    where: ForumPostWhereUniqueInput
    create: XOR<ForumPostCreateWithoutRepliesInput, ForumPostUncheckedCreateWithoutRepliesInput>
  }

  export type UserCreateWithoutForumRepliesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutForumRepliesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutForumRepliesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutForumRepliesInput, UserUncheckedCreateWithoutForumRepliesInput>
  }

  export type ForumReplyLikeCreateWithoutReplyInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutForumReplyLikesInput
  }

  export type ForumReplyLikeUncheckedCreateWithoutReplyInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type ForumReplyLikeCreateOrConnectWithoutReplyInput = {
    where: ForumReplyLikeWhereUniqueInput
    create: XOR<ForumReplyLikeCreateWithoutReplyInput, ForumReplyLikeUncheckedCreateWithoutReplyInput>
  }

  export type ForumReplyLikeCreateManyReplyInputEnvelope = {
    data: ForumReplyLikeCreateManyReplyInput | ForumReplyLikeCreateManyReplyInput[]
    skipDuplicates?: boolean
  }

  export type ForumPostUpsertWithoutRepliesInput = {
    update: XOR<ForumPostUpdateWithoutRepliesInput, ForumPostUncheckedUpdateWithoutRepliesInput>
    create: XOR<ForumPostCreateWithoutRepliesInput, ForumPostUncheckedCreateWithoutRepliesInput>
    where?: ForumPostWhereInput
  }

  export type ForumPostUpdateToOneWithWhereWithoutRepliesInput = {
    where?: ForumPostWhereInput
    data: XOR<ForumPostUpdateWithoutRepliesInput, ForumPostUncheckedUpdateWithoutRepliesInput>
  }

  export type ForumPostUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutForumPostsNestedInput
    community?: CommunityUpdateOneRequiredWithoutForumPostsNestedInput
    likes?: ForumPostLikeUpdateManyWithoutPostNestedInput
  }

  export type ForumPostUncheckedUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likes?: ForumPostLikeUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserUpsertWithoutForumRepliesInput = {
    update: XOR<UserUpdateWithoutForumRepliesInput, UserUncheckedUpdateWithoutForumRepliesInput>
    create: XOR<UserCreateWithoutForumRepliesInput, UserUncheckedCreateWithoutForumRepliesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutForumRepliesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutForumRepliesInput, UserUncheckedUpdateWithoutForumRepliesInput>
  }

  export type UserUpdateWithoutForumRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutForumRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type ForumReplyLikeUpsertWithWhereUniqueWithoutReplyInput = {
    where: ForumReplyLikeWhereUniqueInput
    update: XOR<ForumReplyLikeUpdateWithoutReplyInput, ForumReplyLikeUncheckedUpdateWithoutReplyInput>
    create: XOR<ForumReplyLikeCreateWithoutReplyInput, ForumReplyLikeUncheckedCreateWithoutReplyInput>
  }

  export type ForumReplyLikeUpdateWithWhereUniqueWithoutReplyInput = {
    where: ForumReplyLikeWhereUniqueInput
    data: XOR<ForumReplyLikeUpdateWithoutReplyInput, ForumReplyLikeUncheckedUpdateWithoutReplyInput>
  }

  export type ForumReplyLikeUpdateManyWithWhereWithoutReplyInput = {
    where: ForumReplyLikeScalarWhereInput
    data: XOR<ForumReplyLikeUpdateManyMutationInput, ForumReplyLikeUncheckedUpdateManyWithoutReplyInput>
  }

  export type ForumPostCreateWithoutLikesInput = {
    id?: string
    title: string
    content: string
    category: string
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    likeCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutForumPostsInput
    community: CommunityCreateNestedOneWithoutForumPostsInput
    replies?: ForumReplyCreateNestedManyWithoutPostInput
  }

  export type ForumPostUncheckedCreateWithoutLikesInput = {
    id?: string
    title: string
    content: string
    authorId: string
    communityId: string
    category: string
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    likeCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: ForumReplyUncheckedCreateNestedManyWithoutPostInput
  }

  export type ForumPostCreateOrConnectWithoutLikesInput = {
    where: ForumPostWhereUniqueInput
    create: XOR<ForumPostCreateWithoutLikesInput, ForumPostUncheckedCreateWithoutLikesInput>
  }

  export type UserCreateWithoutForumPostLikesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumReplyLikes?: ForumReplyLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutForumPostLikesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumReplyLikes?: ForumReplyLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutForumPostLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutForumPostLikesInput, UserUncheckedCreateWithoutForumPostLikesInput>
  }

  export type ForumPostUpsertWithoutLikesInput = {
    update: XOR<ForumPostUpdateWithoutLikesInput, ForumPostUncheckedUpdateWithoutLikesInput>
    create: XOR<ForumPostCreateWithoutLikesInput, ForumPostUncheckedCreateWithoutLikesInput>
    where?: ForumPostWhereInput
  }

  export type ForumPostUpdateToOneWithWhereWithoutLikesInput = {
    where?: ForumPostWhereInput
    data: XOR<ForumPostUpdateWithoutLikesInput, ForumPostUncheckedUpdateWithoutLikesInput>
  }

  export type ForumPostUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutForumPostsNestedInput
    community?: CommunityUpdateOneRequiredWithoutForumPostsNestedInput
    replies?: ForumReplyUpdateManyWithoutPostNestedInput
  }

  export type ForumPostUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: ForumReplyUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserUpsertWithoutForumPostLikesInput = {
    update: XOR<UserUpdateWithoutForumPostLikesInput, UserUncheckedUpdateWithoutForumPostLikesInput>
    create: XOR<UserCreateWithoutForumPostLikesInput, UserUncheckedCreateWithoutForumPostLikesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutForumPostLikesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutForumPostLikesInput, UserUncheckedUpdateWithoutForumPostLikesInput>
  }

  export type UserUpdateWithoutForumPostLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumReplyLikes?: ForumReplyLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutForumPostLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplyLikes?: ForumReplyLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type ForumReplyCreateWithoutLikesInput = {
    id?: string
    content: string
    parentReplyId?: string | null
    likeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    post: ForumPostCreateNestedOneWithoutRepliesInput
    author: UserCreateNestedOneWithoutForumRepliesInput
  }

  export type ForumReplyUncheckedCreateWithoutLikesInput = {
    id?: string
    postId: string
    authorId: string
    content: string
    parentReplyId?: string | null
    likeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ForumReplyCreateOrConnectWithoutLikesInput = {
    where: ForumReplyWhereUniqueInput
    create: XOR<ForumReplyCreateWithoutLikesInput, ForumReplyUncheckedCreateWithoutLikesInput>
  }

  export type UserCreateWithoutForumReplyLikesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceCreateNestedManyWithoutUserInput
    createdEvents?: EventCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventCreateNestedManyWithoutHostInput
    coHostedEvents?: EventCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipCreateNestedManyWithoutReceiverInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultCreateNestedManyWithoutVerifiedByInput
  }

  export type UserUncheckedCreateWithoutForumReplyLikesInput = {
    id?: string
    email?: string | null
    firstName?: string | null
    lastName?: string | null
    profileImageUrl?: string | null
    primaryCommunity?: string | null
    username?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    status?: string | null
    statusMessage?: string | null
    timezone?: string | null
    dateOfBirth?: string | null
    isPrivate?: boolean
    showOnlineStatus?: string
    allowDirectMessages?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userCommunities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    themePreferences?: ThemePreferenceUncheckedCreateNestedManyWithoutUserInput
    createdEvents?: EventUncheckedCreateNestedManyWithoutCreatorInput
    hostedEvents?: EventUncheckedCreateNestedManyWithoutHostInput
    coHostedEvents?: EventUncheckedCreateNestedManyWithoutCoHostInput
    eventAttendees?: EventAttendeeUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    hostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutHostInput
    coHostedGameSessions?: GameSessionUncheckedCreateNestedManyWithoutCoHostInput
    socialLinks?: UserSocialLinkUncheckedCreateNestedManyWithoutUserInput
    gamingProfiles?: UserGamingProfileUncheckedCreateNestedManyWithoutUserInput
    sentFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutRequesterInput
    receivedFriendRequests?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedManyWithoutUserInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedCreateNestedManyWithoutUserInput
    organizedTournaments?: TournamentUncheckedCreateNestedManyWithoutOrganizerInput
    tournamentParticipation?: TournamentParticipantUncheckedCreateNestedManyWithoutUserInput
    forumPosts?: ForumPostUncheckedCreateNestedManyWithoutAuthorInput
    forumReplies?: ForumReplyUncheckedCreateNestedManyWithoutAuthorInput
    forumPostLikes?: ForumPostLikeUncheckedCreateNestedManyWithoutUserInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer1Input
    tournamentMatchesPlayer2?: TournamentMatchUncheckedCreateNestedManyWithoutPlayer2Input
    tournamentMatchWins?: TournamentMatchUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsWins?: MatchResultUncheckedCreateNestedManyWithoutWinnerInput
    matchResultsLosses?: MatchResultUncheckedCreateNestedManyWithoutLoserInput
    matchResultsReported?: MatchResultUncheckedCreateNestedManyWithoutReportedByInput
    matchResultsVerified?: MatchResultUncheckedCreateNestedManyWithoutVerifiedByInput
  }

  export type UserCreateOrConnectWithoutForumReplyLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutForumReplyLikesInput, UserUncheckedCreateWithoutForumReplyLikesInput>
  }

  export type ForumReplyUpsertWithoutLikesInput = {
    update: XOR<ForumReplyUpdateWithoutLikesInput, ForumReplyUncheckedUpdateWithoutLikesInput>
    create: XOR<ForumReplyCreateWithoutLikesInput, ForumReplyUncheckedCreateWithoutLikesInput>
    where?: ForumReplyWhereInput
  }

  export type ForumReplyUpdateToOneWithWhereWithoutLikesInput = {
    where?: ForumReplyWhereInput
    data: XOR<ForumReplyUpdateWithoutLikesInput, ForumReplyUncheckedUpdateWithoutLikesInput>
  }

  export type ForumReplyUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    parentReplyId?: NullableStringFieldUpdateOperationsInput | string | null
    likeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: ForumPostUpdateOneRequiredWithoutRepliesNestedInput
    author?: UserUpdateOneRequiredWithoutForumRepliesNestedInput
  }

  export type ForumReplyUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    parentReplyId?: NullableStringFieldUpdateOperationsInput | string | null
    likeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutForumReplyLikesInput = {
    update: XOR<UserUpdateWithoutForumReplyLikesInput, UserUncheckedUpdateWithoutForumReplyLikesInput>
    create: XOR<UserCreateWithoutForumReplyLikesInput, UserUncheckedCreateWithoutForumReplyLikesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutForumReplyLikesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutForumReplyLikesInput, UserUncheckedUpdateWithoutForumReplyLikesInput>
  }

  export type UserUpdateWithoutForumReplyLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUpdateManyWithoutUserNestedInput
    createdEvents?: EventUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUpdateManyWithoutVerifiedByNestedInput
  }

  export type UserUncheckedUpdateWithoutForumReplyLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCommunity?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    showOnlineStatus?: StringFieldUpdateOperationsInput | string
    allowDirectMessages?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userCommunities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    themePreferences?: ThemePreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdEvents?: EventUncheckedUpdateManyWithoutCreatorNestedInput
    hostedEvents?: EventUncheckedUpdateManyWithoutHostNestedInput
    coHostedEvents?: EventUncheckedUpdateManyWithoutCoHostNestedInput
    eventAttendees?: EventAttendeeUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    hostedGameSessions?: GameSessionUncheckedUpdateManyWithoutHostNestedInput
    coHostedGameSessions?: GameSessionUncheckedUpdateManyWithoutCoHostNestedInput
    socialLinks?: UserSocialLinkUncheckedUpdateManyWithoutUserNestedInput
    gamingProfiles?: UserGamingProfileUncheckedUpdateManyWithoutUserNestedInput
    sentFriendRequests?: FriendshipUncheckedUpdateManyWithoutRequesterNestedInput
    receivedFriendRequests?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateManyWithoutUserNestedInput
    matchmakingPreferences?: MatchmakingPreferenceUncheckedUpdateManyWithoutUserNestedInput
    organizedTournaments?: TournamentUncheckedUpdateManyWithoutOrganizerNestedInput
    tournamentParticipation?: TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput
    forumPosts?: ForumPostUncheckedUpdateManyWithoutAuthorNestedInput
    forumReplies?: ForumReplyUncheckedUpdateManyWithoutAuthorNestedInput
    forumPostLikes?: ForumPostLikeUncheckedUpdateManyWithoutUserNestedInput
    tournamentMatchesPlayer1?: TournamentMatchUncheckedUpdateManyWithoutPlayer1NestedInput
    tournamentMatchesPlayer2?: TournamentMatchUncheckedUpdateManyWithoutPlayer2NestedInput
    tournamentMatchWins?: TournamentMatchUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsWins?: MatchResultUncheckedUpdateManyWithoutWinnerNestedInput
    matchResultsLosses?: MatchResultUncheckedUpdateManyWithoutLoserNestedInput
    matchResultsReported?: MatchResultUncheckedUpdateManyWithoutReportedByNestedInput
    matchResultsVerified?: MatchResultUncheckedUpdateManyWithoutVerifiedByNestedInput
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type UserCommunityCreateManyUserInput = {
    id?: string
    communityId: string
    isPrimary?: boolean
    joinedAt?: Date | string
  }

  export type ThemePreferenceCreateManyUserInput = {
    id?: string
    communityId?: string | null
    themeMode?: string
    customColors?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
  }

  export type EventCreateManyCreatorInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    date: string
    time: string
    location: string
    communityId?: string | null
    hostId: string
    coHostId?: string | null
    maxAttendees?: number | null
    isPublic?: boolean
    status?: string
    playerSlots?: number
    alternateSlots?: number
    gameFormat?: string | null
    powerLevel?: number | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    recurrenceInterval?: number
    recurrenceEndDate?: string | null
    parentEventId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventCreateManyHostInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    date: string
    time: string
    location: string
    communityId?: string | null
    creatorId: string
    coHostId?: string | null
    maxAttendees?: number | null
    isPublic?: boolean
    status?: string
    playerSlots?: number
    alternateSlots?: number
    gameFormat?: string | null
    powerLevel?: number | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    recurrenceInterval?: number
    recurrenceEndDate?: string | null
    parentEventId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventCreateManyCoHostInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    date: string
    time: string
    location: string
    communityId?: string | null
    creatorId: string
    hostId: string
    maxAttendees?: number | null
    isPublic?: boolean
    status?: string
    playerSlots?: number
    alternateSlots?: number
    gameFormat?: string | null
    powerLevel?: number | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    recurrenceInterval?: number
    recurrenceEndDate?: string | null
    parentEventId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventAttendeeCreateManyUserInput = {
    id?: string
    eventId: string
    status?: string
    role?: string
    playerType?: string
    joinedAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    title: string
    message: string
    type: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type MessageCreateManySenderInput = {
    id?: string
    receiverId: string
    subject?: string | null
    content: string
    isRead?: boolean
    createdAt?: Date | string
    editedAt?: Date | string | null
  }

  export type MessageCreateManyReceiverInput = {
    id?: string
    senderId: string
    subject?: string | null
    content: string
    isRead?: boolean
    createdAt?: Date | string
    editedAt?: Date | string | null
  }

  export type GameSessionCreateManyHostInput = {
    id?: string
    name: string
    gameType: string
    coHostId?: string | null
    maxPlayers?: number
    currentPlayers?: number
    status?: string
    isPrivate?: boolean
    gameRoomUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
  }

  export type GameSessionCreateManyCoHostInput = {
    id?: string
    name: string
    gameType: string
    hostId: string
    maxPlayers?: number
    currentPlayers?: number
    status?: string
    isPrivate?: boolean
    gameRoomUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
  }

  export type UserSocialLinkCreateManyUserInput = {
    id?: string
    platform: string
    url: string
    username?: string | null
    isPublic?: boolean
    createdAt?: Date | string
  }

  export type UserGamingProfileCreateManyUserInput = {
    id?: string
    platform: string
    username: string
    skillLevel?: string | null
    preferredFormats?: NullableJsonNullValueInput | InputJsonValue
    achievementBadges?: NullableJsonNullValueInput | InputJsonValue
    statistics?: NullableJsonNullValueInput | InputJsonValue
    streamingSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendshipCreateManyRequesterInput = {
    id?: string
    receiverId: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendshipCreateManyReceiverInput = {
    id?: string
    requesterId: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserActivityCreateManyUserInput = {
    id?: string
    type: string
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserSettingsCreateManyUserInput = {
    id?: string
    emailNotifications?: boolean
    pushNotifications?: boolean
    profileVisibility?: string
    showOnlineStatus?: boolean
    allowFriendRequests?: boolean
    allowDirectMessages?: boolean
    language?: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchmakingPreferenceCreateManyUserInput = {
    id?: string
    selectedGames?: JsonNullValueInput | InputJsonValue
    selectedFormats?: JsonNullValueInput | InputJsonValue
    powerLevelMin?: number
    powerLevelMax?: number
    playstyle?: string
    location?: string | null
    onlineOnly?: boolean
    availability?: string
    language?: string
    maxDistance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentCreateManyOrganizerInput = {
    id?: string
    name: string
    description?: string | null
    gameFormat: string
    communityId: string
    maxParticipants?: number
    currentParticipants?: number
    status?: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: string | null
    rules?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentParticipantCreateManyUserInput = {
    id?: string
    tournamentId: string
    seed?: number | null
    status?: string
    joinedAt?: Date | string
  }

  export type ForumPostCreateManyAuthorInput = {
    id?: string
    title: string
    content: string
    communityId: string
    category: string
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    likeCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ForumReplyCreateManyAuthorInput = {
    id?: string
    postId: string
    content: string
    parentReplyId?: string | null
    likeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ForumPostLikeCreateManyUserInput = {
    id?: string
    postId: string
    createdAt?: Date | string
  }

  export type ForumReplyLikeCreateManyUserInput = {
    id?: string
    replyId: string
    createdAt?: Date | string
  }

  export type TournamentMatchCreateManyPlayer1Input = {
    id?: string
    tournamentId: string
    roundId: string
    player2Id?: string | null
    winnerId?: string | null
    status?: string
    gameSessionId?: string | null
    bracketPosition?: number | null
    player1Score?: number
    player2Score?: number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
  }

  export type TournamentMatchCreateManyPlayer2Input = {
    id?: string
    tournamentId: string
    roundId: string
    player1Id?: string | null
    winnerId?: string | null
    status?: string
    gameSessionId?: string | null
    bracketPosition?: number | null
    player1Score?: number
    player2Score?: number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
  }

  export type TournamentMatchCreateManyWinnerInput = {
    id?: string
    tournamentId: string
    roundId: string
    player1Id?: string | null
    player2Id?: string | null
    status?: string
    gameSessionId?: string | null
    bracketPosition?: number | null
    player1Score?: number
    player2Score?: number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
  }

  export type MatchResultCreateManyWinnerInput = {
    id?: string
    matchId: string
    loserId?: string | null
    winnerScore: number
    loserScore: number
    gameLength?: number | null
    resultType?: string
    notes?: string | null
    reportedById: string
    verifiedById?: string | null
    isVerified?: boolean
    createdAt?: Date | string
  }

  export type MatchResultCreateManyLoserInput = {
    id?: string
    matchId: string
    winnerId: string
    winnerScore: number
    loserScore: number
    gameLength?: number | null
    resultType?: string
    notes?: string | null
    reportedById: string
    verifiedById?: string | null
    isVerified?: boolean
    createdAt?: Date | string
  }

  export type MatchResultCreateManyReportedByInput = {
    id?: string
    matchId: string
    winnerId: string
    loserId?: string | null
    winnerScore: number
    loserScore: number
    gameLength?: number | null
    resultType?: string
    notes?: string | null
    verifiedById?: string | null
    isVerified?: boolean
    createdAt?: Date | string
  }

  export type MatchResultCreateManyVerifiedByInput = {
    id?: string
    matchId: string
    winnerId: string
    loserId?: string | null
    winnerScore: number
    loserScore: number
    gameLength?: number | null
    resultType?: string
    notes?: string | null
    reportedById: string
    isVerified?: boolean
    createdAt?: Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCommunityUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    community?: CommunityUpdateOneRequiredWithoutUserCommunitiesNestedInput
  }

  export type UserCommunityUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCommunityUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThemePreferenceUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    themeMode?: StringFieldUpdateOperationsInput | string
    customColors?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    community?: CommunityUpdateOneWithoutThemePreferencesNestedInput
  }

  export type ThemePreferenceUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    themeMode?: StringFieldUpdateOperationsInput | string
    customColors?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThemePreferenceUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    themeMode?: StringFieldUpdateOperationsInput | string
    customColors?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    playerSlots?: IntFieldUpdateOperationsInput | number
    alternateSlots?: IntFieldUpdateOperationsInput | number
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    powerLevel?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceInterval?: IntFieldUpdateOperationsInput | number
    recurrenceEndDate?: NullableStringFieldUpdateOperationsInput | string | null
    parentEventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    community?: CommunityUpdateOneWithoutEventsNestedInput
    host?: UserUpdateOneRequiredWithoutHostedEventsNestedInput
    coHost?: UserUpdateOneWithoutCoHostedEventsNestedInput
    attendees?: EventAttendeeUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    hostId?: StringFieldUpdateOperationsInput | string
    coHostId?: NullableStringFieldUpdateOperationsInput | string | null
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    playerSlots?: IntFieldUpdateOperationsInput | number
    alternateSlots?: IntFieldUpdateOperationsInput | number
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    powerLevel?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceInterval?: IntFieldUpdateOperationsInput | number
    recurrenceEndDate?: NullableStringFieldUpdateOperationsInput | string | null
    parentEventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: EventAttendeeUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    hostId?: StringFieldUpdateOperationsInput | string
    coHostId?: NullableStringFieldUpdateOperationsInput | string | null
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    playerSlots?: IntFieldUpdateOperationsInput | number
    alternateSlots?: IntFieldUpdateOperationsInput | number
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    powerLevel?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceInterval?: IntFieldUpdateOperationsInput | number
    recurrenceEndDate?: NullableStringFieldUpdateOperationsInput | string | null
    parentEventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUpdateWithoutHostInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    playerSlots?: IntFieldUpdateOperationsInput | number
    alternateSlots?: IntFieldUpdateOperationsInput | number
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    powerLevel?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceInterval?: IntFieldUpdateOperationsInput | number
    recurrenceEndDate?: NullableStringFieldUpdateOperationsInput | string | null
    parentEventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    community?: CommunityUpdateOneWithoutEventsNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedEventsNestedInput
    coHost?: UserUpdateOneWithoutCoHostedEventsNestedInput
    attendees?: EventAttendeeUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutHostInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: StringFieldUpdateOperationsInput | string
    coHostId?: NullableStringFieldUpdateOperationsInput | string | null
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    playerSlots?: IntFieldUpdateOperationsInput | number
    alternateSlots?: IntFieldUpdateOperationsInput | number
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    powerLevel?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceInterval?: IntFieldUpdateOperationsInput | number
    recurrenceEndDate?: NullableStringFieldUpdateOperationsInput | string | null
    parentEventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: EventAttendeeUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutHostInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: StringFieldUpdateOperationsInput | string
    coHostId?: NullableStringFieldUpdateOperationsInput | string | null
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    playerSlots?: IntFieldUpdateOperationsInput | number
    alternateSlots?: IntFieldUpdateOperationsInput | number
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    powerLevel?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceInterval?: IntFieldUpdateOperationsInput | number
    recurrenceEndDate?: NullableStringFieldUpdateOperationsInput | string | null
    parentEventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUpdateWithoutCoHostInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    playerSlots?: IntFieldUpdateOperationsInput | number
    alternateSlots?: IntFieldUpdateOperationsInput | number
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    powerLevel?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceInterval?: IntFieldUpdateOperationsInput | number
    recurrenceEndDate?: NullableStringFieldUpdateOperationsInput | string | null
    parentEventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    community?: CommunityUpdateOneWithoutEventsNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedEventsNestedInput
    host?: UserUpdateOneRequiredWithoutHostedEventsNestedInput
    attendees?: EventAttendeeUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutCoHostInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: StringFieldUpdateOperationsInput | string
    hostId?: StringFieldUpdateOperationsInput | string
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    playerSlots?: IntFieldUpdateOperationsInput | number
    alternateSlots?: IntFieldUpdateOperationsInput | number
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    powerLevel?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceInterval?: IntFieldUpdateOperationsInput | number
    recurrenceEndDate?: NullableStringFieldUpdateOperationsInput | string | null
    parentEventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: EventAttendeeUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutCoHostInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: StringFieldUpdateOperationsInput | string
    hostId?: StringFieldUpdateOperationsInput | string
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    playerSlots?: IntFieldUpdateOperationsInput | number
    alternateSlots?: IntFieldUpdateOperationsInput | number
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    powerLevel?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceInterval?: IntFieldUpdateOperationsInput | number
    recurrenceEndDate?: NullableStringFieldUpdateOperationsInput | string | null
    parentEventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventAttendeeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    playerType?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutAttendeesNestedInput
  }

  export type EventAttendeeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    playerType?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventAttendeeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    playerType?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receiver?: UserUpdateOneRequiredWithoutReceivedMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MessageUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MessageUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MessageUncheckedUpdateManyWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GameSessionUpdateWithoutHostInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gameType?: StringFieldUpdateOperationsInput | string
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    gameRoomUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coHost?: UserUpdateOneWithoutCoHostedGameSessionsNestedInput
  }

  export type GameSessionUncheckedUpdateWithoutHostInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gameType?: StringFieldUpdateOperationsInput | string
    coHostId?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    gameRoomUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GameSessionUncheckedUpdateManyWithoutHostInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gameType?: StringFieldUpdateOperationsInput | string
    coHostId?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    gameRoomUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GameSessionUpdateWithoutCoHostInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gameType?: StringFieldUpdateOperationsInput | string
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    gameRoomUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    host?: UserUpdateOneRequiredWithoutHostedGameSessionsNestedInput
  }

  export type GameSessionUncheckedUpdateWithoutCoHostInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gameType?: StringFieldUpdateOperationsInput | string
    hostId?: StringFieldUpdateOperationsInput | string
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    gameRoomUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GameSessionUncheckedUpdateManyWithoutCoHostInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gameType?: StringFieldUpdateOperationsInput | string
    hostId?: StringFieldUpdateOperationsInput | string
    maxPlayers?: IntFieldUpdateOperationsInput | number
    currentPlayers?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    gameRoomUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserSocialLinkUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSocialLinkUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSocialLinkUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserGamingProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    skillLevel?: NullableStringFieldUpdateOperationsInput | string | null
    preferredFormats?: NullableJsonNullValueInput | InputJsonValue
    achievementBadges?: NullableJsonNullValueInput | InputJsonValue
    statistics?: NullableJsonNullValueInput | InputJsonValue
    streamingSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserGamingProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    skillLevel?: NullableStringFieldUpdateOperationsInput | string | null
    preferredFormats?: NullableJsonNullValueInput | InputJsonValue
    achievementBadges?: NullableJsonNullValueInput | InputJsonValue
    statistics?: NullableJsonNullValueInput | InputJsonValue
    streamingSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserGamingProfileUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    skillLevel?: NullableStringFieldUpdateOperationsInput | string | null
    preferredFormats?: NullableJsonNullValueInput | InputJsonValue
    achievementBadges?: NullableJsonNullValueInput | InputJsonValue
    statistics?: NullableJsonNullValueInput | InputJsonValue
    streamingSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendshipUpdateWithoutRequesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiver?: UserUpdateOneRequiredWithoutReceivedFriendRequestsNestedInput
  }

  export type FriendshipUncheckedUpdateWithoutRequesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendshipUncheckedUpdateManyWithoutRequesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendshipUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutSentFriendRequestsNestedInput
  }

  export type FriendshipUncheckedUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    requesterId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendshipUncheckedUpdateManyWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    requesterId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActivityUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActivityUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActivityUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    profileVisibility?: StringFieldUpdateOperationsInput | string
    showOnlineStatus?: BoolFieldUpdateOperationsInput | boolean
    allowFriendRequests?: BoolFieldUpdateOperationsInput | boolean
    allowDirectMessages?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    profileVisibility?: StringFieldUpdateOperationsInput | string
    showOnlineStatus?: BoolFieldUpdateOperationsInput | boolean
    allowFriendRequests?: BoolFieldUpdateOperationsInput | boolean
    allowDirectMessages?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    profileVisibility?: StringFieldUpdateOperationsInput | string
    showOnlineStatus?: BoolFieldUpdateOperationsInput | boolean
    allowFriendRequests?: BoolFieldUpdateOperationsInput | boolean
    allowDirectMessages?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchmakingPreferenceUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedGames?: JsonNullValueInput | InputJsonValue
    selectedFormats?: JsonNullValueInput | InputJsonValue
    powerLevelMin?: IntFieldUpdateOperationsInput | number
    powerLevelMax?: IntFieldUpdateOperationsInput | number
    playstyle?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    onlineOnly?: BoolFieldUpdateOperationsInput | boolean
    availability?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    maxDistance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchmakingPreferenceUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedGames?: JsonNullValueInput | InputJsonValue
    selectedFormats?: JsonNullValueInput | InputJsonValue
    powerLevelMin?: IntFieldUpdateOperationsInput | number
    powerLevelMax?: IntFieldUpdateOperationsInput | number
    playstyle?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    onlineOnly?: BoolFieldUpdateOperationsInput | boolean
    availability?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    maxDistance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchmakingPreferenceUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedGames?: JsonNullValueInput | InputJsonValue
    selectedFormats?: JsonNullValueInput | InputJsonValue
    powerLevelMin?: IntFieldUpdateOperationsInput | number
    powerLevelMax?: IntFieldUpdateOperationsInput | number
    playstyle?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    onlineOnly?: BoolFieldUpdateOperationsInput | boolean
    availability?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    maxDistance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUpdateWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentParticipants?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    community?: CommunityUpdateOneRequiredWithoutTournamentsNestedInput
    participants?: TournamentParticipantUpdateManyWithoutTournamentNestedInput
    rounds?: TournamentRoundUpdateManyWithoutTournamentNestedInput
    matches?: TournamentMatchUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentParticipants?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: TournamentParticipantUncheckedUpdateManyWithoutTournamentNestedInput
    rounds?: TournamentRoundUncheckedUpdateManyWithoutTournamentNestedInput
    matches?: TournamentMatchUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateManyWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentParticipants?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentParticipantUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    seed?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type TournamentParticipantUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    seed?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentParticipantUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    seed?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumPostUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    community?: CommunityUpdateOneRequiredWithoutForumPostsNestedInput
    replies?: ForumReplyUpdateManyWithoutPostNestedInput
    likes?: ForumPostLikeUpdateManyWithoutPostNestedInput
  }

  export type ForumPostUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: ForumReplyUncheckedUpdateManyWithoutPostNestedInput
    likes?: ForumPostLikeUncheckedUpdateManyWithoutPostNestedInput
  }

  export type ForumPostUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumReplyUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    parentReplyId?: NullableStringFieldUpdateOperationsInput | string | null
    likeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: ForumPostUpdateOneRequiredWithoutRepliesNestedInput
    likes?: ForumReplyLikeUpdateManyWithoutReplyNestedInput
  }

  export type ForumReplyUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    parentReplyId?: NullableStringFieldUpdateOperationsInput | string | null
    likeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likes?: ForumReplyLikeUncheckedUpdateManyWithoutReplyNestedInput
  }

  export type ForumReplyUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    parentReplyId?: NullableStringFieldUpdateOperationsInput | string | null
    likeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumPostLikeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: ForumPostUpdateOneRequiredWithoutLikesNestedInput
  }

  export type ForumPostLikeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumPostLikeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumReplyLikeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reply?: ForumReplyUpdateOneRequiredWithoutLikesNestedInput
  }

  export type ForumReplyLikeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    replyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumReplyLikeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    replyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUpdateWithoutPlayer1Input = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutMatchesNestedInput
    round?: TournamentRoundUpdateOneRequiredWithoutMatchesNestedInput
    player2?: UserUpdateOneWithoutTournamentMatchesPlayer2NestedInput
    winner?: UserUpdateOneWithoutTournamentMatchWinsNestedInput
    results?: MatchResultUpdateManyWithoutMatchNestedInput
  }

  export type TournamentMatchUncheckedUpdateWithoutPlayer1Input = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    roundId?: StringFieldUpdateOperationsInput | string
    player2Id?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    results?: MatchResultUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type TournamentMatchUncheckedUpdateManyWithoutPlayer1Input = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    roundId?: StringFieldUpdateOperationsInput | string
    player2Id?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUpdateWithoutPlayer2Input = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutMatchesNestedInput
    round?: TournamentRoundUpdateOneRequiredWithoutMatchesNestedInput
    player1?: UserUpdateOneWithoutTournamentMatchesPlayer1NestedInput
    winner?: UserUpdateOneWithoutTournamentMatchWinsNestedInput
    results?: MatchResultUpdateManyWithoutMatchNestedInput
  }

  export type TournamentMatchUncheckedUpdateWithoutPlayer2Input = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    roundId?: StringFieldUpdateOperationsInput | string
    player1Id?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    results?: MatchResultUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type TournamentMatchUncheckedUpdateManyWithoutPlayer2Input = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    roundId?: StringFieldUpdateOperationsInput | string
    player1Id?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUpdateWithoutWinnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutMatchesNestedInput
    round?: TournamentRoundUpdateOneRequiredWithoutMatchesNestedInput
    player1?: UserUpdateOneWithoutTournamentMatchesPlayer1NestedInput
    player2?: UserUpdateOneWithoutTournamentMatchesPlayer2NestedInput
    results?: MatchResultUpdateManyWithoutMatchNestedInput
  }

  export type TournamentMatchUncheckedUpdateWithoutWinnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    roundId?: StringFieldUpdateOperationsInput | string
    player1Id?: NullableStringFieldUpdateOperationsInput | string | null
    player2Id?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    results?: MatchResultUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type TournamentMatchUncheckedUpdateManyWithoutWinnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    roundId?: StringFieldUpdateOperationsInput | string
    player1Id?: NullableStringFieldUpdateOperationsInput | string | null
    player2Id?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchResultUpdateWithoutWinnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    winnerScore?: IntFieldUpdateOperationsInput | number
    loserScore?: IntFieldUpdateOperationsInput | number
    gameLength?: NullableIntFieldUpdateOperationsInput | number | null
    resultType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: TournamentMatchUpdateOneRequiredWithoutResultsNestedInput
    loser?: UserUpdateOneWithoutMatchResultsLossesNestedInput
    reportedBy?: UserUpdateOneRequiredWithoutMatchResultsReportedNestedInput
    verifiedBy?: UserUpdateOneWithoutMatchResultsVerifiedNestedInput
  }

  export type MatchResultUncheckedUpdateWithoutWinnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    winnerScore?: IntFieldUpdateOperationsInput | number
    loserScore?: IntFieldUpdateOperationsInput | number
    gameLength?: NullableIntFieldUpdateOperationsInput | number | null
    resultType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: StringFieldUpdateOperationsInput | string
    verifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchResultUncheckedUpdateManyWithoutWinnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    winnerScore?: IntFieldUpdateOperationsInput | number
    loserScore?: IntFieldUpdateOperationsInput | number
    gameLength?: NullableIntFieldUpdateOperationsInput | number | null
    resultType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: StringFieldUpdateOperationsInput | string
    verifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchResultUpdateWithoutLoserInput = {
    id?: StringFieldUpdateOperationsInput | string
    winnerScore?: IntFieldUpdateOperationsInput | number
    loserScore?: IntFieldUpdateOperationsInput | number
    gameLength?: NullableIntFieldUpdateOperationsInput | number | null
    resultType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: TournamentMatchUpdateOneRequiredWithoutResultsNestedInput
    winner?: UserUpdateOneRequiredWithoutMatchResultsWinsNestedInput
    reportedBy?: UserUpdateOneRequiredWithoutMatchResultsReportedNestedInput
    verifiedBy?: UserUpdateOneWithoutMatchResultsVerifiedNestedInput
  }

  export type MatchResultUncheckedUpdateWithoutLoserInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    winnerId?: StringFieldUpdateOperationsInput | string
    winnerScore?: IntFieldUpdateOperationsInput | number
    loserScore?: IntFieldUpdateOperationsInput | number
    gameLength?: NullableIntFieldUpdateOperationsInput | number | null
    resultType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: StringFieldUpdateOperationsInput | string
    verifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchResultUncheckedUpdateManyWithoutLoserInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    winnerId?: StringFieldUpdateOperationsInput | string
    winnerScore?: IntFieldUpdateOperationsInput | number
    loserScore?: IntFieldUpdateOperationsInput | number
    gameLength?: NullableIntFieldUpdateOperationsInput | number | null
    resultType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: StringFieldUpdateOperationsInput | string
    verifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchResultUpdateWithoutReportedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    winnerScore?: IntFieldUpdateOperationsInput | number
    loserScore?: IntFieldUpdateOperationsInput | number
    gameLength?: NullableIntFieldUpdateOperationsInput | number | null
    resultType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: TournamentMatchUpdateOneRequiredWithoutResultsNestedInput
    winner?: UserUpdateOneRequiredWithoutMatchResultsWinsNestedInput
    loser?: UserUpdateOneWithoutMatchResultsLossesNestedInput
    verifiedBy?: UserUpdateOneWithoutMatchResultsVerifiedNestedInput
  }

  export type MatchResultUncheckedUpdateWithoutReportedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    winnerId?: StringFieldUpdateOperationsInput | string
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    winnerScore?: IntFieldUpdateOperationsInput | number
    loserScore?: IntFieldUpdateOperationsInput | number
    gameLength?: NullableIntFieldUpdateOperationsInput | number | null
    resultType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchResultUncheckedUpdateManyWithoutReportedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    winnerId?: StringFieldUpdateOperationsInput | string
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    winnerScore?: IntFieldUpdateOperationsInput | number
    loserScore?: IntFieldUpdateOperationsInput | number
    gameLength?: NullableIntFieldUpdateOperationsInput | number | null
    resultType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchResultUpdateWithoutVerifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    winnerScore?: IntFieldUpdateOperationsInput | number
    loserScore?: IntFieldUpdateOperationsInput | number
    gameLength?: NullableIntFieldUpdateOperationsInput | number | null
    resultType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: TournamentMatchUpdateOneRequiredWithoutResultsNestedInput
    winner?: UserUpdateOneRequiredWithoutMatchResultsWinsNestedInput
    loser?: UserUpdateOneWithoutMatchResultsLossesNestedInput
    reportedBy?: UserUpdateOneRequiredWithoutMatchResultsReportedNestedInput
  }

  export type MatchResultUncheckedUpdateWithoutVerifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    winnerId?: StringFieldUpdateOperationsInput | string
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    winnerScore?: IntFieldUpdateOperationsInput | number
    loserScore?: IntFieldUpdateOperationsInput | number
    gameLength?: NullableIntFieldUpdateOperationsInput | number | null
    resultType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchResultUncheckedUpdateManyWithoutVerifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    winnerId?: StringFieldUpdateOperationsInput | string
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    winnerScore?: IntFieldUpdateOperationsInput | number
    loserScore?: IntFieldUpdateOperationsInput | number
    gameLength?: NullableIntFieldUpdateOperationsInput | number | null
    resultType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCommunityCreateManyCommunityInput = {
    id?: string
    userId: string
    isPrimary?: boolean
    joinedAt?: Date | string
  }

  export type ThemePreferenceCreateManyCommunityInput = {
    id?: string
    userId: string
    themeMode?: string
    customColors?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
  }

  export type EventCreateManyCommunityInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    date: string
    time: string
    location: string
    creatorId: string
    hostId: string
    coHostId?: string | null
    maxAttendees?: number | null
    isPublic?: boolean
    status?: string
    playerSlots?: number
    alternateSlots?: number
    gameFormat?: string | null
    powerLevel?: number | null
    isRecurring?: boolean
    recurrencePattern?: string | null
    recurrenceInterval?: number
    recurrenceEndDate?: string | null
    parentEventId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ForumPostCreateManyCommunityInput = {
    id?: string
    title: string
    content: string
    authorId: string
    category: string
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    likeCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentCreateManyCommunityInput = {
    id?: string
    name: string
    description?: string | null
    gameFormat: string
    organizerId: string
    maxParticipants?: number
    currentParticipants?: number
    status?: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: string | null
    rules?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCommunityUpdateWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserCommunitiesNestedInput
  }

  export type UserCommunityUncheckedUpdateWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCommunityUncheckedUpdateManyWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThemePreferenceUpdateWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    themeMode?: StringFieldUpdateOperationsInput | string
    customColors?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutThemePreferencesNestedInput
  }

  export type ThemePreferenceUncheckedUpdateWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    themeMode?: StringFieldUpdateOperationsInput | string
    customColors?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThemePreferenceUncheckedUpdateManyWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    themeMode?: StringFieldUpdateOperationsInput | string
    customColors?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUpdateWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    playerSlots?: IntFieldUpdateOperationsInput | number
    alternateSlots?: IntFieldUpdateOperationsInput | number
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    powerLevel?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceInterval?: IntFieldUpdateOperationsInput | number
    recurrenceEndDate?: NullableStringFieldUpdateOperationsInput | string | null
    parentEventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedEventsNestedInput
    host?: UserUpdateOneRequiredWithoutHostedEventsNestedInput
    coHost?: UserUpdateOneWithoutCoHostedEventsNestedInput
    attendees?: EventAttendeeUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    hostId?: StringFieldUpdateOperationsInput | string
    coHostId?: NullableStringFieldUpdateOperationsInput | string | null
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    playerSlots?: IntFieldUpdateOperationsInput | number
    alternateSlots?: IntFieldUpdateOperationsInput | number
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    powerLevel?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceInterval?: IntFieldUpdateOperationsInput | number
    recurrenceEndDate?: NullableStringFieldUpdateOperationsInput | string | null
    parentEventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: EventAttendeeUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    hostId?: StringFieldUpdateOperationsInput | string
    coHostId?: NullableStringFieldUpdateOperationsInput | string | null
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    playerSlots?: IntFieldUpdateOperationsInput | number
    alternateSlots?: IntFieldUpdateOperationsInput | number
    gameFormat?: NullableStringFieldUpdateOperationsInput | string | null
    powerLevel?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurrencePattern?: NullableStringFieldUpdateOperationsInput | string | null
    recurrenceInterval?: IntFieldUpdateOperationsInput | number
    recurrenceEndDate?: NullableStringFieldUpdateOperationsInput | string | null
    parentEventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumPostUpdateWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutForumPostsNestedInput
    replies?: ForumReplyUpdateManyWithoutPostNestedInput
    likes?: ForumPostLikeUpdateManyWithoutPostNestedInput
  }

  export type ForumPostUncheckedUpdateWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: ForumReplyUncheckedUpdateManyWithoutPostNestedInput
    likes?: ForumPostLikeUncheckedUpdateManyWithoutPostNestedInput
  }

  export type ForumPostUncheckedUpdateManyWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUpdateWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentParticipants?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: UserUpdateOneRequiredWithoutOrganizedTournamentsNestedInput
    participants?: TournamentParticipantUpdateManyWithoutTournamentNestedInput
    rounds?: TournamentRoundUpdateManyWithoutTournamentNestedInput
    matches?: TournamentMatchUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: StringFieldUpdateOperationsInput | string
    organizerId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentParticipants?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: TournamentParticipantUncheckedUpdateManyWithoutTournamentNestedInput
    rounds?: TournamentRoundUncheckedUpdateManyWithoutTournamentNestedInput
    matches?: TournamentMatchUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateManyWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gameFormat?: StringFieldUpdateOperationsInput | string
    organizerId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentParticipants?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bracketData?: NullableJsonNullValueInput | InputJsonValue
    prizePool?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventAttendeeCreateManyEventInput = {
    id?: string
    userId: string
    status?: string
    role?: string
    playerType?: string
    joinedAt?: Date | string
  }

  export type EventAttendeeUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    playerType?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEventAttendeesNestedInput
  }

  export type EventAttendeeUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    playerType?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventAttendeeUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    playerType?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentParticipantCreateManyTournamentInput = {
    id?: string
    userId: string
    seed?: number | null
    status?: string
    joinedAt?: Date | string
  }

  export type TournamentRoundCreateManyTournamentInput = {
    id?: string
    roundNumber: number
    name?: string | null
    status?: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
  }

  export type TournamentMatchCreateManyTournamentInput = {
    id?: string
    roundId: string
    player1Id?: string | null
    player2Id?: string | null
    winnerId?: string | null
    status?: string
    gameSessionId?: string | null
    bracketPosition?: number | null
    player1Score?: number
    player2Score?: number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
  }

  export type TournamentParticipantUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    seed?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTournamentParticipationNestedInput
  }

  export type TournamentParticipantUncheckedUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    seed?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentParticipantUncheckedUpdateManyWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    seed?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentRoundUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: TournamentMatchUpdateManyWithoutRoundNestedInput
  }

  export type TournamentRoundUncheckedUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: TournamentMatchUncheckedUpdateManyWithoutRoundNestedInput
  }

  export type TournamentRoundUncheckedUpdateManyWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    round?: TournamentRoundUpdateOneRequiredWithoutMatchesNestedInput
    player1?: UserUpdateOneWithoutTournamentMatchesPlayer1NestedInput
    player2?: UserUpdateOneWithoutTournamentMatchesPlayer2NestedInput
    winner?: UserUpdateOneWithoutTournamentMatchWinsNestedInput
    results?: MatchResultUpdateManyWithoutMatchNestedInput
  }

  export type TournamentMatchUncheckedUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    roundId?: StringFieldUpdateOperationsInput | string
    player1Id?: NullableStringFieldUpdateOperationsInput | string | null
    player2Id?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    results?: MatchResultUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type TournamentMatchUncheckedUpdateManyWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    roundId?: StringFieldUpdateOperationsInput | string
    player1Id?: NullableStringFieldUpdateOperationsInput | string | null
    player2Id?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentMatchCreateManyRoundInput = {
    id?: string
    tournamentId: string
    player1Id?: string | null
    player2Id?: string | null
    winnerId?: string | null
    status?: string
    gameSessionId?: string | null
    bracketPosition?: number | null
    player1Score?: number
    player2Score?: number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
  }

  export type TournamentMatchUpdateWithoutRoundInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutMatchesNestedInput
    player1?: UserUpdateOneWithoutTournamentMatchesPlayer1NestedInput
    player2?: UserUpdateOneWithoutTournamentMatchesPlayer2NestedInput
    winner?: UserUpdateOneWithoutTournamentMatchWinsNestedInput
    results?: MatchResultUpdateManyWithoutMatchNestedInput
  }

  export type TournamentMatchUncheckedUpdateWithoutRoundInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    player1Id?: NullableStringFieldUpdateOperationsInput | string | null
    player2Id?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    results?: MatchResultUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type TournamentMatchUncheckedUpdateManyWithoutRoundInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    player1Id?: NullableStringFieldUpdateOperationsInput | string | null
    player2Id?: NullableStringFieldUpdateOperationsInput | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    gameSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    bracketPosition?: NullableIntFieldUpdateOperationsInput | number | null
    player1Score?: IntFieldUpdateOperationsInput | number
    player2Score?: IntFieldUpdateOperationsInput | number
    matchData?: NullableJsonNullValueInput | InputJsonValue
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchResultCreateManyMatchInput = {
    id?: string
    winnerId: string
    loserId?: string | null
    winnerScore: number
    loserScore: number
    gameLength?: number | null
    resultType?: string
    notes?: string | null
    reportedById: string
    verifiedById?: string | null
    isVerified?: boolean
    createdAt?: Date | string
  }

  export type MatchResultUpdateWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    winnerScore?: IntFieldUpdateOperationsInput | number
    loserScore?: IntFieldUpdateOperationsInput | number
    gameLength?: NullableIntFieldUpdateOperationsInput | number | null
    resultType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    winner?: UserUpdateOneRequiredWithoutMatchResultsWinsNestedInput
    loser?: UserUpdateOneWithoutMatchResultsLossesNestedInput
    reportedBy?: UserUpdateOneRequiredWithoutMatchResultsReportedNestedInput
    verifiedBy?: UserUpdateOneWithoutMatchResultsVerifiedNestedInput
  }

  export type MatchResultUncheckedUpdateWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    winnerId?: StringFieldUpdateOperationsInput | string
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    winnerScore?: IntFieldUpdateOperationsInput | number
    loserScore?: IntFieldUpdateOperationsInput | number
    gameLength?: NullableIntFieldUpdateOperationsInput | number | null
    resultType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: StringFieldUpdateOperationsInput | string
    verifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchResultUncheckedUpdateManyWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    winnerId?: StringFieldUpdateOperationsInput | string
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    winnerScore?: IntFieldUpdateOperationsInput | number
    loserScore?: IntFieldUpdateOperationsInput | number
    gameLength?: NullableIntFieldUpdateOperationsInput | number | null
    resultType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: StringFieldUpdateOperationsInput | string
    verifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumReplyCreateManyPostInput = {
    id?: string
    authorId: string
    content: string
    parentReplyId?: string | null
    likeCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ForumPostLikeCreateManyPostInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type ForumReplyUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    parentReplyId?: NullableStringFieldUpdateOperationsInput | string | null
    likeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutForumRepliesNestedInput
    likes?: ForumReplyLikeUpdateManyWithoutReplyNestedInput
  }

  export type ForumReplyUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    parentReplyId?: NullableStringFieldUpdateOperationsInput | string | null
    likeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likes?: ForumReplyLikeUncheckedUpdateManyWithoutReplyNestedInput
  }

  export type ForumReplyUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    parentReplyId?: NullableStringFieldUpdateOperationsInput | string | null
    likeCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumPostLikeUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutForumPostLikesNestedInput
  }

  export type ForumPostLikeUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumPostLikeUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumReplyLikeCreateManyReplyInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type ForumReplyLikeUpdateWithoutReplyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutForumReplyLikesNestedInput
  }

  export type ForumReplyLikeUncheckedUpdateWithoutReplyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ForumReplyLikeUncheckedUpdateManyWithoutReplyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}