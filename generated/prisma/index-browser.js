
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.LegacySessionScalarFieldEnum = {
  sid: 'sid',
  sess: 'sess',
  expire: 'expire'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  profileImageUrl: 'profileImageUrl',
  primaryCommunity: 'primaryCommunity',
  username: 'username',
  bio: 'bio',
  location: 'location',
  website: 'website',
  status: 'status',
  statusMessage: 'statusMessage',
  timezone: 'timezone',
  dateOfBirth: 'dateOfBirth',
  isPrivate: 'isPrivate',
  showOnlineStatus: 'showOnlineStatus',
  allowDirectMessages: 'allowDirectMessages',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommunityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  themeColor: 'themeColor',
  iconClass: 'iconClass',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.UserCommunityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  communityId: 'communityId',
  isPrimary: 'isPrimary',
  joinedAt: 'joinedAt'
};

exports.Prisma.ThemePreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  communityId: 'communityId',
  themeMode: 'themeMode',
  customColors: 'customColors',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  date: 'date',
  time: 'time',
  location: 'location',
  communityId: 'communityId',
  creatorId: 'creatorId',
  hostId: 'hostId',
  coHostId: 'coHostId',
  maxAttendees: 'maxAttendees',
  isPublic: 'isPublic',
  status: 'status',
  playerSlots: 'playerSlots',
  alternateSlots: 'alternateSlots',
  gameFormat: 'gameFormat',
  powerLevel: 'powerLevel',
  isRecurring: 'isRecurring',
  recurrencePattern: 'recurrencePattern',
  recurrenceInterval: 'recurrenceInterval',
  recurrenceEndDate: 'recurrenceEndDate',
  parentEventId: 'parentEventId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventAttendeeScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  userId: 'userId',
  status: 'status',
  role: 'role',
  playerType: 'playerType',
  joinedAt: 'joinedAt'
};

exports.Prisma.TournamentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  gameFormat: 'gameFormat',
  communityId: 'communityId',
  organizerId: 'organizerId',
  maxParticipants: 'maxParticipants',
  currentParticipants: 'currentParticipants',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  bracketData: 'bracketData',
  prizePool: 'prizePool',
  rules: 'rules',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TournamentParticipantScalarFieldEnum = {
  id: 'id',
  tournamentId: 'tournamentId',
  userId: 'userId',
  seed: 'seed',
  status: 'status',
  joinedAt: 'joinedAt'
};

exports.Prisma.TournamentFormatScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  supportsSeeding: 'supportsSeeding',
  requiresEvenParticipants: 'requiresEvenParticipants',
  isActive: 'isActive'
};

exports.Prisma.TournamentRoundScalarFieldEnum = {
  id: 'id',
  tournamentId: 'tournamentId',
  roundNumber: 'roundNumber',
  name: 'name',
  status: 'status',
  startTime: 'startTime',
  endTime: 'endTime',
  createdAt: 'createdAt'
};

exports.Prisma.TournamentMatchScalarFieldEnum = {
  id: 'id',
  tournamentId: 'tournamentId',
  roundId: 'roundId',
  player1Id: 'player1Id',
  player2Id: 'player2Id',
  winnerId: 'winnerId',
  status: 'status',
  gameSessionId: 'gameSessionId',
  bracketPosition: 'bracketPosition',
  player1Score: 'player1Score',
  player2Score: 'player2Score',
  matchData: 'matchData',
  startTime: 'startTime',
  endTime: 'endTime',
  createdAt: 'createdAt'
};

exports.Prisma.MatchResultScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  winnerId: 'winnerId',
  loserId: 'loserId',
  winnerScore: 'winnerScore',
  loserScore: 'loserScore',
  gameLength: 'gameLength',
  resultType: 'resultType',
  notes: 'notes',
  reportedById: 'reportedById',
  verifiedById: 'verifiedById',
  isVerified: 'isVerified',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  actionUrl: 'actionUrl',
  createdAt: 'createdAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  receiverId: 'receiverId',
  subject: 'subject',
  content: 'content',
  isRead: 'isRead',
  createdAt: 'createdAt',
  editedAt: 'editedAt'
};

exports.Prisma.GameSessionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  gameType: 'gameType',
  hostId: 'hostId',
  coHostId: 'coHostId',
  maxPlayers: 'maxPlayers',
  currentPlayers: 'currentPlayers',
  status: 'status',
  isPrivate: 'isPrivate',
  gameRoomUrl: 'gameRoomUrl',
  settings: 'settings',
  createdAt: 'createdAt',
  startedAt: 'startedAt',
  endedAt: 'endedAt'
};

exports.Prisma.UserSocialLinkScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  platform: 'platform',
  url: 'url',
  username: 'username',
  isPublic: 'isPublic',
  createdAt: 'createdAt'
};

exports.Prisma.UserGamingProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  platform: 'platform',
  username: 'username',
  skillLevel: 'skillLevel',
  preferredFormats: 'preferredFormats',
  achievementBadges: 'achievementBadges',
  statistics: 'statistics',
  streamingSettings: 'streamingSettings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FriendshipScalarFieldEnum = {
  id: 'id',
  requesterId: 'requesterId',
  receiverId: 'receiverId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  description: 'description',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.UserSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  emailNotifications: 'emailNotifications',
  pushNotifications: 'pushNotifications',
  profileVisibility: 'profileVisibility',
  showOnlineStatus: 'showOnlineStatus',
  allowFriendRequests: 'allowFriendRequests',
  allowDirectMessages: 'allowDirectMessages',
  language: 'language',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatchmakingPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  selectedGames: 'selectedGames',
  selectedFormats: 'selectedFormats',
  powerLevelMin: 'powerLevelMin',
  powerLevelMax: 'powerLevelMax',
  playstyle: 'playstyle',
  location: 'location',
  onlineOnly: 'onlineOnly',
  availability: 'availability',
  language: 'language',
  maxDistance: 'maxDistance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumPostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  authorId: 'authorId',
  communityId: 'communityId',
  category: 'category',
  isPinned: 'isPinned',
  isLocked: 'isLocked',
  viewCount: 'viewCount',
  likeCount: 'likeCount',
  replyCount: 'replyCount',
  lastReplyAt: 'lastReplyAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumReplyScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  authorId: 'authorId',
  content: 'content',
  parentReplyId: 'parentReplyId',
  likeCount: 'likeCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumPostLikeScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.ForumReplyLikeScalarFieldEnum = {
  id: 'id',
  replyId: 'replyId',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  isUsed: 'isUsed',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  LegacySession: 'LegacySession',
  User: 'User',
  Community: 'Community',
  UserCommunity: 'UserCommunity',
  ThemePreference: 'ThemePreference',
  Event: 'Event',
  EventAttendee: 'EventAttendee',
  Tournament: 'Tournament',
  TournamentParticipant: 'TournamentParticipant',
  TournamentFormat: 'TournamentFormat',
  TournamentRound: 'TournamentRound',
  TournamentMatch: 'TournamentMatch',
  MatchResult: 'MatchResult',
  Notification: 'Notification',
  Message: 'Message',
  GameSession: 'GameSession',
  UserSocialLink: 'UserSocialLink',
  UserGamingProfile: 'UserGamingProfile',
  Friendship: 'Friendship',
  UserActivity: 'UserActivity',
  UserSettings: 'UserSettings',
  MatchmakingPreference: 'MatchmakingPreference',
  ForumPost: 'ForumPost',
  ForumReply: 'ForumReply',
  ForumPostLike: 'ForumPostLike',
  ForumReplyLike: 'ForumReplyLike',
  PasswordResetToken: 'PasswordResetToken'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
