# Optimized Cloud Build configuration for frontend deployment
# Improvements:
# - Docker layer caching for faster builds
# - Parallel image pushes
# - Optimized machine type (E2_HIGHCPU_4 instead of 8)
# - Reduced timeout (12 min instead of 20)

steps:
  # Pull previous image for cache
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker pull gcr.io/$PROJECT_ID/shuffle-and-sync-frontend:latest || exit 0
    id: 'pull-cache'

  # Build with cache from previous image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '--cache-from=gcr.io/$PROJECT_ID/shuffle-and-sync-frontend:latest'
      - '-f'
      - 'Dockerfile.frontend.optimized'
      - '-t'
      - 'gcr.io/$PROJECT_ID/shuffle-and-sync-frontend:${_IMAGE_TAG}'
      - '-t'
      - 'gcr.io/$PROJECT_ID/shuffle-and-sync-frontend:latest'
      - '.'
    id: 'build-frontend'
    waitFor: ['pull-cache']

  # Push tagged image (runs in parallel with latest push)
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/shuffle-and-sync-frontend:${_IMAGE_TAG}'
    id: 'push-frontend-tag'
    waitFor: ['build-frontend']

  # Push latest tag (runs in parallel with tagged push)
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/shuffle-and-sync-frontend:latest'
    id: 'push-frontend-latest'
    waitFor: ['build-frontend']

  # Deploy to Cloud Run (waits for both pushes)
  # IMPORTANT: This deploys to the service name specified in substitutions (_SERVICE_NAME)
  # If your existing service is 'shuffle-sync-front', update _SERVICE_NAME below or use:
  # gcloud builds submit --config cloudbuild-frontend.optimized.yaml --substitutions=_SERVICE_NAME=shuffle-sync-front
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image'
      - 'gcr.io/$PROJECT_ID/shuffle-and-sync-frontend:${_IMAGE_TAG}'
      - '--platform'
      - 'managed'
      - '--region'
      - '${_REGION}'
      - '--allow-unauthenticated'
      # Cloud Run automatically sets PORT=8080 environment variable
      # The container's entrypoint script will configure NGINX to listen on that port
      - '--memory'
      - '512Mi'
      - '--cpu'
      - '1'
      - '--min-instances'
      - '0'
      - '--max-instances'
      - '5'
      - '--timeout'
      - '60'
      # CRITICAL: Set BACKEND_URL to your actual backend service URL
      # Update this URL with your deployed backend service
      # Get it with: gcloud run services describe shuffle-and-sync-backend --region=${_REGION} --format='value(status.url)'
      - '--set-env-vars'
      - 'BACKEND_URL=https://shuffle-and-sync-backend-858080302197.us-central1.run.app'
    id: 'deploy-frontend'
    waitFor: ['push-frontend-tag', 'push-frontend-latest']

# Reduced timeout from 1200s (20 min) to 720s (12 min)
timeout: 720s

# Configure build options
options:
  # Reduced from E2_HIGHCPU_8 to E2_HIGHCPU_4 (cost optimization)
  machineType: 'E2_HIGHCPU_4'
  logging: CLOUD_LOGGING_ONLY
  # Enable dynamic substitutions
  substitution_option: 'ALLOW_LOOSE'
  dynamic_substitutions: true

# Substitutions for variables
# These provide default values that can be overridden with --substitutions flag
substitutions:
  _REGION: us-central1
  _SERVICE_NAME: shuffle-and-sync-frontend  # Change to 'shuffle-sync-front' if that's your deployed service name
  _IMAGE_TAG: $BUILD_ID

# Images to be stored in Container Registry
images:
  - 'gcr.io/$PROJECT_ID/shuffle-and-sync-frontend:${_IMAGE_TAG}'
  - 'gcr.io/$PROJECT_ID/shuffle-and-sync-frontend:latest'

# Note: To use this configuration, run:
# gcloud builds submit --config cloudbuild-frontend.optimized.yaml
#
# Expected improvements:
# - Build time: 30-40% faster due to layer caching
# - Cost: ~40% reduction due to smaller machine type
# - Image size: 92% smaller (~15-25MB vs ~300MB)
