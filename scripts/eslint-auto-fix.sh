#!/bin/bash
# ESLint Automated Fix Script
# This script provides automated fixes for common ESLint warnings

set -e

echo "ðŸ”§ ESLint Automated Fix Script"
echo "================================"
echo ""

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to print status
print_status() {
    echo -e "${GREEN}âœ“${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}âš ${NC} $1"
}

print_error() {
    echo -e "${RED}âœ—${NC} $1"
}

# Check if we're in the right directory
if [ ! -f "package.json" ]; then
    print_error "Must be run from project root directory"
    exit 1
fi

# Get initial warning count
echo "ðŸ“Š Checking current ESLint status..."
INITIAL_WARNINGS=$(npm run lint 2>&1 | grep -o "[0-9]* problems" | head -1 | awk '{print $1}')
print_status "Current warnings: $INITIAL_WARNINGS"
echo ""

# Phase 1: Auto-fix with ESLint
echo "ðŸ”„ Phase 1: Running ESLint auto-fix..."
npm run lint
print_status "ESLint auto-fix complete"
echo ""

# Phase 2: Fix common unused variable patterns
echo "ðŸ”„ Phase 2: Fixing unused destructured variables..."

# Prefix unused 'container' variables with underscore
find client server -name "*.ts" -o -name "*.tsx" | while read file; do
    if grep -q "const { container } = " "$file"; then
        sed -i 's/const { container }/const { container: _container }/g' "$file"
        sed -i 's/const { \([^}]*\), container }/const { \1, container: _container }/g' "$file"
        sed -i 's/const { container, \([^}]*\) }/const { container: _container, \1 }/g' "$file"
        print_status "Fixed: $file"
    fi
done

# Prefix unused 'user' variables in tests
find client server -name "*.test.ts" -o -name "*.test.tsx" | while read file; do
    if grep -q "const user = userEvent.setup();" "$file" 2>/dev/null; then
        # Check if 'user' is actually used after declaration
        if ! grep -q "await user\." "$file"; then
            sed -i 's/const user = userEvent.setup();/const _user = userEvent.setup();/g' "$file"
            print_status "Fixed unused user: $file"
        fi
    fi
done

print_status "Unused variable fixes applied"
echo ""

# Phase 3: Remove unused imports (basic patterns)
echo "ðŸ”„ Phase 3: Removing obvious unused imports..."

# This is a simple example - in practice, you'd want to be more careful
# as removing imports can break code if they're used in ways grep doesn't catch

# Example: Remove unused 'vi' import from vitest when only types are used
find client server -name "*.test.ts" -o -name "*.test.tsx" | while read file; do
    if grep -q "import.*vi.*from ['\"]vitest['\"]" "$file"; then
        # Check if vi is actually used (this is a simplified check)
        if ! grep -q "vi\." "$file" && ! grep -q "vi," "$file"; then
            print_warning "Potential unused vi import in: $file (manual review recommended)"
        fi
    fi
done

print_status "Import analysis complete"
echo ""

# Phase 4: Generate detailed report
echo "ðŸ“‹ Phase 4: Generating detailed report..."

npm run lint 2>&1 > eslint-detailed-report.txt

FINAL_WARNINGS=$(npm run lint 2>&1 | grep -o "[0-9]* problems" | head -1 | awk '{print $1}')
WARNINGS_FIXED=$((INITIAL_WARNINGS - FINAL_WARNINGS))

echo ""
echo "================================"
echo "ðŸ“Š Fix Summary"
echo "================================"
print_status "Initial warnings: $INITIAL_WARNINGS"
print_status "Final warnings: $FINAL_WARNINGS"
print_status "Warnings fixed: $WARNINGS_FIXED"
echo ""
print_status "Detailed report saved to: eslint-detailed-report.txt"
echo ""

# Generate breakdown by warning type
echo "ðŸ“Š Warning breakdown by type:"
npm run lint 2>&1 | grep "warning" | awk '{print $NF}' | sort | uniq -c | sort -rn | head -10

echo ""
echo "================================"
echo "âœ¨ Next Steps:"
echo "================================"
echo "1. Review the changes with: git diff"
echo "2. Run tests to ensure nothing broke: npm test"
echo "3. Commit the fixes: git add . && git commit -m 'Fix ESLint warnings'"
echo "4. For remaining warnings, see ESLINT_FIX_STRATEGY.md"
echo ""

# Create a summary file
cat > eslint-fix-summary.md << EOF
# ESLint Fix Summary - $(date +%Y-%m-%d)

## Results
- **Initial Warnings**: $INITIAL_WARNINGS
- **Final Warnings**: $FINAL_WARNINGS
- **Warnings Fixed**: $WARNINGS_FIXED

## Fixes Applied
1. âœ… ESLint auto-fix (--fix)
2. âœ… Prefixed unused \`container\` variables with underscore
3. âœ… Identified unused \`user\` variables in tests
4. âœ… Analyzed imports for unused patterns

## Remaining Work
See detailed breakdown in \`eslint-detailed-report.txt\` and strategy in \`ESLINT_FIX_STRATEGY.md\`.

## Next Steps
1. Review changes: \`git diff\`
2. Run tests: \`npm test\`
3. Commit: \`git add . && git commit -m "chore: fix ESLint warnings"\`

---
Generated by: \`./scripts/eslint-auto-fix.sh\`
EOF

print_status "Summary saved to: eslint-fix-summary.md"
echo ""
print_status "Automated fixes complete! ðŸŽ‰"
