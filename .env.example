# ==============================================
# SHUFFLE & SYNC - ENVIRONMENT VARIABLES
# ==============================================
# Copy this file to .env.local for development
# For production, see .env.production.template

# ==============================================
# üî¥ CRITICAL VARIABLES - REQUIRED FOR STARTUP
# ==============================================

# Database Connection
# SQLite Cloud connection string or local SQLite file path
# Format (Cloud): sqlitecloud://host:port/database?apikey=YOUR_API_KEY
# Format (Local): ./dev.db or file:./dev.db
# Example (Cloud): sqlitecloud://cgqwvg83nk.g4.sqlite.cloud:8860/shuffleandsync?apikey=YOUR_API_KEY
# Example (Local): ./dev.db
DATABASE_URL=sqlitecloud://your-host.sqlite.cloud:8860/shuffleandsync?apikey=YOUR_API_KEY

# Direct database URL for migrations (if different from DATABASE_URL)
# Used by Drizzle for schema operations
# Example (Cloud): sqlitecloud://your-host.sqlite.cloud:8860/shuffleandsync?apikey=YOUR_API_KEY
# Example (Local): ./dev.db
DATABASE_DIRECT_URL=

# Authentication Secret
# Must be at least 32 characters long
# Use: openssl rand -base64 32
# SECURITY: Change from default value immediately!
AUTH_SECRET=demo-secret-key-for-development-only-not-for-production

# Application Base URL
# Used for OAuth callbacks and redirects
# OPTIONAL in Cloud Run/proxy environments - auto-detects from request headers
# Set this only if you need to override automatic detection
# Development: http://localhost:3000 or http://localhost:5000
# Production: https://your-domain.com or leave empty for auto-detection
# AUTH_URL=http://localhost:3000

# Trust host header (required for Auth.js in proxy/Cloud Run environments)
# Enables automatic URL detection from X-Forwarded-Host and X-Forwarded-Proto headers
# Default: true (can be omitted)
AUTH_TRUST_HOST=true

# ==============================================
# üü° AUTHENTICATION PROVIDERS
# ==============================================

# Google OAuth 2.0 (Primary Authentication)
# Get credentials from: https://console.developers.google.com
# Optional: Leave empty to disable Google OAuth
# Required for: User authentication, Google Calendar integration
# Configure authorized redirect URIs in Google Console:
#   - http://localhost:3000/api/auth/callback/google (development)
#   - https://your-domain.com/api/auth/callback/google (production)
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret

# ==============================================
# üëë ADMINISTRATOR CONFIGURATION
# ==============================================

# Master Administrator Email
# Email address of the primary system administrator
# This user will automatically receive super_admin role on first login
# IMPORTANT: Set this before deploying to production
# Example: admin@yourdomain.com
MASTER_ADMIN_EMAIL=admin@shuffleandsync.com

# Master Administrator Password (Optional - for credentials auth)
# Set this if you want to create an admin account with credentials
# If not set, admin must use OAuth (Google) authentication
# SECURITY: Use a strong password (min 12 chars, mixed case, numbers, special)
# Generate with: openssl rand -base64 16
MASTER_ADMIN_PASSWORD=

# ==============================================
# üü¢ OPTIONAL SERVICES
# ==============================================

# Email Service (SendGrid)
# Get API key from: https://app.sendgrid.com/settings/api_keys
# Used for: Transactional emails, notifications
# Example: SG.xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
SENDGRID_API_KEY=

# SendGrid Sender Email
# Default sender email address for all emails
# Must be verified in SendGrid
# Example: noreply@yourdomain.com
SENDGRID_SENDER=

# Stream Encryption Key
# Must be exactly 32 characters long
# Used for: Encrypting sensitive streaming data
# Generate with: openssl rand -hex 16
STREAM_KEY_ENCRYPTION_KEY=

# ==============================================
# üîµ STREAMING PLATFORM INTEGRATIONS
# ==============================================

# Twitch Integration
# Get credentials from: https://dev.twitch.tv/console/apps
# Used for: Twitch stream status, OAuth
TWITCH_CLIENT_ID=
TWITCH_CLIENT_SECRET=

# Twitch EventSub Webhooks
# Generate secure random token (16+ characters)
# Used for: Receiving real-time Twitch events
# Generate with: openssl rand -hex 16
TWITCH_EVENTSUB_SECRET=

# YouTube API
# Get API key from: https://console.developers.google.com
# Used for: YouTube stream status, metadata
YOUTUBE_API_KEY=

# YouTube OAuth (for advanced YouTube features)
# Get credentials from: https://console.developers.google.com
# Used for: YouTube OAuth flow, live streaming management
YOUTUBE_CLIENT_ID=
YOUTUBE_CLIENT_SECRET=

# YouTube Webhook Verification Token
# Generate secure random token (16+ characters)
# Used for: Verifying YouTube webhook callbacks
YOUTUBE_WEBHOOK_VERIFY_TOKEN=

# Facebook Gaming Integration
# Get credentials from: https://developers.facebook.com
# Used for: Facebook Gaming stream status, OAuth
FACEBOOK_APP_ID=
FACEBOOK_APP_SECRET=

# Facebook Webhook Verification Token
# Generate secure random token (16+ characters)
# Used for: Verifying Facebook webhook callbacks
FACEBOOK_WEBHOOK_VERIFY_TOKEN=

# Discord Bot Integration
# Get token from: https://discord.com/developers/applications
# Used for: Discord notifications, community integration
DISCORD_BOT_TOKEN=

# ==============================================
# ‚öôÔ∏è APPLICATION CONFIGURATION
# ==============================================

# Environment
# Values: development, production, test
NODE_ENV=development

# Server Port
# Development: 3000, 5000, or any available port
# Production: Set by deployment platform (usually 8080)
PORT=3000

# ==============================================
# üõ°Ô∏è SECURITY & CORS
# ==============================================

# CORS Configuration
# Comma-separated list of allowed origins for Cross-Origin Resource Sharing
# Development: http://localhost:3000,http://localhost:5000,http://localhost:5173
# Production: https://your-domain.com,https://www.your-domain.com
# Note: CORS_ORIGINS is preferred, but ALLOWED_ORIGINS is also supported for backward compatibility
CORS_ORIGINS=http://localhost:3000,http://localhost:5000,http://localhost:5173

# Legacy CORS variable (deprecated - use CORS_ORIGINS instead)
# Kept for backward compatibility with existing deployments
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5000

# CORS Allow Credentials
# Allow cookies and authentication headers in CORS requests
# Default: true (recommended for authentication flows)
CORS_ALLOW_CREDENTIALS=true

# CORS Max Age
# How long (in seconds) browsers should cache CORS preflight responses
# Default: 86400 (24 hours)
CORS_MAX_AGE=86400

# CORS Allowed Methods
# Comma-separated list of HTTP methods allowed in CORS requests
# Default: GET,POST,PUT,PATCH,DELETE,OPTIONS
CORS_METHODS=GET,POST,PUT,PATCH,DELETE,OPTIONS

# Rate Limiting
# Time window in milliseconds (default: 15 minutes)
RATE_LIMIT_WINDOW_MS=900000
# Maximum requests per window (default: 100)
RATE_LIMIT_MAX_REQUESTS=100

# Session Configuration
# Session max age in milliseconds (default: 7 days)
SESSION_MAX_AGE=604800000

# ==============================================
# üóÑÔ∏è CACHING & PERFORMANCE
# ==============================================

# Redis Cache (Optional)
# Format: redis://username:password@host:port
# Example: redis://localhost:6379
# Leave empty to disable caching
REDIS_URL=

# ==============================================
# üìä MONITORING & LOGGING
# ==============================================

# Log Level
# Values: error, warn, info, debug
# Production: info or warn
# Development: debug
LOG_LEVEL=debug

# Structured Logging
# Enable JSON-formatted structured logging for production
# Default: true in production, false in development
# Set to 'false' to disable structured logging
STRUCTURED_LOGGING=true

# Error Tracking (Sentry)
# Get DSN from: https://sentry.io
# Used for: Error tracking and monitoring
# Example: https://abc123@o123456.ingest.sentry.io/123456
SENTRY_DSN=

# Google Cloud Project (for monitoring)
# Used for: Cloud Logging, monitoring services
GOOGLE_CLOUD_PROJECT=

# Monitoring Service Configuration
# Enable/disable the monitoring service
MONITORING_ENABLED=true

# Monitoring collection intervals (milliseconds)
MONITORING_METRICS_INTERVAL=60000
MONITORING_HEALTH_INTERVAL=30000
MONITORING_ALERT_INTERVAL=10000

# Monitoring thresholds
MONITORING_CPU_WARNING=70
MONITORING_CPU_CRITICAL=90
MONITORING_MEMORY_WARNING=80
MONITORING_MEMORY_CRITICAL=95
MONITORING_DISK_WARNING=85
MONITORING_DISK_CRITICAL=95
MONITORING_RESPONSE_WARNING=1000
MONITORING_RESPONSE_CRITICAL=5000
MONITORING_ERROR_WARNING=5
MONITORING_ERROR_CRITICAL=10

# Monitoring data retention (days)
MONITORING_METRICS_RETENTION=7
MONITORING_ALERTS_RETENTION=30

# Alerting configuration
MONITORING_ALERTING_ENABLED=true
MONITORING_ALERT_CHANNELS=
MONITORING_MAX_ALERTS_PER_HOUR=20
MONITORING_ALERT_COOLDOWN=15

# Memory Monitoring Configuration (Process Memory)
# Enable/disable memory monitoring service
MEMORY_MONITORING_ENABLED=true

# Memory check interval (milliseconds)
# Default: 60000 (1 minute)
MEMORY_MONITORING_INTERVAL=60000

# Memory alert thresholds (percentage of heap)
# Warning threshold: Default 80%
MEMORY_WARNING_THRESHOLD=80
# Critical threshold: Default 95%
MEMORY_CRITICAL_THRESHOLD=95

# How often to log metrics (every N checks)
# Default: 1 (log every check)
MEMORY_LOG_INTERVAL=1

# ==============================================
# üîß DEVELOPMENT ONLY
# ==============================================

# Database SSL Mode (development only)
# Set to 'disable' for local development
# Production should use 'require'
DB_SSL_MODE=disable

# Disable telemetry in development
NEXT_TELEMETRY_DISABLED=1

# ==============================================
# üìù SETUP INSTRUCTIONS
# ==============================================
#
# 1. Copy this file to .env.local
#    cp .env.example .env.local
#
# 2. Update required variables (marked with üî¥)
#    - DATABASE_URL: Set up SQLite Cloud database or use local SQLite file
#    - AUTH_SECRET: Generate secure secret (32+ chars)
#    - AUTH_URL: Set to your local development URL
#    - GOOGLE_CLIENT_ID/SECRET: Set up Google OAuth
#
# 3. Configure optional services as needed
#    - SendGrid for email
#    - Twitch/YouTube for streaming features
#    - Redis for caching
#
# 4. Run database setup
#    npm run db:push
#
# 5. Start development server
#    npm run dev
#
# üö® SECURITY WARNINGS:
# - Never commit .env.local to version control
# - Use strong, unique secrets in production
# - Change all demo/example values
# - Rotate secrets regularly
#
