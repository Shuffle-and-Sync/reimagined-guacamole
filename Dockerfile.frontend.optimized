# Multi-stage build for frontend
# Optimized version with better security and minimal size

# Stage 1: Build
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files first for better caching
COPY package*.json ./

# Install dependencies
# Use --legacy-peer-deps to handle @sqlitecloud/drivers React Native peer deps
RUN npm ci --legacy-peer-deps --prefer-offline

# Copy source and build configuration
COPY . .

# Build the frontend
RUN npm run build

# Stage 2: Production with nginx
FROM nginx:1.25-alpine AS production

# Install gettext for envsubst
RUN apk add --no-cache gettext libintl

# Remove default nginx static files
RUN rm -rf /usr/share/nginx/html/*

# Copy built frontend from builder stage
COPY --from=builder /app/dist/public /usr/share/nginx/html

# Copy NGINX configuration template and entrypoint script
COPY deployment/nginx.conf.template /etc/nginx/conf.d/default.conf.template
COPY deployment/docker-entrypoint.sh /docker-entrypoint.sh

# Make entrypoint executable
RUN chmod +x /docker-entrypoint.sh

# Create nginx user directories with correct permissions
RUN mkdir -p /var/cache/nginx /var/run && \
    chown -R nginx:nginx /var/cache/nginx /var/run /etc/nginx/conf.d

# Switch to nginx user for better security
USER nginx

# Set default PORT (Cloud Run will override with PORT=8080)
ENV PORT=8080

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD wget --quiet --tries=1 --spider http://localhost:${PORT}/index.html || exit 1

ENTRYPOINT ["/docker-entrypoint.sh"]
