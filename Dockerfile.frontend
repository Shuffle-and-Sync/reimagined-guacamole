# Multi-stage build for frontend
FROM node:18 AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies for build)
# Use --legacy-peer-deps to handle @sqlitecloud/drivers React Native peer deps
RUN npm install --legacy-peer-deps

# Copy source code
COPY . .

# Build the frontend
RUN npm run build

# Production stage with NGINX
FROM nginx:alpine

# Copy built frontend from builder stage
COPY --from=builder /app/dist/public /usr/share/nginx/html

# Create NGINX configuration template
RUN echo 'server { \
    listen 80; \
    server_name localhost; \
    root /usr/share/nginx/html; \
    index index.html; \
    \
    # Proxy API requests to backend service \
    location /api/ { \
        proxy_pass ${BACKEND_URL}; \
        proxy_http_version 1.1; \
        proxy_set_header Upgrade $http_upgrade; \
        proxy_set_header Connection "upgrade"; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \
        proxy_set_header X-Forwarded-Proto $scheme; \
        proxy_set_header X-Forwarded-Host $host; \
        \
        # Timeouts for authentication flows \
        proxy_connect_timeout 60s; \
        proxy_send_timeout 60s; \
        proxy_read_timeout 60s; \
        \
        # Buffer settings \
        proxy_buffering off; \
        proxy_buffer_size 4k; \
        proxy_buffers 8 4k; \
        proxy_busy_buffers_size 8k; \
    } \
    \
    # Serve frontend static files \
    location / { \
        try_files $uri $uri/ /index.html; \
        add_header Cache-Control "no-cache, must-revalidate"; \
    } \
}' > /etc/nginx/conf.d/default.conf.template

# Create startup script that substitutes environment variables
RUN echo '#!/bin/sh\n\
set -e\n\
\n\
# Default to localhost backend if not specified\n\
: ${BACKEND_URL:=http://localhost:8080}\n\
\n\
echo "Configuring NGINX to proxy /api/ to: $BACKEND_URL"\n\
\n\
# Substitute environment variables in NGINX config\n\
envsubst "\$BACKEND_URL" < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf\n\
\n\
echo "NGINX configuration:"\n\
cat /etc/nginx/conf.d/default.conf\n\
\n\
# Start NGINX\n\
exec nginx -g "daemon off;"\n\
' > /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh

# Expose port 80
EXPOSE 80

# Use custom entrypoint
ENTRYPOINT ["/docker-entrypoint.sh"]