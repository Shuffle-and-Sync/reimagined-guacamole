# Docker Compose configuration for testing production-like environment locally
# This file helps test the production Docker images before deploying to Cloud Run
# Note: Uses SQLite Cloud instead of a local database service

version: '3.8'

services:
  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: shuffle-sync-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend service (production image)
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: shuffle-sync-backend
    environment:
      # Database connection (SQLite Cloud)
      DATABASE_URL: sqlitecloud://your-host.sqlite.cloud:8860/shuffleandsync?apikey=YOUR_API_KEY
      
      # Authentication
      AUTH_SECRET: local-development-secret-key-64-characters-long-for-testing-only
      AUTH_URL: http://localhost:8080
      
      # Google OAuth (use test values or real ones for local testing)
      GOOGLE_CLIENT_ID: your-test-client-id
      GOOGLE_CLIENT_SECRET: your-test-client-secret
      
      # Application settings
      NODE_ENV: production
      PORT: 8080
      
      # Optional services
      REDIS_URL: redis://redis:6379
      SENDGRID_API_KEY: # Add your SendGrid key for email testing
      STREAM_KEY_ENCRYPTION_KEY: test-key-32-characters-long-123
      
      # Security settings
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:8080
      
    ports:
      - "8080:8080"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend service (production image)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: shuffle-sync-frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  default:
    driver: bridge
