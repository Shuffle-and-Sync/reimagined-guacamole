[{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/CalendarLoginPrompt.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/DemoModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/RequireAuth.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/SettingsModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3441,3444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3441,3444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4098,4101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4098,4101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":176,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5446,5449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5446,5449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":203,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6193,6196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6193,6196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from \"react\";\nimport { useAuth } from \"@/features/auth\";\nimport { useCommunity } from \"@/features/communities\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { UserSettings } from \"@shared/schema\";\n\ninterface SettingsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function SettingsModal({ isOpen, onClose }: SettingsModalProps) {\n  const { user } = useAuth();\n  const { selectedCommunity } = useCommunity();\n  const { toast } = useToast();\n  const hasInitializedRef = useRef(false);\n\n  // User preferences state\n  const [preferences, setPreferences] = useState({\n    theme: \"system\",\n    notifications: {\n      email: true,\n      browser: true,\n      eventReminders: true,\n      socialUpdates: false,\n      weeklyDigest: true,\n    },\n    privacy: {\n      profileVisible: true,\n      showOnlineStatus: true,\n      allowDirectMessages: true,\n      shareStreamingActivity: true,\n    },\n    streaming: {\n      defaultQuality: \"720p\",\n      autoStartRecording: false,\n      chatOverlay: true,\n      showViewerCount: true,\n    },\n  });\n\n  // Fetch user settings\n  const { data: userSettings } = useQuery<UserSettings>({\n    queryKey: [\"/api/user/settings\"],\n    enabled: !!user?.id,\n  });\n\n  // Load settings from backend when available\n  useEffect(() => {\n    if (userSettings && !hasInitializedRef.current) {\n      hasInitializedRef.current = true;\n      // Parse JSON fields from database\n      const notificationTypes = userSettings.notificationTypes\n        ? typeof userSettings.notificationTypes === \"string\"\n          ? JSON.parse(userSettings.notificationTypes)\n          : userSettings.notificationTypes\n        : null;\n      const privacySettings = userSettings.privacySettings\n        ? typeof userSettings.privacySettings === \"string\"\n          ? JSON.parse(userSettings.privacySettings)\n          : userSettings.privacySettings\n        : null;\n      const displayPreferences = userSettings.displayPreferences\n        ? typeof userSettings.displayPreferences === \"string\"\n          ? JSON.parse(userSettings.displayPreferences)\n          : userSettings.displayPreferences\n        : null;\n\n      // Use setTimeout to avoid synchronous setState in effect\n      setTimeout(() => {\n        setPreferences((prev) => ({\n          theme: displayPreferences?.theme || prev.theme,\n          notifications: notificationTypes || prev.notifications,\n          privacy: privacySettings || prev.privacy,\n          streaming: displayPreferences?.streaming || prev.streaming,\n        }));\n      }, 0);\n    }\n  }, [userSettings]);\n\n  const saveSettingsMutation = useMutation({\n    mutationFn: async (settingsData: any) => {\n      const response = await apiRequest(\"PUT\", \"/api/user/settings\", {\n        notificationTypes: JSON.stringify(settingsData.notifications),\n        privacySettings: JSON.stringify(settingsData.privacy),\n        displayPreferences: JSON.stringify({\n          theme: settingsData.theme,\n          streaming: settingsData.streaming,\n        }),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Settings saved\",\n        description: \"Your preferences have been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/settings\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to save settings\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveSettings = () => {\n    saveSettingsMutation.mutate(preferences);\n  };\n\n  const handleResetToDefaults = () => {\n    setPreferences({\n      theme: \"system\",\n      notifications: {\n        email: true,\n        browser: true,\n        eventReminders: true,\n        socialUpdates: false,\n        weeklyDigest: true,\n      },\n      privacy: {\n        profileVisible: true,\n        showOnlineStatus: true,\n        allowDirectMessages: true,\n        shareStreamingActivity: true,\n      },\n      streaming: {\n        defaultQuality: \"720p\",\n        autoStartRecording: false,\n        chatOverlay: true,\n        showViewerCount: true,\n      },\n    });\n    toast({\n      title: \"Settings reset\",\n      description: \"All settings have been reset to defaults.\",\n    });\n  };\n\n  const exportDataMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/user/export-data\", {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Data export requested\",\n        description: \"Your data export will be emailed to you within 24 hours.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to export data\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleExportData = () => {\n    exportDataMutation.mutate();\n  };\n\n  const deleteAccountMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"DELETE\", \"/api/user/account\", {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Account deleted\",\n        description: \"Your account has been permanently deleted.\",\n        variant: \"destructive\",\n      });\n      // Redirect to login after account deletion\n      window.location.href = \"/api/logout\";\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to delete account\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteAccount = () => {\n    if (\n      window.confirm(\n        \"Are you sure you want to permanently delete your account? This action cannot be undone.\",\n      )\n    ) {\n      deleteAccountMutation.mutate();\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl gradient-text\">Settings</DialogTitle>\n          <DialogDescription>\n            Customize your Shuffle & Sync experience and manage your account\n            preferences.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"general\" className=\"mt-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"general\" data-testid=\"tab-general\">\n              General\n            </TabsTrigger>\n            <TabsTrigger value=\"notifications\" data-testid=\"tab-notifications\">\n              Notifications\n            </TabsTrigger>\n            <TabsTrigger value=\"privacy\" data-testid=\"tab-privacy\">\n              Privacy\n            </TabsTrigger>\n            <TabsTrigger value=\"account\" data-testid=\"tab-account\">\n              Account\n            </TabsTrigger>\n          </TabsList>\n\n          <div className=\"max-h-96 overflow-y-auto\">\n            <TabsContent value=\"general\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-palette text-primary\"></i>\n                    <span>Appearance</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"theme\">Theme</Label>\n                    <Select\n                      value={preferences.theme}\n                      onValueChange={(value) =>\n                        setPreferences((prev) => ({ ...prev, theme: value }))\n                      }\n                    >\n                      <SelectTrigger data-testid=\"select-theme\">\n                        <SelectValue placeholder=\"Select theme\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"light\">Light</SelectItem>\n                        <SelectItem value=\"dark\">Dark</SelectItem>\n                        <SelectItem value=\"system\">System</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-video text-primary\"></i>\n                    <span>Streaming Preferences</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"quality\">Default Stream Quality</Label>\n                    <Select\n                      value={preferences.streaming.defaultQuality}\n                      onValueChange={(value) =>\n                        setPreferences((prev) => ({\n                          ...prev,\n                          streaming: {\n                            ...prev.streaming,\n                            defaultQuality: value,\n                          },\n                        }))\n                      }\n                    >\n                      <SelectTrigger data-testid=\"select-quality\">\n                        <SelectValue placeholder=\"Select quality\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"480p\">480p (Standard)</SelectItem>\n                        <SelectItem value=\"720p\">720p (HD)</SelectItem>\n                        <SelectItem value=\"1080p\">1080p (Full HD)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label htmlFor=\"auto-record\">Auto-start Recording</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Automatically begin recording when you start streaming\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"auto-record\"\n                      checked={preferences.streaming.autoStartRecording}\n                      onCheckedChange={(checked) =>\n                        setPreferences((prev) => ({\n                          ...prev,\n                          streaming: {\n                            ...prev.streaming,\n                            autoStartRecording: checked,\n                          },\n                        }))\n                      }\n                      data-testid=\"switch-auto-record\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label htmlFor=\"chat-overlay\">Chat Overlay</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Show chat messages on your stream\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"chat-overlay\"\n                      checked={preferences.streaming.chatOverlay}\n                      onCheckedChange={(checked) =>\n                        setPreferences((prev) => ({\n                          ...prev,\n                          streaming: {\n                            ...prev.streaming,\n                            chatOverlay: checked,\n                          },\n                        }))\n                      }\n                      data-testid=\"switch-chat-overlay\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"notifications\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-bell text-primary\"></i>\n                    <span>Notification Preferences</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label htmlFor=\"email-notifications\">\n                        Email Notifications\n                      </Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Receive notifications via email\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"email-notifications\"\n                      checked={preferences.notifications.email}\n                      onCheckedChange={(checked) =>\n                        setPreferences((prev) => ({\n                          ...prev,\n                          notifications: {\n                            ...prev.notifications,\n                            email: checked,\n                          },\n                        }))\n                      }\n                      data-testid=\"switch-email-notifications\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label htmlFor=\"browser-notifications\">\n                        Browser Notifications\n                      </Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Show desktop notifications\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"browser-notifications\"\n                      checked={preferences.notifications.browser}\n                      onCheckedChange={(checked) =>\n                        setPreferences((prev) => ({\n                          ...prev,\n                          notifications: {\n                            ...prev.notifications,\n                            browser: checked,\n                          },\n                        }))\n                      }\n                      data-testid=\"switch-browser-notifications\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label htmlFor=\"event-reminders\">Event Reminders</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Get reminded about upcoming events\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"event-reminders\"\n                      checked={preferences.notifications.eventReminders}\n                      onCheckedChange={(checked) =>\n                        setPreferences((prev) => ({\n                          ...prev,\n                          notifications: {\n                            ...prev.notifications,\n                            eventReminders: checked,\n                          },\n                        }))\n                      }\n                      data-testid=\"switch-event-reminders\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label htmlFor=\"weekly-digest\">Weekly Digest</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Receive weekly community highlights\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"weekly-digest\"\n                      checked={preferences.notifications.weeklyDigest}\n                      onCheckedChange={(checked) =>\n                        setPreferences((prev) => ({\n                          ...prev,\n                          notifications: {\n                            ...prev.notifications,\n                            weeklyDigest: checked,\n                          },\n                        }))\n                      }\n                      data-testid=\"switch-weekly-digest\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"privacy\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-shield-alt text-primary\"></i>\n                    <span>Privacy Settings</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label htmlFor=\"profile-visible\">Public Profile</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Make your profile visible to other users\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"profile-visible\"\n                      checked={preferences.privacy.profileVisible}\n                      onCheckedChange={(checked) =>\n                        setPreferences((prev) => ({\n                          ...prev,\n                          privacy: { ...prev.privacy, profileVisible: checked },\n                        }))\n                      }\n                      data-testid=\"switch-profile-visible\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label htmlFor=\"online-status\">Show Online Status</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Let others see when you&apos;re online\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"online-status\"\n                      checked={preferences.privacy.showOnlineStatus}\n                      onCheckedChange={(checked) =>\n                        setPreferences((prev) => ({\n                          ...prev,\n                          privacy: {\n                            ...prev.privacy,\n                            showOnlineStatus: checked,\n                          },\n                        }))\n                      }\n                      data-testid=\"switch-online-status\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label htmlFor=\"direct-messages\">\n                        Allow Direct Messages\n                      </Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Allow other users to message you directly\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"direct-messages\"\n                      checked={preferences.privacy.allowDirectMessages}\n                      onCheckedChange={(checked) =>\n                        setPreferences((prev) => ({\n                          ...prev,\n                          privacy: {\n                            ...prev.privacy,\n                            allowDirectMessages: checked,\n                          },\n                        }))\n                      }\n                      data-testid=\"switch-direct-messages\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"account\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-user text-primary\"></i>\n                    <span>Account Information</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label>Name</Label>\n                      <Input\n                        value={\n                          `${user?.firstName || \"\"} ${user?.lastName || \"\"}`.trim() ||\n                          \"Not set\"\n                        }\n                        disabled\n                        className=\"bg-muted\"\n                        data-testid=\"input-user-name\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Email</Label>\n                      <Input\n                        value={user?.email || \"Not set\"}\n                        disabled\n                        className=\"bg-muted\"\n                        data-testid=\"input-user-email\"\n                      />\n                    </div>\n                  </div>\n\n                  {selectedCommunity && (\n                    <div className=\"space-y-2\">\n                      <Label>Primary Community</Label>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge\n                          className=\"flex items-center space-x-2 px-3 py-1\"\n                          style={{\n                            backgroundColor:\n                              selectedCommunity.themeColor + \"20\",\n                            color: selectedCommunity.themeColor,\n                            borderColor: selectedCommunity.themeColor,\n                          }}\n                        >\n                          <div\n                            className=\"w-2 h-2 rounded-full\"\n                            style={{\n                              backgroundColor: selectedCommunity.themeColor,\n                            }}\n                          ></div>\n                          <span>{selectedCommunity.displayName}</span>\n                        </Badge>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2 text-red-600\">\n                    <i className=\"fas fa-exclamation-triangle\"></i>\n                    <span>Danger Zone</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 border border-red-200 dark:border-red-800 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-semibold text-red-600\">\n                        Export Data\n                      </h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Download all your account data\n                      </p>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      onClick={handleExportData}\n                      className=\"border-red-200 text-red-600 hover:bg-red-50 dark:border-red-800 dark:text-red-400 dark:hover:bg-red-900/20\"\n                      data-testid=\"button-export-data\"\n                    >\n                      <i className=\"fas fa-download mr-2\"></i>\n                      Export\n                    </Button>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 border border-red-200 dark:border-red-800 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-semibold text-red-600\">\n                        Delete Account\n                      </h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Permanently delete your account and all data\n                      </p>\n                    </div>\n                    <Button\n                      variant=\"destructive\"\n                      onClick={handleDeleteAccount}\n                      data-testid=\"button-delete-account\"\n                    >\n                      <i className=\"fas fa-trash mr-2\"></i>\n                      Delete\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </div>\n        </Tabs>\n\n        <div className=\"flex justify-between items-center mt-6 pt-6 border-t\">\n          <Button\n            variant=\"outline\"\n            onClick={handleResetToDefaults}\n            data-testid=\"button-reset-defaults\"\n          >\n            <i className=\"fas fa-undo mr-2\"></i>\n            Reset to Defaults\n          </Button>\n\n          <div className=\"flex space-x-3\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              data-testid=\"button-settings-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleSaveSettings}\n              data-testid=\"button-settings-save\"\n            >\n              <i className=\"fas fa-save mr-2\"></i>\n              Save Changes\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/TournamentsLoginPrompt.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/calendar/CSVUploadDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[895,898],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[895,898],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1518,1521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1518,1521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1566,1569],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1566,1569],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Papa from \"papaparse\";\n\ninterface CSVUploadDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n  communityId: string;\n}\n\nexport function CSVUploadDialog({\n  isOpen,\n  onClose,\n  onSuccess,\n  communityId,\n}: CSVUploadDialogProps) {\n  const [file, setFile] = useState<File | null>(null);\n  const [preview, setPreview] = useState<any[]>([]);\n  const [errors, setErrors] = useState<string[]>([]);\n  const [isUploading, setIsUploading] = useState(false);\n  const { toast } = useToast();\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = e.target.files?.[0];\n    if (!selectedFile) return;\n\n    if (!selectedFile.name.endsWith(\".csv\")) {\n      setErrors([\"Please select a CSV file\"]);\n      return;\n    }\n\n    setFile(selectedFile);\n    setErrors([]);\n\n    Papa.parse(selectedFile, {\n      header: true,\n      complete: (results) => {\n        const validationErrors: string[] = [];\n        const validData: any[] = [];\n\n        results.data.forEach((row: any, index) => {\n          // Skip empty rows\n          if (!row.title && !row.date) return;\n\n          // Validate required fields\n          if (!row.title)\n            validationErrors.push(`Row ${index + 1}: Missing title`);\n          if (!row.type)\n            validationErrors.push(`Row ${index + 1}: Missing type`);\n          if (!row.date)\n            validationErrors.push(`Row ${index + 1}: Missing date`);\n          if (!row.time)\n            validationErrors.push(`Row ${index + 1}: Missing time`);\n          if (!row.location)\n            validationErrors.push(`Row ${index + 1}: Missing location`);\n\n          // Validate event type\n          const validTypes = [\n            \"tournament\",\n            \"convention\",\n            \"release\",\n            \"game_pod\",\n            \"community\",\n          ];\n          if (row.type && !validTypes.includes(row.type)) {\n            validationErrors.push(\n              `Row ${index + 1}: Invalid type '${row.type}'. Must be one of: ${validTypes.join(\", \")}`,\n            );\n          }\n\n          if (Object.keys(row).some((key) => row[key])) {\n            validData.push(row);\n          }\n        });\n\n        setErrors(validationErrors);\n        setPreview(validData.slice(0, 10)); // Show first 10 rows\n      },\n      error: (error) => {\n        setErrors([`Failed to parse CSV: ${error.message}`]);\n      },\n    });\n  };\n\n  const handleUpload = async () => {\n    if (!file || preview.length === 0) return;\n\n    setIsUploading(true);\n\n    try {\n      const events = preview.map((row) => ({\n        title: row.title,\n        description: row.description || \"\",\n        type: row.type,\n        date: row.date,\n        time: row.time,\n        location: row.location,\n        communityId: communityId,\n        playerSlots: row.playerSlots ? parseInt(row.playerSlots) : undefined,\n        alternateSlots: row.alternateSlots\n          ? parseInt(row.alternateSlots)\n          : undefined,\n        gameFormat: row.gameFormat || undefined,\n        powerLevel: row.powerLevel ? parseInt(row.powerLevel) : undefined,\n        maxAttendees: row.maxAttendees ? parseInt(row.maxAttendees) : undefined,\n      }));\n\n      const response = await fetch(\"/api/events/bulk\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ events }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to create events\");\n      }\n\n      const createdEvents = await response.json();\n\n      toast({\n        title: \"Success!\",\n        description: `Created ${createdEvents.length} events`,\n      });\n\n      onSuccess();\n      handleClose();\n    } catch (error) {\n      toast({\n        title: \"Upload failed\",\n        description:\n          error instanceof Error ? error.message : \"Failed to upload events\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleClose = () => {\n    setFile(null);\n    setPreview([]);\n    setErrors([]);\n    onClose();\n  };\n\n  const downloadTemplate = () => {\n    const template = `title,description,type,date,time,location,playerSlots,alternateSlots,gameFormat,powerLevel,maxAttendees\nWeekly EDH Pod,Commander night,game_pod,2024-12-20,18:00,Local Game Store,4,2,commander,7,\nFriday Night Magic,Standard tournament,tournament,2024-12-22,19:00,LGS Downtown,,,,,32\nHoliday Party,Year end celebration,community,2024-12-25,14:00,Community Center,,,,,50`;\n\n    const blob = new Blob([template], { type: \"text/csv\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"events-template.csv\";\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Bulk Upload Events from CSV</DialogTitle>\n          <DialogDescription>\n            Upload a CSV file to create multiple events at once. Download the\n            template to see the required format.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4 mt-4\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex-1\">\n              <Label htmlFor=\"csv-file\">Select CSV File</Label>\n              <Input\n                id=\"csv-file\"\n                type=\"file\"\n                accept=\".csv\"\n                onChange={handleFileSelect}\n                className=\"mt-2\"\n              />\n            </div>\n            <Button\n              variant=\"outline\"\n              onClick={downloadTemplate}\n              className=\"mt-8\"\n            >\n              <i className=\"fas fa-download mr-2\"></i>\n              Download Template\n            </Button>\n          </div>\n\n          {errors.length > 0 && (\n            <Alert variant=\"destructive\">\n              <AlertDescription>\n                <div className=\"font-semibold mb-2\">Validation Errors:</div>\n                <ul className=\"list-disc list-inside space-y-1\">\n                  {errors.slice(0, 5).map((error, i) => (\n                    <li key={i}>{error}</li>\n                  ))}\n                  {errors.length > 5 && (\n                    <li>...and {errors.length - 5} more errors</li>\n                  )}\n                </ul>\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {preview.length > 0 && (\n            <div>\n              <h3 className=\"font-semibold mb-2\">\n                Preview (showing first 10 rows):\n              </h3>\n              <div className=\"border rounded overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Title</TableHead>\n                      <TableHead>Type</TableHead>\n                      <TableHead>Date</TableHead>\n                      <TableHead>Time</TableHead>\n                      <TableHead>Location</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {preview.map((row, i) => (\n                      <TableRow key={i}>\n                        <TableCell>{row.title}</TableCell>\n                        <TableCell>{row.type}</TableCell>\n                        <TableCell>{row.date}</TableCell>\n                        <TableCell>{row.time}</TableCell>\n                        <TableCell>{row.location}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex justify-end space-x-3\">\n            <Button variant=\"outline\" onClick={handleClose}>\n              Cancel\n            </Button>\n            <Button\n              onClick={handleUpload}\n              disabled={\n                preview.length === 0 || errors.length > 0 || isUploading\n              }\n            >\n              {isUploading ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  Uploading...\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-upload mr-2\"></i>\n                  Upload {preview.length} Events\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/calendar/CalendarGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/calendar/DraggableEvent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/calendar/GraphicsGeneratorDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/calendar/PodFieldsForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/calendar/PodStatusBadge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/tournament/TournamentBracket.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":280,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":280,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9339,9342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9339,9342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":309,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":309,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10184,10187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10184,10187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":351,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":351,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11227,11230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11227,11230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":380,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":380,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12097,12100],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12097,12100],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/features/auth\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type {\n  Tournament,\n  TournamentMatch,\n  TournamentRound,\n  User,\n} from \"@shared/schema\";\n\n// Extended match type with optional properties that may not exist in schema\ntype ExtendedTournamentMatch = TournamentMatch & {\n  player1?: User;\n  player2?: User;\n  winner?: User;\n  // Legacy properties that may not exist in actual schema\n  bracketPosition?: number;\n  player1Score?: number;\n  player2Score?: number;\n  gameSessionId?: string;\n};\n\ninterface TournamentBracketProps {\n  tournament: Tournament & {\n    organizer: User;\n    rounds?: TournamentRound[];\n    matches?: ExtendedTournamentMatch[];\n  };\n}\n\ninterface MatchComponentProps {\n  match: ExtendedTournamentMatch;\n  isOrganizer: boolean;\n  tournamentStatus: string;\n  currentUserId?: string;\n  onAdvanceMatch?: (matchId: string, winnerId: string) => void;\n  onPlayMatch?: (matchId: string) => void;\n}\n\nconst MatchComponent = ({\n  match,\n  isOrganizer,\n  tournamentStatus,\n  currentUserId,\n  onAdvanceMatch,\n  onPlayMatch,\n}: MatchComponentProps) => {\n  const getMatchStatusColor = (status: string | null) => {\n    switch (status) {\n      case \"pending\":\n        return \"bg-yellow-100 border-yellow-300 text-yellow-800\";\n      case \"active\":\n        return \"bg-blue-100 border-blue-300 text-blue-800\";\n      case \"completed\":\n        return \"bg-green-100 border-green-300 text-green-800\";\n      case \"bye\":\n        return \"bg-gray-100 border-gray-300 text-gray-600\";\n      default:\n        return \"bg-gray-100 border-gray-300\";\n    }\n  };\n\n  const formatPlayerName = (player?: User) => {\n    if (!player) return \"TBD\";\n    return (\n      player.username || player.firstName || `Player ${player.id.slice(0, 8)}`\n    );\n  };\n\n  if (match.status === \"bye\") {\n    return (\n      <Card className={`w-64 ${getMatchStatusColor(match.status)} border-2`}>\n        <CardContent className=\"p-4\">\n          <div className=\"text-center\">\n            <p className=\"font-medium\">{formatPlayerName(match.player1)}</p>\n            <Badge variant=\"secondary\" className=\"mt-2\">\n              Bye\n            </Badge>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card\n      className={`w-64 ${getMatchStatusColor(match.status)} border-2`}\n      data-testid={`match-card-${match.id || \"unknown\"}`}\n    >\n      <CardHeader className=\"pb-2\">\n        <div className=\"flex justify-between items-center\">\n          <Badge variant=\"outline\" className=\"text-xs\">\n            Match {match.bracketPosition ?? match.matchNumber}\n          </Badge>\n          <Badge\n            variant={match.status === \"completed\" ? \"default\" : \"secondary\"}\n          >\n            {match.status}\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-4 pt-0 space-y-3\">\n        {/* Player 1 */}\n        <div\n          className={`flex items-center space-x-3 p-2 rounded ${\n            match.winnerId === match.player1Id\n              ? \"bg-green-50 border border-green-200\"\n              : \"bg-background\"\n          }`}\n        >\n          <Avatar className=\"w-8 h-8\">\n            <AvatarImage src={match.player1?.profileImageUrl || undefined} />\n            <AvatarFallback className=\"text-xs\">\n              {formatPlayerName(match.player1).slice(0, 2).toUpperCase()}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 min-w-0\">\n            <p\n              className=\"font-medium text-sm truncate\"\n              data-testid={`player1-name-${match.id || \"unknown\"}`}\n            >\n              {formatPlayerName(match.player1)}\n            </p>\n            {match.status === \"completed\" && (\n              <p className=\"text-xs text-muted-foreground\">\n                Score: {match.player1Score || 0}\n              </p>\n            )}\n          </div>\n          {match.winnerId === match.player1Id && (\n            <Badge variant=\"default\" className=\"text-xs\">\n              Winner\n            </Badge>\n          )}\n        </div>\n\n        {/* VS Divider */}\n        <div className=\"text-center\">\n          <span className=\"text-xs font-medium text-muted-foreground\">VS</span>\n        </div>\n\n        {/* Player 2 */}\n        <div\n          className={`flex items-center space-x-3 p-2 rounded ${\n            match.winnerId === match.player2Id\n              ? \"bg-green-50 border border-green-200\"\n              : \"bg-background\"\n          }`}\n        >\n          <Avatar className=\"w-8 h-8\">\n            <AvatarImage src={match.player2?.profileImageUrl || undefined} />\n            <AvatarFallback className=\"text-xs\">\n              {formatPlayerName(match.player2).slice(0, 2).toUpperCase()}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 min-w-0\">\n            <p\n              className=\"font-medium text-sm truncate\"\n              data-testid={`player2-name-${match.id || \"unknown\"}`}\n            >\n              {formatPlayerName(match.player2)}\n            </p>\n            {match.status === \"completed\" && (\n              <p className=\"text-xs text-muted-foreground\">\n                Score: {match.player2Score || 0}\n              </p>\n            )}\n          </div>\n          {match.winnerId === match.player2Id && (\n            <Badge variant=\"default\" className=\"text-xs\">\n              Winner\n            </Badge>\n          )}\n        </div>\n\n        {/* Match Actions */}\n        <div className=\"space-y-2 pt-2\">\n          {/* Play Match Button - for players to start their game */}\n          {match.status === \"pending\" &&\n            tournamentStatus === \"active\" &&\n            (match.player1Id === currentUserId ||\n              match.player2Id === currentUserId) && (\n              <Button\n                size=\"sm\"\n                className=\"w-full\"\n                onClick={() => onPlayMatch?.(match.id)}\n                disabled={!match.player1Id || !match.player2Id}\n                data-testid={`button-play-match-${match.id || \"unknown\"}`}\n              >\n                <i className=\"fas fa-play mr-2\"></i>\n                Play Match\n              </Button>\n            )}\n\n          {/* Join Game Session Button - if session already exists */}\n          {match.gameSessionId && match.status === \"active\" && (\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={() =>\n                (window.location.href = `/app/room/${match.gameSessionId}`)\n              }\n              data-testid={`button-join-game-${match.id || \"unknown\"}`}\n            >\n              <i className=\"fas fa-door-open mr-2\"></i>\n              Join Game Room\n            </Button>\n          )}\n\n          {/* Organizer Controls */}\n          {isOrganizer &&\n            match.status === \"pending\" &&\n            tournamentStatus === \"active\" && (\n              <div className=\"flex space-x-2\">\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  onClick={() => match.player1Id && onAdvanceMatch?.(match.id, match.player1Id)}\n                  disabled={!match.player1Id || !match.player2Id}\n                  data-testid={`button-player1-wins-${match.id || \"unknown\"}`}\n                >\n                  P1 Wins\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  onClick={() => match.player2Id && onAdvanceMatch?.(match.id, match.player2Id)}\n                  disabled={!match.player1Id || !match.player2Id}\n                  data-testid={`button-player2-wins-${match.id || \"unknown\"}`}\n                >\n                  P2 Wins\n                </Button>\n              </div>\n            )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport const TournamentBracket = ({ tournament }: TournamentBracketProps) => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedRound, setSelectedRound] = useState<number>(1);\n\n  const isOrganizer = user?.id === tournament.organizerId;\n  const rounds = tournament.rounds || [];\n  const matches = tournament.matches || [];\n\n  // Start tournament mutation\n  const startTournamentMutation = useMutation({\n    mutationFn: async (tournamentId: string) => {\n      const response = await apiRequest(\n        \"POST\",\n        `/api/tournaments/${tournamentId}/start`,\n        {},\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Tournament started!\",\n        description:\n          \"Brackets have been generated and the tournament is now active.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tournaments\"] });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/tournaments\", tournament.id, \"details\"],\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to start tournament\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Advance round mutation\n  const advanceRoundMutation = useMutation({\n    mutationFn: async (tournamentId: string) => {\n      const response = await apiRequest(\n        \"POST\",\n        `/api/tournaments/${tournamentId}/advance`,\n        {},\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Round advanced!\",\n        description: \"Tournament has been advanced to the next round.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tournaments\"] });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/tournaments\", tournament.id, \"details\"],\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to advance round\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Report match result mutation\n  const reportMatchResultMutation = useMutation({\n    mutationFn: async ({\n      matchId,\n      winnerId,\n      player1Score,\n      player2Score,\n    }: {\n      matchId: string;\n      winnerId: string;\n      player1Score?: number;\n      player2Score?: number;\n    }) => {\n      const response = await apiRequest(\n        \"POST\",\n        `/api/tournaments/${tournament.id}/matches/${matchId}/result`,\n        {\n          winnerId,\n          player1Score,\n          player2Score,\n        },\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Match result recorded!\",\n        description: \"Winner has been set for this match.\",\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/tournaments\", tournament.id, \"details\"],\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to record match result\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create game session mutation for tournament matches\n  const createGameSessionMutation = useMutation({\n    mutationFn: async (matchId: string) => {\n      const response = await apiRequest(\n        \"POST\",\n        `/api/tournaments/${tournament.id}/matches/${matchId}/create-session`,\n        {},\n      );\n      return response.json();\n    },\n    onSuccess: (gameSession) => {\n      toast({\n        title: \"Game room created!\",\n        description: \"Redirecting to the tournament match game room...\",\n      });\n      // Redirect to the game room\n      setTimeout(() => {\n        window.location.href = `/app/room/${gameSession.id}`;\n      }, 1000);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to create game room\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePlayMatch = (matchId: string) => {\n    createGameSessionMutation.mutate(matchId);\n  };\n\n  const handleAdvanceMatch = (matchId: string, winnerId: string) => {\n    // Simple score assignment - in a real app, you'd have a score input dialog\n    const player1Score =\n      winnerId === matches.find((m) => m.id === matchId)?.player1Id ? 1 : 0;\n    const player2Score =\n      winnerId === matches.find((m) => m.id === matchId)?.player2Id ? 1 : 0;\n\n    reportMatchResultMutation.mutate({\n      matchId,\n      winnerId,\n      player1Score,\n      player2Score,\n    });\n  };\n\n  const getCurrentRoundMatches = () => {\n    return matches.filter((match) => {\n      const round = rounds.find((r) => r.id === match.roundId);\n      return round?.roundNumber === selectedRound;\n    });\n  };\n\n  const getFormatDisplayName = (format: string) => {\n    const formatNames: Record<string, string> = {\n      single_elimination: \"Single Elimination\",\n      double_elimination: \"Double Elimination\",\n      swiss: \"Swiss\",\n      round_robin: \"Round Robin\",\n    };\n    return formatNames[format] || format;\n  };\n\n  // Show start tournament interface for upcoming tournaments\n  if (tournament.status === \"upcoming\") {\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Tournament Setup</span>\n              <Badge variant=\"secondary\">{tournament.status}</Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"text-muted-foreground\">Format:</span>\n                {/* <p className=\"font-medium\">{getFormatDisplayName(tournament.gameFormat)}</p> */}\n                {/* TODO: gameFormat doesn&apos;t exist in schema */}\n                <p className=\"font-medium\">\n                  {getFormatDisplayName(tournament.gameType)}\n                </p>\n              </div>\n              <div>\n                <span className=\"text-muted-foreground\">Participants:</span>\n                <p className=\"font-medium\">\n                  {tournament.currentParticipants || 0}/\n                  {tournament.maxParticipants}\n                </p>\n              </div>\n            </div>\n\n            {isOrganizer && (\n              <div className=\"pt-4 border-t\">\n                <Button\n                  onClick={() => startTournamentMutation.mutate(tournament.id)}\n                  disabled={\n                    startTournamentMutation.isPending ||\n                    (tournament.currentParticipants || 0) < 2\n                  }\n                  className=\"w-full\"\n                  data-testid=\"button-start-tournament\"\n                >\n                  {startTournamentMutation.isPending\n                    ? \"Starting Tournament...\"\n                    : \"Start Tournament\"}\n                </Button>\n                {(tournament.currentParticipants || 0) < 2 && (\n                  <p className=\"text-sm text-muted-foreground mt-2 text-center\">\n                    Need at least 2 participants to start\n                  </p>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Tournament Header */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>Tournament Bracket</span>\n            <div className=\"flex items-center space-x-2\">\n              {/* <Badge variant=\"secondary\">{getFormatDisplayName(tournament.gameFormat)}</Badge> */}\n              {/* TODO: gameFormat doesn&apos;t exist in schema */}\n              <Badge variant=\"secondary\">\n                {getFormatDisplayName(tournament.gameType)}\n              </Badge>\n              <Badge\n                variant={\n                  tournament.status === \"active\" ? \"default\" : \"secondary\"\n                }\n              >\n                {tournament.status}\n              </Badge>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex justify-between items-center\">\n            <div className=\"text-sm text-muted-foreground\">\n              <span>Participants: {tournament.currentParticipants || 0}</span>\n              {tournament.status === \"active\" && (\n                <span className=\"ml-4\">Current Round: {selectedRound}</span>\n              )}\n            </div>\n\n            {isOrganizer && tournament.status === \"active\" && (\n              <Button\n                onClick={() => advanceRoundMutation.mutate(tournament.id)}\n                disabled={advanceRoundMutation.isPending}\n                data-testid=\"button-advance-round\"\n              >\n                {advanceRoundMutation.isPending\n                  ? \"Advancing...\"\n                  : \"Advance Round\"}\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Round Navigation */}\n      {rounds.length > 0 && (\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex flex-wrap gap-2\">\n              {rounds.map((round) => (\n                <Button\n                  key={round.id}\n                  variant={\n                    selectedRound === round.roundNumber ? \"default\" : \"outline\"\n                  }\n                  size=\"sm\"\n                  onClick={() => setSelectedRound(round.roundNumber)}\n                  data-testid={`button-round-${round.roundNumber}`}\n                >\n                  {round.name || `Round ${round.roundNumber}`}\n                  <Badge variant=\"secondary\" className=\"ml-2\">\n                    {round.status}\n                  </Badge>\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Bracket Display */}\n      <Card>\n        <CardHeader>\n          <CardTitle>\n            {rounds.find((r) => r.roundNumber === selectedRound)?.name ||\n              `Round ${selectedRound}`}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {getCurrentRoundMatches().length === 0 ? (\n            <div className=\"text-center py-8\">\n              <i className=\"fas fa-brackets-curly text-4xl text-muted-foreground mb-4\"></i>\n              <p className=\"text-muted-foreground\">No matches in this round</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {getCurrentRoundMatches().map((match) => (\n                <MatchComponent\n                  key={match.id}\n                  match={match}\n                  isOrganizer={isOrganizer}\n                  tournamentStatus={tournament.status || \"upcoming\"}\n                  currentUserId={user?.id}\n                  onAdvanceMatch={handleAdvanceMatch}\n                  onPlayMatch={handlePlayMatch}\n                />\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default TournamentBracket;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/tournament/TournamentEditor.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1044,1047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1044,1047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1124,1127],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1124,1127],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1145,1148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1145,1148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2613,2616],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2613,2616],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3070,3073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3070,3073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3871,3874],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3871,3874],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/features/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Tournament, TournamentParticipant, User } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\ninterface TournamentEditorProps {\n  tournament: Tournament & {\n    organizer: User;\n    community: any;\n    participants: (TournamentParticipant & { user: User })[];\n    rounds?: any[];\n    matches?: any[];\n    participantCount?: number;\n    currentParticipants?: number;\n  };\n  onClose?: () => void;\n}\n\nexport default function TournamentEditor({\n  tournament,\n  onClose,\n}: TournamentEditorProps) {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  // Form state for different tabs\n  const [generalForm, setGeneralForm] = useState({\n    name: tournament.name || \"\",\n    description: tournament.description || \"\",\n    // gameFormat: tournament.gameFormat || \"\", // TODO: gameFormat doesn&apos;t exist in schema\n    gameFormat: tournament.gameType || \"\", // Use gameType instead\n    maxParticipants: tournament.maxParticipants || 8,\n    startDate: tournament.startDate\n      ? format(new Date(tournament.startDate), \"yyyy-MM-dd'T'HH:mm\")\n      : \"\",\n    endDate: tournament.endDate\n      ? format(new Date(tournament.endDate), \"yyyy-MM-dd'T'HH:mm\")\n      : \"\",\n    prizePool: tournament.prizePool || \"\",\n    // rules: tournament.rules || \"\" // TODO: rules doesn&apos;t exist in schema\n    rules: \"\", // Placeholder\n  });\n\n  const [activeTab, setActiveTab] = useState(\"general\");\n  const [hasChanges, setHasChanges] = useState(false);\n\n  // Check if user is tournament organizer\n  const isOrganizer = user?.id === tournament?.organizerId;\n  const tournamentStatus = tournament?.status || \"upcoming\";\n\n  // Update tournament mutation\n  const updateTournamentMutation = useMutation({\n    mutationFn: async (updates: any) => {\n      const response = await apiRequest(\n        \"PATCH\",\n        `/api/tournaments/${tournament.id}`,\n        updates,\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Tournament updated!\",\n        description: \"Your changes have been saved successfully.\",\n      });\n      setHasChanges(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/tournaments\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to update tournament\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Game format options\n  const gameFormats = [\n    { value: \"commander\", label: \"Commander/EDH\" },\n    { value: \"standard\", label: \"Standard\" },\n    { value: \"modern\", label: \"Modern\" },\n    { value: \"legacy\", label: \"Legacy\" },\n    { value: \"draft\", label: \"Draft\" },\n    { value: \"pokemon-standard\", label: \"Pokemon Standard\" },\n    { value: \"pokemon-expanded\", label: \"Pokemon Expanded\" },\n    { value: \"lorcana-constructed\", label: \"Lorcana Constructed\" },\n    { value: \"yugioh-advanced\", label: \"Yu-Gi-Oh Advanced\" },\n  ];\n\n  // Handle form changes\n  const handleGeneralFormChange = (field: string, value: any) => {\n    setGeneralForm((prev) => ({ ...prev, [field]: value }));\n    setHasChanges(true);\n  };\n\n  // Save general tab changes\n  const handleSaveGeneral = () => {\n    updateTournamentMutation.mutate({\n      name: generalForm.name,\n      description: generalForm.description,\n      gameFormat: generalForm.gameFormat,\n      maxParticipants: Number(generalForm.maxParticipants),\n      startDate: generalForm.startDate\n        ? new Date(generalForm.startDate).toISOString()\n        : null,\n      endDate: generalForm.endDate\n        ? new Date(generalForm.endDate).toISOString()\n        : null,\n      prizePool: generalForm.prizePool,\n      rules: generalForm.rules,\n    });\n  };\n\n  // Get status badge variant\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"upcoming\":\n        return \"default\";\n      case \"active\":\n        return \"destructive\";\n      case \"completed\":\n        return \"secondary\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  // Check if field editing is allowed based on tournament status\n  const isFieldEditable = (field: string) => {\n    if (tournamentStatus === \"completed\") return false;\n    if (tournamentStatus === \"active\") {\n      const allowedFields = [\"name\", \"description\", \"rules\", \"prizePool\"];\n      return allowedFields.includes(field);\n    }\n    return true; // upcoming tournaments allow all edits\n  };\n\n  if (!isOrganizer) {\n    return (\n      <Card className=\"max-w-md mx-auto text-center\">\n        <CardContent className=\"pt-6\">\n          <i className=\"fas fa-lock text-4xl text-muted-foreground mb-4\"></i>\n          <h2 className=\"text-xl font-semibold mb-2\">Access Denied</h2>\n          <p className=\"text-muted-foreground mb-4\">\n            Only the tournament organizer can edit this tournament.\n          </p>\n          <Button\n            onClick={\n              onClose || (() => setLocation(`/tournaments/${tournament.id}`))\n            }\n          >\n            Back to Tournament\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-start\">\n            <div className=\"space-y-2\">\n              <CardTitle className=\"text-2xl flex items-center gap-2\">\n                <i className=\"fas fa-edit text-primary\"></i>\n                Edit Tournament\n              </CardTitle>\n              <CardDescription className=\"text-lg\">\n                {/* {tournament.name} - {gameFormats.find(f => f.value === tournament.gameFormat)?.label} */}\n                {/* TODO: gameFormat doesn&apos;t exist in schema */}\n                {tournament.name} -{\" \"}\n                {\n                  gameFormats.find((f) => f.value === tournament.gameType)\n                    ?.label\n                }\n              </CardDescription>\n            </div>\n            <div className=\"flex flex-col items-end space-y-2\">\n              <Badge\n                variant={getStatusBadgeVariant(tournamentStatus)}\n                className=\"text-sm\"\n                data-testid=\"badge-tournament-status\"\n              >\n                {tournamentStatus}\n              </Badge>\n              {tournamentStatus === \"active\" && (\n                <Badge variant=\"outline\" className=\"text-xs text-orange-600\">\n                  <i className=\"fas fa-info-circle mr-1\"></i>\n                  Limited Editing\n                </Badge>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Tabbed Editor */}\n      <Tabs\n        value={activeTab}\n        onValueChange={setActiveTab}\n        className=\"space-y-6\"\n      >\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"general\" data-testid=\"tab-general\">\n            <i className=\"fas fa-info-circle mr-2\"></i>General\n          </TabsTrigger>\n          <TabsTrigger value=\"participants\" data-testid=\"tab-participants\">\n            <i className=\"fas fa-users mr-2\"></i>Participants\n          </TabsTrigger>\n          <TabsTrigger value=\"bracket\" data-testid=\"tab-bracket\">\n            <i className=\"fas fa-sitemap mr-2\"></i>Bracket\n          </TabsTrigger>\n          <TabsTrigger value=\"settings\" data-testid=\"tab-settings\">\n            <i className=\"fas fa-cog mr-2\"></i>Settings\n          </TabsTrigger>\n        </TabsList>\n\n        {/* General Tab */}\n        <TabsContent value=\"general\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Basic Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Basic Information</CardTitle>\n                <CardDescription>\n                  Tournament name, description, and format\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"tournament-name\">Tournament Name *</Label>\n                  <Input\n                    id=\"tournament-name\"\n                    value={generalForm.name}\n                    onChange={(e) =>\n                      handleGeneralFormChange(\"name\", e.target.value)\n                    }\n                    disabled={\n                      !isFieldEditable(\"name\") ||\n                      updateTournamentMutation.isPending\n                    }\n                    data-testid=\"input-tournament-name\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"tournament-description\">Description</Label>\n                  <Textarea\n                    id=\"tournament-description\"\n                    rows={4}\n                    value={generalForm.description}\n                    onChange={(e) =>\n                      handleGeneralFormChange(\"description\", e.target.value)\n                    }\n                    disabled={\n                      !isFieldEditable(\"description\") ||\n                      updateTournamentMutation.isPending\n                    }\n                    data-testid=\"textarea-tournament-description\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"game-format\">Game Format *</Label>\n                  <Select\n                    value={generalForm.gameFormat}\n                    onValueChange={(value) =>\n                      handleGeneralFormChange(\"gameFormat\", value)\n                    }\n                    disabled={\n                      !isFieldEditable(\"gameFormat\") ||\n                      updateTournamentMutation.isPending\n                    }\n                  >\n                    <SelectTrigger data-testid=\"select-game-format\">\n                      <SelectValue placeholder=\"Select game format\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {gameFormats.map((format) => (\n                        <SelectItem key={format.value} value={format.value}>\n                          {format.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Tournament Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Tournament Settings</CardTitle>\n                <CardDescription>\n                  Participants, dates, and prizes\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"max-participants\">Max Participants</Label>\n                  <Input\n                    id=\"max-participants\"\n                    type=\"number\"\n                    min=\"2\"\n                    max=\"128\"\n                    value={generalForm.maxParticipants}\n                    onChange={(e) =>\n                      handleGeneralFormChange(\n                        \"maxParticipants\",\n                        parseInt(e.target.value),\n                      )\n                    }\n                    disabled={\n                      !isFieldEditable(\"maxParticipants\") ||\n                      updateTournamentMutation.isPending\n                    }\n                    data-testid=\"input-max-participants\"\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    Current participants: {tournament.participants?.length || 0}\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"start-date\">Start Date</Label>\n                  <Input\n                    id=\"start-date\"\n                    type=\"datetime-local\"\n                    value={generalForm.startDate}\n                    onChange={(e) =>\n                      handleGeneralFormChange(\"startDate\", e.target.value)\n                    }\n                    disabled={\n                      !isFieldEditable(\"startDate\") ||\n                      updateTournamentMutation.isPending\n                    }\n                    data-testid=\"input-start-date\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"end-date\">End Date (Optional)</Label>\n                  <Input\n                    id=\"end-date\"\n                    type=\"datetime-local\"\n                    value={generalForm.endDate}\n                    onChange={(e) =>\n                      handleGeneralFormChange(\"endDate\", e.target.value)\n                    }\n                    disabled={\n                      !isFieldEditable(\"endDate\") ||\n                      updateTournamentMutation.isPending\n                    }\n                    data-testid=\"input-end-date\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"prize-pool\">Prize Pool</Label>\n                  <Input\n                    id=\"prize-pool\"\n                    placeholder=\"e.g., $100 store credit\"\n                    value={generalForm.prizePool}\n                    onChange={(e) =>\n                      handleGeneralFormChange(\"prizePool\", e.target.value)\n                    }\n                    disabled={\n                      !isFieldEditable(\"prizePool\") ||\n                      updateTournamentMutation.isPending\n                    }\n                    data-testid=\"input-prize-pool\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Tournament Rules */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Tournament Rules</CardTitle>\n              <CardDescription>\n                Specific rules and regulations for this tournament\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"tournament-rules\">Rules and Regulations</Label>\n                <Textarea\n                  id=\"tournament-rules\"\n                  rows={8}\n                  placeholder=\"Enter tournament rules, deck restrictions, format specifications, etc.\"\n                  value={generalForm.rules}\n                  onChange={(e) =>\n                    handleGeneralFormChange(\"rules\", e.target.value)\n                  }\n                  disabled={\n                    !isFieldEditable(\"rules\") ||\n                    updateTournamentMutation.isPending\n                  }\n                  data-testid=\"textarea-tournament-rules\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Save Actions */}\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex justify-between items-center\">\n                <div className=\"text-sm text-muted-foreground\">\n                  {hasChanges && (\n                    <span className=\"text-orange-600\">• Unsaved changes</span>\n                  )}\n                  {tournamentStatus === \"active\" && (\n                    <span className=\"text-orange-600 ml-2\">\n                      <i className=\"fas fa-info-circle mr-1\"></i>\n                      Active tournaments have limited editing options\n                    </span>\n                  )}\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={\n                      onClose ||\n                      (() => setLocation(`/tournaments/${tournament.id}`))\n                    }\n                    data-testid=\"button-cancel-editing\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={handleSaveGeneral}\n                    disabled={!hasChanges || updateTournamentMutation.isPending}\n                    data-testid=\"button-save-general\"\n                  >\n                    {updateTournamentMutation.isPending && (\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    )}\n                    Save Changes\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Participants Tab - Placeholder for future enhancement */}\n        <TabsContent value=\"participants\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Participant Management</CardTitle>\n              <CardDescription>\n                Manage tournament participants, seeding, and registration\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <i className=\"fas fa-users text-4xl mb-4\"></i>\n                <p className=\"text-lg font-medium\">Participant Management</p>\n                <p>Advanced participant management tools coming soon!</p>\n                <p className=\"text-sm mt-2\">\n                  Current participants: {tournament.participants?.length || 0}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Bracket Tab - Placeholder for future enhancement */}\n        <TabsContent value=\"bracket\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Bracket Editor</CardTitle>\n              <CardDescription>\n                Edit tournament bracket and match arrangements\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <i className=\"fas fa-sitemap text-4xl mb-4\"></i>\n                <p className=\"text-lg font-medium\">\n                  Interactive Bracket Editor\n                </p>\n                <p>Advanced bracket editing tools coming soon!</p>\n                {/* <p className=\"text-sm mt-2\">Tournament format: {gameFormats.find(f => f.value === tournament.gameFormat)?.label}</p> */}\n                {/* TODO: gameFormat doesn&apos;t exist in schema */}\n                <p className=\"text-sm mt-2\">\n                  Tournament format:{\" \"}\n                  {\n                    gameFormats.find((f) => f.value === tournament.gameType)\n                      ?.label\n                  }\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Settings Tab - Placeholder for future enhancement */}\n        <TabsContent value=\"settings\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Advanced Settings</CardTitle>\n              <CardDescription>\n                Tournament configuration and administrative options\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <i className=\"fas fa-cog text-4xl mb-4\"></i>\n                <p className=\"text-lg font-medium\">Advanced Configuration</p>\n                <p>\n                  Tournament templates, automation settings, and more coming\n                  soon!\n                </p>\n                <p className=\"text-sm mt-2\">Status: {tournamentStatus}</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/logo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/auth/hooks/useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/auth/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/auth/types/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[374,377],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[374,377],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Auth.js v5 types\nexport interface AuthUser {\n  id: string;\n  name?: string | null;\n  email?: string | null;\n  image?: string | null;\n  // Additional fields for compatibility with existing components\n  firstName?: string | null;\n  lastName?: string | null;\n  username?: string | null;\n  profileImageUrl?: string | null;\n  primaryCommunity?: string | null;\n  communities?: any[] | null;\n}\n\nexport interface AuthSession {\n  user?: AuthUser;\n  expires: string;\n}\n\nexport interface AuthState {\n  session: AuthSession | null;\n  user: AuthUser | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n}\n\n// OAuth provider types\nexport type OAuthProvider = \"google\" | \"github\" | \"discord\";\n\nexport interface AuthProviderConfig {\n  id: string;\n  name: string;\n  type: string;\n  signinUrl: string;\n  callbackUrl: string;\n}\n\n// Form types for authentication\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterData {\n  email: string;\n  password: string;\n  name?: string;\n  firstName?: string;\n  lastName?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/collaborative-streaming/components/CollaboratorManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/collaborative-streaming/components/CoordinationDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/collaborative-streaming/components/PlatformAccountManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3340,3343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3340,3343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3390,3393],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3390,3393],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4214,4217],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4214,4217],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":176,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5022,5025],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5022,5025],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":547,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[17914,18083],"text":"\n              Connected platforms maintain their own privacy policies and terms\n              of service. Review each platform&apos;s documentation for details.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[17914,18083],"text":"\n              Connected platforms maintain their own privacy policies and terms\n              of service. Review each platform&lsquo;s documentation for details.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[17914,18083],"text":"\n              Connected platforms maintain their own privacy policies and terms\n              of service. Review each platform&#39;s documentation for details.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[17914,18083],"text":"\n              Connected platforms maintain their own privacy policies and terms\n              of service. Review each platform&rsquo;s documentation for details.\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Link as LinkIcon,\n  Unlink,\n  ExternalLink,\n  CheckCircle,\n  AlertCircle,\n  Users,\n  RefreshCw,\n  Shield,\n  Clock,\n  Eye,\n} from \"lucide-react\";\nimport { SiTwitch, SiYoutube, SiFacebook } from \"react-icons/si\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/features/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { SafeUserPlatformAccount } from \"@shared/schema\";\n\ntype PlatformAccount = SafeUserPlatformAccount;\n\ninterface PlatformStatus {\n  isConnected: boolean;\n  isExpired: boolean;\n  expiryDate?: string;\n  lastChecked?: string;\n}\n\nconst PLATFORM_INFO = {\n  twitch: {\n    name: \"Twitch\",\n    icon: SiTwitch,\n    color: \"text-purple-600\",\n    bgColor: \"bg-purple-50 border-purple-200\",\n    description:\n      \"Connect your Twitch account to stream and coordinate with other creators\",\n    capabilities: [\n      \"Live streaming\",\n      \"Chat integration\",\n      \"Viewer analytics\",\n      \"Stream coordination\",\n    ],\n  },\n  youtube: {\n    name: \"YouTube\",\n    icon: SiYoutube,\n    color: \"text-red-600\",\n    bgColor: \"bg-red-50 border-red-200\",\n    description:\n      \"Connect your YouTube channel for live broadcasts and collaboration\",\n    capabilities: [\n      \"Live broadcasts\",\n      \"Scheduled streams\",\n      \"Community posts\",\n      \"Analytics\",\n    ],\n  },\n  facebook: {\n    name: \"Facebook Gaming\",\n    icon: SiFacebook,\n    color: \"text-blue-600\",\n    bgColor: \"bg-blue-50 border-blue-200\",\n    description: \"Connect your Facebook Gaming account for live streaming\",\n    capabilities: [\n      \"Live video\",\n      \"Community engagement\",\n      \"Audience insights\",\n      \"Cross-promotion\",\n    ],\n  },\n};\n\nexport function PlatformAccountManager() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [connectingPlatform, setConnectingPlatform] = useState<string | null>(\n    null,\n  );\n\n  // Fetch platform accounts\n  const {\n    data: accounts = [],\n    isLoading,\n    refetch,\n  } = useQuery<PlatformAccount[]>({\n    queryKey: [\"/api/platforms/accounts\"],\n    enabled: !!user,\n  });\n\n  // Fetch platform status\n  const { data: platformStatuses = {} } = useQuery<\n    Record<string, PlatformStatus>\n  >({\n    queryKey: [\"/api/platforms/status\"],\n    enabled: !!user,\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  // Connect platform account mutation\n  const connectPlatform = useMutation({\n    mutationFn: async (platform: string) => {\n      const response = await fetch(\n        \"/api/platforms/\" + platform + \"/oauth/initiate\",\n        {\n          credentials: \"include\",\n        },\n      );\n      if (!response.ok) {\n        throw new Error(\"Failed to initiate OAuth\");\n      }\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Redirect to OAuth flow\n      if (data && typeof data === \"object\" && \"authUrl\" in data) {\n        window.location.href = (data as any).authUrl;\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Connection Failed\",\n        description: error.message || \"Failed to initiate platform connection\",\n        variant: \"destructive\",\n      });\n      setConnectingPlatform(null);\n    },\n  });\n\n  // Disconnect platform account mutation\n  const disconnectPlatform = useMutation({\n    mutationFn: async (accountId: string) => {\n      await apiRequest(\"DELETE\", \"/api/platforms/accounts/\" + accountId);\n      return { success: true };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/platforms/accounts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/platforms/status\"] });\n      toast({\n        title: \"Account Disconnected\",\n        description: \"Platform account has been successfully disconnected\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Disconnection Failed\",\n        description: error.message || \"Failed to disconnect platform account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Refresh token mutation\n  const refreshToken = useMutation({\n    mutationFn: async (platform: string) => {\n      const response = await apiRequest(\n        \"POST\",\n        \"/api/platforms/\" + platform + \"/refresh\",\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/platforms/accounts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/platforms/status\"] });\n      toast({\n        title: \"Token Refreshed\",\n        description: \"Platform access token has been successfully refreshed\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Refresh Failed\",\n        description: error.message || \"Failed to refresh platform token\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleConnect = (platform: string) => {\n    setConnectingPlatform(platform);\n    connectPlatform.mutate(platform);\n  };\n\n  const handleDisconnect = (accountId: string, platform: string) => {\n    if (\n      confirm(\n        `Are you sure you want to disconnect your ${PLATFORM_INFO[platform as keyof typeof PLATFORM_INFO]?.name} account?`,\n      )\n    ) {\n      disconnectPlatform.mutate(accountId);\n    }\n  };\n\n  const handleRefreshToken = (platform: string) => {\n    refreshToken.mutate(platform);\n  };\n\n  const getAccountByPlatform = (\n    platform: string,\n  ): PlatformAccount | undefined => {\n    return Array.isArray(accounts)\n      ? accounts.find(\n          (account: PlatformAccount) => account.platform === platform,\n        )\n      : undefined;\n  };\n\n  const getPlatformStatus = (platform: string): PlatformStatus => {\n    return (\n      (platformStatuses as Record<string, PlatformStatus>)[platform] || {\n        isConnected: false,\n        isExpired: false,\n      }\n    );\n  };\n\n  const getConnectionStatus = (platform: string) => {\n    const account = getAccountByPlatform(platform);\n    const status = getPlatformStatus(platform);\n\n    if (!account) return \"disconnected\";\n    if (status.isExpired) return \"expired\";\n    if (status.isConnected) return \"connected\";\n    return \"unknown\";\n  };\n\n  const renderPlatformCard = (platform: string) => {\n    const info = PLATFORM_INFO[platform as keyof typeof PLATFORM_INFO];\n    const account = getAccountByPlatform(platform);\n    getPlatformStatus(platform); // Check status but don't use in rendering yet\n    const connectionStatus = getConnectionStatus(platform);\n    const IconComponent = info.icon;\n\n    return (\n      <Card\n        key={platform}\n        className={`transition-all hover:shadow-md ${info.bgColor}`}\n        data-testid={`platform-card-${platform}`}\n      >\n        <CardHeader className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className={`p-2 rounded-lg bg-white shadow-sm`}>\n                <IconComponent className={`h-6 w-6 ${info.color}`} />\n              </div>\n              <div>\n                <CardTitle className=\"text-lg\">{info.name}</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  {info.description}\n                </p>\n              </div>\n            </div>\n\n            {connectionStatus === \"connected\" && (\n              <Badge\n                variant=\"outline\"\n                className=\"bg-green-100 text-green-800 border-green-200\"\n              >\n                <CheckCircle className=\"h-3 w-3 mr-1\" />\n                Connected\n              </Badge>\n            )}\n            {connectionStatus === \"expired\" && (\n              <Badge\n                variant=\"outline\"\n                className=\"bg-yellow-100 text-yellow-800 border-yellow-200\"\n              >\n                <AlertCircle className=\"h-3 w-3 mr-1\" />\n                Expired\n              </Badge>\n            )}\n            {connectionStatus === \"disconnected\" && (\n              <Badge\n                variant=\"outline\"\n                className=\"bg-gray-100 text-gray-800 border-gray-200\"\n              >\n                Not Connected\n              </Badge>\n            )}\n          </div>\n\n          {account && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2 text-sm\">\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"font-medium\">@{account.handle}</span>\n                {account.channelId && (\n                  <span className=\"text-muted-foreground\">\n                    • Channel ID: {account.channelId}\n                  </span>\n                )}\n              </div>\n\n              {account.tokenExpiresAt && (\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Clock className=\"h-4 w-4\" />\n                  <span>\n                    Token expires:{\" \"}\n                    {new Date(account.tokenExpiresAt).toLocaleDateString()}\n                  </span>\n                </div>\n              )}\n\n              <div className=\"flex flex-wrap gap-1\">\n                {Array.isArray(account.scopes) &&\n                  account.scopes.map((scope: string) => (\n                    <Badge key={scope} variant=\"secondary\" className=\"text-xs\">\n                      {scope}\n                    </Badge>\n                  ))}\n              </div>\n            </div>\n          )}\n        </CardHeader>\n\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <h4 className=\"font-medium text-sm\">Capabilities</h4>\n            <ul className=\"space-y-1\">\n              {info.capabilities.map((capability) => (\n                <li\n                  key={capability}\n                  className=\"flex items-center gap-2 text-sm text-muted-foreground\"\n                >\n                  <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                  {capability}\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          <Separator />\n\n          <div className=\"flex items-center gap-2\">\n            {connectionStatus === \"disconnected\" ? (\n              <Button\n                onClick={() => handleConnect(platform)}\n                disabled={\n                  connectingPlatform === platform || connectPlatform.isPending\n                }\n                className=\"flex-1\"\n                data-testid={`button-connect-${platform}`}\n              >\n                <LinkIcon className=\"h-4 w-4 mr-2\" />\n                {connectingPlatform === platform\n                  ? \"Connecting...\"\n                  : `Connect ${info.name}`}\n              </Button>\n            ) : (\n              <div className=\"flex gap-2 w-full\">\n                {connectionStatus === \"expired\" && (\n                  <Button\n                    onClick={() => handleRefreshToken(platform)}\n                    disabled={refreshToken.isPending}\n                    variant=\"outline\"\n                    className=\"flex-1\"\n                    data-testid={`button-refresh-${platform}`}\n                  >\n                    <RefreshCw className=\"h-4 w-4 mr-2\" />\n                    {refreshToken.isPending ? \"Refreshing...\" : \"Refresh Token\"}\n                  </Button>\n                )}\n\n                <Button\n                  onClick={() =>\n                    account && handleDisconnect(account.id, platform)\n                  }\n                  disabled={disconnectPlatform.isPending}\n                  variant=\"outline\"\n                  data-testid={`button-disconnect-${platform}`}\n                >\n                  <Unlink className=\"h-4 w-4 mr-2\" />\n                  Disconnect\n                </Button>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\" data-testid=\"platform-manager-loading\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"animate-pulse space-y-4\">\n              <div className=\"w-64 h-6 bg-gray-300 rounded\" />\n              <div className=\"w-full h-4 bg-gray-200 rounded\" />\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"w-full h-48 bg-gray-300 rounded-lg\" />\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const connectedAccounts = Array.isArray(accounts)\n    ? accounts.filter((account: PlatformAccount) => account.isActive)\n    : [];\n  const expiredAccounts = Array.isArray(accounts)\n    ? accounts.filter((account: PlatformAccount) => {\n        const status = getPlatformStatus(account.platform);\n        return status.isExpired;\n      })\n    : [];\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"platform-account-manager\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Platform Accounts</h2>\n          <p className=\"text-muted-foreground\">\n            Connect your streaming platforms to enable cross-platform\n            coordination\n          </p>\n        </div>\n\n        <Button\n          onClick={() => refetch()}\n          variant=\"outline\"\n          disabled={isLoading}\n          data-testid=\"button-refresh-accounts\"\n        >\n          <RefreshCw className=\"h-4 w-4 mr-2\" />\n          Refresh Status\n        </Button>\n      </div>\n\n      {/* Status Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card data-testid=\"card-connected-platforms\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Connected Platforms\n            </CardTitle>\n            <Shield className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{connectedAccounts.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Ready for streaming coordination\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-expired-tokens\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Expired Tokens\n            </CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {expiredAccounts.length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Require token refresh\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-total-viewers\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Potential Reach\n            </CardTitle>\n            <Eye className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">∞</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Cross-platform audience\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Alerts */}\n      {expiredAccounts.length > 0 && (\n        <Alert>\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            {expiredAccounts.length} platform account\n            {expiredAccounts.length > 1 ? \"s have\" : \" has\"} expired tokens.\n            Refresh them to enable streaming coordination.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Platform Cards */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n        {Object.keys(PLATFORM_INFO).map(renderPlatformCard)}\n      </div>\n\n      {/* Security Info */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5\" />\n            Security & Privacy\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n            <div>\n              <h4 className=\"font-medium mb-2\">Secure OAuth Flow</h4>\n              <ul className=\"space-y-1 text-muted-foreground\">\n                <li>• Industry-standard OAuth 2.0 authentication</li>\n                <li>\n                  • PKCE (Proof Key for Code Exchange) for enhanced security\n                </li>\n                <li>• Tokens stored securely with encryption</li>\n                <li>• Automatic token refresh when possible</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium mb-2\">Data Privacy</h4>\n              <ul className=\"space-y-1 text-muted-foreground\">\n                <li>• Only requested permissions are accessed</li>\n                <li>• No storage of streaming content</li>\n                <li>• Minimal data collection for coordination</li>\n                <li>• Disconnect anytime without data retention</li>\n              </ul>\n            </div>\n          </div>\n\n          <Separator />\n\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <ExternalLink className=\"h-4 w-4\" />\n            <span>\n              Connected platforms maintain their own privacy policies and terms\n              of service. Review each platform's documentation for details.\n            </span>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/collaborative-streaming/components/SessionMonitor.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3641,3644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3641,3644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState, useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport {\n  Activity,\n  Users,\n  MessageSquare,\n  TrendingUp,\n  Clock,\n  Wifi,\n  WifiOff,\n  AlertTriangle,\n  CheckCircle2,\n  Radio,\n  Eye,\n  Heart,\n} from \"lucide-react\";\nimport { useCoordinationStatus } from \"../hooks/useCollaborativeStreaming\";\nimport type { CoordinationEvent, StreamMetrics } from \"../types\";\n\ntype SessionMonitorProps = {\n  eventId: string;\n};\n\ntype ConnectionStatus = \"connected\" | \"disconnected\" | \"reconnecting\";\n\ntype CollaboratorStatus = {\n  id: string;\n  name: string;\n  role: string;\n  isLive: boolean;\n  connectionStatus: ConnectionStatus;\n  audioEnabled: boolean;\n  videoEnabled: boolean;\n  lastSeen: Date;\n  viewerCount: number;\n};\n\nexport function SessionMonitor({ eventId }: SessionMonitorProps) {\n  const { data: coordinationStatus } = useCoordinationStatus(eventId);\n  const [events, setEvents] = useState<CoordinationEvent[]>([]);\n\n  // Now properly typed with React Query generics\n  const status = coordinationStatus;\n\n  // Mock data for demonstration - only in development\n  // Use useState to capture timestamp at component mount to avoid impure function call during render\n  const [nowTimestamp] = useState(() => Date.now());\n  const mockCollaborators: CollaboratorStatus[] = useMemo(() => {\n    if (!import.meta.env.DEV) return [];\n\n    const now = nowTimestamp;\n    return [\n      {\n        id: \"1\",\n        name: \"StreamMaster\",\n        role: \"host\",\n        isLive: true,\n        connectionStatus: \"connected\" as ConnectionStatus,\n        audioEnabled: true,\n        videoEnabled: true,\n        lastSeen: new Date(now),\n        viewerCount: 823,\n      },\n      {\n        id: \"2\",\n        name: \"CoStreamPro\",\n        role: \"co_host\",\n        isLive: true,\n        connectionStatus: \"connected\" as ConnectionStatus,\n        audioEnabled: true,\n        videoEnabled: false,\n        lastSeen: new Date(now - 30000),\n        viewerCount: 312,\n      },\n      {\n        id: \"3\",\n        name: \"GuestPlayer\",\n        role: \"guest\",\n        isLive: false,\n        connectionStatus: \"disconnected\" as ConnectionStatus,\n        audioEnabled: false,\n        videoEnabled: false,\n        lastSeen: new Date(now - 120000),\n        viewerCount: 0,\n      },\n    ];\n  }, [nowTimestamp]);\n\n  const mockMetrics: StreamMetrics = import.meta.env.DEV\n    ? {\n        totalViewers: 1247,\n        viewersByPlatform: {\n          twitch: 823,\n          youtube: 312,\n          facebook: 112,\n        },\n        peakViewers: 1456,\n        streamDuration: 145,\n        chatActivity: 89,\n        lastUpdated: new Date(),\n      }\n    : {\n        totalViewers: status?.streamMetrics?.totalViewers || 0,\n        viewersByPlatform: status?.streamMetrics?.platformViewers || {},\n        peakViewers: 0,\n        streamDuration: status?.streamMetrics?.duration || 0,\n        chatActivity: 0,\n        lastUpdated: new Date(),\n      };\n\n  // Simulate real-time events - only in development\n  useEffect(() => {\n    if (!import.meta.env.DEV) return;\n\n    const eventTypes = [\n      \"phase_change\",\n      \"collaborator_joined\",\n      \"collaborator_left\",\n      \"platform_status\",\n      \"message\",\n    ];\n    const interval = setInterval(() => {\n      const randomEvent: CoordinationEvent = {\n        id: Math.random().toString(36).substr(2, 9),\n        type: eventTypes[Math.floor(Math.random() * eventTypes.length)] as any,\n        timestamp: new Date(),\n        data: { message: \"Sample event data\" },\n        message: `Event occurred at ${new Date().toLocaleTimeString()}`,\n      };\n\n      setEvents((prev) => [randomEvent, ...prev.slice(0, 19)]); // Keep last 20 events\n    }, 10000); // New event every 10 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const getConnectionIcon = (status: ConnectionStatus) => {\n    switch (status) {\n      case \"connected\":\n        return <Wifi className=\"h-4 w-4 text-green-500\" />;\n      case \"disconnected\":\n        return <WifiOff className=\"h-4 w-4 text-red-500\" />;\n      case \"reconnecting\":\n        return <Activity className=\"h-4 w-4 text-yellow-500 animate-spin\" />;\n    }\n  };\n\n  const getEventIcon = (type: string) => {\n    switch (type) {\n      case \"phase_change\":\n        return <Radio className=\"h-4 w-4\" />;\n      case \"collaborator_joined\":\n        return <Users className=\"h-4 w-4 text-green-500\" />;\n      case \"collaborator_left\":\n        return <Users className=\"h-4 w-4 text-red-500\" />;\n      case \"platform_status\":\n        return <Activity className=\"h-4 w-4\" />;\n      case \"message\":\n        return <MessageSquare className=\"h-4 w-4\" />;\n      default:\n        return <Activity className=\"h-4 w-4\" />;\n    }\n  };\n\n  const formatTimestamp = (date: Date) => {\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n\n    if (diff < 60000) return \"Just now\";\n    if (diff < 3600000) return `${Math.floor(diff / 60000)}m ago`;\n    return date.toLocaleTimeString();\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"session-monitor\">\n      {/* Real-time Stats */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <Card data-testid=\"stat-total-viewers\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Live Viewers</CardTitle>\n            <Eye className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {mockMetrics.totalViewers.toLocaleString()}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              <TrendingUp className=\"h-3 w-3 inline mr-1\" />\n              +12% from last hour\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"stat-collaborators\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Collaborators</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {mockCollaborators.filter((c) => c.isLive).length} /{\" \"}\n              {mockCollaborators.length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Active / Total</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"stat-duration\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Stream Time</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {Math.floor(mockMetrics.streamDuration / 60)}:\n              {String(mockMetrics.streamDuration % 60).padStart(2, \"0\")}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Hours : Minutes</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"stat-engagement\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Engagement</CardTitle>\n            <Heart className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {mockMetrics.chatActivity}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Chat activity</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Collaborator Status */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-5 w-5\" />\n              Collaborator Status\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {mockCollaborators.map((collaborator) => (\n                <div\n                  key={collaborator.id}\n                  className=\"flex items-center justify-between p-3 border rounded-lg\"\n                  data-testid={`collaborator-status-${collaborator.id}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"relative\">\n                      <Avatar>\n                        <AvatarImage src=\"\" />\n                        <AvatarFallback>\n                          {collaborator.name.slice(0, 2).toUpperCase()}\n                        </AvatarFallback>\n                      </Avatar>\n                      {collaborator.isLive && (\n                        <div className=\"absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 border-2 border-white rounded-full\" />\n                      )}\n                    </div>\n\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"font-medium\">{collaborator.name}</span>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {collaborator.role}\n                        </Badge>\n                      </div>\n\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                        {getConnectionIcon(collaborator.connectionStatus)}\n                        <span className=\"capitalize\">\n                          {collaborator.connectionStatus}\n                        </span>\n                        {collaborator.isLive && (\n                          <>\n                            <span>•</span>\n                            <Eye className=\"h-3 w-3\" />\n                            <span>{collaborator.viewerCount}</span>\n                          </>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-1\">\n                    {collaborator.isLive && (\n                      <>\n                        <div\n                          className={`p-1 rounded ${collaborator.audioEnabled ? \"bg-green-100\" : \"bg-red-100\"}`}\n                        >\n                          {collaborator.audioEnabled ? (\n                            <Activity className=\"h-3 w-3 text-green-600\" />\n                          ) : (\n                            <Activity className=\"h-3 w-3 text-red-600\" />\n                          )}\n                        </div>\n                        <div\n                          className={`p-1 rounded ${collaborator.videoEnabled ? \"bg-green-100\" : \"bg-red-100\"}`}\n                        >\n                          {collaborator.videoEnabled ? (\n                            <CheckCircle2 className=\"h-3 w-3 text-green-600\" />\n                          ) : (\n                            <AlertTriangle className=\"h-3 w-3 text-red-600\" />\n                          )}\n                        </div>\n                      </>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Event Feed */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Activity className=\"h-5 w-5\" />\n              Live Activity Feed\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ScrollArea className=\"h-80\">\n              <div className=\"space-y-3\">\n                {events.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Activity className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                    <p>No recent activity</p>\n                    <p className=\"text-sm\">\n                      Events will appear here as they happen\n                    </p>\n                  </div>\n                ) : (\n                  events.map((event) => (\n                    <div\n                      key={event.id}\n                      className=\"flex items-start space-x-3 p-3 rounded-lg bg-muted/50\"\n                      data-testid={`event-${event.id}`}\n                    >\n                      <div className=\"p-1 rounded-full bg-background\">\n                        {getEventIcon(event.type)}\n                      </div>\n\n                      <div className=\"flex-1 space-y-1\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm font-medium capitalize\">\n                            {event.type.replace(\"_\", \" \")}\n                          </span>\n                          <span className=\"text-xs text-muted-foreground\">\n                            {formatTimestamp(event.timestamp)}\n                          </span>\n                        </div>\n\n                        {event.message && (\n                          <p className=\"text-sm text-muted-foreground\">\n                            {event.message}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </ScrollArea>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Platform Metrics */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-5 w-5\" />\n            Platform Performance\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {Object.entries(mockMetrics.viewersByPlatform).map(\n              ([platform, viewers]) => {\n                const percentage = (viewers / mockMetrics.totalViewers) * 100;\n                return (\n                  <div\n                    key={platform}\n                    className=\"space-y-2\"\n                    data-testid={`platform-metric-${platform}`}\n                  >\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm font-medium capitalize\">\n                        {platform}\n                      </span>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {viewers.toLocaleString()} ({percentage.toFixed(1)}%)\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div\n                        className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n                        style={{ width: `${percentage}%` }}\n                      />\n                    </div>\n                  </div>\n                );\n              },\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/collaborative-streaming/components/StreamEventForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/collaborative-streaming/hooks/useCollaborativeStreaming.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2920,2923],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2920,2923],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4051,4054],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4051,4054],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":169,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5037,5040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5037,5040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":208,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6093,6096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6093,6096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":247,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7126,7129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7126,7129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":280,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":280,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8048,8051],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8048,8051],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":318,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":318,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9004,9007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9004,9007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type {\n  CollaborativeStreamEvent,\n  StreamCollaborator,\n  InsertCollaborativeStreamEvent,\n  InsertStreamCollaborator,\n  CoordinationStatus,\n  CollaborationSuggestion,\n} from \"../types\";\n\n// Query keys for consistent cache management\nexport const collaborativeStreamingKeys = {\n  all: [\"/api/collaborative-streams\"] as const,\n  events: [\"/api/collaborative-streams\"] as const,\n  event: (id: string) => [\"/api/collaborative-streams\", id] as const,\n  collaborators: (eventId: string) =>\n    [\"/api/collaborative-streams\", eventId, \"collaborators\"] as const,\n  suggestions: (eventId: string) =>\n    [\"/api/collaborative-streams\", eventId, \"suggestions\"] as const,\n  coordination: (eventId: string) =>\n    [\"/api/collaborative-streams\", eventId, \"coordination\", \"status\"] as const,\n};\n\n// Get user's collaborative streaming events\nexport function useCollaborativeStreamEvents() {\n  return useQuery<CollaborativeStreamEvent[]>({\n    queryKey: collaborativeStreamingKeys.events,\n  });\n}\n\n// Get specific collaborative streaming event\nexport function useCollaborativeStreamEvent(eventId: string) {\n  return useQuery<CollaborativeStreamEvent>({\n    queryKey: collaborativeStreamingKeys.event(eventId),\n    enabled: !!eventId,\n  });\n}\n\n// Get collaborators for an event\nexport function useStreamCollaborators(eventId: string) {\n  return useQuery<StreamCollaborator[]>({\n    queryKey: collaborativeStreamingKeys.collaborators(eventId),\n    enabled: !!eventId,\n  });\n}\n\n// Get AI-powered collaboration suggestions\nexport function useCollaborationSuggestions(eventId: string) {\n  return useQuery<CollaborationSuggestion[]>({\n    queryKey: collaborativeStreamingKeys.suggestions(eventId),\n    enabled: !!eventId,\n  });\n}\n\n// Get coordination session status\nexport function useCoordinationStatus(eventId: string) {\n  return useQuery<CoordinationStatus>({\n    queryKey: collaborativeStreamingKeys.coordination(eventId),\n    enabled: !!eventId,\n    refetchInterval: 5000, // Refresh every 5 seconds for real-time updates\n  });\n}\n\n// Create collaborative streaming event\nexport function useCreateCollaborativeStreamEvent() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (\n      eventData: Omit<InsertCollaborativeStreamEvent, \"creatorId\">,\n    ) => {\n      const response = await apiRequest(\n        \"POST\",\n        \"/api/collaborative-streams\",\n        eventData,\n      );\n      return response.json();\n    },\n    onSuccess: (data: CollaborativeStreamEvent) => {\n      queryClient.invalidateQueries({\n        queryKey: collaborativeStreamingKeys.events,\n      });\n      toast({\n        title: \"Stream Event Created\",\n        description: `\"${data.title}\" has been created successfully.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error Creating Event\",\n        description:\n          error.message || \"Failed to create collaborative stream event.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Update collaborative streaming event\nexport function useUpdateCollaborativeStreamEvent() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async ({\n      eventId,\n      updates,\n    }: {\n      eventId: string;\n      updates: Partial<InsertCollaborativeStreamEvent>;\n    }) => {\n      const response = await apiRequest(\n        \"PATCH\",\n        `/api/collaborative-streams/${eventId}`,\n        updates,\n      );\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({\n        queryKey: collaborativeStreamingKeys.event(variables.eventId),\n      });\n      queryClient.invalidateQueries({\n        queryKey: collaborativeStreamingKeys.events,\n      });\n      toast({\n        title: \"Event Updated\",\n        description:\n          \"Your collaborative stream event has been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error Updating Event\",\n        description:\n          error.message || \"Failed to update collaborative stream event.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Delete collaborative streaming event\nexport function useDeleteCollaborativeStreamEvent() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (eventId: string) => {\n      const response = await apiRequest(\n        \"DELETE\",\n        `/api/collaborative-streams/${eventId}`,\n      );\n      return response.json();\n    },\n    onSuccess: (_, eventId) => {\n      queryClient.invalidateQueries({\n        queryKey: collaborativeStreamingKeys.events,\n      });\n      queryClient.removeQueries({\n        queryKey: collaborativeStreamingKeys.event(eventId),\n      });\n      toast({\n        title: \"Event Deleted\",\n        description:\n          \"Your collaborative stream event has been deleted successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error Deleting Event\",\n        description:\n          error.message || \"Failed to delete collaborative stream event.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Add collaborator to stream event\nexport function useAddStreamCollaborator() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async ({\n      eventId,\n      collaboratorData,\n    }: {\n      eventId: string;\n      collaboratorData: Omit<InsertStreamCollaborator, \"streamEventId\">;\n    }) => {\n      const response = await apiRequest(\n        \"POST\",\n        `/api/collaborative-streams/${eventId}/collaborators`,\n        collaboratorData,\n      );\n      return response.json();\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({\n        queryKey: collaborativeStreamingKeys.collaborators(variables.eventId),\n      });\n      toast({\n        title: \"Collaborator Added\",\n        description: \"The collaborator has been added to your stream event.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error Adding Collaborator\",\n        description:\n          error.message || \"Failed to add collaborator to stream event.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Remove collaborator from stream event\nexport function useRemoveStreamCollaborator() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async ({\n      eventId,\n      collaboratorId,\n    }: {\n      eventId: string;\n      collaboratorId: string;\n    }) => {\n      const response = await apiRequest(\n        \"DELETE\",\n        `/api/collaborative-streams/${eventId}/collaborators/${collaboratorId}`,\n      );\n      return response.json();\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({\n        queryKey: collaborativeStreamingKeys.collaborators(variables.eventId),\n      });\n      toast({\n        title: \"Collaborator Removed\",\n        description:\n          \"The collaborator has been removed from your stream event.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error Removing Collaborator\",\n        description:\n          error.message || \"Failed to remove collaborator from stream event.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Start coordination session\nexport function useStartCoordinationSession() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (eventId: string) => {\n      const response = await apiRequest(\n        \"POST\",\n        `/api/collaborative-streams/${eventId}/coordination/start`,\n      );\n      return response.json();\n    },\n    onSuccess: (_, eventId) => {\n      queryClient.invalidateQueries({\n        queryKey: collaborativeStreamingKeys.coordination(eventId),\n      });\n      toast({\n        title: \"Coordination Session Started\",\n        description:\n          \"Your collaborative stream coordination session is now active.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error Starting Session\",\n        description: error.message || \"Failed to start coordination session.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Update coordination phase\nexport function useUpdateCoordinationPhase() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async ({\n      eventId,\n      phase,\n    }: {\n      eventId: string;\n      phase: string;\n    }) => {\n      const response = await apiRequest(\n        \"PATCH\",\n        `/api/collaborative-streams/${eventId}/coordination/phase`,\n        { phase },\n      );\n      return response.json();\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({\n        queryKey: collaborativeStreamingKeys.coordination(variables.eventId),\n      });\n      toast({\n        title: \"Phase Updated\",\n        description: `Stream phase updated to ${variables.phase}.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error Updating Phase\",\n        description: error.message || \"Failed to update coordination phase.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/collaborative-streaming/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/collaborative-streaming/pages/CollaborativeStreamingDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/collaborative-streaming/types/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1453,1456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1453,1456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Collaborative streaming types\nexport type {\n  CollaborativeStreamEvent,\n  StreamCollaborator,\n  StreamCoordinationSession,\n  InsertCollaborativeStreamEvent,\n  InsertStreamCollaborator,\n  InsertStreamCoordinationSession,\n} from \"@shared/schema\";\n\n// Frontend-specific types for UI components\nexport interface StreamEventFormData {\n  title: string;\n  description?: string;\n  scheduledStartTime: Date;\n  estimatedDuration: number;\n  communityId?: string;\n  streamingPlatforms: string[];\n  contentType: string;\n  targetAudience: string;\n  maxCollaborators?: number;\n  requiresApproval: boolean;\n  isPrivate: boolean;\n  tags: string[];\n}\n\nexport interface CollaboratorInviteData {\n  userId?: string;\n  email?: string;\n  role: \"host\" | \"co_host\" | \"guest\" | \"moderator\";\n  platformHandles?: Record<string, string>;\n  streamingCapabilities: string[];\n  message?: string;\n}\n\nexport interface CoordinationPhase {\n  name: \"preparation\" | \"live\" | \"break\" | \"wrap_up\" | \"ended\";\n  displayName: string;\n  description: string;\n  allowedTransitions: string[];\n}\n\nexport interface StreamMetrics {\n  totalViewers: number;\n  viewersByPlatform: Record<string, number>;\n  peakViewers: number;\n  streamDuration: number;\n  chatActivity: number;\n  lastUpdated: Date;\n}\n\nexport interface CoordinationEvent {\n  id: string;\n  type:\n    | \"phase_change\"\n    | \"collaborator_joined\"\n    | \"collaborator_left\"\n    | \"platform_status\"\n    | \"message\";\n  timestamp: Date;\n  data: any;\n  userId?: string;\n  message?: string;\n}\n\n// Coordination status types\nexport interface CoordinationStatus {\n  eventId: string;\n  currentPhase: \"preparation\" | \"live\" | \"break\" | \"wrap_up\" | \"ended\";\n  actualStartTime?: string;\n  activeCollaborators?: string[];\n  currentHost?: string;\n  streamMetrics?: {\n    totalViewers: number;\n    platformViewers: Record<string, number>;\n    duration: number;\n  };\n}\n\n// Collaboration suggestion types\nexport interface CollaborationSuggestion {\n  id: string;\n  type:\n    | \"optimal_timing\"\n    | \"content_synergy\"\n    | \"audience_overlap\"\n    | \"platform_strategy\";\n  title: string;\n  description: string;\n  confidence: number;\n  estimatedImpact: \"low\" | \"medium\" | \"high\";\n  actionable: boolean;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/communities/components/CommunityCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/communities/components/CommunityProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/communities/components/GamePodCalendar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[241,244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[241,244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'communityId' is defined but never used. Allowed unused args must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'theme' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":8}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Calendar } from \"lucide-react\";\n\ninterface GamePodCalendarProps {\n  communityId: string;\n  communityName: string;\n  theme?: any;\n}\n\nexport function GamePodCalendar({\n  communityId,\n  communityName,\n  theme,\n}: GamePodCalendarProps) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Calendar className=\"h-5 w-5\" />\n          {communityName} Events\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-center py-8 text-muted-foreground\">\n          <Calendar className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n          <p>Event calendar coming soon!</p>\n          <p className=\"text-sm\">\n            Stay tuned for {communityName} events and tournaments.\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/communities/components/realm-dashboards/BladeforgeDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[597,600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[597,600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Link } from \"wouter\";\nimport { getCommunityTheme } from \"../../utils/communityThemes\";\n// TODO: Update to use events feature GamePodCalendar\n\ninterface User {\n  id: string;\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  profileImageUrl?: string;\n  communities?: any[];\n}\n\ninterface BladeforgeDashboardProps {\n  user: User;\n}\n\nexport function BladeforgeDashboard({ user }: BladeforgeDashboardProps) {\n  const theme = getCommunityTheme(\"bladeforge\");\n\n  const getUserInitials = () => {\n    const first = user.firstName?.[0] || \"\";\n    const last = user.lastName?.[0] || \"\";\n    return first + last || user.email?.[0]?.toUpperCase() || \"U\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-teal-900 to-slate-900 relative\">\n      {/* Tactical Grid Overlay */}\n      <div className=\"absolute inset-0 opacity-20\">\n        <div className=\"grid grid-cols-12 grid-rows-8 h-full\">\n          {Array.from({ length: 96 }).map((_, i) => (\n            <div key={i} className=\"border border-teal-400/20\"></div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"relative z-10\">\n        {/* Command Center Header */}\n        <div className=\"container mx-auto px-4 py-12\">\n          <div className=\"text-center space-y-6\">\n            <div className=\"inline-flex items-center gap-6 px-8 py-6 rounded-xl bg-black/80 backdrop-blur-xl border border-teal-400 shadow-2xl\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-teal-500 to-cyan-400 rounded-lg flex items-center justify-center shadow-lg\">\n                <i className=\"fas fa-sword text-white text-2xl\"></i>\n              </div>\n              <span\n                className=\"text-4xl font-bold text-teal-400 tracking-wide\"\n                style={{\n                  fontFamily: theme.fonts.heading,\n                  textShadow: \"0 0 15px rgba(45, 212, 191, 0.7)\",\n                }}\n              >\n                BLADEFORGE\n              </span>\n              <div className=\"w-16 h-16 bg-gradient-to-r from-cyan-400 to-teal-500 rounded-lg flex items-center justify-center shadow-lg\">\n                <i className=\"fas fa-shield text-white text-2xl\"></i>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-center gap-6\">\n              <Avatar className=\"h-24 w-24 border-4 border-teal-400 shadow-xl\">\n                <AvatarImage src={user.profileImageUrl || undefined} />\n                <AvatarFallback\n                  className=\"text-2xl font-bold bg-gradient-to-r from-slate-700 to-teal-600 text-teal-100\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  {getUserInitials()}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"text-left\">\n                <h1\n                  className=\"text-5xl font-bold mb-3 text-teal-100\"\n                  style={{\n                    fontFamily: theme.fonts.heading,\n                    textShadow: \"2px 2px 4px rgba(0,0,0,0.7)\",\n                  }}\n                >\n                  COMMANDER {user.firstName?.toUpperCase() || \"OPERATIVE\"}\n                </h1>\n                <p\n                  className=\"text-xl text-teal-200 mb-3\"\n                  style={{ fontFamily: theme.fonts.body }}\n                >\n                  Your strategic command awaits deployment\n                </p>\n                <div className=\"flex items-center gap-3\">\n                  <Badge className=\"bg-gradient-to-r from-teal-600 to-cyan-500 text-white border-0 text-lg px-4 py-2\">\n                    <i className=\"fas fa-star mr-2\"></i>\n                    Elite Commander\n                  </Badge>\n                  <Badge className=\"bg-gradient-to-r from-slate-600 to-slate-700 text-teal-300 border border-teal-400 text-lg px-4 py-2\">\n                    <i className=\"fas fa-medal mr-2\"></i>\n                    Tactical Expert\n                  </Badge>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container mx-auto px-4 pb-12\">\n          {/* Tactical Operations Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12 -mt-6\">\n            <Link href=\"/matchmaking\">\n              <Card className=\"group hover:scale-105 transition-all duration-300 cursor-pointer bg-black/70 backdrop-blur-sm border-2 border-teal-500 shadow-xl hover:shadow-teal-500/30\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-20 h-20 mx-auto mb-4 rounded-lg bg-gradient-to-r from-red-600 to-orange-500 flex items-center justify-center shadow-lg relative\">\n                    <i className=\"fas fa-crosshairs text-white text-2xl\"></i>\n                    <div className=\"absolute -top-1 -right-1 w-6 h-6 bg-teal-500 rounded-full flex items-center justify-center\">\n                      <i className=\"fas fa-bolt text-white text-xs\"></i>\n                    </div>\n                  </div>\n                  <h3\n                    className=\"font-bold mb-2 text-xl text-teal-300\"\n                    style={{ fontFamily: theme.fonts.heading }}\n                  >\n                    {theme.terminology.quickMatch}\n                  </h3>\n                  <p\n                    className=\"text-teal-400\"\n                    style={{ fontFamily: theme.fonts.body }}\n                  >\n                    Deploy rapid strikes\n                  </p>\n                </CardContent>\n              </Card>\n            </Link>\n\n            <Link href=\"/tablesync\">\n              <Card className=\"group hover:scale-105 transition-all duration-300 cursor-pointer bg-black/70 backdrop-blur-sm border-2 border-cyan-500 shadow-xl hover:shadow-cyan-500/30\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-20 h-20 mx-auto mb-4 rounded-lg bg-gradient-to-r from-blue-600 to-cyan-500 flex items-center justify-center shadow-lg relative\">\n                    <i className=\"fas fa-satellite text-white text-2xl\"></i>\n                    <div className=\"absolute -top-1 -right-1 w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center\">\n                      <i className=\"fas fa-signal text-white text-xs\"></i>\n                    </div>\n                  </div>\n                  <h3\n                    className=\"font-bold mb-2 text-xl text-cyan-300\"\n                    style={{ fontFamily: theme.fonts.heading }}\n                  >\n                    {theme.terminology.tableSync}\n                  </h3>\n                  <p\n                    className=\"text-cyan-400\"\n                    style={{ fontFamily: theme.fonts.body }}\n                  >\n                    Coordinate operations\n                  </p>\n                </CardContent>\n              </Card>\n            </Link>\n\n            <Card className=\"group hover:scale-105 transition-all duration-300 cursor-pointer bg-black/70 backdrop-blur-sm border-2 border-emerald-500 shadow-xl hover:shadow-emerald-500/30\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-20 h-20 mx-auto mb-4 rounded-lg bg-gradient-to-r from-emerald-600 to-green-500 flex items-center justify-center shadow-lg relative\">\n                  <i className=\"fas fa-calendar-week text-white text-2xl\"></i>\n                  <div className=\"absolute -top-1 -right-1 w-6 h-6 bg-emerald-500 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-clock text-white text-xs\"></i>\n                  </div>\n                </div>\n                <h3\n                  className=\"font-bold mb-2 text-xl text-emerald-300\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  {theme.terminology.events}\n                </h3>\n                <p\n                  className=\"text-emerald-400\"\n                  style={{ fontFamily: theme.fonts.body }}\n                >\n                  Strategic planning\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"group hover:scale-105 transition-all duration-300 cursor-pointer bg-black/70 backdrop-blur-sm border-2 border-slate-500 shadow-xl hover:shadow-slate-500/30\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-20 h-20 mx-auto mb-4 rounded-lg bg-gradient-to-r from-slate-600 to-slate-700 flex items-center justify-center shadow-lg relative\">\n                  <i className=\"fas fa-users-gear text-white text-2xl\"></i>\n                  <div className=\"absolute -top-1 -right-1 w-6 h-6 bg-slate-500 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-cog text-white text-xs\"></i>\n                  </div>\n                </div>\n                <h3\n                  className=\"font-bold mb-2 text-xl text-slate-300\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  Command Center\n                </h3>\n                <p\n                  className=\"text-slate-400\"\n                  style={{ fontFamily: theme.fonts.body }}\n                >\n                  Team coordination\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Game Pod Calendar - TODO: Integrate with events feature */}\n          <div className=\"mb-8\">\n            <Card className=\"bg-black/80 backdrop-blur-sm border-2 border-teal-400\">\n              <CardContent className=\"p-6 text-center\">\n                <p className=\"text-teal-300\">Game Pod Calendar - Coming Soon</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Command Dashboard */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Intel Updates */}\n            <Card className=\"lg:col-span-2 bg-black/80 backdrop-blur-sm border-2 border-teal-400 shadow-2xl\">\n              <CardHeader className=\"bg-gradient-to-r from-teal-600 to-cyan-500\">\n                <CardTitle\n                  className=\"flex items-center gap-3 text-white text-2xl\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  <div className=\"w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-satellite-dish text-white\"></i>\n                  </div>\n                  {theme.terminology.notifications}\n                </CardTitle>\n                <CardDescription\n                  className=\"text-white/90 text-lg\"\n                  style={{ fontFamily: theme.fonts.body }}\n                >\n                  Real-time battlefield intelligence and alliance communications\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-4 p-4 bg-gradient-to-r from-teal-900/50 to-cyan-900/50 rounded-lg border border-teal-400/30\">\n                    <div className=\"w-14 h-14 rounded-lg bg-gradient-to-r from-teal-500 to-cyan-400 flex items-center justify-center shadow-lg\">\n                      <i className=\"fas fa-shield text-white text-lg\"></i>\n                    </div>\n                    <div className=\"flex-1\">\n                      <p\n                        className=\"font-bold text-lg text-teal-300\"\n                        style={{ fontFamily: theme.fonts.heading }}\n                      >\n                        WELCOME TO THE ALLIANCE, COMMANDER{\" \"}\n                        {user.firstName?.toUpperCase() || \"OPERATIVE\"}\n                      </p>\n                      <p\n                        className=\"text-teal-400\"\n                        style={{ fontFamily: theme.fonts.body }}\n                      >\n                        Your tactical command center is now operational and\n                        ready for deployment\n                      </p>\n                    </div>\n                    <Badge className=\"bg-gradient-to-r from-emerald-500 to-green-500 text-white border-0\">\n                      ACTIVE\n                    </Badge>\n                  </div>\n\n                  <div className=\"flex items-center gap-4 p-4 bg-gradient-to-r from-slate-800/50 to-slate-700/50 rounded-lg border border-slate-400/30\">\n                    <div className=\"w-14 h-14 rounded-lg bg-gradient-to-r from-orange-500 to-red-500 flex items-center justify-center shadow-lg\">\n                      <i className=\"fas fa-target text-white text-lg\"></i>\n                    </div>\n                    <div className=\"flex-1\">\n                      <p\n                        className=\"font-bold text-lg text-orange-300\"\n                        style={{ fontFamily: theme.fonts.heading }}\n                      >\n                        MISSION BRIEFING AVAILABLE\n                      </p>\n                      <p\n                        className=\"text-orange-400\"\n                        style={{ fontFamily: theme.fonts.body }}\n                      >\n                        Lieutenant Sarah has requested tactical support for\n                        Operation Cardstorm\n                      </p>\n                    </div>\n                    <Badge className=\"bg-gradient-to-r from-red-500 to-orange-500 text-white border-0\">\n                      2h ago\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Operative Profile */}\n            <Card className=\"bg-black/80 backdrop-blur-sm border-2 border-cyan-400 shadow-2xl\">\n              <CardHeader className=\"bg-gradient-to-r from-cyan-500 to-teal-600\">\n                <CardTitle\n                  className=\"flex items-center gap-3 text-white text-xl\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  <div className=\"w-10 h-10 bg-white/20 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-id-badge text-white\"></i>\n                  </div>\n                  OPERATIVE PROFILE\n                </CardTitle>\n                <CardDescription\n                  className=\"text-white/90\"\n                  style={{ fontFamily: theme.fonts.body }}\n                >\n                  Your tactical analysis and alliance standing\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"p-4 bg-gradient-to-r from-teal-900/30 to-cyan-900/30 rounded-lg border border-teal-400/30\">\n                    <div className=\"flex items-center gap-3 mb-3\">\n                      <i className=\"fas fa-sword text-2xl text-teal-400\"></i>\n                      <span\n                        className=\"font-bold text-lg text-teal-300\"\n                        style={{ fontFamily: theme.fonts.heading }}\n                      >\n                        ACTIVE SECTOR: BLADEFORGE\n                      </span>\n                    </div>\n                    <div className=\"space-y-3 text-sm\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-slate-300\">Command Rank:</span>\n                        <Badge className=\"bg-gradient-to-r from-teal-500 to-cyan-400 text-white\">\n                          Elite\n                        </Badge>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-slate-300\">\n                          Tactical Specialty:\n                        </span>\n                        <div className=\"flex gap-1\">\n                          <Badge\n                            variant=\"outline\"\n                            className=\"text-xs text-teal-400 border-teal-400\"\n                          >\n                            Strategy\n                          </Badge>\n                          <Badge\n                            variant=\"outline\"\n                            className=\"text-xs text-cyan-400 border-cyan-400\"\n                          >\n                            Control\n                          </Badge>\n                        </div>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-slate-300\">\n                          Missions Completed:\n                        </span>\n                        <span className=\"font-bold text-teal-400\">73</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Button\n                    className=\"w-full bg-gradient-to-r from-red-600 to-orange-500 hover:from-red-700 hover:to-orange-600 text-white border-0 text-lg py-3\"\n                    style={{ fontFamily: theme.fonts.heading }}\n                  >\n                    <i className=\"fas fa-rocket mr-2\"></i>\n                    DEPLOY STRIKE MISSION\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/communities/components/realm-dashboards/DeckmasterDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[543,546],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[543,546],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Link } from \"wouter\";\nimport { getCommunityTheme } from \"../../utils/communityThemes\";\n\ninterface User {\n  id: string;\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  profileImageUrl?: string;\n  communities?: any[];\n}\n\ninterface DeckmasterDashboardProps {\n  user: User;\n}\n\nexport function DeckmasterDashboard({ user }: DeckmasterDashboardProps) {\n  const theme = getCommunityTheme(\"deckmaster\");\n\n  const getUserInitials = () => {\n    const first = user.firstName?.[0] || \"\";\n    const last = user.lastName?.[0] || \"\";\n    return first + last || user.email?.[0]?.toUpperCase() || \"U\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-indigo-50 dark:from-slate-950 dark:to-indigo-950\">\n      {/* Clean Strategic Header */}\n      <div className=\"relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-b from-slate-100/50 to-indigo-100/50 dark:from-slate-900/50 dark:to-indigo-900/50\"></div>\n        <div className=\"container mx-auto px-4 py-12 relative\">\n          <div className=\"text-center space-y-6\">\n            <div className=\"inline-flex items-center gap-4 px-8 py-4 rounded-2xl bg-white/90 dark:bg-slate-900/90 backdrop-blur-sm border border-slate-200 dark:border-slate-800 shadow-lg\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-slate-600 to-indigo-600 rounded-full flex items-center justify-center\">\n                <i className=\"fas fa-chess text-white text-lg\"></i>\n              </div>\n              <span\n                className=\"text-3xl font-bold bg-gradient-to-r from-slate-700 to-indigo-600 bg-clip-text text-transparent\"\n                style={{ fontFamily: theme.fonts.heading }}\n              >\n                Deckmaster\n              </span>\n              <div className=\"w-12 h-12 bg-gradient-to-r from-indigo-600 to-slate-600 rounded-full flex items-center justify-center\">\n                <i className=\"fas fa-graduation-cap text-white text-lg\"></i>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-center gap-6\">\n              <Avatar className=\"h-20 w-20 border-3 border-slate-300 dark:border-slate-700 shadow-lg\">\n                <AvatarImage src={user.profileImageUrl || undefined} />\n                <AvatarFallback\n                  className=\"text-xl font-bold bg-gradient-to-r from-slate-600 to-indigo-600 text-white\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  {getUserInitials()}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"text-left\">\n                <h1\n                  className=\"text-4xl font-bold mb-2 text-slate-800 dark:text-slate-200\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  Welcome, {user.firstName || \"Strategist\"}\n                </h1>\n                <p\n                  className=\"text-lg text-slate-600 dark:text-slate-300 mb-3\"\n                  style={{ fontFamily: theme.fonts.accent }}\n                >\n                  Ready to master the strategic arts?\n                </p>\n                <div className=\"flex items-center gap-3\">\n                  <Badge className=\"bg-gradient-to-r from-slate-600 to-indigo-500 text-white border-0 px-3 py-1\">\n                    <i className=\"fas fa-chess mr-1\"></i>\n                    Strategist\n                  </Badge>\n                  <Badge className=\"bg-gradient-to-r from-indigo-500 to-slate-600 text-white border-0 px-3 py-1\">\n                    <i className=\"fas fa-brain mr-1\"></i>\n                    Analyst\n                  </Badge>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Strategic Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Link href=\"/matchmaking\">\n            <Card\n              className=\"group hover:shadow-lg transition-all duration-300 cursor-pointer bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-800\"\n              data-testid=\"card-quick-match\"\n            >\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 mx-auto mb-4 rounded-lg bg-gradient-to-r from-slate-600 to-indigo-600 flex items-center justify-center\">\n                  <i className=\"fas fa-brain text-white text-xl\"></i>\n                </div>\n                <h3\n                  className=\"font-semibold mb-2 text-lg text-slate-700 dark:text-slate-300\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  {theme.terminology.quickMatch}\n                </h3>\n                <p\n                  className=\"text-sm text-slate-600 dark:text-slate-400\"\n                  style={{ fontFamily: theme.fonts.body }}\n                >\n                  Strategic matchmaking\n                </p>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Link href=\"/tablesync\">\n            <Card\n              className=\"group hover:shadow-lg transition-all duration-300 cursor-pointer bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-800\"\n              data-testid=\"card-tablesync\"\n            >\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 mx-auto mb-4 rounded-lg bg-gradient-to-r from-indigo-600 to-blue-600 flex items-center justify-center\">\n                  <i className=\"fas fa-sync-alt text-white text-xl\"></i>\n                </div>\n                <h3\n                  className=\"font-semibold mb-2 text-lg text-slate-700 dark:text-slate-300\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  TableSync\n                </h3>\n                <p\n                  className=\"text-sm text-slate-600 dark:text-slate-400\"\n                  style={{ fontFamily: theme.fonts.body }}\n                >\n                  Coordinate sessions\n                </p>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Card\n            className=\"group hover:shadow-lg transition-all duration-300 cursor-pointer bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-800\"\n            data-testid=\"card-events\"\n          >\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-16 h-16 mx-auto mb-4 rounded-lg bg-gradient-to-r from-violet-600 to-purple-600 flex items-center justify-center\">\n                <i className=\"fas fa-calendar text-white text-xl\"></i>\n              </div>\n              <h3\n                className=\"font-semibold mb-2 text-lg text-slate-700 dark:text-slate-300\"\n                style={{ fontFamily: theme.fonts.heading }}\n              >\n                {theme.terminology.events}\n              </h3>\n              <p\n                className=\"text-sm text-slate-600 dark:text-slate-400\"\n                style={{ fontFamily: theme.fonts.body }}\n              >\n                Strategic workshops\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card\n            className=\"group hover:shadow-lg transition-all duration-300 cursor-pointer bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-800\"\n            data-testid=\"card-analysis\"\n          >\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-16 h-16 mx-auto mb-4 rounded-lg bg-gradient-to-r from-slate-600 to-slate-700 flex items-center justify-center\">\n                <i className=\"fas fa-chart-line text-white text-xl\"></i>\n              </div>\n              <h3\n                className=\"font-semibold mb-2 text-lg text-slate-700 dark:text-slate-300\"\n                style={{ fontFamily: theme.fonts.heading }}\n              >\n                Analysis Hub\n              </h3>\n              <p\n                className=\"text-sm text-slate-600 dark:text-slate-400\"\n                style={{ fontFamily: theme.fonts.body }}\n              >\n                Meta insights\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Game Pod Calendar - TODO: Integrate with events feature */}\n        <div className=\"mb-8\">\n          <Card className=\"bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-800\">\n            <CardContent className=\"p-6 text-center\">\n              <p className=\"text-slate-600 dark:text-slate-400\">\n                Game Pod Calendar - Coming Soon\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Strategic Dashboard */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Recent Activity */}\n          <Card\n            className=\"lg:col-span-2 bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-800\"\n            data-testid=\"card-activity\"\n          >\n            <CardHeader className=\"bg-gradient-to-r from-slate-600 to-indigo-600 text-white\">\n              <CardTitle\n                className=\"flex items-center gap-3 text-xl\"\n                style={{ fontFamily: theme.fonts.heading }}\n              >\n                <div className=\"w-10 h-10 bg-white/20 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-chart-line text-white\"></i>\n                </div>\n                {theme.terminology.notifications}\n              </CardTitle>\n              <CardDescription\n                className=\"text-white/90\"\n                style={{ fontFamily: theme.fonts.body }}\n              >\n                Strategic insights and competitive intelligence\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-4 p-4 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700\">\n                  <div className=\"w-12 h-12 rounded-lg bg-gradient-to-r from-slate-600 to-indigo-600 flex items-center justify-center\">\n                    <i className=\"fas fa-chess text-white\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p\n                      className=\"font-semibold text-slate-800 dark:text-slate-200\"\n                      style={{ fontFamily: theme.fonts.heading }}\n                    >\n                      Welcome to Deckmaster, {user.firstName || \"Strategist\"}!\n                    </p>\n                    <p\n                      className=\"text-sm text-slate-600 dark:text-slate-400\"\n                      style={{ fontFamily: theme.fonts.body }}\n                    >\n                      Your strategic command center is ready. Master the meta\n                      together.\n                    </p>\n                  </div>\n                  <Badge className=\"bg-gradient-to-r from-indigo-500 to-slate-600 text-white border-0 text-sm px-3 py-1\">\n                    <i className=\"fas fa-star mr-1\"></i>\n                    NEW\n                  </Badge>\n                </div>\n\n                <div className=\"flex items-center gap-4 p-4 bg-indigo-50 dark:bg-indigo-950 rounded-lg border border-indigo-200 dark:border-indigo-800\">\n                  <div className=\"w-12 h-12 rounded-lg bg-gradient-to-r from-indigo-600 to-blue-600 flex items-center justify-center\">\n                    <i className=\"fas fa-brain text-white\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p\n                      className=\"font-semibold text-indigo-800 dark:text-indigo-200\"\n                      style={{ fontFamily: theme.fonts.heading }}\n                    >\n                      Meta Analysis Available\n                    </p>\n                    <p\n                      className=\"text-sm text-indigo-600 dark:text-indigo-400\"\n                      style={{ fontFamily: theme.fonts.body }}\n                    >\n                      New competitive insights on optimal deck construction\n                      strategies\n                    </p>\n                  </div>\n                  <Badge\n                    variant=\"outline\"\n                    className=\"text-xs text-indigo-600 border-indigo-600\"\n                  >\n                    4h ago\n                  </Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Strategic Profile */}\n          <Card\n            className=\"bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-800\"\n            data-testid=\"card-profile\"\n          >\n            <CardHeader className=\"bg-gradient-to-r from-indigo-600 to-slate-600 text-white\">\n              <CardTitle\n                className=\"flex items-center gap-3\"\n                style={{ fontFamily: theme.fonts.heading }}\n              >\n                <div className=\"w-8 h-8 bg-white/20 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-user text-white text-sm\"></i>\n                </div>\n                Strategic Profile\n              </CardTitle>\n              <CardDescription\n                className=\"text-white/90 text-sm\"\n                style={{ fontFamily: theme.fonts.body }}\n              >\n                Your mastery and analysis contributions\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700\">\n                  <div className=\"flex items-center gap-3 mb-3\">\n                    <i className=\"fas fa-chess text-xl text-slate-600 dark:text-slate-400\"></i>\n                    <span\n                      className=\"font-semibold text-slate-800 dark:text-slate-200\"\n                      style={{ fontFamily: theme.fonts.heading }}\n                    >\n                      Current Focus: Deckmaster\n                    </span>\n                  </div>\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-600 dark:text-slate-400\">\n                        Strategic Rank:\n                      </span>\n                      <Badge className=\"bg-gradient-to-r from-slate-600 to-indigo-600 text-white text-xs px-2 py-1\">\n                        Master\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-600 dark:text-slate-400\">\n                        Focus Areas:\n                      </span>\n                      <div className=\"flex gap-1\">\n                        <Badge\n                          variant=\"outline\"\n                          className=\"text-xs text-slate-600 border-slate-600\"\n                        >\n                          Meta\n                        </Badge>\n                        <Badge\n                          variant=\"outline\"\n                          className=\"text-xs text-indigo-600 border-indigo-600\"\n                        >\n                          Theory\n                        </Badge>\n                      </div>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-600 dark:text-slate-400\">\n                        Sessions Led:\n                      </span>\n                      <span className=\"font-semibold text-slate-800 dark:text-slate-200\">\n                        42\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-600 dark:text-slate-400\">\n                        Strategic Rating:\n                      </span>\n                      <span className=\"font-semibold text-slate-800 dark:text-slate-200\">\n                        1,347\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                <Button\n                  className=\"w-full bg-gradient-to-r from-slate-600 to-indigo-600 hover:from-slate-700 hover:to-indigo-700 text-white\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                  data-testid=\"button-strategy-session\"\n                >\n                  <i className=\"fas fa-chess mr-2\"></i>\n                  Begin Strategy Session\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/communities/components/realm-dashboards/DecksongDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[596,599],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[596,599],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":281,"column":28,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[13146,13200],"text":"\n                Storyteller&apos;s Grimoire\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[13146,13200],"text":"\n                Storyteller&lsquo;s Grimoire\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[13146,13200],"text":"\n                Storyteller&#39;s Grimoire\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[13146,13200],"text":"\n                Storyteller&rsquo;s Grimoire\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":287,"column":52,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[13358,13434],"text":"\n                Your magical journey through Disney&apos;s realms\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[13358,13434],"text":"\n                Your magical journey through Disney&lsquo;s realms\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[13358,13434],"text":"\n                Your magical journey through Disney&#39;s realms\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[13358,13434],"text":"\n                Your magical journey through Disney&rsquo;s realms\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Link } from \"wouter\";\nimport { getCommunityTheme } from \"../../utils/communityThemes\";\nimport { GamePodCalendar } from \"../GamePodCalendar\";\ninterface User {\n  id: string;\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  profileImageUrl?: string;\n  communities?: any[];\n}\n\ninterface DecksongDashboardProps {\n  user: User;\n}\n\nexport function DecksongDashboard({ user }: DecksongDashboardProps) {\n  const theme = getCommunityTheme(\"decksong\");\n\n  const getUserInitials = () => {\n    const first = user.firstName?.[0] || \"\";\n    const last = user.lastName?.[0] || \"\";\n    return first + last || user.email?.[0]?.toUpperCase() || \"U\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-950 dark:to-pink-950\">\n      {/* Elegant Disney Header */}\n      <div className=\"relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-b from-purple-100/50 to-pink-100/50 dark:from-purple-900/50 dark:to-pink-900/50\"></div>\n        <div className=\"container mx-auto px-4 py-12 relative\">\n          <div className=\"text-center space-y-6\">\n            <div className=\"inline-flex items-center gap-4 px-8 py-4 rounded-2xl bg-white/90 dark:bg-slate-900/90 backdrop-blur-sm border border-purple-200 dark:border-purple-800 shadow-lg\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-400 rounded-full flex items-center justify-center\">\n                <i className=\"fas fa-crown text-white text-lg\"></i>\n              </div>\n              <span\n                className=\"text-3xl font-bold bg-gradient-to-r from-purple-600 to-pink-500 bg-clip-text text-transparent\"\n                style={{ fontFamily: theme.fonts.heading }}\n              >\n                Decksong\n              </span>\n              <div className=\"w-12 h-12 bg-gradient-to-r from-pink-400 to-purple-500 rounded-full flex items-center justify-center\">\n                <i className=\"fas fa-sparkles text-white text-lg\"></i>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-center gap-6\">\n              <Avatar className=\"h-20 w-20 border-3 border-purple-300 dark:border-purple-700 shadow-lg\">\n                <AvatarImage src={user.profileImageUrl || undefined} />\n                <AvatarFallback\n                  className=\"text-xl font-bold bg-gradient-to-r from-purple-400 to-pink-400 text-white\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  {getUserInitials()}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"text-left\">\n                <h1\n                  className=\"text-4xl font-bold mb-2 text-purple-800 dark:text-purple-200\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  Welcome, {user.firstName || \"Storyteller\"}\n                </h1>\n                <p\n                  className=\"text-lg text-purple-600 dark:text-purple-300 mb-3\"\n                  style={{ fontFamily: theme.fonts.accent }}\n                >\n                  Ready to weave enchanting tales?\n                </p>\n                <div className=\"flex items-center gap-3\">\n                  <Badge className=\"bg-gradient-to-r from-purple-500 to-pink-400 text-white border-0 px-3 py-1\">\n                    <i className=\"fas fa-feather mr-1\"></i>\n                    Storyteller\n                  </Badge>\n                  <Badge className=\"bg-gradient-to-r from-pink-400 to-purple-500 text-white border-0 px-3 py-1\">\n                    <i className=\"fas fa-star mr-1\"></i>\n                    Dreamweaver\n                  </Badge>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 pb-16\">\n        {/* Elegant Action Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12 -mt-6\">\n          <Link href=\"/matchmaking\">\n            <Card className=\"group hover:scale-105 transition-all duration-300 cursor-pointer bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm border border-purple-200 dark:border-purple-800 shadow-lg hover:shadow-xl\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 mx-auto mb-4 rounded-lg bg-gradient-to-r from-purple-400 to-pink-400 flex items-center justify-center shadow-md\">\n                  <i className=\"fas fa-sparkles text-white text-xl\"></i>\n                </div>\n                <h3\n                  className=\"font-bold mb-2 text-lg text-purple-700 dark:text-purple-300\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  {theme.terminology.quickMatch}\n                </h3>\n                <p\n                  className=\"text-sm text-purple-600 dark:text-purple-400\"\n                  style={{ fontFamily: theme.fonts.body }}\n                >\n                  Find magical partners\n                </p>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Link href=\"/tablesync\">\n            <Card className=\"group hover:scale-105 transition-all duration-300 cursor-pointer bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm border border-blue-200 dark:border-blue-800 shadow-lg hover:shadow-xl\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 mx-auto mb-4 rounded-lg bg-gradient-to-r from-blue-400 to-cyan-400 flex items-center justify-center shadow-md\">\n                  <i className=\"fas fa-book-open text-white text-xl\"></i>\n                </div>\n                <h3\n                  className=\"font-bold mb-2 text-lg text-blue-700 dark:text-blue-300\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  {theme.terminology.tableSync}\n                </h3>\n                <p\n                  className=\"text-sm text-blue-600 dark:text-blue-400\"\n                  style={{ fontFamily: theme.fonts.body }}\n                >\n                  Synchronize stories\n                </p>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Card className=\"group hover:scale-105 transition-all duration-300 cursor-pointer bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm border border-pink-200 dark:border-pink-800 shadow-lg hover:shadow-xl\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-16 h-16 mx-auto mb-4 rounded-lg bg-gradient-to-r from-pink-400 to-rose-400 flex items-center justify-center shadow-md\">\n                <i className=\"fas fa-calendar-heart text-white text-xl\"></i>\n              </div>\n              <h3\n                className=\"font-bold mb-2 text-lg text-pink-700 dark:text-pink-300\"\n                style={{ fontFamily: theme.fonts.heading }}\n              >\n                {theme.terminology.events}\n              </h3>\n              <p\n                className=\"text-sm text-pink-600 dark:text-pink-400\"\n                style={{ fontFamily: theme.fonts.body }}\n              >\n                Grand gatherings\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"group hover:scale-105 transition-all duration-300 cursor-pointer bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm border border-indigo-200 dark:border-indigo-800 shadow-lg hover:shadow-xl\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-16 h-16 mx-auto mb-4 rounded-lg bg-gradient-to-r from-indigo-400 to-purple-400 flex items-center justify-center shadow-md\">\n                <i className=\"fas fa-castle text-white text-xl\"></i>\n              </div>\n              <h3\n                className=\"font-bold mb-2 text-lg text-indigo-700 dark:text-indigo-300\"\n                style={{ fontFamily: theme.fonts.heading }}\n              >\n                Royal Court\n              </h3>\n              <p\n                className=\"text-sm text-indigo-600 dark:text-indigo-400\"\n                style={{ fontFamily: theme.fonts.body }}\n              >\n                Connect with dreamers\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Game Pod Calendar */}\n        <div className=\"mb-8\">\n          <GamePodCalendar\n            communityId=\"decksong\"\n            communityName=\"Decksong\"\n            theme={theme}\n          />\n        </div>\n\n        {/* Enchanted Library Dashboard */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-10\">\n          {/* Magic Mirror (Activity) */}\n          <Card className=\"lg:col-span-2 bg-white/95 backdrop-blur-sm border-2 border-purple-300 shadow-2xl\">\n            <CardHeader className=\"bg-gradient-to-r from-purple-500 to-cyan-400 text-white\">\n              <CardTitle\n                className=\"flex items-center gap-4 text-2xl\"\n                style={{ fontFamily: theme.fonts.heading }}\n              >\n                <div className=\"w-14 h-14 bg-white/20 rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-mirror text-white text-xl\"></i>\n                </div>\n                {theme.terminology.notifications}\n              </CardTitle>\n              <CardDescription\n                className=\"text-white/90 text-lg\"\n                style={{ fontFamily: theme.fonts.body }}\n              >\n                Peer into the magical happenings across the Great Illuminary\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"p-8\">\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center gap-6 p-6 bg-gradient-to-r from-purple-50 to-cyan-50 rounded-2xl border border-purple-200\">\n                  <div className=\"w-16 h-16 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center shadow-lg\">\n                    <i className=\"fas fa-magic text-white text-xl\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p\n                      className=\"font-bold text-xl text-purple-800\"\n                      style={{ fontFamily: theme.fonts.heading }}\n                    >\n                      Welcome to the Great Illuminary,{\" \"}\n                      {user.firstName || \"Storyteller\"}!\n                    </p>\n                    <p\n                      className=\"text-purple-600 text-lg\"\n                      style={{ fontFamily: theme.fonts.accent }}\n                    >\n                      Your tale begins now. Let&apos;s create something truly magical\n                      together\n                    </p>\n                  </div>\n                  <Badge className=\"bg-gradient-to-r from-yellow-400 to-orange-400 text-white border-0 text-lg px-4 py-2\">\n                    <i className=\"fas fa-sparkles mr-2\"></i>\n                    NEW\n                  </Badge>\n                </div>\n\n                <div className=\"flex items-center gap-6 p-6 bg-gradient-to-r from-cyan-50 to-blue-50 rounded-2xl border border-cyan-200\">\n                  <div className=\"w-16 h-16 rounded-full bg-gradient-to-r from-cyan-500 to-blue-500 flex items-center justify-center shadow-lg\">\n                    <i className=\"fas fa-feather text-white text-xl\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p\n                      className=\"font-bold text-xl text-cyan-800\"\n                      style={{ fontFamily: theme.fonts.heading }}\n                    >\n                      Enchanted Duel Challenge\n                    </p>\n                    <p\n                      className=\"text-cyan-600 text-lg\"\n                      style={{ fontFamily: theme.fonts.accent }}\n                    >\n                      Royal Storyteller Emma invites you to weave a\n                      collaborative tale\n                    </p>\n                  </div>\n                  <Badge className=\"bg-gradient-to-r from-purple-500 to-cyan-500 text-white border-0 text-lg px-4 py-2\">\n                    3h ago\n                  </Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Storyteller's Grimoire */}\n          <Card className=\"bg-white/95 backdrop-blur-sm border-2 border-cyan-300 shadow-2xl\">\n            <CardHeader className=\"bg-gradient-to-r from-cyan-400 to-purple-500 text-white\">\n              <CardTitle\n                className=\"flex items-center gap-3 text-xl\"\n                style={{ fontFamily: theme.fonts.heading }}\n              >\n                <div className=\"w-12 h-12 bg-white/20 rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-book-magic text-white\"></i>\n                </div>\n                Storyteller's Grimoire\n              </CardTitle>\n              <CardDescription\n                className=\"text-white/90\"\n                style={{ fontFamily: theme.fonts.body }}\n              >\n                Your magical journey through Disney's realms\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              <div className=\"space-y-6\">\n                <div className=\"p-6 bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl border border-purple-200\">\n                  <div className=\"flex items-center gap-4 mb-4\">\n                    <i className=\"fas fa-crown text-3xl text-purple-600\"></i>\n                    <span\n                      className=\"font-bold text-xl text-purple-800\"\n                      style={{ fontFamily: theme.fonts.heading }}\n                    >\n                      Current Realm: Decksong\n                    </span>\n                  </div>\n                  <div className=\"space-y-4 text-lg\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-purple-600\">Storyteller Rank:</span>\n                      <Badge className=\"bg-gradient-to-r from-purple-500 to-pink-500 text-white text-lg px-4 py-2\">\n                        Royal\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-purple-600\">Favorite Ink:</span>\n                      <div className=\"flex gap-2\">\n                        <div className=\"w-6 h-6 rounded-full bg-gradient-to-r from-amber-400 to-yellow-400 border-2 border-amber-500 shadow-sm\"></div>\n                        <div className=\"w-6 h-6 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 border-2 border-purple-600 shadow-sm\"></div>\n                        <div className=\"w-6 h-6 rounded-full bg-gradient-to-r from-cyan-400 to-blue-500 border-2 border-cyan-500 shadow-sm\"></div>\n                      </div>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-purple-600\">Tales Woven:</span>\n                      <span className=\"font-bold text-purple-800\">127</span>\n                    </div>\n                  </div>\n                </div>\n\n                <Button\n                  className=\"w-full bg-gradient-to-r from-purple-500 to-cyan-400 hover:from-purple-600 hover:to-cyan-500 text-white border-0 text-xl py-4 shadow-lg\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  <i className=\"fas fa-sparkles mr-3\"></i>\n                  Begin Enchanted Duel\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/communities/components/realm-dashboards/DuelcraftDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[596,599],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[596,599],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Link } from \"wouter\";\nimport { getCommunityTheme } from \"../../utils/communityThemes\";\nimport { GamePodCalendar } from \"../GamePodCalendar\";\ninterface User {\n  id: string;\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  profileImageUrl?: string;\n  communities?: any[];\n}\n\ninterface DuelcraftDashboardProps {\n  user: User;\n}\n\nexport function DuelcraftDashboard({ user }: DuelcraftDashboardProps) {\n  const theme = getCommunityTheme(\"duelcraft\");\n\n  const getUserInitials = () => {\n    const first = user.firstName?.[0] || \"\";\n    const last = user.lastName?.[0] || \"\";\n    return first + last || user.email?.[0]?.toUpperCase() || \"U\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-purple-900 via-blue-900 to-purple-900 relative overflow-hidden\">\n      {/* Ancient Egyptian/Yu-Gi-Oh Theme Background */}\n      <div className=\"absolute inset-0 bg-gradient-to-r from-purple-900/50 to-blue-900/50\"></div>\n      <div className=\"absolute inset-0 opacity-10\">\n        <div className=\"absolute top-20 left-20 w-32 h-32 border-4 border-yellow-400 transform rotate-45\"></div>\n        <div className=\"absolute bottom-20 right-20 w-24 h-24 border-4 border-purple-400 transform rotate-12\"></div>\n        <div className=\"absolute top-1/2 left-1/4 w-16 h-16 border-4 border-blue-400 transform -rotate-12\"></div>\n      </div>\n\n      <div className=\"relative z-10\">\n        {/* Shadow Realm Header */}\n        <div className=\"container mx-auto px-4 py-16\">\n          <div className=\"text-center space-y-8\">\n            <div className=\"inline-flex items-center gap-6 px-12 py-8 rounded-2xl bg-black/70 backdrop-blur-xl border-2 border-yellow-400 shadow-2xl relative\">\n              {/* Millennium Eye */}\n              <div className=\"w-20 h-20 bg-gradient-to-r from-yellow-400 to-amber-500 rounded-full flex items-center justify-center shadow-2xl relative\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-purple-600 to-blue-600 rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-eye text-yellow-400 text-2xl animate-pulse\"></i>\n                </div>\n                <div\n                  className=\"absolute inset-0 border-4 border-yellow-400 rounded-full animate-spin\"\n                  style={{ animationDuration: \"8s\" }}\n                ></div>\n              </div>\n\n              <span\n                className=\"text-5xl font-bold text-yellow-400 tracking-wider\"\n                style={{\n                  fontFamily: theme.fonts.heading,\n                  textShadow:\n                    \"0 0 20px rgba(255, 215, 0, 0.8), 0 0 40px rgba(255, 215, 0, 0.4)\",\n                }}\n              >\n                DUELCRAFT\n              </span>\n\n              <div className=\"w-20 h-20 bg-gradient-to-r from-purple-600 to-blue-600 rounded-full flex items-center justify-center shadow-2xl relative\">\n                <i className=\"fas fa-ankh text-yellow-400 text-2xl\"></i>\n                <div className=\"absolute inset-0 border-4 border-purple-400 rounded-full animate-pulse\"></div>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-center gap-8\">\n              <Avatar className=\"h-32 w-32 border-4 border-yellow-400 shadow-2xl\">\n                <AvatarImage src={user.profileImageUrl || undefined} />\n                <AvatarFallback\n                  className=\"text-3xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 text-yellow-400\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  {getUserInitials()}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"text-left\">\n                <h1\n                  className=\"text-6xl font-bold mb-4 text-yellow-400\"\n                  style={{\n                    fontFamily: theme.fonts.heading,\n                    textShadow:\n                      \"0 0 20px rgba(255, 215, 0, 0.8), 2px 2px 4px rgba(0,0,0,0.8)\",\n                  }}\n                >\n                  WELCOME, {(user.firstName || \"DUELIST\").toUpperCase()}\n                </h1>\n                <p\n                  className=\"text-2xl text-purple-200 mb-4\"\n                  style={{\n                    fontFamily: theme.fonts.body,\n                    textShadow: \"1px 1px 2px rgba(0,0,0,0.7)\",\n                  }}\n                >\n                  The heart of the cards calls to you...\n                </p>\n                <div className=\"flex items-center gap-4\">\n                  <Badge className=\"bg-gradient-to-r from-yellow-400 to-orange-500 text-black border-0 text-xl px-6 py-3 font-bold\">\n                    <i className=\"fas fa-skull mr-2\"></i>\n                    SHADOW DUELIST\n                  </Badge>\n                  <Badge className=\"bg-gradient-to-r from-purple-600 to-blue-600 text-yellow-400 border-2 border-yellow-400 text-xl px-6 py-3 font-bold\">\n                    <i className=\"fas fa-eye mr-2\"></i>\n                    MILLENNIUM POWER\n                  </Badge>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container mx-auto px-4 pb-16\">\n          {/* Duel Arena Action Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16 -mt-8\">\n            <Link href=\"/matchmaking\">\n              <Card className=\"group hover:scale-110 transition-all duration-300 cursor-pointer bg-black/80 backdrop-blur-sm border-2 border-red-500 shadow-2xl hover:shadow-red-500/50\">\n                <CardContent className=\"p-8 text-center\">\n                  <div className=\"w-24 h-24 mx-auto mb-6 rounded-lg bg-gradient-to-r from-red-600 to-orange-600 flex items-center justify-center shadow-xl relative overflow-hidden\">\n                    <i className=\"fas fa-fire text-white text-3xl relative z-10\"></i>\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-red-500/50 to-orange-500/50 animate-pulse\"></div>\n                  </div>\n                  <h3\n                    className=\"font-bold mb-3 text-2xl text-red-400\"\n                    style={{ fontFamily: theme.fonts.heading }}\n                  >\n                    {theme.terminology.quickMatch}\n                  </h3>\n                  <p\n                    className=\"text-red-300\"\n                    style={{ fontFamily: theme.fonts.body }}\n                  >\n                    Challenge worthy opponents\n                  </p>\n                </CardContent>\n              </Card>\n            </Link>\n\n            <Link href=\"/tablesync\">\n              <Card className=\"group hover:scale-110 transition-all duration-300 cursor-pointer bg-black/80 backdrop-blur-sm border-2 border-blue-500 shadow-2xl hover:shadow-blue-500/50\">\n                <CardContent className=\"p-8 text-center\">\n                  <div className=\"w-24 h-24 mx-auto mb-6 rounded-lg bg-gradient-to-r from-blue-600 to-purple-600 flex items-center justify-center shadow-xl relative overflow-hidden\">\n                    <i className=\"fas fa-link text-white text-3xl relative z-10\"></i>\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-blue-500/50 to-purple-500/50 animate-pulse\"></div>\n                  </div>\n                  <h3\n                    className=\"font-bold mb-3 text-2xl text-blue-400\"\n                    style={{ fontFamily: theme.fonts.heading }}\n                  >\n                    {theme.terminology.tableSync}\n                  </h3>\n                  <p\n                    className=\"text-blue-300\"\n                    style={{ fontFamily: theme.fonts.body }}\n                  >\n                    Connect across dimensions\n                  </p>\n                </CardContent>\n              </Card>\n            </Link>\n\n            <Card className=\"group hover:scale-110 transition-all duration-300 cursor-pointer bg-black/80 backdrop-blur-sm border-2 border-purple-500 shadow-2xl hover:shadow-purple-500/50\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-24 h-24 mx-auto mb-6 rounded-lg bg-gradient-to-r from-purple-600 to-pink-600 flex items-center justify-center shadow-xl relative overflow-hidden\">\n                  <i className=\"fas fa-calendar-days text-white text-3xl relative z-10\"></i>\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-purple-500/50 to-pink-500/50 animate-pulse\"></div>\n                </div>\n                <h3\n                  className=\"font-bold mb-3 text-2xl text-purple-400\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  {theme.terminology.events}\n                </h3>\n                <p\n                  className=\"text-purple-300\"\n                  style={{ fontFamily: theme.fonts.body }}\n                >\n                  Orchestrate shadow duels\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"group hover:scale-110 transition-all duration-300 cursor-pointer bg-black/80 backdrop-blur-sm border-2 border-yellow-500 shadow-2xl hover:shadow-yellow-500/50\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-24 h-24 mx-auto mb-6 rounded-lg bg-gradient-to-r from-yellow-500 to-orange-500 flex items-center justify-center shadow-xl relative overflow-hidden\">\n                  <i className=\"fas fa-users text-black text-3xl relative z-10\"></i>\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-yellow-400/50 to-orange-400/50 animate-pulse\"></div>\n                </div>\n                <h3\n                  className=\"font-bold mb-3 text-2xl text-yellow-400\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  Shadow Realm\n                </h3>\n                <p\n                  className=\"text-yellow-300\"\n                  style={{ fontFamily: theme.fonts.body }}\n                >\n                  Unite with fellow duelists\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Game Pod Calendar */}\n          <div className=\"mb-8\">\n            <GamePodCalendar\n              communityId=\"duelcraft\"\n              communityName=\"Duelcraft\"\n              theme={theme}\n            />\n          </div>\n\n          {/* Ancient Tablet Dashboard */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-10\">\n            {/* Millennium Alerts */}\n            <Card className=\"lg:col-span-2 bg-black/90 backdrop-blur-sm border-2 border-yellow-400 shadow-2xl\">\n              <CardHeader className=\"bg-gradient-to-r from-yellow-400 to-orange-500 text-black\">\n                <CardTitle\n                  className=\"flex items-center gap-4 text-2xl font-bold\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  <div className=\"w-14 h-14 bg-black/20 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-bell text-black text-xl\"></i>\n                  </div>\n                  {theme.terminology.notifications}\n                </CardTitle>\n                <CardDescription\n                  className=\"text-black/80 text-lg font-semibold\"\n                  style={{ fontFamily: theme.fonts.body }}\n                >\n                  Messages from the Shadow Realm reach across dimensions\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-8\">\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center gap-6 p-6 bg-gradient-to-r from-purple-900/50 to-blue-900/50 rounded-xl border border-yellow-400/30\">\n                    <div className=\"w-16 h-16 rounded-lg bg-gradient-to-r from-yellow-400 to-orange-500 flex items-center justify-center shadow-lg\">\n                      <i className=\"fas fa-eye text-black text-xl\"></i>\n                    </div>\n                    <div className=\"flex-1\">\n                      <p\n                        className=\"font-bold text-xl text-yellow-400 mb-2\"\n                        style={{ fontFamily: theme.fonts.heading }}\n                      >\n                        WELCOME TO THE SHADOW REALM,{\" \"}\n                        {(user.firstName || \"DUELIST\").toUpperCase()}!\n                      </p>\n                      <p\n                        className=\"text-purple-200 text-lg\"\n                        style={{ fontFamily: theme.fonts.body }}\n                      >\n                        Your millennium item has awakened. The ancient power\n                        flows through you.\n                      </p>\n                    </div>\n                    <Badge className=\"bg-gradient-to-r from-red-500 to-orange-500 text-white border-0 text-lg px-4 py-2 font-bold\">\n                      <i className=\"fas fa-skull mr-2\"></i>\n                      ACTIVE\n                    </Badge>\n                  </div>\n\n                  <div className=\"flex items-center gap-6 p-6 bg-gradient-to-r from-blue-900/50 to-purple-900/50 rounded-xl border border-blue-400/30\">\n                    <div className=\"w-16 h-16 rounded-lg bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center shadow-lg\">\n                      <i className=\"fas fa-cards text-white text-xl\"></i>\n                    </div>\n                    <div className=\"flex-1\">\n                      <p\n                        className=\"font-bold text-xl text-blue-400 mb-2\"\n                        style={{ fontFamily: theme.fonts.heading }}\n                      >\n                        SHADOW DUEL CHALLENGE\n                      </p>\n                      <p\n                        className=\"text-blue-200 text-lg\"\n                        style={{ fontFamily: theme.fonts.body }}\n                      >\n                        Duel Master Kaiba seeks a worthy opponent for an epic\n                        shadow duel\n                      </p>\n                    </div>\n                    <Badge className=\"bg-gradient-to-r from-purple-500 to-blue-500 text-white border-0 text-lg px-4 py-2 font-bold\">\n                      4h ago\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Duelist Profile */}\n            <Card className=\"bg-black/90 backdrop-blur-sm border-2 border-purple-400 shadow-2xl\">\n              <CardHeader className=\"bg-gradient-to-r from-purple-600 to-blue-600 text-white\">\n                <CardTitle\n                  className=\"flex items-center gap-3 text-xl font-bold\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  <div className=\"w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-id-card text-white\"></i>\n                  </div>\n                  DUELIST PROFILE\n                </CardTitle>\n                <CardDescription\n                  className=\"text-white/90 font-semibold\"\n                  style={{ fontFamily: theme.fonts.body }}\n                >\n                  Your journey through the Duel Monsters realm\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-6\">\n                  <div className=\"p-6 bg-gradient-to-r from-yellow-400/10 to-orange-400/10 rounded-xl border border-yellow-400/30\">\n                    <div className=\"flex items-center gap-4 mb-4\">\n                      <i className=\"fas fa-eye text-3xl text-yellow-400\"></i>\n                      <span\n                        className=\"font-bold text-xl text-yellow-400\"\n                        style={{ fontFamily: theme.fonts.heading }}\n                      >\n                        ACTIVE REALM: DUELCRAFT\n                      </span>\n                    </div>\n                    <div className=\"space-y-4 text-lg\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-purple-200 font-semibold\">\n                          Duel Rank:\n                        </span>\n                        <Badge className=\"bg-gradient-to-r from-yellow-400 to-orange-500 text-black font-bold text-lg px-4 py-2\">\n                          MASTER\n                        </Badge>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-purple-200 font-semibold\">\n                          Millennium Item:\n                        </span>\n                        <div className=\"flex gap-2\">\n                          <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-yellow-400 to-orange-400 border-2 border-yellow-500 flex items-center justify-center\">\n                            <i className=\"fas fa-eye text-black text-sm\"></i>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-purple-200 font-semibold\">\n                          Shadow Duels Won:\n                        </span>\n                        <span className=\"font-bold text-yellow-400 text-xl\">\n                          89\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Button\n                    className=\"w-full bg-gradient-to-r from-red-600 to-orange-500 hover:from-red-700 hover:to-orange-600 text-white border-0 text-xl py-4 font-bold shadow-lg\"\n                    style={{ fontFamily: theme.fonts.heading }}\n                  >\n                    <i className=\"fas fa-fire mr-3\"></i>\n                    INITIATE SHADOW DUEL\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/communities/components/realm-dashboards/PokeStreamDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[596,599],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[596,599],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":242,"column":23,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[10487,10624],"text":"\n                      Your Pokedex has been activated and you&apos;re ready to catch\n                      &apos;em all!\n                    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[10487,10624],"text":"\n                      Your Pokedex has been activated and you&apos;re ready to catch\n                      &lsquo;em all!\n                    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[10487,10624],"text":"\n                      Your Pokedex has been activated and you&apos;re ready to catch\n                      &#39;em all!\n                    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[10487,10624],"text":"\n                      Your Pokedex has been activated and you&apos;re ready to catch\n                      &rsquo;em all!\n                    "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Link } from \"wouter\";\nimport { getCommunityTheme } from \"../../utils/communityThemes\";\nimport { GamePodCalendar } from \"../GamePodCalendar\";\ninterface User {\n  id: string;\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  profileImageUrl?: string;\n  communities?: any[];\n}\n\ninterface PokeStreamDashboardProps {\n  user: User;\n}\n\nexport function PokeStreamDashboard({ user }: PokeStreamDashboardProps) {\n  const theme = getCommunityTheme(\"pokestream-hub\");\n\n  const getUserInitials = () => {\n    const first = user.firstName?.[0] || \"\";\n    const last = user.lastName?.[0] || \"\";\n    return first + last || user.email?.[0]?.toUpperCase() || \"U\";\n  };\n\n  return (\n    <div\n      className=\"min-h-screen\"\n      style={{\n        background:\n          \"linear-gradient(135deg, #ffd700 0%, #4a90e2 50%, #ffd700 100%)\",\n      }}\n    >\n      {/* Pokemon Center Header */}\n      <div className=\"relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-b from-blue-600/20 to-yellow-500/20\"></div>\n        <div className=\"container mx-auto px-4 py-12 relative\">\n          <div className=\"text-center space-y-6\">\n            <div className=\"inline-flex items-center gap-4 px-8 py-4 rounded-2xl bg-white/90 backdrop-blur-sm border-4 border-yellow-400 shadow-2xl\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-red-500 to-yellow-500 rounded-full flex items-center justify-center\">\n                <i className=\"fas fa-bolt text-white text-xl\"></i>\n              </div>\n              <span\n                className=\"text-3xl font-bold bg-gradient-to-r from-red-600 to-blue-600 bg-clip-text text-transparent\"\n                style={{ fontFamily: theme.fonts.heading }}\n              >\n                PokeStream Hub\n              </span>\n              <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-red-500 rounded-full flex items-center justify-center\">\n                <i className=\"fas fa-star text-white text-xl\"></i>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-center gap-6\">\n              <Avatar className=\"h-24 w-24 border-4 border-white shadow-xl\">\n                <AvatarImage src={user.profileImageUrl || undefined} />\n                <AvatarFallback\n                  className=\"text-2xl font-bold bg-gradient-to-r from-yellow-400 to-orange-400 text-white\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  {getUserInitials()}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"text-left\">\n                <h1\n                  className=\"text-5xl font-bold mb-2 text-white text-shadow-lg\"\n                  style={{\n                    fontFamily: theme.fonts.heading,\n                    textShadow: \"2px 2px 4px rgba(0,0,0,0.5)\",\n                  }}\n                >\n                  Hey {user.firstName || \"Trainer\"}!\n                </h1>\n                <p\n                  className=\"text-xl text-white/90 mb-3\"\n                  style={{ fontFamily: theme.fonts.body }}\n                >\n                  Ready for your next Pokemon adventure?\n                </p>\n                <div className=\"flex items-center gap-3\">\n                  <Badge className=\"bg-gradient-to-r from-red-500 to-yellow-500 text-white border-0 text-lg px-4 py-2\">\n                    <i className=\"fas fa-medal mr-2\"></i>\n                    Elite Trainer\n                  </Badge>\n                  <Badge className=\"bg-gradient-to-r from-blue-500 to-purple-500 text-white border-0 text-lg px-4 py-2\">\n                    <i className=\"fas fa-star mr-2\"></i>8 Badges\n                  </Badge>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 pb-12\">\n        {/* Pokemon-themed Action Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12 -mt-8\">\n          <Link href=\"/matchmaking\">\n            <Card className=\"group hover:scale-105 hover:rotate-1 transition-all duration-300 cursor-pointer bg-white border-4 border-red-400 shadow-xl\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-20 h-20 mx-auto mb-4 rounded-full bg-gradient-to-r from-red-500 to-pink-500 flex items-center justify-center shadow-lg group-hover:animate-bounce\">\n                  <i className=\"fas fa-fist-raised text-white text-2xl\"></i>\n                </div>\n                <h3\n                  className=\"font-bold mb-2 text-xl text-red-600\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  {theme.terminology.quickMatch}\n                </h3>\n                <p\n                  className=\"text-sm text-gray-600\"\n                  style={{ fontFamily: theme.fonts.body }}\n                >\n                  Battle wild trainers!\n                </p>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Link href=\"/tablesync\">\n            <Card className=\"group hover:scale-105 hover:rotate-1 transition-all duration-300 cursor-pointer bg-white border-4 border-blue-400 shadow-xl\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-20 h-20 mx-auto mb-4 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 flex items-center justify-center shadow-lg group-hover:animate-bounce\">\n                  <i className=\"fas fa-link text-white text-2xl\"></i>\n                </div>\n                <h3\n                  className=\"font-bold mb-2 text-xl text-blue-600\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  {theme.terminology.tableSync}\n                </h3>\n                <p\n                  className=\"text-sm text-gray-600\"\n                  style={{ fontFamily: theme.fonts.body }}\n                >\n                  Trade across regions\n                </p>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Card className=\"group hover:scale-105 hover:rotate-1 transition-all duration-300 cursor-pointer bg-white border-4 border-green-400 shadow-xl\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-20 h-20 mx-auto mb-4 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 flex items-center justify-center shadow-lg group-hover:animate-bounce\">\n                <i className=\"fas fa-calendar-star text-white text-2xl\"></i>\n              </div>\n              <h3\n                className=\"font-bold mb-2 text-xl text-green-600\"\n                style={{ fontFamily: theme.fonts.heading }}\n              >\n                {theme.terminology.events}\n              </h3>\n              <p\n                className=\"text-sm text-gray-600\"\n                style={{ fontFamily: theme.fonts.body }}\n              >\n                Epic journeys await\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"group hover:scale-105 hover:rotate-1 transition-all duration-300 cursor-pointer bg-white border-4 border-purple-400 shadow-xl\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-20 h-20 mx-auto mb-4 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center shadow-lg group-hover:animate-bounce\">\n                <i className=\"fas fa-users text-white text-2xl\"></i>\n              </div>\n              <h3\n                className=\"font-bold mb-2 text-xl text-purple-600\"\n                style={{ fontFamily: theme.fonts.heading }}\n              >\n                Pokemon Center\n              </h3>\n              <p\n                className=\"text-sm text-gray-600\"\n                style={{ fontFamily: theme.fonts.body }}\n              >\n                Meet other trainers\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Game Pod Calendar */}\n        <div className=\"mb-8\">\n          <GamePodCalendar\n            communityId=\"pokestream-hub\"\n            communityName=\"PokeStream Hub\"\n            theme={theme}\n          />\n        </div>\n\n        {/* Pokemon Lab Dashboard */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* PokeAlerts Feed */}\n          <Card className=\"lg:col-span-2 bg-white border-4 border-yellow-400 shadow-2xl\">\n            <CardHeader className=\"bg-gradient-to-r from-yellow-400 to-orange-400\">\n              <CardTitle\n                className=\"flex items-center gap-3 text-white text-2xl\"\n                style={{ fontFamily: theme.fonts.heading }}\n              >\n                <div className=\"w-12 h-12 bg-white/20 rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-bell text-white\"></i>\n                </div>\n                {theme.terminology.notifications}\n              </CardTitle>\n              <CardDescription\n                className=\"text-white/90\"\n                style={{ fontFamily: theme.fonts.body }}\n              >\n                Stay updated on Pokemon World happenings and trainer activities\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-4 p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl border-2 border-blue-200\">\n                  <div className=\"w-14 h-14 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center\">\n                    <i className=\"fas fa-gift text-white text-lg\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p\n                      className=\"font-bold text-lg text-blue-800\"\n                      style={{ fontFamily: theme.fonts.heading }}\n                    >\n                      Welcome to Pokemon World, {user.firstName || \"Trainer\"}!\n                    </p>\n                    <p\n                      className=\"text-blue-600\"\n                      style={{ fontFamily: theme.fonts.body }}\n                    >\n                      Your Pokedex has been activated and you&apos;re ready to catch\n                      'em all!\n                    </p>\n                  </div>\n                  <Badge className=\"bg-gradient-to-r from-red-500 to-yellow-500 text-white border-0\">\n                    NEW\n                  </Badge>\n                </div>\n\n                <div className=\"flex items-center gap-4 p-4 bg-gradient-to-r from-green-50 to-yellow-50 rounded-2xl border-2 border-green-200\">\n                  <div className=\"w-14 h-14 rounded-full bg-gradient-to-r from-green-500 to-yellow-500 flex items-center justify-center\">\n                    <i className=\"fas fa-trophy text-white text-lg\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p\n                      className=\"font-bold text-lg text-green-800\"\n                      style={{ fontFamily: theme.fonts.heading }}\n                    >\n                      Gym Challenge Available!\n                    </p>\n                    <p\n                      className=\"text-green-600\"\n                      style={{ fontFamily: theme.fonts.body }}\n                    >\n                      Elite Trainer Alex is hosting a Champion-level tournament\n                    </p>\n                  </div>\n                  <Badge className=\"bg-gradient-to-r from-green-500 to-blue-500 text-white border-0\">\n                    2h ago\n                  </Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Trainer Profile */}\n          <Card className=\"bg-white border-4 border-red-400 shadow-2xl\">\n            <CardHeader className=\"bg-gradient-to-r from-red-400 to-pink-400\">\n              <CardTitle\n                className=\"flex items-center gap-3 text-white text-xl\"\n                style={{ fontFamily: theme.fonts.heading }}\n              >\n                <div className=\"w-10 h-10 bg-white/20 rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-id-card text-white\"></i>\n                </div>\n                Trainer Card\n              </CardTitle>\n              <CardDescription\n                className=\"text-white/90\"\n                style={{ fontFamily: theme.fonts.body }}\n              >\n                Your journey through the Pokemon World\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-gradient-to-r from-red-50 to-yellow-50 rounded-xl border-2 border-red-200\">\n                  <div className=\"flex items-center gap-3 mb-4\">\n                    <i className=\"fas fa-star text-2xl text-yellow-500\"></i>\n                    <span\n                      className=\"font-bold text-lg text-red-600\"\n                      style={{ fontFamily: theme.fonts.heading }}\n                    >\n                      Current Region: Kanto\n                    </span>\n                  </div>\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-600\">Trainer Level:</span>\n                      <Badge className=\"bg-gradient-to-r from-yellow-400 to-orange-400 text-white\">\n                        Elite\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-600\">Badges Earned:</span>\n                      <div className=\"flex gap-1\">\n                        {[1, 2, 3, 4, 5, 6, 7, 8].map((badge) => (\n                          <div\n                            key={badge}\n                            className={`w-6 h-6 rounded-full ${badge <= 6 ? \"bg-gradient-to-r from-yellow-400 to-orange-400\" : \"bg-gray-300\"} flex items-center justify-center`}\n                          >\n                            <i\n                              className={`fas fa-medal text-white text-xs ${badge > 6 ? \"text-gray-500\" : \"\"}`}\n                            ></i>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-600\">Favorite Type:</span>\n                      <Badge className=\"bg-gradient-to-r from-red-500 to-orange-500 text-white\">\n                        <i className=\"fas fa-fire mr-1\"></i>Fire\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n\n                <Button\n                  className=\"w-full bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white border-0 text-lg py-3\"\n                  style={{ fontFamily: theme.fonts.heading }}\n                >\n                  <i className=\"fas fa-pokeball mr-2\"></i>\n                  Start Wild Encounter\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/communities/components/realm-dashboards/ScryGatherDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[542,545],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[542,545],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":333,"column":53,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[12468,12601],"text":"\n                      Your spark has ignited and you&apos;ve joined the ranks of\n                      planeswalkers\n                    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[12468,12601],"text":"\n                      Your spark has ignited and you&lsquo;ve joined the ranks of\n                      planeswalkers\n                    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[12468,12601],"text":"\n                      Your spark has ignited and you&#39;ve joined the ranks of\n                      planeswalkers\n                    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[12468,12601],"text":"\n                      Your spark has ignited and you&rsquo;ve joined the ranks of\n                      planeswalkers\n                    "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Link } from \"wouter\";\nimport { getCommunityTheme } from \"../../utils/communityThemes\";\ninterface User {\n  id: string;\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  profileImageUrl?: string;\n  communities?: any[];\n}\n\ninterface ScryGatherDashboardProps {\n  user: User;\n}\n\nexport function ScryGatherDashboard({ user }: ScryGatherDashboardProps) {\n  const theme = getCommunityTheme(\"scry-gather\");\n\n  const getUserInitials = () => {\n    const first = user.firstName?.[0] || \"\";\n    const last = user.lastName?.[0] || \"\";\n    return first + last || user.email?.[0]?.toUpperCase() || \"U\";\n  };\n\n  return (\n    <div className=\"min-h-screen\" style={{ background: theme.gradients.hero }}>\n      {/* Planeswalker Header */}\n      <div className=\"relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-b from-transparent to-black/20\"></div>\n        <div className=\"container mx-auto px-4 py-12 relative\">\n          <div className=\"text-center space-y-6\">\n            <div\n              className=\"inline-flex items-center gap-3 px-6 py-3 rounded-full\"\n              style={{\n                backgroundColor: theme.colors.primary + \"20\",\n                border: `2px solid ${theme.colors.primary}`,\n              }}\n            >\n              <i\n                className=\"fas fa-magic text-2xl\"\n                style={{ color: theme.colors.primary }}\n              ></i>\n              <span\n                className=\"text-2xl font-bold\"\n                style={{\n                  fontFamily: theme.fonts.heading,\n                  color: theme.colors.primary,\n                }}\n              >\n                Scry & Gather\n              </span>\n            </div>\n\n            <div className=\"flex items-center justify-center gap-4\">\n              <Avatar\n                className=\"h-20 w-20 border-4\"\n                style={{ borderColor: theme.colors.primary }}\n              >\n                <AvatarImage src={user.profileImageUrl || undefined} />\n                <AvatarFallback\n                  className=\"text-2xl font-bold\"\n                  style={{\n                    backgroundColor: theme.colors.primary,\n                    color: theme.colors.text,\n                    fontFamily: theme.fonts.heading,\n                  }}\n                >\n                  {getUserInitials()}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"text-left\">\n                <h1\n                  className=\"text-4xl font-bold mb-2\"\n                  style={{\n                    fontFamily: theme.fonts.heading,\n                    color: theme.colors.text,\n                  }}\n                >\n                  Welcome, {user.firstName || \"Planeswalker\"}\n                </h1>\n                <p\n                  className=\"text-lg\"\n                  style={{\n                    fontFamily: theme.fonts.body,\n                    color: theme.colors.textSecondary,\n                  }}\n                >\n                  Ready to explore the Multiverse?\n                </p>\n                <div className=\"flex items-center gap-2 mt-2\">\n                  <Badge className=\"bg-gradient-to-r from-red-600 to-orange-600 text-white border-0\">\n                    <i className=\"fas fa-fire mr-2\"></i>\n                    Active Planeswalker\n                  </Badge>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 pb-12\">\n        {/* Mana-themed Action Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12 -mt-6\">\n          <Link href=\"/matchmaking\">\n            <Card\n              className=\"group hover:scale-105 transition-all duration-300 cursor-pointer border-2\"\n              style={{\n                borderColor: theme.colors.primary,\n                background: theme.gradients.card,\n              }}\n            >\n              <CardContent className=\"p-6 text-center\">\n                <div\n                  className=\"w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center relative\"\n                  style={{\n                    background:\n                      \"linear-gradient(135deg, #ff4444 0%, #ff8844 100%)\",\n                  }}\n                >\n                  <i className=\"fas fa-fire text-white text-xl\"></i>\n                  <div className=\"absolute -top-1 -right-1 w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center\">\n                    <span className=\"text-white text-xs font-bold\">R</span>\n                  </div>\n                </div>\n                <h3\n                  className=\"font-bold mb-2\"\n                  style={{\n                    fontFamily: theme.fonts.heading,\n                    color: theme.colors.text,\n                  }}\n                >\n                  {theme.terminology.quickMatch}\n                </h3>\n                <p\n                  className=\"text-sm\"\n                  style={{ color: theme.colors.textSecondary }}\n                >\n                  Cast instant connections\n                </p>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Link href=\"/tablesync\">\n            <Card\n              className=\"group hover:scale-105 transition-all duration-300 cursor-pointer border-2\"\n              style={{\n                borderColor: theme.colors.accent,\n                background: theme.gradients.card,\n              }}\n            >\n              <CardContent className=\"p-6 text-center\">\n                <div\n                  className=\"w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center relative\"\n                  style={{\n                    background:\n                      \"linear-gradient(135deg, #4444ff 0%, #8844ff 100%)\",\n                  }}\n                >\n                  <i className=\"fas fa-portal-enter text-white text-xl\"></i>\n                  <div className=\"absolute -top-1 -right-1 w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center\">\n                    <span className=\"text-white text-xs font-bold\">U</span>\n                  </div>\n                </div>\n                <h3\n                  className=\"font-bold mb-2\"\n                  style={{\n                    fontFamily: theme.fonts.heading,\n                    color: theme.colors.text,\n                  }}\n                >\n                  {theme.terminology.tableSync}\n                </h3>\n                <p\n                  className=\"text-sm\"\n                  style={{ color: theme.colors.textSecondary }}\n                >\n                  Synchronize planes\n                </p>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Card\n            className=\"group hover:scale-105 transition-all duration-300 cursor-pointer border-2\"\n            style={{ borderColor: \"#44ff44\", background: theme.gradients.card }}\n          >\n            <CardContent className=\"p-6 text-center\">\n              <div\n                className=\"w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center relative\"\n                style={{\n                  background:\n                    \"linear-gradient(135deg, #44ff44 0%, #88ff44 100%)\",\n                }}\n              >\n                <i className=\"fas fa-leaf text-white text-xl\"></i>\n                <div className=\"absolute -top-1 -right-1 w-6 h-6 bg-green-500 rounded-full flex items-center justify-center\">\n                  <span className=\"text-white text-xs font-bold\">G</span>\n                </div>\n              </div>\n              <h3\n                className=\"font-bold mb-2\"\n                style={{\n                  fontFamily: theme.fonts.heading,\n                  color: theme.colors.text,\n                }}\n              >\n                {theme.terminology.events}\n              </h3>\n              <p\n                className=\"text-sm\"\n                style={{ color: theme.colors.textSecondary }}\n              >\n                Cultivate community\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card\n            className=\"group hover:scale-105 transition-all duration-300 cursor-pointer border-2\"\n            style={{ borderColor: \"#ffff44\", background: theme.gradients.card }}\n          >\n            <CardContent className=\"p-6 text-center\">\n              <div\n                className=\"w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center relative\"\n                style={{\n                  background:\n                    \"linear-gradient(135deg, #ffff44 0%, #ffaa44 100%)\",\n                }}\n              >\n                <i className=\"fas fa-crown text-white text-xl\"></i>\n                <div className=\"absolute -top-1 -right-1 w-6 h-6 bg-yellow-500 rounded-full flex items-center justify-center\">\n                  <span className=\"text-white text-xs font-bold\">W</span>\n                </div>\n              </div>\n              <h3\n                className=\"font-bold mb-2\"\n                style={{\n                  fontFamily: theme.fonts.heading,\n                  color: theme.colors.text,\n                }}\n              >\n                Guild Hall\n              </h3>\n              <p\n                className=\"text-sm\"\n                style={{ color: theme.colors.textSecondary }}\n              >\n                Social sanctum\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Game Pod Calendar - TODO: Integrate with events feature */}\n        <div className=\"mb-8\">\n          <Card\n            className=\"border-2\"\n            style={{\n              borderColor: \"#ffff44\",\n              background: \"linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)\",\n            }}\n          >\n            <CardContent className=\"p-6 text-center\">\n              <p className=\"text-yellow-300\">Game Pod Calendar - Coming Soon</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Ancient Tome Dashboard */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Mystical Visions (Activity) */}\n          <Card\n            className=\"lg:col-span-2 border-2\"\n            style={{\n              borderColor: theme.colors.primary,\n              background: theme.gradients.card,\n            }}\n          >\n            <CardHeader>\n              <CardTitle\n                className=\"flex items-center gap-3\"\n                style={{\n                  fontFamily: theme.fonts.heading,\n                  color: theme.colors.text,\n                }}\n              >\n                <div\n                  className=\"w-10 h-10 rounded-full flex items-center justify-center\"\n                  style={{ background: theme.gradients.primary }}\n                >\n                  <i className=\"fas fa-crystal-ball text-white\"></i>\n                </div>\n                {theme.terminology.notifications}\n              </CardTitle>\n              <CardDescription style={{ color: theme.colors.textSecondary }}>\n                Peer into the flow of mystic energies across the planes\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div\n                  className=\"flex items-center gap-4 p-4 rounded-lg\"\n                  style={{ backgroundColor: theme.colors.surface }}\n                >\n                  <div className=\"w-12 h-12 rounded-full flex items-center justify-center bg-gradient-to-r from-purple-600 to-blue-600\">\n                    <i className=\"fas fa-scroll text-white\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p\n                      className=\"font-medium\"\n                      style={{ color: theme.colors.text }}\n                    >\n                      Welcome to the Multiverse,{\" \"}\n                      {user.firstName || \"Planeswalker\"}!\n                    </p>\n                    <p\n                      className=\"text-sm\"\n                      style={{ color: theme.colors.textSecondary }}\n                    >\n                      Your spark has ignited and you've joined the ranks of\n                      planeswalkers\n                    </p>\n                  </div>\n                  <Badge\n                    variant=\"outline\"\n                    style={{\n                      borderColor: theme.colors.primary,\n                      color: theme.colors.primary,\n                    }}\n                  >\n                    Just now\n                  </Badge>\n                </div>\n\n                <div\n                  className=\"flex items-center gap-4 p-4 rounded-lg\"\n                  style={{ backgroundColor: theme.colors.surface }}\n                >\n                  <div className=\"w-12 h-12 rounded-full flex items-center justify-center bg-gradient-to-r from-red-600 to-orange-600\">\n                    <i className=\"fas fa-magic text-white\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p\n                      className=\"font-medium\"\n                      style={{ color: theme.colors.text }}\n                    >\n                      Spell Circle Discovery\n                    </p>\n                    <p\n                      className=\"text-sm\"\n                      style={{ color: theme.colors.textSecondary }}\n                    >\n                      A new planeswalker seeks allies for Commander adventures\n                    </p>\n                  </div>\n                  <Badge\n                    variant=\"outline\"\n                    style={{\n                      borderColor: theme.colors.accent,\n                      color: theme.colors.accent,\n                    }}\n                  >\n                    2h ago\n                  </Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Planeswalker Codex (Communities) */}\n          <Card\n            className=\"border-2\"\n            style={{\n              borderColor: theme.colors.accent,\n              background: theme.gradients.card,\n            }}\n          >\n            <CardHeader>\n              <CardTitle\n                className=\"flex items-center gap-3\"\n                style={{\n                  fontFamily: theme.fonts.heading,\n                  color: theme.colors.text,\n                }}\n              >\n                <div\n                  className=\"w-10 h-10 rounded-full flex items-center justify-center\"\n                  style={{\n                    background: `linear-gradient(135deg, ${theme.colors.accent}, ${theme.colors.primary})`,\n                  }}\n                >\n                  <i className=\"fas fa-book-spells text-white\"></i>\n                </div>\n                Planar Codex\n              </CardTitle>\n              <CardDescription style={{ color: theme.colors.textSecondary }}>\n                Your planeswalker knowledge and guild affiliations\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div\n                  className=\"p-4 rounded-lg border\"\n                  style={{\n                    borderColor: theme.colors.primary,\n                    backgroundColor: theme.colors.surface,\n                  }}\n                >\n                  <div className=\"flex items-center gap-3 mb-3\">\n                    <i\n                      className=\"fas fa-magic text-lg\"\n                      style={{ color: theme.colors.primary }}\n                    ></i>\n                    <span\n                      className=\"font-semibold\"\n                      style={{ color: theme.colors.text }}\n                    >\n                      Current Plane: Scry & Gather\n                    </span>\n                  </div>\n                  <div\n                    className=\"space-y-2 text-sm\"\n                    style={{ color: theme.colors.textSecondary }}\n                  >\n                    <div className=\"flex justify-between\">\n                      <span>Planeswalker Rank:</span>\n                      <Badge\n                        style={{\n                          backgroundColor: theme.colors.primary,\n                          color: theme.colors.text,\n                        }}\n                      >\n                        Initiate\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Mana Affinity:</span>\n                      <div className=\"flex gap-1\">\n                        <div className=\"w-4 h-4 rounded-full bg-red-500 border border-red-600\"></div>\n                        <div className=\"w-4 h-4 rounded-full bg-blue-500 border border-blue-600\"></div>\n                        <div className=\"w-4 h-4 rounded-full bg-black border border-gray-600\"></div>\n                      </div>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Favorite Format:</span>\n                      <span className=\"font-medium\">Commander</span>\n                    </div>\n                  </div>\n                </div>\n\n                <Button\n                  className=\"w-full\"\n                  style={{\n                    background: theme.gradients.primary,\n                    borderColor: theme.colors.primary,\n                  }}\n                >\n                  <i className=\"fas fa-portal-enter mr-2\"></i>\n                  Enter Spell Circle\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/communities/components/realm-dashboards/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/communities/hooks/useCommunity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/communities/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/communities/utils/communityThemes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/events/components/JoinEventButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/events/hooks/useEvents.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/events/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/events/types/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[316,319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[316,319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[473,476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[473,476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Event, Community } from \"@shared/schema\";\n\nexport interface CalendarEvent {\n  id: string;\n  title: string;\n  description: string;\n  type: string;\n  date: string;\n  time: string;\n  location: string;\n  playerSlots: number;\n  alternateSlots: number;\n  gameFormat: string;\n  powerLevel: number;\n  creator: any;\n  creatorId: string;\n  attendeeCount: number;\n  mainPlayers: number;\n  alternates: number;\n}\n\nexport interface ExtendedEvent extends Event {\n  creator: any;\n  community: Community | null;\n  attendeeCount: number;\n  isUserAttending?: boolean;\n}\n\nexport interface Attendee {\n  userId: string;\n  eventId: string;\n  status: string;\n  role: string;\n  playerType: string;\n  user: {\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n}\n\nexport const EVENT_TYPES = [\n  {\n    id: \"tournament\",\n    name: \"Tournament\",\n    icon: \"fas fa-trophy\",\n    color: \"bg-yellow-500\",\n  },\n  {\n    id: \"convention\",\n    name: \"Convention\",\n    icon: \"fas fa-building\",\n    color: \"bg-purple-500\",\n  },\n  {\n    id: \"release\",\n    name: \"Product Release\",\n    icon: \"fas fa-box\",\n    color: \"bg-blue-500\",\n  },\n  {\n    id: \"game_pod\",\n    name: \"Game Pod\",\n    icon: \"fas fa-gamepad\",\n    color: \"bg-red-500\",\n  },\n  {\n    id: \"community\",\n    name: \"Community Event\",\n    icon: \"fas fa-users\",\n    color: \"bg-green-500\",\n  },\n];\n\nexport const GAME_FORMATS = [\n  { id: \"commander\", name: \"Commander\", icon: \"fas fa-crown\" },\n  { id: \"standard\", name: \"Standard\", icon: \"fas fa-shield-alt\" },\n  { id: \"limited\", name: \"Limited\", icon: \"fas fa-box\" },\n  { id: \"legacy\", name: \"Legacy\", icon: \"fas fa-scroll\" },\n  { id: \"modern\", name: \"Modern\", icon: \"fas fa-bolt\" },\n  { id: \"draft\", name: \"Draft\", icon: \"fas fa-random\" },\n];\n\nexport const POWER_LEVELS = [\n  { value: 1, label: \"Casual (1-2)\", description: \"Precons and simple decks\" },\n  { value: 3, label: \"Focused (3-4)\", description: \"Some synergy and power\" },\n  {\n    value: 5,\n    label: \"Optimized (5-6)\",\n    description: \"Strong synergy and efficiency\",\n  },\n  {\n    value: 7,\n    label: \"High Power (7-8)\",\n    description: \"Fast mana and powerful plays\",\n  },\n  {\n    value: 9,\n    label: \"cEDH (9-10)\",\n    description: \"Competitive tournament level\",\n  },\n];\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/game-stats/components/game-stats-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/game-stats/hooks/use-game-stats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/game-stats/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/game-stats/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/messaging/components/NotificationCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/messaging/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/users/components/UserProfileDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/users/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/users/pages/Profile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/features/users/pages/Social.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/hooks/use-toast.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'actionTypes' is assigned a value but only used as a type. Allowed unused vars must match /^_/u.","line":16,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":16,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nimport type { ToastActionElement, ToastProps } from \"@/components/ui/toast\";\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\n// Action types constant used for type definitions\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/hooks/useDocumentTitle.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/lib/gameNames.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/lib/logger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[89,92],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[89,92],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[231,234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[231,234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[332,335],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[332,335],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[433,436],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[433,436],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[447,450],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[447,450],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Simple client-side logger\nexport const logger = {\n  debug: (message: string, ...args: any[]) => {\n    if (import.meta.env.DEV) {\n      console.debug(`[DEBUG] ${message}`, ...args);\n    }\n  },\n\n  info: (message: string, ...args: any[]) => {\n    console.info(`[INFO] ${message}`, ...args);\n  },\n\n  warn: (message: string, ...args: any[]) => {\n    console.warn(`[WARN] ${message}`, ...args);\n  },\n\n  error: (message: string, error?: any, ...args: any[]) => {\n    console.error(`[ERROR] ${message}`, error, ...args);\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/lib/queryClient.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1445,1448],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1445,1448],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1914,1917],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1914,1917],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: 1000 * 60 * 5, // 5 minutes - more reasonable default\n      gcTime: 1000 * 60 * 30, // 30 minutes garbage collection\n      retry: (failureCount, error: any) => {\n        // Don't retry on 4xx errors except 401, 403\n        if (\n          error?.message?.includes(\"401\") ||\n          error?.message?.includes(\"403\")\n        ) {\n          return false;\n        }\n        if (error?.message?.match(/4\\d\\d/)) {\n          return false;\n        }\n        return failureCount < 3;\n      },\n      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\n    },\n    mutations: {\n      retry: (failureCount, error: any) => {\n        // Don't retry mutations on client errors\n        if (error?.message?.match(/4\\d\\d/)) {\n          return false;\n        }\n        return failureCount < 2;\n      },\n      onError: (error) => {\n        console.error(\"Mutation error:\", error);\n      },\n    },\n  },\n});\n\n// Global error handling\nqueryClient.setQueryDefaults([\"api\"], {\n  staleTime: 1000 * 60 * 5,\n});\n\n// Performance monitoring\nif (import.meta.env.DEV) {\n  queryClient.setMutationDefaults([\"api\"], {\n    onSettled: (data, error, variables) => {\n      console.log(\"Mutation settled:\", { data, error, variables });\n    },\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/lib/websocket-client.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[554,557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[554,557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[669,672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[669,672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[894,897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[894,897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1019,1022],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1019,1022],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1151,1154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1151,1154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1264,1267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1264,1267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1387,1390],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1387,1390],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1704,1707],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1704,1707],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":323,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":323,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8948,8951],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8948,8951],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":486,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":486,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13599,13602],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13599,13602],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":508,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":508,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14083,14086],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14083,14086],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":521,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":521,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14306,14309],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14306,14309],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":531,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":531,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14490,14493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14490,14493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":535,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":535,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14635,14638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14635,14638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":539,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":539,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14774,14777],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14774,14777],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":543,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":543,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14914,14917],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14914,14917],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":550,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":550,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15096,15099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15096,15099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":557,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":557,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15268,15271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15268,15271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { queryClient } from \"@/lib/queryClient\";\nimport { logger } from \"./logger\";\n\nexport type WebSocketMessage =\n  // Game room messages\n  | {\n      type: \"join_room\";\n      sessionId: string;\n      user: { id: string; name: string; avatar?: string };\n    }\n  | {\n      type: \"message\";\n      sessionId: string;\n      user: { id: string; name: string; avatar?: string };\n      content: string;\n    }\n  | {\n      type: \"game_action\";\n      sessionId: string;\n      action: string;\n      user: { id: string; name: string; avatar?: string };\n      data: any;\n    }\n  // Collaborative streaming messages\n  | { type: \"join_collab_stream\"; eventId: string; collaborator?: any }\n  | {\n      type: \"phase_change\";\n      eventId: string;\n      newPhase: string;\n      hostUserId?: string;\n    }\n  | {\n      type: \"coordination_event\";\n      eventId: string;\n      eventType: string;\n      eventData: any;\n    }\n  | {\n      type: \"collaborator_status_update\";\n      eventId: string;\n      userId?: string;\n      statusUpdate: any;\n    }\n  // WebRTC messages\n  | {\n      type: \"webrtc_offer\";\n      sessionId: string;\n      targetPlayer: string;\n      offer: any;\n    }\n  | {\n      type: \"webrtc_answer\";\n      sessionId: string;\n      targetPlayer: string;\n      answer: any;\n    }\n  | {\n      type: \"webrtc_ice_candidate\";\n      sessionId: string;\n      targetPlayer: string;\n      candidate: any;\n    }\n  | {\n      type: \"camera_toggle\";\n      sessionId: string;\n      user: { id: string; name: string };\n      cameraOn: boolean;\n    }\n  | {\n      type: \"mic_toggle\";\n      sessionId: string;\n      user: { id: string; name: string };\n      micOn: boolean;\n    };\n\nexport type WebSocketEventListener = (data: any) => void;\n\nclass WebSocketClient {\n  private ws: WebSocket | null = null;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectDelay = 1000; // Start with 1 second\n  private eventListeners: Map<string, Set<WebSocketEventListener>> = new Map();\n  private connectionPromise: Promise<void> | null = null;\n\n  async connect(): Promise<void> {\n    if (this.connectionPromise) {\n      return this.connectionPromise;\n    }\n\n    this.connectionPromise = new Promise((resolve, reject) => {\n      try {\n        const wsUrl = this.buildWebSocketUrl();\n\n        logger.info(\"Attempting WebSocket connection\", { url: wsUrl });\n        this.ws = new WebSocket(wsUrl);\n\n        this.ws.onopen = () => {\n          logger.info(\"WebSocket connected successfully\");\n          this.reconnectAttempts = 0;\n          this.reconnectDelay = 1000;\n          resolve();\n        };\n\n        this.ws.onmessage = (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            this.handleMessage(data);\n          } catch (error) {\n            logger.error(\"Failed to parse WebSocket message\", error);\n          }\n        };\n\n        this.ws.onclose = (event) => {\n          logger.info(\"WebSocket connection closed\", {\n            code: event.code,\n            reason: event.reason,\n            wasClean: event.wasClean,\n          });\n          this.connectionPromise = null;\n\n          // Attempt to reconnect if not a manual close\n          if (\n            event.code !== 1000 &&\n            this.reconnectAttempts < this.maxReconnectAttempts\n          ) {\n            this.scheduleReconnect();\n          }\n        };\n\n        this.ws.onerror = (error) => {\n          logger.error(\"WebSocket connection error\", error);\n\n          // Try fallback URL construction if primary fails\n          if (this.reconnectAttempts === 0) {\n            this.connectionPromise = null;\n            this.attemptFallbackConnection().then(resolve).catch(reject);\n          } else {\n            reject(\n              new Error(\n                `WebSocket connection failed after ${this.reconnectAttempts} attempts`,\n              ),\n            );\n          }\n        };\n      } catch (error) {\n        logger.error(\"Failed to create WebSocket connection\", error);\n        reject(error);\n      }\n    });\n\n    return this.connectionPromise;\n  }\n\n  private buildWebSocketUrl(): string {\n    const host = window.location.host;\n    const hostname = window.location.hostname;\n    const protocol = window.location.protocol;\n\n    // Validate host is not undefined or empty\n    if (\n      !host ||\n      host === \"undefined\" ||\n      !hostname ||\n      hostname === \"undefined\"\n    ) {\n      throw new Error(\"Invalid host configuration for WebSocket connection\");\n    }\n\n    // Determine if we should use secure WebSocket\n    const isSecure =\n      protocol === \"https:\" ||\n      (hostname !== \"localhost\" &&\n        !hostname.startsWith(\"127.\") &&\n        !hostname.includes(\"replit.dev\"));\n\n    const wsProtocol = isSecure ? \"wss:\" : \"ws:\";\n    const wsUrl = `${wsProtocol}//${host}/ws`;\n\n    logger.debug(\"Built WebSocket URL\", {\n      wsUrl,\n      protocol,\n      hostname,\n      host,\n      isSecure,\n    });\n\n    return wsUrl;\n  }\n\n  private async attemptFallbackConnection(): Promise<void> {\n    logger.info(\"Attempting fallback WebSocket connection\");\n\n    const fallbackUrls = this.buildFallbackUrls();\n\n    for (const url of fallbackUrls) {\n      try {\n        logger.info(\"Trying fallback URL\", { url });\n\n        await new Promise<void>((resolve, reject) => {\n          const fallbackWs = new WebSocket(url);\n\n          const cleanup = () => {\n            fallbackWs.onopen = null;\n            fallbackWs.onerror = null;\n            fallbackWs.onclose = null;\n          };\n\n          fallbackWs.onopen = () => {\n            logger.info(\"Fallback WebSocket connection successful\", { url });\n            cleanup();\n\n            // Replace the main WebSocket with the successful fallback\n            this.ws = fallbackWs;\n            this.setupWebSocketHandlers();\n            resolve();\n          };\n\n          fallbackWs.onerror = (error) => {\n            logger.warn(\"Fallback WebSocket connection failed\", { url, error });\n            cleanup();\n            reject(new Error(`Fallback connection failed: ${url}`));\n          };\n\n          // Set a timeout for the fallback attempt\n          setTimeout(() => {\n            if (fallbackWs.readyState === WebSocket.CONNECTING) {\n              cleanup();\n              fallbackWs.close();\n              reject(new Error(`Fallback connection timeout: ${url}`));\n            }\n          }, 5000);\n        });\n\n        // If we get here, the fallback connection succeeded\n        return;\n      } catch (error) {\n        logger.debug(\"Fallback URL failed, trying next\", { url, error });\n        continue;\n      }\n    }\n\n    throw new Error(\"All fallback WebSocket connection attempts failed\");\n  }\n\n  private buildFallbackUrls(): string[] {\n    const hostname = window.location.hostname;\n    const port =\n      window.location.port ||\n      (window.location.protocol === \"https:\" ? \"443\" : \"80\");\n\n    const fallbackUrls: string[] = [];\n\n    // Try different protocol combinations\n    if (hostname === \"localhost\" || hostname.startsWith(\"127.\")) {\n      // For localhost, try both ws and wss\n      fallbackUrls.push(`ws://${hostname}:${port}/ws`);\n      fallbackUrls.push(`wss://${hostname}:${port}/ws`);\n      fallbackUrls.push(`ws://localhost:5000/ws`); // Default dev port\n      fallbackUrls.push(`ws://127.0.0.1:5000/ws`);\n    } else {\n      // For remote hosts, prefer wss but try ws as fallback\n      fallbackUrls.push(`wss://${hostname}:${port}/ws`);\n      fallbackUrls.push(`ws://${hostname}:${port}/ws`);\n      if (port !== \"80\" && port !== \"443\") {\n        fallbackUrls.push(`wss://${hostname}/ws`);\n        fallbackUrls.push(`ws://${hostname}/ws`);\n      }\n    }\n\n    return fallbackUrls;\n  }\n\n  private setupWebSocketHandlers(): void {\n    if (!this.ws) return;\n\n    this.ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        this.handleMessage(data);\n      } catch (error) {\n        logger.error(\"Failed to parse WebSocket message\", error);\n      }\n    };\n\n    this.ws.onclose = (event) => {\n      logger.info(\"WebSocket connection closed\", {\n        code: event.code,\n        reason: event.reason,\n        wasClean: event.wasClean,\n      });\n      this.connectionPromise = null;\n\n      // Attempt to reconnect if not a manual close\n      if (\n        event.code !== 1000 &&\n        this.reconnectAttempts < this.maxReconnectAttempts\n      ) {\n        this.scheduleReconnect();\n      }\n    };\n  }\n\n  private scheduleReconnect(): void {\n    const delay = Math.min(\n      this.reconnectDelay * Math.pow(2, this.reconnectAttempts),\n      30000,\n    );\n\n    logger.info(`Scheduling WebSocket reconnect in ${delay}ms`, {\n      attempt: this.reconnectAttempts + 1,\n      maxAttempts: this.maxReconnectAttempts,\n    });\n\n    setTimeout(() => {\n      this.reconnectAttempts++;\n      this.connect().catch((error) => {\n        logger.error(\"WebSocket reconnect failed\", error);\n      });\n    }, delay);\n  }\n\n  private handleMessage(data: any): void {\n    logger.debug(\"WebSocket message received\", { type: data.type });\n\n    // Handle collaborative streaming specific messages with proper cache invalidation\n    switch (data.type) {\n      case \"collaborator_joined\":\n      case \"collaborator_left\":\n        // Invalidate collaborator queries for the specific event\n        queryClient.invalidateQueries({\n          queryKey: [\n            \"/api/collaborative-streams\",\n            data.eventId || data.collaborator?.eventId,\n            \"collaborators\",\n          ],\n        });\n        break;\n      case \"phase_updated\":\n        // Invalidate coordination status for the specific event\n        queryClient.invalidateQueries({\n          queryKey: [\n            \"/api/collaborative-streams\",\n            data.eventId,\n            \"coordination\",\n          ],\n        });\n        break;\n      case \"coordination_event_broadcast\":\n      case \"collaborator_status_changed\":\n        // Invalidate coordination status and suggestions\n        queryClient.invalidateQueries({\n          queryKey: [\"/api/collaborative-streams\", data.eventId],\n        });\n        break;\n      case \"phase_change_error\":\n        logger.error(\"Phase change error\", data);\n        break;\n    }\n\n    // Notify event listeners\n    const listeners = this.eventListeners.get(data.type);\n    if (listeners) {\n      listeners.forEach((listener) => {\n        try {\n          listener(data);\n        } catch (error) {\n          logger.error(\"Error in WebSocket event listener\", error, {\n            eventType: data.type,\n          });\n        }\n      });\n    }\n  }\n\n  send(message: WebSocketMessage): void {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      logger.warn(\"Cannot send WebSocket message - connection not open\", {\n        message: message.type,\n        readyState: this.ws?.readyState,\n        connectionState: this.getConnectionState(),\n      });\n      return;\n    }\n\n    try {\n      // Basic message validation on client side\n      if (!message.type) {\n        throw new Error(\"Message must have a type field\");\n      }\n\n      // Sanitize message content to prevent issues\n      const sanitizedMessage = this.sanitizeMessage(message);\n\n      this.ws.send(JSON.stringify(sanitizedMessage));\n      logger.debug(\"WebSocket message sent\", { type: message.type });\n    } catch (error) {\n      logger.error(\"Failed to send WebSocket message\", error, {\n        messageType: message.type,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  }\n\n  private sanitizeMessage(message: WebSocketMessage): WebSocketMessage {\n    // Create a deep copy to avoid mutating the original\n    const sanitized = JSON.parse(JSON.stringify(message));\n\n    // Sanitize string fields that might contain user input\n    if (sanitized.content && typeof sanitized.content === \"string\") {\n      sanitized.content = sanitized.content.substring(0, 1000); // Limit message length\n    }\n\n    return sanitized;\n  }\n\n  private getConnectionState(): string {\n    if (!this.ws) return \"no-websocket\";\n\n    switch (this.ws.readyState) {\n      case WebSocket.CONNECTING:\n        return \"connecting\";\n      case WebSocket.OPEN:\n        return \"open\";\n      case WebSocket.CLOSING:\n        return \"closing\";\n      case WebSocket.CLOSED:\n        return \"closed\";\n      default:\n        return \"unknown\";\n    }\n  }\n\n  addEventListener(\n    eventType: string,\n    listener: WebSocketEventListener,\n  ): () => void {\n    if (!this.eventListeners.has(eventType)) {\n      this.eventListeners.set(eventType, new Set());\n    }\n\n    const listeners = this.eventListeners.get(eventType);\n    if (listeners) {\n      listeners.add(listener);\n    }\n\n    // Return unsubscribe function\n    return () => {\n      const listeners = this.eventListeners.get(eventType);\n      if (listeners) {\n        listeners.delete(listener);\n        if (listeners.size === 0) {\n          this.eventListeners.delete(eventType);\n        }\n      }\n    };\n  }\n\n  disconnect(): void {\n    if (this.ws) {\n      this.ws.close(1000, \"Manual disconnect\");\n      this.ws = null;\n    }\n    this.eventListeners.clear();\n    this.connectionPromise = null;\n  }\n\n  get isConnected(): boolean {\n    return this.ws?.readyState === WebSocket.OPEN;\n  }\n\n  get readyState(): number {\n    return this.ws?.readyState ?? WebSocket.CLOSED;\n  }\n}\n\n// Export singleton instance\nexport const webSocketClient = new WebSocketClient();\n\n// Collaborative Streaming specific WebSocket helpers\nexport class CollaborativeStreamingWebSocket {\n  constructor(private client: WebSocketClient) {}\n\n  async joinCollaborativeStream(\n    eventId: string,\n    collaborator?: any,\n  ): Promise<void> {\n    await this.client.connect();\n    this.client.send({\n      type: \"join_collab_stream\",\n      eventId,\n      collaborator: collaborator || {},\n    });\n  }\n\n  changePhase(eventId: string, newPhase: string, hostUserId?: string): void {\n    this.client.send({\n      type: \"phase_change\",\n      eventId,\n      newPhase,\n      hostUserId: hostUserId || \"unknown\",\n    });\n  }\n\n  sendCoordinationEvent(\n    eventId: string,\n    eventType: string,\n    eventData: any,\n  ): void {\n    this.client.send({\n      type: \"coordination_event\",\n      eventId,\n      eventType,\n      eventData,\n    });\n  }\n\n  updateCollaboratorStatus(\n    eventId: string,\n    userId: string,\n    statusUpdate: any,\n  ): void {\n    this.client.send({\n      type: \"collaborator_status_update\",\n      eventId,\n      userId,\n      statusUpdate,\n    });\n  }\n\n  onCollaboratorJoined(callback: (data: any) => void): () => void {\n    return this.client.addEventListener(\"collaborator_joined\", callback);\n  }\n\n  onCollaboratorLeft(callback: (data: any) => void): () => void {\n    return this.client.addEventListener(\"collaborator_left\", callback);\n  }\n\n  onPhaseUpdated(callback: (data: any) => void): () => void {\n    return this.client.addEventListener(\"phase_updated\", callback);\n  }\n\n  onCoordinationEvent(callback: (data: any) => void): () => void {\n    return this.client.addEventListener(\n      \"coordination_event_broadcast\",\n      callback,\n    );\n  }\n\n  onCollaboratorStatusChanged(callback: (data: any) => void): () => void {\n    return this.client.addEventListener(\n      \"collaborator_status_changed\",\n      callback,\n    );\n  }\n\n  onPhaseChangeError(callback: (data: any) => void): () => void {\n    return this.client.addEventListener(\"phase_change_error\", callback);\n  }\n}\n\nexport const collaborativeStreamingWS = new CollaborativeStreamingWebSocket(\n  webSocketClient,\n);\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/api-docs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/auth/account-settings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/auth/change-email.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/auth/error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/auth/forgot-password.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/auth/mfa-verify.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/auth/register.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/auth/signin.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Label' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Lock' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useDocumentTitle } from \"@/hooks/useDocumentTitle\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { FaGoogle } from \"react-icons/fa\";\nimport { Loader2, Mail, Lock } from \"lucide-react\";\nimport { useAuth } from \"@/features/auth\";\nimport { Link } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Login form validation schema\nconst loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\").min(1, \"Email is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function SignIn() {\n  useDocumentTitle(\"Sign In - Shuffle & Sync\");\n\n  const { signIn, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [isCredentialsLogin, setIsCredentialsLogin] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  // Form setup\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  // Redirect to home if already authenticated\n  useEffect(() => {\n    if (isAuthenticated) {\n      window.location.href = \"/\";\n    }\n  }, [isAuthenticated]);\n\n  const handleGoogleSignIn = () => {\n    signIn(\"google\");\n  };\n\n  const handleCredentialsLogin = async (values: LoginForm) => {\n    setIsLoading(true);\n    setError(\"\");\n\n    try {\n      // Get CSRF token first\n      const csrfResponse = await fetch(\"/api/auth/csrf\");\n      const { csrfToken } = await csrfResponse.json();\n\n      // Use Auth.js v5 credentials signin with CSRF token\n      const formData = new FormData();\n      formData.append(\"email\", values.email);\n      formData.append(\"password\", values.password);\n      formData.append(\"csrfToken\", csrfToken);\n      formData.append(\"redirect\", \"false\");\n      formData.append(\"callbackUrl\", \"/home\");\n\n      const response = await fetch(\"/api/auth/signin/credentials\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n\n        if (data.url) {\n          // Success - redirect to provided URL\n          toast({\n            title: \"Welcome back!\",\n            description: \"You have been signed in successfully.\",\n          });\n          window.location.href = data.url;\n        } else {\n          // Session created successfully\n          window.location.href = \"/home\";\n        }\n      } else {\n        const errorText = await response.text();\n\n        // Handle specific error cases\n        if (errorText.includes(\"MFA_REQUIRED\")) {\n          // Store email for MFA verification and redirect\n          sessionStorage.setItem(\"mfa_email\", values.email);\n          toast({\n            title: \"MFA Required\",\n            description: \"Please complete multi-factor authentication.\",\n            variant: \"default\",\n          });\n          // Redirect to MFA verification page\n          window.location.href = \"/auth/mfa-verify\";\n        } else if (errorText.includes(\"CredentialsSignin\")) {\n          setError(\n            \"Invalid email or password. Please check your credentials and try again.\",\n          );\n        } else if (errorText.includes(\"too many failed attempts\")) {\n          setError(\n            \"Account temporarily locked due to too many failed attempts.\",\n          );\n        } else if (errorText.includes(\"email verification\")) {\n          setError(\"Please verify your email address before signing in.\");\n        } else {\n          setError(\n            \"Sign in failed. Please check your credentials and try again.\",\n          );\n        }\n      }\n    } catch (err) {\n      console.error(\"Login error:\", err);\n      setError(\"An unexpected error occurred. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">\n            Welcome back\n          </CardTitle>\n          <CardDescription className=\"text-center\">\n            Sign in to your Shuffle & Sync account\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* OAuth Sign In */}\n          <Button\n            onClick={handleGoogleSignIn}\n            className=\"w-full flex items-center gap-2\"\n            variant=\"outline\"\n            data-testid=\"button-signin-google\"\n          >\n            <FaGoogle className=\"w-4 h-4\" />\n            Continue with Google\n          </Button>\n\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <Separator className=\"w-full\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-background px-2 text-muted-foreground\">\n                Or continue with\n              </span>\n            </div>\n          </div>\n\n          {/* Email/Password Sign In */}\n          {!isCredentialsLogin ? (\n            <Button\n              onClick={() => setIsCredentialsLogin(true)}\n              className=\"w-full flex items-center gap-2\"\n              variant=\"secondary\"\n              data-testid=\"button-signin-credentials\"\n            >\n              <Mail className=\"w-4 h-4\" />\n              Sign in with Email\n            </Button>\n          ) : (\n            <Form {...form}>\n              <form\n                onSubmit={form.handleSubmit(handleCredentialsLogin)}\n                className=\"space-y-4\"\n              >\n                {error && (\n                  <Alert variant=\"destructive\" data-testid=\"alert-login-error\">\n                    <AlertDescription>{error}</AlertDescription>\n                  </Alert>\n                )}\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"email\"\n                          placeholder=\"Enter your email\"\n                          data-testid=\"input-email\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"password\"\n                          placeholder=\"Enter your password\"\n                          data-testid=\"input-password\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex flex-col gap-2\">\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={isLoading}\n                    data-testid=\"button-signin-submit\"\n                  >\n                    {isLoading && (\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    )}\n                    {isLoading ? \"Signing in...\" : \"Sign In\"}\n                  </Button>\n\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setIsCredentialsLogin(false);\n                      setError(\"\");\n                      form.reset();\n                    }}\n                    data-testid=\"button-back-to-oauth\"\n                  >\n                    Back to OAuth options\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          )}\n\n          <div className=\"text-center space-y-2\">\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Don&apos;t have an account?{\" \"}\n              <Link\n                href=\"/auth/register\"\n                className=\"text-primary hover:underline font-medium\"\n                data-testid=\"link-register\"\n              >\n                Sign up\n              </Link>\n            </div>\n            <div className=\"text-sm\">\n              <Link\n                href=\"/auth/forgot-password\"\n                className=\"text-primary hover:underline\"\n                data-testid=\"link-forgot-password\"\n              >\n                Forgot your password?\n              </Link>\n            </div>\n          </div>\n\n          <div className=\"text-center text-xs text-gray-500 dark:text-gray-400\">\n            Join the TCG streaming community and coordinate your next\n            collaborative stream!\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/auth/verify-email.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":279,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8692,8804],"text":"\n              Didn&apos;t receive the email? Check your spam folder or request a new\n              one.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8692,8804],"text":"\n              Didn&lsquo;t receive the email? Check your spam folder or request a new\n              one.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8692,8804],"text":"\n              Didn&#39;t receive the email? Check your spam folder or request a new\n              one.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8692,8804],"text":"\n              Didn&rsquo;t receive the email? Check your spam folder or request a new\n              one.\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useCallback } from \"react\";\nimport { useDocumentTitle } from \"@/hooks/useDocumentTitle\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, Mail, CheckCircle, XCircle } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function VerifyEmail() {\n  useDocumentTitle(\"Verify Email - Shuffle & Sync\");\n\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isResending, setIsResending] = useState(false);\n  const [verificationStatus, setVerificationStatus] = useState<\n    \"pending\" | \"success\" | \"error\" | \"expired\"\n  >(\"pending\");\n  const [error, setError] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n\n  // Get token and email from URL params\n  const urlParams = new URLSearchParams(window.location.search);\n  const token = urlParams.get(\"token\");\n  const emailParam = urlParams.get(\"email\");\n\n  const verifyEmailToken = useCallback(async (verificationToken: string) => {\n    setIsLoading(true);\n    setError(\"\");\n\n    try {\n      const response = await fetch(\n        `/api/email/verify-email?token=${encodeURIComponent(verificationToken)}`,\n        {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        },\n      );\n\n      if (response.ok) {\n        setVerificationStatus(\"success\");\n        toast({\n          title: \"Email verified successfully!\",\n          description: \"You can now sign in to your account.\",\n        });\n\n        // Redirect to sign-in after 3 seconds\n        setTimeout(() => {\n          setLocation(\"/auth/signin?message=email_verified\");\n        }, 3000);\n      } else {\n        const errorData = await response.json();\n\n        if (\n          errorData.message?.includes(\"expired\") ||\n          errorData.message?.includes(\"invalid\")\n        ) {\n          setVerificationStatus(\"expired\");\n        } else {\n          setVerificationStatus(\"error\");\n          setError(errorData.message || \"Email verification failed.\");\n        }\n      }\n    } catch (err) {\n      console.error(\"Email verification error:\", err);\n      setVerificationStatus(\"error\");\n      setError(\"An unexpected error occurred. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  }, [toast, setLocation]);\n\n  useEffect(() => {\n    if (emailParam) {\n      setEmail(emailParam);\n    }\n\n    // If we have a token, attempt verification immediately\n    if (token) {\n      verifyEmailToken(token);\n    }\n  }, [token, emailParam, verifyEmailToken]);\n\n  const resendVerificationEmail = async () => {\n    if (!email) {\n      setError(\"Email address is required to resend verification.\");\n      return;\n    }\n\n    setIsResending(true);\n    setError(\"\");\n\n    try {\n      const response = await fetch(\"/api/email/resend-verification-email\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          email: email,\n        }),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Verification email sent!\",\n          description: \"Please check your inbox for the new verification link.\",\n        });\n        setVerificationStatus(\"pending\");\n      } else {\n        const errorData = await response.json();\n        setError(errorData.message || \"Failed to resend verification email.\");\n      }\n    } catch (err) {\n      console.error(\"Resend verification error:\", err);\n      setError(\"An unexpected error occurred. Please try again.\");\n    } finally {\n      setIsResending(false);\n    }\n  };\n\n  const renderContent = () => {\n    if (isLoading) {\n      return (\n        <div className=\"text-center space-y-4\">\n          <div className=\"flex justify-center\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n          </div>\n          <div>\n            <h3 className=\"text-lg font-medium\">Verifying your email...</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Please wait while we verify your email address.\n            </p>\n          </div>\n        </div>\n      );\n    }\n\n    if (verificationStatus === \"success\") {\n      return (\n        <div className=\"text-center space-y-4\">\n          <div className=\"flex justify-center\">\n            <CheckCircle className=\"h-12 w-12 text-green-500\" />\n          </div>\n          <div>\n            <h3 className=\"text-lg font-medium text-green-600\">\n              Email verified successfully!\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Your email address has been verified. You can now sign in to your\n              account.\n            </p>\n          </div>\n          <Button\n            onClick={() => setLocation(\"/auth/signin\")}\n            className=\"w-full\"\n            data-testid=\"button-goto-signin\"\n          >\n            Continue to Sign In\n          </Button>\n        </div>\n      );\n    }\n\n    if (verificationStatus === \"expired\") {\n      return (\n        <div className=\"text-center space-y-4\">\n          <div className=\"flex justify-center\">\n            <XCircle className=\"h-12 w-12 text-orange-500\" />\n          </div>\n          <div>\n            <h3 className=\"text-lg font-medium text-orange-600\">\n              Verification link expired\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              This verification link has expired or has already been used.\n            </p>\n          </div>\n\n          {email && (\n            <div className=\"space-y-2\">\n              <p className=\"text-sm text-muted-foreground\">\n                We can send you a new verification email to:{\" \"}\n                <strong>{email}</strong>\n              </p>\n              <Button\n                onClick={resendVerificationEmail}\n                disabled={isResending}\n                className=\"w-full\"\n                data-testid=\"button-resend-verification\"\n              >\n                {isResending && (\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                )}\n                {isResending ? \"Sending...\" : \"Send New Verification Email\"}\n              </Button>\n            </div>\n          )}\n        </div>\n      );\n    }\n\n    if (verificationStatus === \"error\") {\n      return (\n        <div className=\"text-center space-y-4\">\n          <div className=\"flex justify-center\">\n            <XCircle className=\"h-12 w-12 text-red-500\" />\n          </div>\n          <div>\n            <h3 className=\"text-lg font-medium text-red-600\">\n              Verification failed\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              We couldn&apos;t verify your email address.\n            </p>\n          </div>\n\n          {error && (\n            <Alert variant=\"destructive\" data-testid=\"alert-verification-error\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"flex flex-col gap-2\">\n            {email && (\n              <Button\n                onClick={resendVerificationEmail}\n                disabled={isResending}\n                variant=\"outline\"\n                className=\"w-full\"\n                data-testid=\"button-resend-verification\"\n              >\n                {isResending && (\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                )}\n                {isResending ? \"Sending...\" : \"Send New Verification Email\"}\n              </Button>\n            )}\n\n            <Button\n              onClick={() => setLocation(\"/auth/signin\")}\n              variant=\"ghost\"\n              className=\"w-full\"\n              data-testid=\"button-back-signin\"\n            >\n              Back to Sign In\n            </Button>\n          </div>\n        </div>\n      );\n    }\n\n    // Default state - no token provided\n    return (\n      <div className=\"text-center space-y-4\">\n        <div className=\"flex justify-center\">\n          <Mail className=\"h-12 w-12 text-primary\" />\n        </div>\n        <div>\n          <h3 className=\"text-lg font-medium\">Check your email</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            We&apos;ve sent you a verification link. Please check your email and\n            click the link to verify your account.\n          </p>\n        </div>\n\n        {email && (\n          <div className=\"space-y-2\">\n            <p className=\"text-sm text-muted-foreground\">\n              Didn't receive the email? Check your spam folder or request a new\n              one.\n            </p>\n            <Button\n              onClick={resendVerificationEmail}\n              disabled={isResending}\n              variant=\"outline\"\n              className=\"w-full\"\n              data-testid=\"button-resend-verification\"\n            >\n              {isResending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              {isResending ? \"Sending...\" : \"Resend Verification Email\"}\n            </Button>\n          </div>\n        )}\n\n        <Button\n          onClick={() => setLocation(\"/auth/signin\")}\n          variant=\"ghost\"\n          className=\"w-full\"\n          data-testid=\"button-back-signin\"\n        >\n          Back to Sign In\n        </Button>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">\n            Email Verification\n          </CardTitle>\n          <CardDescription className=\"text-center\">\n            Verify your email to complete your account setup\n          </CardDescription>\n        </CardHeader>\n        <CardContent>{renderContent()}</CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/calendar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2246,2249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2246,2249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":225,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":225,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7249,7252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7249,7252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":305,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":305,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9684,9687],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9684,9687],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":381,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":381,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11853,11856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11853,11856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":744,"column":24,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[26467,26494],"text":"\n                  Today&apos;s "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[26467,26494],"text":"\n                  Today&lsquo;s "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[26467,26494],"text":"\n                  Today&#39;s "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[26467,26494],"text":"\n                  Today&rsquo;s "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'toast'. Either include it or remove the dependency array.","line":221,"column":6,"nodeType":"ArrayExpression","endLine":221,"endColumn":42,"suggestions":[{"desc":"Update the dependencies array to be: [isAuthenticated, selectedCommunity, toast]","fix":{"range":[7104,7140],"text":"[isAuthenticated, selectedCommunity, toast]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { useDocumentTitle } from \"@/hooks/useDocumentTitle\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { useAuth } from \"@/features/auth\";\nimport { useCommunity } from \"@/features/communities\";\nimport { Header } from \"@/shared/components\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CalendarLoginPrompt from \"@/components/CalendarLoginPrompt\";\nimport { CalendarGrid } from \"@/components/calendar/CalendarGrid\";\nimport { CSVUploadDialog } from \"@/components/calendar/CSVUploadDialog\";\nimport { PodFieldsForm } from \"@/components/calendar/PodFieldsForm\";\nimport { PodStatusBadge } from \"@/components/calendar/PodStatusBadge\";\nimport { GraphicsGeneratorDialog } from \"@/components/calendar/GraphicsGeneratorDialog\";\nimport { addMonths, subMonths, format } from \"date-fns\";\nimport type { Event, Community } from \"@shared/schema\";\n\nconst EVENT_TYPES = [\n  {\n    id: \"tournament\",\n    name: \"Tournament\",\n    icon: \"fas fa-trophy\",\n    color: \"bg-yellow-500\",\n  },\n  {\n    id: \"convention\",\n    name: \"Convention\",\n    icon: \"fas fa-building\",\n    color: \"bg-purple-500\",\n  },\n  {\n    id: \"release\",\n    name: \"Product Release\",\n    icon: \"fas fa-box\",\n    color: \"bg-blue-500\",\n  },\n  {\n    id: \"game_pod\",\n    name: \"Game Pod\",\n    icon: \"fas fa-gamepad\",\n    color: \"bg-red-500\",\n  },\n  {\n    id: \"community\",\n    name: \"Community Event\",\n    icon: \"fas fa-users\",\n    color: \"bg-green-500\",\n  },\n];\n\ntype ExtendedEvent = Event & {\n  creator: any;\n  community: Community | null;\n  attendeeCount: number;\n  isUserAttending?: boolean;\n  mainPlayers?: number;\n  alternates?: number;\n  // Properties that don&apos;t exist in schema but are used by legacy code\n  // TODO: Update code to use startTime/endTime instead\n  date?: string;\n  time?: string;\n};\n\nexport default function Calendar() {\n  useDocumentTitle(\"Calendar\");\n\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { selectedCommunity, communityTheme } = useCommunity();\n  const { toast } = useToast();\n  const [viewMode, setViewMode] = useState(\"month\");\n  const [filterType, setFilterType] = useState(\"all\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isCSVUploadOpen, setIsCSVUploadOpen] = useState(false);\n  const [isGraphicsOpen, setIsGraphicsOpen] = useState(false);\n  const [selectedEventForGraphics, setSelectedEventForGraphics] = useState<{\n    id: string;\n    title: string;\n  } | null>(null);\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n\n  // Event creation form state\n  const [newEventTitle, setNewEventTitle] = useState(\"\");\n  const [newEventType, setNewEventType] = useState(\"\");\n  const [newEventDate, setNewEventDate] = useState(\"\");\n  const [newEventTime, setNewEventTime] = useState(\"\");\n  const [newEventLocation, setNewEventLocation] = useState(\"\");\n  const [newEventDescription, setNewEventDescription] = useState(\"\");\n  const [newEventCommunityId, setNewEventCommunityId] = useState(\"\");\n\n  // Pod-specific fields\n  const [newEventPlayerSlots, setNewEventPlayerSlots] = useState(4);\n  const [newEventAlternateSlots, setNewEventAlternateSlots] = useState(2);\n  const [newEventGameFormat, setNewEventGameFormat] = useState(\"\");\n  const [newEventPowerLevel, setNewEventPowerLevel] = useState(5);\n\n  // Auto-set community when creating new events\n  useEffect(() => {\n    if (selectedCommunity) {\n      // Use a microtask to avoid cascading renders\n      queueMicrotask(() => {\n        setNewEventCommunityId(selectedCommunity.id);\n      });\n    }\n  }, [selectedCommunity]);\n\n  // Fetch events for the selected community only\n  const {\n    data: events = [],\n  } = useQuery<ExtendedEvent[]>({\n    queryKey: [\n      \"/api/events\",\n      selectedCommunity?.id,\n      filterType !== \"all\" ? filterType : \"all\",\n      \"upcoming\",\n    ],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedCommunity?.id)\n        params.append(\"communityId\", selectedCommunity.id);\n      if (filterType !== \"all\") params.append(\"type\", filterType);\n      params.append(\"upcoming\", \"true\");\n\n      const response = await fetch(`/api/events?${params.toString()}`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch events\");\n      return response.json();\n    },\n    enabled: isAuthenticated && !!selectedCommunity, // Only fetch when authenticated and community selected\n  });\n\n  // Fetch communities - only for authenticated users\n  const { data: communities = [] } = useQuery<Community[]>({\n    queryKey: [\"/api/communities\"],\n    enabled: isAuthenticated, // Only fetch when authenticated\n  });\n\n  // Real-time WebSocket updates\n  useEffect(() => {\n    if (!isAuthenticated || !selectedCommunity) return;\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const ws = new WebSocket(`${protocol}//${window.location.host}`);\n\n    ws.onopen = () => {\n      // WebSocket connected for real-time event updates\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n\n        // Handle different message types\n        if (\n          [\n            \"EVENT_CREATED\",\n            \"EVENT_UPDATED\",\n            \"EVENT_DELETED\",\n            \"POD_STATUS_CHANGED\",\n          ].includes(message.type)\n        ) {\n          // Invalidate queries to refetch events\n          queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n\n          // Show toast for real-time updates\n          if (message.type === \"EVENT_CREATED\") {\n            toast({\n              title: \"New Event Created\",\n              description: \"Calendar updated with new event\",\n            });\n          } else if (message.type === \"POD_STATUS_CHANGED\") {\n            toast({\n              title: \"Pod Status Updated\",\n              description: \"A game pod status has changed\",\n            });\n          }\n        }\n      } catch (error) {\n        console.error(\"Error parsing WebSocket message:\", error);\n      }\n    };\n\n    ws.onerror = (error) => {\n      console.error(\"WebSocket error:\", error);\n    };\n\n    return () => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    };\n    // queryClient and toast are stable references and don't need to be in deps\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isAuthenticated, selectedCommunity]);\n\n  // Create event mutation\n  const createEventMutation = useMutation({\n    mutationFn: async (eventData: any) => {\n      const response = await fetch(\"/api/events\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(eventData),\n      });\n      if (!response.ok) throw new Error(\"Failed to create event\");\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Event created successfully!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      setIsCreateDialogOpen(false);\n      setEditingEventId(null);\n      // Reset form\n      setNewEventTitle(\"\");\n      setNewEventType(\"\");\n      setNewEventDate(\"\");\n      setNewEventTime(\"\");\n      setNewEventLocation(\"\");\n      setNewEventDescription(\"\");\n      setNewEventCommunityId(\"\");\n      setNewEventPlayerSlots(4);\n      setNewEventAlternateSlots(2);\n      setNewEventGameFormat(\"\");\n      setNewEventPowerLevel(5);\n    },\n    onError: () => {\n      toast({ title: \"Failed to create event\", variant: \"destructive\" });\n    },\n  });\n\n  // Join event mutation\n  const joinEventMutation = useMutation({\n    mutationFn: async ({\n      eventId,\n      isCurrentlyAttending,\n    }: {\n      eventId: string;\n      isCurrentlyAttending: boolean;\n    }) => {\n      const url = isCurrentlyAttending\n        ? `/api/events/${eventId}/leave`\n        : `/api/events/${eventId}/join`;\n      const method = isCurrentlyAttending ? \"DELETE\" : \"POST\";\n\n      const response = await fetch(url, {\n        method,\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body:\n          method === \"POST\"\n            ? JSON.stringify({ status: \"attending\" })\n            : undefined,\n      });\n      if (!response.ok)\n        throw new Error(\n          `Failed to ${isCurrentlyAttending ? \"leave\" : \"join\"} event`,\n        );\n      return response.json();\n    },\n    onSuccess: (_, { isCurrentlyAttending }) => {\n      toast({\n        title: isCurrentlyAttending\n          ? \"Left event successfully!\"\n          : \"Joined event successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n    },\n    onError: (_, { isCurrentlyAttending }) => {\n      toast({\n        title: `Failed to ${isCurrentlyAttending ? \"leave\" : \"join\"} event`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update event mutation\n  const updateEventMutation = useMutation({\n    mutationFn: async (eventData: any) => {\n      const { id, ...updateData } = eventData;\n      const response = await fetch(`/api/events/${id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(updateData),\n      });\n      if (!response.ok) throw new Error(\"Failed to update event\");\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Event updated successfully!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      setIsCreateDialogOpen(false);\n      setEditingEventId(null);\n      // Reset form\n      setNewEventTitle(\"\");\n      setNewEventType(\"\");\n      setNewEventDate(\"\");\n      setNewEventTime(\"\");\n      setNewEventLocation(\"\");\n      setNewEventDescription(\"\");\n      setNewEventCommunityId(\"\");\n      setNewEventPlayerSlots(4);\n      setNewEventAlternateSlots(2);\n      setNewEventGameFormat(\"\");\n      setNewEventPowerLevel(5);\n    },\n    onError: () => {\n      toast({ title: \"Failed to update event\", variant: \"destructive\" });\n    },\n  });\n\n  // Delete event mutation\n  const deleteEventMutation = useMutation({\n    mutationFn: async (eventId: string) => {\n      const response = await fetch(`/api/events/${eventId}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to delete event\");\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Event deleted successfully!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete event\", variant: \"destructive\" });\n    },\n  });\n\n  const handleCreateEvent = () => {\n    if (\n      !newEventTitle ||\n      !newEventType ||\n      !newEventDate ||\n      !newEventTime ||\n      !newEventLocation\n    ) {\n      toast({\n        title: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!selectedCommunity?.id) {\n      toast({\n        title: \"Please select a community first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const eventData: any = {\n      title: newEventTitle,\n      type: newEventType,\n      date: newEventDate,\n      time: newEventTime,\n      location: newEventLocation,\n      description: newEventDescription,\n      communityId: selectedCommunity.id,\n    };\n\n    // Add pod-specific fields if event type is game_pod\n    if (newEventType === \"game_pod\") {\n      eventData.playerSlots = newEventPlayerSlots;\n      eventData.alternateSlots = newEventAlternateSlots;\n      eventData.gameFormat = newEventGameFormat;\n      eventData.powerLevel = newEventPowerLevel;\n    }\n\n    if (editingEventId) {\n      // Update existing event\n      updateEventMutation.mutate({\n        id: editingEventId,\n        ...eventData,\n      });\n    } else {\n      // Create new event\n      createEventMutation.mutate(eventData);\n    }\n  };\n\n  const handleAttendEvent = (\n    eventId: string,\n    isCurrentlyAttending: boolean,\n  ) => {\n    joinEventMutation.mutate({ eventId, isCurrentlyAttending });\n  };\n\n  const handleEditEvent = (event: ExtendedEvent) => {\n    // Pre-populate form with existing event data\n    setNewEventTitle(event.title);\n    setNewEventType(event.type);\n    setNewEventDate(event.date || \"\"); // Ensure not null\n    setNewEventTime(event.time || \"\"); // Ensure not null\n    setNewEventLocation(event.location || \"\"); // Ensure not null\n    setNewEventDescription(event.description || \"\");\n    setNewEventCommunityId(event.communityId || \"\");\n    setEditingEventId(event.id);\n    setIsCreateDialogOpen(true);\n  };\n\n  const handleDeleteEvent = (eventId: string) => {\n    if (\n      confirm(\n        \"Are you sure you want to delete this event? This action cannot be undone.\",\n      )\n    ) {\n      deleteEventMutation.mutate(eventId);\n    }\n  };\n\n  // Add state for editing\n  const [editingEventId, setEditingEventId] = useState<string | null>(null);\n\n  // Events are already filtered by community in the API query, just filter by type\n  const filteredEvents = events.filter((event) => {\n    if (filterType !== \"all\" && event.type !== filterType) return false;\n    return true;\n  });\n\n  const todayDate = new Date().toISOString().split(\"T\")[0] ?? \"\";\n  const todaysEvents = events.filter(\n    (event) => event.date && event.date === todayDate,\n  );\n  const upcomingEvents = events\n    .filter((event) => event.date && event.date > todayDate)\n    .slice(0, 5);\n\n  // Show login prompt for unauthenticated users (after all hooks are called)\n  if (!isLoading && !isAuthenticated) {\n    return <CalendarLoginPrompt />;\n  }\n\n  // Show loading state while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600 dark:text-gray-300\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Header Section */}\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h1 className=\"text-4xl lg:text-5xl font-bold gradient-text\">\n                Event Calendar\n              </h1>\n              <p className=\"text-xl text-muted-foreground mt-2\">\n                Stay updated with tournaments, conventions, releases, and\n                community events\n              </p>\n              {selectedCommunity && (\n                <div className=\"flex items-center space-x-2 mt-4\">\n                  <Badge\n                    className=\"flex items-center space-x-2 px-3 py-1\"\n                    style={{\n                      backgroundColor: selectedCommunity.themeColor + \"20\",\n                      color: selectedCommunity.themeColor,\n                      borderColor: selectedCommunity.themeColor,\n                    }}\n                  >\n                    <div\n                      className=\"w-2 h-2 rounded-full\"\n                      style={{ backgroundColor: selectedCommunity.themeColor }}\n                    ></div>\n                    <span>Filtering by {selectedCommunity.displayName}</span>\n                  </Badge>\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex flex-col items-end space-y-2\">\n              {!selectedCommunity && (\n                <p className=\"text-sm text-muted-foreground\">\n                  Select a specific realm to create events\n                </p>\n              )}\n              <div className=\"flex space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setIsCSVUploadOpen(true)}\n                  disabled={!selectedCommunity}\n                >\n                  <i className=\"fas fa-file-csv mr-2\"></i>\n                  Bulk Upload\n                </Button>\n                <Dialog\n                  open={isCreateDialogOpen}\n                  onOpenChange={setIsCreateDialogOpen}\n                >\n                  <DialogTrigger asChild>\n                    <Button\n                      className=\"bg-primary hover:bg-primary/90\"\n                      data-testid=\"button-create-event\"\n                      disabled={!selectedCommunity}\n                    >\n                      <i className=\"fas fa-plus mr-2\"></i>\n                      Create Event\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-2xl\">\n                    <DialogHeader>\n                      <DialogTitle>\n                        {editingEventId ? \"Edit Event\" : \"Create New Event\"}\n                      </DialogTitle>\n                      <DialogDescription>\n                        Schedule a new gaming event, tournament, or community\n                        gathering\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"space-y-6 mt-6\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"event-title\">Event Title</Label>\n                        <Input\n                          id=\"event-title\"\n                          placeholder=\"Enter event title\"\n                          value={newEventTitle}\n                          onChange={(e) => setNewEventTitle(e.target.value)}\n                          data-testid=\"input-event-title\"\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"event-type\">Event Type</Label>\n                          <Select\n                            value={newEventType}\n                            onValueChange={setNewEventType}\n                          >\n                            <SelectTrigger data-testid=\"select-event-type\">\n                              <SelectValue placeholder=\"Select event type\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {EVENT_TYPES.map((type) => (\n                                <SelectItem key={type.id} value={type.id}>\n                                  <div className=\"flex items-center space-x-2\">\n                                    <i className={`${type.icon} text-sm`}></i>\n                                    <span>{type.name}</span>\n                                  </div>\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"event-community\">Community</Label>\n                          <Select\n                            value={newEventCommunityId}\n                            onValueChange={setNewEventCommunityId}\n                          >\n                            <SelectTrigger data-testid=\"select-event-community\">\n                              <SelectValue placeholder=\"Select community (optional)\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"none\">\n                                No specific community\n                              </SelectItem>\n                              {communities.map((community) => (\n                                <SelectItem\n                                  key={community.id}\n                                  value={community.id}\n                                >\n                                  {community.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"event-location\">Location</Label>\n                        <Input\n                          id=\"event-location\"\n                          placeholder=\"Event location or 'Online'\"\n                          value={newEventLocation}\n                          onChange={(e) => setNewEventLocation(e.target.value)}\n                          data-testid=\"input-event-location\"\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"event-date\">Date</Label>\n                          <Input\n                            id=\"event-date\"\n                            type=\"date\"\n                            value={newEventDate}\n                            onChange={(e) => setNewEventDate(e.target.value)}\n                            data-testid=\"input-event-date\"\n                          />\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"event-time\">Time</Label>\n                          <Input\n                            id=\"event-time\"\n                            type=\"time\"\n                            value={newEventTime}\n                            onChange={(e) => setNewEventTime(e.target.value)}\n                            data-testid=\"input-event-time\"\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"event-description\">Description</Label>\n                        <Textarea\n                          id=\"event-description\"\n                          placeholder=\"Describe the event, rules, format, prizes, etc.\"\n                          value={newEventDescription}\n                          onChange={(e) =>\n                            setNewEventDescription(e.target.value)\n                          }\n                          data-testid=\"textarea-event-description\"\n                        />\n                      </div>\n\n                      {/* Pod-specific fields for game_pod events */}\n                      {newEventType === \"game_pod\" && (\n                        <PodFieldsForm\n                          playerSlots={newEventPlayerSlots}\n                          setPlayerSlots={setNewEventPlayerSlots}\n                          alternateSlots={newEventAlternateSlots}\n                          setAlternateSlots={setNewEventAlternateSlots}\n                          gameFormat={newEventGameFormat}\n                          setGameFormat={setNewEventGameFormat}\n                          powerLevel={newEventPowerLevel}\n                          setPowerLevel={setNewEventPowerLevel}\n                        />\n                      )}\n\n                      <div className=\"flex justify-end space-x-3\">\n                        <Button\n                          variant=\"outline\"\n                          onClick={() => setIsCreateDialogOpen(false)}\n                          data-testid=\"button-cancel-event\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button\n                          onClick={handleCreateEvent}\n                          disabled={\n                            !newEventTitle ||\n                            !newEventType ||\n                            !newEventDate ||\n                            !selectedCommunity\n                          }\n                          data-testid=\"button-submit-event\"\n                        >\n                          {editingEventId ? \"Update Event\" : \"Create Event\"}\n                        </Button>\n                      </div>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </div>\n          </div>\n\n          {/* CSV Upload Dialog */}\n          {selectedCommunity && (\n            <CSVUploadDialog\n              isOpen={isCSVUploadOpen}\n              onClose={() => setIsCSVUploadOpen(false)}\n              onSuccess={() => {\n                queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n              }}\n              communityId={selectedCommunity.id}\n            />\n          )}\n\n          {/* Graphics Generator Dialog */}\n          {selectedEventForGraphics && (\n            <GraphicsGeneratorDialog\n              isOpen={isGraphicsOpen}\n              onClose={() => {\n                setIsGraphicsOpen(false);\n                setSelectedEventForGraphics(null);\n              }}\n              eventId={selectedEventForGraphics.id}\n              eventTitle={selectedEventForGraphics.title}\n            />\n          )}\n\n          <Tabs defaultValue=\"overview\" className=\"space-y-8\">\n            <TabsList className=\"grid w-full grid-cols-3 max-w-md mx-auto\">\n              <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">\n                Overview\n              </TabsTrigger>\n              <TabsTrigger value=\"calendar\" data-testid=\"tab-calendar\">\n                Calendar\n              </TabsTrigger>\n              <TabsTrigger value=\"my-events\" data-testid=\"tab-my-events\">\n                My Events\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Overview Tab */}\n            <TabsContent value=\"overview\" className=\"space-y-8\">\n              {/* Today's Events */}\n              <div>\n                <h2 className=\"text-2xl font-bold mb-4 community-heading\">\n                  Today's {communityTheme.terminology.events}\n                </h2>\n                {todaysEvents.length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {todaysEvents.map((event) => {\n                      const eventType = EVENT_TYPES.find(\n                        (t) => t.id === event.type,\n                      );\n                      return (\n                        <Card\n                          key={event.id}\n                          className=\"border-l-4 border-l-orange-500\"\n                        >\n                          <CardHeader className=\"pb-3\">\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center space-x-2\">\n                                <div\n                                  className={`w-8 h-8 ${eventType?.color} rounded-lg flex items-center justify-center`}\n                                >\n                                  <i\n                                    className={`${eventType?.icon} text-white text-sm`}\n                                  ></i>\n                                </div>\n                                <Badge variant=\"outline\">\n                                  {event.community?.name || \"All Communities\"}\n                                </Badge>\n                              </div>\n                              <span className=\"text-sm text-muted-foreground\">\n                                {event.time}\n                              </span>\n                            </div>\n                            <CardTitle className=\"text-lg\">\n                              {event.title}\n                            </CardTitle>\n                          </CardHeader>\n                          <CardContent>\n                            <p className=\"text-sm text-muted-foreground mb-3\">\n                              {event.description}\n                            </p>\n                            <div className=\"flex items-center justify-between text-sm\">\n                              <span>📍 {event.location}</span>\n                              <span>\n                                👥{\" \"}\n                                {event.attendeeCount?.toLocaleString() || \"0\"}\n                              </span>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                  </div>\n                ) : (\n                  <Card className=\"text-center py-12\">\n                    <CardContent>\n                      <i className=\"fas fa-calendar-day text-4xl text-muted-foreground mb-4\"></i>\n                      <p className=\"text-muted-foreground\">\n                        No events scheduled for today\n                      </p>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n\n              {/* Upcoming Events */}\n              <div>\n                <h2 className=\"text-2xl font-bold mb-4 community-heading\">\n                  Upcoming {communityTheme.terminology.events}\n                </h2>\n                <div className=\"space-y-4\">\n                  {upcomingEvents.map((event) => {\n                    const eventType = EVENT_TYPES.find(\n                      (t) => t.id === event.type,\n                    );\n                    return (\n                      <Card\n                        key={event.id}\n                        className=\"hover:border-primary/50 transition-colors\"\n                      >\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div\n                                className={`w-12 h-12 ${eventType?.color} rounded-lg flex items-center justify-center`}\n                              >\n                                <i\n                                  className={`${eventType?.icon} text-white text-lg`}\n                                ></i>\n                              </div>\n                              <div>\n                                <h3 className=\"font-semibold text-lg\">\n                                  {event.title}\n                                </h3>\n                                <div className=\"flex items-center space-x-4 text-sm text-muted-foreground mb-2\">\n                                  <span>\n                                    📅{\" \"}\n                                    {event.date\n                                      ? new Date(\n                                          event.date,\n                                        ).toLocaleDateString()\n                                      : format(\n                                          new Date(event.startTime),\n                                          \"PPP\",\n                                        )}\n                                  </span>\n                                  <span>\n                                    🕒{\" \"}\n                                    {event.time ||\n                                      (event.startTime &&\n                                        format(\n                                          new Date(event.startTime),\n                                          \"HH:mm\",\n                                        ))}\n                                  </span>\n                                  <span>📍 {event.location}</span>\n                                  <Badge variant=\"outline\">\n                                    {event.community?.name || \"All Communities\"}\n                                  </Badge>\n                                </div>\n                                {/* Pod status badge for game_pod events */}\n                                {event.type === \"game_pod\" && (\n                                  <PodStatusBadge\n                                    event={event}\n                                    mainPlayers={event.mainPlayers || 0}\n                                    alternates={event.alternates || 0}\n                                  />\n                                )}\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"text-right text-sm\">\n                                <div className=\"font-medium\">\n                                  {event.attendeeCount?.toLocaleString() || \"0\"}\n                                </div>\n                                <div className=\"text-muted-foreground\">\n                                  attending\n                                </div>\n                              </div>\n                              <div className=\"flex space-x-2\">\n                                {user &&\n                                  (user.id === event.creator?.id ||\n                                    user.id === event.hostId) && (\n                                    <>\n                                      <Button\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={() => {\n                                          setSelectedEventForGraphics({\n                                            id: event.id,\n                                            title: event.title,\n                                          });\n                                          setIsGraphicsOpen(true);\n                                        }}\n                                      >\n                                        <i className=\"fas fa-image mr-2\"></i>\n                                        Generate Graphic\n                                      </Button>\n                                      <Button\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={() => handleEditEvent(event)}\n                                        data-testid={`button-edit-${event.id}`}\n                                      >\n                                        <i className=\"fas fa-edit mr-2\"></i>\n                                        Edit\n                                      </Button>\n                                      <Button\n                                        variant=\"destructive\"\n                                        size=\"sm\"\n                                        onClick={() =>\n                                          handleDeleteEvent(event.id)\n                                        }\n                                        data-testid={`button-delete-${event.id}`}\n                                      >\n                                        <i className=\"fas fa-trash mr-2\"></i>\n                                        Delete\n                                      </Button>\n                                    </>\n                                  )}\n                                {user ? (\n                                  <Button\n                                    variant={\n                                      event.isUserAttending\n                                        ? \"secondary\"\n                                        : \"default\"\n                                    }\n                                    size=\"sm\"\n                                    onClick={() =>\n                                      handleAttendEvent(\n                                        event.id,\n                                        event.isUserAttending || false,\n                                      )\n                                    }\n                                    data-testid={`button-attend-${event.id}`}\n                                  >\n                                    {event.isUserAttending\n                                      ? \"Leave Event\"\n                                      : \"Join Event\"}\n                                  </Button>\n                                ) : (\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() =>\n                                      toast({\n                                        title: \"Please log in to join events\",\n                                        variant: \"destructive\",\n                                      })\n                                    }\n                                    data-testid={`button-login-required-${event.id}`}\n                                  >\n                                    <i className=\"fas fa-sign-in-alt mr-2\"></i>\n                                    Login to Join\n                                  </Button>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </div>\n            </TabsContent>\n\n            {/* Calendar Tab */}\n            <TabsContent value=\"calendar\">\n              <div className=\"space-y-6\">\n                {/* Filters */}\n                <div className=\"flex flex-wrap gap-4 items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <Select value={filterType} onValueChange={setFilterType}>\n                      <SelectTrigger\n                        className=\"w-48\"\n                        data-testid=\"select-filter-type\"\n                      >\n                        <SelectValue placeholder=\"Filter by type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Types</SelectItem>\n                        {EVENT_TYPES.map((type) => (\n                          <SelectItem key={type.id} value={type.id}>\n                            {type.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n\n                    <div className=\"text-sm text-muted-foreground bg-muted/30 px-3 py-2 rounded-md border\">\n                      <span className=\"font-medium\">\n                        {selectedCommunity?.name || \"Unknown Community\"}\n                      </span>{\" \"}\n                      {communityTheme.terminology.events}\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant={viewMode === \"week\" ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setViewMode(\"week\")}\n                    >\n                      Week\n                    </Button>\n                    <Button\n                      variant={viewMode === \"month\" ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setViewMode(\"month\")}\n                    >\n                      Month\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Calendar Grid */}\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <CardTitle>\n                      {communityTheme.terminology.events} Calendar -{\" \"}\n                      {format(currentMonth, \"MMMM yyyy\")}\n                    </CardTitle>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() =>\n                          setCurrentMonth(subMonths(currentMonth, 1))\n                        }\n                      >\n                        <i className=\"fas fa-chevron-left\"></i>\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setCurrentMonth(new Date())}\n                      >\n                        Today\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() =>\n                          setCurrentMonth(addMonths(currentMonth, 1))\n                        }\n                      >\n                        <i className=\"fas fa-chevron-right\"></i>\n                      </Button>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <CalendarGrid\n                      currentDate={currentMonth}\n                      events={filteredEvents}\n                      onDateClick={(_date) => {\n                        // Could set selected date or open date view here\n                        // Functionality not yet implemented\n                      }}\n                      onEventClick={(_event) => {\n                        // Could open event details dialog here\n                        // Functionality not yet implemented\n                      }}\n                    />\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* My Events Tab */}\n            <TabsContent value=\"my-events\">\n              <div className=\"space-y-6\">\n                <h2 className=\"text-2xl font-bold community-heading\">\n                  My {communityTheme.terminology.events}\n                </h2>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <i className=\"fas fa-check-circle text-green-500\"></i>\n                        <span>Attending</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {events\n                        .filter((e) => e.isUserAttending)\n                        .map((event) => (\n                          <div\n                            key={event.id}\n                            className=\"flex items-center justify-between p-3 border rounded-lg mb-2\"\n                          >\n                            <div>\n                              <div className=\"font-medium\">{event.title}</div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                {event.date\n                                  ? new Date(event.date).toLocaleDateString()\n                                  : format(\n                                      new Date(event.startTime),\n                                      \"PPP\",\n                                    )}{\" \"}\n                                at{\" \"}\n                                {event.time ||\n                                  (event.startTime &&\n                                    format(new Date(event.startTime), \"HH:mm\"))}\n                              </div>\n                            </div>\n                            <Badge variant=\"secondary\">Attending</Badge>\n                          </div>\n                        ))}\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <i className=\"fas fa-calendar-plus text-primary\"></i>\n                        <span>Created by Me</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-center py-8\">\n                        <i className=\"fas fa-calendar-day text-4xl text-muted-foreground mb-4\"></i>\n                        <p className=\"text-muted-foreground mb-4\">\n                          You haven&apos;t created any events yet\n                        </p>\n                        <Dialog\n                          open={isCreateDialogOpen}\n                          onOpenChange={setIsCreateDialogOpen}\n                        >\n                          <DialogTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              disabled={!selectedCommunity}\n                            >\n                              <i className=\"fas fa-plus mr-2\"></i>\n                              Create Your First Event\n                            </Button>\n                          </DialogTrigger>\n                        </Dialog>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/community-forum.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Separator' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ScrollArea' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'communityTheme' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":87,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5044,5047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5044,5047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { useDocumentTitle } from \"@/hooks/useDocumentTitle\";\nimport { Header } from \"@/shared/components\";\nimport { Footer } from \"@/shared/components\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useAuth } from \"@/features/auth\";\nimport { useCommunity } from \"@/features/communities\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { User, Community, ForumPost, ForumReply } from \"@shared/schema\";\n\nconst FORUM_CATEGORIES = [\n  {\n    id: \"strategy\",\n    name: \"Strategy & Tactics\",\n    icon: \"fas fa-chess\",\n    color: \"bg-blue-500\",\n  },\n  {\n    id: \"deck-tech\",\n    name: \"Deck Tech\",\n    icon: \"fas fa-layer-group\",\n    color: \"bg-purple-500\",\n  },\n  {\n    id: \"stream-tips\",\n    name: \"Streaming Tips\",\n    icon: \"fas fa-video\",\n    color: \"bg-red-500\",\n  },\n  {\n    id: \"collaboration\",\n    name: \"Collaboration\",\n    icon: \"fas fa-handshake\",\n    color: \"bg-green-500\",\n  },\n  {\n    id: \"general\",\n    name: \"General Discussion\",\n    icon: \"fas fa-comments\",\n    color: \"bg-gray-500\",\n  },\n];\n\ntype ExtendedForumPost = ForumPost & {\n  author: User;\n  community: Community;\n  replyCount: number;\n  likeCount: number;\n  isLiked?: boolean;\n};\n\ntype ExtendedForumReply = ForumReply & {\n  author: User;\n  isLiked?: boolean;\n};\n\nexport default function CommunityForum() {\n  useDocumentTitle(\"Community Forum\");\n\n  const { user } = useAuth();\n  const { selectedCommunity, communityTheme } = useCommunity();\n  const { toast } = useToast();\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [selectedPost, setSelectedPost] = useState<string | null>(null);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n\n  // New post form state\n  const [newPostTitle, setNewPostTitle] = useState(\"\");\n  const [newPostCategory, setNewPostCategory] = useState(\"\");\n  const [newPostContent, setNewPostContent] = useState(\"\");\n\n  // Reply form state\n  const [replyContent, setReplyContent] = useState(\"\");\n\n  // Fetch forum posts for selected community\n  const {\n    data: posts = [],\n    isLoading: postsLoading,\n    refetch: refetchPosts,\n  } = useQuery<ExtendedForumPost[]>({\n    queryKey: [\"/api/forum/posts\", selectedCommunity?.id, selectedCategory],\n    queryFn: async () => {\n      if (!selectedCommunity) return [];\n      const params = new URLSearchParams({\n        communityId: selectedCommunity.id,\n        ...(selectedCategory !== \"all\" && { category: selectedCategory }),\n      });\n      const response = await fetch(`/api/forum/posts?${params}`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch posts\");\n      return response.json();\n    },\n    enabled: !!selectedCommunity,\n  });\n\n  // Fetch detailed post when one is selected\n  const {\n    data: currentPost,\n    isLoading: postLoading,\n    refetch: refetchCurrentPost,\n  } = useQuery<ExtendedForumPost>({\n    queryKey: [\"/api/forum/posts\", selectedPost],\n    queryFn: async () => {\n      if (!selectedPost || !user) return null;\n      const params = new URLSearchParams({ userId: user.id });\n      const response = await fetch(\n        `/api/forum/posts/${selectedPost}?${params}`,\n        { credentials: \"include\" },\n      );\n      if (!response.ok) throw new Error(\"Failed to fetch post\");\n      return response.json();\n    },\n    enabled: !!selectedPost && !!user,\n  });\n\n  // Fetch replies for current post\n  const {\n    data: replies = [],\n    isLoading: repliesLoading,\n    refetch: refetchReplies,\n  } = useQuery<ExtendedForumReply[]>({\n    queryKey: [\"/api/forum/posts\", selectedPost, \"replies\"],\n    queryFn: async () => {\n      if (!selectedPost || !user) return [];\n      const params = new URLSearchParams({ userId: user.id });\n      const response = await fetch(\n        `/api/forum/posts/${selectedPost}/replies?${params}`,\n        { credentials: \"include\" },\n      );\n      if (!response.ok) throw new Error(\"Failed to fetch replies\");\n      return response.json();\n    },\n    enabled: !!selectedPost && !!user,\n  });\n\n  // Create forum post mutation\n  const createPostMutation = useMutation({\n    mutationFn: async (postData: any) => {\n      const response = await fetch(\"/api/forum/posts\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(postData),\n      });\n      if (!response.ok) throw new Error(\"Failed to create post\");\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Post created successfully!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/forum/posts\"] });\n      setIsCreateDialogOpen(false);\n      setNewPostTitle(\"\");\n      setNewPostCategory(\"\");\n      setNewPostContent(\"\");\n    },\n    onError: () => {\n      toast({ title: \"Failed to create post\", variant: \"destructive\" });\n    },\n  });\n\n  // Create reply mutation\n  const createReplyMutation = useMutation({\n    mutationFn: async ({\n      postId,\n      content,\n    }: {\n      postId: string;\n      content: string;\n    }) => {\n      const response = await fetch(`/api/forum/posts/${postId}/replies`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ content }),\n      });\n      if (!response.ok) throw new Error(\"Failed to create reply\");\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Reply posted successfully!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/forum/posts\"] });\n      setReplyContent(\"\");\n      refetchReplies();\n      refetchPosts();\n    },\n    onError: () => {\n      toast({ title: \"Failed to post reply\", variant: \"destructive\" });\n    },\n  });\n\n  // Like post mutation\n  const likePostMutation = useMutation({\n    mutationFn: async ({\n      postId,\n      isCurrentlyLiked,\n    }: {\n      postId: string;\n      isCurrentlyLiked: boolean;\n    }) => {\n      const url = `/api/forum/posts/${postId}/like`;\n      const method = isCurrentlyLiked ? \"DELETE\" : \"POST\";\n\n      const response = await fetch(url, {\n        method,\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n      });\n      if (!response.ok)\n        throw new Error(\n          `Failed to ${isCurrentlyLiked ? \"unlike\" : \"like\"} post`,\n        );\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/forum/posts\"] });\n      refetchCurrentPost();\n    },\n  });\n\n  const handleCreatePost = () => {\n    if (!selectedCommunity) {\n      toast({\n        title: \"Please select a community first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!newPostTitle || !newPostCategory || !newPostContent) {\n      toast({ title: \"Please fill in all fields\", variant: \"destructive\" });\n      return;\n    }\n\n    createPostMutation.mutate({\n      title: newPostTitle,\n      category: newPostCategory,\n      content: newPostContent,\n      communityId: selectedCommunity.id,\n    });\n  };\n\n  const handleReply = () => {\n    if (!selectedPost || !replyContent.trim()) {\n      toast({ title: \"Please enter a reply\", variant: \"destructive\" });\n      return;\n    }\n\n    createReplyMutation.mutate({\n      postId: selectedPost,\n      content: replyContent,\n    });\n  };\n\n  const handleLike = (post: ExtendedForumPost) => {\n    if (!user) {\n      toast({ title: \"Please sign in to like posts\", variant: \"destructive\" });\n      return;\n    }\n\n    likePostMutation.mutate({\n      postId: post.id,\n      isCurrentlyLiked: !!post.isLiked,\n    });\n  };\n\n  const getCategoryIcon = (category: string) => {\n    const cat = FORUM_CATEGORIES.find((c) => c.id === category);\n    return cat?.icon || \"fas fa-comments\";\n  };\n\n  const getCategoryColor = (category: string) => {\n    const cat = FORUM_CATEGORIES.find((c) => c.id === category);\n    return cat?.color || \"bg-gray-500\";\n  };\n\n  if (!selectedCommunity) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <main className=\"container mx-auto px-4 py-16\">\n          <div className=\"max-w-2xl mx-auto text-center\">\n            <h1 className=\"text-3xl font-bold mb-4\">Community Forum</h1>\n            <p className=\"text-muted-foreground mb-8\">\n              Please select a community from the navigation to view its forum.\n            </p>\n            <Button\n              onClick={() => (window.location.href = \"/\")}\n              data-testid=\"button-back-home\"\n            >\n              <i className=\"fas fa-home mr-2\"></i>\n              Back to Home\n            </Button>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (selectedPost) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n\n        <main className=\"container mx-auto px-4 py-8\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Back button */}\n            <Button\n              variant=\"ghost\"\n              onClick={() => setSelectedPost(null)}\n              className=\"mb-6\"\n              data-testid=\"button-back-to-forum\"\n            >\n              <i className=\"fas fa-arrow-left mr-2\"></i>\n              Back to Forum\n            </Button>\n\n            {/* Post details */}\n            {postLoading ? (\n              <div className=\"flex justify-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n              </div>\n            ) : currentPost ? (\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <Badge\n                            className={`${getCategoryColor(currentPost.category)} text-white`}\n                          >\n                            <i\n                              className={`${getCategoryIcon(currentPost.category)} mr-1`}\n                            ></i>\n                            {FORUM_CATEGORIES.find(\n                              (c) => c.id === currentPost.category,\n                            )?.name || currentPost.category}\n                          </Badge>\n                          {currentPost.isPinned && (\n                            <Badge variant=\"secondary\">\n                              <i className=\"fas fa-thumbtack mr-1\"></i>\n                              Pinned\n                            </Badge>\n                          )}\n                        </div>\n                        <h1 className=\"text-2xl font-bold\">\n                          {currentPost.title}\n                        </h1>\n                        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                          <div className=\"flex items-center gap-2\">\n                            <Avatar className=\"h-6 w-6\">\n                              <AvatarImage\n                                src={\n                                  currentPost.author.profileImageUrl ||\n                                  undefined\n                                }\n                              />\n                              <AvatarFallback className=\"text-xs\">\n                                {(currentPost.author.firstName ||\n                                  currentPost.author.username ||\n                                  currentPost.author\n                                    .email)?.[0]?.toUpperCase() || \"U\"}\n                              </AvatarFallback>\n                            </Avatar>\n                            <span>\n                              {currentPost.author.firstName ||\n                                currentPost.author.username ||\n                                currentPost.author.email}\n                            </span>\n                          </div>\n                          <span>•</span>\n                          <span>\n                            {formatDistanceToNow(\n                              currentPost.createdAt || new Date(),\n                            )}{\" \"}\n                            ago\n                          </span>\n                          <span>•</span>\n                          <span>{currentPost.viewCount} views</span>\n                        </div>\n                      </div>\n\n                      <Button\n                        variant={currentPost.isLiked ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => handleLike(currentPost)}\n                        disabled={!user || likePostMutation.isPending}\n                        data-testid=\"button-like-post\"\n                      >\n                        <i\n                          className={`fas fa-heart mr-1 ${currentPost.isLiked ? \"text-red-500\" : \"\"}`}\n                        ></i>\n                        {currentPost.likeCount}\n                      </Button>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"prose prose-sm max-w-none dark:prose-invert\">\n                      {currentPost.content\n                        .split(\"\\n\")\n                        .map((paragraph: string, index: number) => (\n                          <p key={index}>{paragraph}</p>\n                        ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Replies section */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <i className=\"fas fa-comments\"></i>\n                      Replies ({replies.length})\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {/* Reply form */}\n                    {user && (\n                      <div className=\"border-b pb-4\">\n                        <div className=\"flex gap-3\">\n                          <Avatar className=\"h-8 w-8\">\n                            <AvatarImage\n                              src={user.profileImageUrl || undefined}\n                            />\n                            <AvatarFallback className=\"text-xs\">\n                              {(user.firstName ||\n                                user.username ||\n                                user.email)?.[0]?.toUpperCase() || \"U\"}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1 space-y-2\">\n                            <Textarea\n                              placeholder=\"Write your reply...\"\n                              value={replyContent}\n                              onChange={(e) => setReplyContent(e.target.value)}\n                              className=\"min-h-[80px]\"\n                              data-testid=\"textarea-reply-content\"\n                            />\n                            <Button\n                              onClick={handleReply}\n                              disabled={\n                                !replyContent.trim() ||\n                                createReplyMutation.isPending\n                              }\n                              data-testid=\"button-post-reply\"\n                            >\n                              {createReplyMutation.isPending\n                                ? \"Posting...\"\n                                : \"Post Reply\"}\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Replies list */}\n                    {repliesLoading ? (\n                      <div className=\"flex justify-center py-4\">\n                        <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n                      </div>\n                    ) : replies.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {replies.map((reply) => (\n                          <div\n                            key={reply.id}\n                            className=\"flex gap-3 p-4 rounded-lg bg-muted/50\"\n                          >\n                            <Avatar className=\"h-8 w-8\">\n                              <AvatarImage\n                                src={reply.author.profileImageUrl || undefined}\n                              />\n                              <AvatarFallback className=\"text-xs\">\n                                {(reply.author.firstName ||\n                                  reply.author.username ||\n                                  reply.author.email)?.[0]?.toUpperCase() ||\n                                  \"U\"}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-2\">\n                                <span className=\"font-medium\">\n                                  {reply.author.firstName ||\n                                    reply.author.username ||\n                                    reply.author.email}\n                                </span>\n                                <span className=\"text-xs text-muted-foreground\">\n                                  {formatDistanceToNow(\n                                    reply.createdAt || new Date(),\n                                  )}{\" \"}\n                                  ago\n                                </span>\n                              </div>\n                              <div className=\"prose prose-sm max-w-none dark:prose-invert\">\n                                {reply.content\n                                  .split(\"\\n\")\n                                  .map((paragraph: string, index: number) => (\n                                    <p key={index}>{paragraph}</p>\n                                  ))}\n                              </div>\n                              <div className=\"flex items-center gap-2 mt-2\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"h-8 px-2 text-xs\"\n                                  data-testid={`button-like-reply-${reply.id}`}\n                                >\n                                  <i className=\"fas fa-heart mr-1\"></i>\n                                  {reply.likeCount}\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8 text-muted-foreground\">\n                        <i className=\"fas fa-comments text-4xl mb-4 opacity-50\"></i>\n                        <p>No replies yet. Be the first to respond!</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">Post not found</p>\n              </div>\n            )}\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold mb-2\">\n                {selectedCommunity.displayName} Forum\n              </h1>\n              <p className=\"text-muted-foreground\">\n                Connect with fellow {selectedCommunity.displayName} players and\n                streamers\n              </p>\n            </div>\n\n            {user && (\n              <Dialog\n                open={isCreateDialogOpen}\n                onOpenChange={setIsCreateDialogOpen}\n              >\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-create-post\">\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    New Post\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>Create New Post</DialogTitle>\n                    <DialogDescription>\n                      Share your thoughts with the{\" \"}\n                      {selectedCommunity.displayName} community\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"title\">Title</Label>\n                      <Input\n                        id=\"title\"\n                        placeholder=\"Enter your post title...\"\n                        value={newPostTitle}\n                        onChange={(e) => setNewPostTitle(e.target.value)}\n                        data-testid=\"input-post-title\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"category\">Category</Label>\n                      <Select\n                        value={newPostCategory}\n                        onValueChange={setNewPostCategory}\n                      >\n                        <SelectTrigger data-testid=\"select-post-category\">\n                          <SelectValue placeholder=\"Select a category\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {FORUM_CATEGORIES.map((category) => (\n                            <SelectItem key={category.id} value={category.id}>\n                              <div className=\"flex items-center gap-2\">\n                                <i className={`${category.icon} text-sm`}></i>\n                                {category.name}\n                              </div>\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"content\">Content</Label>\n                      <Textarea\n                        id=\"content\"\n                        placeholder=\"Share your thoughts, strategies, or questions...\"\n                        value={newPostContent}\n                        onChange={(e) => setNewPostContent(e.target.value)}\n                        className=\"min-h-[120px]\"\n                        data-testid=\"textarea-post-content\"\n                      />\n                    </div>\n                    <div className=\"flex justify-end gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => setIsCreateDialogOpen(false)}\n                        data-testid=\"button-cancel-post\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        onClick={handleCreatePost}\n                        disabled={createPostMutation.isPending}\n                        data-testid=\"button-submit-post\"\n                      >\n                        {createPostMutation.isPending\n                          ? \"Creating...\"\n                          : \"Create Post\"}\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            )}\n          </div>\n\n          {/* Category filters */}\n          <div className=\"flex gap-2 mb-6 overflow-x-auto\">\n            <Button\n              variant={selectedCategory === \"all\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setSelectedCategory(\"all\")}\n              data-testid=\"filter-category-all\"\n            >\n              All Categories\n            </Button>\n            {FORUM_CATEGORIES.map((category) => (\n              <Button\n                key={category.id}\n                variant={\n                  selectedCategory === category.id ? \"default\" : \"outline\"\n                }\n                size=\"sm\"\n                onClick={() => setSelectedCategory(category.id)}\n                data-testid={`filter-category-${category.id}`}\n              >\n                <i className={`${category.icon} mr-1`}></i>\n                {category.name}\n              </Button>\n            ))}\n          </div>\n\n          {/* Posts list */}\n          {postsLoading ? (\n            <div className=\"flex justify-center py-12\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : posts.length > 0 ? (\n            <div className=\"space-y-4\">\n              {posts.map((post) => (\n                <Card\n                  key={post.id}\n                  className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                  onClick={() => setSelectedPost(post.id)}\n                  data-testid={`post-card-${post.id}`}\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <Badge\n                            className={`${getCategoryColor(post.category)} text-white`}\n                          >\n                            <i\n                              className={`${getCategoryIcon(post.category)} mr-1`}\n                            ></i>\n                            {FORUM_CATEGORIES.find(\n                              (c) => c.id === post.category,\n                            )?.name || post.category}\n                          </Badge>\n                          {post.isPinned && (\n                            <Badge variant=\"secondary\">\n                              <i className=\"fas fa-thumbtack mr-1\"></i>\n                              Pinned\n                            </Badge>\n                          )}\n                        </div>\n\n                        <h3 className=\"text-lg font-semibold mb-2 line-clamp-2\">\n                          {post.title}\n                        </h3>\n\n                        <p className=\"text-muted-foreground mb-3 line-clamp-2\">\n                          {post.content}\n                        </p>\n\n                        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                          <div className=\"flex items-center gap-2\">\n                            <Avatar className=\"h-5 w-5\">\n                              <AvatarImage\n                                src={post.author.profileImageUrl || undefined}\n                              />\n                              <AvatarFallback className=\"text-xs\">\n                                {(post.author.firstName ||\n                                  post.author.username ||\n                                  post.author.email)?.[0]?.toUpperCase() || \"U\"}\n                              </AvatarFallback>\n                            </Avatar>\n                            <span>\n                              {post.author.firstName ||\n                                post.author.username ||\n                                post.author.email}\n                            </span>\n                          </div>\n                          <span>•</span>\n                          <span>\n                            {formatDistanceToNow(post.createdAt || new Date())}{\" \"}\n                            ago\n                          </span>\n                          <span>•</span>\n                          <span>{post.viewCount} views</span>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center gap-4 text-sm text-muted-foreground ml-4\">\n                        <div className=\"flex items-center gap-1\">\n                          <i className=\"fas fa-heart\"></i>\n                          <span>{post.likeCount}</span>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <i className=\"fas fa-comments\"></i>\n                          <span>{post.replyCount}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <i className=\"fas fa-comments text-6xl text-muted-foreground/50 mb-4\"></i>\n              <h3 className=\"text-xl font-semibold mb-2\">No posts yet</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Be the first to start a conversation in the{\" \"}\n                {selectedCommunity.displayName} community!\n              </p>\n              {user && (\n                <Button\n                  onClick={() => setIsCreateDialogOpen(true)}\n                  data-testid=\"button-create-first-post\"\n                >\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Create First Post\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/conduct.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/contact.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":83,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":19},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":105,"column":60,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3242,3354],"text":"\n              Have questions, feedback, or need support? We&apos;d love to hear from\n              you.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3242,3354],"text":"\n              Have questions, feedback, or need support? We&lsquo;d love to hear from\n              you.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3242,3354],"text":"\n              Have questions, feedback, or need support? We&#39;d love to hear from\n              you.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3242,3354],"text":"\n              Have questions, feedback, or need support? We&rsquo;d love to hear from\n              you.\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Header } from \"@/shared/components\";\nimport { Footer } from \"@/shared/components\";\nimport { useDocumentTitle } from \"@/hooks/useDocumentTitle\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Contact() {\n  useDocumentTitle(\"Contact Us\");\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [subject, setSubject] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const handleHelpCenter = () => {\n    toast({\n      title: \"Help Center\",\n      description:\n        \"Our comprehensive help center is coming soon! For now, please use the contact form.\",\n    });\n  };\n\n  const handleGettingStarted = () => {\n    toast({\n      title: \"Getting Started Guide\",\n      description: \"Redirecting you to our quick start guide...\",\n    });\n    // Navigate to the main landing page which has the demo and onboarding\n    setLocation(\"/\");\n  };\n\n  const handleCommunityForum = () => {\n    toast({\n      title: \"Community Forum\",\n      description:\n        \"Join our Discord community for real-time discussions and support!\",\n    });\n    // In a real app, this would redirect to Discord invite or forum page\n    window.open(\"https://discord.gg/shuffleandsync\", \"_blank\");\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!name.trim() || !email.trim() || !subject.trim() || !message.trim()) {\n      toast({\n        title: \"Please fill in all fields\",\n        description: \"All fields are required to send your message.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/contact\", {\n        name,\n        email,\n        subject,\n        message,\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Message sent successfully!\",\n          description: \"We'll get back to you within 24 hours.\",\n        });\n        setName(\"\");\n        setEmail(\"\");\n        setSubject(\"\");\n        setMessage(\"\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Failed to send message\",\n        description: \"Please try again later or contact us directly.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n\n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl lg:text-5xl font-bold mb-4 text-foreground\">\n              Contact Us\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Have questions, feedback, or need support? We'd love to hear from\n              you.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            {/* Contact Form */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-3\">\n                  <i className=\"fas fa-envelope text-primary text-xl\"></i>\n                  Send us a Message\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Name *</Label>\n                    <Input\n                      id=\"name\"\n                      type=\"text\"\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                      placeholder=\"Your full name\"\n                      required\n                      data-testid=\"input-name\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email *</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      placeholder=\"your.email@example.com\"\n                      required\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"subject\">Subject *</Label>\n                    <Input\n                      id=\"subject\"\n                      type=\"text\"\n                      value={subject}\n                      onChange={(e) => setSubject(e.target.value)}\n                      placeholder=\"What&apos;s this about?\"\n                      required\n                      data-testid=\"input-subject\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"message\">Message *</Label>\n                    <Textarea\n                      id=\"message\"\n                      value={message}\n                      onChange={(e) => setMessage(e.target.value)}\n                      placeholder=\"Tell us more about your question or feedback...\"\n                      rows={6}\n                      required\n                      data-testid=\"textarea-message\"\n                    />\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={isSubmitting}\n                    data-testid=\"button-send-message\"\n                  >\n                    {isSubmitting ? (\n                      <>\n                        <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n                        Sending...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-paper-plane mr-2\"></i>\n                        Send Message\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* Contact Information */}\n            <div className=\"space-y-8\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-3\">\n                    <i className=\"fas fa-info-circle text-primary text-xl\"></i>\n                    Get in Touch\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <i className=\"fas fa-envelope text-primary\"></i>\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-foreground mb-1\">\n                        Email\n                      </h3>\n                      <a\n                        href=\"mailto:admin@shuffleandsync.com\"\n                        className=\"text-primary hover:underline\"\n                        data-testid=\"link-contact-email\"\n                      >\n                        admin@shuffleandsync.com\n                      </a>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        We typically respond within 24 hours\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-10 h-10 bg-green-500/10 rounded-full flex items-center justify-center\">\n                      <i className=\"fas fa-clock text-green-500\"></i>\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-foreground mb-1\">\n                        Response Time\n                      </h3>\n                      <p className=\"text-muted-foreground\">\n                        Support: 24-48 hours\n                        <br />\n                        General inquiries: 2-3 business days\n                        <br />\n                        Partnership requests: 3-5 business days\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-10 h-10 bg-purple-500/10 rounded-full flex items-center justify-center\">\n                      <i className=\"fas fa-users text-purple-500\"></i>\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-foreground mb-1\">\n                        Community\n                      </h3>\n                      <p className=\"text-muted-foreground\">\n                        Join our Discord server for real-time community support\n                        and discussions with other creators.\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Quick Links</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      onClick={handleHelpCenter}\n                      data-testid=\"button-help-center\"\n                    >\n                      <i className=\"fas fa-question-circle mr-2\"></i>\n                      Help Center\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      onClick={handleGettingStarted}\n                      data-testid=\"button-getting-started\"\n                    >\n                      <i className=\"fas fa-rocket mr-2\"></i>\n                      Getting Started Guide\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      onClick={handleCommunityForum}\n                      data-testid=\"button-community-forum\"\n                    >\n                      <i className=\"fas fa-comments mr-2\"></i>\n                      Join Discord Community\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/faq.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/game-room.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1255,1258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1255,1258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedCommunity' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":65,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'queryClient' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":66,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2584,2587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2584,2587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'recordedChunks' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":94,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":180,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6023,6026],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6023,6026],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":213,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7002,7005],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7002,7005],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":229,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7467,7470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7467,7470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":281,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":281,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8866,8869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8866,8869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":520,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":520,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'playerId' is defined but never used. Allowed unused args must match /^_/u.","line":547,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":547,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'playerId' is defined but never used. Allowed unused args must match /^_/u.","line":581,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":581,"endColumn":60},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":1020,"column":37,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[34746,34846],"text":"\n                              Click &quot;Enable Camera\" to join video chat\n                            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[34746,34846],"text":"\n                              Click &ldquo;Enable Camera\" to join video chat\n                            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[34746,34846],"text":"\n                              Click &#34;Enable Camera\" to join video chat\n                            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[34746,34846],"text":"\n                              Click &rdquo;Enable Camera\" to join video chat\n                            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":1020,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[34746,34846],"text":"\n                              Click \"Enable Camera&quot; to join video chat\n                            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[34746,34846],"text":"\n                              Click \"Enable Camera&ldquo; to join video chat\n                            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[34746,34846],"text":"\n                              Click \"Enable Camera&#34; to join video chat\n                            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[34746,34846],"text":"\n                              Click \"Enable Camera&rdquo; to join video chat\n                            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":1029,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":1029,"endColumn":55}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/features/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Header } from \"@/shared/components\";\nimport { useCommunity } from \"@/features/communities\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface GameSession {\n  id: string;\n  eventId: string;\n  hostId: string;\n  coHostId?: string;\n  status: string;\n  currentPlayers: number;\n  maxPlayers: number;\n  gameData?: {\n    name: string;\n    format: string;\n    powerLevel: string;\n    description: string;\n    currentTurn?: string;\n    turnOrder?: string[];\n    gameState?: any;\n  };\n  host: {\n    id: string;\n    firstName?: string;\n    lastName?: string;\n    email: string;\n    profileImageUrl?: string;\n  };\n  createdAt: string;\n  startedAt?: string;\n}\n\ninterface GameMessage {\n  id: string;\n  senderId: string;\n  sender: {\n    firstName?: string;\n    lastName?: string;\n    email: string;\n    profileImageUrl?: string;\n  };\n  content: string;\n  timestamp: string;\n  type: \"chat\" | \"game_action\" | \"system\";\n}\n\nexport default function GameRoom() {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const { selectedCommunity } = useCommunity();\n  const queryClient = useQueryClient();\n\n  // Check if user is in spectator mode\n  const searchParams = new URLSearchParams(window.location.search);\n  const isSpectatorMode = searchParams.get(\"mode\") === \"spectate\";\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [diceResult, setDiceResult] = useState<number | null>(null);\n  const [gameTimer, setGameTimer] = useState(0);\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const ws = useRef<WebSocket | null>(null);\n  const [messages, setMessages] = useState<GameMessage[]>([]);\n  const [connectedPlayers, setConnectedPlayers] = useState<any[]>([]);\n  const [localStream, setLocalStream] = useState<MediaStream | null>(null);\n  const [remoteStreams, setRemoteStreams] = useState<Map<string, MediaStream>>(\n    new Map(),\n  );\n  const [isCameraOn, setIsCameraOn] = useState(false);\n  const [isMicOn, setIsMicOn] = useState(false);\n  const [cameraPermissionGranted, setCameraPermissionGranted] = useState(false);\n  const [cameraError, setCameraError] = useState<string | null>(null);\n  const [videoLayout, setVideoLayout] = useState<\"grid\" | \"focused\">(\"grid\");\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [screenStream, setScreenStream] = useState<MediaStream | null>(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(\n    null,\n  );\n  const [recordedChunks, setRecordedChunks] = useState<Blob[]>([]);\n  const localVideoRef = useRef<HTMLVideoElement>(null);\n  const remoteVideoRefs = useRef<Map<string, HTMLVideoElement>>(new Map());\n  const peerConnections = useRef<Map<string, RTCPeerConnection>>(new Map());\n\n  const sessionId = params.id;\n\n  // Fetch game session details\n  const { data: gameSession, isLoading } = useQuery<GameSession>({\n    queryKey: [\"/api/game-sessions\", sessionId],\n    enabled: !!sessionId,\n  });\n\n  // WebRTC Functions - wrapped with useCallback for stable references\n  const createPeerConnection = useCallback(\n    async (playerId: string) => {\n      if (peerConnections.current.has(playerId)) return;\n\n      const peerConnection = new RTCPeerConnection({\n        iceServers: [\n          { urls: \"stun:stun.l.google.com:19302\" },\n          { urls: \"stun:stun1.l.google.com:19302\" },\n        ],\n      });\n\n      peerConnections.current.set(playerId, peerConnection);\n\n      // Add local stream to peer connection\n      if (localStream) {\n        localStream.getTracks().forEach((track) => {\n          peerConnection.addTrack(track, localStream);\n        });\n      }\n\n      // Handle remote stream\n      peerConnection.ontrack = (event) => {\n        const [remoteStream] = event.streams;\n        if (remoteStream) {\n          setRemoteStreams((prev) => new Map(prev.set(playerId, remoteStream)));\n\n          // Set video element source\n          const videoElement = remoteVideoRefs.current.get(playerId);\n          if (videoElement) {\n            videoElement.srcObject = remoteStream;\n          }\n        }\n      };\n\n      // Handle ICE candidates\n      peerConnection.onicecandidate = (event) => {\n        if (event.candidate && ws.current) {\n          ws.current.send(\n            JSON.stringify({\n              type: \"webrtc_ice_candidate\",\n              targetPlayer: playerId,\n              candidate: event.candidate,\n              sessionId,\n            }),\n          );\n        }\n      };\n\n      // Create and send offer\n      try {\n        const offer = await peerConnection.createOffer();\n        await peerConnection.setLocalDescription(offer);\n\n        ws.current?.send(\n          JSON.stringify({\n            type: \"webrtc_offer\",\n            targetPlayer: playerId,\n            offer: offer,\n            sessionId,\n          }),\n        );\n      } catch (error) {\n        // Log error for debugging\n        if (import.meta.env.DEV) {\n          console.error(\"Error creating WebRTC offer:\", error);\n        }\n      }\n    },\n    [localStream, sessionId],\n  );\n\n  const handleWebRTCOffer = useCallback(\n    async (data: any) => {\n      const { fromPlayer, offer } = data;\n\n      if (!peerConnections.current.has(fromPlayer)) {\n        await createPeerConnection(fromPlayer);\n      }\n\n      const peerConnection = peerConnections.current.get(fromPlayer);\n      if (peerConnection) {\n        try {\n          await peerConnection.setRemoteDescription(offer);\n          const answer = await peerConnection.createAnswer();\n          await peerConnection.setLocalDescription(answer);\n\n          ws.current?.send(\n            JSON.stringify({\n              type: \"webrtc_answer\",\n              targetPlayer: fromPlayer,\n              answer: answer,\n              sessionId,\n            }),\n          );\n        } catch (error) {\n          // Log error for debugging\n          if (import.meta.env.DEV) {\n            console.error(\"Error handling WebRTC offer:\", error);\n          }\n        }\n      }\n    },\n    [createPeerConnection, sessionId],\n  );\n\n  const handleWebRTCAnswer = useCallback(async (data: any) => {\n    const { fromPlayer, answer } = data;\n    const peerConnection = peerConnections.current.get(fromPlayer);\n\n    if (peerConnection) {\n      try {\n        await peerConnection.setRemoteDescription(answer);\n      } catch (error) {\n        // Log error for debugging\n        if (import.meta.env.DEV) {\n          console.error(\"Error handling WebRTC answer:\", error);\n        }\n      }\n    }\n  }, []);\n\n  const handleICECandidate = useCallback(async (data: any) => {\n    const { fromPlayer, candidate } = data;\n    const peerConnection = peerConnections.current.get(fromPlayer);\n\n    if (peerConnection) {\n      try {\n        await peerConnection.addIceCandidate(candidate);\n      } catch (error) {\n        // Log error for debugging\n        if (import.meta.env.DEV) {\n          console.error(\"Error adding ICE candidate:\", error);\n        }\n      }\n    }\n  }, []);\n\n  // Initialize camera and microphone\n  const initializeMedia = useCallback(async () => {\n    try {\n      setCameraError(null);\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          width: { ideal: 1280 },\n          height: { ideal: 720 },\n          facingMode: \"user\",\n        },\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n        },\n      });\n\n      setLocalStream(stream);\n      setCameraPermissionGranted(true);\n      setIsCameraOn(true);\n      setIsMicOn(true);\n\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n      }\n\n      // Start WebRTC connections for existing players\n      connectedPlayers.forEach((player) => {\n        if (player.id !== user?.id) {\n          createPeerConnection(player.id);\n        }\n      });\n\n      toast({\n        title: \"Camera enabled\",\n        description: \"Video chat is now active for the game room.\",\n      });\n    } catch (error: any) {\n      // Log error for debugging\n      if (import.meta.env.DEV) {\n        console.error(\"Error accessing camera/microphone:\", error);\n      }\n      setCameraPermissionGranted(false);\n\n      let errorMessage =\n        \"Camera and microphone access is needed for video chat.\";\n\n      if (error.name === \"NotAllowedError\") {\n        errorMessage =\n          \"Please allow camera and microphone access in your browser settings.\";\n      } else if (error.name === \"NotFoundError\") {\n        errorMessage =\n          \"No camera or microphone found. Please connect a camera to use video chat.\";\n      } else if (error.name === \"NotSupportedError\") {\n        errorMessage =\n          \"Video chat is not supported in this browser or environment.\";\n      }\n\n      setCameraError(errorMessage);\n    }\n  }, [connectedPlayers, user, createPeerConnection, toast]);\n\n  // Clean up media stream on unmount\n  useEffect(() => {\n    return () => {\n      if (localStream) {\n        localStream.getTracks().forEach((track) => track.stop());\n      }\n    };\n  }, [localStream]);\n\n  // Initialize WebSocket connection\n  useEffect(() => {\n    if (!sessionId || !user) return;\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n\n    ws.current = new WebSocket(wsUrl);\n\n    ws.current.onopen = () => {\n      // Connected to game room - no logging needed in production\n      // Send join message\n      ws.current?.send(\n        JSON.stringify({\n          type: \"join_room\",\n          sessionId,\n          user: {\n            id: user.id,\n            name: user.firstName || user.email,\n            avatar: user.profileImageUrl,\n          },\n        }),\n      );\n    };\n\n    ws.current.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n\n      switch (data.type) {\n        case \"message\":\n          setMessages((prev) => [...prev, data.message]);\n          break;\n        case \"player_joined\":\n          setConnectedPlayers(data.players);\n          toast({\n            title: \"Player joined\",\n            description: `${data.player.name} joined the game room`,\n          });\n\n          // Create WebRTC connection for new player\n          if (data.player?.id !== user?.id && localStream) {\n            setTimeout(() => createPeerConnection(data.player.id), 1000);\n          }\n          break;\n        case \"player_left\": {\n          setConnectedPlayers(data.players);\n          toast({\n            title: \"Player left\",\n            description: `${data.player.name} left the game room`,\n          });\n\n          // Clean up WebRTC connection\n          const peerConnection = peerConnections.current.get(data.player.id);\n          if (peerConnection) {\n            peerConnection.close();\n            peerConnections.current.delete(data.player.id);\n          }\n\n          // Remove remote stream\n          setRemoteStreams((prev) => {\n            const newStreams = new Map(prev);\n            newStreams.delete(data.player.id);\n            return newStreams;\n          });\n          break;\n        }\n        case \"game_action\":\n          if (data.action === \"dice_roll\") {\n            toast({\n              title: \"Dice rolled\",\n              description: `${data.player} rolled a ${data.result}`,\n            });\n          }\n          break;\n\n        case \"webrtc_offer\":\n          handleWebRTCOffer(data);\n          break;\n\n        case \"webrtc_answer\":\n          handleWebRTCAnswer(data);\n          break;\n\n        case \"webrtc_ice_candidate\":\n          handleICECandidate(data);\n          break;\n\n        case \"camera_status\":\n          // Update UI to show camera status for other players\n          // Player camera status update - visual feedback handled by UI\n          break;\n\n        case \"mic_status\":\n          // Update UI to show microphone status for other players\n          // Player microphone status update - visual feedback handled by UI\n          break;\n        case \"turn_change\":\n          toast({\n            title: \"Turn changed\",\n            description: `It&apos;s now ${data.player}'s turn`,\n          });\n          break;\n      }\n    };\n\n    ws.current.onclose = () => {\n      // Disconnected from game room - handled by UI state\n    };\n\n    return () => {\n      ws.current?.close();\n    };\n  }, [\n    sessionId,\n    user,\n    createPeerConnection,\n    handleWebRTCOffer,\n    handleWebRTCAnswer,\n    handleICECandidate,\n    localStream,\n    toast,\n  ]);\n\n  // Auto-scroll to bottom of messages\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  // Game timer effect\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (isTimerRunning) {\n      interval = setInterval(() => {\n        setGameTimer((prev) => prev + 1);\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [isTimerRunning]);\n\n  const sendMessage = useCallback(() => {\n    if (!newMessage.trim() || !ws.current) return;\n\n    ws.current.send(\n      JSON.stringify({\n        type: \"message\",\n        sessionId,\n        content: newMessage.trim(),\n        user: {\n          id: user?.id,\n          name: user?.firstName || user?.email,\n          avatar: user?.profileImageUrl,\n        },\n      }),\n    );\n\n    setNewMessage(\"\");\n  }, [newMessage, sessionId, user]);\n\n  const rollDice = useCallback(\n    (sides: number = 6) => {\n      const result = Math.floor(Math.random() * sides) + 1;\n      setDiceResult(result);\n\n      ws.current?.send(\n        JSON.stringify({\n          type: \"game_action\",\n          sessionId,\n          action: \"dice_roll\",\n          data: { sides, result },\n          user: {\n            id: user?.id,\n            name: user?.firstName || user?.email,\n          },\n        }),\n      );\n\n      setTimeout(() => setDiceResult(null), 3000);\n    },\n    [sessionId, user],\n  );\n\n  const startTimer = useCallback(() => {\n    setIsTimerRunning(true);\n    setGameTimer(0);\n  }, []);\n\n  const pauseTimer = useCallback(() => {\n    setIsTimerRunning(false);\n  }, []);\n\n  const resetTimer = useCallback(() => {\n    setIsTimerRunning(false);\n    setGameTimer(0);\n  }, []);\n\n  const leaveRoom = useCallback(async () => {\n    if (!sessionId) return;\n\n    try {\n      await apiRequest(\"POST\", `/api/game-sessions/${sessionId}/leave`);\n      toast({\n        title: \"Left room\",\n        description: \"You have left the game room\",\n      });\n      setLocation(\"/tablesync\");\n    } catch (error) {\n      toast({\n        title: \"Error leaving room\",\n        description: \"Please try again\",\n        variant: \"destructive\",\n      });\n    }\n  }, [sessionId, toast, setLocation]);\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`;\n  };\n\n  // Screen Sharing Functions\n  const stopScreenShare = useCallback(async () => {\n    if (screenStream) {\n      screenStream.getTracks().forEach((track) => track.stop());\n      setScreenStream(null);\n    }\n    setIsScreenSharing(false);\n\n    // Switch back to camera feed\n    if (localStream) {\n      const videoTrack = localStream.getVideoTracks()[0];\n      if (videoTrack) {\n        peerConnections.current.forEach(async (pc, playerId) => {\n          const sender = pc.getSenders().find((s) => s.track?.kind === \"video\");\n          if (sender) {\n            await sender.replaceTrack(videoTrack);\n          }\n        });\n      }\n    }\n\n    toast({\n      title: \"Screen sharing stopped\",\n      description: \"Switched back to camera feed\",\n    });\n  }, [screenStream, localStream, toast]);\n\n  const startScreenShare = useCallback(async () => {\n    try {\n      const stream = await navigator.mediaDevices.getDisplayMedia({\n        video: {\n          width: { ideal: 1920 },\n          height: { ideal: 1080 },\n        },\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n        },\n      });\n\n      setScreenStream(stream);\n      setIsScreenSharing(true);\n\n      // Replace video track in all peer connections\n      const videoTrack = stream.getVideoTracks()[0];\n      if (videoTrack) {\n        peerConnections.current.forEach(async (pc, playerId) => {\n          const sender = pc.getSenders().find((s) => s.track?.kind === \"video\");\n          if (sender) {\n            await sender.replaceTrack(videoTrack);\n          }\n        });\n      }\n\n      // Handle screen share end\n      if (videoTrack) {\n        videoTrack.onended = () => {\n          stopScreenShare();\n        };\n      }\n\n      toast({\n        title: \"Screen sharing started\",\n        description: \"Your screen is now being shared with other players\",\n      });\n    } catch (error) {\n      // Log error for debugging\n      if (import.meta.env.DEV) {\n        console.error(\"Error starting screen share:\", error);\n      }\n      toast({\n        title: \"Screen sharing failed\",\n        description: \"Could not start screen sharing. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [stopScreenShare, toast]);\n\n  // Recording Functions\n  const startRecording = useCallback(async () => {\n    if (!localStream) {\n      toast({\n        title: \"Cannot start recording\",\n        description: \"Please enable your camera first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // Create a combined stream with local video and audio\n      const combinedStream = new MediaStream();\n\n      // Add local tracks\n      if (localStream) {\n        localStream.getTracks().forEach((track) => {\n          combinedStream.addTrack(track);\n        });\n      }\n\n      // Add remote audio tracks\n      remoteStreams.forEach((stream) => {\n        stream.getAudioTracks().forEach((track) => {\n          combinedStream.addTrack(track);\n        });\n      });\n\n      const recorder = new MediaRecorder(combinedStream, {\n        mimeType: \"video/webm;codecs=vp9,opus\",\n      });\n\n      const chunks: Blob[] = [];\n      recorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          chunks.push(event.data);\n        }\n      };\n\n      recorder.onstop = () => {\n        const blob = new Blob(chunks, { type: \"video/webm\" });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = `game-session-${sessionId}-${new Date().toISOString().split(\"T\")[0]}.webm`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n\n        toast({\n          title: \"Recording saved\",\n          description: \"Your game session recording has been downloaded\",\n        });\n      };\n\n      recorder.start(1000); // Collect data every second\n      setMediaRecorder(recorder);\n      setRecordedChunks(chunks);\n      setIsRecording(true);\n\n      toast({\n        title: \"Recording started\",\n        description: \"Your game session is now being recorded\",\n      });\n    } catch (error) {\n      // Log error for debugging\n      if (import.meta.env.DEV) {\n        console.error(\"Error starting recording:\", error);\n      }\n      toast({\n        title: \"Recording failed\",\n        description: \"Could not start recording. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [localStream, remoteStreams, sessionId, toast]);\n\n  const stopRecording = useCallback(() => {\n    if (mediaRecorder && mediaRecorder.state === \"recording\") {\n      mediaRecorder.stop();\n      setMediaRecorder(null);\n      setIsRecording(false);\n\n      toast({\n        title: \"Recording stopped\",\n        description: \"Processing your recording...\",\n      });\n    }\n  }, [mediaRecorder, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <main className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"text-center\">\n              <i className=\"fas fa-spinner animate-spin text-4xl text-muted-foreground mb-4\"></i>\n              <p className=\"text-lg text-muted-foreground\">\n                Loading game room...\n              </p>\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (!gameSession) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <main className=\"container mx-auto px-4 py-8\">\n          <div className=\"text-center py-12\">\n            <i className=\"fas fa-exclamation-triangle text-4xl text-yellow-500 mb-4\"></i>\n            <h2 className=\"text-2xl font-bold mb-2\">Room Not Found</h2>\n            <p className=\"text-muted-foreground mb-4\">\n              This game room may have been deleted or is no longer available.\n            </p>\n            <Button onClick={() => setLocation(\"/tablesync\")}>\n              <i className=\"fas fa-arrow-left mr-2\"></i>\n              Back to TableSync\n            </Button>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n\n      <main className=\"container mx-auto px-4 py-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Room Header */}\n          <div className=\"mb-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-foreground\">\n                  {gameSession.gameData?.name || \"Game Room\"}\n                </h1>\n                <p className=\"text-muted-foreground\">\n                  Hosted by{\" \"}\n                  {gameSession.host?.firstName || gameSession.host?.email} •{\" \"}\n                  {gameSession.gameData?.format}\n                </p>\n              </div>\n              <div className=\"flex items-center gap-4\">\n                <Badge\n                  variant={\n                    gameSession.status === \"active\" ? \"default\" : \"secondary\"\n                  }\n                  className=\"text-sm\"\n                >\n                  {gameSession.status === \"active\"\n                    ? \"Game Active\"\n                    : \"Waiting for Players\"}\n                </Badge>\n                <Button\n                  variant=\"outline\"\n                  onClick={leaveRoom}\n                  data-testid=\"button-leave-room\"\n                >\n                  <i className=\"fas fa-sign-out-alt mr-2\"></i>\n                  Leave Room\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <Card>\n                <CardContent className=\"pt-4\">\n                  <div className=\"text-center\">\n                    <i className=\"fas fa-users text-2xl text-purple-500 mb-2\"></i>\n                    <p className=\"text-sm text-muted-foreground\">Players</p>\n                    <p className=\"text-lg font-bold\">\n                      {gameSession.currentPlayers}/{gameSession.maxPlayers}\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"pt-4\">\n                  <div className=\"text-center\">\n                    <i className=\"fas fa-chess-board text-2xl text-orange-500 mb-2\"></i>\n                    <p className=\"text-sm text-muted-foreground\">Format</p>\n                    <p className=\"text-lg font-bold\">\n                      {gameSession.gameData?.format}\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"pt-4\">\n                  <div className=\"text-center\">\n                    <i className=\"fas fa-bolt text-2xl text-yellow-500 mb-2\"></i>\n                    <p className=\"text-sm text-muted-foreground\">Power Level</p>\n                    <p className=\"text-lg font-bold\">\n                      {gameSession.gameData?.powerLevel || \"Any\"}\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"pt-4\">\n                  <div className=\"text-center\">\n                    <i className=\"fas fa-clock text-2xl text-blue-500 mb-2\"></i>\n                    <p className=\"text-sm text-muted-foreground\">Game Time</p>\n                    <p className=\"text-lg font-bold\">{formatTime(gameTimer)}</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Video Chat Section */}\n          <div className=\"mb-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <i className=\"fas fa-video text-blue-500\"></i>\n                    Video Chat ({connectedPlayers.length + 1}/4 players)\n                  </CardTitle>\n                  <div className=\"flex items-center gap-2\">\n                    {isSpectatorMode ? (\n                      <div className=\"flex items-center gap-2 text-muted-foreground\">\n                        <i className=\"fas fa-eye mr-2\"></i>\n                        <span className=\"text-sm\">\n                          Spectator Mode - Video controls disabled\n                        </span>\n                      </div>\n                    ) : (\n                      <>\n                        {!cameraPermissionGranted ? (\n                          <Button\n                            variant=\"default\"\n                            size=\"sm\"\n                            onClick={initializeMedia}\n                            data-testid=\"button-enable-camera\"\n                          >\n                            <i className=\"fas fa-video mr-2\"></i>\n                            Enable Camera\n                          </Button>\n                        ) : (\n                          <Button\n                            variant={isCameraOn ? \"default\" : \"destructive\"}\n                            size=\"sm\"\n                            onClick={() => {\n                              if (localStream) {\n                                const videoTrack =\n                                  localStream.getVideoTracks()[0];\n                                if (videoTrack) {\n                                  videoTrack.enabled = !isCameraOn;\n                                  setIsCameraOn(!isCameraOn);\n                                }\n                              }\n                            }}\n                            data-testid=\"button-toggle-camera\"\n                          >\n                            <i\n                              className={`fas ${isCameraOn ? \"fa-video\" : \"fa-video-slash\"} mr-2`}\n                            ></i>\n                            {isCameraOn ? \"Camera On\" : \"Camera Off\"}\n                          </Button>\n                        )}\n                        {cameraPermissionGranted && (\n                          <Button\n                            variant={isMicOn ? \"default\" : \"destructive\"}\n                            size=\"sm\"\n                            onClick={() => {\n                              if (localStream) {\n                                const audioTrack =\n                                  localStream.getAudioTracks()[0];\n                                if (audioTrack) {\n                                  audioTrack.enabled = !isMicOn;\n                                  setIsMicOn(!isMicOn);\n                                }\n                              }\n                            }}\n                            data-testid=\"button-toggle-mic\"\n                          >\n                            <i\n                              className={`fas ${isMicOn ? \"fa-microphone\" : \"fa-microphone-slash\"} mr-2`}\n                            ></i>\n                            {isMicOn ? \"Mic On\" : \"Mic Off\"}\n                          </Button>\n                        )}\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() =>\n                            setVideoLayout(\n                              videoLayout === \"grid\" ? \"focused\" : \"grid\",\n                            )\n                          }\n                          data-testid=\"button-toggle-layout\"\n                        >\n                          <i\n                            className={`fas ${videoLayout === \"grid\" ? \"fa-expand\" : \"fa-th\"} mr-2`}\n                          ></i>\n                          {videoLayout === \"grid\" ? \"Focus Mode\" : \"Grid View\"}\n                        </Button>\n                        <Button\n                          variant={isScreenSharing ? \"destructive\" : \"outline\"}\n                          size=\"sm\"\n                          onClick={\n                            isScreenSharing ? stopScreenShare : startScreenShare\n                          }\n                          data-testid=\"button-screen-share\"\n                        >\n                          <i\n                            className={`fas ${isScreenSharing ? \"fa-stop\" : \"fa-desktop\"} mr-2`}\n                          ></i>\n                          {isScreenSharing ? \"Stop Sharing\" : \"Share Screen\"}\n                        </Button>\n                        <Button\n                          variant={isRecording ? \"destructive\" : \"outline\"}\n                          size=\"sm\"\n                          onClick={isRecording ? stopRecording : startRecording}\n                          disabled={!cameraPermissionGranted}\n                          data-testid=\"button-record\"\n                        >\n                          <i\n                            className={`fas ${isRecording ? \"fa-stop-circle\" : \"fa-record-vinyl\"} mr-2`}\n                          ></i>\n                          {isRecording ? \"Stop Recording\" : \"Record Session\"}\n                        </Button>\n                      </>\n                    )}\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div\n                  className={`grid gap-4 ${videoLayout === \"grid\" ? \"grid-cols-1 md:grid-cols-2\" : \"grid-cols-1\"}`}\n                >\n                  {/* Local Video (Your Camera) */}\n                  <div className=\"relative bg-black rounded-lg overflow-hidden aspect-video\">\n                    {cameraPermissionGranted ? (\n                      <>\n                        <video\n                          ref={localVideoRef}\n                          autoPlay\n                          muted\n                          playsInline\n                          className=\"w-full h-full object-cover\"\n                          data-testid=\"video-local\"\n                        />\n                        <div className=\"absolute bottom-2 left-2 bg-black/70 text-white px-2 py-1 rounded text-sm\">\n                          <i className=\"fas fa-user mr-1\"></i>\n                          You ({user?.firstName || \"Player\"})\n                          {isScreenSharing && (\n                            <span className=\"ml-2 bg-green-500 px-1 rounded text-xs\">\n                              <i className=\"fas fa-desktop mr-1\"></i>Sharing\n                            </span>\n                          )}\n                        </div>\n                        {isRecording && (\n                          <div className=\"absolute top-2 left-2 bg-red-500 text-white px-2 py-1 rounded text-sm animate-pulse\">\n                            <i className=\"fas fa-record-vinyl mr-1\"></i>\n                            REC\n                          </div>\n                        )}\n                        {!isCameraOn && (\n                          <div className=\"absolute inset-0 bg-gray-800 flex items-center justify-center\">\n                            <div className=\"text-center text-white\">\n                              <i className=\"fas fa-video-slash text-4xl mb-2\"></i>\n                              <p>Camera Off</p>\n                            </div>\n                          </div>\n                        )}\n                        {!isMicOn && (\n                          <div className=\"absolute top-2 right-2 bg-red-500 text-white p-1 rounded\">\n                            <i className=\"fas fa-microphone-slash text-sm\"></i>\n                          </div>\n                        )}\n                      </>\n                    ) : (\n                      <div className=\"absolute inset-0 bg-gray-700 flex items-center justify-center\">\n                        <div className=\"text-center text-white p-4\">\n                          <div className=\"w-16 h-16 bg-gray-600 rounded-full flex items-center justify-center mb-3 mx-auto\">\n                            {user?.profileImageUrl ? (\n                              <img\n                                src={user.profileImageUrl}\n                                alt=\"Your avatar\"\n                                className=\"w-full h-full rounded-full object-cover\"\n                              />\n                            ) : (\n                              <span className=\"text-xl font-bold\">\n                                {user?.firstName?.charAt(0).toUpperCase() ||\n                                  \"Y\"}\n                              </span>\n                            )}\n                          </div>\n                          <p className=\"text-sm font-medium mb-2\">\n                            You ({user?.firstName || \"Player\"})\n                          </p>\n                          {cameraError ? (\n                            <p className=\"text-xs text-gray-300\">\n                              {cameraError}\n                            </p>\n                          ) : (\n                            <p className=\"text-xs text-gray-300\">\n                              Click \"Enable Camera\" to join video chat\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Remote Videos (Other Players) */}\n                  {connectedPlayers.map((player, index) => {\n                    const hasStream = remoteStreams.has(player.id);\n                    return (\n                      <div\n                        key={player.id}\n                        className=\"relative bg-gray-900 rounded-lg overflow-hidden aspect-video\"\n                      >\n                        {hasStream ? (\n                          <video\n                            ref={(ref) => {\n                              if (ref) {\n                                const stream = remoteStreams.get(player.id);\n                                if (stream) {\n                                  ref.srcObject = stream;\n                                  remoteVideoRefs.current.set(player.id, ref);\n                                }\n                              }\n                            }}\n                            autoPlay\n                            playsInline\n                            className=\"w-full h-full object-cover\"\n                            data-testid={`video-remote-${player.id}`}\n                          />\n                        ) : (\n                          <div className=\"absolute inset-0 flex items-center justify-center text-white\">\n                            <div className=\"text-center\">\n                              <div className=\"w-16 h-16 bg-gray-600 rounded-full flex items-center justify-center mb-2 mx-auto\">\n                                {player.avatar ? (\n                                  <img\n                                    src={player.avatar}\n                                    alt={player.name}\n                                    className=\"w-full h-full rounded-full object-cover\"\n                                  />\n                                ) : (\n                                  <span className=\"text-xl font-bold\">\n                                    {player.name?.charAt(0).toUpperCase()}\n                                  </span>\n                                )}\n                              </div>\n                              <p className=\"text-sm\">{player.name}</p>\n                              <p className=\"text-xs text-gray-400\">\n                                <i className=\"fas fa-spinner animate-spin mr-1\"></i>\n                                Connecting camera...\n                              </p>\n                            </div>\n                          </div>\n                        )}\n                        <div className=\"absolute bottom-2 left-2 bg-black/70 text-white px-2 py-1 rounded text-sm\">\n                          <i className=\"fas fa-user mr-1\"></i>\n                          {player.name}\n                        </div>\n                      </div>\n                    );\n                  })}\n\n                  {/* Empty Slots */}\n                  {Array.from(\n                    { length: Math.max(0, 3 - connectedPlayers.length) },\n                    (_, index) => (\n                      <div\n                        key={`empty-${index}`}\n                        className=\"relative bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden aspect-video border-2 border-dashed border-gray-300 dark:border-gray-600\"\n                      >\n                        <div className=\"absolute inset-0 flex items-center justify-center\">\n                          <div className=\"text-center text-gray-500\">\n                            <i className=\"fas fa-user-plus text-3xl mb-2\"></i>\n                            <p className=\"text-sm\">Waiting for player...</p>\n                            <p className=\"text-xs\">Invite friends to join</p>\n                          </div>\n                        </div>\n                      </div>\n                    ),\n                  )}\n                </div>\n\n                {/* Video Tips */}\n                {cameraPermissionGranted ? (\n                  <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-950/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n                    <div className=\"flex items-start gap-3\">\n                      <i className=\"fas fa-lightbulb text-blue-500 mt-1\"></i>\n                      <div className=\"text-sm\">\n                        <p className=\"font-medium text-blue-700 dark:text-blue-300 mb-1\">\n                          Video Chat Tips\n                        </p>\n                        <p className=\"text-blue-600 dark:text-blue-400\">\n                          Position your camera to show your playing area\n                          clearly. Use good lighting and ensure your cards are\n                          visible to other players.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"mt-4 p-3 bg-amber-50 dark:bg-amber-950/20 rounded-lg border border-amber-200 dark:border-amber-800\">\n                    <div className=\"flex items-start gap-3\">\n                      <i className=\"fas fa-info-circle text-amber-500 mt-1\"></i>\n                      <div className=\"text-sm\">\n                        <p className=\"font-medium text-amber-700 dark:text-amber-300 mb-1\">\n                          Video Chat Available\n                        </p>\n                        <p className=\"text-amber-600 dark:text-amber-400\">\n                          Enable your camera to see other players and show your\n                          playing area. Video chat works like SpellTable for\n                          remote card game play.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Game Controls */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              {/* Player List */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <i className=\"fas fa-users text-purple-500\"></i>\n                    Connected Players\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    {connectedPlayers.length > 0 ? (\n                      connectedPlayers.map((player, index) => (\n                        <div\n                          key={player.id || index}\n                          className=\"flex items-center gap-3 p-3 rounded-lg border\"\n                        >\n                          <Avatar className=\"h-10 w-10\">\n                            <AvatarImage src={player.avatar} />\n                            <AvatarFallback>\n                              {(player.name || \"P\").charAt(0).toUpperCase()}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <p className=\"font-medium\">{player.name}</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {player.id === gameSession.hostId\n                                ? \"Host\"\n                                : \"Player\"}\n                            </p>\n                          </div>\n                          {player.id === gameSession.gameData?.currentTurn && (\n                            <Badge variant=\"default\" className=\"ml-auto\">\n                              <i className=\"fas fa-arrow-right mr-1\"></i>\n                              Turn\n                            </Badge>\n                          )}\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"col-span-2 text-center py-8 text-muted-foreground\">\n                        <i className=\"fas fa-user-friends text-3xl mb-2\"></i>\n                        <p>Waiting for players to connect...</p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Game Tools */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <i className=\"fas fa-tools text-orange-500\"></i>\n                    Game Tools\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Tabs defaultValue=\"dice\" className=\"w-full\">\n                    <TabsList className=\"grid w-full grid-cols-3\">\n                      <TabsTrigger value=\"dice\">\n                        <i className=\"fas fa-dice mr-2\"></i>\n                        Dice\n                      </TabsTrigger>\n                      <TabsTrigger value=\"timer\">\n                        <i className=\"fas fa-stopwatch mr-2\"></i>\n                        Timer\n                      </TabsTrigger>\n                      <TabsTrigger value=\"notes\">\n                        <i className=\"fas fa-sticky-note mr-2\"></i>\n                        Notes\n                      </TabsTrigger>\n                    </TabsList>\n\n                    <TabsContent value=\"dice\" className=\"space-y-4\">\n                      {isSpectatorMode ? (\n                        <div className=\"text-center py-8 text-muted-foreground\">\n                          <i className=\"fas fa-eye text-3xl mb-2\"></i>\n                          <p>Spectator mode - dice rolls are view-only</p>\n                        </div>\n                      ) : (\n                        <>\n                          <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-2\">\n                            {[4, 6, 8, 10, 12, 20].map((sides) => (\n                              <Button\n                                key={sides}\n                                variant=\"outline\"\n                                onClick={() => rollDice(sides)}\n                                data-testid={`button-dice-${sides}`}\n                                className=\"h-12\"\n                              >\n                                <i className=\"fas fa-dice mr-1\"></i>d{sides}\n                              </Button>\n                            ))}\n                          </div>\n                          {diceResult && (\n                            <div className=\"text-center p-4 bg-purple-50 dark:bg-purple-950 rounded-lg\">\n                              <div className=\"text-3xl font-bold text-purple-600 dark:text-purple-400 mb-2\">\n                                {diceResult}\n                              </div>\n                              <p className=\"text-sm text-muted-foreground\">\n                                Last roll result\n                              </p>\n                            </div>\n                          )}\n                        </>\n                      )}\n                    </TabsContent>\n\n                    <TabsContent value=\"timer\" className=\"space-y-4\">\n                      <div className=\"text-center\">\n                        <div className=\"text-4xl font-mono font-bold mb-4\">\n                          {formatTime(gameTimer)}\n                        </div>\n                        {isSpectatorMode ? (\n                          <div className=\"text-muted-foreground\">\n                            <i className=\"fas fa-eye mr-2\"></i>\n                            Spectator mode - timer is view-only\n                          </div>\n                        ) : (\n                          <div className=\"flex justify-center gap-2\">\n                            <Button\n                              variant={isTimerRunning ? \"default\" : \"outline\"}\n                              onClick={isTimerRunning ? pauseTimer : startTimer}\n                              data-testid=\"button-timer-toggle\"\n                            >\n                              <i\n                                className={`fas ${isTimerRunning ? \"fa-pause\" : \"fa-play\"} mr-2`}\n                              ></i>\n                              {isTimerRunning ? \"Pause\" : \"Start\"}\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              onClick={resetTimer}\n                              data-testid=\"button-timer-reset\"\n                            >\n                              <i className=\"fas fa-redo mr-2\"></i>\n                              Reset\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"notes\" className=\"space-y-4\">\n                      <div className=\"p-4 border rounded-lg bg-muted/50\">\n                        <p className=\"text-sm text-muted-foreground mb-2\">\n                          Room Description:\n                        </p>\n                        <p className=\"text-sm\">\n                          {gameSession.gameData?.description ||\n                            \"No description provided\"}\n                        </p>\n                      </div>\n                      <div className=\"p-4 border rounded-lg\">\n                        <p className=\"text-sm text-muted-foreground mb-2\">\n                          Game Notes:\n                        </p>\n                        <p className=\"text-sm italic text-muted-foreground\">\n                          Use the chat to coordinate and share notes during\n                          gameplay\n                        </p>\n                      </div>\n                    </TabsContent>\n                  </Tabs>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Chat Sidebar */}\n            <div>\n              <Card className=\"h-[600px] flex flex-col\">\n                <CardHeader className=\"flex-shrink-0\">\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <i className=\"fas fa-comments text-blue-500\"></i>\n                    Game Chat\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"flex-1 flex flex-col p-0\">\n                  <ScrollArea className=\"flex-1 p-4\">\n                    <div className=\"space-y-4\">\n                      {messages.length === 0 ? (\n                        <div className=\"text-center text-muted-foreground py-8\">\n                          <i className=\"fas fa-comment-dots text-2xl mb-2\"></i>\n                          <p>No messages yet. Start the conversation!</p>\n                        </div>\n                      ) : (\n                        messages.map((message, index) => (\n                          <div key={index} className=\"flex items-start gap-3\">\n                            <Avatar className=\"h-8 w-8\">\n                              <AvatarImage\n                                src={message.sender?.profileImageUrl}\n                              />\n                              <AvatarFallback>\n                                {(\n                                  message.sender?.firstName ||\n                                  message.sender?.email ||\n                                  \"U\"\n                                )\n                                  .charAt(0)\n                                  .toUpperCase()}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-1\">\n                                <span className=\"font-medium text-sm\">\n                                  {message.sender?.firstName ||\n                                    message.sender?.email}\n                                </span>\n                                <span className=\"text-xs text-muted-foreground\">\n                                  {new Date(\n                                    message.timestamp,\n                                  ).toLocaleTimeString()}\n                                </span>\n                                {message.type === \"game_action\" && (\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    Game Action\n                                  </Badge>\n                                )}\n                              </div>\n                              <p className=\"text-sm\">{message.content}</p>\n                            </div>\n                          </div>\n                        ))\n                      )}\n                      <div ref={messagesEndRef} />\n                    </div>\n                  </ScrollArea>\n\n                  <Separator />\n\n                  <div className=\"p-4 flex-shrink-0\">\n                    {isSpectatorMode ? (\n                      <div className=\"text-center text-muted-foreground py-2\">\n                        <i className=\"fas fa-eye mr-2\"></i>\n                        Spectator mode - chat is view-only\n                      </div>\n                    ) : (\n                      <div className=\"flex gap-2\">\n                        <Input\n                          placeholder=\"Type a message...\"\n                          value={newMessage}\n                          onChange={(e) => setNewMessage(e.target.value)}\n                          onKeyPress={(e) => e.key === \"Enter\" && sendMessage()}\n                          data-testid=\"input-chat-message\"\n                        />\n                        <Button\n                          onClick={sendMessage}\n                          data-testid=\"button-send-message\"\n                        >\n                          <i className=\"fas fa-paper-plane\"></i>\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Quick Actions Bar */}\n          <div className=\"mt-6\">\n            <Card>\n              <CardContent className=\"py-4\">\n                <div className=\"flex items-center justify-between\">\n                  {isSpectatorMode ? (\n                    <div className=\"flex items-center gap-4 text-muted-foreground\">\n                      <i className=\"fas fa-eye mr-2\"></i>\n                      <span>\n                        Spectator Mode - You can watch but not interact with\n                        game controls\n                      </span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center gap-4\">\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => rollDice(6)}\n                        data-testid=\"button-quick-dice\"\n                      >\n                        <i className=\"fas fa-dice mr-2\"></i>\n                        Quick d6\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => rollDice(20)}\n                        data-testid=\"button-quick-d20\"\n                      >\n                        <i className=\"fas fa-dice-d20 mr-2\"></i>\n                        Quick d20\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        onClick={isTimerRunning ? pauseTimer : startTimer}\n                        data-testid=\"button-quick-timer\"\n                      >\n                        <i\n                          className={`fas ${isTimerRunning ? \"fa-pause\" : \"fa-play\"} mr-2`}\n                        ></i>\n                        {isTimerRunning ? \"Pause\" : \"Start\"} Timer\n                      </Button>\n                    </div>\n                  )}\n\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"text-sm text-muted-foreground\">\n                      Room Code:{\" \"}\n                      <code className=\"font-mono bg-muted px-2 py-1 rounded\">\n                        {sessionId?.slice(-6).toUpperCase()}\n                      </code>\n                    </div>\n                    {diceResult && (\n                      <div className=\"flex items-center gap-2 text-purple-600 dark:text-purple-400\">\n                        <i className=\"fas fa-dice\"></i>\n                        <span className=\"font-bold\">Rolled: {diceResult}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/getting-started.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":27,"column":62,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[996,1120],"text":"\n              Your complete guide to mastering Shuffle & Sync&apos;s streaming\n              coordination features.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[996,1120],"text":"\n              Your complete guide to mastering Shuffle & Sync&lsquo;s streaming\n              coordination features.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[996,1120],"text":"\n              Your complete guide to mastering Shuffle & Sync&#39;s streaming\n              coordination features.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[996,1120],"text":"\n              Your complete guide to mastering Shuffle & Sync&rsquo;s streaming\n              coordination features.\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Header } from \"@/shared/components\";\nimport { Footer } from \"@/shared/components\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function GettingStarted() {\n  const handleGoHome = () => {\n    window.location.href = \"/\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n\n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <div className=\"mb-8\">\n            <Badge className=\"bg-yellow-500/20 text-yellow-600 dark:text-yellow-400 text-lg px-4 py-2 mb-6\">\n              Coming Soon\n            </Badge>\n            <h1 className=\"text-4xl lg:text-5xl font-bold mb-4 text-foreground\">\n              Getting Started Guide\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Your complete guide to mastering Shuffle & Sync's streaming\n              coordination features.\n            </p>\n          </div>\n\n          <Card className=\"max-w-2xl mx-auto mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-center gap-3\">\n                <i className=\"fas fa-rocket text-primary text-2xl\"></i>\n                Launch Preparation\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <p className=\"text-muted-foreground\">\n                We&apos;re crafting the perfect onboarding experience. Our Getting\n                Started guide will feature:\n              </p>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-left\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-play text-green-500\"></i>\n                    <span className=\"text-sm\">Quick start checklist</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-gamepad text-blue-500\"></i>\n                    <span className=\"text-sm\">First stream setup</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-users text-purple-500\"></i>\n                    <span className=\"text-sm\">Community selection guide</span>\n                  </div>\n                </div>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-cog text-orange-500\"></i>\n                    <span className=\"text-sm\">Profile optimization</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-handshake text-pink-500\"></i>\n                    <span className=\"text-sm\">Finding collaborators</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-trophy text-yellow-500\"></i>\n                    <span className=\"text-sm\">Building your reputation</span>\n                  </div>\n                </div>\n              </div>\n\n              <Button\n                onClick={handleGoHome}\n                className=\"mt-6\"\n                data-testid=\"button-back-home\"\n              >\n                <i className=\"fas fa-home mr-2\"></i>\n                Back to Home\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/help-center.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/home.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/landing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/matchmaking.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'communityTheme' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":118,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":118,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'language' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":130,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4237,4240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4237,4240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'preferencesLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":137,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":137,"endColumn":64},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6493,6496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6493,6496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":212,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7052,7055],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7052,7055],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":228,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7486,7489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7486,7489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'toggleFormat' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":317,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":317,"endColumn":21},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":823,"column":36,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[34066,34143],"text":"\n                        Players you&apos;ve connected with\n                      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[34066,34143],"text":"\n                        Players you&lsquo;ve connected with\n                      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[34066,34143],"text":"\n                        Players you&#39;ve connected with\n                      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[34066,34143],"text":"\n                        Players you&rsquo;ve connected with\n                      "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":847,"column":36,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[35167,35247],"text":"\n                        Invites you&apos;ve sent and received\n                      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[35167,35247],"text":"\n                        Invites you&lsquo;ve sent and received\n                      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[35167,35247],"text":"\n                        Invites you&#39;ve sent and received\n                      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[35167,35247],"text":"\n                        Invites you&rsquo;ve sent and received\n                      "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from \"react\";\nimport { useDocumentTitle } from \"@/hooks/useDocumentTitle\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/features/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { MatchmakingPreferences } from \"@shared/schema\";\nimport { Header } from \"@/shared/components\";\nimport { useCommunity } from \"@/features/communities\";\n\nconst GAME_FORMATS = [\n  { id: \"commander\", name: \"Commander/EDH\", game: \"MTG\" },\n  { id: \"standard\", name: \"Standard\", game: \"MTG\" },\n  { id: \"modern\", name: \"Modern\", game: \"MTG\" },\n  { id: \"legacy\", name: \"Legacy\", game: \"MTG\" },\n  { id: \"draft\", name: \"Draft\", game: \"MTG\" },\n  { id: \"pokemon-standard\", name: \"Standard\", game: \"Pokemon\" },\n  { id: \"pokemon-expanded\", name: \"Expanded\", game: \"Pokemon\" },\n  { id: \"lorcana-constructed\", name: \"Constructed\", game: \"Lorcana\" },\n  { id: \"yugioh-advanced\", name: \"Advanced\", game: \"Yu-Gi-Oh\" },\n];\n\nconst SUGGESTED_PLAYERS = [\n  {\n    id: \"player1\",\n    username: \"CommanderCrafter\",\n    avatar: null,\n    games: [\"MTG\"],\n    formats: [\"Commander/EDH\"],\n    powerLevel: 7,\n    playstyle: \"Focused\",\n    location: \"Seattle, WA\",\n    availability: \"Evenings\",\n    matchScore: 95,\n    commonInterests: [\n      \"Tribal decks\",\n      \"Interactive games\",\n      \"No infinite combos\",\n    ],\n    lastOnline: \"2 hours ago\",\n    isOnline: true,\n  },\n  {\n    id: \"player2\",\n    username: \"PokeMaster2024\",\n    avatar: null,\n    games: [\"Pokemon\"],\n    formats: [\"Standard\", \"Expanded\"],\n    powerLevel: 8,\n    playstyle: \"Competitive\",\n    location: \"Austin, TX\",\n    availability: \"Weekends\",\n    matchScore: 87,\n    commonInterests: [\"Meta decks\", \"Tournament prep\", \"Theory crafting\"],\n    lastOnline: \"30 minutes ago\",\n    isOnline: true,\n  },\n  {\n    id: \"player3\",\n    username: \"LorcanaLore\",\n    avatar: null,\n    games: [\"Lorcana\"],\n    formats: [\"Constructed\"],\n    powerLevel: 5,\n    playstyle: \"Casual\",\n    location: \"Online Only\",\n    availability: \"Flexible\",\n    matchScore: 92,\n    commonInterests: [\"Disney lore\", \"Story discussions\", \"Deck building\"],\n    lastOnline: \"1 day ago\",\n    isOnline: false,\n  },\n  {\n    id: \"player4\",\n    username: \"YuGiOhVet\",\n    avatar: null,\n    games: [\"Yu-Gi-Oh\"],\n    formats: [\"Advanced\"],\n    powerLevel: 9,\n    playstyle: \"Competitive\",\n    location: \"New York, NY\",\n    availability: \"Daily\",\n    matchScore: 78,\n    commonInterests: [\"Meta analysis\", \"Combo decks\", \"Tournament play\"],\n    lastOnline: \"Online now\",\n    isOnline: true,\n  },\n];\n\nexport default function Matchmaking() {\n  useDocumentTitle(\"Matchmaking\");\n\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const { selectedCommunity, communityTheme } = useCommunity();\n\n  // Matchmaking preferences\n  const [selectedGames, setSelectedGames] = useState<string[]>([\"MTG\"]);\n  const [selectedFormats, setSelectedFormats] = useState<string[]>([\n    \"commander\",\n  ]);\n  const [powerLevelRange, setPowerLevelRange] = useState([5, 8]);\n  const [playstyle, setPlaystyle] = useState(\"any\");\n  const [location, setLocation] = useState(\"\");\n  const [onlineOnly, setOnlineOnly] = useState(false);\n  const [availability, setAvailability] = useState(\"any\");\n  const [language, setLanguage] = useState(\"english\");\n\n  // Search state\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState<any[]>([]);\n\n  // Fetch user's matchmaking preferences\n  const { data: savedPreferences, isLoading: preferencesLoading } =\n    useQuery<MatchmakingPreferences>({\n      queryKey: [\"/api/matchmaking/preferences\"],\n      enabled: !!user?.id,\n    });\n\n  // Load saved preferences when available\n  useEffect(() => {\n    if (savedPreferences) {\n      // Use a microtask to avoid cascading renders\n      queueMicrotask(() => {\n        // Parse JSON fields\n        const preferredFormats = savedPreferences.preferredFormats\n          ? typeof savedPreferences.preferredFormats === \"string\"\n            ? JSON.parse(savedPreferences.preferredFormats)\n            : savedPreferences.preferredFormats\n          : [];\n\n        const skillLevelRange = savedPreferences.skillLevelRange\n          ? typeof savedPreferences.skillLevelRange === \"string\"\n            ? JSON.parse(savedPreferences.skillLevelRange)\n            : savedPreferences.skillLevelRange\n          : [1, 10];\n\n        const availabilitySchedule = savedPreferences.availabilitySchedule\n          ? typeof savedPreferences.availabilitySchedule === \"string\"\n            ? JSON.parse(savedPreferences.availabilitySchedule)\n            : savedPreferences.availabilitySchedule\n          : {};\n\n        // Note: selectedGames is not in schema, using gameType instead\n        setSelectedGames([savedPreferences.gameType || \"MTG\"]);\n        setSelectedFormats(\n          preferredFormats.length > 0 ? preferredFormats : [\"commander\"],\n        );\n        setPowerLevelRange(\n          Array.isArray(skillLevelRange) && skillLevelRange.length === 2\n            ? skillLevelRange\n            : [1, 10],\n        );\n        setPlaystyle(savedPreferences.playStyle || \"any\");\n        setLocation(savedPreferences.preferredLocation || \"\");\n        // Note: onlineOnly is not in schema\n        setOnlineOnly(false);\n        // Convert availabilitySchedule object to a simple string for the UI\n        setAvailability(availabilitySchedule.general || \"any\");\n        // Note: language is not in matchmaking preferences schema\n        setLanguage(\"english\");\n      });\n    }\n  }, [savedPreferences]);\n\n  // Save preferences mutation\n  const savePreferencesMutation = useMutation({\n    mutationFn: async (preferencesData: any) => {\n      const response = await apiRequest(\n        \"PUT\",\n        \"/api/matchmaking/preferences\",\n        preferencesData,\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Preferences saved\",\n        description: \"Your matchmaking preferences have been updated.\",\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/matchmaking/preferences\"],\n      });\n    },\n  });\n\n  // Find players mutation\n  const findPlayersMutation = useMutation({\n    mutationFn: async (searchPreferences: any) => {\n      const response = await apiRequest(\n        \"POST\",\n        \"/api/matchmaking/find-players\",\n        searchPreferences,\n      );\n      return response.json();\n    },\n    onSuccess: (matches) => {\n      setSearchResults(matches);\n      setIsSearching(false);\n      toast({\n        title: \"Players found!\",\n        description: `Found ${matches.length} compatible players for you.`,\n      });\n    },\n    onError: (error: any) => {\n      setIsSearching(false);\n      toast({\n        title: \"Search failed\",\n        description: error.message || \"Failed to find matching players\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStartMatching = useCallback(() => {\n    setIsSearching(true);\n\n    const searchPreferences = {\n      gameType: selectedGames[0] || \"MTG\",\n      preferredFormats: JSON.stringify(selectedFormats),\n      skillLevelRange: JSON.stringify(powerLevelRange),\n      playStyle: playstyle,\n      preferredLocation: location,\n      availabilitySchedule: JSON.stringify({ general: availability }),\n      maxTravelDistance: 50,\n    };\n\n    // Save preferences and find matches\n    savePreferencesMutation.mutate(searchPreferences);\n    findPlayersMutation.mutate(searchPreferences);\n  }, [\n    selectedGames,\n    selectedFormats,\n    powerLevelRange,\n    playstyle,\n    location,\n    availability,\n    savePreferencesMutation,\n    findPlayersMutation,\n  ]);\n\n  const sendInviteMutation = useMutation({\n    mutationFn: async (data: { playerId: string; message?: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/friend-requests\", {\n        addresseeId: data.playerId,\n      });\n      return response.json();\n    },\n    onSuccess: (_, variables) => {\n      const player = searchResults.find((p) => p.id === variables.playerId);\n      toast({\n        title: \"Invite sent!\",\n        description: `Your game invite has been sent to ${player?.username || \"this player\"}. They'll receive a notification and can accept or decline.`,\n      });\n    },\n  });\n\n  const handleSendInvite = useCallback(\n    (playerId: string) => {\n      sendInviteMutation.mutate({ playerId });\n    },\n    [sendInviteMutation],\n  );\n\n  const handleMessagePlayer = useCallback(\n    (playerId: string) => {\n      const player = SUGGESTED_PLAYERS.find((p) => p.id === playerId);\n      if (player) {\n        toast({\n          title: \"Starting conversation\",\n          description: `Opening private message thread with ${player.username}...`,\n        });\n\n        // In a real app, this would navigate to a messaging interface\n        // or open a chat modal with the selected player\n        setTimeout(() => {\n          toast({\n            title: \"Message feature\",\n            description:\n              \"Direct messaging will be available in the next update. For now, use the invite system to connect!\",\n          });\n        }, 1000);\n      }\n    },\n    [toast],\n  );\n\n  const toggleGame = useCallback((game: string) => {\n    setSelectedGames((prev) =>\n      prev.includes(game) ? prev.filter((g) => g !== game) : [...prev, game],\n    );\n  }, []);\n\n  const toggleFormat = useCallback((format: string) => {\n    setSelectedFormats((prev) =>\n      prev.includes(format)\n        ? prev.filter((f) => f !== format)\n        : [...prev, format],\n    );\n  }, []);\n\n  const getInitials = useCallback((username: string) => {\n    return username.substring(0, 2).toUpperCase();\n  }, []);\n\n  return (\n    <div\n      className=\"min-h-screen\"\n      style={{\n        background: selectedCommunity\n          ? `linear-gradient(135deg, ${selectedCommunity.themeColor}15 0%, ${selectedCommunity.themeColor}05 100%)`\n          : \"var(--background)\",\n      }}\n    >\n      <Header />\n\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Header Section */}\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl lg:text-5xl font-bold mb-4 gradient-text\">\n              AI Matchmaking\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Find players with similar skill levels, playstyles, and interests.\n              Our AI learns your preferences to suggest the perfect gaming\n              partners.\n            </p>\n          </div>\n\n          <Tabs defaultValue=\"find-players\" className=\"space-y-8\">\n            <TabsList className=\"grid w-full grid-cols-3 max-w-2xl mx-auto\">\n              <TabsTrigger value=\"find-players\" data-testid=\"tab-find-players\">\n                Find Players\n              </TabsTrigger>\n              <TabsTrigger value=\"preferences\" data-testid=\"tab-preferences\">\n                Preferences\n              </TabsTrigger>\n              <TabsTrigger value=\"connections\" data-testid=\"tab-connections\">\n                Connections\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Find Players Tab */}\n            <TabsContent value=\"find-players\" className=\"space-y-8\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n                {/* Quick Filters */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Quick Match</CardTitle>\n                    <CardDescription>\n                      Set your preferences and find players instantly\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"space-y-2\">\n                      <Label>Games</Label>\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        {[\"MTG\", \"Pokemon\", \"Lorcana\", \"Yu-Gi-Oh\"].map(\n                          (game) => (\n                            <div\n                              key={game}\n                              className={`p-2 rounded border cursor-pointer transition-all text-center text-sm ${\n                                selectedGames.includes(game)\n                                  ? \"border-primary bg-primary/10\"\n                                  : \"border-border hover:border-muted-foreground\"\n                              }`}\n                              onClick={() => toggleGame(game)}\n                              data-testid={`game-${game.toLowerCase().replace(/[^a-z]/g, \"\")}`}\n                            >\n                              {game}\n                            </div>\n                          ),\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label>\n                        Power Level Range: {powerLevelRange[0]} -{\" \"}\n                        {powerLevelRange[1]}\n                      </Label>\n                      <Slider\n                        value={powerLevelRange}\n                        onValueChange={setPowerLevelRange}\n                        min={1}\n                        max={10}\n                        step={1}\n                        className=\"w-full\"\n                        data-testid=\"slider-power-level\"\n                      />\n                      <div className=\"flex justify-between text-xs text-muted-foreground\">\n                        <span>1 (Casual)</span>\n                        <span>10 (cEDH/Competitive)</span>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"playstyle\">Playstyle</Label>\n                      <Select value={playstyle} onValueChange={setPlaystyle}>\n                        <SelectTrigger data-testid=\"select-playstyle\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"any\">Any Playstyle</SelectItem>\n                          <SelectItem value=\"casual\">Casual</SelectItem>\n                          <SelectItem value=\"focused\">Focused</SelectItem>\n                          <SelectItem value=\"optimized\">Optimized</SelectItem>\n                          <SelectItem value=\"competitive\">\n                            Competitive\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"location\">Location (optional)</Label>\n                      <Input\n                        id=\"location\"\n                        placeholder=\"City, State or Online\"\n                        value={location}\n                        onChange={(e) => setLocation(e.target.value)}\n                        data-testid=\"input-location\"\n                      />\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"online-only\"\n                        checked={onlineOnly}\n                        onCheckedChange={setOnlineOnly}\n                        data-testid=\"switch-online-only\"\n                      />\n                      <Label htmlFor=\"online-only\" className=\"text-sm\">\n                        Online games only\n                      </Label>\n                    </div>\n\n                    <Button\n                      className=\"w-full\"\n                      onClick={handleStartMatching}\n                      disabled={isSearching}\n                      data-testid=\"button-start-matching\"\n                    >\n                      {isSearching ? (\n                        <>\n                          <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\n                          Finding Players...\n                        </>\n                      ) : (\n                        <>\n                          <i className=\"fas fa-search mr-2\"></i>\n                          Find Players\n                        </>\n                      )}\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                {/* Search Results */}\n                <div className=\"lg:col-span-2 space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <h2 className=\"text-2xl font-bold\">\n                      {isSearching\n                        ? \"Searching for players...\"\n                        : `${searchResults.length} Players Found`}\n                    </h2>\n                    {!isSearching && searchResults.length > 0 && (\n                      <Select defaultValue=\"match-score\">\n                        <SelectTrigger className=\"w-48\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"match-score\">\n                            Best Match\n                          </SelectItem>\n                          <SelectItem value=\"online\">Online Now</SelectItem>\n                          <SelectItem value=\"recent\">\n                            Recently Active\n                          </SelectItem>\n                          <SelectItem value=\"location\">Nearby</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    )}\n                  </div>\n\n                  {isSearching ? (\n                    <div className=\"space-y-4\">\n                      {[...Array(3)].map((_, i) => (\n                        <Card key={i} className=\"animate-pulse\">\n                          <CardContent className=\"p-6\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div className=\"w-16 h-16 bg-muted rounded-full\"></div>\n                              <div className=\"flex-1 space-y-2\">\n                                <div className=\"h-4 bg-muted rounded w-1/3\"></div>\n                                <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                                <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {searchResults.map((player) => (\n                        <Card\n                          key={player.id}\n                          className=\"hover:border-primary/50 transition-colors\"\n                        >\n                          <CardContent className=\"p-6\">\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex items-start space-x-4\">\n                                <div className=\"relative\">\n                                  <Avatar className=\"h-16 w-16\">\n                                    <AvatarImage\n                                      src={player.avatar || undefined}\n                                    />\n                                    <AvatarFallback className=\"bg-gradient-to-br from-primary to-secondary text-white\">\n                                      {getInitials(player.username)}\n                                    </AvatarFallback>\n                                  </Avatar>\n                                  {player.isOnline && (\n                                    <div className=\"absolute -bottom-1 -right-1 w-5 h-5 bg-green-500 border-2 border-background rounded-full\"></div>\n                                  )}\n                                </div>\n\n                                <div className=\"flex-1\">\n                                  <div className=\"flex items-center space-x-2 mb-2\">\n                                    <h3 className=\"font-semibold text-lg\">\n                                      {player.username}\n                                    </h3>\n                                    <Badge className=\"bg-primary/20 text-primary\">\n                                      {player.matchScore}% Match\n                                    </Badge>\n                                    {player.isOnline && (\n                                      <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30\">\n                                        Online\n                                      </Badge>\n                                    )}\n                                  </div>\n\n                                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 text-sm\">\n                                    <div className=\"space-y-1\">\n                                      <div className=\"flex items-center space-x-2\">\n                                        <i className=\"fas fa-gamepad text-muted-foreground\"></i>\n                                        <span>\n                                          {player.games.join(\", \")} •{\" \"}\n                                          {player.formats.join(\", \")}\n                                        </span>\n                                      </div>\n                                      <div className=\"flex items-center space-x-2\">\n                                        <i className=\"fas fa-chart-line text-muted-foreground\"></i>\n                                        <span>\n                                          Power Level {player.powerLevel} •{\" \"}\n                                          {player.playstyle}\n                                        </span>\n                                      </div>\n                                    </div>\n\n                                    <div className=\"space-y-1\">\n                                      <div className=\"flex items-center space-x-2\">\n                                        <i className=\"fas fa-map-marker-alt text-muted-foreground\"></i>\n                                        <span>{player.location}</span>\n                                      </div>\n                                      <div className=\"flex items-center space-x-2\">\n                                        <i className=\"fas fa-clock text-muted-foreground\"></i>\n                                        <span>\n                                          {player.availability} •{\" \"}\n                                          {player.lastOnline}\n                                        </span>\n                                      </div>\n                                    </div>\n                                  </div>\n\n                                  <div className=\"mt-3\">\n                                    <div className=\"text-sm text-muted-foreground mb-2\">\n                                      Common Interests:\n                                    </div>\n                                    <div className=\"flex flex-wrap gap-2\">\n                                      {player.commonInterests.map(\n                                        (interest: string, index: number) => (\n                                          <Badge\n                                            key={index}\n                                            variant=\"outline\"\n                                            className=\"text-xs\"\n                                          >\n                                            {interest}\n                                          </Badge>\n                                        ),\n                                      )}\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n\n                              <div className=\"flex flex-col space-y-2 ml-4\">\n                                <Button\n                                  size=\"sm\"\n                                  onClick={() => handleSendInvite(player.id)}\n                                  data-testid={`button-invite-${player.id}`}\n                                >\n                                  <i className=\"fas fa-plus mr-2\"></i>\n                                  Invite\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => handleMessagePlayer(player.id)}\n                                  data-testid={`button-message-${player.id}`}\n                                >\n                                  <i className=\"fas fa-comment mr-2\"></i>\n                                  Message\n                                </Button>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </TabsContent>\n\n            {/* Preferences Tab */}\n            <TabsContent value=\"preferences\">\n              <Card className=\"max-w-4xl mx-auto\">\n                <CardHeader>\n                  <CardTitle>Matchmaking Preferences</CardTitle>\n                  <CardDescription>\n                    Set your detailed preferences to help our AI find the\n                    perfect gaming partners\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-8\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                    <div className=\"space-y-6\">\n                      <div className=\"space-y-2\">\n                        <Label>Preferred Games</Label>\n                        <div className=\"grid grid-cols-2 gap-2\">\n                          {[\n                            \"Magic: The Gathering\",\n                            \"Pokemon\",\n                            \"Lorcana\",\n                            \"Yu-Gi-Oh\",\n                            \"Flesh and Blood\",\n                            \"One Piece\",\n                          ].map((game) => (\n                            <div\n                              key={game}\n                              className=\"flex items-center space-x-2 p-3 border rounded-lg cursor-pointer hover:border-primary/50 transition-colors\"\n                            >\n                              <input type=\"checkbox\" className=\"rounded\" />\n                              <span className=\"text-sm\">{game}</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label>Preferred Formats</Label>\n                        <div className=\"space-y-2\">\n                          {GAME_FORMATS.map((format) => (\n                            <div\n                              key={format.id}\n                              className=\"flex items-center space-x-2 p-2 border rounded cursor-pointer hover:border-primary/50 transition-colors\"\n                            >\n                              <input type=\"checkbox\" className=\"rounded\" />\n                              <span className=\"text-sm\">\n                                {format.game}: {format.name}\n                              </span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-6\">\n                      <div className=\"space-y-2\">\n                        <Label>Communication Preferences</Label>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Switch />\n                            <Label className=\"text-sm\">\n                              Voice chat during games\n                            </Label>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Switch />\n                            <Label className=\"text-sm\">\n                              Video chat for webcam games\n                            </Label>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Switch />\n                            <Label className=\"text-sm\">Text chat only</Label>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label>Availability</Label>\n                        <div className=\"grid grid-cols-2 gap-2\">\n                          {[\n                            \"Mornings\",\n                            \"Afternoons\",\n                            \"Evenings\",\n                            \"Late Night\",\n                            \"Weekends Only\",\n                            \"Flexible\",\n                          ].map((time) => (\n                            <div\n                              key={time}\n                              className=\"flex items-center space-x-2 p-2 border rounded cursor-pointer hover:border-primary/50 transition-colors\"\n                            >\n                              <input type=\"checkbox\" className=\"rounded\" />\n                              <span className=\"text-sm\">{time}</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"timezone\">Timezone</Label>\n                        <Select>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select your timezone\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"pst\">Pacific (PST)</SelectItem>\n                            <SelectItem value=\"mst\">Mountain (MST)</SelectItem>\n                            <SelectItem value=\"cst\">Central (CST)</SelectItem>\n                            <SelectItem value=\"est\">Eastern (EST)</SelectItem>\n                            <SelectItem value=\"utc\">UTC</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-end space-x-3\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => {\n                        setSelectedGames([\"MTG\"]);\n                        setSelectedFormats([\"commander\"]);\n                        setPowerLevelRange([1, 10]);\n                        setPlaystyle(\"any\");\n                        setLocation(\"\");\n                        setOnlineOnly(false);\n                        setAvailability(\"any\");\n                        setLanguage(\"english\");\n                        toast({\n                          title: \"Preferences reset\",\n                          description:\n                            \"All matchmaking preferences have been reset to defaults.\",\n                        });\n                      }}\n                      data-testid=\"button-reset-preferences\"\n                    >\n                      Reset to Defaults\n                    </Button>\n                    <Button\n                      onClick={() => {\n                        const preferencesData = {\n                          gameType: selectedGames[0] || \"MTG\", // Schema requires single gameType, not array\n                          preferredFormats: JSON.stringify(selectedFormats),\n                          skillLevelRange: JSON.stringify(powerLevelRange),\n                          playStyle: playstyle,\n                          preferredLocation: location,\n                          availabilitySchedule: JSON.stringify({\n                            general: availability,\n                          }),\n                          maxTravelDistance: 50,\n                        };\n                        savePreferencesMutation.mutate(preferencesData);\n                      }}\n                      disabled={savePreferencesMutation.isPending}\n                      data-testid=\"button-save-preferences\"\n                    >\n                      Save Preferences\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Connections Tab */}\n            <TabsContent value=\"connections\">\n              <div className=\"max-w-4xl mx-auto space-y-8\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <i className=\"fas fa-users text-primary\"></i>\n                        <span>My Connections</span>\n                      </CardTitle>\n                      <CardDescription>\n                        Players you've connected with\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-center py-8\">\n                        <i className=\"fas fa-user-friends text-4xl text-muted-foreground mb-4\"></i>\n                        <p className=\"text-muted-foreground mb-4\">\n                          No connections yet\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Use the matchmaking system to find and connect with\n                          players\n                        </p>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <i className=\"fas fa-paper-plane text-secondary\"></i>\n                        <span>Pending Invites</span>\n                      </CardTitle>\n                      <CardDescription>\n                        Invites you've sent and received\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div className=\"text-sm font-medium\">Sent (2)</div>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n                            <div className=\"flex items-center space-x-3\">\n                              <Avatar className=\"h-8 w-8\">\n                                <AvatarFallback>CM</AvatarFallback>\n                              </Avatar>\n                              <span className=\"text-sm\">CommanderCrafter</span>\n                            </div>\n                            <Badge variant=\"outline\">Pending</Badge>\n                          </div>\n                          <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n                            <div className=\"flex items-center space-x-3\">\n                              <Avatar className=\"h-8 w-8\">\n                                <AvatarFallback>PM</AvatarFallback>\n                              </Avatar>\n                              <span className=\"text-sm\">PokeMaster2024</span>\n                            </div>\n                            <Badge variant=\"outline\">Pending</Badge>\n                          </div>\n                        </div>\n\n                        <Separator />\n\n                        <div className=\"text-sm font-medium\">Received (1)</div>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n                            <div className=\"flex items-center space-x-3\">\n                              <Avatar className=\"h-8 w-8\">\n                                <AvatarFallback>DT</AvatarFallback>\n                              </Avatar>\n                              <div>\n                                <p className=\"text-sm font-medium\">\n                                  DragonTamer\n                                </p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  Wants to play Commander\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"flex gap-2\">\n                              <Button\n                                size=\"sm\"\n                                onClick={() => {\n                                  // TODO: Accept invite functionality\n                                  toast({\n                                    title:\n                                      \"Invite accepted! You can now connect with DragonTamer.\",\n                                  });\n                                }}\n                                data-testid=\"button-accept-invite\"\n                              >\n                                <i className=\"fas fa-check mr-1\"></i>\n                                Accept\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => {\n                                  // TODO: Decline invite functionality\n                                  toast({\n                                    title: \"Invite declined.\",\n                                    variant: \"destructive\",\n                                  });\n                                }}\n                                data-testid=\"button-decline-invite\"\n                              >\n                                <i className=\"fas fa-times mr-1\"></i>\n                                Decline\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/privacy.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":168,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6776,7019],"text":"\n                  We may update this Privacy Policy from time to time. We will\n                  notify you of any changes by posting the new Privacy Policy on\n                  this page and updating the &quot;Last updated\" date.\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6776,7019],"text":"\n                  We may update this Privacy Policy from time to time. We will\n                  notify you of any changes by posting the new Privacy Policy on\n                  this page and updating the &ldquo;Last updated\" date.\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6776,7019],"text":"\n                  We may update this Privacy Policy from time to time. We will\n                  notify you of any changes by posting the new Privacy Policy on\n                  this page and updating the &#34;Last updated\" date.\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6776,7019],"text":"\n                  We may update this Privacy Policy from time to time. We will\n                  notify you of any changes by posting the new Privacy Policy on\n                  this page and updating the &rdquo;Last updated\" date.\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":168,"column":59,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6776,7019],"text":"\n                  We may update this Privacy Policy from time to time. We will\n                  notify you of any changes by posting the new Privacy Policy on\n                  this page and updating the \"Last updated&quot; date.\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6776,7019],"text":"\n                  We may update this Privacy Policy from time to time. We will\n                  notify you of any changes by posting the new Privacy Policy on\n                  this page and updating the \"Last updated&ldquo; date.\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6776,7019],"text":"\n                  We may update this Privacy Policy from time to time. We will\n                  notify you of any changes by posting the new Privacy Policy on\n                  this page and updating the \"Last updated&#34; date.\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6776,7019],"text":"\n                  We may update this Privacy Policy from time to time. We will\n                  notify you of any changes by posting the new Privacy Policy on\n                  this page and updating the \"Last updated&rdquo; date.\n                "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Header } from \"@/shared/components\";\nimport { Footer } from \"@/shared/components\";\nimport { useDocumentTitle } from \"@/hooks/useDocumentTitle\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\n\nexport default function Privacy() {\n  useDocumentTitle(\"Privacy Policy - Shuffle & Sync\");\n  const [, setLocation] = useLocation();\n\n  const handleGoHome = () => {\n    setLocation(\"/\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n\n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl lg:text-5xl font-bold mb-4 text-foreground\">\n              Privacy Policy\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Last updated: September 18, 2025\n            </p>\n          </div>\n\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-3\">\n                <i className=\"fas fa-shield-alt text-primary text-xl\"></i>\n                Your Privacy Matters\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6 text-muted-foreground\">\n              <p>\n                At Shuffle & Sync, we take your privacy seriously. This Privacy\n                Policy describes how your personal information is collected,\n                used, and shared when you visit or make use of our service.\n              </p>\n\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-foreground\">\n                  1. Information We Collect\n                </h3>\n                <p>\n                  We collect information you provide directly to us, such as\n                  when you create an account, use our services, or contact us\n                  for support.\n                </p>\n                <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                  <li>\n                    <strong>Account Information:</strong> Username, email\n                    address, and authentication details\n                  </li>\n                  <li>\n                    <strong>Profile Information:</strong> Display name, avatar,\n                    and preferences\n                  </li>\n                  <li>\n                    <strong>Usage Data:</strong> Information about how you\n                    interact with our service\n                  </li>\n                  <li>\n                    <strong>Communication Data:</strong> Messages and\n                    correspondence with us\n                  </li>\n                </ul>\n              </div>\n\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-foreground\">\n                  2. How We Use Your Information\n                </h3>\n                <p>We use the information we collect to:</p>\n                <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                  <li>Provide, maintain, and improve our services</li>\n                  <li>Process transactions and send related information</li>\n                  <li>\n                    Send technical notices, updates, security alerts, and\n                    support messages\n                  </li>\n                  <li>\n                    Respond to your comments, questions, and customer service\n                    requests\n                  </li>\n                  <li>\n                    Monitor and analyze trends, usage, and activities in\n                    connection with our services\n                  </li>\n                </ul>\n              </div>\n\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-foreground\">\n                  3. Information Sharing\n                </h3>\n                <p>\n                  We do not sell, trade, or otherwise transfer your personal\n                  information to third parties without your consent, except as\n                  described in this policy:\n                </p>\n                <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                  <li>\n                    <strong>Service Providers:</strong> Third-party companies\n                    that help us operate our service\n                  </li>\n                  <li>\n                    <strong>Legal Requirements:</strong> When required by law or\n                    to protect our rights\n                  </li>\n                  <li>\n                    <strong>Business Transfers:</strong> In connection with\n                    mergers, acquisitions, or asset sales\n                  </li>\n                </ul>\n              </div>\n\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-foreground\">\n                  4. Data Security\n                </h3>\n                <p>\n                  We implement appropriate technical and organizational measures\n                  to protect your personal information against unauthorized\n                  access, alteration, disclosure, or destruction.\n                </p>\n              </div>\n\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-foreground\">\n                  5. Your Rights\n                </h3>\n                <p>You have the right to:</p>\n                <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                  <li>Access and update your personal information</li>\n                  <li>Request deletion of your personal information</li>\n                  <li>Object to processing of your personal information</li>\n                  <li>\n                    Request restriction of processing your personal information\n                  </li>\n                  <li>Request transfer of your personal information</li>\n                </ul>\n              </div>\n\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-foreground\">\n                  6. Cookies and Tracking\n                </h3>\n                <p>\n                  We use cookies and similar tracking technologies to track\n                  activity on our service and store certain information to\n                  improve your experience and analyze usage patterns.\n                </p>\n              </div>\n\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-foreground\">\n                  7. Changes to This Policy\n                </h3>\n                <p>\n                  We may update this Privacy Policy from time to time. We will\n                  notify you of any changes by posting the new Privacy Policy on\n                  this page and updating the \"Last updated\" date.\n                </p>\n              </div>\n\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-foreground\">\n                  8. Contact Us\n                </h3>\n                <p>\n                  If you have any questions about this Privacy Policy, please\n                  contact us at admin@shuffleandsync.com\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"text-center\">\n            <Button onClick={handleGoHome} data-testid=\"button-back-home\">\n              <i className=\"fas fa-home mr-2\"></i>\n              Back to Home\n            </Button>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/tablesync-landing.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":674,"column":29,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[33021,33154],"text":"\n              Join the world&apos;s most advanced platform for remote TCG gameplay\n              and streaming coordination.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[33021,33154],"text":"\n              Join the world&lsquo;s most advanced platform for remote TCG gameplay\n              and streaming coordination.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[33021,33154],"text":"\n              Join the world&#39;s most advanced platform for remote TCG gameplay\n              and streaming coordination.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[33021,33154],"text":"\n              Join the world&rsquo;s most advanced platform for remote TCG gameplay\n              and streaming coordination.\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Header } from \"@/shared/components\";\nimport { Footer } from \"@/shared/components\";\nimport { DemoModal } from \"@/components/DemoModal\";\nimport { useState } from \"react\";\n\nexport default function TableSyncLanding() {\n  const [isDemoOpen, setIsDemoOpen] = useState(false);\n\n  const handleGetStarted = () => {\n    window.location.href = \"/auth/register\";\n  };\n\n  const handleWatchDemo = () => {\n    setIsDemoOpen(true);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Header />\n\n      {/* Hero Section */}\n      <section className=\"relative py-20 lg:py-32 cartoon-hero-bg overflow-hidden\">\n        {/* Animated Background Elements */}\n        <div className=\"absolute inset-0\">\n          {/* Cosmic Sparkles */}\n          <div className=\"absolute top-20 left-10 w-1 h-1 bg-white rounded-full animate-sparkle opacity-90\"></div>\n          <div\n            className=\"absolute top-32 right-16 w-2 h-2 bg-yellow-300 clip-path-diamond animate-sparkle opacity-80\"\n            style={{ animationDelay: \"0.5s\" }}\n          ></div>\n          <div\n            className=\"absolute bottom-40 left-1/4 w-1 h-1 bg-cyan-300 rounded-full animate-sparkle opacity-70\"\n            style={{ animationDelay: \"1s\" }}\n          ></div>\n          <div\n            className=\"absolute bottom-24 right-1/3 w-3 h-3 bg-orange-300 clip-path-diamond animate-sparkle opacity-60\"\n            style={{ animationDelay: \"1.5s\" }}\n          ></div>\n          <div\n            className=\"absolute top-1/2 left-20 w-1 h-1 bg-purple-300 rounded-full animate-sparkle opacity-80\"\n            style={{ animationDelay: \"2s\" }}\n          ></div>\n          <div\n            className=\"absolute top-1/3 right-1/4 w-2 h-2 bg-pink-300 clip-path-diamond animate-sparkle opacity-70\"\n            style={{ animationDelay: \"2.5s\" }}\n          ></div>\n\n          {/* Floating Geometric Shapes */}\n          <div\n            className=\"absolute top-1/4 left-1/3 w-4 h-4 bg-gradient-to-br from-orange-400 to-pink-400 rounded-full animate-float opacity-30\"\n            style={{ animationDelay: \"0.3s\" }}\n          ></div>\n          <div\n            className=\"absolute bottom-1/3 right-1/4 w-3 h-3 bg-gradient-to-br from-purple-400 to-blue-400 clip-path-diamond animate-float opacity-40\"\n            style={{ animationDelay: \"1.2s\" }}\n          ></div>\n          <div\n            className=\"absolute top-3/4 left-1/5 w-2 h-2 bg-gradient-to-br from-cyan-400 to-teal-400 rounded-full animate-float opacity-50\"\n            style={{ animationDelay: \"1.8s\" }}\n          ></div>\n          <div\n            className=\"absolute top-1/5 right-1/5 w-5 h-5 bg-gradient-to-br from-yellow-400 to-orange-400 clip-path-diamond animate-float opacity-20\"\n            style={{ animationDelay: \"2.3s\" }}\n          ></div>\n\n          {/* Floating Gaming Icons */}\n          <div\n            className=\"absolute top-1/4 right-1/3 text-orange-400 text-sm animate-float opacity-60\"\n            style={{ animationDelay: \"0.8s\" }}\n          >\n            🎮\n          </div>\n          <div\n            className=\"absolute bottom-1/4 left-1/3 text-pink-400 text-sm animate-float opacity-50\"\n            style={{ animationDelay: \"1.5s\" }}\n          >\n            🃏\n          </div>\n          <div\n            className=\"absolute top-2/3 right-1/5 text-cyan-400 text-sm animate-float opacity-40\"\n            style={{ animationDelay: \"2.1s\" }}\n          >\n            🎲\n          </div>\n        </div>\n\n        <div className=\"container mx-auto px-4 text-center relative z-10\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Main Emblem Section */}\n            <div className=\"flex justify-center items-center mb-8\">\n              <div className=\"relative w-80 h-80\">\n                {/* Hexagonal Golden Border */}\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <div className=\"w-72 h-72 bg-gradient-to-br from-cyan-400 via-blue-400 to-purple-400 rounded-3xl transform rotate-12 opacity-10\"></div>\n                </div>\n\n                {/* Orbital Ring */}\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <div\n                    className=\"w-64 h-64 border-2 border-gradient-to-r from-cyan-400 to-purple-400 rounded-full opacity-15 animate-spin\"\n                    style={{ animationDuration: \"60s\" }}\n                  ></div>\n                </div>\n\n                {/* Floating Decorative Elements */}\n                <div className=\"absolute top-4 left-1/2 transform -translate-x-1/2\">\n                  <div className=\"w-6 h-6 bg-cyan-400 clip-path-diamond animate-float opacity-80\"></div>\n                </div>\n                <div className=\"absolute bottom-8 right-8\">\n                  <div\n                    className=\"w-4 h-4 bg-orange-400 rounded-full animate-float opacity-60\"\n                    style={{ animationDelay: \"1s\" }}\n                  ></div>\n                </div>\n                <div className=\"absolute top-12 left-8\">\n                  <div\n                    className=\"w-3 h-3 bg-pink-400 clip-path-diamond animate-float opacity-70\"\n                    style={{ animationDelay: \"2s\" }}\n                  ></div>\n                </div>\n                <div className=\"absolute bottom-12 left-12\">\n                  <div\n                    className=\"w-5 h-5 bg-purple-400 rounded-full animate-float opacity-50\"\n                    style={{ animationDelay: \"1.5s\" }}\n                  ></div>\n                </div>\n\n                {/* Left Game Character */}\n                <div className=\"absolute top-1/2 left-8 transform -translate-y-1/2 -rotate-12 z-10\">\n                  <div className=\"relative w-28 h-36 bg-gradient-to-br from-cyan-400 via-teal-400 to-blue-400 rounded-xl shadow-2xl border-4 border-yellow-400 animate-float-gentle\">\n                    <div className=\"absolute -top-2 left-2\">\n                      <div className=\"w-8 h-5 bg-gradient-to-r from-pink-400 to-orange-400 text-xs font-bold text-white rounded-full px-2 flex items-center justify-center shadow-lg\">\n                        SYNC\n                      </div>\n                    </div>\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <div className=\"w-16 h-16 bg-gradient-to-br from-blue-300 to-cyan-200 rounded-full flex items-center justify-center border-2 border-white shadow-lg\">\n                        <span className=\"text-3xl\">🎮</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Right Game Character */}\n                <div className=\"absolute top-1/2 right-8 transform -translate-y-1/2 rotate-12 z-10\">\n                  <div\n                    className=\"relative w-28 h-36 bg-gradient-to-br from-purple-500 via-indigo-500 to-blue-600 rounded-xl shadow-2xl border-4 border-yellow-400 animate-float-gentle\"\n                    style={{ animationDelay: \"0.5s\" }}\n                  >\n                    <div className=\"absolute -top-2 right-2\">\n                      <div className=\"w-8 h-5 bg-gradient-to-r from-purple-400 to-pink-400 text-xs font-bold text-white rounded-full px-2 flex items-center justify-center shadow-lg\">\n                        PLAY\n                      </div>\n                    </div>\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <div className=\"w-16 h-16 bg-gradient-to-br from-purple-300 to-indigo-200 rounded-full flex items-center justify-center border-2 border-white shadow-lg\">\n                        <span className=\"text-3xl\">🃏</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Central Energy Burst */}\n                <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-20\">\n                  <div className=\"relative\">\n                    {/* Energy Rays */}\n                    <div className=\"absolute inset-0\">\n                      <div className=\"w-1 h-12 bg-gradient-to-t from-transparent via-cyan-300 to-transparent absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 rotate-0 opacity-60\"></div>\n                      <div className=\"w-1 h-12 bg-gradient-to-t from-transparent via-purple-300 to-transparent absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 rotate-45 opacity-50\"></div>\n                      <div className=\"w-1 h-12 bg-gradient-to-t from-transparent via-pink-300 to-transparent absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 rotate-90 opacity-40\"></div>\n                      <div className=\"w-1 h-12 bg-gradient-to-t from-transparent via-orange-300 to-transparent absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 rotate-135 opacity-50\"></div>\n                    </div>\n\n                    {/* Central Burst */}\n                    <div className=\"w-8 h-8 bg-gradient-to-br from-white via-cyan-200 to-purple-300 rounded-full shadow-lg opacity-80\"></div>\n                    <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-6 h-6 bg-gradient-to-br from-cyan-300 to-purple-400 rounded-full shadow-md\">\n                      <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-sm font-bold\">\n                        🎲\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Golden Hexagonal Frame */}\n                <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n                  <div className=\"w-80 h-80 border-2 border-gradient-to-r from-cyan-300 via-purple-400 to-pink-300 rounded-3xl opacity-30 transform rotate-12\"></div>\n                </div>\n              </div>\n            </div>\n\n            <h1 className=\"text-5xl lg:text-7xl font-bold mb-6 cartoon-text leading-tight\">\n              <span className=\"bg-gradient-to-r from-cyan-400 via-blue-500 to-purple-500 bg-clip-text text-transparent\">\n                TableSync\n              </span>\n            </h1>\n\n            <div className=\"text-2xl lg:text-3xl font-semibold mb-4 text-orange-300\">\n              Remote TCG Gaming Made Epic\n            </div>\n            <p className=\"text-xl lg:text-2xl text-purple-200 mb-8 max-w-3xl mx-auto leading-relaxed\">\n              Connect with players worldwide for synchronized card game\n              sessions. Stream, play, and coordinate with the ultimate remote\n              gaming platform.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row gap-6 justify-center items-center mb-16\">\n              <Button\n                onClick={handleGetStarted}\n                size=\"lg\"\n                className=\"bg-gradient-to-r from-orange-500 via-yellow-500 to-orange-500 hover:from-orange-600 hover:via-yellow-600 hover:to-orange-600 text-white px-10 py-4 rounded-xl font-bold text-lg transition-all transform hover:scale-105 shadow-2xl\"\n                data-testid=\"button-start-playing\"\n              >\n                <i className=\"fas fa-gamepad mr-3\"></i>\n                Start Playing Free\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={handleWatchDemo}\n                size=\"lg\"\n                className=\"border-2 border-white/30 bg-white/10 backdrop-blur-sm hover:bg-white/20 text-white px-10 py-4 rounded-xl font-bold text-lg transition-all transform hover:scale-105\"\n                data-testid=\"button-watch-demo\"\n              >\n                <i className=\"fas fa-play mr-3\"></i>\n                Watch Demo\n              </Button>\n            </div>\n\n            {/* Feature highlights */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-cyan-500 to-blue-500 rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg\">\n                  <i className=\"fas fa-sync-alt text-white text-xl\"></i>\n                </div>\n                <div className=\"text-2xl font-bold text-cyan-400 mb-2\">\n                  Real-Time Sync\n                </div>\n                <div className=\"text-gray-300\">\n                  Perfect card game coordination across any distance\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg\">\n                  <i className=\"fas fa-video text-white text-xl\"></i>\n                </div>\n                <div className=\"text-2xl font-bold text-purple-400 mb-2\">\n                  HD Streaming\n                </div>\n                <div className=\"text-gray-300\">\n                  Crystal clear video quality for every game session\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-orange-500 to-yellow-500 rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg\">\n                  <i className=\"fas fa-users text-white text-xl\"></i>\n                </div>\n                <div className=\"text-2xl font-bold text-orange-400 mb-2\">\n                  Global Community\n                </div>\n                <div className=\"text-gray-300\">\n                  Connect with TCG players worldwide\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Supported Games Section */}\n      <section className=\"py-20 bg-gradient-to-br from-purple-900/20 via-blue-900/20 to-indigo-900/20 relative overflow-hidden\">\n        {/* Background decorations */}\n        <div className=\"absolute inset-0\">\n          <div className=\"absolute top-10 left-1/4 w-3 h-3 bg-yellow-400 rotate-45 animate-sparkle opacity-60\"></div>\n          <div\n            className=\"absolute bottom-16 right-1/3 w-2 h-2 bg-pink-400 rotate-45 animate-sparkle opacity-70\"\n            style={{ animationDelay: \"1s\" }}\n          ></div>\n          <div\n            className=\"absolute top-1/2 left-10 w-4 h-4 bg-cyan-400 rotate-45 animate-sparkle opacity-50\"\n            style={{ animationDelay: \"2s\" }}\n          ></div>\n        </div>\n\n        <div className=\"container mx-auto px-4 relative z-10\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl lg:text-5xl font-bold mb-4 cartoon-text\">\n              <span className=\"bg-gradient-to-r from-yellow-400 via-orange-500 to-red-500 bg-clip-text text-transparent\">\n                Supported Card Games\n              </span>\n            </h2>\n            <p className=\"text-xl text-purple-200 max-w-3xl mx-auto\">\n              TableSync works with all major trading card games. Pick your\n              favorite and start playing with the global community.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n            {[\n              {\n                name: \"Magic: The Gathering\",\n                icon: \"🧙\",\n                bg: \"from-blue-600 to-purple-600\",\n                community: \"Scry & Gather\",\n              },\n              {\n                name: \"Pokemon TCG\",\n                icon: \"⚡\",\n                bg: \"from-yellow-500 to-red-500\",\n                community: \"PokeStream Hub\",\n              },\n              {\n                name: \"Disney Lorcana\",\n                icon: \"✨\",\n                bg: \"from-purple-500 to-pink-500\",\n                community: \"Decksong\",\n              },\n              {\n                name: \"Yu-Gi-Oh!\",\n                icon: \"🐉\",\n                bg: \"from-indigo-600 to-blue-600\",\n                community: \"Duelcraft\",\n              },\n              {\n                name: \"Bladeforge\",\n                icon: \"⚔️\",\n                bg: \"from-gray-600 to-slate-600\",\n                community: \"Bladeforge\",\n              },\n              {\n                name: \"Deckmaster\",\n                icon: \"👑\",\n                bg: \"from-green-600 to-teal-600\",\n                community: \"Deckmaster\",\n              },\n            ].map((game) => (\n              <Card\n                key={game.name}\n                className=\"bg-white/10 backdrop-blur-sm border-white/20 hover:border-white/40 transition-all duration-300 transform hover:scale-105 group\"\n                data-testid={`card-game-${game.name.toLowerCase().replace(/[^a-z0-9]/g, \"-\")}`}\n              >\n                <CardContent className=\"p-6 text-center\">\n                  <div\n                    className={`w-20 h-20 bg-gradient-to-br ${game.bg} rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg group-hover:shadow-xl transition-shadow`}\n                  >\n                    <span className=\"text-3xl\">{game.icon}</span>\n                  </div>\n                  <h3 className=\"text-xl font-bold text-white mb-2\">\n                    {game.name}\n                  </h3>\n                  <Badge\n                    variant=\"secondary\"\n                    className=\"bg-white/20 text-white border-white/30\"\n                  >\n                    {game.community}\n                  </Badge>\n                  <div className=\"mt-4 text-gray-300 text-sm\">\n                    Join thousands of players streaming {game.name} worldwide\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works Section */}\n      <section className=\"py-20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl lg:text-5xl font-bold mb-4 cartoon-text\">\n              <span className=\"bg-gradient-to-r from-cyan-400 via-blue-500 to-purple-500 bg-clip-text text-transparent\">\n                How TableSync Works\n              </span>\n            </h2>\n            <p className=\"text-xl text-purple-200 max-w-3xl mx-auto\">\n              Get started in minutes with our streamlined remote gaming setup\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-12 max-w-6xl mx-auto\">\n            <div className=\"text-center\">\n              <div className=\"relative mb-8\">\n                <div className=\"w-24 h-24 bg-gradient-to-br from-green-500 to-teal-500 rounded-full flex items-center justify-center mx-auto shadow-xl\">\n                  <span className=\"text-4xl\">🎯</span>\n                </div>\n                <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-gradient-to-br from-yellow-400 to-orange-400 rounded-full flex items-center justify-center text-white font-bold text-sm shadow-lg\">\n                  1\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-bold text-white mb-4\">\n                Create or Join Room\n              </h3>\n              <p className=\"text-gray-300 leading-relaxed\">\n                Set up a new game room or browse active sessions. Choose your\n                game format, power level, and preferences.\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"relative mb-8\">\n                <div className=\"w-24 h-24 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center mx-auto shadow-xl\">\n                  <span className=\"text-4xl\">📹</span>\n                </div>\n                <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-gradient-to-br from-yellow-400 to-orange-400 rounded-full flex items-center justify-center text-white font-bold text-sm shadow-lg\">\n                  2\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-bold text-white mb-4\">\n                Stream & Sync\n              </h3>\n              <p className=\"text-gray-300 leading-relaxed\">\n                Share your screen and sync your gameplay in real-time. Our\n                technology ensures smooth coordination between all players.\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"relative mb-8\">\n                <div className=\"w-24 h-24 bg-gradient-to-br from-orange-500 to-red-500 rounded-full flex items-center justify-center mx-auto shadow-xl\">\n                  <span className=\"text-4xl\">🏆</span>\n                </div>\n                <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-gradient-to-br from-yellow-400 to-orange-400 rounded-full flex items-center justify-center text-white font-bold text-sm shadow-lg\">\n                  3\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-bold text-white mb-4\">\n                Play & Compete\n              </h3>\n              <p className=\"text-gray-300 leading-relaxed\">\n                Enjoy seamless remote gameplay with friends or compete in\n                tournaments. Build your reputation in the community.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Showcase */}\n      <section className=\"py-20 bg-gradient-to-br from-purple-900/20 via-blue-900/20 to-indigo-900/20 relative overflow-hidden\">\n        {/* Background decorations */}\n        <div className=\"absolute inset-0\">\n          <div className=\"absolute top-10 left-1/4 w-3 h-3 bg-yellow-400 rotate-45 animate-sparkle opacity-60\"></div>\n          <div\n            className=\"absolute bottom-16 right-1/3 w-2 h-2 bg-pink-400 rotate-45 animate-sparkle opacity-70\"\n            style={{ animationDelay: \"1s\" }}\n          ></div>\n          <div\n            className=\"absolute top-1/2 left-10 w-4 h-4 bg-cyan-400 rotate-45 animate-sparkle opacity-50\"\n            style={{ animationDelay: \"2s\" }}\n          ></div>\n        </div>\n\n        <div className=\"container mx-auto px-4 relative z-10\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl lg:text-5xl font-bold mb-4 cartoon-text\">\n              <span className=\"bg-gradient-to-r from-pink-400 via-purple-500 to-indigo-500 bg-clip-text text-transparent\">\n                Premium Features\n              </span>\n            </h2>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 max-w-6xl mx-auto\">\n            <Card className=\"bg-white/10 backdrop-blur-sm border-white/20 hover:border-white/40 transition-all duration-300\">\n              <CardContent className=\"p-8\">\n                <div className=\"flex items-center space-x-4 mb-6\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-cyan-500 to-blue-500 rounded-xl flex items-center justify-center shadow-lg\">\n                    <i className=\"fas fa-camera text-white text-2xl\"></i>\n                  </div>\n                  <div>\n                    <h3 className=\"text-2xl font-bold text-white mb-1\">\n                      Multi-Camera Setup\n                    </h3>\n                    <p className=\"text-gray-300\">\n                      Professional streaming quality\n                    </p>\n                  </div>\n                </div>\n                <p className=\"text-gray-300 mb-6 leading-relaxed\">\n                  Use multiple camera angles to showcase your gameplay. Perfect\n                  for content creators who want professional-quality streams.\n                </p>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-check-circle text-cyan-400\"></i>\n                    <span className=\"text-sm text-gray-300\">\n                      HD video quality\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-check-circle text-cyan-400\"></i>\n                    <span className=\"text-sm text-gray-300\">\n                      Multiple camera angles\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-check-circle text-cyan-400\"></i>\n                    <span className=\"text-sm text-gray-300\">\n                      OBS integration\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white/10 backdrop-blur-sm border-white/20 hover:border-white/40 transition-all duration-300 relative\">\n              <div className=\"absolute top-4 right-4 z-10\">\n                <Badge className=\"bg-green-500/80 text-green-900 font-bold\">\n                  Live Now\n                </Badge>\n              </div>\n              <CardContent className=\"p-8\">\n                <div className=\"flex items-center space-x-4 mb-6\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-xl flex items-center justify-center shadow-lg\">\n                    <i className=\"fas fa-magic text-white text-2xl\"></i>\n                  </div>\n                  <div>\n                    <h3 className=\"text-2xl font-bold text-white mb-1\">\n                      Card Recognition\n                    </h3>\n                    <p className=\"text-gray-300\">MTG card lookup & search</p>\n                  </div>\n                </div>\n                <p className=\"text-gray-300 mb-6 leading-relaxed\">\n                  Search and identify Magic: The Gathering cards instantly with\n                  our Scryfall-powered API. Get card details, pricing, and\n                  legality information.\n                </p>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-check-circle text-green-400\"></i>\n                    <span className=\"text-sm text-gray-300\">\n                      Text-based card search\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-check-circle text-green-400\"></i>\n                    <span className=\"text-sm text-gray-300\">\n                      Card details & pricing\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-check-circle text-green-400\"></i>\n                    <span className=\"text-sm text-gray-300\">\n                      Format legality checking\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white/10 backdrop-blur-sm border-white/20 hover:border-white/40 transition-all duration-300 relative\">\n              <div className=\"absolute top-4 right-4 z-10\">\n                <Badge className=\"bg-green-500/80 text-green-900 font-bold\">\n                  Live Now\n                </Badge>\n              </div>\n              <CardContent className=\"p-8\">\n                <div className=\"flex items-center space-x-4 mb-6\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-orange-500 to-yellow-500 rounded-xl flex items-center justify-center shadow-lg\">\n                    <i className=\"fas fa-comments text-white text-2xl\"></i>\n                  </div>\n                  <div>\n                    <h3 className=\"text-2xl font-bold text-white mb-1\">\n                      Real-Time Chat\n                    </h3>\n                    <p className=\"text-gray-300\">Seamless communication</p>\n                  </div>\n                </div>\n                <p className=\"text-gray-300 mb-6 leading-relaxed\">\n                  Built-in voice and text chat with game-specific features like\n                  card sharing and rule clarifications.\n                </p>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-check-circle text-green-400\"></i>\n                    <span className=\"text-sm text-gray-300\">\n                      Voice & text chat\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-check-circle text-green-400\"></i>\n                    <span className=\"text-sm text-gray-300\">\n                      WebRTC video calls\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-check-circle text-green-400\"></i>\n                    <span className=\"text-sm text-gray-300\">\n                      Real-time messaging\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white/10 backdrop-blur-sm border-white/20 hover:border-white/40 transition-all duration-300 relative\">\n              <div className=\"absolute top-4 right-4 z-10\">\n                <Badge className=\"bg-yellow-500/80 text-yellow-900 font-bold\">\n                  Coming Soon\n                </Badge>\n              </div>\n              <CardContent className=\"p-8 opacity-75\">\n                <div className=\"flex items-center space-x-4 mb-6\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-green-500 to-teal-500 rounded-xl flex items-center justify-center shadow-lg\">\n                    <i className=\"fas fa-trophy text-white text-2xl\"></i>\n                  </div>\n                  <div>\n                    <h3 className=\"text-2xl font-bold text-white mb-1\">\n                      Tournament Mode\n                    </h3>\n                    <p className=\"text-gray-300\">Competitive play</p>\n                  </div>\n                </div>\n                <p className=\"text-gray-300 mb-6 leading-relaxed\">\n                  Host or join organized tournaments with bracket management,\n                  timing controls, and automated score tracking.\n                </p>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-clock text-yellow-400\"></i>\n                    <span className=\"text-sm text-gray-300\">\n                      Bracket management\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-clock text-yellow-400\"></i>\n                    <span className=\"text-sm text-gray-300\">\n                      Automated timers\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-clock text-yellow-400\"></i>\n                    <span className=\"text-sm text-gray-300\">\n                      Prize tracking\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Call to Action */}\n      <section className=\"py-20 bg-gradient-to-r from-purple-900 via-blue-900 to-indigo-900 relative overflow-hidden\">\n        {/* Background decorations */}\n        <div className=\"absolute inset-0\">\n          <div className=\"absolute top-1/4 left-1/4 w-2 h-2 bg-yellow-400 rounded-full animate-sparkle opacity-60\"></div>\n          <div\n            className=\"absolute bottom-1/3 right-1/4 w-3 h-3 bg-pink-400 rounded-full animate-sparkle opacity-70\"\n            style={{ animationDelay: \"1s\" }}\n          ></div>\n          <div\n            className=\"absolute top-2/3 left-1/5 w-2 h-2 bg-cyan-400 rounded-full animate-sparkle opacity-50\"\n            style={{ animationDelay: \"2s\" }}\n          ></div>\n          <div\n            className=\"absolute top-1/5 right-1/5 w-4 h-4 bg-orange-400 rounded-full animate-sparkle opacity-40\"\n            style={{ animationDelay: \"1.5s\" }}\n          ></div>\n        </div>\n\n        <div className=\"container mx-auto px-4 text-center relative z-10\">\n          <div className=\"max-w-4xl mx-auto\">\n            <h2 className=\"text-4xl lg:text-6xl font-bold mb-6\">\n              <span className=\"bg-gradient-to-r from-yellow-400 via-orange-500 to-red-500 bg-clip-text text-transparent\">\n                Ready to Play?\n              </span>\n            </h2>\n            <p className=\"text-xl lg:text-2xl text-gray-300 mb-12 max-w-2xl mx-auto leading-relaxed\">\n              Join the world's most advanced platform for remote TCG gameplay\n              and streaming coordination.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row gap-6 justify-center items-center\">\n              <Button\n                onClick={handleGetStarted}\n                size=\"lg\"\n                className=\"bg-gradient-to-r from-yellow-500 via-orange-500 to-red-500 hover:from-yellow-600 hover:via-orange-600 hover:to-red-600 text-white px-12 py-5 rounded-xl font-bold text-xl transition-all transform hover:scale-105 shadow-2xl\"\n                data-testid=\"button-join-now\"\n              >\n                <i className=\"fas fa-rocket mr-3\"></i>\n                Join TableSync Free\n              </Button>\n            </div>\n\n            {/* Trust indicators */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-2xl mx-auto mt-16\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-yellow-400 mb-2\">\n                  Free\n                </div>\n                <div className=\"text-gray-300\">Always free to start</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-cyan-400 mb-2\">\n                  24/7\n                </div>\n                <div className=\"text-gray-300\">Global availability</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-purple-400 mb-2\">\n                  Secure\n                </div>\n                <div className=\"text-gray-300\">Safe & private gaming</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n\n      <DemoModal\n        isOpen={isDemoOpen}\n        onClose={() => setIsDemoOpen(false)}\n        type=\"tablesync\"\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/tablesync.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1680,1683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1680,1683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3296,3299],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3296,3299],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":680,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":680,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25121,25124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25121,25124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAuth } from \"@/features/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Header } from \"@/shared/components\";\nimport { useCommunity } from \"@/features/communities\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\n\nconst GAME_FORMATS = [\n  { id: \"commander\", name: \"Commander/EDH\", players: \"2-4 players\" },\n  { id: \"standard\", name: \"Standard\", players: \"2 players\" },\n  { id: \"modern\", name: \"Modern\", players: \"2 players\" },\n  { id: \"legacy\", name: \"Legacy\", players: \"2 players\" },\n  { id: \"draft\", name: \"Draft\", players: \"4-8 players\" },\n  { id: \"sealed\", name: \"Sealed\", players: \"2-8 players\" },\n  { id: \"casual\", name: \"Casual\", players: \"2-6 players\" },\n];\n\ninterface GameRoom {\n  id: string;\n  name: string;\n  host: {\n    id: string;\n    firstName?: string;\n    lastName?: string;\n    email: string;\n  };\n  format: string;\n  currentPlayers: number;\n  maxPlayers: number;\n  spectators: number;\n  powerLevel: string;\n  description: string;\n  communityId: string;\n  status: string;\n  gameData?: any;\n  createdAt: string;\n}\n\nexport default function TableSync() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const { selectedCommunity } = useCommunity();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const [roomName, setRoomName] = useState(\"\");\n  const [selectedFormat, setSelectedFormat] = useState(\"\");\n  const [maxPlayers, setMaxPlayers] = useState(\"4\");\n  const [powerLevel, setPowerLevel] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"join\");\n\n  // Fetch active game sessions\n  const { data: gameSessions = [], isLoading: isLoadingSessions } = useQuery({\n    queryKey: [\"/api/game-sessions\"],\n    select: (data: GameRoom[]) =>\n      data.filter((session) => session.status === \"waiting\"),\n  });\n\n  // Fetch upcoming game pod events that users can join\n  const { data: gameEvents = [], isLoading: isLoadingEvents } = useQuery({\n    queryKey: [\"/api/events\", \"game_pod\", \"upcoming\"],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      params.append(\"type\", \"game_pod\");\n      params.append(\"upcoming\", \"true\");\n      if (selectedCommunity?.id)\n        params.append(\"communityId\", selectedCommunity.id);\n\n      const response = await fetch(`/api/events?${params.toString()}`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch game pod events\");\n      return response.json();\n    },\n  });\n\n  // Create game session mutation\n  const createSessionMutation = useMutation({\n    mutationFn: async (sessionData: any) => {\n      const response = await apiRequest(\n        \"POST\",\n        \"/api/game-sessions\",\n        sessionData,\n      );\n      return await response.json();\n    },\n    onSuccess: (newSession) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/game-sessions\"] });\n      toast({\n        title: \"Room created successfully!\",\n        description: `Your ${selectedFormat} room \"${roomName}\" is now live. Redirecting to game room...`,\n      });\n\n      // Reset form after successful submission\n      setRoomName(\"\");\n      setSelectedFormat(\"\");\n      setMaxPlayers(\"4\");\n      setPowerLevel(\"\");\n      setDescription(\"\");\n\n      // Redirect to the game room\n      setLocation(`/tablesync/room/${newSession.id}`);\n    },\n    onError: (error) => {\n      console.error(\"Game session creation error:\", error);\n      toast({\n        title: \"Failed to create room\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Join game session mutation\n  const joinSessionMutation = useMutation({\n    mutationFn: async (sessionId: string) => {\n      const response = await apiRequest(\n        \"POST\",\n        `/api/game-sessions/${sessionId}/join`,\n      );\n      return await response.json();\n    },\n    onSuccess: (_, sessionId) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/game-sessions\"] });\n      toast({\n        title: \"Successfully joined!\",\n        description: \"Connecting to game room...\",\n      });\n      // Redirect to the game room\n      setLocation(`/tablesync/room/${sessionId}`);\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to join room\",\n        description: \"Room may be full or no longer available.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Spectate game session mutation\n  const spectateSessionMutation = useMutation({\n    mutationFn: async (sessionId: string) => {\n      const response = await apiRequest(\n        \"POST\",\n        `/api/game-sessions/${sessionId}/spectate`,\n      );\n      return await response.json();\n    },\n    onSuccess: (_, sessionId) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/game-sessions\"] });\n      toast({\n        title: \"Now spectating!\",\n        description: \"You can watch the game in progress.\",\n      });\n      // Redirect to the game room as spectator\n      setLocation(`/tablesync/room/${sessionId}?mode=spectate`);\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to spectate\",\n        description: \"Unable to join as spectator.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateRoom = async () => {\n    if (!roomName.trim()) {\n      toast({\n        title: \"Room name required\",\n        description: \"Please enter a name for your game room.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!selectedFormat) {\n      toast({\n        title: \"Format required\",\n        description: \"Please select a game format for your room.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!user) {\n      toast({\n        title: \"Authentication required\",\n        description: \"Please log in to create a game room.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!selectedCommunity?.id) {\n      toast({\n        title: \"Community required\",\n        description:\n          \"Please select a specific community to create a game room.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Create a temporary event for this game session\n    const tempEvent = {\n      title: `${roomName} - ${selectedFormat}`,\n      description: description.trim() || `${selectedFormat} game session`,\n      type: \"game_pod\",\n      date: new Date().toISOString().split(\"T\")[0] ?? \"\",\n      time: new Date().toTimeString().split(\" \")[0]?.slice(0, 5) ?? \"00:00\",\n      location: \"TableSync Remote\",\n      communityId: selectedCommunity.id,\n      maxAttendees: parseInt(maxPlayers),\n    };\n\n    try {\n      // First create an event\n      const eventResponse = await apiRequest(\"POST\", \"/api/events\", tempEvent);\n      const event = await eventResponse.json();\n\n      // Then create the game session\n      const sessionData = {\n        eventId: event.id,\n        maxPlayers: parseInt(maxPlayers),\n        communityId: selectedCommunity.id,\n        gameData: {\n          name: roomName,\n          format: selectedFormat,\n          powerLevel,\n          description: description.trim(),\n        },\n      };\n\n      createSessionMutation.mutate(sessionData);\n    } catch {\n      toast({\n        title: \"Failed to create room\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleJoinRoom = (sessionId: string) => {\n    if (!user) {\n      toast({\n        title: \"Authentication required\",\n        description: \"Please log in to join a game room.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const session = gameSessions.find((s) => s.id === sessionId);\n    if (session) {\n      if (session.currentPlayers >= session.maxPlayers) {\n        toast({\n          title: \"Room is full\",\n          description: `This room has reached its maximum capacity of ${session.maxPlayers} players.`,\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      joinSessionMutation.mutate(sessionId);\n    }\n  };\n\n  const handleSpectateRoom = (sessionId: string) => {\n    if (!user) {\n      toast({\n        title: \"Authentication required\",\n        description: \"Please log in to spectate a game room.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    spectateSessionMutation.mutate(sessionId);\n  };\n\n  // Event join mutation (reuse from calendar)\n  const eventJoinMutation = useMutation({\n    mutationFn: async ({\n      eventId,\n      isCurrentlyAttending,\n    }: {\n      eventId: string;\n      isCurrentlyAttending: boolean;\n    }) => {\n      const url = isCurrentlyAttending\n        ? `/api/events/${eventId}/leave`\n        : `/api/events/${eventId}/join`;\n      const method = isCurrentlyAttending ? \"DELETE\" : \"POST\";\n\n      const response = await fetch(url, {\n        method,\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body:\n          method === \"POST\"\n            ? JSON.stringify({ status: \"attending\" })\n            : undefined,\n      });\n      if (!response.ok)\n        throw new Error(\n          `Failed to ${isCurrentlyAttending ? \"leave\" : \"join\"} event`,\n        );\n      return response.json();\n    },\n    onSuccess: (_, { isCurrentlyAttending }) => {\n      toast({\n        title: isCurrentlyAttending\n          ? \"Left event successfully!\"\n          : \"Joined event successfully!\",\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/events\", \"game_pod\", \"upcoming\"],\n      });\n    },\n    onError: (_, { isCurrentlyAttending }) => {\n      toast({\n        title: `Failed to ${isCurrentlyAttending ? \"leave\" : \"join\"} event`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleJoinEvent = (eventId: string, isCurrentlyAttending: boolean) => {\n    if (!user) {\n      toast({\n        title: \"Authentication required\",\n        description: \"Please log in to join events.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    eventJoinMutation.mutate({ eventId, isCurrentlyAttending });\n  };\n\n  // Join event as player mutation - moved to component level to follow React Hooks rules\n  const joinEventAsPlayerMutation = useMutation({\n    mutationFn: async ({\n      eventId,\n      playerType,\n    }: {\n      eventId: string;\n      playerType: \"main\" | \"alternate\" | \"spectator\";\n    }) => {\n      const roleMap = {\n        main: \"participant\",\n        alternate: \"participant\",\n        spectator: \"spectator\",\n      };\n\n      const response = await fetch(`/api/events/${eventId}/join`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({\n          status: \"attending\",\n          role: roleMap[playerType],\n          playerType: playerType === \"spectator\" ? \"main\" : playerType,\n        }),\n      });\n      if (!response.ok) throw new Error(\"Failed to join event\");\n      return { data: await response.json(), playerType };\n    },\n    onSuccess: ({ playerType }) => {\n      const titleMap = {\n        main: \"Joined as player!\",\n        alternate: \"Added to waiting list!\",\n        spectator: \"Spectating event!\",\n      };\n\n      const descriptionMap = {\n        main: \"You&apos;re confirmed as a main player.\",\n        alternate: \"You'll be notified if a spot opens up.\",\n        spectator: \"You can watch this event when it starts.\",\n      };\n\n      toast({\n        title: titleMap[playerType],\n        description: descriptionMap[playerType],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/events\", \"game_pod\", \"upcoming\"],\n      });\n    },\n    onError: (error, { playerType }) => {\n      toast({\n        title: `Failed to join as ${playerType}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleJoinEventAsPlayer = (\n    eventId: string,\n    playerType: \"main\" | \"alternate\" | \"spectator\",\n  ) => {\n    if (!user) {\n      toast({\n        title: \"Authentication required\",\n        description: \"Please log in to join events.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    joinEventAsPlayerMutation.mutate({ eventId, playerType });\n  };\n\n  return (\n    <div\n      className=\"min-h-screen\"\n      style={{\n        background: selectedCommunity\n          ? `linear-gradient(135deg, ${selectedCommunity.themeColor}15 0%, ${selectedCommunity.themeColor}05 100%)`\n          : \"var(--background)\",\n      }}\n    >\n      <Header />\n\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Header Section with New Branding */}\n          <div className=\"text-center mb-12 space-y-6\">\n            <h1 className=\"text-4xl lg:text-5xl font-bold mb-4 bg-gradient-to-r from-purple-600 via-orange-500 to-purple-600 bg-clip-text text-transparent\">\n              TableSync\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto mb-6\">\n              Connect with players worldwide for remote TCG gameplay.\n              Synchronize your card games across any distance with real-time\n              coordination.\n            </p>\n            <div className=\"flex items-center justify-center gap-6 text-sm text-muted-foreground\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-2 h-2 rounded-full bg-purple-500\"></div>\n                <span>Real-time Sync</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-2 h-2 rounded-full bg-orange-500\"></div>\n                <span>Global Play</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-2 h-2 rounded-full bg-purple-500\"></div>\n                <span>All TCG Games</span>\n              </div>\n            </div>\n          </div>\n\n          <Tabs\n            value={activeTab}\n            onValueChange={setActiveTab}\n            className=\"space-y-8\"\n          >\n            <TabsList className=\"grid w-full grid-cols-2 max-w-md mx-auto bg-gradient-to-r from-purple-100 to-orange-100 dark:from-purple-900 dark:to-orange-900\">\n              <TabsTrigger\n                value=\"join\"\n                data-testid=\"tab-join-room\"\n                className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-purple-500 data-[state=active]:to-orange-500 data-[state=active]:text-white\"\n              >\n                <i className=\"fas fa-users mr-2\"></i>\n                Join Room\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"create\"\n                data-testid=\"tab-create-room\"\n                className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-orange-500 data-[state=active]:to-purple-500 data-[state=active]:text-white\"\n              >\n                <i className=\"fas fa-plus-circle mr-2\"></i>\n                Create Room\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Join Room Tab */}\n            <TabsContent value=\"join\" className=\"space-y-6\">\n              {isLoadingSessions || isLoadingEvents ? (\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n                  {[1, 2, 3].map((i) => (\n                    <Card key={i} className=\"animate-pulse\">\n                      <CardHeader>\n                        <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded mb-2\"></div>\n                        <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2\"></div>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-2\">\n                          <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                          <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded mt-4\"></div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : gameSessions.length === 0 && gameEvents.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"max-w-md mx-auto\">\n                    <i className=\"fas fa-gamepad text-4xl text-muted-foreground mb-4\"></i>\n                    <h3 className=\"text-lg font-semibold mb-2\">\n                      No Active Rooms or Events\n                    </h3>\n                    <p className=\"text-muted-foreground mb-4\">\n                      No game rooms are currently available and no upcoming game\n                      pod events. Be the first to create one!\n                    </p>\n                    <Button\n                      onClick={() => setActiveTab(\"create\")}\n                      data-testid=\"button-create-first-room\"\n                    >\n                      Create First Room\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"space-y-8\">\n                  {/* Active Game Sessions */}\n                  {gameSessions.length > 0 && (\n                    <div>\n                      <h3 className=\"text-xl font-semibold mb-4\">\n                        Active Game Rooms\n                      </h3>\n                      <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n                        {gameSessions.map((session) => (\n                          <Card\n                            key={session.id}\n                            className=\"hover:border-purple-400 transition-all duration-300 hover:shadow-lg hover:shadow-purple-500/20 border-2\"\n                            data-testid={`card-room-${session.id}`}\n                          >\n                            <CardHeader>\n                              <div className=\"flex items-start justify-between\">\n                                <div>\n                                  <CardTitle className=\"text-lg\">\n                                    {session.gameData?.name || \"Game Room\"}\n                                  </CardTitle>\n                                  <CardDescription>\n                                    Hosted by{\" \"}\n                                    {session.host?.firstName ||\n                                      session.host?.email}\n                                  </CardDescription>\n                                </div>\n                                <div className=\"flex gap-2\">\n                                  <Badge\n                                    variant=\"secondary\"\n                                    className=\"bg-green-500/20 text-green-400 border-green-500/30\"\n                                  >\n                                    {session.currentPlayers}/\n                                    {session.maxPlayers}\n                                  </Badge>\n                                  {session.spectators > 0 && (\n                                    <Badge\n                                      variant=\"outline\"\n                                      className=\"bg-blue-500/20 text-blue-400 border-blue-500/30\"\n                                    >\n                                      <i className=\"fas fa-eye mr-1\"></i>\n                                      {session.spectators}\n                                    </Badge>\n                                  )}\n                                </div>\n                              </div>\n                            </CardHeader>\n                            <CardContent className=\"space-y-4\">\n                              <div className=\"space-y-2\">\n                                <div className=\"flex items-center justify-between text-sm\">\n                                  <span className=\"text-muted-foreground\">\n                                    Format:\n                                  </span>\n                                  <span className=\"font-medium\">\n                                    {session.gameData?.format ||\n                                      \"Not specified\"}\n                                  </span>\n                                </div>\n                                <div className=\"flex items-center justify-between text-sm\">\n                                  <span className=\"text-muted-foreground\">\n                                    Power Level:\n                                  </span>\n                                  <span className=\"font-medium\">\n                                    {session.gameData?.powerLevel || \"Any\"}\n                                  </span>\n                                </div>\n                                <div className=\"flex items-center justify-between text-sm\">\n                                  <span className=\"text-muted-foreground\">\n                                    Status:\n                                  </span>\n                                  <Badge\n                                    variant=\"outline\"\n                                    className=\"text-xs capitalize\"\n                                  >\n                                    {session.status}\n                                  </Badge>\n                                </div>\n                              </div>\n\n                              <p className=\"text-sm text-muted-foreground\">\n                                {session.gameData?.description ||\n                                  \"No description provided\"}\n                              </p>\n\n                              <div className=\"space-y-2\">\n                                {session.currentPlayers < session.maxPlayers ? (\n                                  <Button\n                                    className=\"w-full\"\n                                    onClick={() => handleJoinRoom(session.id)}\n                                    disabled={joinSessionMutation.isPending}\n                                    data-testid={`button-join-${session.id}`}\n                                  >\n                                    {joinSessionMutation.isPending ? (\n                                      <>\n                                        <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n                                        Joining...\n                                      </>\n                                    ) : (\n                                      <>\n                                        <i className=\"fas fa-gamepad mr-2\"></i>\n                                        Join Game\n                                      </>\n                                    )}\n                                  </Button>\n                                ) : (\n                                  <Button\n                                    className=\"w-full\"\n                                    variant=\"outline\"\n                                    onClick={() =>\n                                      handleSpectateRoom(session.id)\n                                    }\n                                    disabled={spectateSessionMutation.isPending}\n                                    data-testid={`button-spectate-${session.id}`}\n                                  >\n                                    {spectateSessionMutation.isPending ? (\n                                      <>\n                                        <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n                                        Spectating...\n                                      </>\n                                    ) : (\n                                      <>\n                                        <i className=\"fas fa-eye mr-2\"></i>\n                                        Spectate (Full)\n                                      </>\n                                    )}\n                                  </Button>\n                                )}\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))}\n                      </div>\n\n                      {/* Upcoming Game Pod Events */}\n                      {gameEvents.length > 0 && (\n                        <div>\n                          <h3 className=\"text-xl font-semibold mb-4\">\n                            Upcoming Game Pod Events\n                          </h3>\n                          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n                            {gameEvents.map((event: any) => (\n                              <Card\n                                key={event.id}\n                                className=\"hover:border-blue-400 transition-all duration-300 hover:shadow-lg hover:shadow-blue-500/20 border-2\"\n                                data-testid={`card-event-${event.id}`}\n                              >\n                                <CardHeader>\n                                  <div className=\"flex items-start justify-between\">\n                                    <div>\n                                      <CardTitle className=\"text-lg\">\n                                        {event.title}\n                                      </CardTitle>\n                                      <CardDescription>\n                                        Hosted by{\" \"}\n                                        {event.creator?.firstName ||\n                                          event.creator?.email}\n                                      </CardDescription>\n                                    </div>\n                                    <div className=\"flex gap-2\">\n                                      <Badge\n                                        variant=\"secondary\"\n                                        className=\"bg-blue-500/20 text-blue-400 border-blue-500/30\"\n                                      >\n                                        <i className=\"fas fa-users mr-1\"></i>\n                                        {event.mainPlayers || 0}/\n                                        {event.playerSlots || 4}\n                                      </Badge>\n                                      {event.alternateSlots > 0 && (\n                                        <Badge\n                                          variant=\"outline\"\n                                          className=\"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\"\n                                        >\n                                          <i className=\"fas fa-clock mr-1\"></i>\n                                          {event.alternates || 0}/\n                                          {event.alternateSlots}\n                                        </Badge>\n                                      )}\n                                    </div>\n                                  </div>\n                                </CardHeader>\n                                <CardContent className=\"space-y-4\">\n                                  <div className=\"space-y-2\">\n                                    <div className=\"flex items-center justify-between text-sm\">\n                                      <span className=\"text-muted-foreground\">\n                                        Date:\n                                      </span>\n                                      <span className=\"font-medium\">\n                                        {new Date(\n                                          event.date,\n                                        ).toLocaleDateString()}\n                                      </span>\n                                    </div>\n                                    <div className=\"flex items-center justify-between text-sm\">\n                                      <span className=\"text-muted-foreground\">\n                                        Time:\n                                      </span>\n                                      <span className=\"font-medium\">\n                                        {event.time}\n                                      </span>\n                                    </div>\n                                    <div className=\"flex items-center justify-between text-sm\">\n                                      <span className=\"text-muted-foreground\">\n                                        Location:\n                                      </span>\n                                      <span className=\"font-medium\">\n                                        {event.location}\n                                      </span>\n                                    </div>\n                                  </div>\n\n                                  <p className=\"text-sm text-muted-foreground\">\n                                    {event.description ||\n                                      \"No description provided\"}\n                                  </p>\n\n                                  {user ? (\n                                    <div className=\"space-y-2\">\n                                      {!event.isUserAttending ? (\n                                        <>\n                                          {(event.mainPlayers || 0) <\n                                          (event.playerSlots || 4) ? (\n                                            <Button\n                                              className=\"w-full\"\n                                              onClick={() =>\n                                                handleJoinEventAsPlayer(\n                                                  event.id,\n                                                  \"main\",\n                                                )\n                                              }\n                                              data-testid={`button-join-main-${event.id}`}\n                                            >\n                                              <i className=\"fas fa-gamepad mr-2\"></i>\n                                              Join as Player\n                                            </Button>\n                                          ) : event.alternateSlots > 0 &&\n                                            (event.alternates || 0) <\n                                              event.alternateSlots ? (\n                                            <Button\n                                              className=\"w-full\"\n                                              variant=\"outline\"\n                                              onClick={() =>\n                                                handleJoinEventAsPlayer(\n                                                  event.id,\n                                                  \"alternate\",\n                                                )\n                                              }\n                                              data-testid={`button-join-alternate-${event.id}`}\n                                            >\n                                              <i className=\"fas fa-clock mr-2\"></i>\n                                              Join Waiting List\n                                            </Button>\n                                          ) : (\n                                            <Button\n                                              className=\"w-full\"\n                                              variant=\"secondary\"\n                                              onClick={() =>\n                                                handleJoinEventAsPlayer(\n                                                  event.id,\n                                                  \"spectator\",\n                                                )\n                                              }\n                                              data-testid={`button-spectate-event-${event.id}`}\n                                            >\n                                              <i className=\"fas fa-eye mr-2\"></i>\n                                              Spectate Event\n                                            </Button>\n                                          )}\n                                        </>\n                                      ) : (\n                                        <Button\n                                          className=\"w-full\"\n                                          variant=\"secondary\"\n                                          onClick={() =>\n                                            handleJoinEvent(event.id, true)\n                                          }\n                                          data-testid={`button-leave-event-${event.id}`}\n                                        >\n                                          <i className=\"fas fa-sign-out-alt mr-2\"></i>\n                                          Leave Event\n                                        </Button>\n                                      )}\n                                    </div>\n                                  ) : (\n                                    <Button\n                                      className=\"w-full\"\n                                      variant=\"outline\"\n                                      onClick={() =>\n                                        toast({\n                                          title: \"Please log in to join events\",\n                                          variant: \"destructive\",\n                                        })\n                                      }\n                                      data-testid={`button-login-event-${event.id}`}\n                                    >\n                                      <i className=\"fas fa-sign-in-alt mr-2\"></i>\n                                      Login to Join\n                                    </Button>\n                                  )}\n                                </CardContent>\n                              </Card>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              )}\n            </TabsContent>\n\n            {/* Create Room Tab */}\n            <TabsContent value=\"create\">\n              <Card className=\"max-w-2xl mx-auto border-2 border-orange-200 dark:border-orange-800 bg-gradient-to-br from-orange-50 to-purple-50 dark:from-orange-950 dark:to-purple-950\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-orange-500 to-purple-500 rounded-lg flex items-center justify-center\">\n                      <i className=\"fas fa-gamepad text-white text-sm\"></i>\n                    </div>\n                    <span className=\"bg-gradient-to-r from-orange-600 to-purple-600 bg-clip-text text-transparent\">\n                      Create New Game Room\n                    </span>\n                  </CardTitle>\n                  <CardDescription>\n                    Set up a new TableSync room for remote gameplay with other\n                    TCG enthusiasts around the world\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {/* Community Selection Notice */}\n                  {!selectedCommunity?.id && (\n                    <div className=\"p-4 bg-yellow-50 dark:bg-yellow-950/20 border border-yellow-200 dark:border-yellow-800 rounded-lg\">\n                      <div className=\"flex items-center gap-2 text-yellow-800 dark:text-yellow-200\">\n                        <i className=\"fas fa-info-circle\"></i>\n                        <span className=\"text-sm font-medium\">\n                          Please select a specific community from the dropdown\n                          above to create a game room.\n                        </span>\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"room-name\">Room Name</Label>\n                    <Input\n                      id=\"room-name\"\n                      placeholder=\"Enter a descriptive room name\"\n                      value={roomName}\n                      onChange={(e) => setRoomName(e.target.value)}\n                      data-testid=\"input-room-name\"\n                      disabled={!selectedCommunity?.id}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"game-format\">Game Format</Label>\n                    <Select\n                      value={selectedFormat}\n                      onValueChange={setSelectedFormat}\n                    >\n                      <SelectTrigger data-testid=\"select-game-format\">\n                        <SelectValue placeholder=\"Select game format\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {GAME_FORMATS.map((format) => (\n                          <SelectItem key={format.id} value={format.id}>\n                            {format.name} ({format.players})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"max-players\">Max Players</Label>\n                      <Select value={maxPlayers} onValueChange={setMaxPlayers}>\n                        <SelectTrigger data-testid=\"select-max-players\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"2\">2 Players</SelectItem>\n                          <SelectItem value=\"3\">3 Players</SelectItem>\n                          <SelectItem value=\"4\">4 Players</SelectItem>\n                          <SelectItem value=\"5\">5 Players</SelectItem>\n                          <SelectItem value=\"6\">6 Players</SelectItem>\n                          <SelectItem value=\"8\">8 Players</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"power-level\">Power Level</Label>\n                      <Select value={powerLevel} onValueChange={setPowerLevel}>\n                        <SelectTrigger data-testid=\"select-power-level\">\n                          <SelectValue placeholder=\"Select power level\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"casual\">Casual (1-4)</SelectItem>\n                          <SelectItem value=\"focused\">Focused (5-6)</SelectItem>\n                          <SelectItem value=\"optimized\">\n                            Optimized (7-8)\n                          </SelectItem>\n                          <SelectItem value=\"competitive\">\n                            Competitive (9-10)\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"description\">Room Description</Label>\n                    <Input\n                      id=\"description\"\n                      placeholder=\"Describe your playstyle, deck restrictions, or anything players should know\"\n                      value={description}\n                      onChange={(e) => setDescription(e.target.value)}\n                      data-testid=\"input-description\"\n                    />\n                  </div>\n\n                  <Button\n                    className=\"w-full bg-gradient-to-r from-orange-500 to-purple-500 hover:from-orange-600 hover:to-purple-600 transition-all duration-300 disabled:opacity-50\"\n                    onClick={handleCreateRoom}\n                    disabled={\n                      !roomName ||\n                      !selectedFormat ||\n                      createSessionMutation.isPending ||\n                      !user ||\n                      !selectedCommunity?.id\n                    }\n                    data-testid=\"button-create-room\"\n                  >\n                    {createSessionMutation.isPending ? (\n                      <>\n                        <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n                        Creating Room...\n                      </>\n                    ) : !selectedCommunity?.id ? (\n                      <>\n                        <i className=\"fas fa-dice-d20 mr-2\"></i>\n                        Select Community First\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-plus-circle mr-2\"></i>\n                        Create Room\n                      </>\n                    )}\n                  </Button>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/terms.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/tournament-detail.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1368,1371],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1368,1371],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1452,1455],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1452,1455],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1475,1478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1475,1478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":451,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":451,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17171,17174],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17171,17174],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":458,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":458,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17503,17506],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17503,17506],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useDocumentTitle } from \"@/hooks/useDocumentTitle\";\nimport { Header } from \"@/shared/components\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAuth } from \"@/features/auth\";\nimport TournamentBracket from \"@/components/tournament/TournamentBracket\";\nimport TournamentEditor from \"@/components/tournament/TournamentEditor\";\nimport type { Tournament, TournamentParticipant, User } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\nexport default function TournamentDetail() {\n  const { id: tournamentId } = useParams<{ id: string }>();\n  const [, setLocation] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  const [isEditMode, setIsEditMode] = useState(false);\n\n  // Fetch tournament details with expanded data\n  const {\n    data: tournament,\n    isLoading,\n    error,\n  } = useQuery<\n    Tournament & {\n      organizer: User;\n      community: any;\n      participants: (TournamentParticipant & { user: User })[];\n      rounds?: any[];\n      matches?: any[];\n      participantCount?: number;\n      currentParticipants?: number;\n    }\n  >({\n    queryKey: [\"/api/tournaments\", tournamentId, \"details\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/tournaments/${tournamentId}/details`);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch tournament details\");\n      }\n      return response.json();\n    },\n    enabled: !!tournamentId && isAuthenticated,\n  });\n\n  useDocumentTitle(\n    tournament ? `${tournament.name} - Tournament` : \"Tournament\",\n  );\n\n  const formatGameName = (format: string) => {\n    const gameFormats: Record<string, string> = {\n      commander: \"Commander/EDH\",\n      standard: \"Standard\",\n      modern: \"Modern\",\n      legacy: \"Legacy\",\n      draft: \"Draft\",\n      \"pokemon-standard\": \"Pokemon Standard\",\n      \"pokemon-expanded\": \"Pokemon Expanded\",\n      \"lorcana-constructed\": \"Lorcana Constructed\",\n      \"yugioh-advanced\": \"Yu-Gi-Oh Advanced\",\n    };\n    return gameFormats[format] || format;\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"upcoming\":\n        return \"default\";\n      case \"active\":\n        return \"destructive\";\n      case \"completed\":\n        return \"secondary\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const isOrganizer = user?.id === tournament?.organizerId;\n  const isParticipant = tournament?.participants?.some(\n    (p) => p.userId === user?.id,\n  );\n\n  // Show editor if in edit mode\n  if (isEditMode && tournament && isOrganizer) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background to-muted\">\n        <Header />\n        <main className=\"container mx-auto px-4 py-8\">\n          <TournamentEditor\n            tournament={tournament}\n            onClose={() => setIsEditMode(false)}\n          />\n        </main>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8\">\n          <Card className=\"max-w-md mx-auto text-center\">\n            <CardContent className=\"pt-6\">\n              <i className=\"fas fa-lock text-4xl text-muted-foreground mb-4\"></i>\n              <h2 className=\"text-xl font-semibold mb-2\">\n                Authentication Required\n              </h2>\n              <p className=\"text-muted-foreground mb-4\">\n                Please log in to view tournament details.\n              </p>\n              <Button onClick={() => setLocation(\"/tournaments\")}>\n                Back to Tournaments\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"max-w-4xl mx-auto space-y-6\">\n            {/* Header Skeleton */}\n            <Card>\n              <CardHeader>\n                <div className=\"animate-pulse space-y-2\">\n                  <div className=\"h-8 bg-muted rounded w-2/3\"></div>\n                  <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                </div>\n              </CardHeader>\n            </Card>\n\n            {/* Content Skeleton */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-3/4\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !tournament) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8\">\n          <Card className=\"max-w-md mx-auto text-center\">\n            <CardContent className=\"pt-6\">\n              <i className=\"fas fa-exclamation-triangle text-4xl text-muted-foreground mb-4\"></i>\n              <h2 className=\"text-xl font-semibold mb-2\">\n                Tournament Not Found\n              </h2>\n              <p className=\"text-muted-foreground mb-4\">\n                The tournament you&apos;re looking for doesn&apos;t exist or you don&apos;t\n                have access to it.\n              </p>\n              <Button onClick={() => setLocation(\"/tournaments\")}>\n                Back to Tournaments\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-muted\">\n      <Header />\n\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-6xl mx-auto space-y-6\">\n          {/* Tournament Header */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setLocation(\"/tournaments\")}\n                      data-testid=\"button-back-to-tournaments\"\n                    >\n                      <i className=\"fas fa-arrow-left mr-2\"></i>\n                      Back\n                    </Button>\n                  </div>\n                  <CardTitle className=\"text-3xl\">{tournament.name}</CardTitle>\n                  <CardDescription className=\"text-lg\">\n                    {formatGameName(tournament.gameType)} Tournament\n                  </CardDescription>\n                </div>\n                <div className=\"flex flex-col items-end space-y-2\">\n                  <Badge\n                    variant={getStatusBadgeVariant(\n                      tournament.status || \"upcoming\",\n                    )}\n                    className=\"text-sm\"\n                  >\n                    {tournament.status}\n                  </Badge>\n                  {isOrganizer && (\n                    <div className=\"flex flex-col space-y-2\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        <i className=\"fas fa-crown mr-1\"></i>\n                        Organizer\n                      </Badge>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => setIsEditMode(true)}\n                        data-testid=\"button-edit-tournament\"\n                        className=\"text-xs\"\n                      >\n                        <i className=\"fas fa-edit mr-2\"></i>\n                        Edit Tournament\n                      </Button>\n                    </div>\n                  )}\n                  {isParticipant && !isOrganizer && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      <i className=\"fas fa-user-check mr-1\"></i>\n                      Participant\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-muted-foreground\">Organizer:</span>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <Avatar className=\"w-6 h-6\">\n                      <AvatarImage\n                        src={tournament.organizer.profileImageUrl || undefined}\n                      />\n                      <AvatarFallback className=\"text-xs\">\n                        {(\n                          tournament.organizer.username ||\n                          tournament.organizer.firstName ||\n                          \"O\"\n                        )\n                          .slice(0, 2)\n                          .toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <span className=\"font-medium\">\n                      {tournament.organizer.username ||\n                        tournament.organizer.firstName}\n                    </span>\n                  </div>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Participants:</span>\n                  <p className=\"font-medium mt-1\">\n                    {tournament.participants?.length ||\n                      tournament.currentParticipants ||\n                      0}\n                    /{tournament.maxParticipants}\n                  </p>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Start Date:</span>\n                  <p className=\"font-medium mt-1\">\n                    {tournament.startDate\n                      ? format(\n                          new Date(tournament.startDate),\n                          \"MMM dd, yyyy HH:mm\",\n                        )\n                      : \"TBD\"}\n                  </p>\n                </div>\n                {tournament.prizePool && (\n                  <div>\n                    <span className=\"text-muted-foreground\">Prize Pool:</span>\n                    <p className=\"font-medium mt-1\">{tournament.prizePool}</p>\n                  </div>\n                )}\n              </div>\n\n              {tournament.description && (\n                <div className=\"mt-4 pt-4 border-t\">\n                  <p className=\"text-muted-foreground\">\n                    {tournament.description}\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Tournament Content */}\n          <Tabs defaultValue=\"bracket\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"bracket\" data-testid=\"tab-bracket\">\n                Bracket\n              </TabsTrigger>\n              <TabsTrigger value=\"participants\" data-testid=\"tab-participants\">\n                Participants\n              </TabsTrigger>\n              <TabsTrigger value=\"info\" data-testid=\"tab-info\">\n                Information\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Tournament Bracket */}\n            <TabsContent value=\"bracket\">\n              <TournamentBracket tournament={tournament} />\n            </TabsContent>\n\n            {/* Participants */}\n            <TabsContent value=\"participants\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>\n                    Participants ({tournament.participants?.length || 0})\n                  </CardTitle>\n                  <CardDescription>\n                    Players registered for this tournament\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {tournament.participants &&\n                  tournament.participants.length > 0 ? (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                      {tournament.participants.map((participant, index) => (\n                        <div\n                          key={participant.id}\n                          className=\"flex items-center space-x-3 p-3 bg-muted/50 rounded-lg\"\n                          data-testid={`participant-${participant.userId}`}\n                        >\n                          <Avatar>\n                            <AvatarImage\n                              src={\n                                participant.user.profileImageUrl || undefined\n                              }\n                            />\n                            <AvatarFallback>\n                              {(\n                                participant.user.username ||\n                                participant.user.firstName ||\n                                \"P\"\n                              )\n                                .slice(0, 2)\n                                .toUpperCase()}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1 min-w-0\">\n                            <p className=\"font-medium truncate\">\n                              {participant.user.username ||\n                                participant.user.firstName ||\n                                `Player ${index + 1}`}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {participant.seed\n                                ? `Seed ${participant.seed}`\n                                : \"No seed\"}\n                            </p>\n                          </div>\n                          {participant.status && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {participant.status}\n                            </Badge>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <i className=\"fas fa-users text-4xl text-muted-foreground mb-4\"></i>\n                      <p className=\"text-muted-foreground\">\n                        No participants yet\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Tournament Information */}\n            <TabsContent value=\"info\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Tournament Details</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Format:</span>\n                      <span className=\"font-medium\">\n                        {formatGameName(tournament.gameType)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">\n                        Max Participants:\n                      </span>\n                      <span className=\"font-medium\">\n                        {tournament.maxParticipants}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Status:</span>\n                      <Badge\n                        variant={getStatusBadgeVariant(\n                          tournament.status || \"upcoming\",\n                        )}\n                      >\n                        {tournament.status}\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Created:</span>\n                      <span className=\"font-medium\">\n                        {tournament.createdAt\n                          ? format(\n                              new Date(tournament.createdAt),\n                              \"MMM dd, yyyy\",\n                            )\n                          : \"Unknown\"}\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {(tournament as any).rules && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Tournament Rules</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-muted-foreground whitespace-pre-wrap\">\n                        {(tournament as any).rules}\n                      </p>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/pages/tournaments.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2944,2947],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2944,2947],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3708,3711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3708,3711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4441,4444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4441,4444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4816,4819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4816,4819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":186,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5468,5471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5468,5471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":224,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6695,6698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6695,6698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'gameFormat' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":244,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":244,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'startDate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":244,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":244,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'maxParticipants' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":244,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":244,"endColumn":53},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":755,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":755,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29204,29207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29204,29207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":909,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[36225,36250],"text":"Tournaments you&apos;ve joined"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[36225,36250],"text":"Tournaments you&lsquo;ve joined"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[36225,36250],"text":"Tournaments you&#39;ve joined"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[36225,36250],"text":"Tournaments you&rsquo;ve joined"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":930,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[37138,37164],"text":"Tournaments you&apos;ve created"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[37138,37164],"text":"Tournaments you&lsquo;ve created"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[37138,37164],"text":"Tournaments you&#39;ve created"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[37138,37164],"text":"Tournaments you&rsquo;ve created"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from \"react\";\nimport { useDocumentTitle } from \"@/hooks/useDocumentTitle\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useAuth } from \"@/features/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Header } from \"@/shared/components\";\nimport { useCommunity } from \"@/features/communities\";\nimport type { Tournament } from \"@shared/schema\";\nimport { format } from \"date-fns\";\nimport TournamentsLoginPrompt from \"@/components/TournamentsLoginPrompt\";\n\nexport default function Tournaments() {\n  useDocumentTitle(\"Tournaments\");\n\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const { selectedCommunity } = useCommunity();\n\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [editingTournament, setEditingTournament] = useState<Tournament | null>(\n    null,\n  );\n\n  // Create tournament form state\n  const [tournamentForm, setTournamentForm] = useState({\n    name: \"\",\n    description: \"\",\n    gameFormat: \"\",\n    maxParticipants: 8,\n    startDate: \"\",\n    prizePool: \"\",\n    rules: \"\",\n  });\n\n  // Edit tournament form state\n  const [editForm, setEditForm] = useState({\n    name: \"\",\n    description: \"\",\n    gameFormat: \"\",\n    maxParticipants: 8,\n    startDate: \"\",\n    prizePool: \"\",\n    rules: \"\",\n  });\n\n  // Fetch tournaments - only for authenticated users\n  const { data: tournaments = [], isLoading: tournamentsLoading } = useQuery<\n    Tournament[]\n  >({\n    queryKey: [\"/api/tournaments\", { community: selectedCommunity?.id }],\n    queryFn: async () => {\n      const url = selectedCommunity?.id\n        ? `/api/tournaments?community=${selectedCommunity.id}`\n        : \"/api/tournaments\";\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch tournaments\");\n      }\n      return response.json();\n    },\n    enabled: isAuthenticated, // Fetch when authenticated, regardless of community selection\n  });\n\n  // Create tournament mutation\n  const createTournamentMutation = useMutation({\n    mutationFn: async (tournamentData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/tournaments\", {\n        ...tournamentData,\n        communityId: selectedCommunity?.id || \"mtg\",\n        startDate: new Date(tournamentData.startDate).toISOString(),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Tournament created!\",\n        description: \"Your tournament has been created successfully.\",\n      });\n      setIsCreateModalOpen(false);\n      setTournamentForm({\n        name: \"\",\n        description: \"\",\n        gameFormat: \"\",\n        maxParticipants: 8,\n        startDate: \"\",\n        prizePool: \"\",\n        rules: \"\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tournaments\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to create tournament\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Join tournament mutation\n  const joinTournamentMutation = useMutation({\n    mutationFn: async (tournamentId: string) => {\n      const response = await apiRequest(\n        \"POST\",\n        `/api/tournaments/${tournamentId}/join`,\n        {},\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Joined tournament!\",\n        description: \"You have successfully joined the tournament.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tournaments\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to join tournament\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Edit tournament mutation\n  const editTournamentMutation = useMutation({\n    mutationFn: async ({\n      tournamentId,\n      updates,\n    }: {\n      tournamentId: string;\n      updates: any;\n    }) => {\n      const response = await apiRequest(\n        \"PATCH\",\n        `/api/tournaments/${tournamentId}`,\n        {\n          ...updates,\n          startDate: updates.startDate\n            ? new Date(updates.startDate).toISOString()\n            : undefined,\n        },\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Tournament updated!\",\n        description: \"Your tournament has been updated successfully.\",\n      });\n      setIsEditModalOpen(false);\n      setEditingTournament(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/tournaments\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to update tournament\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateTournament = useCallback(() => {\n    if (\n      !tournamentForm.name ||\n      !tournamentForm.gameFormat ||\n      !tournamentForm.startDate\n    ) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createTournamentMutation.mutate(tournamentForm);\n  }, [tournamentForm, createTournamentMutation, toast]);\n\n  const openEditModal = useCallback((tournament: Tournament) => {\n    setEditingTournament(tournament);\n    const startDate = tournament.startDate\n      ? format(new Date(tournament.startDate), \"yyyy-MM-dd'T'HH:mm\")\n      : \"\";\n    setEditForm({\n      name: tournament.name || \"\",\n      description: tournament.description || \"\",\n      gameFormat: tournament.gameType || \"\",\n      maxParticipants: tournament.maxParticipants || 8,\n      startDate: String(startDate),\n      prizePool:\n        tournament.prizePool != null ? String(tournament.prizePool) : \"\",\n      rules: (tournament as any).rules || \"\",\n    });\n    setIsEditModalOpen(true);\n  }, []);\n\n  const handleEditTournament = useCallback(() => {\n    if (!editForm.name || !editForm.gameFormat || !editForm.startDate) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    if (!editingTournament) return;\n\n    // For active tournaments, omit restricted fields from the payload\n    let updates;\n    if (editingTournament.status === \"active\") {\n      // Remove fields that can&apos;t be changed for active tournaments\n      const { gameFormat, startDate, maxParticipants, ...allowedUpdates } =\n        editForm;\n      updates = allowedUpdates;\n    } else {\n      updates = { ...editForm };\n    }\n\n    editTournamentMutation.mutate({\n      tournamentId: editingTournament.id,\n      updates,\n    });\n  }, [editForm, editingTournament, editTournamentMutation, toast]);\n\n  const isOrganizer = useCallback(\n    (tournament: Tournament) => {\n      return user && tournament.organizerId === user.id;\n    },\n    [user],\n  );\n\n  const getStatusBadgeVariant = useCallback((status: string) => {\n    switch (status) {\n      case \"upcoming\":\n        return \"default\";\n      case \"active\":\n        return \"destructive\";\n      case \"completed\":\n        return \"secondary\";\n      default:\n        return \"outline\";\n    }\n  }, []);\n\n  const formatGameName = useCallback((format: string) => {\n    const gameFormats: Record<string, string> = {\n      commander: \"Commander/EDH\",\n      standard: \"Standard\",\n      modern: \"Modern\",\n      legacy: \"Legacy\",\n      draft: \"Draft\",\n      \"pokemon-standard\": \"Pokemon Standard\",\n      \"pokemon-expanded\": \"Pokemon Expanded\",\n      \"lorcana-constructed\": \"Lorcana Constructed\",\n      \"yugioh-advanced\": \"Yu-Gi-Oh Advanced\",\n    };\n    return gameFormats[format] || format;\n  }, []);\n\n  // Show login prompt for unauthenticated users (after all hooks are called)\n  if (!isLoading && !isAuthenticated) {\n    return <TournamentsLoginPrompt />;\n  }\n\n  // Show loading state while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading tournaments...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-muted\">\n      <Header />\n\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold gradient-text mb-4\">\n            Tournament Hub\n          </h1>\n          <p className=\"text-lg text-muted-foreground max-w-2xl\">\n            Compete in organized tournaments, climb the rankings, and prove your\n            skills against the best players in your community.\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"browse\" className=\"space-y-8\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"browse\" data-testid=\"tab-browse\">\n              Browse Tournaments\n            </TabsTrigger>\n            <TabsTrigger\n              value=\"my-tournaments\"\n              data-testid=\"tab-my-tournaments\"\n            >\n              My Tournaments\n            </TabsTrigger>\n            <TabsTrigger value=\"create\" data-testid=\"tab-create\">\n              Create Tournament\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Browse Tournaments */}\n          <TabsContent value=\"browse\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-2xl font-semibold\">Available Tournaments</h2>\n              <Dialog\n                open={isCreateModalOpen}\n                onOpenChange={setIsCreateModalOpen}\n              >\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-create-tournament\">\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Create Tournament\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>Create New Tournament</DialogTitle>\n                    <DialogDescription>\n                      Set up a new tournament for your community. Fill in the\n                      details below.\n                    </DialogDescription>\n                  </DialogHeader>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"tournament-name\">\n                          Tournament Name*\n                        </Label>\n                        <Input\n                          id=\"tournament-name\"\n                          value={tournamentForm.name}\n                          onChange={(e) =>\n                            setTournamentForm((prev) => ({\n                              ...prev,\n                              name: e.target.value,\n                            }))\n                          }\n                          placeholder=\"Weekly Commander Night\"\n                          data-testid=\"input-tournament-name\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"game-format\">Game Format*</Label>\n                        <Select\n                          value={tournamentForm.gameFormat}\n                          onValueChange={(value) =>\n                            setTournamentForm((prev) => ({\n                              ...prev,\n                              gameFormat: value,\n                            }))\n                          }\n                        >\n                          <SelectTrigger data-testid=\"select-game-format\">\n                            <SelectValue placeholder=\"Select format\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"commander\">\n                              Commander/EDH\n                            </SelectItem>\n                            <SelectItem value=\"standard\">Standard</SelectItem>\n                            <SelectItem value=\"modern\">Modern</SelectItem>\n                            <SelectItem value=\"draft\">Draft</SelectItem>\n                            <SelectItem value=\"pokemon-standard\">\n                              Pokemon Standard\n                            </SelectItem>\n                            <SelectItem value=\"lorcana-constructed\">\n                              Lorcana Constructed\n                            </SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"description\">Description</Label>\n                      <Textarea\n                        id=\"description\"\n                        value={tournamentForm.description}\n                        onChange={(e) =>\n                          setTournamentForm((prev) => ({\n                            ...prev,\n                            description: e.target.value,\n                          }))\n                        }\n                        placeholder=\"Describe your tournament...\"\n                        data-testid=\"textarea-tournament-description\"\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"max-participants\">\n                          Max Participants\n                        </Label>\n                        <Select\n                          value={tournamentForm.maxParticipants.toString()}\n                          onValueChange={(value) =>\n                            setTournamentForm((prev) => ({\n                              ...prev,\n                              maxParticipants: parseInt(value),\n                            }))\n                          }\n                        >\n                          <SelectTrigger data-testid=\"select-max-participants\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"4\">4 Players</SelectItem>\n                            <SelectItem value=\"8\">8 Players</SelectItem>\n                            <SelectItem value=\"16\">16 Players</SelectItem>\n                            <SelectItem value=\"32\">32 Players</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"start-date\">Start Date*</Label>\n                        <Input\n                          id=\"start-date\"\n                          type=\"datetime-local\"\n                          value={tournamentForm.startDate}\n                          onChange={(e) =>\n                            setTournamentForm((prev) => ({\n                              ...prev,\n                              startDate: e.target.value,\n                            }))\n                          }\n                          data-testid=\"input-start-date\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"prize-pool\">Prize Pool (Optional)</Label>\n                      <Input\n                        id=\"prize-pool\"\n                        value={tournamentForm.prizePool}\n                        onChange={(e) =>\n                          setTournamentForm((prev) => ({\n                            ...prev,\n                            prizePool: e.target.value,\n                          }))\n                        }\n                        placeholder=\"$100 store credit, booster packs, etc.\"\n                        data-testid=\"input-prize-pool\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"rules\">Tournament Rules</Label>\n                      <Textarea\n                        id=\"rules\"\n                        value={tournamentForm.rules}\n                        onChange={(e) =>\n                          setTournamentForm((prev) => ({\n                            ...prev,\n                            rules: e.target.value,\n                          }))\n                        }\n                        placeholder=\"Special rules, deck restrictions, etc.\"\n                        data-testid=\"textarea-tournament-rules\"\n                      />\n                    </div>\n\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => setIsCreateModalOpen(false)}\n                        data-testid=\"button-cancel-tournament\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        onClick={handleCreateTournament}\n                        disabled={createTournamentMutation.isPending}\n                        data-testid=\"button-submit-tournament\"\n                      >\n                        {createTournamentMutation.isPending\n                          ? \"Creating...\"\n                          : \"Create Tournament\"}\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n\n              {/* Edit Tournament Modal */}\n              <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>Edit Tournament</DialogTitle>\n                    <DialogDescription>\n                      Update tournament details.{\" \"}\n                      {editingTournament?.status === \"active\"\n                        ? \"Limited fields can be edited while tournament is active.\"\n                        : \"\"}\n                    </DialogDescription>\n                  </DialogHeader>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"edit-tournament-name\">\n                          Tournament Name*\n                        </Label>\n                        <Input\n                          id=\"edit-tournament-name\"\n                          value={editForm.name}\n                          onChange={(e) =>\n                            setEditForm((prev) => ({\n                              ...prev,\n                              name: e.target.value,\n                            }))\n                          }\n                          placeholder=\"Weekly Commander Night\"\n                          data-testid=\"input-edit-tournament-name\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"edit-game-format\">Game Format*</Label>\n                        <Select\n                          value={editForm.gameFormat}\n                          onValueChange={(value) =>\n                            setEditForm((prev) => ({\n                              ...prev,\n                              gameFormat: value,\n                            }))\n                          }\n                          disabled={editingTournament?.status === \"active\"}\n                        >\n                          <SelectTrigger data-testid=\"select-edit-game-format\">\n                            <SelectValue placeholder=\"Select format\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"commander\">\n                              Commander/EDH\n                            </SelectItem>\n                            <SelectItem value=\"standard\">Standard</SelectItem>\n                            <SelectItem value=\"modern\">Modern</SelectItem>\n                            <SelectItem value=\"draft\">Draft</SelectItem>\n                            <SelectItem value=\"pokemon-standard\">\n                              Pokemon Standard\n                            </SelectItem>\n                            <SelectItem value=\"lorcana-constructed\">\n                              Lorcana Constructed\n                            </SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"edit-description\">Description</Label>\n                      <Textarea\n                        id=\"edit-description\"\n                        value={editForm.description}\n                        onChange={(e) =>\n                          setEditForm((prev) => ({\n                            ...prev,\n                            description: e.target.value,\n                          }))\n                        }\n                        placeholder=\"Describe your tournament...\"\n                        data-testid=\"textarea-edit-tournament-description\"\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"edit-max-participants\">\n                          Max Participants\n                        </Label>\n                        <Select\n                          value={editForm.maxParticipants.toString()}\n                          onValueChange={(value) =>\n                            setEditForm((prev) => ({\n                              ...prev,\n                              maxParticipants: parseInt(value),\n                            }))\n                          }\n                          disabled={editingTournament?.status === \"active\"}\n                        >\n                          <SelectTrigger data-testid=\"select-edit-max-participants\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"4\">4 Players</SelectItem>\n                            <SelectItem value=\"8\">8 Players</SelectItem>\n                            <SelectItem value=\"16\">16 Players</SelectItem>\n                            <SelectItem value=\"32\">32 Players</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"edit-start-date\">Start Date*</Label>\n                        <Input\n                          id=\"edit-start-date\"\n                          type=\"datetime-local\"\n                          value={editForm.startDate}\n                          onChange={(e) =>\n                            setEditForm((prev) => ({\n                              ...prev,\n                              startDate: e.target.value,\n                            }))\n                          }\n                          disabled={editingTournament?.status === \"active\"}\n                          data-testid=\"input-edit-start-date\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"edit-prize-pool\">\n                        Prize Pool (Optional)\n                      </Label>\n                      <Input\n                        id=\"edit-prize-pool\"\n                        value={editForm.prizePool}\n                        onChange={(e) =>\n                          setEditForm((prev) => ({\n                            ...prev,\n                            prizePool: e.target.value,\n                          }))\n                        }\n                        placeholder=\"$100 store credit, booster packs, etc.\"\n                        data-testid=\"input-edit-prize-pool\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"edit-rules\">Tournament Rules</Label>\n                      <Textarea\n                        id=\"edit-rules\"\n                        value={editForm.rules}\n                        onChange={(e) =>\n                          setEditForm((prev) => ({\n                            ...prev,\n                            rules: e.target.value,\n                          }))\n                        }\n                        placeholder=\"Special rules, deck restrictions, etc.\"\n                        data-testid=\"textarea-edit-tournament-rules\"\n                      />\n                    </div>\n\n                    {editingTournament?.status === \"active\" && (\n                      <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-3\">\n                        <div className=\"flex items-center\">\n                          <i className=\"fas fa-exclamation-triangle text-yellow-500 mr-2\"></i>\n                          <p className=\"text-sm text-yellow-700\">\n                            This tournament is active. Only name, description,\n                            rules, and prize pool can be edited.\n                          </p>\n                        </div>\n                      </div>\n                    )}\n\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => setIsEditModalOpen(false)}\n                        data-testid=\"button-cancel-edit-tournament\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        onClick={handleEditTournament}\n                        disabled={editTournamentMutation.isPending}\n                        data-testid=\"button-submit-edit-tournament\"\n                      >\n                        {editTournamentMutation.isPending\n                          ? \"Updating...\"\n                          : \"Update Tournament\"}\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {tournamentsLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[...Array(6)].map((_, i) => (\n                  <Card key={i} className=\"animate-pulse\">\n                    <CardHeader>\n                      <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                      <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"h-3 bg-muted rounded\"></div>\n                        <div className=\"h-3 bg-muted rounded w-4/5\"></div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : tournaments.length === 0 ? (\n              <Card className=\"text-center py-12\">\n                <CardContent>\n                  <i className=\"fas fa-trophy text-6xl text-muted-foreground mb-4\"></i>\n                  <h3 className=\"text-xl font-semibold mb-2\">\n                    No tournaments yet\n                  </h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    Be the first to create a tournament for your community!\n                  </p>\n                  <Button onClick={() => setIsCreateModalOpen(true)}>\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Create First Tournament\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {tournaments.map((tournament: any) => (\n                  <Card\n                    key={tournament.id}\n                    className=\"hover:shadow-lg transition-shadow\"\n                  >\n                    <CardHeader>\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"space-y-1\">\n                          <CardTitle className=\"text-lg\">\n                            {tournament.name}\n                          </CardTitle>\n                          <CardDescription>\n                            {formatGameName(tournament.gameType)}\n                          </CardDescription>\n                        </div>\n                        <Badge\n                          variant={getStatusBadgeVariant(tournament.status)}\n                        >\n                          {tournament.status}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-muted-foreground\">\n                            Participants:\n                          </span>\n                          <span>\n                            {tournament.participantCount || 0}/\n                            {tournament.maxParticipants}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-muted-foreground\">\n                            Start Date:\n                          </span>\n                          <span>\n                            {format(\n                              new Date(tournament.startDate),\n                              \"MMM dd, HH:mm\",\n                            )}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-muted-foreground\">\n                            Organizer:\n                          </span>\n                          <span>\n                            {tournament.organizer?.username ||\n                              tournament.organizer?.firstName}\n                          </span>\n                        </div>\n                        {tournament.prizePool && (\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-muted-foreground\">\n                              Prize Pool:\n                            </span>\n                            <span className=\"font-medium\">\n                              {tournament.prizePool}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n\n                      {tournament.description && (\n                        <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                          {tournament.description}\n                        </p>\n                      )}\n\n                      <div className=\"flex space-x-2\">\n                        {isOrganizer(tournament) ? (\n                          <>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"flex-1\"\n                              onClick={() => openEditModal(tournament)}\n                              disabled={tournament.status === \"completed\"}\n                              data-testid={`button-edit-tournament-${tournament.id}`}\n                            >\n                              <i className=\"fas fa-edit mr-2\"></i>\n                              {tournament.status === \"completed\"\n                                ? \"View\"\n                                : \"Edit\"}\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => {\n                                const link = document.createElement(\"a\");\n                                link.href = `/tournaments/${tournament.id}`;\n                                link.click();\n                              }}\n                              data-testid={`button-view-tournament-${tournament.id}`}\n                            >\n                              <i className=\"fas fa-eye mr-2\"></i>\n                              Details\n                            </Button>\n                          </>\n                        ) : (\n                          <>\n                            <Button\n                              size=\"sm\"\n                              className=\"flex-1\"\n                              onClick={() =>\n                                joinTournamentMutation.mutate(tournament.id)\n                              }\n                              disabled={\n                                tournament.status !== \"upcoming\" ||\n                                joinTournamentMutation.isPending\n                              }\n                              data-testid={`button-join-tournament-${tournament.id}`}\n                            >\n                              <i className=\"fas fa-plus mr-2\"></i>\n                              {tournament.status === \"upcoming\"\n                                ? \"Join\"\n                                : \"View\"}\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => {\n                                const link = document.createElement(\"a\");\n                                link.href = `/tournaments/${tournament.id}`;\n                                link.click();\n                              }}\n                              data-testid={`button-view-tournament-${tournament.id}`}\n                            >\n                              <i className=\"fas fa-eye mr-2\"></i>\n                              Details\n                            </Button>\n                          </>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* My Tournaments */}\n          <TabsContent value=\"my-tournaments\" className=\"space-y-6\">\n            <h2 className=\"text-2xl font-semibold\">My Tournaments</h2>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-trophy text-primary\"></i>\n                    <span>Participating In</span>\n                  </CardTitle>\n                  <CardDescription>Tournaments you've joined</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-calendar-check text-4xl text-muted-foreground mb-4\"></i>\n                    <p className=\"text-muted-foreground mb-4\">\n                      No active tournaments\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Join a tournament to start competing!\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-crown text-primary\"></i>\n                    <span>Organizing</span>\n                  </CardTitle>\n                  <CardDescription>Tournaments you've created</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-users-cog text-4xl text-muted-foreground mb-4\"></i>\n                    <p className=\"text-muted-foreground mb-4\">\n                      No organized tournaments\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Create your first tournament to get started!\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Create Tournament */}\n          <TabsContent value=\"create\" className=\"space-y-6\">\n            <Card className=\"max-w-4xl mx-auto\">\n              <CardHeader>\n                <CardTitle>Create New Tournament</CardTitle>\n                <CardDescription>\n                  Set up a new tournament for your community. Configure\n                  brackets, rules, and prizes.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"name\">Tournament Name*</Label>\n                      <Input\n                        id=\"name\"\n                        value={tournamentForm.name}\n                        onChange={(e) =>\n                          setTournamentForm((prev) => ({\n                            ...prev,\n                            name: e.target.value,\n                          }))\n                        }\n                        placeholder=\"Weekly Commander Night\"\n                        data-testid=\"input-create-tournament-name\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"format\">Game Format*</Label>\n                      <Select\n                        value={tournamentForm.gameFormat}\n                        onValueChange={(value) =>\n                          setTournamentForm((prev) => ({\n                            ...prev,\n                            gameFormat: value,\n                          }))\n                        }\n                      >\n                        <SelectTrigger data-testid=\"select-create-game-format\">\n                          <SelectValue placeholder=\"Select format\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"commander\">\n                            Commander/EDH\n                          </SelectItem>\n                          <SelectItem value=\"standard\">Standard</SelectItem>\n                          <SelectItem value=\"modern\">Modern</SelectItem>\n                          <SelectItem value=\"draft\">Draft</SelectItem>\n                          <SelectItem value=\"pokemon-standard\">\n                            Pokemon Standard\n                          </SelectItem>\n                          <SelectItem value=\"lorcana-constructed\">\n                            Lorcana Constructed\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"participants\">Max Participants</Label>\n                      <Select\n                        value={tournamentForm.maxParticipants.toString()}\n                        onValueChange={(value) =>\n                          setTournamentForm((prev) => ({\n                            ...prev,\n                            maxParticipants: parseInt(value),\n                          }))\n                        }\n                      >\n                        <SelectTrigger data-testid=\"select-create-max-participants\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"4\">4 Players</SelectItem>\n                          <SelectItem value=\"8\">8 Players</SelectItem>\n                          <SelectItem value=\"16\">16 Players</SelectItem>\n                          <SelectItem value=\"32\">32 Players</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"start-date\">Start Date & Time*</Label>\n                      <Input\n                        id=\"start-date\"\n                        type=\"datetime-local\"\n                        value={tournamentForm.startDate}\n                        onChange={(e) =>\n                          setTournamentForm((prev) => ({\n                            ...prev,\n                            startDate: e.target.value,\n                          }))\n                        }\n                        data-testid=\"input-create-start-date\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"prize\">Prize Pool (Optional)</Label>\n                      <Input\n                        id=\"prize\"\n                        value={tournamentForm.prizePool}\n                        onChange={(e) =>\n                          setTournamentForm((prev) => ({\n                            ...prev,\n                            prizePool: e.target.value,\n                          }))\n                        }\n                        placeholder=\"$100 store credit, booster packs, etc.\"\n                        data-testid=\"input-create-prize-pool\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description-create\">Description</Label>\n                  <Textarea\n                    id=\"description-create\"\n                    value={tournamentForm.description}\n                    onChange={(e) =>\n                      setTournamentForm((prev) => ({\n                        ...prev,\n                        description: e.target.value,\n                      }))\n                    }\n                    placeholder=\"Describe your tournament, special rules, etc.\"\n                    data-testid=\"textarea-create-tournament-description\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"rules-create\">Tournament Rules</Label>\n                  <Textarea\n                    id=\"rules-create\"\n                    value={tournamentForm.rules}\n                    onChange={(e) =>\n                      setTournamentForm((prev) => ({\n                        ...prev,\n                        rules: e.target.value,\n                      }))\n                    }\n                    placeholder=\"Special rules, deck restrictions, ban list, etc.\"\n                    data-testid=\"textarea-create-tournament-rules\"\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setTournamentForm({\n                        name: \"\",\n                        description: \"\",\n                        gameFormat: \"\",\n                        maxParticipants: 8,\n                        startDate: \"\",\n                        prizePool: \"\",\n                        rules: \"\",\n                      });\n                    }}\n                    data-testid=\"button-reset-tournament-form\"\n                  >\n                    Reset\n                  </Button>\n                  <Button\n                    onClick={handleCreateTournament}\n                    disabled={createTournamentMutation.isPending}\n                    data-testid=\"button-create-tournament-submit\"\n                  >\n                    {createTournamentMutation.isPending\n                      ? \"Creating...\"\n                      : \"Create Tournament\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/shared/components/ErrorBoundaries.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/shared/components/Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/shared/components/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/shared/components/LazyLoad.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1186,1189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1186,1189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1467,1470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1467,1470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Suspense, lazy, ComponentType } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\n/**\n * Lazy Loading Wrapper with Enhanced Loading States\n */\n\ninterface LazyLoadProps {\n  fallback?: React.ReactNode;\n  className?: string;\n  children: React.ReactNode;\n}\n\n// Enhanced loading component\nconst LoadingSpinner = ({ className }: { className?: string }) => (\n  <div className={cn(\"flex items-center justify-center p-8\", className)}>\n    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n  </div>\n);\n\nconst LoadingSkeleton = ({ className }: { className?: string }) => (\n  <div className={cn(\"animate-pulse space-y-4 p-4\", className)}>\n    <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n    <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n    <div className=\"h-32 bg-muted rounded\"></div>\n  </div>\n);\n\nexport function LazyLoadWrapper({\n  fallback,\n  className,\n  children,\n}: LazyLoadProps) {\n  return (\n    <Suspense fallback={fallback || <LoadingSpinner className={className} />}>\n      {children}\n    </Suspense>\n  );\n}\n\n/**\n * HOC for lazy loading components with error boundaries\n */\nexport function withLazyLoading<P extends Record<string, any>>(\n  importFn: () => Promise<{ default: ComponentType<P> }>,\n  fallback?: React.ReactNode,\n) {\n  const LazyComponent = lazy(importFn);\n\n  return function WrappedComponent(props: P) {\n    return (\n      <LazyLoadWrapper fallback={fallback}>\n        <LazyComponent {...(props as any)} />\n      </LazyLoadWrapper>\n    );\n  };\n}\n\n/**\n * Optimized image lazy loading with intersection observer\n */\ninterface LazyImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  src: string;\n  alt: string;\n  placeholder?: string;\n  className?: string;\n}\n\nexport function LazyImage({\n  src,\n  alt,\n  placeholder,\n  className,\n  ...props\n}: LazyImageProps) {\n  return (\n    <img\n      src={src}\n      alt={alt}\n      loading=\"lazy\"\n      className={cn(\"transition-opacity duration-300\", className)}\n      style={{ backgroundColor: placeholder || \"#f3f4f6\" }}\n      {...props}\n    />\n  );\n}\n\n/**\n * Lazy load components based on viewport intersection\n */\ninterface InViewLazyLoadProps {\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n  rootMargin?: string;\n  threshold?: number;\n  triggerOnce?: boolean;\n}\n\nexport function InViewLazyLoad({\n  children,\n  fallback: _fallback = <LoadingSkeleton />,\n  rootMargin: _rootMargin = \"100px\",\n  threshold: _threshold = 0.1,\n  triggerOnce: _triggerOnce = true,\n}: InViewLazyLoadProps) {\n  // Note: In a real implementation, we'd use useIntersectionObserver with these params\n  // For now, we'll show the content immediately\n  return <>{children}</>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/shared/components/OptimizedComponents.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2006,2009],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2006,2009],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { memo, useMemo, useCallback } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\n\n/**\n * Performance-optimized component patterns\n * Using React.memo, useMemo, and useCallback for optimal rendering\n */\n\n// Optimized Card Component\ninterface OptimizedCardProps {\n  title: string;\n  content: string;\n  badges?: string[];\n  actions?: { label: string; onClick: () => void }[];\n  className?: string;\n}\n\nexport const OptimizedCard = memo(\n  ({\n    title,\n    content,\n    badges = [],\n    actions = [],\n    className,\n  }: OptimizedCardProps) => {\n    // Memoize expensive computations\n    const badgeElements = useMemo(\n      () =>\n        badges.map((badge, index) => (\n          <Badge key={`${badge}-${index}`} variant=\"secondary\">\n            {badge}\n          </Badge>\n        )),\n      [badges],\n    );\n\n    const actionElements = useMemo(\n      () =>\n        actions.map((action, index) => (\n          <Button\n            key={`${action.label}-${index}`}\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={action.onClick}\n          >\n            {action.label}\n          </Button>\n        )),\n      [actions],\n    );\n\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle>{title}</CardTitle>\n          {badges.length > 0 && (\n            <div className=\"flex gap-2 flex-wrap\">{badgeElements}</div>\n          )}\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground mb-4\">{content}</p>\n          {actions.length > 0 && (\n            <div className=\"flex gap-2 flex-wrap\">{actionElements}</div>\n          )}\n        </CardContent>\n      </Card>\n    );\n  },\n);\n\nOptimizedCard.displayName = \"OptimizedCard\";\n\n// Optimized List Component with virtualization pattern\ninterface ListItem {\n  id: string;\n  title: string;\n  subtitle?: string;\n  metadata?: Record<string, any>;\n}\n\ninterface OptimizedListProps {\n  items: ListItem[];\n  onItemClick?: (item: ListItem) => void;\n  renderItem?: (item: ListItem) => React.ReactNode;\n  className?: string;\n  maxVisibleItems?: number;\n}\n\nexport const OptimizedList = memo(\n  ({\n    items,\n    onItemClick,\n    renderItem,\n    className,\n    maxVisibleItems = 10,\n  }: OptimizedListProps) => {\n    // Memoize click handlers to prevent unnecessary re-renders\n    const handleItemClick = useCallback(\n      (item: ListItem) => {\n        onItemClick?.(item);\n      },\n      [onItemClick],\n    );\n\n    // Implement simple virtualization for large lists\n    const visibleItems = useMemo(() => {\n      return items.slice(0, maxVisibleItems);\n    }, [items, maxVisibleItems]);\n\n    const defaultRenderItem = useCallback(\n      (item: ListItem) => (\n        <div\n          key={item.id}\n          className=\"p-4 border-b border-border cursor-pointer hover:bg-muted/50 transition-colors\"\n          onClick={() => handleItemClick(item)}\n        >\n          <h4 className=\"font-medium\">{item.title}</h4>\n          {item.subtitle && (\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              {item.subtitle}\n            </p>\n          )}\n        </div>\n      ),\n      [handleItemClick],\n    );\n\n    const renderedItems = useMemo(\n      () =>\n        visibleItems.map((item) =>\n          renderItem ? renderItem(item) : defaultRenderItem(item),\n        ),\n      [visibleItems, renderItem, defaultRenderItem],\n    );\n\n    return (\n      <div className={className}>\n        {renderedItems}\n        {items.length > maxVisibleItems && (\n          <div className=\"p-4 text-center text-muted-foreground\">\n            Showing {maxVisibleItems} of {items.length} items\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n\nOptimizedList.displayName = \"OptimizedList\";\n\n// Performance monitoring wrapper\ninterface PerformanceWrapperProps {\n  name: string;\n  children: React.ReactNode;\n  enableMonitoring?: boolean;\n}\n\nexport const PerformanceWrapper = memo(\n  ({\n    name,\n    children,\n    enableMonitoring = import.meta.env.DEV,\n  }: PerformanceWrapperProps) => {\n    // In development, we could add performance monitoring here\n    if (enableMonitoring) {\n      console.log(`Rendering: ${name}`);\n    }\n\n    return <>{children}</>;\n  },\n);\n\nPerformanceWrapper.displayName = \"PerformanceWrapper\";\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/shared/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/shared/constants/queryKeys.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[865,868],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[865,868],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1425,1428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1425,1428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2391,2394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2391,2394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2621,2624],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2621,2624],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2858,2861],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2858,2861],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Centralized Query Key Factory\n * Provides type-safe, consistent query keys across all features\n */\n\nexport const queryKeys = {\n  // Auth queries\n  auth: {\n    all: [\"/api/auth\"] as const,\n    user: () => [...queryKeys.auth.all, \"user\"] as const,\n    profile: (userId: string) =>\n      [...queryKeys.auth.all, \"profile\", userId] as const,\n  },\n\n  // Community queries\n  communities: {\n    all: [\"/api/communities\"] as const,\n    list: () => [...queryKeys.communities.all, \"list\"] as const,\n    detail: (id: string) =>\n      [...queryKeys.communities.all, \"detail\", id] as const,\n    members: (id: string) =>\n      [...queryKeys.communities.all, id, \"members\"] as const,\n    stats: (id: string) => [...queryKeys.communities.all, id, \"stats\"] as const,\n  },\n\n  // Event queries\n  events: {\n    all: [\"/api/events\"] as const,\n    list: (filters?: Record<string, any>) =>\n      [...queryKeys.events.all, \"list\", filters] as const,\n    detail: (id: string) => [...queryKeys.events.all, \"detail\", id] as const,\n    byUserCommunity: (userId: string, communityId: string) =>\n      [\n        ...queryKeys.events.all,\n        \"user\",\n        userId,\n        \"community\",\n        communityId,\n      ] as const,\n    calendar: (month: string, year: string) =>\n      [...queryKeys.events.all, \"calendar\", month, year] as const,\n  },\n\n  // User queries\n  users: {\n    all: [\"/api/users\"] as const,\n    list: (filters?: Record<string, any>) =>\n      [...queryKeys.users.all, \"list\", filters] as const,\n    detail: (id: string) => [...queryKeys.users.all, \"detail\", id] as const,\n    profile: (id: string) => [...queryKeys.users.all, \"profile\", id] as const,\n    settings: (id: string) => [...queryKeys.users.all, \"settings\", id] as const,\n    activity: (id: string) => [...queryKeys.users.all, \"activity\", id] as const,\n  },\n\n  // Messaging queries\n  messaging: {\n    all: [\"/api/messaging\"] as const,\n    notifications: (userId: string) =>\n      [...queryKeys.messaging.all, \"notifications\", userId] as const,\n    unreadCount: (userId: string) =>\n      [...queryKeys.messaging.all, \"unread-count\", userId] as const,\n    conversations: (userId: string) =>\n      [...queryKeys.messaging.all, \"conversations\", userId] as const,\n  },\n} as const;\n\n/**\n * Query Key Utilities\n */\nexport const queryUtils = {\n  /**\n   * Invalidate all queries for a specific feature\n   */\n  invalidateFeature: (queryClient: any, feature: keyof typeof queryKeys) => {\n    return queryClient.invalidateQueries({\n      queryKey: queryKeys[feature].all,\n    });\n  },\n\n  /**\n   * Remove all queries for a specific feature\n   */\n  removeFeature: (queryClient: any, feature: keyof typeof queryKeys) => {\n    return queryClient.removeQueries({\n      queryKey: queryKeys[feature].all,\n    });\n  },\n\n  /**\n   * Prefetch related data for better UX\n   */\n  prefetchRelatedData: async (\n    queryClient: any,\n    type: \"user\" | \"community\" | \"event\",\n    id: string,\n  ) => {\n    switch (type) {\n      case \"user\":\n        // Prefetch user profile, activity, and settings\n        await Promise.all([\n          queryClient.prefetchQuery({ queryKey: queryKeys.users.profile(id) }),\n          queryClient.prefetchQuery({ queryKey: queryKeys.users.activity(id) }),\n          queryClient.prefetchQuery({\n            queryKey: queryKeys.messaging.notifications(id),\n          }),\n        ]);\n        break;\n      case \"community\":\n        // Prefetch community members and stats\n        await Promise.all([\n          queryClient.prefetchQuery({\n            queryKey: queryKeys.communities.members(id),\n          }),\n          queryClient.prefetchQuery({\n            queryKey: queryKeys.communities.stats(id),\n          }),\n        ]);\n        break;\n      case \"event\":\n        // Prefetch event details\n        await queryClient.prefetchQuery({\n          queryKey: queryKeys.events.detail(id),\n        });\n        break;\n    }\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/shared/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/shared/hooks/useGlobalState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/shared/hooks/useOptimizedQuery.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1688,1691],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1688,1691],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2126,2129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2126,2129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2447,2450],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2447,2450],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2971,2974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2971,2974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3091,3094],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3091,3094],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  useQuery,\n  useQueryClient,\n  UseQueryOptions,\n} from \"@tanstack/react-query\";\nimport { useCallback, useEffect } from \"react\";\n\n/**\n * Enhanced useQuery hook with advanced patterns:\n * - Automatic background refetching\n * - Smart error recovery\n * - Cache warming\n * - Performance optimizations\n */\nexport function useOptimizedQuery<TData, TError = Error>(\n  options: UseQueryOptions<TData, TError> & {\n    backgroundRefetch?: boolean;\n    warmCache?: boolean;\n    errorRecovery?: boolean;\n  },\n) {\n  const queryClient = useQueryClient();\n\n  const {\n    backgroundRefetch = false,\n    warmCache = false,\n    errorRecovery = true,\n    ...queryOptions\n  } = options;\n\n  // Enhanced query with smart caching\n  const query = useQuery<TData, TError>({\n    ...queryOptions,\n    staleTime: backgroundRefetch ? 1000 * 60 * 5 : Infinity, // 5 min for background refetch\n    gcTime: 1000 * 60 * 30, // 30 minutes garbage collection\n    refetchOnWindowFocus: backgroundRefetch,\n    refetchOnReconnect: true,\n    retry: errorRecovery ? 3 : false,\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\n  });\n\n  // Warm cache by prefetching related data\n  useEffect(() => {\n    if (warmCache && query.data && queryOptions.queryKey) {\n      // This could be extended to prefetch related data based on patterns\n      if (import.meta.env.DEV) {\n        // Only log occasionally to avoid spam\n        if (Math.random() < 0.1) {\n          console.log(\"Cache warming opportunity for:\", queryOptions.queryKey);\n        }\n      }\n    }\n  }, [warmCache, query.data, queryOptions.queryKey]);\n\n  // Smart invalidation helper\n  const smartInvalidate = useCallback(\n    (pattern?: any[]) => {\n      if (pattern) {\n        queryClient.invalidateQueries({ queryKey: pattern });\n      } else if (queryOptions.queryKey) {\n        queryClient.invalidateQueries({ queryKey: queryOptions.queryKey });\n      }\n    },\n    [queryClient, queryOptions.queryKey],\n  );\n\n  // Background sync for fresh data\n  const backgroundSync = useCallback(() => {\n    if (queryOptions.queryKey) {\n      queryClient.prefetchQuery(queryOptions as any);\n    }\n  }, [queryClient, queryOptions]);\n\n  return {\n    ...query,\n    smartInvalidate,\n    backgroundSync,\n    isStale: query.isStale,\n    isFresh: !query.isStale && !query.isLoading,\n  };\n}\n\n/**\n * Hook for coordinated multi-query loading states\n */\nexport function useCoordinatedQueries<T extends Record<string, any>>(\n  queries: T,\n): {\n  data: { [K in keyof T]: T[K] extends { data: infer D } ? D : never };\n  isLoading: boolean;\n  isError: boolean;\n  errors: { [K in keyof T]: T[K] extends { error: infer E } ? E : never };\n} {\n  const queryKeys = Object.keys(queries) as (keyof T)[];\n\n  const isLoading = queryKeys.some((key) => queries[key]?.isLoading);\n  const isError = queryKeys.some((key) => queries[key]?.isError);\n\n  const data = queryKeys.reduce((acc, key) => {\n    acc[key] = queries[key]?.data;\n    return acc;\n  }, {} as any);\n\n  const errors = queryKeys.reduce((acc, key) => {\n    acc[key] = queries[key]?.error;\n    return acc;\n  }, {} as any);\n\n  return {\n    data,\n    isLoading,\n    isError,\n    errors,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/shared/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/client/src/shared/utils/performance.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[197,200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[197,200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[207,210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[207,210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[643,646],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[643,646],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[653,656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[653,656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[946,949],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[946,949],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[956,959],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[956,959],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1298,1301],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1298,1301],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1308,1311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1308,1311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2043,2046],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2043,2046],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":132,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3226,3229],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3226,3229],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3505,3508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3505,3508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Performance Utilities and Monitoring\n */\n\n// Performance timing utilities\nexport const performance_utils = {\n  /**\n   * Measure function execution time\n   */\n  measure: <T extends (...args: any[]) => any>(fn: T, label?: string): T => {\n    return ((...args: Parameters<T>) => {\n      const start = performance.now();\n      const result = fn(...args);\n      const end = performance.now();\n\n      if (import.meta.env.DEV && label) {\n        console.log(`⚡ ${label}: ${(end - start).toFixed(2)}ms`);\n      }\n\n      return result;\n    }) as T;\n  },\n\n  /**\n   * Debounce function calls for performance\n   */\n  debounce: <T extends (...args: any[]) => any>(fn: T, delay: number): T => {\n    let timeoutId: NodeJS.Timeout;\n\n    return ((...args: Parameters<T>) => {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => fn(...args), delay);\n    }) as T;\n  },\n\n  /**\n   * Throttle function calls\n   */\n  throttle: <T extends (...args: any[]) => any>(fn: T, limit: number): T => {\n    let inThrottle: boolean;\n\n    return ((...args: Parameters<T>) => {\n      if (!inThrottle) {\n        fn(...args);\n        inThrottle = true;\n        setTimeout(() => (inThrottle = false), limit);\n      }\n    }) as T;\n  },\n\n  /**\n   * Memoize expensive calculations\n   */\n  memoize: <T extends (...args: any[]) => any>(fn: T): T => {\n    const cache = new Map();\n\n    return ((...args: Parameters<T>) => {\n      const key = JSON.stringify(args);\n      if (cache.has(key)) {\n        return cache.get(key);\n      }\n\n      const result = fn(...args);\n      cache.set(key, result);\n      return result;\n    }) as T;\n  },\n\n  /**\n   * Bundle size analyzer (development only)\n   */\n  analyzeBundleSize: () => {\n    if (import.meta.env.DEV) {\n      console.log(\"🔍 Bundle Analysis Available in Development Mode\");\n      // This would integrate with webpack-bundle-analyzer or similar\n    }\n  },\n\n  /**\n   * Memory usage monitoring\n   */\n  monitorMemory: () => {\n    if (import.meta.env.DEV && \"memory\" in performance) {\n      const memory = (performance as any).memory;\n      console.log(\"💾 Memory Usage:\", {\n        used: Math.round(memory.usedJSHeapSize / 1048576) + \" MB\",\n        total: Math.round(memory.totalJSHeapSize / 1048576) + \" MB\",\n        limit: Math.round(memory.jsHeapSizeLimit / 1048576) + \" MB\",\n      });\n    }\n  },\n\n  /**\n   * Component render tracking\n   */\n  trackRender: (componentName: string) => {\n    if (import.meta.env.DEV) {\n      console.log(\n        `🔄 Rendered: ${componentName} at ${new Date().toISOString()}`,\n      );\n    }\n  },\n};\n\n// React Query performance optimizations\nexport const queryOptimizations = {\n  /**\n   * Smart cache management\n   */\n  getCacheConfig: (type: \"fast\" | \"normal\" | \"persistent\") => {\n    const configs = {\n      fast: {\n        staleTime: 1000 * 30, // 30 seconds\n        gcTime: 1000 * 60 * 5, // 5 minutes\n      },\n      normal: {\n        staleTime: 1000 * 60 * 5, // 5 minutes\n        gcTime: 1000 * 60 * 30, // 30 minutes\n      },\n      persistent: {\n        staleTime: 1000 * 60 * 60, // 1 hour\n        gcTime: 1000 * 60 * 60 * 24, // 24 hours\n      },\n    };\n\n    return configs[type];\n  },\n\n  /**\n   * Batch query invalidation\n   */\n  batchInvalidate: (queryClient: any, patterns: string[][]) => {\n    const invalidations = patterns.map((pattern) =>\n      queryClient.invalidateQueries({ queryKey: pattern }),\n    );\n\n    return Promise.all(invalidations);\n  },\n\n  /**\n   * Selective data updates\n   */\n  optimisticUpdate: <T>(\n    queryClient: any,\n    queryKey: string[],\n    updater: (oldData: T) => T,\n  ) => {\n    queryClient.setQueryData(queryKey, updater);\n  },\n};\n\n// Bundle splitting utilities\nexport const bundleOptimizations = {\n  /**\n   * Dynamic import with error handling\n   */\n  dynamicImport: async <T>(importFn: () => Promise<T>): Promise<T | null> => {\n    try {\n      const module = await importFn();\n      return module;\n    } catch (error) {\n      console.error(\"Dynamic import failed:\", error);\n      return null;\n    }\n  },\n\n  /**\n   * Preload critical resources\n   */\n  preloadResource: (href: string, as: \"script\" | \"style\" | \"font\") => {\n    const link = document.createElement(\"link\");\n    link.rel = \"preload\";\n    link.href = href;\n    link.as = as;\n    document.head.appendChild(link);\n  },\n\n  /**\n   * Prefetch non-critical resources\n   */\n  prefetchResource: (href: string) => {\n    const link = document.createElement(\"link\");\n    link.rel = \"prefetch\";\n    link.href = href;\n    document.head.appendChild(link);\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/admin/admin.middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":491,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":491,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13210,13213],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13210,13213],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":497,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":497,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13388,13391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13388,13391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":513,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":513,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13761,13764],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13761,13764],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":513,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":513,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13767,13770],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13767,13770],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":530,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":530,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14064,14067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14064,14067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":530,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":530,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14081,14084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14081,14084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":539,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":539,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14303,14306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14303,14306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":561,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":561,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14932,14935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14932,14935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":612,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":612,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16562,16565],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16562,16565],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":613,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":613,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16591,16594],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16591,16594],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-namespace","severity":2,"message":"ES2015 module syntax is preferred over namespaces.","line":600,"column":3,"nodeType":"TSModuleDeclaration","messageId":"moduleSyntaxIsPreferred","endLine":616,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"../storage\";\nimport { getAuthUserId } from \"../auth\";\nimport { logger } from \"../logger\";\n\n// Permission constants for admin operations\nexport const ADMIN_PERMISSIONS = {\n  // User management\n  USER_VIEW: \"user:view\",\n  USER_EDIT: \"user:edit\",\n  USER_DELETE: \"user:delete\",\n  USER_BAN: \"user:ban\",\n  USER_UNBAN: \"user:unban\",\n\n  // Role management\n  ROLE_VIEW: \"role:view\",\n  ROLE_ASSIGN: \"role:assign\",\n  ROLE_REVOKE: \"role:revoke\",\n  ROLE_CREATE: \"role:create\",\n\n  // Content moderation\n  CONTENT_VIEW_REPORTS: \"content:view_reports\",\n  CONTENT_MODERATE: \"content:moderate\",\n  CONTENT_DELETE: \"content:delete\",\n  CONTENT_RESTORE: \"content:restore\",\n\n  // Moderation actions\n  MODERATION_CREATE_ACTION: \"moderation:create_action\",\n  MODERATION_REVERSE_ACTION: \"moderation:reverse_action\",\n  MODERATION_VIEW_ACTIONS: \"moderation:view_actions\",\n\n  // Moderation queue\n  QUEUE_VIEW: \"queue:view\",\n  QUEUE_ASSIGN: \"queue:assign\",\n  QUEUE_COMPLETE: \"queue:complete\",\n  QUEUE_PRIORITIZE: \"queue:prioritize\",\n\n  // CMS management\n  CMS_VIEW: \"cms:view\",\n  CMS_CREATE: \"cms:create\",\n  CMS_EDIT: \"cms:edit\",\n  CMS_PUBLISH: \"cms:publish\",\n  CMS_DELETE: \"cms:delete\",\n\n  // Ban evasion\n  BAN_EVASION_VIEW: \"ban_evasion:view\",\n  BAN_EVASION_REVIEW: \"ban_evasion:review\",\n  BAN_EVASION_ACTION: \"ban_evasion:action\",\n\n  // Appeals\n  APPEAL_VIEW: \"appeal:view\",\n  APPEAL_ASSIGN: \"appeal:assign\",\n  APPEAL_REVIEW: \"appeal:review\",\n  APPEAL_DECIDE: \"appeal:decide\",\n\n  // Templates\n  TEMPLATE_VIEW: \"template:view\",\n  TEMPLATE_CREATE: \"template:create\",\n  TEMPLATE_EDIT: \"template:edit\",\n  TEMPLATE_DELETE: \"template:delete\",\n\n  // Audit logs\n  AUDIT_VIEW: \"audit:view\",\n\n  // Analytics\n  ANALYTICS_VIEW: \"analytics:view\",\n  ANALYTICS_EXPORT: \"analytics:export\",\n\n  // System administration\n  SYSTEM_SETTINGS: \"system:settings\",\n  SYSTEM_MAINTENANCE: \"system:maintenance\",\n\n  // Super admin (all permissions)\n  SUPER_ADMIN: \"super_admin:all\",\n} as const;\n\n// Role definitions with their permissions\nexport const ADMIN_ROLES = {\n  SUPER_ADMIN: {\n    name: \"super_admin\",\n    permissions: [ADMIN_PERMISSIONS.SUPER_ADMIN],\n  },\n  ADMIN: {\n    name: \"admin\",\n    permissions: [\n      ADMIN_PERMISSIONS.USER_VIEW,\n      ADMIN_PERMISSIONS.USER_EDIT,\n      ADMIN_PERMISSIONS.USER_BAN,\n      ADMIN_PERMISSIONS.USER_UNBAN,\n      ADMIN_PERMISSIONS.ROLE_VIEW,\n      ADMIN_PERMISSIONS.ROLE_ASSIGN,\n      ADMIN_PERMISSIONS.CONTENT_VIEW_REPORTS,\n      ADMIN_PERMISSIONS.CONTENT_MODERATE,\n      ADMIN_PERMISSIONS.CONTENT_DELETE,\n      ADMIN_PERMISSIONS.MODERATION_CREATE_ACTION,\n      ADMIN_PERMISSIONS.MODERATION_REVERSE_ACTION,\n      ADMIN_PERMISSIONS.MODERATION_VIEW_ACTIONS,\n      ADMIN_PERMISSIONS.QUEUE_VIEW,\n      ADMIN_PERMISSIONS.QUEUE_ASSIGN,\n      ADMIN_PERMISSIONS.QUEUE_COMPLETE,\n      ADMIN_PERMISSIONS.CMS_VIEW,\n      ADMIN_PERMISSIONS.CMS_CREATE,\n      ADMIN_PERMISSIONS.CMS_EDIT,\n      ADMIN_PERMISSIONS.CMS_PUBLISH,\n      ADMIN_PERMISSIONS.BAN_EVASION_VIEW,\n      ADMIN_PERMISSIONS.BAN_EVASION_REVIEW,\n      ADMIN_PERMISSIONS.BAN_EVASION_ACTION,\n      ADMIN_PERMISSIONS.APPEAL_VIEW,\n      ADMIN_PERMISSIONS.APPEAL_ASSIGN,\n      ADMIN_PERMISSIONS.APPEAL_REVIEW,\n      ADMIN_PERMISSIONS.APPEAL_DECIDE,\n      ADMIN_PERMISSIONS.TEMPLATE_VIEW,\n      ADMIN_PERMISSIONS.TEMPLATE_CREATE,\n      ADMIN_PERMISSIONS.TEMPLATE_EDIT,\n      ADMIN_PERMISSIONS.AUDIT_VIEW,\n      ADMIN_PERMISSIONS.ANALYTICS_VIEW,\n    ],\n  },\n  MODERATOR: {\n    name: \"moderator\",\n    permissions: [\n      ADMIN_PERMISSIONS.USER_VIEW,\n      ADMIN_PERMISSIONS.CONTENT_VIEW_REPORTS,\n      ADMIN_PERMISSIONS.CONTENT_MODERATE,\n      ADMIN_PERMISSIONS.MODERATION_CREATE_ACTION,\n      ADMIN_PERMISSIONS.MODERATION_VIEW_ACTIONS,\n      ADMIN_PERMISSIONS.QUEUE_VIEW,\n      ADMIN_PERMISSIONS.QUEUE_ASSIGN,\n      ADMIN_PERMISSIONS.QUEUE_COMPLETE,\n      ADMIN_PERMISSIONS.TEMPLATE_VIEW,\n      ADMIN_PERMISSIONS.TEMPLATE_CREATE,\n      ADMIN_PERMISSIONS.APPEAL_VIEW,\n      ADMIN_PERMISSIONS.APPEAL_REVIEW,\n    ],\n  },\n  TRUST_SAFETY: {\n    name: \"trust_safety\",\n    permissions: [\n      ADMIN_PERMISSIONS.USER_VIEW,\n      ADMIN_PERMISSIONS.USER_BAN,\n      ADMIN_PERMISSIONS.USER_UNBAN,\n      ADMIN_PERMISSIONS.CONTENT_VIEW_REPORTS,\n      ADMIN_PERMISSIONS.CONTENT_MODERATE,\n      ADMIN_PERMISSIONS.CONTENT_DELETE,\n      ADMIN_PERMISSIONS.MODERATION_CREATE_ACTION,\n      ADMIN_PERMISSIONS.MODERATION_VIEW_ACTIONS,\n      ADMIN_PERMISSIONS.BAN_EVASION_VIEW,\n      ADMIN_PERMISSIONS.BAN_EVASION_REVIEW,\n      ADMIN_PERMISSIONS.BAN_EVASION_ACTION,\n      ADMIN_PERMISSIONS.QUEUE_VIEW,\n      ADMIN_PERMISSIONS.QUEUE_ASSIGN,\n      ADMIN_PERMISSIONS.QUEUE_COMPLETE,\n      ADMIN_PERMISSIONS.QUEUE_PRIORITIZE,\n      ADMIN_PERMISSIONS.TEMPLATE_VIEW,\n      ADMIN_PERMISSIONS.AUDIT_VIEW,\n    ],\n  },\n  COMMUNITY_MANAGER: {\n    name: \"community_manager\",\n    permissions: [\n      ADMIN_PERMISSIONS.USER_VIEW,\n      ADMIN_PERMISSIONS.CONTENT_VIEW_REPORTS,\n      ADMIN_PERMISSIONS.CONTENT_MODERATE,\n      ADMIN_PERMISSIONS.CMS_VIEW,\n      ADMIN_PERMISSIONS.CMS_CREATE,\n      ADMIN_PERMISSIONS.CMS_EDIT,\n      ADMIN_PERMISSIONS.CMS_PUBLISH,\n      ADMIN_PERMISSIONS.TEMPLATE_VIEW,\n      ADMIN_PERMISSIONS.TEMPLATE_CREATE,\n      ADMIN_PERMISSIONS.TEMPLATE_EDIT,\n      ADMIN_PERMISSIONS.ANALYTICS_VIEW,\n    ],\n  },\n} as const;\n\n// Helper function to check if user has any admin role\nexport async function hasAdminRole(userId: string): Promise<boolean> {\n  try {\n    const userRoles = await storage.getUserRoles(userId);\n    return userRoles.some(\n      (role) =>\n        role.isActive &&\n        Object.values(ADMIN_ROLES).some(\n          (adminRole) => adminRole.name === role.role,\n        ),\n    );\n  } catch (error) {\n    logger.error(\"Error checking admin role\", error, {\n      userId,\n      operation: \"checking_admin_role\",\n    });\n    return false;\n  }\n}\n\n// Helper function to check if user has specific permission\nexport async function hasPermission(\n  userId: string,\n  permission: string,\n): Promise<boolean> {\n  try {\n    // Get user's roles\n    const userRoles = await storage.getUserRoles(userId);\n\n    // Check if user has any active roles\n    const activeRoles = userRoles.filter((role) => role.isActive);\n\n    for (const userRole of activeRoles) {\n      // Check if user has super admin permission (grants all)\n      if (userRole.role === ADMIN_ROLES.SUPER_ADMIN.name) {\n        return true;\n      }\n\n      // Find matching admin role definition\n      const roleDefinition = Object.values(ADMIN_ROLES).find(\n        (adminRole) => adminRole.name === userRole.role,\n      );\n\n      if (\n        roleDefinition &&\n        (roleDefinition.permissions as readonly string[]).includes(permission)\n      ) {\n        return true;\n      }\n\n      // Also check custom permissions stored directly on the role\n      if (userRole.permissions) {\n        const permissions =\n          typeof userRole.permissions === \"string\"\n            ? JSON.parse(userRole.permissions)\n            : userRole.permissions;\n\n        if (Array.isArray(permissions) && permissions.includes(permission)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  } catch (error) {\n    logger.error(\"Error checking permission\", error, {\n      userId,\n      operation: \"checking_permission\",\n    });\n    return false;\n  }\n}\n\n// Middleware to require actual admin role (not just a specific permission)\nexport async function requireAdmin(\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): Promise<void> {\n  try {\n    const userId = getAuthUserId(req);\n\n    if (!userId) {\n      res.status(401).json({\n        message: \"Authentication required\",\n        code: \"UNAUTHORIZED\",\n      });\n      return;\n    }\n\n    const isAdmin = await hasAdminRole(userId);\n\n    if (!isAdmin) {\n      res.status(403).json({\n        message: \"Admin role required\",\n        code: \"FORBIDDEN\",\n      });\n      return;\n    }\n\n    // Store admin info in request for use in routes\n    req.adminUser = {\n      userId,\n      hasAccess: true,\n    };\n\n    next();\n  } catch (error) {\n    logger.error(\"Admin role check error\", error, {\n      userId: getAuthUserId(req),\n      operation: \"admin_role_check_error\",\n    });\n    res.status(500).json({ message: \"Permission check failed\" });\n    return;\n  }\n}\n\n// Middleware to require specific permission\nexport function requirePermission(permission: string) {\n  return async (\n    req: Request,\n    res: Response,\n    next: NextFunction,\n  ): Promise<void> => {\n    try {\n      const userId = getAuthUserId(req);\n\n      if (!userId) {\n        res.status(401).json({\n          message: \"Authentication required\",\n          code: \"UNAUTHORIZED\",\n        });\n        return;\n      }\n\n      const hasAccess = await hasPermission(userId, permission);\n\n      if (!hasAccess) {\n        res.status(403).json({\n          message: \"Insufficient permissions\",\n          code: \"FORBIDDEN\",\n          required_permission: permission,\n        });\n        return;\n      }\n\n      // Store permission info in request for use in routes\n      req.adminUser = {\n        userId,\n        permission,\n        hasAccess: true,\n      };\n\n      next();\n    } catch (error) {\n      logger.error(\"Admin permission check error\", error, {\n        userId: getAuthUserId(req),\n        operation: \"admin_permission_check_error\",\n      });\n      res.status(500).json({\n        message: \"Permission check failed\",\n        code: \"INTERNAL_ERROR\",\n      });\n      return;\n    }\n  };\n}\n\n// Middleware to require multiple permissions (all must be present)\nexport function requireAllPermissions(permissions: string[]) {\n  return async (\n    req: Request,\n    res: Response,\n    next: NextFunction,\n  ): Promise<void> => {\n    try {\n      const userId = getAuthUserId(req);\n\n      if (!userId) {\n        res.status(401).json({\n          message: \"Authentication required\",\n          code: \"UNAUTHORIZED\",\n        });\n        return;\n      }\n\n      // Check all permissions\n      const permissionChecks = await Promise.all(\n        permissions.map((permission) => hasPermission(userId, permission)),\n      );\n\n      if (!permissionChecks.every((hasAccess) => hasAccess)) {\n        res.status(403).json({\n          message: \"Insufficient permissions\",\n          code: \"FORBIDDEN\",\n          required_permissions: permissions,\n        });\n        return;\n      }\n\n      req.adminUser = {\n        userId,\n        permissions,\n        hasAccess: true,\n      };\n\n      next();\n    } catch (error) {\n      logger.error(\"Admin permissions check error\", error, {\n        userId: getAuthUserId(req),\n        operation: \"admin_permissions_check_error\",\n      });\n      res.status(500).json({\n        message: \"Permissions check failed\",\n        code: \"INTERNAL_ERROR\",\n      });\n      return;\n    }\n  };\n}\n\n// Middleware to require any of the specified permissions\nexport function requireAnyPermission(permissions: string[]) {\n  return async (\n    req: Request,\n    res: Response,\n    next: NextFunction,\n  ): Promise<void> => {\n    try {\n      const userId = getAuthUserId(req);\n\n      if (!userId) {\n        res.status(401).json({\n          message: \"Authentication required\",\n          code: \"UNAUTHORIZED\",\n        });\n        return;\n      }\n\n      // Check if user has any of the permissions\n      let hasAccess = false;\n      for (const permission of permissions) {\n        if (await hasPermission(userId, permission)) {\n          hasAccess = true;\n          break;\n        }\n      }\n\n      if (!hasAccess) {\n        res.status(403).json({\n          message: \"Insufficient permissions\",\n          code: \"FORBIDDEN\",\n          required_any_permissions: permissions,\n        });\n        return;\n      }\n\n      req.adminUser = {\n        userId,\n        permissions,\n        hasAccess: true,\n      };\n\n      next();\n    } catch (error) {\n      logger.error(\"Admin permissions check error\", error, {\n        userId: getAuthUserId(req),\n        operation: \"admin_permissions_check_error\",\n      });\n      res.status(500).json({\n        message: \"Permissions check failed\",\n        code: \"INTERNAL_ERROR\",\n      });\n      return;\n    }\n  };\n}\n\n// Audit middleware to log all admin actions\nexport function auditAdminAction(action: string) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const userId = getAuthUserId(req);\n      const targetUserId = req.params.userId || req.body.userId || \"\";\n\n      // Store audit info for post-request logging\n      req.auditInfo = {\n        adminUserId: userId,\n        action,\n        targetUserId,\n        requestBody: req.method !== \"GET\" ? req.body : undefined,\n        requestParams: req.params,\n      };\n\n      next();\n    } catch (error) {\n      logger.error(\"Audit middleware error\", error, {\n        userId: getAuthUserId(req),\n        operation: \"audit_middleware_error\",\n      });\n      next(); // Continue even if audit setup fails\n    }\n  };\n}\n\n// Comprehensive audit logging middleware for all admin responses\nexport function comprehensiveAuditLogging(\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) {\n  const originalSend = res.send;\n  const originalJson = res.json;\n\n  // Override res.send to capture all responses\n  res.send = function (data: any) {\n    logResponseForAudit(req, res, data);\n    return originalSend.call(this, data);\n  };\n\n  // Override res.json to capture all JSON responses\n  res.json = function (data: any) {\n    logResponseForAudit(req, res, data);\n    return originalJson.call(this, data);\n  };\n\n  // Also log on response finish event to catch other response types\n  res.on(\"finish\", () => {\n    if (!res.locals.auditLogged) {\n      logResponseForAudit(req, res, null);\n    }\n  });\n\n  next();\n}\n\n// Sanitize sensitive data for audit logging\nfunction sanitizeForAudit(data: any): any {\n  if (!data) return data;\n\n  const sanitized = { ...data };\n  const sensitiveFields = [\n    \"password\",\n    \"token\",\n    \"secret\",\n    \"key\",\n    \"auth\",\n    \"session\",\n    \"credit_card\",\n    \"ssn\",\n    \"phone\",\n  ];\n\n  // Recursively redact sensitive fields\n  function redactSensitive(obj: any, path = \"\"): any {\n    if (typeof obj !== \"object\" || obj === null) return obj;\n\n    if (Array.isArray(obj)) {\n      return obj.map((item, index) =>\n        redactSensitive(item, `${path}[${index}]`),\n      );\n    }\n\n    const result: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      const keyLower = key.toLowerCase();\n      const shouldRedact = sensitiveFields.some((field) =>\n        keyLower.includes(field),\n      );\n\n      if (shouldRedact) {\n        result[key] = \"[REDACTED]\";\n      } else if (typeof value === \"object\" && value !== null) {\n        result[key] = redactSensitive(value, `${path}.${key}`);\n      } else {\n        result[key] = value;\n      }\n    }\n    return result;\n  }\n\n  return redactSensitive(sanitized);\n}\n\n// Helper to log response for audit\nfunction logResponseForAudit(req: Request, res: Response, responseData: any) {\n  if (res.locals.auditLogged) return; // Prevent duplicate logging\n  res.locals.auditLogged = true;\n\n  const userId = req.adminUser?.userId || \"unknown\";\n  const action = `${req.method.toLowerCase()}_${req.path.replace(/\\//g, \"_\")}`;\n  const statusCode = res.statusCode;\n\n  // Sanitize request/response data to prevent PII leakage\n  const sanitizedQuery = sanitizeForAudit(req.query);\n  const sanitizedBody = sanitizeForAudit(req.body);\n  const sanitizedResponse =\n    statusCode >= 400 ? sanitizeForAudit(responseData) : { status: \"success\" };\n\n  storage\n    .createAuditLog({\n      adminUserId: userId,\n      action,\n      category: statusCode >= 400 ? \"system_config\" : \"user_management\",\n      targetType: \"api_response\",\n      targetId: req.path,\n      parameters: JSON.stringify({\n        method: req.method,\n        statusCode,\n        responseData: sanitizedResponse,\n        userAgent: req.get(\"User-Agent\") || \"\",\n        query: sanitizedQuery,\n        body: sanitizedBody,\n      }),\n      ipAddress: req.ip || req.connection.remoteAddress || \"127.0.0.1\",\n    })\n    .catch((error) =>\n      console.error(\"Failed to create comprehensive audit log:\", error),\n    );\n}\n\n// Declare module augmentation for Request interface\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace Express {\n    interface Request {\n      adminUser?: {\n        userId: string;\n        permission?: string;\n        permissions?: string[];\n        hasAccess: boolean;\n      };\n      auditInfo?: {\n        adminUserId: string;\n        action: string;\n        targetUserId: string;\n        requestBody?: any;\n        requestParams?: any;\n      };\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/admin/admin.routes.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'requireAllPermissions' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'requireAnyPermission' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'notes' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":741,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":741,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'notes' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1201,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1201,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\nimport { isAuthenticated, getAuthUserId } from \"../auth\";\nimport { generalRateLimit } from \"../rate-limiting\";\nimport { logger } from \"../logger\";\nimport { assertRouteParam } from \"../shared/utils\";\nimport {\n  requirePermission,\n  requireAllPermissions,\n  requireAnyPermission,\n  requireAdmin,\n  auditAdminAction,\n  comprehensiveAuditLogging,\n  ADMIN_PERMISSIONS,\n} from \"./admin.middleware\";\nimport { z } from \"zod\";\n\nconst router = Router();\n\n// Apply comprehensive audit logging FIRST to capture ALL responses including 401/429\nrouter.use(comprehensiveAuditLogging);\n\n// Apply general middleware\nrouter.use(isAuthenticated);\nrouter.use(generalRateLimit);\n\n// Require admin role for all routes in this router\nrouter.use(requireAdmin);\n\n// ===== VALIDATION SCHEMAS =====\n\nconst queueFiltersSchema = z.object({\n  status: z\n    .enum([\"open\", \"assigned\", \"in_progress\", \"completed\", \"skipped\"])\n    .optional(),\n  assignedModerator: z.string().optional(),\n  priority: z.coerce.number().int().min(1).max(10).optional(),\n  itemType: z.enum([\"report\", \"auto_flag\", \"appeal\", \"ban_evasion\"]).optional(),\n  overdue: z\n    .enum([\"true\", \"false\"])\n    .transform((v) => v === \"true\")\n    .optional(),\n});\n\nconst bulkAssignSchema = z.object({\n  itemIds: z.array(z.string().min(1)),\n  moderatorId: z.string().min(1),\n});\n\nconst autoAssignSchema = z.object({\n  itemType: z.enum([\"report\", \"auto_flag\", \"appeal\", \"ban_evasion\"]).optional(),\n});\n\nconst completeQueueItemSchema = z.object({\n  resolution: z.string().min(1),\n  actionTaken: z.string().optional(),\n});\n\nconst priorityUpdateSchema = z.object({\n  priority: z.number().int().min(1).max(10),\n});\n\nconst escalateSchema = z.object({\n  thresholdHours: z.number().positive().optional(),\n});\n\nconst userFiltersSchema = z.object({\n  page: z.coerce.number().int().min(1).optional(),\n  limit: z.coerce.number().int().min(1).max(100).optional(),\n  search: z.string().optional(),\n  role: z.string().optional(),\n  status: z\n    .enum([\"online\", \"offline\", \"away\", \"busy\", \"gaming\", \"all\"])\n    .optional(),\n  sortBy: z\n    .enum([\n      \"createdAt\",\n      \"updatedAt\",\n      \"username\",\n      \"email\",\n      \"firstName\",\n      \"lastName\",\n    ])\n    .optional(),\n  order: z.enum([\"asc\", \"desc\"]).optional(),\n});\n\nconst userUpdateSchema = z.object({\n  firstName: z.string().min(1).optional(),\n  lastName: z.string().min(1).optional(),\n  username: z.string().min(1).optional(),\n  email: z.string().email().optional(),\n  bio: z.string().optional(),\n  location: z.string().optional(),\n  website: z.string().url().optional(),\n  timezone: z.string().optional(),\n  isPrivate: z.boolean().optional(),\n  showOnlineStatus: z.enum([\"everyone\", \"friends_only\"]).optional(),\n  allowDirectMessages: z.enum([\"everyone\", \"friends_only\"]).optional(),\n});\n\nconst roleAssignSchema = z.object({\n  role: z.enum([\"admin\", \"moderator\", \"trust_safety\", \"community_manager\"]),\n  permissions: z.array(z.string()).optional(),\n  expiresAt: z.string().datetime().optional(),\n  notes: z.string().optional(),\n});\n\nconst userActionSchema = z.object({\n  action: z.enum([\n    \"mute\",\n    \"unmute\",\n    \"warn\",\n    \"restrict\",\n    \"ban\",\n    \"unban\",\n    \"shadowban\",\n    \"account_suspend\",\n    \"note\",\n  ]),\n  reason: z.string().min(1, \"Reason is required\"),\n  duration: z.coerce.number().int().positive().optional(), // For temporary restrictions (in hours)\n  notes: z.string().optional(),\n  isPublic: z.boolean().optional(), // Whether the action is visible to other users\n});\n\nconst reverseModerationActionSchema = z.object({\n  reason: z.string().min(1, \"Reason for reversal is required\"),\n  notes: z.string().optional(),\n});\n\n// ===== SYSTEM STATUS & CONFIGURATION ROUTES =====\n\n/**\n * GET /api/admin/system/status\n * Get system status and admin account configuration\n * Requires: super_admin role\n */\nrouter.get(\n  \"/system/status\",\n  requirePermission(ADMIN_PERMISSIONS.SUPER_ADMIN),\n  auditAdminAction(\"system_status_viewed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const adminEmail = process.env.MASTER_ADMIN_EMAIL;\n\n      if (!adminEmail) {\n        res.json({\n          adminConfigured: false,\n          message: \"No master admin email configured\",\n          recommendation:\n            \"Set MASTER_ADMIN_EMAIL environment variable and run npm run admin:init\",\n        });\n        return;\n      }\n\n      // Check if admin user exists\n      const adminUser = await storage.getUserByEmail(adminEmail);\n\n      if (!adminUser) {\n        res.json({\n          adminConfigured: false,\n          adminEmail,\n          userExists: false,\n          message: \"Admin email configured but user does not exist\",\n          recommendation: \"Run npm run admin:init to create admin account\",\n        });\n        return;\n      }\n\n      // Check if user has super_admin role\n      const userRoles = await storage.getUserRoles(adminUser.id);\n      const hasSuperAdmin = userRoles.some(\n        (role) => role.role === \"super_admin\" && role.isActive,\n      );\n\n      res.json({\n        adminConfigured: true,\n        adminEmail,\n        userExists: true,\n        userId: adminUser.id,\n        hasSuperAdminRole: hasSuperAdmin,\n        emailVerified: adminUser.isEmailVerified,\n        hasPassword: !!adminUser.passwordHash,\n        authMethods: {\n          oauth: true, // Always available\n          credentials: !!adminUser.passwordHash,\n        },\n        mfaEnabled: adminUser.mfaEnabled,\n        lastLogin: adminUser.lastLoginAt,\n        createdAt: adminUser.createdAt,\n        recommendation: hasSuperAdmin\n          ? \"Admin account properly configured\"\n          : \"Admin user exists but missing super_admin role - run npm run admin:init\",\n      });\n    } catch (error) {\n      logger.error(\"Error checking system status\", error, {\n        userId: getAuthUserId(req),\n        operation: \"system_status_check\",\n      });\n      res.status(500).json({\n        message: \"Failed to check system status\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n      return;\n    }\n  },\n);\n\n/**\n * POST /api/admin/system/verify-admin\n * Verify admin account setup and report issues\n * Requires: super_admin role\n */\nrouter.post(\n  \"/system/verify-admin\",\n  requirePermission(ADMIN_PERMISSIONS.SUPER_ADMIN),\n  auditAdminAction(\"admin_verification_run\"),\n  async (req, res): Promise<void> => {\n    try {\n      const issues: string[] = [];\n      const checks = {\n        environmentConfigured: false,\n        userExists: false,\n        emailVerified: false,\n        roleAssigned: false,\n        authenticationConfigured: false,\n      };\n\n      // Check 1: Environment variable\n      const adminEmail = process.env.MASTER_ADMIN_EMAIL;\n      if (!adminEmail) {\n        issues.push(\"MASTER_ADMIN_EMAIL environment variable is not set\");\n      } else {\n        checks.environmentConfigured = true;\n\n        // Check 2: User exists\n        const adminUser = await storage.getUserByEmail(adminEmail);\n        if (!adminUser) {\n          issues.push(`Admin user does not exist for email: ${adminEmail}`);\n        } else {\n          checks.userExists = true;\n\n          // Check 3: Email verified\n          if (!adminUser.isEmailVerified) {\n            issues.push(\"Admin account email is not verified\");\n          } else {\n            checks.emailVerified = true;\n          }\n\n          // Check 4: Super admin role\n          const userRoles = await storage.getUserRoles(adminUser.id);\n          const hasSuperAdmin = userRoles.some(\n            (role) => role.role === \"super_admin\" && role.isActive,\n          );\n\n          if (!hasSuperAdmin) {\n            issues.push(\"Admin user does not have super_admin role assigned\");\n          } else {\n            checks.roleAssigned = true;\n          }\n\n          // Check 5: Authentication method\n          const hasOAuth =\n            process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET;\n          const hasPassword = !!adminUser.passwordHash;\n\n          if (!hasOAuth && !hasPassword) {\n            issues.push(\n              \"No authentication method configured (neither OAuth nor password)\",\n            );\n          } else {\n            checks.authenticationConfigured = true;\n          }\n\n          // Additional security checks\n          if (!adminUser.mfaEnabled) {\n            issues.push(\n              \"MFA is not enabled for admin account (recommended for security)\",\n            );\n          }\n        }\n      }\n\n      const allChecksPassed = Object.values(checks).every(\n        (check) => check === true,\n      );\n\n      res.json({\n        status: allChecksPassed ? \"verified\" : \"issues_found\",\n        checks,\n        issues,\n        recommendation:\n          issues.length > 0\n            ? \"Run npm run admin:init to resolve configuration issues\"\n            : \"Admin account is properly configured\",\n        securityRecommendations: [\n          adminEmail && checks.userExists && !checks.authenticationConfigured\n            ? \"Enable OAuth or set admin password\"\n            : null,\n          checks.userExists &&\n          checks.roleAssigned &&\n          issues.includes(\n            \"MFA is not enabled for admin account (recommended for security)\",\n          )\n            ? \"Enable MFA for enhanced security\"\n            : null,\n        ].filter(Boolean),\n      });\n    } catch (error) {\n      logger.error(\"Error verifying admin account\", error, {\n        userId: getAuthUserId(req),\n        operation: \"admin_verification\",\n      });\n      res.status(500).json({\n        message: \"Failed to verify admin account\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n      return;\n    }\n  },\n);\n\n// ===== USER MANAGEMENT ROUTES =====\n\n// Get users (with filtering and pagination)\nrouter.get(\n  \"/users\",\n  requirePermission(ADMIN_PERMISSIONS.USER_VIEW),\n  auditAdminAction(\"users_list_viewed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const validation = userFiltersSchema.safeParse(req.query);\n      if (!validation.success) {\n        res.status(400).json({\n          message: \"Invalid query parameters\",\n          errors: validation.error.errors,\n        });\n        return;\n      }\n\n      const { page, limit, search, role, status, sortBy, order } =\n        validation.data;\n\n      const result = await storage.getAllUsers({\n        page,\n        limit,\n        search,\n        role,\n        status,\n        sortBy,\n        order,\n      });\n\n      const data = {\n        users: result.users,\n        pagination: {\n          page: page || 1,\n          limit: limit || 50,\n          total: result.total,\n          totalPages: Math.ceil(result.total / (limit || 50)),\n        },\n      };\n\n      res.json(data);\n    } catch (error) {\n      logger.error(\"Error fetching users\", error, {\n        userId: getAuthUserId(req),\n        operation: \"fetch_users\",\n      });\n      res.status(500).json({ message: \"Failed to fetch users\" });\n      return;\n    }\n  },\n);\n\n// Get specific user details\nrouter.get(\n  \"/users/:userId\",\n  requirePermission(ADMIN_PERMISSIONS.USER_VIEW),\n  auditAdminAction(\"user_details_viewed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const userId = assertRouteParam(req.params.userId, \"userId\");\n\n      const [user, roles, reputation, moderationActions, appeals] =\n        await Promise.all([\n          storage.getUser(userId),\n          storage.getUserRoles(userId),\n          storage.getUserReputation(userId),\n          storage.getModerationActions({ targetUserId: userId }),\n          storage.getUserAppeals({ userId }),\n        ]);\n\n      if (!user) {\n        res.status(404).json({ message: \"User not found\" });\n        return;\n      }\n\n      const data = {\n        user,\n        roles,\n        reputation,\n        moderationHistory: moderationActions,\n        appeals,\n      };\n\n      res.json(data);\n    } catch (error) {\n      logger.error(\"Error fetching user details\", error, {\n        userId: getAuthUserId(req),\n        operation: \"fetching_user_details\",\n      });\n      res.status(500).json({ message: \"Failed to fetch user details\" });\n      return;\n    }\n  },\n);\n\n// Update user\nrouter.patch(\n  \"/users/:userId\",\n  requirePermission(ADMIN_PERMISSIONS.USER_EDIT),\n  auditAdminAction(\"user_updated\"),\n  async (req, res): Promise<void> => {\n    try {\n      const userId = assertRouteParam(req.params.userId, \"userId\");\n\n      const validation = userUpdateSchema.safeParse(req.body);\n      if (!validation.success) {\n        res.status(400).json({\n          message: \"Invalid user data\",\n          errors: validation.error.errors,\n        });\n        return;\n      }\n\n      const updates = validation.data;\n\n      // Check if user exists\n      const existingUser = await storage.getUser(userId);\n      if (!existingUser) {\n        res.status(404).json({ message: \"User not found\" });\n        return;\n      }\n\n      const updatedUser = await storage.updateUser(userId, updates);\n\n      res.json(updatedUser);\n    } catch (error) {\n      logger.error(\"Error updating user\", error, {\n        userId: getAuthUserId(req),\n        operation: \"updating_user\",\n      });\n      res.status(500).json({ message: \"Failed to update user\" });\n      return;\n    }\n  },\n);\n\n// ===== ROLE MANAGEMENT ROUTES =====\n\n// Get user roles\nrouter.get(\n  \"/users/:userId/roles\",\n  requirePermission(ADMIN_PERMISSIONS.ROLE_VIEW),\n  auditAdminAction(\"user_roles_viewed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const userId = assertRouteParam(req.params.userId, \"userId\");\n\n      const roles = await storage.getUserRoles(userId);\n\n      res.json(roles);\n    } catch (error) {\n      logger.error(\"Error fetching user roles\", error, {\n        userId: getAuthUserId(req),\n        operation: \"fetching_user_roles\",\n      });\n      res.status(500).json({ message: \"Failed to fetch user roles\" });\n      return;\n    }\n  },\n);\n\n// Assign role to user\nrouter.post(\n  \"/users/:userId/roles\",\n  requirePermission(ADMIN_PERMISSIONS.ROLE_ASSIGN),\n  auditAdminAction(\"role_assigned\"),\n  async (req, res): Promise<void> => {\n    try {\n      const userId = assertRouteParam(req.params.userId, \"userId\");\n\n      const validation = roleAssignSchema.safeParse(req.body);\n      if (!validation.success) {\n        res.status(400).json({\n          message: \"Invalid role data\",\n          errors: validation.error.errors,\n        });\n        return;\n      }\n\n      const { role, permissions, expiresAt, notes } = validation.data;\n      const adminUserId = getAuthUserId(req);\n\n      // Check if user exists\n      const existingUser = await storage.getUser(userId);\n      if (!existingUser) {\n        res.status(404).json({ message: \"User not found\" });\n        return;\n      }\n\n      const roleData = {\n        userId,\n        role,\n        permissions: permissions ? JSON.stringify(permissions) : \"[]\",\n        assignedBy: adminUserId,\n        expiresAt: expiresAt ? new Date(expiresAt) : undefined,\n        notes,\n      };\n\n      const newRole = await storage.createUserRole(roleData);\n\n      res.status(201).json(newRole);\n      return;\n    } catch (error) {\n      logger.error(\"Error assigning role\", error, {\n        userId: getAuthUserId(req),\n        operation: \"assigning_role\",\n      });\n      res.status(500).json({ message: \"Failed to assign role\" });\n      return;\n    }\n  },\n);\n\n// Remove role from user\nrouter.delete(\n  \"/users/:userId/roles/:roleId\",\n  requirePermission(ADMIN_PERMISSIONS.ROLE_REVOKE),\n  auditAdminAction(\"role_revoked\"),\n  async (req, res): Promise<void> => {\n    try {\n      const roleId = assertRouteParam(req.params.roleId, \"roleId\");\n\n      await storage.deleteUserRole(roleId);\n\n      res.json({ message: \"Role revoked successfully\" });\n    } catch (error) {\n      logger.error(\"Error revoking role\", error, {\n        userId: getAuthUserId(req),\n        operation: \"revoking_role\",\n      });\n      res.status(500).json({ message: \"Failed to revoke role\" });\n      return;\n    }\n  },\n);\n\n// ===== USER PROFILE MANAGEMENT =====\n\n// Get user detailed information\nrouter.get(\n  \"/users/:userId/details\",\n  requirePermission(ADMIN_PERMISSIONS.USER_VIEW),\n  auditAdminAction(\"user_details_viewed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const userId = assertRouteParam(req.params.userId, \"userId\");\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        res.status(404).json({ message: \"User not found\" });\n        return;\n      }\n\n      // Get additional user data\n      const [roles, reputation, socialLinks, gamingProfiles] =\n        await Promise.all([\n          storage.getUserRoles(userId),\n          storage.getUserReputation(userId),\n          storage.getUserSocialLinks(userId),\n          storage.getUserGamingProfiles(userId),\n        ]);\n\n      res.json({\n        user,\n        roles,\n        reputation,\n        socialLinks,\n        gamingProfiles,\n        stats: {\n          totalRoles: roles.length,\n          reputationScore: reputation?.score || 0,\n          socialLinksCount: socialLinks.length,\n          gamingProfilesCount: gamingProfiles.length,\n        },\n      });\n    } catch (error) {\n      logger.error(\"Error fetching user details\", error, {\n        userId: getAuthUserId(req),\n        operation: \"fetching_user_details\",\n      });\n      res.status(500).json({ message: \"Failed to fetch user details\" });\n      return;\n    }\n  },\n);\n\n// ===== USER MODERATION NOTES =====\n\n// Get user moderation notes (stored as special moderation actions)\nrouter.get(\n  \"/users/:userId/notes\",\n  requirePermission(ADMIN_PERMISSIONS.USER_VIEW),\n  auditAdminAction(\"user_notes_viewed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const userId = assertRouteParam(req.params.userId, \"userId\");\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        res.status(404).json({ message: \"User not found\" });\n        return;\n      }\n\n      // Get notes from moderation actions with action type 'note'\n      const notes = await storage.getModerationActions({\n        targetUserId: userId,\n        action: \"note\",\n      });\n\n      res.json({\n        userId,\n        notes: notes.map((note) => ({\n          id: note.id,\n          content: note.adminNotes,\n          moderatorId: note.moderatorId,\n          moderatorName: \"Unknown\", // note.moderator would need to be joined\n          createdAt: note.createdAt,\n          updatedAt: note.createdAt, // Use createdAt since there's no updatedAt\n        })),\n        total: notes.length,\n      });\n    } catch (error) {\n      logger.error(\"Error fetching user notes\", error, {\n        userId: getAuthUserId(req),\n        operation: \"fetching_user_notes\",\n      });\n      res.status(500).json({ message: \"Failed to fetch user notes\" });\n      return;\n    }\n  },\n);\n\n// Add moderation note to user\nrouter.post(\n  \"/users/:userId/notes\",\n  requirePermission(ADMIN_PERMISSIONS.USER_EDIT),\n  auditAdminAction(\"user_note_added\"),\n  async (req, res): Promise<void> => {\n    try {\n      const userId = assertRouteParam(req.params.userId, \"userId\");\n      const { content } = req.body;\n\n      if (\n        !content ||\n        typeof content !== \"string\" ||\n        content.trim().length === 0\n      ) {\n        res.status(400).json({\n          message: \"Note content is required\",\n          errors: [{ message: \"Content must be a non-empty string\" }],\n        });\n        return;\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        res.status(404).json({ message: \"User not found\" });\n        return;\n      }\n\n      const adminUserId = getAuthUserId(req);\n\n      // Create moderation action with action type 'note'\n      const moderationAction = await storage.createModerationAction({\n        moderatorId: adminUserId,\n        targetUserId: userId,\n        action: \"note\",\n        reason: \"Moderation note\",\n        adminNotes: content.trim(),\n        isActive: false,\n      });\n\n      const adminUser = await storage.getUser(adminUserId);\n\n      res.status(201).json({\n        id: moderationAction.id,\n        content: moderationAction.adminNotes,\n        moderatorId: adminUserId,\n        moderatorName:\n          adminUser?.firstName && adminUser?.lastName\n            ? `${adminUser.firstName} ${adminUser.lastName}`\n            : adminUser?.username || \"Unknown\",\n        createdAt: moderationAction.createdAt,\n      });\n      return;\n    } catch (error) {\n      logger.error(\"Error adding user note\", error, {\n        userId: getAuthUserId(req),\n        operation: \"adding_user_note\",\n      });\n      res.status(500).json({ message: \"Failed to add user note\" });\n      return;\n    }\n  },\n);\n\n// ===== USER ACTIONS =====\n\n// Perform moderation action on user\nrouter.post(\n  \"/users/:userId/actions\",\n  requirePermission(ADMIN_PERMISSIONS.MODERATION_CREATE_ACTION),\n  auditAdminAction(\"user_action_performed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const userId = assertRouteParam(req.params.userId, \"userId\");\n\n      const validation = userActionSchema.safeParse(req.body);\n      if (!validation.success) {\n        res.status(400).json({\n          message: \"Invalid action data\",\n          errors: validation.error.errors,\n        });\n        return;\n      }\n\n      const { action, reason, duration, notes } = validation.data;\n      const adminUserId = getAuthUserId(req);\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        res.status(404).json({ message: \"User not found\" });\n        return;\n      }\n\n      // Handle special case for unmute - reverse the mute action instead of creating unmute action\n      if (action === \"unmute\") {\n        // Find the most recent active mute action for this user\n        const allActions = await storage.getUserActiveModerationActions(userId);\n        const muteActions = allActions.filter(\n          (action) => action.action === \"mute\" && action.isActive,\n        );\n        if (muteActions.length === 0) {\n          res.status(400).json({ message: \"No active mute found to reverse\" });\n          return;\n        }\n\n        // Reverse the most recent mute action\n        const mostRecentMute = muteActions[0];\n        if (!mostRecentMute) {\n          res.status(400).json({ message: \"No active mute found to reverse\" });\n          return;\n        }\n        await storage.reverseModerationAction(\n          mostRecentMute.id,\n          adminUserId,\n          reason,\n        );\n\n        res.json({\n          message: \"User unmuted successfully\",\n          action: \"unmute_completed\",\n          user: await storage.getUser(userId),\n        });\n        return;\n      }\n\n      // Create moderation action record for all other actions\n      const { isPublic, action: rawAction, ...actionData } = validation.data;\n\n      // Ensure action is valid for database schema (exclude unmute as it's handled above)\n      if (rawAction === \"unmute\") {\n        res\n          .status(500)\n          .json({ message: \"Unmute action should have been handled above\" });\n        return;\n      }\n\n      // Now we can safely cast the action since unmute is excluded\n      const validAction = rawAction as\n        | \"restrict\"\n        | \"warn\"\n        | \"mute\"\n        | \"shadowban\"\n        | \"ban\"\n        | \"unban\"\n        | \"account_suspend\"\n        | \"note\";\n\n      // Calculate expiration time only for valid positive durations\n      const expiresAt =\n        duration && duration > 0\n          ? new Date(Date.now() + duration * 60 * 60 * 1000)\n          : undefined;\n\n      const moderationAction = await storage.createModerationAction({\n        moderatorId: adminUserId,\n        targetUserId: userId,\n        action: validAction,\n        ...actionData,\n        isActive: ![\"unban\", \"warn\", \"note\"].includes(validAction),\n        isPublic: isPublic !== false, // Default to public unless explicitly set to false\n        duration: duration || undefined,\n        expiresAt,\n      });\n\n      res.json({\n        message: `User ${action} completed successfully`,\n        action: moderationAction,\n        user: await storage.getUser(userId),\n      });\n    } catch (error) {\n      logger.error(\"Error performing user action\", error, {\n        userId: getAuthUserId(req),\n        operation: \"performing_user_action\",\n      });\n      res.status(500).json({ message: \"Failed to perform user action\" });\n      return;\n    }\n  },\n);\n\n// Get user activity history\nrouter.get(\n  \"/users/:userId/activity\",\n  requirePermission(ADMIN_PERMISSIONS.USER_VIEW),\n  auditAdminAction(\"user_activity_viewed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const userId = assertRouteParam(req.params.userId, \"userId\");\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        res.status(404).json({ message: \"User not found\" });\n        return;\n      }\n\n      const [moderationActions, appeals, roles] = await Promise.all([\n        storage.getModerationActions({ targetUserId: userId }),\n        storage.getUserAppeals({ userId }),\n        storage.getUserRoles(userId),\n      ]);\n\n      const activity = {\n        user,\n        moderationHistory: moderationActions,\n        appeals,\n        roles,\n        stats: {\n          totalModerationActions: moderationActions.length,\n          activeRestrictions: moderationActions.filter(\n            (a) => [\"mute\", \"restrict\"].includes(a.action) && a.isActive,\n          ).length,\n          totalAppeals: appeals.length,\n          activeRoles: roles.filter(\n            (r) => !r.expiresAt || r.expiresAt > new Date(),\n          ).length,\n        },\n      };\n\n      res.json(activity);\n    } catch (error) {\n      logger.error(\"Error fetching user activity\", error, {\n        userId: getAuthUserId(req),\n        operation: \"fetching_user_activity\",\n      });\n      res.status(500).json({ message: \"Failed to fetch user activity\" });\n      return;\n    }\n  },\n);\n\n// ===== CONTENT MODERATION ROUTES =====\n\n// Get content reports\nrouter.get(\n  \"/content-reports\",\n  requirePermission(ADMIN_PERMISSIONS.CONTENT_VIEW_REPORTS),\n  auditAdminAction(\"content_reports_viewed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const { status, priority, assignedModerator } = req.query;\n\n      const reports = await storage.getContentReports({\n        status: status as string,\n        priority: priority as string,\n        assignedModerator: assignedModerator as string,\n      });\n\n      res.json(reports);\n    } catch (error) {\n      logger.error(\"Error fetching content reports\", error, {\n        userId: getAuthUserId(req),\n        operation: \"fetching_content_reports\",\n      });\n      res.status(500).json({ message: \"Failed to fetch content reports\" });\n      return;\n    }\n  },\n);\n\n// Get specific content report\nrouter.get(\n  \"/content-reports/:reportId\",\n  requirePermission(ADMIN_PERMISSIONS.CONTENT_VIEW_REPORTS),\n  auditAdminAction(\"content_report_viewed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const reportId = assertRouteParam(req.params.reportId, \"reportId\");\n\n      const report = await storage.getContentReport(reportId);\n      if (!report) {\n        res.status(404).json({ message: \"Content report not found\" });\n        return;\n      }\n\n      res.json(report);\n    } catch (error) {\n      logger.error(\"Error fetching content report\", error, {\n        userId: getAuthUserId(req),\n        operation: \"fetching_content_report\",\n      });\n      res.status(500).json({ message: \"Failed to fetch content report\" });\n      return;\n    }\n  },\n);\n\n// Assign content report to moderator\nrouter.patch(\n  \"/content-reports/:reportId/assign\",\n  requirePermission(ADMIN_PERMISSIONS.CONTENT_MODERATE),\n  auditAdminAction(\"content_report_assigned\"),\n  async (req, res): Promise<void> => {\n    try {\n      const reportId = assertRouteParam(req.params.reportId, \"reportId\");\n      const { moderatorId } = req.body;\n\n      const report = await storage.assignContentReport(reportId, moderatorId);\n\n      res.json(report);\n    } catch (error) {\n      logger.error(\"Error assigning content report\", error, {\n        userId: getAuthUserId(req),\n        operation: \"assigning_content_report\",\n      });\n      res.status(500).json({ message: \"Failed to assign content report\" });\n      return;\n    }\n  },\n);\n\n// Resolve content report\nrouter.patch(\n  \"/content-reports/:reportId/resolve\",\n  requirePermission(ADMIN_PERMISSIONS.CONTENT_MODERATE),\n  auditAdminAction(\"content_report_resolved\"),\n  async (req, res): Promise<void> => {\n    try {\n      const reportId = assertRouteParam(req.params.reportId, \"reportId\");\n      const { resolution, actionTaken } = req.body;\n      const moderatorId = getAuthUserId(req);\n\n      const report = await storage.resolveContentReport(\n        reportId,\n        resolution,\n        actionTaken,\n        moderatorId,\n      );\n\n      res.json(report);\n    } catch (error) {\n      logger.error(\"Error resolving content report\", error, {\n        userId: getAuthUserId(req),\n        operation: \"resolving_content_report\",\n      });\n      res.status(500).json({ message: \"Failed to resolve content report\" });\n      return;\n    }\n  },\n);\n\n// ===== MODERATION ACTIONS ROUTES =====\n\n// Get moderation actions\nrouter.get(\n  \"/moderation-actions\",\n  requirePermission(ADMIN_PERMISSIONS.MODERATION_VIEW_ACTIONS),\n  auditAdminAction(\"moderation_actions_viewed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const { targetUserId, moderatorId, action, isActive } = req.query;\n\n      const actions = await storage.getModerationActions({\n        targetUserId: targetUserId as string,\n        moderatorId: moderatorId as string,\n        action: action as string,\n        isActive:\n          isActive === \"true\" ? true : isActive === \"false\" ? false : undefined,\n      });\n\n      res.json(actions);\n    } catch (error) {\n      logger.error(\"Error fetching moderation actions\", error, {\n        userId: getAuthUserId(req),\n        operation: \"fetching_moderation_actions\",\n      });\n      res.status(500).json({ message: \"Failed to fetch moderation actions\" });\n      return;\n    }\n  },\n);\n\n// Create moderation action\nrouter.post(\n  \"/moderation-actions\",\n  requirePermission(ADMIN_PERMISSIONS.MODERATION_CREATE_ACTION),\n  auditAdminAction(\"moderation_action_created\"),\n  async (req, res): Promise<void> => {\n    try {\n      const moderatorId = getAuthUserId(req);\n      const actionData = {\n        ...req.body,\n        moderatorId,\n      };\n\n      const action = await storage.createModerationAction(actionData);\n\n      res.status(201).json(action);\n      return;\n    } catch (error) {\n      logger.error(\"Error creating moderation action\", error, {\n        userId: getAuthUserId(req),\n        operation: \"creating_moderation_action\",\n      });\n      res.status(500).json({ message: \"Failed to create moderation action\" });\n      return;\n    }\n  },\n);\n\n// Reverse moderation action\nrouter.patch(\n  \"/moderation-actions/:actionId/reverse\",\n  requirePermission(ADMIN_PERMISSIONS.MODERATION_REVERSE_ACTION),\n  auditAdminAction(\"moderation_action_reversed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const actionId = assertRouteParam(req.params.actionId, \"actionId\");\n      const { reason } = req.body;\n      const reversedBy = getAuthUserId(req);\n\n      const action = await storage.reverseModerationAction(\n        actionId,\n        reversedBy,\n        reason,\n      );\n\n      res.json(action);\n    } catch (error) {\n      logger.error(\"Error reversing moderation action\", error, {\n        userId: getAuthUserId(req),\n        operation: \"reversing_moderation_action\",\n      });\n      res.status(500).json({ message: \"Failed to reverse moderation action\" });\n      return;\n    }\n  },\n);\n\n// Get user's active moderation actions\nrouter.get(\n  \"/users/:userId/moderation-actions/active\",\n  requirePermission(ADMIN_PERMISSIONS.MODERATION_VIEW_ACTIONS),\n  auditAdminAction(\"user_active_moderation_actions_viewed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const userId = assertRouteParam(req.params.userId, \"userId\");\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        res.status(404).json({ message: \"User not found\" });\n        return;\n      }\n\n      const activeModerationActions =\n        await storage.getUserActiveModerationActions(userId);\n\n      res.json({\n        userId,\n        activeActions: activeModerationActions.map((action) => ({\n          id: action.id,\n          action: action.action,\n          reason: action.reason,\n          notes: action.adminNotes,\n          moderatorId: action.moderatorId,\n          moderatorName: \"Unknown\", // action.moderator would need to be joined\n          isActive: action.isActive,\n          isPublic: action.isPublic,\n          duration: action.duration,\n          expiresAt: action.expiresAt,\n          createdAt: action.createdAt,\n        })),\n        total: activeModerationActions.length,\n      });\n    } catch (error) {\n      logger.error(\"Error fetching active moderation actions\", error, {\n        userId: getAuthUserId(req),\n        operation: \"fetching_active_moderation_actions\",\n      });\n      res\n        .status(500)\n        .json({ message: \"Failed to fetch active moderation actions\" });\n      return;\n    }\n  },\n);\n\n// Get user's moderation action history\nrouter.get(\n  \"/users/:userId/moderation-actions/history\",\n  requirePermission(ADMIN_PERMISSIONS.MODERATION_VIEW_ACTIONS),\n  auditAdminAction(\"user_moderation_history_viewed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const userId = assertRouteParam(req.params.userId, \"userId\");\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        res.status(404).json({ message: \"User not found\" });\n        return;\n      }\n\n      const moderationHistory = await storage.getModerationActions({\n        targetUserId: userId,\n      });\n\n      res.json({\n        userId,\n        history: moderationHistory.map((action) => ({\n          id: action.id,\n          action: action.action,\n          reason: action.reason,\n          notes: action.adminNotes,\n          moderatorId: action.moderatorId,\n          moderatorName: \"Unknown\", // action.moderator would need to be joined\n          isActive: action.isActive,\n          isPublic: action.isPublic,\n          duration: action.duration,\n          expiresAt: action.expiresAt,\n          reversedAt: action.reversedAt,\n          reversedBy: action.reversedBy,\n          createdAt: action.createdAt,\n          updatedAt: action.createdAt, // Use createdAt since there's no updatedAt\n        })),\n        total: moderationHistory.length,\n      });\n    } catch (error) {\n      logger.error(\"Error fetching moderation history\", error, {\n        userId: getAuthUserId(req),\n        operation: \"fetching_moderation_history\",\n      });\n      res.status(500).json({ message: \"Failed to fetch moderation history\" });\n      return;\n    }\n  },\n);\n\n// Reverse a moderation action\nrouter.post(\n  \"/moderation-actions/:actionId/reverse\",\n  requirePermission(ADMIN_PERMISSIONS.MODERATION_REVERSE_ACTION),\n  auditAdminAction(\"moderation_action_reversed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const actionId = assertRouteParam(req.params.actionId, \"actionId\");\n\n      const validation = reverseModerationActionSchema.safeParse(req.body);\n      if (!validation.success) {\n        res.status(400).json({\n          message: \"Invalid reversal data\",\n          errors: validation.error.errors,\n        });\n        return;\n      }\n\n      const { reason, notes } = validation.data;\n      const adminUserId = getAuthUserId(req);\n\n      const action = await storage.getModerationAction(actionId);\n      if (!action) {\n        res.status(404).json({ message: \"Moderation action not found\" });\n        return;\n      }\n\n      if (!action.isActive) {\n        res.status(400).json({ message: \"Action is already inactive\" });\n        return;\n      }\n\n      if (!action.isReversible) {\n        res.status(400).json({ message: \"This action cannot be reversed\" });\n        return;\n      }\n\n      const reversedAction = await storage.reverseModerationAction(\n        actionId,\n        adminUserId,\n        reason,\n      );\n\n      res.json({\n        message: \"Moderation action reversed successfully\",\n        action: {\n          id: reversedAction.id,\n          action: reversedAction.action,\n          reason: reversedAction.reason,\n          notes: reversedAction.adminNotes,\n          isActive: reversedAction.isActive,\n          reversedAt: reversedAction.reversedAt,\n          reversedBy: reversedAction.reversedBy,\n        },\n      });\n    } catch (error) {\n      logger.error(\"Error reversing moderation action\", error, {\n        userId: getAuthUserId(req),\n        operation: \"reversing_moderation_action\",\n      });\n      res.status(500).json({ message: \"Failed to reverse moderation action\" });\n      return;\n    }\n  },\n);\n\n// Get moderation action details\nrouter.get(\n  \"/moderation-actions/:actionId\",\n  requirePermission(ADMIN_PERMISSIONS.MODERATION_VIEW_ACTIONS),\n  auditAdminAction(\"moderation_action_viewed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const actionId = assertRouteParam(req.params.actionId, \"actionId\");\n\n      const action = await storage.getModerationAction(actionId);\n      if (!action) {\n        res.status(404).json({ message: \"Moderation action not found\" });\n        return;\n      }\n\n      res.json({\n        id: action.id,\n        action: action.action,\n        reason: action.reason,\n        notes: action.adminNotes,\n        targetUserId: action.targetUserId,\n        targetUserName: \"Unknown\", // action.targetUser would need to be joined\n        moderatorId: action.moderatorId,\n        moderatorName: \"Unknown\", // action.moderator would need to be joined\n        isActive: action.isActive,\n        isPublic: action.isPublic,\n        isReversible: action.isReversible,\n        duration: action.duration,\n        expiresAt: action.expiresAt,\n        reversedAt: action.reversedAt,\n        reversedBy: action.reversedBy,\n        metadata: action.metadata,\n        createdAt: action.createdAt,\n        updatedAt: action.createdAt, // Use createdAt since there's no updatedAt\n      });\n    } catch (error) {\n      logger.error(\"Error fetching moderation action\", error, {\n        userId: getAuthUserId(req),\n        operation: \"fetching_moderation_action\",\n      });\n      res.status(500).json({ message: \"Failed to fetch moderation action\" });\n      return;\n    }\n  },\n);\n\n// ===== MODERATION QUEUE ROUTES =====\n\n// Get moderation queue with enhanced filtering\nrouter.get(\n  \"/moderation-queue\",\n  requirePermission(ADMIN_PERMISSIONS.QUEUE_VIEW),\n  auditAdminAction(\"moderation_queue_viewed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const validation = queueFiltersSchema.safeParse(req.query);\n      if (!validation.success) {\n        res.status(400).json({\n          message: \"Invalid query parameters\",\n          errors: validation.error.errors,\n        });\n        return;\n      }\n\n      const { status, assignedModerator, priority, itemType, overdue } =\n        validation.data;\n\n      const queue = await storage.getModerationQueue({\n        status,\n        assignedModerator,\n        priority,\n        itemType,\n        overdue,\n      });\n\n      res.json(queue);\n    } catch (error) {\n      logger.error(\"Error fetching moderation queue\", error, {\n        userId: getAuthUserId(req),\n        operation: \"fetching_moderation_queue\",\n      });\n      res.status(500).json({ message: \"Failed to fetch moderation queue\" });\n      return;\n    }\n  },\n);\n\n// Assign queue item to moderator\nrouter.patch(\n  \"/moderation-queue/:itemId/assign\",\n  requirePermission(ADMIN_PERMISSIONS.QUEUE_ASSIGN),\n  auditAdminAction(\"queue_item_assigned\"),\n  async (req, res): Promise<void> => {\n    try {\n      const itemId = assertRouteParam(req.params.itemId, \"itemId\");\n      const moderatorId = getAuthUserId(req);\n\n      const item = await storage.assignModerationQueueItem(itemId, moderatorId);\n\n      res.json(item);\n    } catch (error) {\n      logger.error(\"Error assigning queue item\", error, {\n        userId: getAuthUserId(req),\n        operation: \"assigning_queue_item\",\n      });\n      res.status(500).json({ message: \"Failed to assign queue item\" });\n      return;\n    }\n  },\n);\n\n// Complete queue item\nrouter.patch(\n  \"/moderation-queue/:itemId/complete\",\n  requirePermission(ADMIN_PERMISSIONS.QUEUE_COMPLETE),\n  auditAdminAction(\"queue_item_completed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const validation = completeQueueItemSchema.safeParse(req.body);\n      if (!validation.success) {\n        res.status(400).json({\n          message: \"Invalid request data\",\n          errors: validation.error.errors,\n        });\n        return;\n      }\n\n      const itemId = assertRouteParam(req.params.itemId, \"itemId\");\n      const { resolution, actionTaken } = validation.data;\n\n      const item = await storage.completeModerationQueueItem(\n        itemId,\n        resolution,\n        actionTaken,\n      );\n\n      res.json(item);\n    } catch (error) {\n      logger.error(\"Error completing queue item\", error, {\n        userId: getAuthUserId(req),\n        operation: \"completing_queue_item\",\n      });\n      res.status(500).json({ message: \"Failed to complete queue item\" });\n      return;\n    }\n  },\n);\n\n// Get queue statistics\nrouter.get(\n  \"/moderation-queue/stats\",\n  requirePermission(ADMIN_PERMISSIONS.QUEUE_VIEW),\n  auditAdminAction(\"queue_stats_viewed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const stats = await storage.getModerationQueueStats();\n      res.json(stats);\n    } catch (error) {\n      logger.error(\"Error fetching queue stats\", error, {\n        userId: getAuthUserId(req),\n        operation: \"fetching_queue_stats\",\n      });\n      res.status(500).json({ message: \"Failed to fetch queue statistics\" });\n      return;\n    }\n  },\n);\n\n// Auto-assign queue items\nrouter.post(\n  \"/moderation-queue/auto-assign\",\n  requirePermission(ADMIN_PERMISSIONS.QUEUE_ASSIGN),\n  auditAdminAction(\"queue_auto_assigned\"),\n  async (req, res): Promise<void> => {\n    try {\n      const validation = autoAssignSchema.safeParse(req.body);\n      if (!validation.success) {\n        res.status(400).json({\n          message: \"Invalid request data\",\n          errors: validation.error.errors,\n        });\n        return;\n      }\n\n      const { itemType } = validation.data;\n      const result = await storage.autoAssignModerationQueue(itemType);\n\n      res.json(result);\n    } catch (error) {\n      logger.error(\"Error auto-assigning queue items\", error, {\n        userId: getAuthUserId(req),\n        operation: \"auto-assigning_queue_items\",\n      });\n      res.status(500).json({ message: \"Failed to auto-assign queue items\" });\n      return;\n    }\n  },\n);\n\n// Bulk assign queue items\nrouter.post(\n  \"/moderation-queue/bulk-assign\",\n  requirePermission(ADMIN_PERMISSIONS.QUEUE_ASSIGN),\n  auditAdminAction(\"queue_bulk_assigned\"),\n  async (req, res): Promise<void> => {\n    try {\n      const validation = bulkAssignSchema.safeParse(req.body);\n      if (!validation.success) {\n        res.status(400).json({\n          message: \"Invalid request data\",\n          errors: validation.error.errors,\n        });\n        return;\n      }\n\n      const { itemIds, moderatorId } = validation.data;\n      const assignedItems = await storage.bulkAssignModerationQueue(\n        itemIds,\n        moderatorId,\n      );\n\n      res.json({\n        assigned: assignedItems.length,\n        items: assignedItems,\n      });\n    } catch (error) {\n      logger.error(\"Error bulk assigning queue items\", error, {\n        userId: getAuthUserId(req),\n        operation: \"bulk_assigning_queue_items\",\n      });\n      res.status(500).json({ message: \"Failed to bulk assign queue items\" });\n      return;\n    }\n  },\n);\n\n// Get moderator workload analytics\nrouter.get(\n  \"/moderation-queue/workload\",\n  requirePermission(ADMIN_PERMISSIONS.QUEUE_VIEW),\n  auditAdminAction(\"moderator_workload_viewed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const { moderatorId } = req.query;\n\n      const workloads = await storage.getModeratorWorkload(\n        moderatorId as string,\n      );\n\n      res.json(workloads);\n    } catch (error) {\n      logger.error(\"Error fetching moderator workload\", error, {\n        userId: getAuthUserId(req),\n        operation: \"fetching_moderator_workload\",\n      });\n      res.status(500).json({ message: \"Failed to fetch moderator workload\" });\n      return;\n    }\n  },\n);\n\n// Escalate overdue items\nrouter.post(\n  \"/moderation-queue/escalate\",\n  requirePermission(ADMIN_PERMISSIONS.QUEUE_PRIORITIZE),\n  auditAdminAction(\"queue_items_escalated\"),\n  async (req, res): Promise<void> => {\n    try {\n      const validation = escalateSchema.safeParse(req.body);\n      if (!validation.success) {\n        res.status(400).json({\n          message: \"Invalid request data\",\n          errors: validation.error.errors,\n        });\n        return;\n      }\n\n      const { thresholdHours = 24 } = validation.data;\n      const escalatedItems = await storage.escalateOverdueItems(thresholdHours);\n\n      res.json({\n        escalated: escalatedItems.length,\n        items: escalatedItems,\n      });\n    } catch (error) {\n      logger.error(\"Error escalating overdue items\", error, {\n        userId: getAuthUserId(req),\n        operation: \"escalating_overdue_items\",\n      });\n      res.status(500).json({ message: \"Failed to escalate overdue items\" });\n      return;\n    }\n  },\n);\n\n// Update queue item priority\nrouter.patch(\n  \"/moderation-queue/:itemId/priority\",\n  requirePermission(ADMIN_PERMISSIONS.QUEUE_PRIORITIZE),\n  auditAdminAction(\"queue_priority_updated\"),\n  async (req, res): Promise<void> => {\n    try {\n      const validation = priorityUpdateSchema.safeParse(req.body);\n      if (!validation.success) {\n        res.status(400).json({\n          message: \"Invalid request data\",\n          errors: validation.error.errors,\n        });\n        return;\n      }\n\n      const itemId = assertRouteParam(req.params.itemId, \"itemId\");\n      const { priority } = validation.data;\n\n      const item = await storage.updateModerationQueuePriority(\n        itemId,\n        priority,\n      );\n\n      res.json(item);\n    } catch (error) {\n      logger.error(\"Error updating queue priority\", error, {\n        userId: getAuthUserId(req),\n        operation: \"updating_queue_priority\",\n      });\n      res.status(500).json({ message: \"Failed to update queue priority\" });\n      return;\n    }\n  },\n);\n\n// ===== USER APPEALS ROUTES =====\n\n// Get user appeals\nrouter.get(\n  \"/appeals\",\n  requirePermission(ADMIN_PERMISSIONS.APPEAL_VIEW),\n  auditAdminAction(\"appeals_viewed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const { userId, status, assignedReviewer } = req.query;\n\n      const appeals = await storage.getUserAppeals({\n        userId: userId as string,\n        status: status as string,\n        reviewedBy: assignedReviewer as string,\n      });\n\n      res.json(appeals);\n    } catch (error) {\n      logger.error(\"Error fetching appeals\", error, {\n        userId: getAuthUserId(req),\n        operation: \"fetching_appeals\",\n      });\n      res.status(500).json({ message: \"Failed to fetch appeals\" });\n      return;\n    }\n  },\n);\n\n// Assign appeal reviewer\nrouter.patch(\n  \"/appeals/:appealId/assign\",\n  requirePermission(ADMIN_PERMISSIONS.APPEAL_ASSIGN),\n  auditAdminAction(\"appeal_assigned\"),\n  async (req, res): Promise<void> => {\n    try {\n      const appealId = assertRouteParam(req.params.appealId, \"appealId\");\n      const reviewerId = getAuthUserId(req);\n\n      const appeal = await storage.assignAppealReviewer(appealId, reviewerId);\n\n      res.json(appeal);\n    } catch (error) {\n      logger.error(\"Error assigning appeal\", error, {\n        userId: getAuthUserId(req),\n        operation: \"assigning_appeal\",\n      });\n      res.status(500).json({ message: \"Failed to assign appeal\" });\n      return;\n    }\n  },\n);\n\n// Resolve appeal\nrouter.patch(\n  \"/appeals/:appealId/resolve\",\n  requirePermission(ADMIN_PERMISSIONS.APPEAL_DECIDE),\n  auditAdminAction(\"appeal_resolved\"),\n  async (req, res): Promise<void> => {\n    try {\n      const appealId = assertRouteParam(req.params.appealId, \"appealId\");\n      const { decision, reviewerNotes } = req.body;\n      const reviewerId = getAuthUserId(req);\n\n      const appeal = await storage.resolveUserAppeal(\n        appealId,\n        decision,\n        reviewerNotes,\n        reviewerId,\n      );\n\n      res.json(appeal);\n    } catch (error) {\n      logger.error(\"Error resolving appeal\", error, {\n        userId: getAuthUserId(req),\n        operation: \"resolving_appeal\",\n      });\n      res.status(500).json({ message: \"Failed to resolve appeal\" });\n      return;\n    }\n  },\n);\n\n// ===== AUDIT LOG ROUTES =====\n\n// Get audit logs\nrouter.get(\n  \"/audit-logs\",\n  requirePermission(ADMIN_PERMISSIONS.AUDIT_VIEW),\n  auditAdminAction(\"audit_logs_viewed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const { adminUserId, action, startDate, endDate } = req.query;\n\n      const logs = await storage.getAuditLogs({\n        adminUserId: adminUserId as string,\n        action: action as string,\n        startDate: startDate ? new Date(startDate as string) : undefined,\n        endDate: endDate ? new Date(endDate as string) : undefined,\n      });\n\n      res.json(logs);\n    } catch (error) {\n      logger.error(\"Error fetching audit logs\", error, {\n        userId: getAuthUserId(req),\n        operation: \"fetching_audit_logs\",\n      });\n      res.status(500).json({ message: \"Failed to fetch audit logs\" });\n      return;\n    }\n  },\n);\n\n// ===== CMS CONTENT ROUTES =====\n\n// Get CMS content\nrouter.get(\n  \"/cms-content\",\n  requirePermission(ADMIN_PERMISSIONS.CMS_VIEW),\n  auditAdminAction(\"cms_content_viewed\"),\n  async (req, res): Promise<void> => {\n    try {\n      const { type, isPublished } = req.query;\n\n      const content = await storage.getCmsContent(\n        type as string,\n        isPublished === \"true\"\n          ? true\n          : isPublished === \"false\"\n            ? false\n            : undefined,\n      );\n\n      res.json(content);\n    } catch (error) {\n      logger.error(\"Error fetching CMS content\", error, {\n        userId: getAuthUserId(req),\n        operation: \"fetching_cms_content\",\n      });\n      res.status(500).json({ message: \"Failed to fetch CMS content\" });\n      return;\n    }\n  },\n);\n\n// Create CMS content\nrouter.post(\n  \"/cms-content\",\n  requirePermission(ADMIN_PERMISSIONS.CMS_CREATE),\n  auditAdminAction(\"cms_content_created\"),\n  async (req, res): Promise<void> => {\n    try {\n      const authorId = getAuthUserId(req);\n      const contentData = {\n        ...req.body,\n        authorId,\n        lastEditedBy: authorId,\n      };\n\n      const content = await storage.createCmsContent(contentData);\n\n      res.status(201).json(content);\n      return;\n    } catch (error) {\n      logger.error(\"Error creating CMS content\", error, {\n        userId: getAuthUserId(req),\n        operation: \"creating_cms_content\",\n      });\n      res.status(500).json({ message: \"Failed to create CMS content\" });\n      return;\n    }\n  },\n);\n\n// Update CMS content\nrouter.patch(\n  \"/cms-content/:contentId\",\n  requirePermission(ADMIN_PERMISSIONS.CMS_EDIT),\n  auditAdminAction(\"cms_content_updated\"),\n  async (req, res): Promise<void> => {\n    try {\n      const contentId = assertRouteParam(req.params.contentId, \"contentId\");\n      const lastEditedBy = getAuthUserId(req);\n      const updateData = {\n        ...req.body,\n        lastEditedBy,\n      };\n\n      const content = await storage.updateCmsContent(contentId, updateData);\n\n      res.json(content);\n    } catch (error) {\n      logger.error(\"Error updating CMS content\", error, {\n        userId: getAuthUserId(req),\n        operation: \"updating_cms_content\",\n      });\n      res.status(500).json({ message: \"Failed to update CMS content\" });\n      return;\n    }\n  },\n);\n\n// Publish CMS content\nrouter.patch(\n  \"/cms-content/:contentId/publish\",\n  requirePermission(ADMIN_PERMISSIONS.CMS_PUBLISH),\n  auditAdminAction(\"cms_content_published\"),\n  async (req, res): Promise<void> => {\n    try {\n      const contentId = assertRouteParam(req.params.contentId, \"contentId\");\n      const publisherId = getAuthUserId(req);\n\n      const content = await storage.publishCmsContent(contentId, publisherId);\n\n      res.json(content);\n    } catch (error) {\n      logger.error(\"Error publishing CMS content\", error, {\n        userId: getAuthUserId(req),\n        operation: \"publishing_cms_content\",\n      });\n      res.status(500).json({ message: \"Failed to publish CMS content\" });\n      return;\n    }\n  },\n);\n\n// ===== ADMIN DASHBOARD STATS =====\n\n// Get admin dashboard statistics\nrouter.get(\n  \"/dashboard/stats\",\n  requirePermission(ADMIN_PERMISSIONS.ANALYTICS_VIEW),\n  auditAdminAction(\"admin_dashboard_viewed\"),\n  async (req, res): Promise<void> => {\n    try {\n      // TODO: Implement comprehensive dashboard statistics\n      const stats = {\n        users: {\n          total: 0,\n          active: 0,\n          banned: 0,\n          new_today: 0,\n        },\n        content: {\n          total_reports: 0,\n          pending_reports: 0,\n          resolved_today: 0,\n        },\n        moderation: {\n          queue_size: 0,\n          active_moderators: 0,\n          actions_today: 0,\n        },\n        appeals: {\n          pending: 0,\n          resolved_today: 0,\n        },\n      };\n\n      res.json(stats);\n    } catch (error) {\n      logger.error(\"Error fetching dashboard stats\", error, {\n        userId: getAuthUserId(req),\n        operation: \"fetching_dashboard_stats\",\n      });\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n      return;\n    }\n  },\n);\n\nexport default router;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/agents/automated-fixes.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'output' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":37,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":48,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'output' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":95,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":106,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":106,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'output' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":123,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":134,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'output' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":151,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":151,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":163,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Automated Fixes Module for Backend Copilot Agent\n *\n * Provides automated fixes for common code issues found during analysis.\n */\n\nimport fs from \"fs/promises\";\nimport path from \"path\";\nimport { execSync } from \"child_process\";\nimport { logger } from \"../logger\";\nimport type { CodeIssue } from \"./backend-copilot-agent\";\n\nexport interface FixResult {\n  success: boolean;\n  message: string;\n  changedFiles: string[];\n}\n\n/**\n * Automated Fix Engine\n */\nexport class AutomatedFixEngine {\n  private projectRoot: string;\n\n  constructor(projectRoot = process.cwd()) {\n    this.projectRoot = projectRoot;\n  }\n\n  /**\n   * Run automated linting with fixes\n   */\n  async runLintingFixes(): Promise<FixResult> {\n    try {\n      logger.info(\"🔧 Running ESLint with auto-fix...\");\n\n      const command = \"npm run lint\";\n      const output = execSync(command, {\n        cwd: this.projectRoot,\n        encoding: \"utf-8\",\n        stdio: \"pipe\",\n      });\n\n      return {\n        success: true,\n        message: \"ESLint auto-fixes completed successfully\",\n        changedFiles: [],\n      };\n    } catch (error) {\n      // ESLint returns non-zero exit code even when fixes are applied\n      return {\n        success: true,\n        message: \"ESLint auto-fixes completed with warnings\",\n        changedFiles: [],\n      };\n    }\n  }\n\n  /**\n   * Run Prettier formatting\n   */\n  async runPrettierFormatting(): Promise<FixResult> {\n    try {\n      logger.info(\"🎨 Running Prettier formatting...\");\n\n      const command = \"npm run format\";\n      execSync(command, {\n        cwd: this.projectRoot,\n        encoding: \"utf-8\",\n        stdio: \"pipe\",\n      });\n\n      return {\n        success: true,\n        message: \"Prettier formatting completed successfully\",\n        changedFiles: [],\n      };\n    } catch (error) {\n      logger.warn(\"Prettier formatting failed:\", error);\n      return {\n        success: false,\n        message: \"Prettier formatting failed\",\n        changedFiles: [],\n      };\n    }\n  }\n\n  /**\n   * Fix TypeScript compilation issues\n   */\n  async runTypeScriptCheck(): Promise<FixResult> {\n    try {\n      logger.info(\"📝 Running TypeScript type checking...\");\n\n      const command = \"npm run check\";\n      const output = execSync(command, {\n        cwd: this.projectRoot,\n        encoding: \"utf-8\",\n        stdio: \"pipe\",\n      });\n\n      return {\n        success: true,\n        message: \"TypeScript check passed successfully\",\n        changedFiles: [],\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: \"TypeScript check found errors that need manual fixing\",\n        changedFiles: [],\n      };\n    }\n  }\n\n  /**\n   * Run database schema validation\n   */\n  async runDatabaseHealthCheck(): Promise<FixResult> {\n    try {\n      logger.info(\"🗄️ Running database health check...\");\n\n      const command = \"npm run db:health\";\n      const output = execSync(command, {\n        cwd: this.projectRoot,\n        encoding: \"utf-8\",\n        stdio: \"pipe\",\n      });\n\n      return {\n        success: true,\n        message: \"Database health check passed\",\n        changedFiles: [],\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: \"Database health check failed - check connection and schema\",\n        changedFiles: [],\n      };\n    }\n  }\n\n  /**\n   * Run all tests to ensure fixes don't break functionality\n   */\n  async runTestSuite(): Promise<FixResult> {\n    try {\n      logger.info(\"🧪 Running test suite...\");\n\n      const command = \"npm run test\";\n      const output = execSync(command, {\n        cwd: this.projectRoot,\n        encoding: \"utf-8\",\n        stdio: \"pipe\",\n        timeout: 60000, // 1 minute timeout\n      });\n\n      return {\n        success: true,\n        message: \"All tests passed successfully\",\n        changedFiles: [],\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: \"Some tests failed - manual review required\",\n        changedFiles: [],\n      };\n    }\n  }\n\n  /**\n   * Apply specific code fixes for common issues\n   */\n  async applyCodeFixes(issues: CodeIssue[]): Promise<FixResult> {\n    const fixedFiles = new Set<string>();\n    let fixCount = 0;\n\n    try {\n      for (const issue of issues) {\n        if (issue.autoFixable) {\n          const filePath = path.join(this.projectRoot, issue.file);\n\n          switch (issue.rule) {\n            case \"enforce-https\":\n              await this.fixHttpsUrls(filePath, issue);\n              fixedFiles.add(issue.file);\n              fixCount++;\n              break;\n\n            case \"no-console-log\":\n              await this.replaceConsoleLog(filePath, issue);\n              fixedFiles.add(issue.file);\n              fixCount++;\n              break;\n          }\n        }\n      }\n\n      return {\n        success: true,\n        message: `Applied ${fixCount} automated fixes to ${fixedFiles.size} files`,\n        changedFiles: Array.from(fixedFiles),\n      };\n    } catch (error) {\n      logger.error(\"Code fixes failed:\", error);\n      return {\n        success: false,\n        message: \"Code fixes failed\",\n        changedFiles: Array.from(fixedFiles),\n      };\n    }\n  }\n\n  /**\n   * Fix HTTP URLs to HTTPS\n   */\n  private async fixHttpsUrls(\n    filePath: string,\n    issue: CodeIssue,\n  ): Promise<void> {\n    const content = await fs.readFile(filePath, \"utf-8\");\n    const lines = content.split(\"\\n\");\n\n    if (lines[issue.line - 1]) {\n      // Only replace non-localhost HTTP URLs\n      const originalLine = lines[issue.line - 1];\n      if (originalLine) {\n        lines[issue.line - 1] = originalLine.replace(\n          /http:\\/\\/(?!localhost)/g,\n          \"https://\",\n        );\n      }\n      await fs.writeFile(filePath, lines.join(\"\\n\"));\n      logger.info(`Fixed HTTPS URL in ${issue.file}:${issue.line}`);\n    }\n  }\n\n  /**\n   * Replace console.log with logger\n   */\n  private async replaceConsoleLog(\n    filePath: string,\n    issue: CodeIssue,\n  ): Promise<void> {\n    const content = await fs.readFile(filePath, \"utf-8\");\n\n    // Check if logger is already imported\n    if (\n      !content.includes(\"from '../logger'\") &&\n      !content.includes(\"from './logger'\")\n    ) {\n      // Add logger import at the top\n      const lines = content.split(\"\\n\");\n      const importIndex = lines.findIndex((line) => line.includes(\"import\"));\n\n      if (importIndex >= 0) {\n        lines.splice(importIndex + 1, 0, \"import { logger } from '../logger';\");\n      }\n\n      // Replace console.log with logger.info\n      const updatedContent = lines\n        .join(\"\\n\")\n        .replace(/console\\.log/g, \"logger.info\");\n      await fs.writeFile(filePath, updatedContent);\n\n      logger.info(`Replaced console.log with logger in ${issue.file}`);\n    }\n  }\n\n  /**\n   * Run comprehensive automated fixes workflow\n   */\n  async runComprehensiveFixWorkflow(issues: CodeIssue[]): Promise<FixResult[]> {\n    const results: FixResult[] = [];\n\n    logger.info(\"🤖 Starting comprehensive automated fix workflow...\");\n\n    // 1. Apply code fixes\n    results.push(await this.applyCodeFixes(issues));\n\n    // 2. Run Prettier formatting\n    results.push(await this.runPrettierFormatting());\n\n    // 3. Run ESLint fixes\n    results.push(await this.runLintingFixes());\n\n    // 4. Run TypeScript check\n    results.push(await this.runTypeScriptCheck());\n\n    // 5. Run database health check\n    results.push(await this.runDatabaseHealthCheck());\n\n    // 6. Run tests to ensure nothing is broken\n    results.push(await this.runTestSuite());\n\n    const successCount = results.filter((r) => r.success).length;\n    logger.info(\n      `✅ Automated fix workflow completed: ${successCount}/${results.length} operations successful`,\n    );\n\n    return results;\n  }\n}\n\n/**\n * Convenience function to run automated fixes\n */\nexport async function runAutomatedFixes(\n  issues: CodeIssue[],\n  projectRoot = process.cwd(),\n): Promise<FixResult[]> {\n  const engine = new AutomatedFixEngine(projectRoot);\n  return await engine.runComprehensiveFixWorkflow(issues);\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/agents/backend-copilot-agent.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":320,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":320,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Backend Copilot Agent for Shuffle & Sync\n *\n * A comprehensive agent that reviews, debugs, and provides recommendations\n * for the TypeScript/Express.js backend codebase following GitHub Copilot best practices.\n */\n\nimport fs from \"fs/promises\";\nimport path from \"path\";\nimport { logger } from \"../logger\";\nimport { analyzeDrizzleUsage } from \"./drizzle-analyzer\";\n\n// Types for analysis results\nexport interface CodeIssue {\n  file: string;\n  line: number;\n  column?: number;\n  severity: \"error\" | \"warning\" | \"info\";\n  category:\n    | \"typescript\"\n    | \"express\"\n    | \"drizzle\"\n    | \"security\"\n    | \"performance\"\n    | \"style\";\n  message: string;\n  rule?: string;\n  suggestion?: string;\n  autoFixable?: boolean;\n}\n\nexport interface AnalysisResult {\n  totalFiles: number;\n  totalIssues: number;\n  issuesByCategory: Record<string, number>;\n  issues: CodeIssue[];\n  summary: string;\n  recommendations: string[];\n}\n\nexport interface CopilotAgentConfig {\n  projectRoot: string;\n  includePatterns: string[];\n  excludePatterns: string[];\n  enableAutoFix: boolean;\n  enableSecurityScanning: boolean;\n  enablePerformanceAnalysis: boolean;\n}\n\n/**\n * Main Backend Copilot Agent class\n */\nexport class BackendCopilotAgent {\n  private config: CopilotAgentConfig;\n  private readonly serverPath: string;\n\n  constructor(config: Partial<CopilotAgentConfig> = {}) {\n    this.config = {\n      projectRoot: process.cwd(),\n      includePatterns: [\"server/**/*.ts\", \"shared/**/*.ts\"],\n      excludePatterns: [\"**/*.test.ts\", \"**/node_modules/**\", \"**/dist/**\"],\n      enableAutoFix: true,\n      enableSecurityScanning: true,\n      enablePerformanceAnalysis: true,\n      ...config,\n    };\n\n    this.serverPath = path.join(this.config.projectRoot, \"server\");\n  }\n\n  /**\n   * Run comprehensive backend code analysis\n   */\n  async analyzeBackend(): Promise<AnalysisResult> {\n    logger.info(\"🤖 Starting Backend Copilot Agent analysis...\");\n\n    const issues: CodeIssue[] = [];\n    let totalFiles = 0;\n\n    try {\n      // 1. TypeScript Analysis\n      logger.info(\"📝 Running TypeScript analysis...\");\n      const tsIssues = await this.analyzeTypeScript();\n      issues.push(...tsIssues);\n\n      // 2. Express.js Pattern Analysis\n      logger.info(\"🚀 Analyzing Express.js patterns...\");\n      const expressIssues = await this.analyzeExpressPatterns();\n      issues.push(...expressIssues);\n\n      // 3. Drizzle ORM Analysis\n      logger.info(\"🗄️ Analyzing Drizzle ORM usage...\");\n      const drizzleAnalysis = await analyzeDrizzleUsage(\n        this.config.projectRoot,\n      );\n      issues.push(...drizzleAnalysis.issues);\n\n      // Add Drizzle-specific recommendations\n      if (drizzleAnalysis.optimizationSuggestions.length > 0) {\n        logger.info(\n          `📊 Found ${drizzleAnalysis.totalQueries} database queries with ${drizzleAnalysis.optimizationSuggestions.length} optimization opportunities`,\n        );\n      }\n\n      // 4. Security Analysis\n      if (this.config.enableSecurityScanning) {\n        logger.info(\"🔒 Running security analysis...\");\n        const securityIssues = await this.analyzeSecurityPatterns();\n        issues.push(...securityIssues);\n      }\n\n      // Count files analyzed\n      totalFiles = await this.countAnalyzedFiles();\n\n      // Generate summary and recommendations\n      const issuesByCategory = this.categorizeIssues(issues);\n      const summary = this.generateSummary(\n        totalFiles,\n        issues,\n        issuesByCategory,\n      );\n      const recommendations = this.generateRecommendations(issues);\n\n      const result: AnalysisResult = {\n        totalFiles,\n        totalIssues: issues.length,\n        issuesByCategory,\n        issues,\n        summary,\n        recommendations,\n      };\n\n      logger.info(\n        `✅ Analysis complete: ${issues.length} issues found in ${totalFiles} files`,\n      );\n      return result;\n    } catch (error) {\n      logger.error(\"❌ Backend analysis failed:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Analyze TypeScript compliance and patterns\n   */\n  private async analyzeTypeScript(): Promise<CodeIssue[]> {\n    const issues: CodeIssue[] = [];\n\n    try {\n      const serverFiles = await this.getServerFiles();\n\n      for (const file of serverFiles) {\n        const content = await fs.readFile(file, \"utf-8\");\n        const lines = content.split(\"\\n\");\n\n        lines.forEach((line, index) => {\n          // 1. Any type usage\n          if (line.includes(\": any\") || line.includes(\"<any>\")) {\n            issues.push({\n              file: path.relative(this.config.projectRoot, file),\n              line: index + 1,\n              severity: \"warning\",\n              category: \"typescript\",\n              message: 'Usage of \"any\" type reduces type safety',\n              rule: \"no-any\",\n              suggestion: 'Use specific types instead of \"any\"',\n              autoFixable: false,\n            });\n          }\n\n          // 2. Non-null assertion usage\n          if (line.includes(\"!.\") || line.includes(\"! \")) {\n            issues.push({\n              file: path.relative(this.config.projectRoot, file),\n              line: index + 1,\n              severity: \"info\",\n              category: \"typescript\",\n              message: \"Non-null assertion operator usage\",\n              rule: \"no-non-null-assertion\",\n              suggestion:\n                \"Consider using optional chaining or proper null checks\",\n              autoFixable: false,\n            });\n          }\n        });\n      }\n    } catch (error) {\n      logger.warn(\"TypeScript analysis had issues:\", error);\n    }\n\n    return issues;\n  }\n\n  /**\n   * Analyze Express.js patterns and middleware usage\n   */\n  private async analyzeExpressPatterns(): Promise<CodeIssue[]> {\n    const issues: CodeIssue[] = [];\n\n    const serverFiles = await this.getServerFiles();\n\n    for (const file of serverFiles) {\n      if (!file.includes(\".routes.\") && !file.includes(\"middleware\")) continue;\n\n      const content = await fs.readFile(file, \"utf-8\");\n      const lines = content.split(\"\\n\");\n\n      lines.forEach((line, index) => {\n        // 1. Missing error handling in async routes\n        if (line.includes(\"async (req, res\") && !content.includes(\"try {\")) {\n          issues.push({\n            file: path.relative(this.config.projectRoot, file),\n            line: index + 1,\n            severity: \"error\",\n            category: \"express\",\n            message: \"Async route handler missing error handling\",\n            rule: \"async-error-handling\",\n            suggestion:\n              \"Wrap async route handlers with try-catch or use asyncHandler middleware\",\n            autoFixable: false,\n          });\n        }\n\n        // 2. Missing input validation\n        if (\n          line.includes(\"req.body\") &&\n          !content.includes(\"zod\") &&\n          !content.includes(\"validate\")\n        ) {\n          issues.push({\n            file: path.relative(this.config.projectRoot, file),\n            line: index + 1,\n            severity: \"warning\",\n            category: \"express\",\n            message: \"Request body used without validation\",\n            rule: \"input-validation\",\n            suggestion: \"Add Zod schema validation for request body\",\n            autoFixable: false,\n          });\n        }\n      });\n    }\n\n    return issues;\n  }\n\n  /**\n   * Analyze security patterns and vulnerabilities\n   */\n  private async analyzeSecurityPatterns(): Promise<CodeIssue[]> {\n    const issues: CodeIssue[] = [];\n\n    const serverFiles = await this.getServerFiles();\n\n    for (const file of serverFiles) {\n      const content = await fs.readFile(file, \"utf-8\");\n      const lines = content.split(\"\\n\");\n\n      lines.forEach((line, index) => {\n        // 1. Missing HTTPS enforcement\n        if (line.includes(\"http://\") && !line.includes(\"localhost\")) {\n          issues.push({\n            file: path.relative(this.config.projectRoot, file),\n            line: index + 1,\n            severity: \"warning\",\n            category: \"security\",\n            message: \"HTTP URL detected (should use HTTPS)\",\n            rule: \"enforce-https\",\n            suggestion: \"Use HTTPS URLs for production endpoints\",\n            autoFixable: true,\n          });\n        }\n\n        // 2. Console.log in production code\n        if (line.includes(\"console.log\") && !file.includes(\"logger\")) {\n          issues.push({\n            file: path.relative(this.config.projectRoot, file),\n            line: index + 1,\n            severity: \"warning\",\n            category: \"security\",\n            message: \"Console.log usage detected\",\n            rule: \"no-console-log\",\n            suggestion: \"Use structured logging instead of console.log\",\n            autoFixable: false,\n          });\n        }\n      });\n    }\n\n    return issues;\n  }\n\n  /**\n   * Get all TypeScript files in the server directory\n   */\n  private async getServerFiles(): Promise<string[]> {\n    const files: string[] = [];\n\n    async function scanDirectory(dir: string) {\n      try {\n        const entries = await fs.readdir(dir, { withFileTypes: true });\n\n        for (const entry of entries) {\n          const fullPath = path.join(dir, entry.name);\n\n          if (\n            entry.isDirectory() &&\n            !entry.name.includes(\"node_modules\") &&\n            !entry.name.includes(\"dist\")\n          ) {\n            await scanDirectory(fullPath);\n          } else if (\n            entry.isFile() &&\n            entry.name.endsWith(\".ts\") &&\n            !entry.name.endsWith(\".test.ts\")\n          ) {\n            files.push(fullPath);\n          }\n        }\n      } catch (error) {\n        // Skip directories that can't be read\n      }\n    }\n\n    await scanDirectory(this.serverPath);\n    return files;\n  }\n\n  /**\n   * Count total files analyzed\n   */\n  private async countAnalyzedFiles(): Promise<number> {\n    const files = await this.getServerFiles();\n    return files.length;\n  }\n\n  /**\n   * Categorize issues by type\n   */\n  private categorizeIssues(issues: CodeIssue[]): Record<string, number> {\n    const categories: Record<string, number> = {};\n\n    issues.forEach((issue) => {\n      categories[issue.category] = (categories[issue.category] || 0) + 1;\n    });\n\n    return categories;\n  }\n\n  /**\n   * Generate analysis summary\n   */\n  private generateSummary(\n    totalFiles: number,\n    issues: CodeIssue[],\n    categories: Record<string, number>,\n  ): string {\n    const errorCount = issues.filter((i) => i.severity === \"error\").length;\n    const warningCount = issues.filter((i) => i.severity === \"warning\").length;\n    const infoCount = issues.filter((i) => i.severity === \"info\").length;\n\n    let summary = `Backend Copilot Agent Analysis Summary:\\n`;\n    summary += `- Files analyzed: ${totalFiles}\\n`;\n    summary += `- Total issues: ${issues.length}\\n`;\n    summary += `  - Errors: ${errorCount}\\n`;\n    summary += `  - Warnings: ${warningCount}\\n`;\n    summary += `  - Info: ${infoCount}\\n\\n`;\n\n    summary += `Issues by category:\\n`;\n    Object.entries(categories).forEach(([category, count]) => {\n      summary += `  - ${category}: ${count}\\n`;\n    });\n\n    return summary;\n  }\n\n  /**\n   * Generate actionable recommendations\n   */\n  private generateRecommendations(issues: CodeIssue[]): string[] {\n    const recommendations: string[] = [];\n    const categories = this.categorizeIssues(issues);\n\n    if ((categories.typescript ?? 0) > 0) {\n      recommendations.push(\n        \"🔧 Fix TypeScript errors to improve type safety and prevent runtime issues\",\n      );\n    }\n\n    if ((categories.express ?? 0) > 0) {\n      recommendations.push(\n        \"🚀 Improve Express.js patterns: add error handling, input validation, and proper separation of concerns\",\n      );\n    }\n\n    if ((categories.drizzle ?? 0) > 0) {\n      recommendations.push(\n        \"🗄️ Optimize Drizzle ORM usage: use transactions, proper indexing, and efficient query patterns\",\n      );\n    }\n\n    if ((categories.performance ?? 0) > 0) {\n      recommendations.push(\n        \"⚡ Improve performance: add database indexing, implement pagination, optimize queries\",\n      );\n    }\n\n    if ((categories.security ?? 0) > 0) {\n      recommendations.push(\n        \"🔒 Address security vulnerabilities: remove hardcoded credentials, prevent SQL injection\",\n      );\n    }\n\n    if (recommendations.length === 0) {\n      recommendations.push(\n        \"✅ Backend code follows best practices - great work!\",\n      );\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Generate detailed report\n   */\n  generateReport(result: AnalysisResult): string {\n    let report = `# Backend Copilot Agent Report\\n\\n`;\n    report += `${result.summary}\\n\\n`;\n\n    report += `## Recommendations\\n\\n`;\n    result.recommendations.forEach((rec) => {\n      report += `- ${rec}\\n`;\n    });\n\n    report += `\\n## Detailed Issues\\n\\n`;\n\n    const issuesByFile = result.issues.reduce(\n      (acc, issue) => {\n        if (!acc[issue.file]) acc[issue.file] = [];\n        const fileIssues = acc[issue.file];\n        if (fileIssues) {\n          fileIssues.push(issue);\n        }\n        return acc;\n      },\n      {} as Record<string, CodeIssue[]>,\n    );\n\n    Object.entries(issuesByFile).forEach(([file, fileIssues]) => {\n      report += `### ${file}\\n\\n`;\n      fileIssues.forEach((issue) => {\n        const severity =\n          issue.severity === \"error\"\n            ? \"🚨\"\n            : issue.severity === \"warning\"\n              ? \"⚠️\"\n              : \"ℹ️\";\n        report += `${severity} **Line ${issue.line}**: ${issue.message}\\n`;\n        if (issue.suggestion) {\n          report += `   💡 *${issue.suggestion}*\\n`;\n        }\n        report += `\\n`;\n      });\n    });\n\n    return report;\n  }\n}\n\n/**\n * Convenience function to run backend analysis\n */\nexport async function runBackendAnalysis(\n  config?: Partial<CopilotAgentConfig>,\n): Promise<AnalysisResult> {\n  const agent = new BackendCopilotAgent(config);\n  return await agent.analyzeBackend();\n}\n\n/**\n * Convenience function to generate and save report\n */\nexport async function generateBackendReport(\n  outputPath: string,\n  config?: Partial<CopilotAgentConfig>,\n): Promise<void> {\n  const agent = new BackendCopilotAgent(config);\n  const result = await agent.analyzeBackend();\n\n  const report = agent.generateReport(result);\n  await fs.writeFile(outputPath, report);\n\n  logger.info(`📊 Backend analysis report saved to: ${outputPath}`);\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/agents/drizzle-analyzer.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'metrics' is defined but never used. Allowed unused args must match /^_/u.","line":279,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":279,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":434,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":434,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Drizzle ORM Specialized Analyzer\n *\n * Advanced analysis module specifically for Drizzle ORM usage patterns,\n * performance optimization, and best practices in the Shuffle & Sync backend.\n */\n\nimport fs from \"fs/promises\";\nimport path from \"path\";\nimport { logger } from \"../logger\";\nimport type { CodeIssue } from \"./backend-copilot-agent\";\n\nexport interface DrizzleAnalysisResult {\n  totalQueries: number;\n  issues: CodeIssue[];\n  optimizationSuggestions: string[];\n  performanceMetrics: {\n    queriesWithoutIndexes: number;\n    queriesWithoutTransactions: number;\n    potentialN1Problems: number;\n    missingPagination: number;\n  };\n}\n\n/**\n * Drizzle ORM Analyzer\n */\nexport class DrizzleAnalyzer {\n  private projectRoot: string;\n  private serverPath: string;\n\n  constructor(projectRoot = process.cwd()) {\n    this.projectRoot = projectRoot;\n    this.serverPath = path.join(projectRoot, \"server\");\n  }\n\n  /**\n   * Run comprehensive Drizzle ORM analysis\n   */\n  async analyzeDrizzleUsage(): Promise<DrizzleAnalysisResult> {\n    logger.info(\"🗄️ Starting Drizzle ORM analysis...\");\n\n    const issues: CodeIssue[] = [];\n    const optimizationSuggestions: string[] = [];\n    let totalQueries = 0;\n\n    const performanceMetrics = {\n      queriesWithoutIndexes: 0,\n      queriesWithoutTransactions: 0,\n      potentialN1Problems: 0,\n      missingPagination: 0,\n    };\n\n    try {\n      const files = await this.getServerFiles();\n\n      for (const file of files) {\n        const content = await fs.readFile(file, \"utf-8\");\n        const lines = content.split(\"\\n\");\n\n        // Count queries\n        const queryCount = this.countQueries(content);\n        totalQueries += queryCount;\n\n        // Analyze each line for issues\n        lines.forEach((line, index) => {\n          this.analyzeQueryPerformance(\n            file,\n            line,\n            index + 1,\n            content,\n            issues,\n            performanceMetrics,\n          );\n          this.analyzeTransactionUsage(\n            file,\n            line,\n            index + 1,\n            content,\n            issues,\n            performanceMetrics,\n          );\n          this.analyzeRelationshipPatterns(\n            file,\n            line,\n            index + 1,\n            content,\n            issues,\n            performanceMetrics,\n          );\n          this.analyzeTypeUsage(file, line, index + 1, content, issues);\n        });\n      }\n\n      // Generate optimization suggestions\n      optimizationSuggestions.push(\n        ...this.generateOptimizationSuggestions(performanceMetrics),\n      );\n\n      logger.info(\n        `✅ Drizzle analysis complete: ${totalQueries} queries analyzed, ${issues.length} issues found`,\n      );\n\n      return {\n        totalQueries,\n        issues,\n        optimizationSuggestions,\n        performanceMetrics,\n      };\n    } catch (error) {\n      logger.error(\"❌ Drizzle analysis failed:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Count database queries in content\n   */\n  private countQueries(content: string): number {\n    const queryPatterns = [\n      /db\\.select/g,\n      /db\\.insert/g,\n      /db\\.update/g,\n      /db\\.delete/g,\n    ];\n\n    return queryPatterns.reduce((count, pattern) => {\n      const matches = content.match(pattern);\n      return count + (matches?.length || 0);\n    }, 0);\n  }\n\n  /**\n   * Analyze query performance patterns\n   */\n  private analyzeQueryPerformance(\n    file: string,\n    line: string,\n    lineNumber: number,\n    content: string,\n    issues: CodeIssue[],\n    metrics: DrizzleAnalysisResult[\"performanceMetrics\"],\n  ): void {\n    const relativePath = path.relative(this.projectRoot, file);\n\n    // 1. Select queries without WHERE clauses (potential full table scans)\n    if (\n      line.includes(\"db.select\") &&\n      !line.includes(\"where\") &&\n      !content.includes(\".where(\")\n    ) {\n      issues.push({\n        file: relativePath,\n        line: lineNumber,\n        severity: \"warning\",\n        category: \"drizzle\",\n        message: \"SELECT query without WHERE clause may cause full table scan\",\n        rule: \"add-where-clause\",\n        suggestion:\n          \"Add WHERE clause to limit query results and improve performance\",\n        autoFixable: false,\n      });\n    }\n\n    // 2. Queries that could benefit from indexing\n    if (line.includes(\".where(\") && !content.includes(\"index\")) {\n      metrics.queriesWithoutIndexes++;\n      issues.push({\n        file: relativePath,\n        line: lineNumber,\n        severity: \"info\",\n        category: \"performance\",\n        message: \"Query may benefit from database indexing\",\n        rule: \"consider-indexing\",\n        suggestion:\n          \"Consider adding database indexes for frequently queried columns\",\n        autoFixable: false,\n      });\n    }\n\n    // 3. Missing pagination on list queries\n    if (\n      (line.includes(\"db.select\") || line.includes(\".findMany\")) &&\n      !content.includes(\"limit\") &&\n      !content.includes(\"take\") &&\n      file.includes(\".routes.\")\n    ) {\n      metrics.missingPagination++;\n      issues.push({\n        file: relativePath,\n        line: lineNumber,\n        severity: \"warning\",\n        category: \"performance\",\n        message: \"List query without pagination\",\n        rule: \"add-pagination\",\n        suggestion:\n          \"Add limit/offset or cursor-based pagination to prevent large result sets\",\n        autoFixable: false,\n      });\n    }\n\n    // 4. N+1 Query problem detection\n    if (line.includes(\"for (\") || line.includes(\"forEach(\")) {\n      const nextFewLines = content\n        .split(\"\\n\")\n        .slice(lineNumber, lineNumber + 5)\n        .join(\"\\n\");\n      if (\n        nextFewLines.includes(\"db.select\") ||\n        nextFewLines.includes(\"db.query\")\n      ) {\n        metrics.potentialN1Problems++;\n        issues.push({\n          file: relativePath,\n          line: lineNumber,\n          severity: \"error\",\n          category: \"performance\",\n          message: \"Potential N+1 query problem detected\",\n          rule: \"fix-n-plus-one\",\n          suggestion:\n            \"Use joins or batch queries instead of queries inside loops\",\n          autoFixable: false,\n        });\n      }\n    }\n  }\n\n  /**\n   * Analyze transaction usage patterns\n   */\n  private analyzeTransactionUsage(\n    file: string,\n    line: string,\n    lineNumber: number,\n    content: string,\n    issues: CodeIssue[],\n    metrics: DrizzleAnalysisResult[\"performanceMetrics\"],\n  ): void {\n    const relativePath = path.relative(this.projectRoot, file);\n\n    // Multiple operations without transaction\n    const hasMultipleOperations =\n      (content.match(/db\\.insert/g)?.length || 0) +\n        (content.match(/db\\.update/g)?.length || 0) +\n        (content.match(/db\\.delete/g)?.length || 0) >\n      1;\n\n    if (\n      hasMultipleOperations &&\n      !content.includes(\"db.transaction\") &&\n      (line.includes(\"db.insert\") ||\n        line.includes(\"db.update\") ||\n        line.includes(\"db.delete\"))\n    ) {\n      metrics.queriesWithoutTransactions++;\n      issues.push({\n        file: relativePath,\n        line: lineNumber,\n        severity: \"warning\",\n        category: \"drizzle\",\n        message: \"Multiple database operations should use transactions\",\n        rule: \"use-transactions\",\n        suggestion:\n          \"Wrap multiple related database operations in a transaction for data consistency\",\n        autoFixable: false,\n      });\n    }\n  }\n\n  /**\n   * Analyze relationship and join patterns\n   */\n  private analyzeRelationshipPatterns(\n    file: string,\n    line: string,\n    lineNumber: number,\n    content: string,\n    issues: CodeIssue[],\n    metrics: DrizzleAnalysisResult[\"performanceMetrics\"],\n  ): void {\n    const relativePath = path.relative(this.projectRoot, file);\n\n    // Missing eager loading for relationships\n    if (\n      line.includes(\"db.select\") &&\n      content.includes(\"relations\") &&\n      !content.includes(\"with:\")\n    ) {\n      issues.push({\n        file: relativePath,\n        line: lineNumber,\n        severity: \"info\",\n        category: \"drizzle\",\n        message: \"Consider using eager loading for related data\",\n        rule: \"use-eager-loading\",\n        suggestion:\n          'Use \"with\" clause to eagerly load related data and avoid N+1 queries',\n        autoFixable: false,\n      });\n    }\n\n    // Inefficient joins\n    if (\n      line.includes(\".leftJoin\") ||\n      line.includes(\".rightJoin\") ||\n      line.includes(\".innerJoin\")\n    ) {\n      if (!content.includes(\"on(\")) {\n        issues.push({\n          file: relativePath,\n          line: lineNumber,\n          severity: \"error\",\n          category: \"drizzle\",\n          message: \"Join query missing ON clause\",\n          rule: \"add-join-condition\",\n          suggestion: \"Add proper ON condition to join queries\",\n          autoFixable: false,\n        });\n      }\n    }\n  }\n\n  /**\n   * Analyze type usage in Drizzle queries\n   */\n  private analyzeTypeUsage(\n    file: string,\n    line: string,\n    lineNumber: number,\n    content: string,\n    issues: CodeIssue[],\n  ): void {\n    const relativePath = path.relative(this.projectRoot, file);\n\n    // Missing type annotations on query results\n    if (\n      line.includes(\"db.select\") &&\n      !line.includes(\": \") &&\n      line.includes(\"=\")\n    ) {\n      issues.push({\n        file: relativePath,\n        line: lineNumber,\n        severity: \"info\",\n        category: \"typescript\",\n        message: \"Query result missing type annotation\",\n        rule: \"add-query-types\",\n        suggestion:\n          \"Add explicit type annotation for query results to improve type safety\",\n        autoFixable: false,\n      });\n    }\n\n    // Use of any type in query operations\n    if (\n      (line.includes(\"db.\") || line.includes(\"query.\")) &&\n      line.includes(\": any\")\n    ) {\n      issues.push({\n        file: relativePath,\n        line: lineNumber,\n        severity: \"warning\",\n        category: \"typescript\",\n        message: 'Avoid using \"any\" type in database queries',\n        rule: \"no-any-in-queries\",\n        suggestion: 'Use proper Drizzle-generated types instead of \"any\"',\n        autoFixable: false,\n      });\n    }\n  }\n\n  /**\n   * Generate optimization suggestions based on metrics\n   */\n  private generateOptimizationSuggestions(\n    metrics: DrizzleAnalysisResult[\"performanceMetrics\"],\n  ): string[] {\n    const suggestions: string[] = [];\n\n    if (metrics.queriesWithoutIndexes > 5) {\n      suggestions.push(\n        \"🔍 Consider adding database indexes for frequently queried columns to improve performance\",\n      );\n    }\n\n    if (metrics.queriesWithoutTransactions > 0) {\n      suggestions.push(\n        \"🔄 Implement transactions for multi-operation database workflows to ensure data consistency\",\n      );\n    }\n\n    if (metrics.potentialN1Problems > 0) {\n      suggestions.push(\n        \"⚡ Optimize queries to prevent N+1 problems by using joins or batch operations\",\n      );\n    }\n\n    if (metrics.missingPagination > 3) {\n      suggestions.push(\n        \"📄 Implement pagination for list endpoints to prevent performance issues with large datasets\",\n      );\n    }\n\n    return suggestions;\n  }\n\n  /**\n   * Get all TypeScript files in the server directory\n   */\n  private async getServerFiles(): Promise<string[]> {\n    const files: string[] = [];\n\n    async function scanDirectory(dir: string) {\n      try {\n        const entries = await fs.readdir(dir, { withFileTypes: true });\n\n        for (const entry of entries) {\n          const fullPath = path.join(dir, entry.name);\n\n          if (\n            entry.isDirectory() &&\n            !entry.name.includes(\"node_modules\") &&\n            !entry.name.includes(\"dist\")\n          ) {\n            await scanDirectory(fullPath);\n          } else if (\n            entry.isFile() &&\n            entry.name.endsWith(\".ts\") &&\n            !entry.name.endsWith(\".test.ts\")\n          ) {\n            files.push(fullPath);\n          }\n        }\n      } catch (error) {\n        // Skip directories that can't be read\n      }\n    }\n\n    await scanDirectory(this.serverPath);\n    return files;\n  }\n}\n\n/**\n * Convenience function to run Drizzle analysis\n */\nexport async function analyzeDrizzleUsage(\n  projectRoot = process.cwd(),\n): Promise<DrizzleAnalysisResult> {\n  const analyzer = new DrizzleAnalyzer(projectRoot);\n  return await analyzer.analyzeDrizzleUsage();\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/auth/auth.config.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":132,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":132,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'profile' is defined but never used. Allowed unused args must match /^_/u.","line":387,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":387,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":478,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":478,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isNewUser' is defined but never used. Allowed unused args must match /^_/u.","line":487,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":487,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Auth.js v5 configuration for Express.js integration\nimport Google from \"@auth/core/providers/google\";\nimport Twitch from \"@auth/core/providers/twitch\";\nimport Credentials from \"@auth/core/providers/credentials\";\nimport type { AuthConfig } from \"@auth/core/types\";\nimport { DrizzleAdapter } from \"@auth/drizzle-adapter\";\nimport { db } from \"@shared/database-unified\";\nimport {\n  comparePassword,\n  checkAuthRateLimit,\n  recordAuthFailure,\n  clearAuthFailures,\n} from \"./password\";\nimport { storage } from \"../storage\";\nimport { logger } from \"../logger\";\n\n// Validate critical environment variables at startup\nif (!process.env.AUTH_SECRET) {\n  throw new Error(\"AUTH_SECRET environment variable is required\");\n}\n\n// In production, AUTH_URL is optional when trustHost is enabled\n// Auth.js will auto-detect the host from request headers\nif (process.env.NODE_ENV === \"production\") {\n  if (!process.env.AUTH_URL && !process.env.NEXTAUTH_URL) {\n    console.warn(\n      \"[AUTH] No AUTH_URL set - relying on trustHost for URL detection\",\n    );\n  }\n\n  // Warn if OAuth providers are not configured in production\n  const hasGoogleOAuth =\n    process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET;\n  const hasTwitchOAuth =\n    process.env.TWITCH_CLIENT_ID && process.env.TWITCH_CLIENT_SECRET;\n\n  if (!hasGoogleOAuth && !hasTwitchOAuth) {\n    console.warn(\n      \"[AUTH] WARNING: No OAuth providers configured (Google or Twitch)\",\n    );\n    console.warn(\"[AUTH] Users will only be able to sign in with credentials\");\n    console.warn(\n      \"[AUTH] Set GOOGLE_CLIENT_ID/GOOGLE_CLIENT_SECRET or TWITCH_CLIENT_ID/TWITCH_CLIENT_SECRET\",\n    );\n  }\n}\n\nexport const authConfig: AuthConfig = {\n  // Secret configuration\n  secret: process.env.AUTH_SECRET,\n\n  // LAZY: Use a getter to delay adapter creation until first access\n  // This prevents accessing db before it's initialized\n  get adapter() {\n    return DrizzleAdapter(db);\n  },\n\n  // Use database sessions with Drizzle adapter\n  session: {\n    strategy: \"database\",\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n  },\n\n  // CRITICAL: Enable trustHost to allow Auth.js to detect the correct URL from request headers\n  // This is essential for Cloud Run and other proxy/load balancer environments\n  trustHost: true,\n\n  // Use secure cookies in production\n  useSecureCookies: process.env.NODE_ENV === \"production\",\n\n  // Enhanced cookie settings for production security\n  cookies: {\n    sessionToken: {\n      name:\n        process.env.NODE_ENV === \"production\"\n          ? \"__Secure-next-auth.session-token\"\n          : \"next-auth.session-token\",\n      options: {\n        httpOnly: true,\n        sameSite: \"lax\",\n        path: \"/\",\n        secure: process.env.NODE_ENV === \"production\",\n      },\n    },\n    // CRITICAL FIX: Explicit CSRF token cookie configuration\n    csrfToken: {\n      name:\n        process.env.NODE_ENV === \"production\"\n          ? \"__Host-authjs.csrf-token\"\n          : \"authjs.csrf-token\",\n      options: {\n        httpOnly: false, // Must be readable by JavaScript for double-submit pattern\n        sameSite: \"lax\",\n        path: \"/\",\n        secure: process.env.NODE_ENV === \"production\",\n      },\n    },\n  },\n\n  // CRITICAL FIX: Custom error page to prevent redirect loops\n  // Instead of redirecting to /api/auth/error (which can cause loops),\n  // redirect to frontend error page that handles the error display\n  pages: {\n    error: \"/auth/error\", // Redirect to frontend error page instead of /api/auth/error\n    signIn: \"/login\", // Custom sign-in page\n  },\n  providers: [\n    // Only include OAuth providers if properly configured\n    ...(process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET\n      ? [\n          Google({\n            clientId: process.env.GOOGLE_CLIENT_ID,\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n          }),\n        ]\n      : []),\n\n    ...(process.env.TWITCH_CLIENT_ID && process.env.TWITCH_CLIENT_SECRET\n      ? [\n          Twitch({\n            clientId: process.env.TWITCH_CLIENT_ID,\n            clientSecret: process.env.TWITCH_CLIENT_SECRET,\n          }),\n        ]\n      : []),\n    Credentials({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials, req) {\n        if (!credentials?.email || !credentials?.password) {\n          throw new Error(\"Email and password are required\");\n        }\n\n        try {\n          const email = credentials.email as string;\n          // Extract security context (Auth.js may not always provide req)\n          const ipAddress = \"unknown\"; // TODO: Extract from Auth.js context when available\n          const userAgent = \"unknown\"; // TODO: Extract from Auth.js context when available\n\n          // Apply rate limiting\n          const rateLimitCheck = checkAuthRateLimit(email);\n          if (!rateLimitCheck.allowed) {\n            // Log rate limit hit\n            await storage.createAuthAuditLog({\n              userId: null,\n              eventType: \"login_failure\",\n              ipAddress,\n              userAgent,\n              isSuccessful: false,\n              failureReason: \"rate_limited\",\n              details: JSON.stringify({\n                email: email.toLowerCase(),\n                retryAfter: rateLimitCheck.retryAfter,\n                reason: \"too_many_attempts\",\n              }),\n            });\n            throw new Error(\n              `Too many failed attempts. Try again in ${rateLimitCheck.retryAfter} seconds.`,\n            );\n          }\n\n          // Find user by email\n          const user = await storage.getUserByEmail(email);\n          if (!user) {\n            recordAuthFailure(email);\n            // Log failed login attempt\n            await storage.createAuthAuditLog({\n              userId: null,\n              eventType: \"login_failure\",\n              ipAddress,\n              userAgent,\n              isSuccessful: false,\n              failureReason: \"invalid_password\",\n              details: JSON.stringify({\n                email: email.toLowerCase(),\n                reason: \"user_not_found\",\n              }),\n            });\n            throw new Error(\"Invalid email or password\");\n          }\n\n          // Check if account is locked\n          if (user.accountLockedUntil && new Date() < user.accountLockedUntil) {\n            const lockTimeRemaining = Math.ceil(\n              (user.accountLockedUntil.getTime() - Date.now()) / 1000,\n            );\n            await storage.createAuthAuditLog({\n              userId: user.id,\n              eventType: \"login_failure\",\n              ipAddress,\n              userAgent,\n              isSuccessful: false,\n              failureReason: \"account_locked\",\n              details: JSON.stringify({\n                email: email.toLowerCase(),\n                lockTimeRemaining,\n                reason: \"account_temporarily_locked\",\n              }),\n            });\n            throw new Error(\n              `Account is temporarily locked. Try again in ${Math.ceil(lockTimeRemaining / 60)} minutes.`,\n            );\n          }\n\n          // Check if email is verified\n          if (!user.isEmailVerified) {\n            await storage.createAuthAuditLog({\n              userId: user.id,\n              eventType: \"login_failure\",\n              ipAddress,\n              userAgent,\n              isSuccessful: false,\n              failureReason: \"email_not_verified\",\n              details: JSON.stringify({\n                email: email.toLowerCase(),\n                reason: \"email_verification_required\",\n              }),\n            });\n            throw new Error(\n              \"Please verify your email address before signing in. Check your inbox for the verification link.\",\n            );\n          }\n\n          // Check if user has a password (OAuth users might not)\n          if (!user.passwordHash) {\n            recordAuthFailure(email);\n            await storage.createAuthAuditLog({\n              userId: user.id,\n              eventType: \"login_failure\",\n              ipAddress,\n              userAgent,\n              isSuccessful: false,\n              failureReason: \"invalid_password\",\n              details: JSON.stringify({\n                email: email.toLowerCase(),\n                reason: \"oauth_account_attempted_password_login\",\n              }),\n            });\n            throw new Error(\n              \"This account uses OAuth authentication. Please sign in with Google or Twitch.\",\n            );\n          }\n\n          // Verify password\n          const isPasswordValid = await comparePassword(\n            credentials.password as string,\n            user.passwordHash,\n          );\n\n          if (!isPasswordValid) {\n            recordAuthFailure(email);\n\n            // Increment failed login attempts\n            const newFailedAttempts = (user.failedLoginAttempts || 0) + 1;\n            const shouldLockAccount = newFailedAttempts >= 5; // Lock after 5 failed attempts\n            const lockUntil = shouldLockAccount\n              ? new Date(Date.now() + 30 * 60 * 1000)\n              : null; // 30 minute lockout\n\n            // Update user with failed attempt info\n            await storage.updateUser(user.id, {\n              failedLoginAttempts: newFailedAttempts,\n              lastFailedLogin: new Date(),\n              ...(shouldLockAccount && { accountLockedUntil: lockUntil }),\n            });\n\n            await storage.createAuthAuditLog({\n              userId: user.id,\n              eventType: \"login_failure\",\n              ipAddress,\n              userAgent,\n              isSuccessful: false,\n              failureReason: \"invalid_password\",\n              details: JSON.stringify({\n                email: email.toLowerCase(),\n                failedAttempts: newFailedAttempts,\n                accountLocked: shouldLockAccount,\n                reason: \"invalid_password_provided\",\n              }),\n            });\n\n            if (shouldLockAccount) {\n              throw new Error(\n                `Account locked due to too many failed attempts. Try again in 30 minutes.`,\n              );\n            }\n\n            throw new Error(\"Invalid email or password\");\n          }\n\n          // CRITICAL SECURITY: Check if MFA is enabled and BLOCK login until verified\n          if (user.mfaEnabled) {\n            // For MFA users, we MUST NOT allow login without MFA verification\n            // Clear failed attempts since password was correct\n            await storage.updateUser(user.id, {\n              failedLoginAttempts: 0,\n              lastFailedLogin: null,\n              accountLockedUntil: null,\n            });\n\n            // Log MFA requirement - this is NOT a successful login yet\n            await storage.createAuthAuditLog({\n              userId: user.id,\n              eventType: \"login_failure\",\n              ipAddress,\n              userAgent,\n              isSuccessful: false,\n              failureReason: \"mfa_required\",\n              details: JSON.stringify({\n                email: email.toLowerCase(),\n                mfaRequired: true,\n                loginMethod: \"credentials\",\n                reason: \"password_verified_but_mfa_required\",\n              }),\n            });\n\n            // SECURITY: Do NOT return user object - this prevents session creation\n            // Frontend must handle MFA verification through dedicated endpoint\n            throw new Error(\n              \"MFA_REQUIRED: Please complete multi-factor authentication. Check your authenticator app for the verification code.\",\n            );\n          }\n\n          // Clear failures on successful login\n          clearAuthFailures(email);\n\n          // Clear database lockout fields\n          await storage.updateUser(user.id, {\n            failedLoginAttempts: 0,\n            lastFailedLogin: null,\n            accountLockedUntil: null,\n          });\n\n          // Log successful login\n          await storage.createAuthAuditLog({\n            userId: user.id,\n            eventType: \"login_success\",\n            ipAddress,\n            userAgent,\n            isSuccessful: true,\n            details: JSON.stringify({\n              email: email.toLowerCase(),\n              mfaEnabled: user.mfaEnabled || false,\n              loginMethod: \"credentials\",\n              reason: \"password_verified_successfully\",\n            }),\n          });\n\n          // Return user object for session\n          return {\n            id: user.id,\n            email: user.email,\n            name: user.firstName\n              ? `${user.firstName} ${user.lastName || \"\"}`.trim()\n              : user.email,\n            image: user.profileImageUrl,\n          };\n        } catch (error) {\n          console.error(\"Authentication error:\", error);\n          return null;\n        }\n      },\n    }),\n  ],\n\n  // CONSOLIDATED: All callbacks in one section to fix duplicate property errors\n  callbacks: {\n    // JWT callback - persist user ID into token for session access\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n        token.email = user.email;\n      }\n      return token;\n    },\n    // Session callback - add user ID to session object\n    async session({ session, token }) {\n      if (token?.id) {\n        session.user.id = String(token.id);\n        session.user.email = String(token.email || \"\"); // Fix type error\n      }\n      return session;\n    },\n    async signIn({ user, account, profile }) {\n      try {\n        // For OAuth providers, ensure user exists in our database\n        if (account?.provider !== \"credentials\") {\n          if (!user.email) {\n            logger.error(\"OAuth user missing email\", { userId: user.id });\n            return false;\n          }\n          \n          let existingUser = await storage.getUserByEmail(user.email);\n\n          if (!existingUser) {\n            // Create new user from OAuth profile\n            existingUser = await storage.upsertUser({\n              id: crypto.randomUUID(),\n              email: user.email,\n              firstName: user.name?.split(\" \")[0] || \"\",\n              lastName: user.name?.split(\" \").slice(1).join(\" \") || \"\",\n              profileImageUrl: user.image || null,\n              username: null,\n              bio: null,\n              location: null,\n              website: null,\n              primaryCommunity: null,\n              status: \"offline\",\n              statusMessage: null,\n              timezone: null,\n              dateOfBirth: null,\n              isPrivate: false,\n              showOnlineStatus: \"everyone\",\n              allowDirectMessages: \"everyone\",\n              passwordHash: null, // OAuth users don't have passwords\n            });\n          }\n\n          // Update user ID in the user object for JWT\n          if (existingUser) {\n            user.id = existingUser.id;\n          }\n        }\n\n        return true;\n      } catch (error) {\n        console.error(\"Sign-in callback error:\", error);\n        return false;\n      }\n    },\n    // Add redirect callback to control where users go after authentication\n    async redirect({ url, baseUrl }) {\n      // CRITICAL FIX: Always use baseUrl from Auth.js - it's already resolved from request headers\n      // This prevents redirect loops when AUTH_URL doesn't match the actual Cloud Run URL\n      // trustHost: true ensures baseUrl is correctly detected from X-Forwarded-Host header\n\n      // Log for debugging (helps diagnose redirect issues)\n      if (process.env.NODE_ENV === \"development\") {\n        console.log(\"[AUTH] Redirect callback:\", { url, baseUrl });\n      }\n\n      // Handle error redirects - prevent loops by going to frontend error page\n      if (url.includes(\"/api/auth/error\") || url.includes(\"error=\")) {\n        // Extract error parameter if present\n        const urlObj = new URL(url, baseUrl);\n        const error = urlObj.searchParams.get(\"error\");\n\n        if (error === \"Configuration\") {\n          console.error(\n            \"[AUTH] Configuration error detected - check OAuth credentials\",\n          );\n          console.error(\n            \"[AUTH] Ensure GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET are set\",\n          );\n          console.error(\n            \"[AUTH] Also verify redirect URI in Google Console matches backend URL\",\n          );\n        }\n\n        // Redirect to frontend error page with error details\n        return `${baseUrl}/auth/error?error=${error || \"unknown\"}`;\n      }\n\n      // Redirect to home page after successful sign in\n      if (url.startsWith(\"/\")) return `${baseUrl}${url}`;\n      if (url.startsWith(baseUrl)) return url;\n\n      // For absolute URLs, validate they're for the same domain\n      try {\n        const urlObj = new URL(url);\n        const baseUrlObj = new URL(baseUrl);\n        if (urlObj.hostname === baseUrlObj.hostname) {\n          return url;\n        }\n      } catch (e) {\n        // Invalid URL, fall through to default\n      }\n\n      return `${baseUrl}/home`; // Default redirect to home for authenticated users\n    },\n  },\n\n  events: {\n    signIn({ user, account, isNewUser }) {\n      console.log(`User ${user.email} signed in via ${account?.provider}`);\n    },\n    signOut() {\n      console.log(`User signed out`);\n    },\n  },\n\n  debug: process.env.NODE_ENV === \"development\",\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/auth/auth.middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1292,1295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1292,1295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-namespace","severity":2,"message":"ES2015 module syntax is preferred over namespaces.","line":25,"column":3,"nodeType":"TSModuleDeclaration","messageId":"moduleSyntaxIsPreferred","endLine":59,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Auth.js v5 middleware for Express.js routes\nimport type { Request, Response, NextFunction } from \"express\";\nimport { Auth } from \"@auth/core\";\nimport { authConfig } from \"./auth.config\";\nimport { verifyAccessTokenJWT, validateTokenSecurity } from \"./tokens\";\nimport { extractDeviceContext } from \"./device-fingerprinting\";\nimport { logger } from \"../logger\";\nimport { storage } from \"../storage\";\nimport { enhancedSessionManager } from \"./session-security\";\n\n// Auth.js session type\nexport interface AuthSession {\n  user?: {\n    id: string;\n    email?: string | null;\n    name?: string | null;\n    image?: string | null;\n  };\n  expires: string;\n}\n\n// Module augmentation to extend Express Request without conflicts\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace Express {\n    interface Request {\n      auth?: AuthSession;\n      user?: {\n        id: string;\n        email?: string | null;\n        name?: string | null;\n        image?: string | null;\n      };\n      // Express session support\n      session?: {\n        mfaPendingSecret?: {\n          secret: string;\n          qrCodeUrl: string;\n          manualEntryKey: string;\n          userId: string;\n          createdAt: number;\n          expiresAt: number;\n        };\n        [key: string]: any;\n      };\n      // JWT-specific data\n      jwtPayload?: {\n        userId: string;\n        email: string;\n        type: \"access\";\n        sessionId?: string;\n        iat: number;\n        exp: number;\n        iss: string;\n        aud: string;\n      };\n      isJWTAuth?: boolean;\n    }\n  }\n}\n\n// Compatibility type during migration\nexport type AuthenticatedRequest = Request & {\n  user: {\n    id: string;\n    email?: string | null;\n    name?: string | null;\n    image?: string | null;\n  };\n};\n\n// Middleware to check if user is authenticated (replaces old isAuthenticated)\nexport async function requireAuth(\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) {\n  try {\n    // Build the session check URL - ignore AUTH_URL in development to use actual request host\n    const base =\n      process.env.NODE_ENV === \"production\"\n        ? process.env.AUTH_URL ||\n          process.env.NEXTAUTH_URL ||\n          `${(req.headers[\"x-forwarded-proto\"] as string) ?? req.protocol}://${(req.headers[\"x-forwarded-host\"] as string) ?? req.get(\"host\")}`\n        : `${(req.headers[\"x-forwarded-proto\"] as string) ?? req.protocol}://${(req.headers[\"x-forwarded-host\"] as string) ?? req.get(\"host\")}`;\n    const sessionUrl = `${base}/api/auth/session`;\n\n    // Create Auth.js session request\n    const sessionRequest = new Request(sessionUrl, {\n      method: \"GET\",\n      headers: {\n        // Forward the cookies to get the session\n        cookie: req.headers.cookie || \"\",\n      },\n    });\n\n    // Get session from Auth.js\n    const response = await Auth(sessionRequest, authConfig);\n\n    if (!response.ok) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    const sessionData = await response.json();\n\n    // Check if user is authenticated\n    if (!sessionData || !sessionData.user) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    // Add auth session and user data to request\n    req.auth = sessionData;\n    req.user = {\n      id: sessionData.user.id,\n      email: sessionData.user.email,\n      name: sessionData.user.name,\n      image: sessionData.user.image,\n    };\n\n    // ENTERPRISE SESSION SECURITY VALIDATION - Skip for JWT sessions\n    try {\n      let sessionSecurityValidation = null;\n\n      // JWT sessions don't expose sessionToken, so skip enhanced validation to prevent spurious failures\n      if (sessionData.sessionToken) {\n        sessionSecurityValidation =\n          await enhancedSessionManager.validateSessionSecurity(\n            sessionData.user.id,\n            sessionData.sessionToken,\n            {\n              headers: req.headers,\n              ip: req.ip || req.connection.remoteAddress || \"unknown\",\n            },\n          );\n      }\n\n      // Handle security assessment results only if validation was performed\n      if (sessionSecurityValidation && !sessionSecurityValidation.isValid) {\n        logger.warn(\"Session terminated due to security assessment\", {\n          userId: sessionData.user.id,\n          riskLevel: sessionSecurityValidation.assessment.riskLevel,\n          riskScore: sessionSecurityValidation.assessment.riskScore,\n          actions: sessionSecurityValidation.actions,\n          ip: req.ip,\n        });\n\n        return res.status(401).json({\n          message: \"Session terminated for security reasons\",\n          securityLevel: sessionSecurityValidation.assessment.riskLevel,\n        });\n      }\n\n      // Log successful security validation with warnings if any (only if validation was performed)\n      if (sessionSecurityValidation?.assessment.riskFactors?.length) {\n        logger.warn(\"Session security risk factors detected\", {\n          userId: sessionData.user.id,\n          riskLevel: sessionSecurityValidation.assessment.riskLevel,\n          riskFactors: sessionSecurityValidation.assessment.riskFactors,\n          ip: req.ip,\n        });\n      }\n\n      // Proceed with normal authentication flow (log only if validation was performed)\n      if (sessionSecurityValidation) {\n        logger.debug(\"Session security validation passed\", {\n          userId: sessionData.user.id,\n          riskLevel: sessionSecurityValidation.assessment.riskLevel,\n          trustScore: sessionSecurityValidation.assessment.trustScore,\n          actionsExecuted: sessionSecurityValidation.actions,\n        });\n      } else {\n        logger.debug(\"JWT session - skipped enhanced security validation\", {\n          userId: sessionData.user.id,\n        });\n      }\n    } catch (error) {\n      logger.error(\"Session security validation failed\", {\n        userId: sessionData.user.id,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        ip: req.ip,\n      });\n\n      // Fail-safe: deny access on security validation failure\n      return res.status(500).json({\n        message: \"Session security validation failed\",\n      });\n    }\n\n    return next();\n  } catch (error) {\n    console.error(\"Auth middleware error:\", error);\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n}\n\n// Middleware to optionally get user session (doesn't require auth)\nexport async function optionalAuth(\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) {\n  try {\n    // Build the session check URL - ignore AUTH_URL in development to use actual request host\n    const base =\n      process.env.NODE_ENV === \"production\"\n        ? process.env.AUTH_URL ||\n          process.env.NEXTAUTH_URL ||\n          `${(req.headers[\"x-forwarded-proto\"] as string) ?? req.protocol}://${(req.headers[\"x-forwarded-host\"] as string) ?? req.get(\"host\")}`\n        : `${(req.headers[\"x-forwarded-proto\"] as string) ?? req.protocol}://${(req.headers[\"x-forwarded-host\"] as string) ?? req.get(\"host\")}`;\n    const sessionUrl = `${base}/api/auth/session`;\n\n    // Create Auth.js session request\n    const sessionRequest = new Request(sessionUrl, {\n      method: \"GET\",\n      headers: {\n        cookie: req.headers.cookie || \"\",\n      },\n    });\n\n    // Get session from Auth.js\n    const response = await Auth(sessionRequest, authConfig);\n    const sessionData = response.ok ? await response.json() : null;\n\n    // Add auth session data to request\n    req.auth = sessionData;\n    if (sessionData?.user) {\n      req.user = {\n        id: sessionData.user.id,\n        email: sessionData.user.email,\n        name: sessionData.user.name,\n        image: sessionData.user.image,\n      };\n    }\n\n    next();\n  } catch (error) {\n    console.error(\"Optional auth middleware error:\", error);\n    // Continue without authentication on error\n    next();\n  }\n}\n\n// Get current user ID from session\nexport function getCurrentUserId(\n  req: AuthenticatedRequest,\n): string | undefined {\n  return req.user?.id;\n}\n\n// Check if user is authenticated\nexport function isAuthenticated(req: AuthenticatedRequest): boolean {\n  return !!req.user?.id;\n}\n\n/**\n * JWT Authentication Middleware\n * Authenticates requests using JWT access tokens from Authorization header\n */\nexport async function requireJWTAuth(\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): Promise<void> {\n  try {\n    const authHeader = req.headers.authorization;\n\n    if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n      res\n        .status(401)\n        .json({ message: \"Authorization header with Bearer token required\" });\n      return;\n    }\n\n    const token = authHeader.substring(7); // Remove 'Bearer ' prefix\n\n    // Extract device context for enhanced security validation\n    const deviceContext = extractDeviceContext(\n      req.headers,\n      req.ip || req.connection.remoteAddress || \"unknown\",\n    );\n\n    // Verify the JWT access token with enhanced security\n    const { valid, payload, error, securityWarnings } =\n      await verifyAccessTokenJWT(token, {\n        checkSecurity: true,\n      });\n\n    if (!valid || !payload) {\n      logger.warn(\"Invalid JWT token attempted\", {\n        error,\n        ip: req.ip,\n        userAgent: req.headers[\"user-agent\"],\n        deviceFingerprint: deviceContext.userAgent,\n      });\n      res.status(401).json({ message: \"Invalid or expired access token\" });\n      return;\n    }\n\n    // Enhanced security validation\n    if (payload.jti) {\n      const securityValidation = validateTokenSecurity(payload.jti, payload);\n\n      if (!securityValidation) {\n        logger.warn(\"JWT token failed security validation\", {\n          userId: payload.sub,\n          jti: payload.jti,\n          ip: req.ip,\n        });\n        res.status(401).json({\n          message: \"Token security validation failed\",\n        });\n        return;\n      }\n    }\n\n    // Get user from database to ensure they still exist and are active\n    const user = await storage.getUser(payload.sub);\n    if (!user) {\n      logger.warn(\"JWT token for non-existent user\", {\n        userId: payload.sub,\n        ip: req.ip,\n      });\n      res.status(401).json({ message: \"User not found\" });\n      return;\n    }\n\n    // Attach user and JWT info to request object\n    req.user = {\n      id: user.id,\n      email: user.email || payload.email,\n      name:\n        user.firstName && user.lastName\n          ? `${user.firstName} ${user.lastName}`\n          : user.firstName || \"User\",\n    };\n\n    // Convert our token payload to the expected JWT payload format\n    req.jwtPayload = {\n      userId: payload.sub, // Map 'sub' to 'userId'\n      email: payload.email,\n      type: \"access\" as const,\n      sessionId: undefined, // Not available in our simple tokens\n      iat: payload.iat,\n      exp: payload.exp,\n      iss: \"shuffle-and-sync\", // Default issuer\n      aud: \"shuffle-and-sync\", // Default audience\n    };\n    req.isJWTAuth = true;\n\n    // Log security warnings if present\n    if (securityWarnings && securityWarnings.length > 0) {\n      logger.warn(\"JWT token security warnings\", {\n        userId: user.id,\n        jti: payload.jti,\n        securityWarnings,\n        ip: req.ip,\n      });\n    }\n\n    logger.debug(\"JWT authentication successful\", {\n      userId: user.id,\n      sessionId: req.jwtPayload?.sessionId,\n      securityLevel: \"standard\", // Default security level\n      mfaVerified: false, // Default MFA status\n      deviceBound: !!deviceContext.userAgent,\n      ip: req.ip,\n    });\n\n    next();\n  } catch (error) {\n    logger.error(\"JWT authentication error\", error, {\n      ip: req.ip,\n      userAgent: req.headers[\"user-agent\"],\n    });\n    res.status(500).json({ message: \"Authentication failed\" });\n  }\n}\n\n/**\n * Hybrid Authentication Middleware\n * Supports both session-based and JWT-based authentication\n * Tries JWT first, then falls back to session\n */\nexport async function requireHybridAuth(\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): Promise<void> {\n  // Check for JWT first\n  const authHeader = req.headers.authorization;\n\n  if (authHeader && authHeader.startsWith(\"Bearer \")) {\n    // Use JWT authentication\n    await requireJWTAuth(req, res, next);\n    return;\n  }\n\n  // Fall back to session authentication\n  await requireAuth(req, res, next);\n}\n\n/**\n * Optional JWT Authentication Middleware\n * Attempts JWT authentication but doesn't fail if no token provided\n */\nexport async function optionalJWTAuth(\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): Promise<void> {\n  const authHeader = req.headers.authorization;\n\n  if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n    // No JWT token provided, continue without authentication\n    return next();\n  }\n\n  try {\n    const token = authHeader.substring(7);\n    const { valid, payload } = await verifyAccessTokenJWT(token);\n\n    if (valid && payload) {\n      // Get user from database\n      const user = await storage.getUser(payload.sub);\n      if (user) {\n        req.user = {\n          id: user.id,\n          email: user.email || payload.email,\n          name:\n            user.firstName && user.lastName\n              ? `${user.firstName} ${user.lastName}`\n              : user.firstName || \"User\",\n        };\n        req.jwtPayload = {\n          userId: payload.sub,\n          email: payload.email,\n          type: \"access\" as const,\n          sessionId: undefined,\n          iat: payload.iat,\n          exp: payload.exp,\n          iss: \"shuffle-and-sync\",\n          aud: \"shuffle-and-sync\",\n        };\n        req.isJWTAuth = true;\n      }\n    }\n  } catch (error) {\n    logger.warn(\"Optional JWT auth failed\", {\n      error: error instanceof Error ? error.message : \"Unknown error\",\n      ip: req.ip,\n    });\n    // Continue without authentication on error\n  }\n\n  next();\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/auth/auth.routes.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Router' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Auth.js v5 Express.js integration routes\nimport { type Router } from \"express\";\nimport { ExpressAuth } from \"@auth/express\";\nimport { authConfig } from \"./auth.config\";\n\n// Export ExpressAuth middleware directly instead of using a Router\n// This ensures proper path matching for all Auth.js routes\n// When mounted at /api/auth, ExpressAuth will handle:\n// - /api/auth/signin, /api/auth/signout\n// - /api/auth/callback/google, /api/auth/callback/[provider]\n// - /api/auth/session, /api/auth/providers\n// - /api/auth/csrf\nexport default ExpressAuth(authConfig);\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/auth/device-fingerprinting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/auth/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/auth/mfa.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createHash' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import speakeasy from \"speakeasy\";\nimport qrcode from \"qrcode\";\nimport { randomBytes, createHash } from \"crypto\";\nimport { logger } from \"../logger\";\n\n/**\n * Multi-Factor Authentication utilities for TOTP-based authentication\n * Provides enterprise-grade MFA implementation with backup codes\n */\n\nexport interface TOTPSetupResult {\n  secret: string;\n  qrCodeUrl: string;\n  backupCodes: string[];\n  manualEntryKey: string;\n}\n\nexport interface TOTPVerificationResult {\n  isValid: boolean;\n  error?: string;\n}\n\n/**\n * Generate a new TOTP secret and setup data for a user\n */\nexport async function generateTOTPSetup(\n  userEmail: string,\n  serviceName: string = \"Shuffle & Sync\",\n): Promise<TOTPSetupResult> {\n  try {\n    // Generate TOTP secret\n    const secret = speakeasy.generateSecret({\n      name: `${serviceName} (${userEmail})`,\n      issuer: serviceName,\n      length: 32, // 256-bit secret for enhanced security\n    });\n\n    // Generate QR code for easy setup\n    if (!secret.otpauth_url) {\n      throw new Error(\"Failed to generate OTP auth URL\");\n    }\n    const qrCodeUrl = await qrcode.toDataURL(secret.otpauth_url);\n\n    // Generate backup recovery codes\n    const backupCodes = generateBackupCodes(10);\n\n    return {\n      secret: secret.base32,\n      qrCodeUrl,\n      backupCodes,\n      manualEntryKey: secret.base32,\n    };\n  } catch (error) {\n    logger.error(\"Failed to generate TOTP setup\", {\n      error: error instanceof Error ? error.message : \"Unknown error\",\n      userEmail,\n    });\n    throw new Error(\"Failed to generate MFA setup\");\n  }\n}\n\n/**\n * Verify a TOTP code against a secret\n */\nexport function verifyTOTPCode(\n  token: string,\n  secret: string,\n  window: number = 1,\n): TOTPVerificationResult {\n  try {\n    // Clean and validate input\n    const cleanToken = token.replace(/\\s/g, \"\");\n    if (!/^\\d{6}$/.test(cleanToken)) {\n      return { isValid: false, error: \"Invalid code format\" };\n    }\n\n    // Verify TOTP code with time window\n    const isValid = speakeasy.totp.verify({\n      secret,\n      encoding: \"base32\",\n      token: cleanToken,\n      window, // Allow 1 step (30 seconds) before and after for clock drift\n    });\n\n    return { isValid };\n  } catch (error) {\n    logger.error(\"TOTP verification failed\", {\n      error: error instanceof Error ? error.message : \"Unknown error\",\n    });\n    return { isValid: false, error: \"Verification failed\" };\n  }\n}\n\n/**\n * Generate secure backup recovery codes\n */\nexport function generateBackupCodes(count: number = 10): string[] {\n  const codes: string[] = [];\n\n  for (let i = 0; i < count; i++) {\n    // Generate 8-character alphanumeric code\n    const code = generateBackupCode();\n    codes.push(code);\n  }\n\n  return codes;\n}\n\n/**\n * Generate a single backup recovery code with higher entropy\n * Format: XXXX-XXXX-XXXX (12 chars + dashes = ~62 bits entropy)\n */\nfunction generateBackupCode(): string {\n  // FIXED: Use crypto.randomBytes for cryptographically secure codes (not Math.random)\n  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  const bytes = randomBytes(12); // Cryptographically secure random bytes\n  let result = \"\";\n\n  for (let i = 0; i < 12; i++) {\n    const byte = bytes[i];\n    if (byte !== undefined) {\n      result += chars[byte % chars.length];\n      // Add dashes for readability every 4 characters\n      if ((i + 1) % 4 === 0 && i < 11) {\n        result += \"-\";\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * Hash a backup code for secure storage using Argon2id\n * Uses same hashing as passwords for enterprise security\n */\nexport async function hashBackupCode(code: string): Promise<string> {\n  // Import hashPassword function for consistent Argon2id hashing\n  const { hashPassword } = await import(\"./password\");\n\n  // Normalize code format (remove dashes, uppercase)\n  const normalizedCode = code.replace(/-/g, \"\").toUpperCase();\n\n  // Use Argon2id hashing with same parameters as passwords\n  return await hashPassword(normalizedCode);\n}\n\n/**\n * Verify a backup code against stored hashed codes using Argon2id\n */\nexport async function verifyBackupCode(\n  inputCode: string,\n  hashedCodes: string[],\n): Promise<{ isValid: boolean; codeIndex?: number }> {\n  try {\n    // Normalize input code (remove spaces/dashes, uppercase)\n    const cleanCode = inputCode.replace(/[\\s-]/g, \"\").toUpperCase();\n\n    // Validate format: 12 alphanumeric characters\n    if (!/^[A-Z0-9]{12}$/.test(cleanCode)) {\n      return { isValid: false };\n    }\n\n    // Import verifyPassword for Argon2id verification\n    const { verifyPassword } = await import(\"./password\");\n\n    // Check against each hashed backup code\n    for (let i = 0; i < hashedCodes.length; i++) {\n      const hashedCode = hashedCodes[i];\n      if (hashedCode) {\n        const isMatch = await verifyPassword(cleanCode, hashedCode);\n        if (isMatch) {\n          return {\n            isValid: true,\n            codeIndex: i,\n          };\n        }\n      }\n    }\n\n    return { isValid: false };\n  } catch (error) {\n    logger.error(\"Backup code verification failed\", {\n      error: error instanceof Error ? error.message : \"Unknown error\",\n    });\n    return { isValid: false };\n  }\n}\n\n/**\n * Validate MFA setup requirements\n */\nexport function validateMFASetupRequirements(\n  totpCode: string,\n  secret: string,\n): { isValid: boolean; errors: string[] } {\n  const errors: string[] = [];\n\n  // Validate TOTP code format\n  const cleanCode = totpCode.replace(/\\s/g, \"\");\n  if (!cleanCode || !/^\\d{6}$/.test(cleanCode)) {\n    errors.push(\"TOTP code must be exactly 6 digits\");\n  }\n\n  // Validate secret format (Base32 encoding)\n  if (!secret || secret.length < 16 || !/^[A-Z2-7]+=*$/.test(secret)) {\n    errors.push(\"Invalid TOTP secret format\");\n  }\n\n  // Verify the TOTP code works\n  if (errors.length === 0) {\n    const verification = verifyTOTPCode(cleanCode, secret);\n    if (!verification.isValid) {\n      errors.push(\n        \"Invalid TOTP code - please check your authenticator app and ensure the time is synchronized\",\n      );\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n}\n\n/**\n * Validate backup code format (12 chars with optional dashes)\n */\nexport function validateBackupCodeFormat(code: string): {\n  isValid: boolean;\n  error?: string;\n} {\n  const cleanCode = code.replace(/[\\s-]/g, \"\").toUpperCase();\n\n  if (!/^[A-Z0-9]{12}$/.test(cleanCode)) {\n    return {\n      isValid: false,\n      error:\n        \"Backup code must be 12 alphanumeric characters (format: XXXX-XXXX-XXXX)\",\n    };\n  }\n\n  return { isValid: true };\n}\n\n/**\n * Get current TOTP code for testing/debugging (development only)\n */\nexport function getCurrentTOTPCode(secret: string): string {\n  if (process.env.NODE_ENV === \"production\") {\n    throw new Error(\"getCurrentTOTPCode is not available in production\");\n  }\n\n  return speakeasy.totp({\n    secret,\n    encoding: \"base32\",\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/auth/password.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/auth/session-security.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createHash' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":513,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":513,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16293,16296],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16293,16296],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":586,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":586,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18790,18793],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18790,18793],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":776,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":776,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24271,24274],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24271,24274],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from \"../logger\";\nimport { storage } from \"../storage\";\nimport { createHash } from \"crypto\";\nimport type {\n  DeviceContext,\n  DeviceFingerprintData,\n} from \"./device-fingerprinting\";\nimport {\n  generateDeviceFingerprint,\n  validateDeviceContext,\n  extractDeviceContext,\n} from \"./device-fingerprinting\";\n// TODO: Fix token imports - revokeTokenByJTI needs to be implemented\n// import { revokeTokenByJTI } from './tokens';\n\n/**\n * Enterprise-grade Session Security Service\n * Provides comprehensive session security with device tracking, geographic validation,\n * and suspicious activity detection for enhanced authentication security.\n */\n\nexport interface SessionSecurityContext {\n  userId: string;\n  sessionId?: string;\n  ipAddress: string;\n  userAgent: string;\n  deviceContext?: DeviceContext;\n  location?: string;\n  timestamp: Date;\n}\n\nexport interface SecurityRiskAssessment {\n  riskScore: number; // 0.0 (safe) to 1.0 (high risk)\n  riskFactors: string[];\n  trustScore: number; // 0.0 (untrusted) to 1.0 (fully trusted)\n  riskLevel: \"low\" | \"medium\" | \"high\" | \"critical\";\n  requiresAction: boolean;\n  recommendedActions: string[];\n}\n\nexport interface SuspiciousActivityFlags {\n  newDevice: boolean;\n  newLocation: boolean;\n  newIpRange: boolean;\n  suspiciousUserAgent: boolean;\n  rapidLocationChange: boolean;\n  multipleDevicesSimultaneous: boolean;\n  anomalousTimingPattern: boolean;\n  highRiskIpAddress: boolean;\n}\n\nexport interface GeographicAnomaly {\n  type:\n    | \"impossible_travel\"\n    | \"new_country\"\n    | \"high_risk_location\"\n    | \"ip_location_mismatch\";\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  details: string;\n  previousLocation?: string;\n  currentLocation?: string;\n  timeFrame?: string;\n}\n\n/**\n * Enhanced Session Security Service\n * Core service for comprehensive session security management\n */\nexport class SessionSecurityService {\n  private static instance: SessionSecurityService;\n\n  // Geographic risk assessment\n  private readonly HIGH_RISK_COUNTRIES = new Set([\n    \"CN\",\n    \"RU\",\n    \"IR\",\n    \"KP\",\n    \"BY\", // Example high-risk country codes\n  ]);\n\n  // IP ranges and patterns\n  private readonly SUSPICIOUS_IP_PATTERNS = [\n    /^10\\./, // Private networks (suspicious for external access)\n    /^192\\.168\\./, // Private networks\n    /^172\\.(1[6-9]|2[0-9]|3[0-1])\\./, // Private networks\n    /^127\\./, // Localhost\n  ];\n\n  // Maximum reasonable travel speed (km/h) for impossible travel detection\n  private readonly MAX_TRAVEL_SPEED = 900; // Approximately jet aircraft speed\n\n  public static getInstance(): SessionSecurityService {\n    if (!SessionSecurityService.instance) {\n      SessionSecurityService.instance = new SessionSecurityService();\n    }\n    return SessionSecurityService.instance;\n  }\n\n  /**\n   * Comprehensive session security assessment\n   * Analyzes security context and returns risk assessment with recommended actions\n   */\n  async assessSessionSecurity(\n    context: SessionSecurityContext,\n  ): Promise<SecurityRiskAssessment> {\n    try {\n      logger.info(\"Starting comprehensive session security assessment\", {\n        userId: context.userId,\n        ipAddress: context.ipAddress?.substring(0, 8) + \"***\", // Partial IP for logging\n      });\n\n      // Generate device fingerprint\n      const deviceContext =\n        context.deviceContext ||\n        extractDeviceContext(\n          { \"user-agent\": context.userAgent },\n          context.ipAddress,\n        );\n      const deviceFingerprint = generateDeviceFingerprint(deviceContext);\n\n      // Parallel security assessments for efficiency\n      const [\n        deviceRisk,\n        geographicRisk,\n        behaviorRisk,\n        suspiciousFlags,\n        historicalContext,\n      ] = await Promise.all([\n        this.assessDeviceRisk(context.userId, deviceFingerprint),\n        this.assessGeographicRisk(\n          context.userId,\n          context.ipAddress,\n          context.location,\n        ),\n        this.assessBehaviorRisk(context.userId, context.timestamp),\n        this.detectSuspiciousActivity(\n          context.userId,\n          deviceContext,\n          context.ipAddress,\n        ),\n        this.getHistoricalSecurityContext(context.userId),\n      ]);\n\n      // Calculate composite risk score\n      const riskScore = this.calculateCompositeRiskScore({\n        deviceRisk: deviceRisk.score,\n        geographicRisk: geographicRisk.score,\n        behaviorRisk: behaviorRisk.score,\n        suspiciousActivityWeight: suspiciousFlags.overallRisk,\n      });\n\n      // Calculate trust score based on device and user history\n      const trustScore = await this.calculateTrustScore(\n        context.userId,\n        deviceFingerprint.hash,\n        historicalContext,\n      );\n\n      // Compile all risk factors\n      const allRiskFactors = [\n        ...deviceRisk.factors,\n        ...geographicRisk.factors,\n        ...behaviorRisk.factors,\n        ...this.getSuspiciousActivityFactors(suspiciousFlags),\n      ];\n\n      // Determine risk level and recommended actions\n      const riskLevel = this.determineRiskLevel(riskScore);\n      const recommendedActions = this.getRecommendedActions(\n        riskLevel,\n        allRiskFactors,\n        suspiciousFlags,\n      );\n\n      const assessment: SecurityRiskAssessment = {\n        riskScore,\n        riskFactors: allRiskFactors,\n        trustScore,\n        riskLevel,\n        requiresAction: riskLevel === \"high\" || riskLevel === \"critical\",\n        recommendedActions,\n      };\n\n      // Log security assessment for monitoring\n      await this.logSecurityAssessment(context, assessment, suspiciousFlags);\n\n      logger.info(\"Session security assessment completed\", {\n        userId: context.userId,\n        riskLevel,\n        riskScore: riskScore.toFixed(3),\n        trustScore: trustScore.toFixed(3),\n        requiresAction: assessment.requiresAction,\n      });\n\n      return assessment;\n    } catch (error) {\n      logger.error(\"Failed to assess session security\", {\n        userId: context.userId,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n\n      // Return default high-risk assessment on error (fail-safe)\n      return {\n        riskScore: 0.8,\n        riskFactors: [\"security_assessment_failed\"],\n        trustScore: 0.2,\n        riskLevel: \"high\",\n        requiresAction: true,\n        recommendedActions: [\"require_mfa\", \"log_security_event\"],\n      };\n    }\n  }\n\n  /**\n   * Enhanced geographic risk assessment with impossible travel detection\n   */\n  private async assessGeographicRisk(\n    userId: string,\n    ipAddress: string,\n    location?: string,\n  ): Promise<{ score: number; factors: string[] }> {\n    const factors: string[] = [];\n    let score = 0.0;\n\n    try {\n      // Get recent location history\n      const recentLogins = await storage.getAuthAuditLogs(userId, {\n        hours: 24,\n      }); // Last 24 hours\n\n      if (recentLogins.length === 0) {\n        return { score: 0.0, factors: [] }; // No previous data\n      }\n\n      // Parse details JSON to get location\n      const recentLoginDetails = recentLogins[0]?.details\n        ? typeof recentLogins[0].details === \"string\"\n          ? JSON.parse(recentLogins[0].details)\n          : recentLogins[0].details\n        : {};\n      const previousLocation = recentLoginDetails.location;\n      const previousIp = recentLogins[0]?.ipAddress;\n      const previousTime = recentLogins[0]?.createdAt;\n\n      // Check for IP address changes\n      if (previousIp && previousIp !== ipAddress) {\n        factors.push(\"ip_address_changed\");\n        score += 0.1;\n      }\n\n      // Check for location changes\n      if (location && previousLocation && location !== previousLocation) {\n        factors.push(\"location_changed\");\n        score += 0.2;\n\n        // Check for impossible travel (basic geographic distance vs time)\n        if (previousTime) {\n          const timeElapsed =\n            (Date.now() - new Date(previousTime).getTime()) / (1000 * 60 * 60); // hours\n\n          // Simplified impossible travel detection\n          // (In production, you'd use proper geographic distance calculation)\n          if (\n            timeElapsed < 2 &&\n            this.isPotentiallyImpossibleTravel(previousLocation, location)\n          ) {\n            factors.push(\"impossible_travel_detected\");\n            score += 0.4;\n          }\n        }\n      }\n\n      // Check for high-risk geographic regions\n      if (location && this.isHighRiskLocation(location)) {\n        factors.push(\"high_risk_geographic_region\");\n        score += 0.3;\n      }\n\n      // Check for suspicious IP patterns\n      if (this.isSuspiciousIpAddress(ipAddress)) {\n        factors.push(\"suspicious_ip_pattern\");\n        score += 0.2;\n      }\n\n      return { score: Math.min(score, 1.0), factors };\n    } catch (error) {\n      logger.error(\"Geographic risk assessment failed\", {\n        userId,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n      return { score: 0.3, factors: [\"geographic_analysis_failed\"] };\n    }\n  }\n\n  /**\n   * Device risk assessment based on fingerprint and trust history\n   */\n  private async assessDeviceRisk(\n    userId: string,\n    deviceFingerprint: DeviceFingerprintData,\n  ): Promise<{ score: number; factors: string[] }> {\n    const factors: string[] = [];\n    let score = 0.0;\n\n    try {\n      // Check if device is known\n      const existingDevice = await storage.getDeviceFingerprint(\n        deviceFingerprint.hash,\n      );\n\n      if (!existingDevice) {\n        factors.push(\"new_device_detected\");\n        score += 0.4; // New devices are higher risk\n      } else {\n        // Assess existing device risk using trustScore (0.0 - 1.0, lower is riskier)\n        if (\n          existingDevice.trustScore !== null &&\n          existingDevice.trustScore !== undefined\n        ) {\n          // Invert trust score to get risk score (1.0 - trustScore)\n          const riskScore = 1.0 - existingDevice.trustScore;\n          score += riskScore * 0.5; // Weight the risk score\n        }\n\n        // Check if device is blocked\n        if (existingDevice.isBlocked) {\n          factors.push(\"device_blocked\");\n          score += 0.8;\n        }\n\n        // Low trust score is a risk factor\n        if (\n          existingDevice.trustScore !== null &&\n          existingDevice.trustScore < 0.3\n        ) {\n          factors.push(\"device_low_trust\");\n          score += 0.3;\n        }\n      }\n\n      // Validate device context for suspicious patterns\n      const deviceValidation = validateDeviceContext({\n        userAgent: deviceFingerprint.userAgent,\n        ipAddress: \"\", // IP is validated separately\n        screenResolution: deviceFingerprint.screenResolution,\n        timezone: deviceFingerprint.timezone,\n        language: deviceFingerprint.language,\n        platform: deviceFingerprint.platform,\n      });\n\n      if (!deviceValidation.isValid) {\n        factors.push(\n          ...deviceValidation.warnings.map(\n            (warning: string) => `device_${warning}`,\n          ),\n        );\n        score += deviceValidation.warnings.length * 0.1;\n      }\n\n      return { score: Math.min(score, 1.0), factors };\n    } catch (error) {\n      logger.error(\"Device risk assessment failed\", {\n        userId,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n      return { score: 0.4, factors: [\"device_analysis_failed\"] };\n    }\n  }\n\n  /**\n   * Behavioral risk assessment based on timing and access patterns\n   */\n  private async assessBehaviorRisk(\n    userId: string,\n    currentTime: Date,\n  ): Promise<{ score: number; factors: string[] }> {\n    const factors: string[] = [];\n    let score = 0.0;\n\n    try {\n      // Get recent activity patterns\n      const recentActivity = await storage.getAuthAuditLogs(userId, {\n        hours: 24,\n      });\n\n      if (recentActivity.length > 0) {\n        // Check for rapid successive attempts\n        const recentAttempts = recentActivity.filter(\n          (attempt) =>\n            attempt.createdAt &&\n            currentTime.getTime() - new Date(attempt.createdAt).getTime() <\n              60000, // 1 minute\n        );\n\n        if (recentAttempts.length > 3) {\n          factors.push(\"rapid_successive_attempts\");\n          score += 0.3;\n        }\n\n        // Check for unusual timing patterns (e.g., access at unusual hours)\n        const hour = currentTime.getHours();\n        const unusualHours = hour < 6 || hour > 23; // Very early morning or late night\n\n        if (unusualHours) {\n          // Check if this is normal for the user\n          const userUsualHours = recentActivity\n            .filter((activity): activity is typeof activity & { createdAt: Date | string } => \n              activity.createdAt != null\n            )\n            .map((activity) => new Date(activity.createdAt).getHours())\n            .filter((activityHour) => Math.abs(activityHour - hour) <= 2);\n\n          if (userUsualHours.length === 0) {\n            factors.push(\"unusual_access_time\");\n            score += 0.1;\n          }\n        }\n      }\n\n      return { score: Math.min(score, 1.0), factors };\n    } catch (error) {\n      logger.error(\"Behavioral risk assessment failed\", {\n        userId,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n      return { score: 0.2, factors: [\"behavior_analysis_failed\"] };\n    }\n  }\n\n  /**\n   * Detect suspicious activity patterns with enhanced anomaly detection\n   */\n  private async detectSuspiciousActivity(\n    userId: string,\n    deviceContext: DeviceContext,\n    ipAddress: string,\n  ): Promise<SuspiciousActivityFlags & { overallRisk: number }> {\n    const flags: SuspiciousActivityFlags = {\n      newDevice: false,\n      newLocation: false,\n      newIpRange: false,\n      suspiciousUserAgent: false,\n      rapidLocationChange: false,\n      multipleDevicesSimultaneous: false,\n      anomalousTimingPattern: false,\n      highRiskIpAddress: false,\n    };\n\n    try {\n      // Check for new device\n      const deviceFingerprint = generateDeviceFingerprint(deviceContext);\n      const existingDevice = await storage.getDeviceFingerprint(\n        deviceFingerprint.hash,\n      );\n      flags.newDevice = !existingDevice;\n\n      // Check for suspicious user agent patterns\n      flags.suspiciousUserAgent = this.isSuspiciousUserAgent(\n        deviceContext.userAgent,\n      );\n\n      // Check for high-risk IP address\n      flags.highRiskIpAddress = this.isSuspiciousIpAddress(ipAddress);\n\n      // Get recent activity for pattern analysis\n      const recentActivity = await storage.getAuthAuditLogs(userId, {\n        hours: 24,\n      });\n\n      if (recentActivity.length > 0) {\n        // Check for new location - parse from details JSON\n        const recentLocations = new Set(\n          recentActivity\n            .filter((activity) => activity.details)\n            .map((activity) => {\n              const details =\n                typeof activity.details === \"string\"\n                  ? JSON.parse(activity.details)\n                  : activity.details;\n              return details?.location;\n            })\n            .filter(Boolean),\n        );\n        flags.newLocation = deviceContext.location\n          ? !recentLocations.has(deviceContext.location)\n          : false;\n\n        // Check for new IP range (simplified - checks /24 subnet)\n        const currentIpPrefix = ipAddress.split(\".\").slice(0, 3).join(\".\");\n        const recentIpPrefixes = new Set(\n          recentActivity\n            .filter((activity): activity is typeof activity & { ipAddress: string } => \n              activity.ipAddress != null\n            )\n            .map((activity) =>\n              activity.ipAddress.split(\".\").slice(0, 3).join(\".\"),\n            ),\n        );\n        flags.newIpRange = !recentIpPrefixes.has(currentIpPrefix);\n\n        // Check for multiple devices active simultaneously\n        const recentDevices = new Set(\n          recentActivity\n            .filter(\n              (activity) =>\n                activity.createdAt &&\n                Date.now() - new Date(activity.createdAt).getTime() < 3600000,\n            ) // 1 hour\n            .filter(\n              (activity) =>\n                activity.details && typeof activity.details === \"object\",\n            )\n            .map((activity) => (activity.details as any)?.deviceFingerprint)\n            .filter(Boolean),\n        );\n        flags.multipleDevicesSimultaneous = recentDevices.size > 2;\n\n        // Check for rapid location changes\n        if (recentActivity.length >= 2) {\n          const lastDetails = recentActivity[0]?.details\n            ? typeof recentActivity[0].details === \"string\"\n              ? JSON.parse(recentActivity[0].details)\n              : recentActivity[0].details\n            : null;\n          const previousDetails = recentActivity[1]?.details\n            ? typeof recentActivity[1].details === \"string\"\n              ? JSON.parse(recentActivity[1].details)\n              : recentActivity[1].details\n            : null;\n          const lastLocation = lastDetails?.location;\n          const previousLocation = previousDetails?.location;\n          const lastTime = new Date(recentActivity[0]?.createdAt || 0);\n          const previousTime = new Date(recentActivity[1]?.createdAt || 0);\n\n          if (\n            lastLocation &&\n            previousLocation &&\n            lastLocation !== previousLocation\n          ) {\n            const timeElapsed =\n              (lastTime.getTime() - previousTime.getTime()) / (1000 * 60 * 60); // hours\n            flags.rapidLocationChange = timeElapsed < 1; // Less than 1 hour between different locations\n          }\n        }\n      }\n\n      // Calculate overall risk based on flags\n      const riskWeights = {\n        newDevice: 0.3,\n        newLocation: 0.2,\n        newIpRange: 0.1,\n        suspiciousUserAgent: 0.4,\n        rapidLocationChange: 0.5,\n        multipleDevicesSimultaneous: 0.3,\n        anomalousTimingPattern: 0.2,\n        highRiskIpAddress: 0.6,\n      };\n\n      const overallRisk = Object.entries(flags).reduce(\n        (risk, [flag, isActive]) => {\n          if (isActive && flag in riskWeights) {\n            return risk + riskWeights[flag as keyof typeof riskWeights];\n          }\n          return risk;\n        },\n        0.0,\n      );\n\n      return { ...flags, overallRisk: Math.min(overallRisk, 1.0) };\n    } catch (error) {\n      logger.error(\"Suspicious activity detection failed\", {\n        userId,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n\n      return { ...flags, overallRisk: 0.5 }; // Default medium risk on error\n    }\n  }\n\n  /**\n   * Calculate composite trust score based on device and user history\n   */\n  private async calculateTrustScore(\n    userId: string,\n    deviceHash: string,\n    historicalContext: any,\n  ): Promise<number> {\n    try {\n      let trustScore = 0.5; // Start with neutral trust\n\n      // Get device information\n      const device = await storage.getDeviceFingerprint(deviceHash);\n\n      if (device) {\n        // Use the existing trustScore from the device\n        if (device.trustScore !== null && device.trustScore !== undefined) {\n          trustScore = device.trustScore;\n        }\n\n        // Device age factor - devices seen longer ago are more trusted\n        if (device.firstSeen) {\n          const ageInDays =\n            (Date.now() - device.firstSeen.getTime()) / (1000 * 60 * 60 * 24);\n          if (ageInDays > 90) trustScore += 0.1;\n          else if (ageInDays > 30) trustScore += 0.05;\n        }\n\n        // Check if device is blocked\n        if (device.isBlocked) {\n          trustScore = Math.min(trustScore, 0.2); // Cap trust at 0.2 for blocked devices\n        }\n      }\n\n      // Account trust (user behavior)\n      if (historicalContext.accountAge > 90) trustScore += 0.1; // Account older than 90 days\n      if (historicalContext.mfaEnabled) trustScore += 0.2; // MFA is enabled\n      if (historicalContext.recentFailures < 3) trustScore += 0.1; // Low recent failures\n\n      return Math.min(Math.max(trustScore, 0.0), 1.0); // Clamp between 0 and 1\n    } catch (error) {\n      logger.error(\"Trust score calculation failed\", {\n        userId,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n      return 0.3; // Default low trust on error\n    }\n  }\n\n  /**\n   * Calculate composite risk score from multiple risk factors\n   */\n  private calculateCompositeRiskScore(risks: {\n    deviceRisk: number;\n    geographicRisk: number;\n    behaviorRisk: number;\n    suspiciousActivityWeight: number;\n  }): number {\n    // Weighted composite scoring\n    const weights = {\n      device: 0.3,\n      geographic: 0.25,\n      behavior: 0.2,\n      suspicious: 0.25,\n    };\n\n    const compositeScore =\n      risks.deviceRisk * weights.device +\n      risks.geographicRisk * weights.geographic +\n      risks.behaviorRisk * weights.behavior +\n      risks.suspiciousActivityWeight * weights.suspicious;\n\n    return Math.min(Math.max(compositeScore, 0.0), 1.0);\n  }\n\n  /**\n   * Determine risk level from composite risk score\n   */\n  private determineRiskLevel(\n    riskScore: number,\n  ): \"low\" | \"medium\" | \"high\" | \"critical\" {\n    if (riskScore >= 0.8) return \"critical\";\n    if (riskScore >= 0.6) return \"high\";\n    if (riskScore >= 0.3) return \"medium\";\n    return \"low\";\n  }\n\n  /**\n   * Get recommended security actions based on risk assessment\n   */\n  private getRecommendedActions(\n    riskLevel: \"low\" | \"medium\" | \"high\" | \"critical\",\n    riskFactors: string[],\n    suspiciousFlags: SuspiciousActivityFlags,\n  ): string[] {\n    const actions: string[] = [];\n\n    switch (riskLevel) {\n      case \"critical\":\n        actions.push(\n          \"terminate_session\",\n          \"require_mfa\",\n          \"notify_user\",\n          \"admin_review\",\n        );\n        break;\n      case \"high\":\n        actions.push(\"require_mfa\", \"limit_session_duration\", \"notify_user\");\n        break;\n      case \"medium\":\n        actions.push(\"require_mfa\", \"log_security_event\");\n        break;\n      case \"low\":\n        actions.push(\"log_security_event\");\n        break;\n    }\n\n    // Additional actions based on specific risks\n    if (suspiciousFlags.newDevice) actions.push(\"device_verification\");\n    if (suspiciousFlags.newLocation) actions.push(\"location_verification\");\n    if (suspiciousFlags.rapidLocationChange)\n      actions.push(\"impossible_travel_review\");\n    if (suspiciousFlags.multipleDevicesSimultaneous)\n      actions.push(\"concurrent_session_review\");\n\n    return Array.from(new Set(actions)); // Remove duplicates\n  }\n\n  /**\n   * Helper methods for risk assessment\n   */\n  private isHighRiskLocation(location: string): boolean {\n    // Extract country code (simplified - in production use proper geolocation)\n    const countryCode = location.split(\",\").pop()?.trim().toUpperCase();\n    return countryCode ? this.HIGH_RISK_COUNTRIES.has(countryCode) : false;\n  }\n\n  private isSuspiciousIpAddress(ipAddress: string): boolean {\n    return this.SUSPICIOUS_IP_PATTERNS.some((pattern) =>\n      pattern.test(ipAddress),\n    );\n  }\n\n  private isSuspiciousUserAgent(userAgent: string): boolean {\n    const suspiciousPatterns = [\n      /bot/i,\n      /crawler/i,\n      /spider/i,\n      /scraper/i,\n      /curl/i,\n      /wget/i,\n      /python/i,\n      /java/i,\n      /automated/i,\n      /test/i,\n    ];\n\n    return suspiciousPatterns.some((pattern) => pattern.test(userAgent));\n  }\n\n  private isPotentiallyImpossibleTravel(\n    location1: string,\n    location2: string,\n  ): boolean {\n    // Simplified impossible travel detection\n    // In production, use proper geographic distance calculation\n    const majorCities = [\n      \"New York\",\n      \"London\",\n      \"Tokyo\",\n      \"Sydney\",\n      \"Mumbai\",\n      \"São Paulo\",\n    ];\n\n    return (\n      majorCities.includes(location1) &&\n      majorCities.includes(location2) &&\n      location1 !== location2\n    );\n  }\n\n  private getSuspiciousActivityFactors(\n    flags: SuspiciousActivityFlags,\n  ): string[] {\n    const factors: string[] = [];\n\n    Object.entries(flags).forEach(([flag, isActive]) => {\n      if (isActive && flag !== \"overallRisk\") {\n        factors.push(flag);\n      }\n    });\n\n    return factors;\n  }\n\n  private async getHistoricalSecurityContext(userId: string): Promise<any> {\n    try {\n      // Get user account information\n      const user = await storage.getUser(userId);\n      const accountAge =\n        user && user.createdAt\n          ? Date.now() - new Date(user.createdAt).getTime()\n          : 0;\n\n      // Get MFA status\n      const mfaSettings = await storage.getUserMfaSettings(userId);\n      const mfaEnabled = mfaSettings?.enabled || false;\n\n      // Get recent failure count\n      const recentFailures = await storage.getRecentAuthFailures(userId, 24); // 24 hours\n\n      return {\n        accountAge,\n        mfaEnabled,\n        recentFailures: recentFailures.length,\n      };\n    } catch (error) {\n      logger.error(\"Failed to get historical security context\", {\n        userId,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n      return { accountAge: 0, mfaEnabled: false, recentFailures: 0 };\n    }\n  }\n\n  /**\n   * Log comprehensive security assessment for monitoring and analysis\n   */\n  private async logSecurityAssessment(\n    context: SessionSecurityContext,\n    assessment: SecurityRiskAssessment,\n    suspiciousFlags: SuspiciousActivityFlags,\n  ): Promise<void> {\n    try {\n      await storage.createAuthAuditLog({\n        userId: context.userId,\n        eventType: \"security_assessment\",\n        ipAddress: context.ipAddress,\n        userAgent: context.userAgent,\n        isSuccessful: !assessment.requiresAction,\n        failureReason: assessment.requiresAction\n          ? \"high_risk_detected\"\n          : undefined,\n        details: JSON.stringify({\n          location: context.location,\n          riskScore: assessment.riskScore,\n          riskLevel: assessment.riskLevel,\n          trustScore: assessment.trustScore,\n          riskFactors: assessment.riskFactors,\n          suspiciousFlags,\n          recommendedActions: assessment.recommendedActions,\n          sessionId: context.sessionId,\n        }),\n      });\n\n      // Log high-risk events with additional detail\n      if (\n        assessment.riskLevel === \"high\" ||\n        assessment.riskLevel === \"critical\"\n      ) {\n        logger.warn(\"High-risk session security event detected\", {\n          userId: context.userId,\n          riskLevel: assessment.riskLevel,\n          riskScore: assessment.riskScore,\n          suspiciousFlags,\n          ipAddress: context.ipAddress?.substring(0, 8) + \"***\",\n        });\n      }\n    } catch (error) {\n      logger.error(\"Failed to log security assessment\", {\n        userId: context.userId,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  }\n}\n\n/**\n * Enhanced Session Management with Security Integration\n * Provides session lifecycle management with integrated security assessment\n */\nexport class EnhancedSessionManager {\n  private securityService: SessionSecurityService;\n\n  constructor() {\n    this.securityService = SessionSecurityService.getInstance();\n  }\n\n  /**\n   * Validate session with comprehensive security assessment\n   */\n  async validateSessionSecurity(\n    userId: string,\n    sessionId: string,\n    request: {\n      headers: Record<string, string | string[] | undefined>;\n      ip: string;\n    },\n  ): Promise<{\n    isValid: boolean;\n    assessment: SecurityRiskAssessment;\n    actions: string[];\n  }> {\n    try {\n      // Extract device context from request\n      const deviceContext = extractDeviceContext(request.headers, request.ip);\n\n      // Create security context\n      const securityContext: SessionSecurityContext = {\n        userId,\n        sessionId,\n        ipAddress: request.ip,\n        userAgent: deviceContext.userAgent,\n        deviceContext,\n        location: deviceContext.location,\n        timestamp: new Date(),\n      };\n\n      // Perform comprehensive security assessment\n      const assessment =\n        await this.securityService.assessSessionSecurity(securityContext);\n\n      // Determine if session should be allowed to continue\n      const isValid = assessment.riskLevel !== \"critical\";\n\n      // Execute recommended security actions\n      const executedActions = await this.executeSecurityActions(\n        userId,\n        sessionId,\n        assessment.recommendedActions,\n        securityContext,\n      );\n\n      return {\n        isValid,\n        assessment,\n        actions: executedActions,\n      };\n    } catch (error) {\n      logger.error(\"Session security validation failed\", {\n        userId,\n        sessionId,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n\n      // Fail-safe: deny access on security validation failure\n      return {\n        isValid: false,\n        assessment: {\n          riskScore: 1.0,\n          riskFactors: [\"security_validation_failed\"],\n          trustScore: 0.0,\n          riskLevel: \"critical\",\n          requiresAction: true,\n          recommendedActions: [\"terminate_session\"],\n        },\n        actions: [\"terminate_session\"],\n      };\n    }\n  }\n\n  /**\n   * Execute security actions based on risk assessment\n   */\n  private async executeSecurityActions(\n    userId: string,\n    sessionId: string,\n    actions: string[],\n    context: SessionSecurityContext,\n  ): Promise<string[]> {\n    const executedActions: string[] = [];\n\n    try {\n      for (const action of actions) {\n        switch (action) {\n          case \"terminate_session\":\n            await this.terminateSession(userId, sessionId);\n            executedActions.push(\"session_terminated\");\n            break;\n\n          case \"require_mfa\":\n            // MFA requirement would be handled by middleware\n            executedActions.push(\"mfa_required\");\n            break;\n\n          case \"limit_session_duration\":\n            await this.limitSessionDuration(userId, sessionId);\n            executedActions.push(\"session_duration_limited\");\n            break;\n\n          case \"notify_user\":\n            await this.notifyUserOfSecurityEvent(userId, context);\n            executedActions.push(\"user_notified\");\n            break;\n\n          case \"device_verification\":\n            await this.requestDeviceVerification(userId, context);\n            executedActions.push(\"device_verification_requested\");\n            break;\n\n          case \"log_security_event\":\n            // Already logged in security assessment\n            executedActions.push(\"security_event_logged\");\n            break;\n\n          default:\n            logger.warn(\"Unknown security action requested\", {\n              action,\n              userId,\n            });\n        }\n      }\n    } catch (error) {\n      logger.error(\"Failed to execute security actions\", {\n        userId,\n        sessionId,\n        actions,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n\n    return executedActions;\n  }\n\n  /**\n   * Terminate session due to security concerns\n   */\n  private async terminateSession(\n    userId: string,\n    sessionId: string,\n  ): Promise<void> {\n    try {\n      // Revoke any associated JWT tokens\n      // Note: This would need to be integrated with the specific session implementation\n      logger.warn(\"Session terminated due to security concerns\", {\n        userId,\n        sessionId,\n      });\n\n      // Log the termination\n      await storage.createAuthAuditLog({\n        userId,\n        eventType: \"session_terminated\",\n        isSuccessful: true,\n        failureReason: \"security_policy\",\n        details: JSON.stringify({ sessionId, reason: \"high_security_risk\" }),\n      });\n    } catch (error) {\n      logger.error(\"Failed to terminate session\", {\n        userId,\n        sessionId,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  }\n\n  /**\n   * Limit session duration for security reasons\n   */\n  private async limitSessionDuration(\n    userId: string,\n    sessionId: string,\n  ): Promise<void> {\n    try {\n      // Implementation would depend on session storage mechanism\n      logger.info(\"Session duration limited due to security assessment\", {\n        userId,\n        sessionId,\n      });\n    } catch (error) {\n      logger.error(\"Failed to limit session duration\", {\n        userId,\n        sessionId,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  }\n\n  /**\n   * Notify user of security event\n   */\n  private async notifyUserOfSecurityEvent(\n    userId: string,\n    context: SessionSecurityContext,\n  ): Promise<void> {\n    try {\n      await storage.createNotification({\n        userId,\n        type: \"system\",\n        title: \"Security Alert\",\n        message:\n          \"Unusual activity detected on your account. Please review your recent activity.\",\n        priority: \"high\",\n        data: JSON.stringify({\n          ipAddress: context.ipAddress?.substring(0, 8) + \"***\",\n          location: context.location,\n          timestamp: context.timestamp.toISOString(),\n        }),\n      });\n\n      logger.info(\"Security notification sent to user\", { userId });\n    } catch (error) {\n      logger.error(\"Failed to notify user of security event\", {\n        userId,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  }\n\n  /**\n   * Request additional device verification\n   */\n  private async requestDeviceVerification(\n    userId: string,\n    context: SessionSecurityContext,\n  ): Promise<void> {\n    try {\n      // This would trigger additional verification flow\n      logger.info(\"Device verification requested\", { userId });\n\n      await storage.createAuthAuditLog({\n        userId,\n        eventType: \"device_verification_requested\",\n        ipAddress: context.ipAddress,\n        userAgent: context.userAgent,\n        isSuccessful: true,\n        details: JSON.stringify({\n          location: context.location,\n          reason: \"new_device_detected\",\n        }),\n      });\n    } catch (error) {\n      logger.error(\"Failed to request device verification\", {\n        userId,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  }\n}\n\n// Export singleton instances\nexport const sessionSecurityService = SessionSecurityService.getInstance();\nexport const enhancedSessionManager = new EnhancedSessionManager();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/auth/tokens.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":306,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":306,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7988,7991],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7988,7991],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * JWT Token Management\n *\n * Handles generation and verification of various JWT tokens used throughout the application.\n * Implements secure token practices with proper validation.\n */\n\nimport { SignJWT, jwtVerify } from \"jose\";\nimport { nanoid } from \"nanoid\";\nimport { logger } from \"../logger\";\nimport { isSecureToken } from \"../utils/security.utils\";\n\nconst JWT_SECRET = new TextEncoder().encode(\n  process.env.AUTH_SECRET ||\n    \"your-secure-secret-key-at-least-32-characters-long\",\n);\n\n// Token expiry constants (in seconds)\nexport const TOKEN_EXPIRY = {\n  ACCESS_TOKEN: 15 * 60, // 15 minutes\n  REFRESH_TOKEN: 7 * 24 * 60 * 60, // 7 days\n  EMAIL_VERIFICATION: 24 * 60 * 60, // 24 hours\n  PASSWORD_RESET: 60 * 60, // 1 hour\n} as const;\n\ninterface TokenPayload {\n  sub: string; // user ID\n  email?: string;\n  jti: string; // token ID\n  iat: number;\n  exp: number;\n}\n\n/**\n * Generate email verification JWT\n */\nexport async function generateEmailVerificationJWT(\n  userId: string,\n  email: string,\n  expirySeconds: number = TOKEN_EXPIRY.EMAIL_VERIFICATION,\n): Promise<string> {\n  if (!userId || !email) {\n    throw new Error(\n      \"User ID and email are required for email verification token\",\n    );\n  }\n\n  const tokenId = nanoid();\n  const now = Math.floor(Date.now() / 1000);\n\n  try {\n    const token = await new SignJWT({\n      sub: userId,\n      email: email.toLowerCase().trim(),\n      jti: tokenId,\n      type: \"email_verification\",\n    })\n      .setProtectedHeader({ alg: \"HS256\" })\n      .setIssuedAt(now)\n      .setExpirationTime(now + expirySeconds)\n      .sign(JWT_SECRET);\n\n    logger.info(\"Generated email verification token\", { userId, tokenId });\n    return token;\n  } catch (error) {\n    logger.error(\"Failed to generate email verification token\", {\n      userId,\n      error,\n    });\n    throw new Error(\"Failed to generate email verification token\");\n  }\n}\n\n/**\n * Verify email verification JWT\n */\nexport async function verifyEmailVerificationJWT(token: string): Promise<{\n  valid: boolean;\n  payload?: TokenPayload & { type: string; email: string };\n  error?: string;\n}> {\n  if (!token || typeof token !== \"string\") {\n    return { valid: false, error: \"Invalid token format\" };\n  }\n\n  // Basic token security validation\n  if (!isSecureToken(token.replace(/^Bearer\\s+/i, \"\"))) {\n    logger.warn(\"Potentially insecure token detected in email verification\");\n  }\n\n  try {\n    const { payload } = await jwtVerify(token, JWT_SECRET);\n\n    if (payload.type !== \"email_verification\") {\n      return { valid: false, error: \"Invalid token type\" };\n    }\n\n    return {\n      valid: true,\n      payload: payload as unknown as TokenPayload & {\n        type: string;\n        email: string;\n      },\n    };\n  } catch (error) {\n    logger.error(\"Failed to verify email verification token\", { error });\n    return { valid: false, error: \"Token verification failed\" };\n  }\n}\n\n/**\n * Generate access token JWT\n */\nexport async function generateAccessTokenJWT(\n  userId: string,\n  email: string,\n  expirySeconds: number = TOKEN_EXPIRY.ACCESS_TOKEN,\n): Promise<string> {\n  if (!userId || !email) {\n    throw new Error(\"User ID and email are required for access token\");\n  }\n\n  const tokenId = nanoid();\n  const now = Math.floor(Date.now() / 1000);\n\n  try {\n    const token = await new SignJWT({\n      sub: userId,\n      email: email.toLowerCase().trim(),\n      jti: tokenId,\n      type: \"access_token\",\n    })\n      .setProtectedHeader({ alg: \"HS256\" })\n      .setIssuedAt(now)\n      .setExpirationTime(now + expirySeconds)\n      .sign(JWT_SECRET);\n\n    logger.info(\"Generated access token\", { userId, tokenId });\n    return token;\n  } catch (error) {\n    logger.error(\"Failed to generate access token\", { userId, error });\n    throw new Error(\"Failed to generate access token\");\n  }\n}\n\n/**\n * Generate refresh token JWT\n */\nexport async function generateRefreshTokenJWT(\n  userId: string,\n  email: string,\n  tokenId: string,\n  expirySeconds: number = TOKEN_EXPIRY.REFRESH_TOKEN,\n): Promise<string> {\n  if (!userId || !email || !tokenId) {\n    throw new Error(\n      \"User ID, email, and token ID are required for refresh token\",\n    );\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n\n  try {\n    const token = await new SignJWT({\n      sub: userId,\n      email: email.toLowerCase().trim(),\n      jti: tokenId,\n      type: \"refresh_token\",\n    })\n      .setProtectedHeader({ alg: \"HS256\" })\n      .setIssuedAt(now)\n      .setExpirationTime(now + expirySeconds)\n      .sign(JWT_SECRET);\n\n    logger.info(\"Generated refresh token\", { userId, tokenId });\n    return token;\n  } catch (error) {\n    logger.error(\"Failed to generate refresh token\", { userId, error });\n    throw new Error(\"Failed to generate refresh token\");\n  }\n}\n\n/**\n * Verify refresh token JWT\n */\nexport async function verifyRefreshTokenJWT(token: string): Promise<{\n  valid: boolean;\n  payload?: TokenPayload & { type: string; email: string };\n  error?: string;\n}> {\n  if (!token || typeof token !== \"string\") {\n    return { valid: false, error: \"Invalid token format\" };\n  }\n\n  // Basic token security validation\n  if (!isSecureToken(token.replace(/^Bearer\\s+/i, \"\"))) {\n    logger.warn(\n      \"Potentially insecure token detected in refresh token verification\",\n    );\n  }\n\n  try {\n    const { payload } = await jwtVerify(token, JWT_SECRET);\n\n    if (payload.type !== \"refresh_token\") {\n      return { valid: false, error: \"Invalid token type\" };\n    }\n\n    return {\n      valid: true,\n      payload: payload as unknown as TokenPayload & {\n        type: string;\n        email: string;\n      },\n    };\n  } catch (error) {\n    logger.error(\"Failed to verify refresh token\", { error });\n    return { valid: false, error: \"Token verification failed\" };\n  }\n}\n\n/**\n * Generate refresh token ID\n */\nexport function generateRefreshTokenId(): string {\n  return nanoid(32); // Generate a secure 32-character ID\n}\n\n/**\n * Generate password reset JWT\n */\nexport async function generatePasswordResetJWT(\n  userId: string,\n  email: string,\n  expirySeconds: number = TOKEN_EXPIRY.PASSWORD_RESET,\n): Promise<string> {\n  if (!userId || !email) {\n    throw new Error(\"User ID and email are required for password reset token\");\n  }\n\n  const tokenId = nanoid();\n  const now = Math.floor(Date.now() / 1000);\n\n  try {\n    const token = await new SignJWT({\n      sub: userId,\n      email: email.toLowerCase().trim(),\n      jti: tokenId,\n      type: \"password_reset\",\n    })\n      .setProtectedHeader({ alg: \"HS256\" })\n      .setIssuedAt(now)\n      .setExpirationTime(now + expirySeconds)\n      .sign(JWT_SECRET);\n\n    logger.info(\"Generated password reset token\", { userId, tokenId });\n    return token;\n  } catch (error) {\n    logger.error(\"Failed to generate password reset token\", { userId, error });\n    throw new Error(\"Failed to generate password reset token\");\n  }\n}\n\n/**\n * Verify password reset JWT\n */\nexport async function verifyPasswordResetJWT(token: string): Promise<{\n  valid: boolean;\n  payload?: TokenPayload & { type: string; email: string };\n  error?: string;\n}> {\n  if (!token || typeof token !== \"string\") {\n    return { valid: false, error: \"Invalid token format\" };\n  }\n\n  // Basic token security validation\n  if (!isSecureToken(token.replace(/^Bearer\\s+/i, \"\"))) {\n    logger.warn(\n      \"Potentially insecure token detected in password reset verification\",\n    );\n  }\n\n  try {\n    const { payload } = await jwtVerify(token, JWT_SECRET);\n\n    if (payload.type !== \"password_reset\") {\n      return { valid: false, error: \"Invalid token type\" };\n    }\n\n    return {\n      valid: true,\n      payload: payload as unknown as TokenPayload & {\n        type: string;\n        email: string;\n      },\n    };\n  } catch (error) {\n    logger.error(\"Failed to verify password reset token\", { error });\n    return { valid: false, error: \"Token verification failed\" };\n  }\n}\n\n/**\n * Validate token security (additional validation beyond basic checks)\n */\nexport function validateTokenSecurity(tokenId: string, payload: any): boolean {\n  if (!tokenId || !isSecureToken(tokenId)) {\n    logger.warn(\"Invalid token ID format detected\", { tokenId });\n    return false;\n  }\n\n  // Check for token age (not too old)\n  const now = Math.floor(Date.now() / 1000);\n  const tokenAge = now - payload.iat;\n\n  // Warn if token is very old (but still valid)\n  if (tokenAge > TOKEN_EXPIRY.REFRESH_TOKEN) {\n    logger.warn(\"Very old token detected\", { tokenId, age: tokenAge });\n  }\n\n  return true;\n}\n\n/**\n * Verify access token JWT (referenced in auth middleware)\n */\nexport async function verifyAccessTokenJWT(\n  token: string,\n  options?: {\n    checkSecurity?: boolean;\n  },\n): Promise<{\n  valid: boolean;\n  payload?: TokenPayload & { type: string; email: string };\n  error?: string;\n  securityWarnings?: string[];\n}> {\n  if (!token || typeof token !== \"string\") {\n    return { valid: false, error: \"Invalid token format\" };\n  }\n\n  const securityWarnings: string[] = [];\n\n  // Basic token security validation\n  if (!isSecureToken(token.replace(/^Bearer\\s+/i, \"\"))) {\n    securityWarnings.push(\"Potentially insecure token format detected\");\n  }\n\n  try {\n    const { payload } = await jwtVerify(token, JWT_SECRET);\n\n    if (payload.type !== \"access_token\") {\n      return { valid: false, error: \"Invalid token type\" };\n    }\n\n    // Additional security checks if requested\n    if (options?.checkSecurity) {\n      const isSecure = validateTokenSecurity(payload.jti as string, payload);\n      if (!isSecure) {\n        securityWarnings.push(\"Token failed security validation\");\n      }\n    }\n\n    return {\n      valid: true,\n      payload: payload as unknown as TokenPayload & {\n        type: string;\n        email: string;\n      },\n      securityWarnings:\n        securityWarnings.length > 0 ? securityWarnings : undefined,\n    };\n  } catch (error) {\n    logger.error(\"Failed to verify access token\", { error });\n    return { valid: false, error: \"Token verification failed\" };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/email-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[944,947],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[944,947],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MailService } from \"@sendgrid/mail\";\nimport { logger } from \"./logger\";\n\nconst SENDGRID_API_KEY = process.env.SENDGRID_API_KEY;\nconst SENDGRID_SENDER =\n  process.env.SENDGRID_SENDER || \"noreply@shuffleandsync.com\";\n\n// Make SendGrid optional - log warning instead of throwing error\nlet mailService: MailService | null = null;\nif (!SENDGRID_API_KEY) {\n  logger.warn(\n    \"SENDGRID_API_KEY environment variable not set - email functionality will be disabled\",\n  );\n} else {\n  mailService = new MailService();\n  mailService.setApiKey(SENDGRID_API_KEY);\n}\n\ninterface EmailParams {\n  to: string;\n  from: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  if (!mailService) {\n    logger.warn(\"Cannot send email - SendGrid not configured\", {\n      to: params.to,\n      subject: params.subject,\n    });\n    return false;\n  }\n\n  try {\n    const emailData: any = {\n      to: params.to,\n      from: params.from,\n      subject: params.subject,\n    };\n\n    if (params.text) emailData.text = params.text;\n    if (params.html) emailData.html = params.html;\n\n    await mailService.send(emailData);\n    return true;\n  } catch (error) {\n    logger.error(\"Failed to send email via SendGrid\", error, {\n      to: params.to,\n      subject: params.subject,\n    });\n    return false;\n  }\n}\n\nexport async function sendPasswordResetEmail(\n  email: string,\n  resetToken: string,\n  baseUrl: string,\n  firstName?: string,\n): Promise<boolean> {\n  const resetUrl = `${baseUrl}/reset-password?token=${resetToken}`;\n  const displayName = firstName || \"there\";\n\n  const emailParams: EmailParams = {\n    to: email,\n    from: SENDGRID_SENDER,\n    subject: \"Reset Your Password - Shuffle & Sync\",\n    text: `\nHello ${displayName},\n\nYou requested a password reset for your Shuffle & Sync account.\n\nClick the link below to reset your password:\n${resetUrl}\n\nThis link will expire in 1 hour.\n\nIf you didn't request this password reset, please ignore this email.\n\nBest regards,\nThe Shuffle & Sync Team\n    `,\n    html: `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>Reset Your Password</title>\n  <style>\n    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n    .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n    .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px 8px 0 0; }\n    .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 8px 8px; }\n    .button { display: inline-block; background: #667eea; color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; margin: 20px 0; }\n    .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"header\">\n      <h1>🎮 Shuffle & Sync</h1>\n    </div>\n    <div class=\"content\">\n      <h2>👋 Hey ${displayName}!</h2>\n      <h3>Reset Your Password</h3>\n      <p>You requested a password reset for your Shuffle & Sync account.</p>\n      <p>Click the button below to reset your password:</p>\n      <a href=\"${resetUrl}\" class=\"button\">Reset Password</a>\n      <p><strong>This link will expire in 1 hour.</strong></p>\n      <p>If you didn't request this password reset, please ignore this email.</p>\n      <div class=\"footer\">\n        <p>Best regards,<br>The Shuffle & Sync Team</p>\n      </div>\n    </div>\n  </div>\n</body>\n</html>\n    `,\n  };\n\n  return await sendEmail(emailParams);\n}\n\n/**\n * Send email verification email to user\n */\nexport async function sendEmailVerificationEmail(\n  email: string,\n  verificationToken: string,\n  baseUrl: string,\n  userName?: string,\n): Promise<boolean> {\n  const verificationUrl = `${baseUrl}/auth/verify-email?token=${verificationToken}`;\n  const displayName = userName || \"there\";\n\n  const emailParams: EmailParams = {\n    to: email,\n    from: SENDGRID_SENDER,\n    subject: \"Verify Your Email - Shuffle & Sync\",\n    text: `\nHello ${displayName},\n\nWelcome to Shuffle & Sync! Please verify your email address to complete your account setup.\n\nClick the link below to verify your email:\n${verificationUrl}\n\nThis link will expire in 24 hours.\n\nIf you didn't create this account, please ignore this email.\n\nBest regards,\nThe Shuffle & Sync Team\n    `,\n    html: `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>Verify Your Email</title>\n  <style>\n    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n    .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n    .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px 8px 0 0; text-align: center; }\n    .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 8px 8px; }\n    .button { display: inline-block; background: #28a745; color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; margin: 20px 0; font-weight: bold; }\n    .button:hover { background: #218838; }\n    .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }\n    .warning { background: #fff3cd; padding: 15px; border-left: 4px solid #ffc107; margin: 20px 0; border-radius: 4px; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"header\">\n      <h1>🎮 Shuffle & Sync</h1>\n      <p style=\"margin: 0; font-size: 18px;\">Trading Card Game Community</p>\n    </div>\n    <div class=\"content\">\n      <h2>Welcome, ${displayName}!</h2>\n      <p>Thank you for joining Shuffle & Sync, the premier platform for trading card game streamers and content creators.</p>\n      <p>To complete your account setup and start connecting with the TCG community, please verify your email address:</p>\n      <div style=\"text-align: center;\">\n        <a href=\"${verificationUrl}\" class=\"button\">Verify Email Address</a>\n      </div>\n      <div class=\"warning\">\n        <strong>⏰ Important:</strong> This verification link will expire in 24 hours.\n      </div>\n      <p>Once verified, you'll be able to:</p>\n      <ul>\n        <li>🃏 Join your favorite TCG communities (MTG, Pokemon, Lorcana, Yu-Gi-Oh, and more)</li>\n        <li>📺 Coordinate collaborative streams with other creators</li>\n        <li>🎯 Participate in tournaments and community events</li>\n        <li>💬 Connect with fellow streamers and content creators</li>\n      </ul>\n      <p>If you didn't create this account, please ignore this email.</p>\n      <div class=\"footer\">\n        <p>Best regards,<br>The Shuffle & Sync Team</p>\n        <p><small>If the button doesn't work, copy and paste this link into your browser:<br>${verificationUrl}</small></p>\n      </div>\n    </div>\n  </div>\n</body>\n</html>\n    `,\n  };\n\n  return await sendEmail(emailParams);\n}\n\n/**\n * Send email verification reminder (for users who haven't verified after some time)\n */\nexport async function sendEmailVerificationReminder(\n  email: string,\n  verificationToken: string,\n  baseUrl: string,\n  userName?: string,\n): Promise<boolean> {\n  const verificationUrl = `${baseUrl}/auth/verify-email?token=${verificationToken}`;\n  const displayName = userName || \"there\";\n\n  const emailParams: EmailParams = {\n    to: email,\n    from: SENDGRID_SENDER,\n    subject: \"Reminder: Verify Your Email - Shuffle & Sync\",\n    text: `\nHello ${displayName},\n\nThis is a friendly reminder to verify your email address for your Shuffle & Sync account.\n\nClick the link below to verify your email:\n${verificationUrl}\n\nThis link will expire in 24 hours.\n\nIf you're having trouble or didn't create this account, please contact our support team.\n\nBest regards,\nThe Shuffle & Sync Team\n    `,\n    html: `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>Email Verification Reminder</title>\n  <style>\n    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n    .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n    .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px 8px 0 0; text-align: center; }\n    .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 8px 8px; }\n    .button { display: inline-block; background: #ffc107; color: #212529; padding: 12px 30px; text-decoration: none; border-radius: 6px; margin: 20px 0; font-weight: bold; }\n    .button:hover { background: #e0a800; }\n    .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }\n    .reminder { background: #d4edda; padding: 15px; border-left: 4px solid #28a745; margin: 20px 0; border-radius: 4px; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"header\">\n      <h1>🎮 Shuffle & Sync</h1>\n      <p style=\"margin: 0; font-size: 18px;\">Trading Card Game Community</p>\n    </div>\n    <div class=\"content\">\n      <h2>👋 Hey ${displayName}!</h2>\n      <div class=\"reminder\">\n        <strong>🔔 Friendly Reminder:</strong> Your email address is still waiting to be verified.\n      </div>\n      <p>We're excited to have you join our trading card game community! To unlock all features and start connecting with fellow streamers, please verify your email address:</p>\n      <div style=\"text-align: center;\">\n        <a href=\"${verificationUrl}\" class=\"button\">Verify Email Now</a>\n      </div>\n      <p>Once verified, you'll gain full access to our platform features and the TCG streaming community.</p>\n      <p>If you're having trouble or need assistance, feel free to reach out to our support team.</p>\n      <div class=\"footer\">\n        <p>Best regards,<br>The Shuffle & Sync Team</p>\n        <p><small>If the button doesn't work, copy and paste this link into your browser:<br>${verificationUrl}</small></p>\n      </div>\n    </div>\n  </div>\n</body>\n</html>\n    `,\n  };\n\n  return await sendEmail(emailParams);\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/email.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/env-validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/auth/auth.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/auth/auth.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ForgotPasswordRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ResetPasswordRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuthenticatedUser' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[440,443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[440,443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { randomBytes } from \"crypto\";\nimport { storage } from \"../../storage\";\nimport { sendPasswordResetEmail } from \"../../email-service\";\nimport { logger } from \"../../logger\";\nimport type {\n  ForgotPasswordRequest,\n  ResetPasswordRequest,\n  AuthenticatedUser,\n} from \"./auth.types\";\nimport type { User } from \"@shared/schema\";\n\nexport class AuthService {\n  async getCurrentUser(\n    userId: string,\n  ): Promise<(User & { communities?: any[] }) | null> {\n    try {\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return null;\n      }\n\n      // Get user's communities\n      const userCommunities = await storage.getUserCommunities(userId);\n\n      return {\n        ...user,\n        communities: userCommunities,\n      };\n    } catch (error) {\n      logger.error(\"Failed to fetch user in AuthService\", error, { userId });\n      throw error;\n    }\n  }\n\n  async requestPasswordReset(email: string, baseUrl: string): Promise<void> {\n    try {\n      // Check if user exists (we check this for security but don't reveal it)\n      const userExists = await storage.getUserByEmail(email);\n\n      // Always return success to prevent email enumeration attacks\n      const token = randomBytes(32).toString(\"hex\");\n      const expiresAt = new Date(Date.now() + 60 * 60 * 1000); // 1 hour\n\n      if (userExists) {\n        // Create password reset token\n        await storage.createPasswordResetToken({\n          userId: userExists.id,\n          token,\n          expiresAt,\n        });\n\n        // Send email\n        await sendPasswordResetEmail(email, token, baseUrl);\n      }\n\n      logger.info(\"Password reset requested\", {\n        email: email.substring(0, 3) + \"***\",\n      });\n    } catch (error) {\n      logger.error(\n        \"Failed to process forgot password request in AuthService\",\n        error,\n        { email },\n      );\n      throw error;\n    }\n  }\n\n  async verifyResetToken(token: string): Promise<{ email: string } | null> {\n    try {\n      const resetToken = await storage.getPasswordResetToken(token);\n\n      if (!resetToken) {\n        return null;\n      }\n\n      // Get user email from userId\n      const user = await storage.getUser(resetToken.userId);\n      if (!user || !user.email) {\n        return null;\n      }\n\n      return { email: user.email };\n    } catch (error) {\n      logger.error(\"Failed to verify reset token in AuthService\", error, {\n        token: token.substring(0, 8) + \"***\",\n      });\n      throw error;\n    }\n  }\n\n  async resetPassword(token: string, newPassword: string): Promise<boolean> {\n    try {\n      if (newPassword.length < 8) {\n        throw new Error(\"Password must be at least 8 characters long\");\n      }\n\n      const resetToken = await storage.getPasswordResetToken(token);\n\n      if (!resetToken) {\n        return false;\n      }\n\n      // Mark token as used\n      await storage.markTokenAsUsed(token);\n\n      // Get user email for logging\n      const user = await storage.getUser(resetToken.userId);\n      const emailForLog =\n        user && user.email ? user.email.substring(0, 3) + \"***\" : \"unknown\";\n\n      // Password updates are handled by Auth.js credential provider\n      // Token cleanup ensures one-time use security\n\n      logger.info(\"Password reset successful\", { email: emailForLog });\n      return true;\n    } catch (error) {\n      logger.error(\"Failed to reset password in AuthService\", error, {\n        token: token.substring(0, 8) + \"***\",\n      });\n      throw error;\n    }\n  }\n}\n\nexport const authService = new AuthService();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/auth/auth.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[386,389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[386,389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ForgotPasswordRequest {\n  email: string;\n}\n\nexport interface ResetPasswordRequest {\n  token: string;\n  newPassword: string;\n}\n\nexport interface PasswordResetToken {\n  email: string;\n  token: string;\n  expiresAt: Date;\n}\n\nexport interface AuthenticatedUser {\n  id: string;\n  email: string | null;\n  firstName?: string | null;\n  lastName?: string | null;\n  communities?: any[];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/cards/cards.routes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[749,752],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[749,752],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Card Recognition Routes (Legacy - Deprecated)\n *\n * API endpoints for Magic: The Gathering card recognition and lookup\n *\n * DEPRECATED: These endpoints are maintained for backward compatibility.\n * New integrations should use /api/games/:game_id/cards/* endpoints instead.\n */\n\nimport { Router } from \"express\";\nimport { z } from \"zod\";\nimport { universalCardService } from \"../../services/card-recognition/index\";\nimport { cardRecognitionService } from \"../../services/card-recognition\";\nimport { logger } from \"../../logger\";\n\nconst router = Router();\n\n// Default game ID for backward compatibility (MTG Official)\nconst DEFAULT_GAME_ID = \"mtg-official\";\n\n/**\n * Add deprecation warning to response\n */\nfunction addDeprecationWarning(data: any) {\n  return {\n    ...data,\n    _deprecated: {\n      message:\n        \"This endpoint is deprecated. Please use /api/games/:game_id/cards/* endpoints instead.\",\n      migrationGuide: \"https://docs.shuffleandsync.org/api/migration-guide\",\n      newEndpoint: `/api/games/${DEFAULT_GAME_ID}/cards/`,\n    },\n  };\n}\n\n// Validation schemas\nconst searchCardsSchema = z.object({\n  q: z.string().min(1).max(200),\n  set: z.string().max(10).optional(),\n  format: z\n    .enum([\n      \"standard\",\n      \"modern\",\n      \"commander\",\n      \"legacy\",\n      \"vintage\",\n      \"pioneer\",\n      \"pauper\",\n    ])\n    .optional(),\n  page: z.coerce.number().int().min(1).max(100).default(1),\n  limit: z.coerce.number().int().min(1).max(100).default(20),\n});\n\nconst getCardByNameSchema = z.object({\n  exact: z.string().min(1).max(200).optional(),\n  fuzzy: z.string().min(1).max(200).optional(),\n  set: z.string().max(10).optional(),\n});\n\nconst autocompleteSchema = z.object({\n  q: z.string().min(2).max(100),\n  limit: z.coerce.number().int().min(1).max(20).default(10),\n});\n\nconst randomCardSchema = z.object({\n  set: z.string().max(10).optional(),\n  format: z\n    .enum([\n      \"standard\",\n      \"modern\",\n      \"commander\",\n      \"legacy\",\n      \"vintage\",\n      \"pioneer\",\n      \"pauper\",\n    ])\n    .optional(),\n});\n\n/**\n * Search for cards\n * GET /api/cards/search?q=lightning+bolt&set=lea&format=modern&page=1&limit=20\n *\n * DEPRECATED: Use /api/games/:game_id/cards/search instead\n */\nrouter.get(\"/search\", async (req, res) => {\n  try {\n    const params = searchCardsSchema.parse(req.query);\n\n    logger.info(\"Legacy card search request (deprecated)\", {\n      query: params.q,\n      set: params.set,\n      format: params.format,\n    });\n\n    // Internally redirect to MTG game using Universal Card Service\n    const result = await universalCardService.searchCards(\n      DEFAULT_GAME_ID,\n      params.q,\n      {\n        set: params.set,\n        format: params.format,\n        page: params.page,\n        limit: params.limit,\n      },\n    );\n\n    return res.json(addDeprecationWarning(result));\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        message: \"Invalid request parameters\",\n        errors: error.errors,\n      });\n    }\n\n    logger.error(\"Error searching cards\", error);\n    return res.status(500).json({ message: \"Failed to search cards\" });\n  }\n});\n\n/**\n * Get card by ID\n * GET /api/cards/:id\n *\n * DEPRECATED: Use /api/games/:game_id/cards/:id instead\n */\nrouter.get(\"/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    if (!id || id.length < 10) {\n      return res.status(400).json({ message: \"Invalid card ID\" });\n    }\n\n    logger.info(\"Legacy get card by ID request (deprecated)\", { id });\n\n    // Internally redirect to MTG game using Universal Card Service\n    const card = await universalCardService.getCardById(DEFAULT_GAME_ID, id);\n\n    if (!card) {\n      return res.status(404).json({ message: \"Card not found\" });\n    }\n\n    return res.json(addDeprecationWarning(card));\n  } catch (error) {\n    logger.error(\"Error fetching card by ID\", error, { id: req.params.id });\n    return res.status(500).json({ message: \"Failed to fetch card\" });\n  }\n});\n\n/**\n * Get card by exact or fuzzy name\n * GET /api/cards/named?exact=Lightning+Bolt\n * GET /api/cards/named?fuzzy=bolt&set=lea\n *\n * DEPRECATED: Use /api/games/:game_id/cards/named instead\n */\nrouter.get(\"/named\", async (req, res) => {\n  try {\n    const params = getCardByNameSchema.parse(req.query);\n\n    if (!params.exact && !params.fuzzy) {\n      return res.status(400).json({\n        message: 'Either \"exact\" or \"fuzzy\" parameter is required',\n      });\n    }\n\n    const cardName = params.exact || params.fuzzy || \"\";\n    logger.info(\"Legacy get card by name request (deprecated)\", {\n      name: cardName,\n      set: params.set,\n    });\n\n    // Internally redirect to MTG game using Universal Card Service\n    const card = await universalCardService.getCardByName(\n      DEFAULT_GAME_ID,\n      cardName,\n      {\n        set: params.set,\n      },\n    );\n\n    if (!card) {\n      return res.status(404).json({ message: \"Card not found\" });\n    }\n\n    return res.json(addDeprecationWarning(card));\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        message: \"Invalid request parameters\",\n        errors: error.errors,\n      });\n    }\n\n    logger.error(\"Error fetching card by name\", error);\n    return res.status(500).json({ message: \"Failed to fetch card\" });\n  }\n});\n\n/**\n * Autocomplete card names\n * GET /api/cards/autocomplete?q=light&limit=10\n *\n * DEPRECATED: Use /api/games/:game_id/cards/autocomplete instead\n */\nrouter.get(\"/autocomplete\", async (req, res) => {\n  try {\n    const params = autocompleteSchema.parse(req.query);\n\n    logger.info(\"Legacy autocomplete request (deprecated)\", {\n      query: params.q,\n    });\n\n    // Internally redirect to MTG game using Universal Card Service\n    const result = await universalCardService.autocomplete(\n      DEFAULT_GAME_ID,\n      params.q,\n      params.limit,\n    );\n\n    return res.json(addDeprecationWarning(result));\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        message: \"Invalid request parameters\",\n        errors: error.errors,\n      });\n    }\n\n    logger.error(\"Error autocompleting card names\", error);\n    return res.status(500).json({ message: \"Failed to autocomplete\" });\n  }\n});\n\n/**\n * Get random card\n * GET /api/cards/random?set=lea&format=modern\n *\n * DEPRECATED: Use /api/games/:game_id/cards/random instead\n */\nrouter.get(\"/random\", async (req, res) => {\n  try {\n    const params = randomCardSchema.parse(req.query);\n\n    logger.info(\"Legacy random card request (deprecated)\", {\n      set: params.set,\n      format: params.format,\n    });\n\n    // Internally redirect to MTG game using Universal Card Service\n    const card = await universalCardService.getRandomCard(DEFAULT_GAME_ID, {\n      set: params.set,\n      format: params.format,\n    });\n\n    return res.json(addDeprecationWarning(card));\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        message: \"Invalid request parameters\",\n        errors: error.errors,\n      });\n    }\n\n    logger.error(\"Error fetching random card\", error);\n    return res.status(500).json({ message: \"Failed to fetch random card\" });\n  }\n});\n\n/**\n * Get cache statistics (for monitoring/debugging)\n * GET /api/cards/cache/stats\n *\n * NOTE: This endpoint is not deprecated as it's for internal monitoring\n */\nrouter.get(\"/cache/stats\", async (req, res) => {\n  try {\n    const stats = cardRecognitionService.getCacheStats();\n    res.json(stats);\n  } catch (error) {\n    logger.error(\"Error fetching cache stats\", error);\n    res.status(500).json({ message: \"Failed to fetch cache stats\" });\n  }\n});\n\nexport { router as cardRecognitionRoutes };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/cards/universal-cards.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/communities/communities.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/communities/communities.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/communities/communities.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[244,247],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[244,247],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface JoinCommunityRequest {\n  communityId: string;\n}\n\nexport interface SetPrimaryCommunityRequest {\n  communityId: string;\n}\n\nexport interface ThemePreferencesRequest {\n  communityId?: string;\n  themeMode?: string;\n  customColors?: any;\n}\n\nexport interface CommunityMembership {\n  id: string;\n  userId: string;\n  communityId: string;\n  isPrimary: boolean | null;\n  joinedAt: Date | null;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/events/events.routes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[535,538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[535,538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1052,1055],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1052,1055],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Router } from \"express\";\nimport {\n  isAuthenticated,\n  getAuthUserId,\n  type AuthenticatedRequest,\n} from \"../../auth\";\nimport { eventsService } from \"./events.service\";\nimport { logger } from \"../../logger\";\nimport { validateRequest, validateEventSchema } from \"../../validation\";\nimport { eventCreationRateLimit } from \"../../rate-limiting\";\n\nconst router = Router();\n\n// Get events with filters\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const { communityId, type, upcoming } = req.query;\n    const userId = (req as any).user?.id;\n\n    const events = await eventsService.getEvents({\n      userId,\n      communityId: communityId as string,\n      type: type as string,\n      upcoming: upcoming === \"true\",\n    });\n\n    res.json(events);\n  } catch (error) {\n    logger.error(\"Failed to fetch events\", error, { filters: req.query });\n    res.status(500).json({ message: \"Failed to fetch events\" });\n  }\n});\n\n// Get specific event\nrouter.get(\"/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const userId = (req as any).user?.id;\n\n    const event = await eventsService.getEvent(id, userId);\n    if (!event) {\n      return res.status(404).json({ message: \"Event not found\" });\n    }\n\n    return res.json(event);\n  } catch (error) {\n    logger.error(\"Failed to fetch event\", error, { eventId: req.params.id });\n    return res.status(500).json({ message: \"Failed to fetch event\" });\n  }\n});\n\n// Create event\nrouter.post(\n  \"/\",\n  isAuthenticated,\n  eventCreationRateLimit,\n  validateRequest(validateEventSchema),\n  async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n      const event = await eventsService.createEvent(userId, req.body);\n      res.json(event);\n    } catch (error) {\n      logger.error(\"Failed to create event\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      res.status(500).json({ message: \"Failed to create event\" });\n    }\n  },\n);\n\n// Update event\nrouter.put(\"/:id\", isAuthenticated, async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n  try {\n    const { id } = req.params;\n    if (!id) {\n      return res.status(400).json({ message: \"Event ID is required\" });\n    }\n    const userId = getAuthUserId(authenticatedReq);\n\n    const updatedEvent = await eventsService.updateEvent(id, userId, req.body);\n    return res.json(updatedEvent);\n  } catch (error) {\n    if (error instanceof Error) {\n      if (error.message === \"Event not found\") {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      if (error.message === \"Not authorized to edit this event\") {\n        return res\n          .status(403)\n          .json({ message: \"Not authorized to edit this event\" });\n      }\n    }\n\n    logger.error(\"Failed to update event\", error, { eventId: req.params.id });\n    return res.status(500).json({ message: \"Failed to update event\" });\n  }\n});\n\n// Delete event\nrouter.delete(\"/:id\", isAuthenticated, async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n  try {\n    const { id } = req.params;\n    if (!id) {\n      return res.status(400).json({ message: \"Event ID is required\" });\n    }\n    const userId = getAuthUserId(authenticatedReq);\n\n    await eventsService.deleteEvent(id, userId);\n    return res.json({ success: true });\n  } catch (error) {\n    if (error instanceof Error) {\n      if (error.message === \"Event not found\") {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      if (error.message === \"Not authorized to delete this event\") {\n        return res\n          .status(403)\n          .json({ message: \"Not authorized to delete this event\" });\n      }\n    }\n\n    logger.error(\"Failed to delete event\", error, { eventId: req.params.id });\n    return res.status(500).json({ message: \"Failed to delete event\" });\n  }\n});\n\n// Join event\nrouter.post(\"/:eventId/join\", isAuthenticated, async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n  try {\n    const { eventId } = req.params;\n    if (!eventId) {\n      return res.status(400).json({ message: \"Event ID is required\" });\n    }\n    const userId = getAuthUserId(authenticatedReq);\n\n    const attendee = await eventsService.joinEvent(eventId, userId, req.body);\n    return res.json(attendee);\n  } catch (error) {\n    if (error instanceof Error && error.message === \"Event not found\") {\n      return res.status(404).json({ message: \"Event not found\" });\n    }\n\n    logger.error(\"Failed to join event\", error, {\n      eventId: req.params.eventId,\n    });\n    return res.status(500).json({ message: \"Failed to join event\" });\n  }\n});\n\n// Leave event\nrouter.delete(\"/:eventId/leave\", isAuthenticated, async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n  try {\n    const { eventId } = req.params;\n    if (!eventId) {\n      return res.status(400).json({ message: \"Event ID is required\" });\n    }\n    const userId = getAuthUserId(authenticatedReq);\n\n    await eventsService.leaveEvent(eventId, userId);\n    return res.json({ success: true });\n  } catch (error) {\n    logger.error(\"Failed to leave event\", error, {\n      eventId: req.params.eventId,\n    });\n    return res.status(500).json({ message: \"Failed to leave event\" });\n  }\n});\n\n// Get event attendees\nrouter.get(\"/:eventId/attendees\", async (req, res) => {\n  try {\n    const { eventId } = req.params;\n    const attendees = await eventsService.getEventAttendees(eventId);\n    res.json(attendees);\n  } catch (error) {\n    logger.error(\"Failed to fetch event attendees\", error, {\n      eventId: req.params.eventId,\n    });\n    res.status(500).json({ message: \"Failed to fetch event attendees\" });\n  }\n});\n\n// Create bulk events\nrouter.post(\"/bulk\", isAuthenticated, async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n  try {\n    const userId = getAuthUserId(authenticatedReq);\n    const createdEvents = await eventsService.createBulkEvents(\n      userId,\n      req.body,\n    );\n    return res.status(201).json(createdEvents);\n  } catch (error) {\n    if (\n      error instanceof Error &&\n      error.message === \"Events array is required\"\n    ) {\n      return res.status(400).json({ message: \"Events array is required\" });\n    }\n\n    logger.error(\"Failed to create bulk events\", error, {\n      userId: getAuthUserId(authenticatedReq),\n    });\n    return res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Create recurring events\nrouter.post(\"/recurring\", isAuthenticated, async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n  try {\n    const userId = getAuthUserId(authenticatedReq);\n    const createdEvents = await eventsService.createRecurringEvents(\n      userId,\n      req.body,\n    );\n    res.status(201).json(createdEvents);\n  } catch (error) {\n    logger.error(\"Failed to create recurring events\", error, {\n      userId: getAuthUserId(authenticatedReq),\n    });\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nexport { router as eventsRoutes };\n\n// Separate router for user events (mounted at /api/user/events)\nexport const userEventsRouter = Router();\n\nuserEventsRouter.get(\"/\", isAuthenticated, async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n  try {\n    const userId = getAuthUserId(authenticatedReq);\n    const attendance = await eventsService.getUserEvents(userId);\n    res.json(attendance);\n  } catch (error) {\n    logger.error(\"Failed to fetch user events\", error, {\n      userId: getAuthUserId(authenticatedReq),\n    });\n    res.status(500).json({ message: \"Failed to fetch user events\" });\n  }\n});\n\n// Separate router for calendar events (mounted at /api/calendar/events)\nexport const calendarEventsRouter = Router();\n\ncalendarEventsRouter.get(\"/\", async (req, res) => {\n  try {\n    const { communityId, startDate, endDate, type } = req.query;\n\n    const events = await eventsService.getCalendarEvents({\n      communityId: communityId as string,\n      startDate: startDate as string,\n      endDate: endDate as string,\n      type: type as string,\n    });\n\n    return res.json(events);\n  } catch (error) {\n    if (\n      error instanceof Error &&\n      error.message === \"startDate and endDate are required\"\n    ) {\n      return res\n        .status(400)\n        .json({ message: \"startDate and endDate are required\" });\n    }\n\n    logger.error(\"Failed to fetch calendar events\", error, {\n      filters: req.query,\n    });\n    return res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/events/events.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1600,1603],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1600,1603],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":320,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9131,9134],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9131,9134],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { storage } from \"../../storage\";\nimport { logger } from \"../../logger\";\nimport { withTransaction } from \"@shared/database-unified\";\nimport { BatchQueryOptimizer } from \"../../utils/database.utils\";\nimport { insertEventSchema } from \"@shared/schema\";\nimport type { Event, EventAttendee } from \"@shared/schema\";\n// Note: User type reserved for future user-related event features\nimport type {\n  EventFilters,\n  CalendarEventFilters,\n  CreateEventRequest,\n  UpdateEventRequest,\n  JoinEventRequest,\n  BulkEventsRequest,\n  RecurringEventRequest,\n} from \"./events.types\";\n\nexport class EventsService {\n  async getEvents(filters: EventFilters) {\n    try {\n      return await storage.getEvents(filters);\n    } catch (error) {\n      logger.error(\"Failed to fetch events in EventsService\", error, {\n        filters,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get events with attendees using optimized batch loading to prevent N+1 queries\n   */\n  async getEventsWithAttendees(filters: EventFilters) {\n    try {\n      // First, get the events\n      const events = await storage.getEvents(filters);\n\n      if (events.length === 0) {\n        return { data: events };\n      }\n\n      // Use batch query optimization to load all attendees at once\n      const attendeesMap = await BatchQueryOptimizer.batchQuery(\n        events,\n        (event: Event) => event.id,\n        (eventIds: string[]) => storage.getEventAttendeesByEventIds(eventIds),\n        (attendee: EventAttendee) => attendee.eventId,\n      );\n\n      // Attach attendees to each event\n      const eventsWithAttendees = events.map((event: any) => ({\n        ...event,\n        attendees: attendeesMap.get(event.id) || [],\n        attendeeCount: attendeesMap.get(event.id)?.length || 0,\n      }));\n\n      return {\n        data: eventsWithAttendees,\n      };\n    } catch (error) {\n      logger.error(\n        \"Failed to fetch events with attendees in EventsService\",\n        error,\n        { filters },\n      );\n      throw error;\n    }\n  }\n\n  async getEvent(id: string, userId?: string) {\n    try {\n      return await storage.getEvent(id, userId);\n    } catch (error) {\n      logger.error(\"Failed to fetch event in EventsService\", error, {\n        eventId: id,\n        userId,\n      });\n      throw error;\n    }\n  }\n\n  async createEvent(\n    userId: string,\n    eventData: CreateEventRequest,\n  ): Promise<Event> {\n    try {\n      const parsedEventData = insertEventSchema.parse({\n        ...eventData,\n        creatorId: userId,\n        hostId: userId, // Set host to the same user who created the event\n      });\n\n      const event = await storage.createEvent(parsedEventData);\n      logger.info(\"Event created\", {\n        eventId: event.id,\n        userId,\n        title: event.title,\n      });\n      return event;\n    } catch (error) {\n      logger.error(\"Failed to create event in EventsService\", error, {\n        userId,\n      });\n      throw error;\n    }\n  }\n\n  async updateEvent(\n    eventId: string,\n    userId: string,\n    eventData: UpdateEventRequest,\n  ): Promise<Event> {\n    try {\n      // Check if user owns the event\n      const existingEvent = await storage.getEvent(eventId);\n      if (!existingEvent) {\n        throw new Error(\"Event not found\");\n      }\n      if (existingEvent.creatorId !== userId) {\n        throw new Error(\"Not authorized to edit this event\");\n      }\n\n      const parsedEventData = insertEventSchema.partial().parse(eventData);\n      const updatedEvent = await storage.updateEvent(eventId, parsedEventData);\n\n      logger.info(\"Event updated\", {\n        eventId,\n        userId,\n        title: updatedEvent.title,\n      });\n      return updatedEvent;\n    } catch (error) {\n      logger.error(\"Failed to update event in EventsService\", error, {\n        eventId,\n        userId,\n      });\n      throw error;\n    }\n  }\n\n  async deleteEvent(eventId: string, userId: string): Promise<void> {\n    try {\n      // Check if user owns the event\n      const existingEvent = await storage.getEvent(eventId);\n      if (!existingEvent) {\n        throw new Error(\"Event not found\");\n      }\n      if (existingEvent.creatorId !== userId) {\n        throw new Error(\"Not authorized to delete this event\");\n      }\n\n      await storage.deleteEvent(eventId);\n      logger.info(\"Event deleted\", { eventId, userId });\n    } catch (error) {\n      logger.error(\"Failed to delete event in EventsService\", error, {\n        eventId,\n        userId,\n      });\n      throw error;\n    }\n  }\n\n  async joinEvent(\n    eventId: string,\n    userId: string,\n    joinData: JoinEventRequest,\n  ): Promise<EventAttendee> {\n    try {\n      // Use transaction to ensure event joining and notifications are created atomically\n      const result = await withTransaction(async (tx) => {\n        // Verify event exists\n        const event = await storage.getEventWithTransaction(tx, eventId);\n        if (!event) {\n          throw new Error(\"Event not found\");\n        }\n\n        const { status = \"attending\" } = joinData;\n\n        // Create the event attendee record (note: schema doesn't have role/playerType fields)\n        const attendee = await storage.joinEventWithTransaction(tx, {\n          eventId,\n          userId,\n          status: status as \"attending\" | \"maybe\" | \"not_attending\",\n        });\n\n        // Create notification for the event host (if different from joiner)\n        if (event.hostId && event.hostId !== userId && status === \"attending\") {\n          await storage.createNotificationWithTransaction(tx, {\n            userId: event.hostId,\n            type: \"event_join\",\n            title: \"New Event Participant\",\n            message: `A user joined your event: ${event.title}`,\n            data: JSON.stringify({\n              eventId: event.id,\n              participantId: userId,\n              eventTitle: event.title,\n            }),\n            priority: \"normal\",\n          });\n        }\n\n        return attendee;\n      }, \"join-event-with-notification\");\n\n      logger.info(\"User joined event with notification\", {\n        eventId,\n        userId,\n        status: joinData.status,\n        role: joinData.role,\n        playerType: joinData.playerType,\n      });\n\n      return result;\n    } catch (error) {\n      logger.error(\"Failed to join event in EventsService\", error, {\n        eventId,\n        userId,\n        joinData,\n      });\n      throw error;\n    }\n  }\n\n  async leaveEvent(eventId: string, userId: string): Promise<void> {\n    try {\n      await storage.leaveEvent(eventId, userId);\n      logger.info(\"User left event\", { eventId, userId });\n    } catch (error) {\n      logger.error(\"Failed to leave event in EventsService\", error, {\n        eventId,\n        userId,\n      });\n      throw error;\n    }\n  }\n\n  async getEventAttendees(eventId: string) {\n    try {\n      return await storage.getEventAttendees(eventId);\n    } catch (error) {\n      logger.error(\"Failed to fetch event attendees in EventsService\", error, {\n        eventId,\n      });\n      throw error;\n    }\n  }\n\n  async getUserEvents(userId: string) {\n    try {\n      return await storage.getUserEventAttendance(userId);\n    } catch (error) {\n      logger.error(\"Failed to fetch user events in EventsService\", error, {\n        userId,\n      });\n      throw error;\n    }\n  }\n\n  async createBulkEvents(\n    userId: string,\n    bulkRequest: BulkEventsRequest,\n  ): Promise<Event[]> {\n    try {\n      const { events } = bulkRequest;\n\n      if (!Array.isArray(events) || events.length === 0) {\n        throw new Error(\"Events array is required\");\n      }\n\n      // Add creator and host information to each event and transform date/time to startTime\n      const eventData = events.map((event) => {\n        const {\n          date,\n          time,\n          recurrencePattern: _recurrencePattern, // Reserved for recurring events feature\n          recurrenceInterval: _recurrenceInterval, // Reserved for recurring events feature\n          recurrenceEndDate: _recurrenceEndDate, // Reserved for recurring events feature\n          ...eventProps\n        } = event;\n        const startTime = new Date(`${date}T${time || \"12:00\"}`);\n\n        return {\n          ...eventProps,\n          creatorId: userId,\n          hostId: userId,\n          startTime,\n          type: event.type as\n            | \"tournament\"\n            | \"convention\"\n            | \"release\"\n            | \"community\"\n            | \"game_pod\"\n            | \"stream\"\n            | \"personal\",\n        };\n      });\n\n      const createdEvents = await storage.createBulkEvents(eventData);\n      logger.info(\"Bulk events created\", {\n        userId,\n        count: createdEvents.length,\n      });\n      return createdEvents;\n    } catch (error) {\n      logger.error(\"Failed to create bulk events in EventsService\", error, {\n        userId,\n      });\n      throw error;\n    }\n  }\n\n  async createRecurringEvents(\n    userId: string,\n    recurringRequest: RecurringEventRequest,\n  ): Promise<Event[]> {\n    try {\n      // Validate recurrencePattern\n      const validPatterns = [\"daily\", \"weekly\", \"monthly\"] as const;\n      const recurrencePattern = validPatterns.includes(\n        recurringRequest.recurrencePattern as any,\n      )\n        ? (recurringRequest.recurrencePattern as \"daily\" | \"weekly\" | \"monthly\")\n        : undefined;\n\n      if (!recurrencePattern) {\n        throw new Error(\n          `Invalid recurrence pattern: ${recurringRequest.recurrencePattern}. Must be one of: ${validPatterns.join(\", \")}`,\n        );\n      }\n\n      // Create base event data without recurrence fields and transform date/time to startTime\n      const {\n        recurrencePattern: _pattern,\n        recurrenceInterval: _interval,\n        recurrenceEndDate: _endDate,\n        date,\n        time,\n        ...eventBase\n      } = recurringRequest;\n\n      const startTime = new Date(`${date}T${time || \"12:00\"}`);\n\n      const eventData = {\n        ...eventBase,\n        creatorId: userId,\n        hostId: userId,\n        startTime,\n        type: recurringRequest.type as\n          | \"tournament\"\n          | \"convention\"\n          | \"release\"\n          | \"community\"\n          | \"game_pod\"\n          | \"stream\"\n          | \"personal\",\n      };\n\n      const createdEvents = await storage.createRecurringEvents(\n        eventData,\n        recurringRequest.recurrenceEndDate,\n      );\n      logger.info(\"Recurring events created\", {\n        userId,\n        count: createdEvents.length,\n        pattern: recurrencePattern,\n      });\n      return createdEvents;\n    } catch (error) {\n      logger.error(\n        \"Failed to create recurring events in EventsService\",\n        error,\n        { userId },\n      );\n      throw error;\n    }\n  }\n\n  async getCalendarEvents(filters: CalendarEventFilters) {\n    try {\n      const { startDate, endDate } = filters;\n\n      if (!startDate || !endDate) {\n        throw new Error(\"startDate and endDate are required\");\n      }\n\n      return await storage.getCalendarEvents(filters);\n    } catch (error) {\n      logger.error(\"Failed to fetch calendar events in EventsService\", error, {\n        filters,\n      });\n      throw error;\n    }\n  }\n}\n\nexport const eventsService = new EventsService();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/events/events.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/game-stats/game-stats.routes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":303,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7470,7473],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7470,7473],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":303,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7480,7483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7480,7483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":303,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7490,7493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7490,7493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":303,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":303,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":303,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7501,7504],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7501,7504],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Game Statistics API Routes\n *\n * This file demonstrates proper Express.js RESTful API patterns\n * following the Shuffle & Sync repository conventions:\n * - RESTful endpoint design with proper HTTP methods\n * - Authentication middleware integration\n * - Input validation using Zod schemas\n * - Consistent error handling and response formats\n * - Proper HTTP status codes\n * - Rate limiting and security middleware\n */\n\nimport { Router } from \"express\";\nimport { z } from \"zod\";\nimport { requireAuth } from \"../../auth/auth.middleware\";\nimport { ValidationError, NotFoundError } from \"../../shared/types\";\nimport { gameStatsService } from \"./game-stats.service\";\nimport { validateRequest } from \"../../validation\";\nimport { assertRouteParam } from \"../../shared/utils\";\n\nconst router = Router();\n\n// Validation schemas\nconst createGameResultSchema = z.object({\n  gameType: z.enum([\n    \"mtg\",\n    \"pokemon\",\n    \"lorcana\",\n    \"yugioh\",\n    \"flesh-and-blood\",\n    \"keyforge\",\n  ]),\n  format: z.string().min(1, \"Format is required\"),\n  result: z.enum([\"win\", \"loss\", \"draw\"]),\n  opponentId: z.string().optional(),\n  duration: z.number().min(1, \"Duration must be at least 1 minute\"),\n  notes: z\n    .string()\n    .max(500, \"Notes must be less than 500 characters\")\n    .optional(),\n});\n\nconst updateGameStatsSchema = z.object({\n  gameType: z.enum([\n    \"mtg\",\n    \"pokemon\",\n    \"lorcana\",\n    \"yugioh\",\n    \"flesh-and-blood\",\n    \"keyforge\",\n  ]),\n  favoriteFormat: z.string().optional(),\n});\n\nconst gameStatsQuerySchema = z.object({\n  gameType: z\n    .enum([\n      \"mtg\",\n      \"pokemon\",\n      \"lorcana\",\n      \"yugioh\",\n      \"flesh-and-blood\",\n      \"keyforge\",\n    ])\n    .optional(),\n  format: z.string().optional(),\n  dateFrom: z.string().datetime().optional(),\n  dateTo: z.string().datetime().optional(),\n  resultType: z.enum([\"win\", \"loss\", \"draw\"]).optional(),\n  page: z.coerce.number().min(1).default(1),\n  limit: z.coerce.number().min(1).max(100).default(10),\n  sortBy: z.enum([\"createdAt\", \"winRate\", \"totalGames\"]).default(\"createdAt\"),\n  sortOrder: z.enum([\"asc\", \"desc\"]).default(\"desc\"),\n});\n\n/**\n * GET /api/game-stats\n * Get user's game statistics with optional filtering\n *\n * Query Parameters:\n * - gameType: Filter by specific TCG type\n * - format: Filter by game format\n * - dateFrom: Filter results from date (ISO string)\n * - dateTo: Filter results to date (ISO string)\n * - page: Page number for pagination\n * - limit: Results per page (max 100)\n * - sortBy: Sort field\n * - sortOrder: Sort direction\n */\nrouter.get(\"/\", requireAuth, async (req, res, next): Promise<void> => {\n  try {\n    // Validate query parameters\n    const query = gameStatsQuerySchema.parse(req.query);\n    if (!req.user?.id) {\n      res.status(401).json({ message: \"Unauthorized\" });\n      return;\n    }\n    const userId = req.user.id;\n\n    // Calculate pagination offset\n    const offset = (query.page - 1) * query.limit;\n\n    const result = await gameStatsService.getUserGameStats(userId, {\n      ...query,\n      offset,\n    });\n\n    res.json({\n      success: true,\n      data: result,\n      message: \"Game statistics retrieved successfully\",\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n/**\n * PUT /api/game-stats\n * Update user's game statistics preferences\n */\nrouter.put(\n  \"/\",\n  requireAuth,\n  validateRequest(updateGameStatsSchema),\n  async (req, res, next): Promise<void> => {\n    try {\n      if (!req.user?.id) {\n        res.status(401).json({ message: \"Unauthorized\" });\n        return;\n      }\n      const userId = req.user.id;\n      const updateData = req.body;\n\n      const updatedStats = await gameStatsService.updateGameStatsPreferences(\n        userId,\n        updateData,\n      );\n\n      res.json({\n        success: true,\n        data: updatedStats,\n        message: \"Game statistics preferences updated successfully\",\n      });\n    } catch (error) {\n      next(error);\n    }\n  },\n);\n\n/**\n * GET /api/game-stats/aggregate\n * Get aggregate statistics across all game types for the authenticated user\n */\nrouter.get(\"/aggregate\", requireAuth, async (req, res, next): Promise<void> => {\n  try {\n    if (!req.user?.id) {\n      res.status(401).json({ message: \"Unauthorized\" });\n      return;\n    }\n    const userId = req.user.id;\n\n    const aggregateStats = await gameStatsService.getAggregateStats(userId);\n\n    res.json({\n      success: true,\n      data: aggregateStats,\n      message: \"Aggregate statistics retrieved successfully\",\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n/**\n * GET /api/game-stats/leaderboard\n * Get leaderboard data for game statistics\n *\n * Query Parameters:\n * - gameType: Optional filter by specific TCG type\n * - limit: Number of top players to return (default 20, max 100)\n */\nrouter.get(\"/leaderboard\", async (req, res, next) => {\n  try {\n    const { gameType, limit = 20 } = req.query;\n\n    const leaderboardQuery = z\n      .object({\n        gameType: z\n          .enum([\n            \"mtg\",\n            \"pokemon\",\n            \"lorcana\",\n            \"yugioh\",\n            \"flesh-and-blood\",\n            \"keyforge\",\n          ])\n          .optional(),\n        limit: z.coerce.number().min(1).max(100).default(20),\n      })\n      .parse({ gameType, limit });\n\n    const leaderboard = await gameStatsService.getLeaderboard(leaderboardQuery);\n\n    res.json({\n      success: true,\n      data: leaderboard,\n      message: \"Leaderboard retrieved successfully\",\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n/**\n * POST /api/game-results\n * Record a new game result\n */\nrouter.post(\n  \"/game-results\",\n  requireAuth,\n  validateRequest(createGameResultSchema),\n  async (req, res, next): Promise<void> => {\n    try {\n      if (!req.user?.id) {\n        res.status(401).json({ message: \"Unauthorized\" });\n        return;\n      }\n      const userId = req.user.id;\n      const gameResultData = req.body;\n\n      const newResult = await gameStatsService.createGameResult(\n        userId,\n        gameResultData,\n      );\n\n      res.status(201).json({\n        success: true,\n        data: newResult,\n        message: \"Game result recorded successfully\",\n      });\n    } catch (error) {\n      next(error);\n    }\n  },\n);\n\n/**\n * GET /api/game-results\n * Get user's game results with filtering and pagination\n */\nrouter.get(\"/game-results\", requireAuth, async (req, res, next): Promise<void> => {\n  try {\n    const query = gameStatsQuerySchema.parse(req.query);\n    if (!req.user?.id) {\n      res.status(401).json({ message: \"Unauthorized\" });\n      return;\n    }\n    const userId = req.user.id;\n\n    const offset = (query.page - 1) * query.limit;\n\n    const results = await gameStatsService.getUserGameResults(userId, {\n      ...query,\n      offset,\n    });\n\n    res.json({\n      success: true,\n      data: results,\n      message: \"Game results retrieved successfully\",\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n/**\n * DELETE /api/game-results/:id\n * Delete a specific game result (only if user owns it)\n */\nrouter.delete(\"/game-results/:id\", requireAuth, async (req, res, next): Promise<void> => {\n  try {\n    const id = assertRouteParam(req.params.id, \"id\");\n    if (!req.user?.id) {\n      res.status(401).json({ message: \"Unauthorized\" });\n      return;\n    }\n    const userId = req.user.id;\n\n    await gameStatsService.deleteGameResult(id, userId);\n\n    res.status(204).send();\n  } catch (error) {\n    next(error);\n  }\n});\n\n/**\n * Error handling middleware for this router\n */\nrouter.use((error: any, req: any, res: any, next: any) => {\n  console.error(\"Game Stats API Error:\", error);\n\n  if (error instanceof z.ZodError) {\n    return res.status(400).json({\n      success: false,\n      message: \"Validation error\",\n      errors: error.errors.map((e) => `${e.path.join(\".\")}: ${e.message}`),\n    });\n  }\n\n  if (error instanceof ValidationError) {\n    return res.status(400).json({\n      success: false,\n      message: error.message,\n    });\n  }\n\n  if (error instanceof NotFoundError) {\n    return res.status(404).json({\n      success: false,\n      message: error.message,\n    });\n  }\n\n  // Generic error response\n  res.status(500).json({\n    success: false,\n    message: \"Internal server error\",\n  });\n});\n\nexport { router as gameStatsRoutes };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/game-stats/game-stats.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/games/games-crud.routes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2871,2874],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2871,2874],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Game CRUD Routes\n *\n * API endpoints for creating and managing games in the Universal Deck-Building framework\n */\n\nimport { Router } from \"express\";\nimport { z } from \"zod\";\nimport { gameService } from \"../../services/games/game.service\";\nimport {\n  isAuthenticated,\n  getAuthUserId,\n  type AuthenticatedRequest,\n} from \"../../auth\";\nimport { logger } from \"../../logger\";\n\nconst router = Router();\n\n// Validation schemas\nconst createGameSchema = z.object({\n  name: z\n    .string()\n    .min(1)\n    .max(100)\n    .regex(\n      /^[a-z0-9-]+$/,\n      \"Game name must be lowercase alphanumeric with hyphens\",\n    ),\n  displayName: z.string().min(1).max(200),\n  description: z.string().max(2000).optional(),\n  isOfficial: z.boolean().optional(),\n  version: z.string().optional(),\n  playerCount: z\n    .object({\n      min: z.number().int().min(1),\n      max: z.number().int().min(1),\n    })\n    .optional(),\n  avgGameDuration: z.number().int().min(1).optional(),\n  complexity: z.number().int().min(1).max(5).optional(),\n  ageRating: z.string().max(10).optional(),\n  cardTypes: z.array(z.string()).optional(),\n  resourceTypes: z.array(z.any()).optional(),\n  zones: z.array(z.string()).optional(),\n  phaseStructure: z.array(z.string()).optional(),\n  deckRules: z\n    .object({\n      minDeckSize: z.number().int().min(1).optional(),\n      maxDeckSize: z.number().int().min(1).nullable().optional(),\n      maxCopies: z.number().int().min(1).optional(),\n      allowedSets: z.array(z.string()).nullable().optional(),\n    })\n    .optional(),\n  theme: z\n    .object({\n      primaryColor: z.string().optional(),\n      accentColor: z.string().optional(),\n      cardBackUrl: z.string().nullable().optional(),\n    })\n    .optional(),\n  externalSource: z.string().optional(),\n});\n\nconst updateGameSchema = createGameSchema.partial().omit({ name: true });\n\n/**\n * POST /api/games - Create new game\n */\nrouter.post(\"/\", isAuthenticated, async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n  try {\n    const userId = getAuthUserId(authenticatedReq);\n    const validatedData = createGameSchema.parse(req.body);\n\n    // Add userId as creatorId\n    const gameData = {\n      ...validatedData,\n      creatorId: userId,\n    };\n\n    const game = await gameService.createGame(userId, gameData);\n    return res.status(201).json(game);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        message: \"Invalid request data\",\n        errors: error.errors,\n      });\n    }\n\n    logger.error(\"Failed to create game\", error, {\n      userId: getAuthUserId(authenticatedReq),\n    });\n    return res.status(500).json({ message: \"Failed to create game\" });\n  }\n});\n\n/**\n * GET /api/games - List all games\n */\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const { published, official, creator } = req.query;\n\n    const filters: any = {};\n    if (published !== undefined) filters.isPublished = published === \"true\";\n    if (official !== undefined) filters.isOfficial = official === \"true\";\n    if (creator) filters.creatorId = creator as string;\n\n    const games = await gameService.getAllGames(filters);\n    return res.json(games);\n  } catch (error) {\n    logger.error(\"Failed to fetch games\", error);\n    return res.status(500).json({ message: \"Failed to fetch games\" });\n  }\n});\n\n/**\n * GET /api/games/:id - Get game details\n */\nrouter.get(\"/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const game = await gameService.getGameById(id);\n    // Note: gameService.getGameById currently throws not implemented error\n    return res.json(game);\n  } catch (error) {\n    // Check if it's the \"not implemented\" error\n    if (\n      error instanceof Error &&\n      error.message.includes(\"not yet implemented\")\n    ) {\n      return res\n        .status(501)\n        .json({\n          message:\n            \"Game service not yet implemented - games table missing from schema\",\n        });\n    }\n    logger.error(\"Failed to fetch game\", error, { gameId: req.params.id });\n    return res.status(500).json({ message: \"Failed to fetch game\" });\n  }\n});\n\n/**\n * PUT /api/games/:id - Update game\n */\nrouter.put(\"/:id\", isAuthenticated, async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n  try {\n    const userId = getAuthUserId(authenticatedReq);\n    const { id } = req.params;\n\n    if (!id) {\n      return res.status(400).json({ message: \"Game ID is required\" });\n    }\n\n    const updates = updateGameSchema.parse(req.body);\n\n    const game = await gameService.updateGame(id, userId, updates);\n    return res.json(game);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        message: \"Invalid request data\",\n        errors: error.errors,\n      });\n    }\n\n    if (error instanceof Error) {\n      if (error.message === \"Game not found\") {\n        return res.status(404).json({ message: \"Game not found\" });\n      }\n      if (error.message === \"Not authorized to update this game\") {\n        return res\n          .status(403)\n          .json({ message: \"Not authorized to update this game\" });\n      }\n    }\n\n    logger.error(\"Failed to update game\", error, {\n      gameId: req.params.id,\n      userId: getAuthUserId(authenticatedReq),\n    });\n    return res.status(500).json({ message: \"Failed to update game\" });\n  }\n});\n\n/**\n * DELETE /api/games/:id - Delete game\n */\nrouter.delete(\"/:id\", isAuthenticated, async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n  try {\n    const userId = getAuthUserId(authenticatedReq);\n    const { id } = req.params;\n\n    if (!id) {\n      return res.status(400).json({ message: \"Game ID is required\" });\n    }\n\n    await gameService.deleteGame(id, userId);\n    return res.json({ success: true });\n  } catch (error) {\n    if (error instanceof Error) {\n      if (error.message === \"Game not found\") {\n        return res.status(404).json({ message: \"Game not found\" });\n      }\n      if (error.message === \"Not authorized to delete this game\") {\n        return res\n          .status(403)\n          .json({ message: \"Not authorized to delete this game\" });\n      }\n    }\n\n    logger.error(\"Failed to delete game\", error, {\n      gameId: req.params.id,\n      userId: getAuthUserId(authenticatedReq),\n    });\n    return res.status(500).json({ message: \"Failed to delete game\" });\n  }\n});\n\n/**\n * POST /api/games/:id/publish - Publish game\n */\nrouter.post(\"/:id/publish\", isAuthenticated, async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n  try {\n    const userId = getAuthUserId(authenticatedReq);\n    const { id } = req.params;\n\n    if (!id) {\n      return res.status(400).json({ message: \"Game ID is required\" });\n    }\n\n    const game = await gameService.publishGame(id, userId);\n    return res.json(game);\n  } catch (error) {\n    if (error instanceof Error) {\n      if (error.message === \"Game not found\") {\n        return res.status(404).json({ message: \"Game not found\" });\n      }\n      if (error.message === \"Not authorized to publish this game\") {\n        return res\n          .status(403)\n          .json({ message: \"Not authorized to publish this game\" });\n      }\n    }\n\n    logger.error(\"Failed to publish game\", error, {\n      gameId: req.params.id,\n      userId: getAuthUserId(authenticatedReq),\n    });\n    return res.status(500).json({ message: \"Failed to publish game\" });\n  }\n});\n\n/**\n * GET /api/games/:id/stats - Get game statistics\n */\nrouter.get(\"/:id/stats\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const stats = await gameService.getGameStats(id);\n\n    return res.json(stats);\n  } catch (error) {\n    if (error instanceof Error && error.message === \"Game not found\") {\n      return res.status(404).json({ message: \"Game not found\" });\n    }\n\n    logger.error(\"Failed to fetch game stats\", error, {\n      gameId: req.params.id,\n    });\n    return res.status(500).json({ message: \"Failed to fetch game stats\" });\n  }\n});\n\nexport { router as gamesCrudRoutes };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/games/games.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/messaging/messaging.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/messaging/messaging.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/messaging/messaging.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/tournaments/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/tournaments/tournaments.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/tournaments/tournaments.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2552,2555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2552,2555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":190,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5754,5757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5754,5757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":209,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6429,6432],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6429,6432],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":210,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6468,6471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6468,6471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":577,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":577,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18061,18064],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18061,18064],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":761,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":761,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23709,23712],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23709,23712],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":793,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":793,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24959,24962],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24959,24962],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":799,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":799,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25232,25235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25232,25235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'previousResults' is defined but never used. Allowed unused args must match /^_/u.","line":914,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":914,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":914,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":914,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28556,28559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28556,28559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":948,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":948,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29626,29629],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29626,29629],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'previousMatches' is defined but never used. Allowed unused args must match /^_/u.","line":1025,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1025,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1025,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1025,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31635,31638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31635,31638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { storage } from \"../../storage\";\nimport { logger } from \"../../logger\";\nimport { withTransaction } from \"@shared/database-unified\";\nimport {\n  TournamentParticipant,\n  InsertTournamentRound,\n  InsertTournamentMatch,\n  UpdateTournament,\n  User,\n} from \"@shared/schema\";\n// Note: Tournament, TournamentFormat, TournamentRound, TournamentMatch types reserved for enhanced tournament features\n\n// Tournament format types\ntype TournamentFormatType =\n  | \"single_elimination\"\n  | \"double_elimination\"\n  | \"swiss\"\n  | \"round_robin\";\n\n// Pairing result interface\ninterface PairingResult {\n  player1: string;\n  player2: string | null; // null for bye\n  bracketPosition: number;\n}\n\nexport const tournamentsService = {\n  async getTournaments(communityId?: string) {\n    try {\n      return await storage.getTournaments(communityId);\n    } catch (error) {\n      logger.error(\"Service error: Failed to fetch tournaments\", error, {\n        communityId,\n      });\n      throw error;\n    }\n  },\n\n  async getTournament(tournamentId: string) {\n    try {\n      return await storage.getTournament(tournamentId);\n    } catch (error) {\n      logger.error(\"Service error: Failed to fetch tournament\", error, {\n        tournamentId,\n      });\n      throw error;\n    }\n  },\n\n  /**\n   * Get tournament with participants using optimized batch loading\n   */\n  async getTournamentWithParticipants(tournamentId: string) {\n    try {\n      // Use transaction for consistent data retrieval\n      return await withTransaction(async (tx) => {\n        const tournament = await storage.getTournamentWithTransaction(\n          tx,\n          tournamentId,\n        );\n        if (!tournament) {\n          throw new Error(\"Tournament not found\");\n        }\n\n        // Get participants, rounds, and matches in parallel to optimize performance\n        const [participants, rounds, matches] = await Promise.all([\n          storage.getTournamentParticipantsWithTransaction(tx, tournamentId),\n          storage.getTournamentRoundsWithTransaction(tx, tournamentId),\n          storage.getTournamentMatchesWithTransaction(tx, tournamentId),\n        ]);\n\n        return {\n          ...tournament,\n          participants,\n          rounds,\n          matches,\n          participantCount: participants.length,\n        };\n      }, \"get-tournament-with-details\");\n    } catch (error) {\n      logger.error(\n        \"Service error: Failed to fetch tournament with participants\",\n        error,\n        { tournamentId },\n      );\n      throw error;\n    }\n  },\n\n  async createTournament(tournamentData: any) {\n    try {\n      logger.info(\"Creating tournament\", { tournamentData });\n      return await storage.createTournament(tournamentData);\n    } catch (error) {\n      logger.error(\"Service error: Failed to create tournament\", error, {\n        tournamentData,\n      });\n      throw error;\n    }\n  },\n\n  async joinTournament(tournamentId: string, userId: string) {\n    try {\n      logger.info(\"User joining tournament\", { tournamentId, userId });\n      return await storage.joinTournament(tournamentId, userId);\n    } catch (error) {\n      logger.error(\"Service error: Failed to join tournament\", error, {\n        tournamentId,\n        userId,\n      });\n      throw error;\n    }\n  },\n\n  async leaveTournament(tournamentId: string, userId: string) {\n    try {\n      logger.info(\"User leaving tournament\", { tournamentId, userId });\n      return await storage.leaveTournament(tournamentId, userId);\n    } catch (error) {\n      logger.error(\"Service error: Failed to leave tournament\", error, {\n        tournamentId,\n        userId,\n      });\n      throw error;\n    }\n  },\n\n  async updateTournament(\n    tournamentId: string,\n    updates: UpdateTournament,\n    userId: string,\n  ) {\n    try {\n      logger.info(\"Updating tournament\", { tournamentId, updates, userId });\n\n      // Get tournament details\n      const tournament = await storage.getTournament(tournamentId);\n      if (!tournament) {\n        throw new Error(\"Tournament not found\");\n      }\n\n      // Verify organizer permissions\n      if (tournament.organizerId !== userId) {\n        throw new Error(\n          \"Only the tournament organizer can edit this tournament\",\n        );\n      }\n\n      // Enforce business rules based on tournament status\n      const status = tournament.status || \"upcoming\";\n\n      if (status === \"completed\") {\n        throw new Error(\"Cannot edit completed tournaments\");\n      }\n\n      if (status === \"active\") {\n        // For active tournaments, only allow limited edits\n        const allowedFields = [\"name\", \"description\", \"rules\", \"prizePool\"];\n        const hasDisallowedFields = Object.keys(updates).some(\n          (field) => !allowedFields.includes(field),\n        );\n\n        if (hasDisallowedFields) {\n          throw new Error(\n            \"Can only edit name, description, rules, and prize pool for active tournaments\",\n          );\n        }\n      }\n\n      // Validate maxParticipants if being updated\n      if (\n        updates.maxParticipants !== undefined &&\n        updates.maxParticipants !== null\n      ) {\n        // Use authoritative participant count from participants array\n        const actualParticipantCount = tournament.participants?.length || 0;\n        if (updates.maxParticipants < actualParticipantCount) {\n          throw new Error(\n            `Cannot reduce max participants below current participant count (${actualParticipantCount})`,\n          );\n        }\n      }\n\n      // Validate startDate if being updated\n      if (updates.startDate !== undefined && status === \"active\") {\n        throw new Error(\"Cannot change start date for active tournaments\");\n      }\n\n      // Validate format if being updated (note: schema uses 'format', not 'gameFormat')\n      if ((updates as any).format !== undefined && status === \"active\") {\n        throw new Error(\"Cannot change game format for active tournaments\");\n      }\n\n      // CRITICAL SECURITY: Server-side field whitelist guard\n      // Prevent primary key/timestamp tampering regardless of schema configuration\n      const ALLOWED_UPDATE_FIELDS = [\n        \"name\",\n        \"description\",\n        \"format\",\n        \"maxParticipants\",\n        \"startDate\",\n        \"endDate\",\n        \"prizePool\",\n        \"rules\",\n      ] as const;\n\n      const sanitizedUpdates: Partial<UpdateTournament> = {};\n      for (const [key, value] of Object.entries(updates)) {\n        if (ALLOWED_UPDATE_FIELDS.includes(key as any)) {\n          (sanitizedUpdates as any)[key] = value;\n        } else {\n          logger.warn(\"Blocked unauthorized field update attempt\", {\n            field: key,\n            tournamentId,\n            userId,\n            attemptedValue: value,\n          });\n        }\n      }\n\n      // Perform the update with sanitized data\n      const updatedTournament = await storage.updateTournament(\n        tournamentId,\n        sanitizedUpdates,\n      );\n\n      logger.info(\"Tournament updated successfully\", { tournamentId, updates });\n      return updatedTournament;\n    } catch (error) {\n      logger.error(\"Service error: Failed to update tournament\", error, {\n        tournamentId,\n        updates,\n        userId,\n      });\n      throw error;\n    }\n  },\n\n  // ======================================\n  // ADVANCED TOURNAMENT ENGINE FEATURES\n  // ======================================\n\n  /**\n   * Get available tournament formats\n   */\n  async getTournamentFormats() {\n    try {\n      return await storage.getTournamentFormats();\n    } catch (error) {\n      logger.error(\"Service error: Failed to fetch tournament formats\", error);\n      throw error;\n    }\n  },\n\n  /**\n   * Start a tournament by generating brackets and initial rounds\n   */\n  async startTournament(tournamentId: string, organizerId: string) {\n    try {\n      logger.info(\"Starting tournament\", { tournamentId, organizerId });\n\n      // Get tournament details\n      const tournament = await storage.getTournament(tournamentId);\n      if (!tournament) {\n        throw new Error(\"Tournament not found\");\n      }\n\n      // Verify organizer permissions\n      if (tournament.organizerId !== organizerId) {\n        throw new Error(\n          \"Only the tournament organizer can start the tournament\",\n        );\n      }\n\n      // Check if already started\n      if (tournament.status !== \"upcoming\") {\n        throw new Error(\"Tournament has already started or ended\");\n      }\n\n      // Get participants\n      const participants = tournament.participants || [];\n      if (participants.length < 2) {\n        throw new Error(\"Tournament needs at least 2 participants to start\");\n      }\n\n      // Generate bracket based on format\n      const format = tournament.format as TournamentFormatType;\n      await this.generateBracket(tournamentId, participants, format);\n\n      // Update tournament status to active (internal system update)\n      await storage.updateTournamentStatus(tournamentId, \"active\");\n\n      logger.info(\"Tournament started successfully\", {\n        tournamentId,\n        participantCount: participants.length,\n      });\n      return await storage.getTournament(tournamentId);\n    } catch (error) {\n      logger.error(\"Service error: Failed to start tournament\", error, {\n        tournamentId,\n        organizerId,\n      });\n      throw error;\n    }\n  },\n\n  /**\n   * Generate tournament bracket based on format\n   */\n  async generateBracket(\n    tournamentId: string,\n    participants: (TournamentParticipant & { user: User })[],\n    format: TournamentFormatType,\n  ) {\n    try {\n      logger.info(\"Generating bracket\", {\n        tournamentId,\n        format,\n        participantCount: participants.length,\n      });\n\n      switch (format) {\n        case \"single_elimination\":\n          await this.generateSingleEliminationBracket(\n            tournamentId,\n            participants,\n          );\n          break;\n        case \"double_elimination\":\n          await this.generateDoubleEliminationBracket(\n            tournamentId,\n            participants,\n          );\n          break;\n        case \"swiss\":\n          await this.generateSwissBracket(tournamentId, participants);\n          break;\n        case \"round_robin\":\n          await this.generateRoundRobinBracket(tournamentId, participants);\n          break;\n        default:\n          throw new Error(`Unsupported tournament format: ${format}`);\n      }\n    } catch (error) {\n      logger.error(\"Service error: Failed to generate bracket\", error, {\n        tournamentId,\n        format,\n      });\n      throw error;\n    }\n  },\n\n  /**\n   * Generate single elimination bracket\n   */\n  async generateSingleEliminationBracket(\n    tournamentId: string,\n    participants: (TournamentParticipant & { user: User })[],\n  ) {\n    const seededParticipants = this.seedParticipants(participants);\n    const rounds = this.calculateSingleEliminationRounds(\n      seededParticipants.length,\n    );\n\n    // Create all rounds\n    for (let roundNum = 1; roundNum <= rounds; roundNum++) {\n      const roundData: InsertTournamentRound = {\n        tournamentId,\n        roundNumber: roundNum,\n        name: this.getRoundName(roundNum, rounds),\n        status: roundNum === 1 ? \"active\" : \"pending\",\n      };\n      await storage.createTournamentRound(roundData);\n    }\n\n    // Generate first round matches\n    const firstRound = await storage.getTournamentRounds(tournamentId);\n    const round1 = firstRound.find((r) => r.roundNumber === 1);\n    if (!round1) throw new Error(\"Failed to create first round\");\n\n    const firstRoundPairings =\n      this.generateSingleEliminationPairings(seededParticipants);\n    await this.createMatches(tournamentId, round1.id, firstRoundPairings);\n  },\n\n  /**\n   * Generate double elimination bracket\n   */\n  async generateDoubleEliminationBracket(\n    tournamentId: string,\n    participants: (TournamentParticipant & { user: User })[],\n  ) {\n    const seededParticipants = this.seedParticipants(participants);\n    const rounds = this.calculateDoubleEliminationRounds(\n      seededParticipants.length,\n    );\n\n    // Create winner bracket rounds\n    for (let roundNum = 1; roundNum <= rounds.winnerBracket; roundNum++) {\n      const roundData: InsertTournamentRound = {\n        tournamentId,\n        roundNumber: roundNum,\n        name: `Winner Bracket Round ${roundNum}`,\n        status: roundNum === 1 ? \"active\" : \"pending\",\n      };\n      await storage.createTournamentRound(roundData);\n    }\n\n    // Create loser bracket rounds\n    for (let roundNum = 1; roundNum <= rounds.loserBracket; roundNum++) {\n      const roundData: InsertTournamentRound = {\n        tournamentId,\n        roundNumber: rounds.winnerBracket + roundNum,\n        name: `Loser Bracket Round ${roundNum}`,\n        status: \"pending\",\n      };\n      await storage.createTournamentRound(roundData);\n    }\n\n    // Create grand finals\n    const roundData: InsertTournamentRound = {\n      tournamentId,\n      roundNumber: rounds.winnerBracket + rounds.loserBracket + 1,\n      name: \"Grand Finals\",\n      status: \"pending\",\n    };\n    await storage.createTournamentRound(roundData);\n\n    // Generate first round matches\n    const allRounds = await storage.getTournamentRounds(tournamentId);\n    const round1 = allRounds.find((r) => r.roundNumber === 1);\n    if (!round1) throw new Error(\"Failed to create first round\");\n\n    const firstRoundPairings =\n      this.generateSingleEliminationPairings(seededParticipants);\n    await this.createMatches(tournamentId, round1.id, firstRoundPairings);\n  },\n\n  /**\n   * Generate Swiss tournament bracket\n   */\n  async generateSwissBracket(\n    tournamentId: string,\n    participants: (TournamentParticipant & { user: User })[],\n  ) {\n    const rounds = this.calculateSwissRounds(participants.length);\n\n    // Create all rounds\n    for (let roundNum = 1; roundNum <= rounds; roundNum++) {\n      const roundData: InsertTournamentRound = {\n        tournamentId,\n        roundNumber: roundNum,\n        name: `Round ${roundNum}`,\n        status: roundNum === 1 ? \"active\" : \"pending\",\n      };\n      await storage.createTournamentRound(roundData);\n    }\n\n    // Generate first round Swiss pairings\n    const allRounds = await storage.getTournamentRounds(tournamentId);\n    const round1 = allRounds.find((r) => r.roundNumber === 1);\n    if (!round1) throw new Error(\"Failed to create first round\");\n\n    const firstRoundPairings = this.generateSwissPairings(participants, []);\n    await this.createMatches(tournamentId, round1.id, firstRoundPairings);\n  },\n\n  /**\n   * Generate round robin bracket\n   */\n  async generateRoundRobinBracket(\n    tournamentId: string,\n    participants: (TournamentParticipant & { user: User })[],\n  ) {\n    const rounds =\n      participants.length % 2 === 0\n        ? participants.length - 1\n        : participants.length;\n\n    // Create all rounds\n    for (let roundNum = 1; roundNum <= rounds; roundNum++) {\n      const roundData: InsertTournamentRound = {\n        tournamentId,\n        roundNumber: roundNum,\n        name: `Round ${roundNum}`,\n        status: roundNum === 1 ? \"active\" : \"pending\",\n      };\n      await storage.createTournamentRound(roundData);\n    }\n\n    // Generate all round robin matches\n    const allRounds = await storage.getTournamentRounds(tournamentId);\n    const roundRobinMatches = this.generateRoundRobinPairings(participants);\n\n    for (let roundNum = 0; roundNum < rounds; roundNum++) {\n      const round = allRounds.find((r) => r.roundNumber === roundNum + 1);\n      if (!round) continue;\n\n      const roundMatches = roundRobinMatches[roundNum] || [];\n      await this.createMatches(tournamentId, round.id, roundMatches);\n    }\n  },\n\n  /**\n   * Advance to next round after current round is completed\n   */\n  async advanceRound(tournamentId: string, organizerId: string) {\n    try {\n      logger.info(\"Advancing tournament round\", { tournamentId, organizerId });\n\n      const tournament = await storage.getTournament(tournamentId);\n      if (!tournament) {\n        throw new Error(\"Tournament not found\");\n      }\n\n      if (tournament.organizerId !== organizerId) {\n        throw new Error(\"Only the tournament organizer can advance rounds\");\n      }\n\n      const rounds = await storage.getTournamentRounds(tournamentId);\n      const currentRound = rounds.find((r) => r.status === \"active\");\n\n      if (!currentRound) {\n        throw new Error(\"No active round to advance\");\n      }\n\n      // Check if all matches in current round are completed\n      const currentMatches = await storage.getTournamentMatches(\n        tournamentId,\n        currentRound.id,\n      );\n      const pendingMatches = currentMatches.filter(\n        (m) => m.status !== \"completed\",\n      );\n\n      if (pendingMatches.length > 0) {\n        throw new Error(\"Cannot advance round - not all matches are completed\");\n      }\n\n      // Complete current round\n      await storage.updateTournamentRound(currentRound.id, {\n        status: \"completed\",\n        endTime: new Date(),\n      });\n\n      // Find and activate next round\n      const nextRound = rounds.find(\n        (r) => r.roundNumber === currentRound.roundNumber + 1,\n      );\n\n      if (nextRound) {\n        await storage.updateTournamentRound(nextRound.id, {\n          status: \"active\",\n          startTime: new Date(),\n        });\n\n        // Generate next round pairings if needed\n        const format = tournament.format as TournamentFormatType;\n        if (format === \"swiss\") {\n          await this.generateNextSwissRound(tournamentId, nextRound.id);\n        } else if (\n          format === \"single_elimination\" ||\n          format === \"double_elimination\"\n        ) {\n          await this.generateNextEliminationRound(\n            tournamentId,\n            nextRound.id,\n            currentMatches,\n          );\n        }\n      } else {\n        // Tournament is complete - update tournament status and determine winners (internal system update)\n        await storage.updateTournament(tournamentId, { endDate: new Date() });\n        // TODO: Create internal method for status updates\n        await storage.updateTournament(tournamentId, {\n          status: \"completed\",\n        } as any);\n\n        logger.info(\"Tournament completed\", { tournamentId });\n      }\n\n      return await storage.getTournament(tournamentId);\n    } catch (error) {\n      logger.error(\"Service error: Failed to advance round\", error, {\n        tournamentId,\n        organizerId,\n      });\n      throw error;\n    }\n  },\n\n  /**\n   * Report match result with score\n   */\n  async reportMatchResult(\n    tournamentId: string,\n    matchId: string,\n    winnerId: string,\n    reporterId: string,\n    player1Score?: number,\n    player2Score?: number,\n  ) {\n    try {\n      logger.info(\"Reporting match result\", {\n        tournamentId,\n        matchId,\n        winnerId,\n        reporterId,\n      });\n\n      // Get the tournament and verify permissions\n      const tournament = await storage.getTournament(tournamentId);\n      if (!tournament) {\n        throw new Error(\"Tournament not found\");\n      }\n\n      // Get the match by searching all tournament matches\n      const allMatches = await storage.getTournamentMatches(tournamentId);\n      const match = allMatches.find((m) => m.id === matchId);\n      if (!match) {\n        throw new Error(\"Match not found\");\n      }\n\n      // Verify the reporter is either the organizer or one of the players\n      const isOrganizer = tournament.organizerId === reporterId;\n      const isPlayer =\n        match.player1Id === reporterId || match.player2Id === reporterId;\n\n      if (!isOrganizer && !isPlayer) {\n        throw new Error(\n          \"Only organizers or participating players can report match results\",\n        );\n      }\n\n      // Verify the winner is one of the players\n      if (winnerId !== match.player1Id && winnerId !== match.player2Id) {\n        throw new Error(\"Winner must be one of the participating players\");\n      }\n\n      // Update the match with result - only update winnerId\n      // Note: loserId calculated but not stored - reserved for double elimination bracket tracking\n      const _loserId =\n        winnerId === match.player1Id ? match.player2Id : match.player1Id;\n      const updatedMatch = await storage.updateTournamentMatch(matchId, {\n        winnerId,\n        status: \"completed\",\n      });\n\n      // Create match result record for verification/tracking\n      const matchResult = await storage.createMatchResult({\n        matchId,\n        player1Score: player1Score || 0,\n        player2Score: player2Score || 0,\n        reportedBy: reporterId,\n        isVerified: isOrganizer, // Auto-verify if organizer reports\n        verifiedBy: isOrganizer ? reporterId : undefined,\n      });\n\n      logger.info(\"Match result reported successfully\", {\n        matchId,\n        winnerId,\n        matchResult: matchResult.id,\n      });\n      return { match: updatedMatch, result: matchResult };\n    } catch (error) {\n      logger.error(\"Service error: Failed to report match result\", error, {\n        tournamentId,\n        matchId,\n        winnerId,\n        reporterId,\n      });\n      throw error;\n    }\n  },\n\n  /**\n   * Get tournament with expanded details including participants, organizer, rounds, and matches\n   */\n  async getTournamentDetails(tournamentId: string) {\n    try {\n      logger.info(\"Fetching tournament details\", { tournamentId });\n\n      // Get base tournament\n      const tournament = await storage.getTournament(tournamentId);\n      if (!tournament) {\n        throw new Error(\"Tournament not found\");\n      }\n\n      // Get organizer details\n      const organizer = await storage.getUser(tournament.organizerId);\n      if (!organizer) {\n        throw new Error(\"Tournament organizer not found\");\n      }\n\n      // Get participants with user details (already included in tournament)\n      const participants = tournament.participants || [];\n\n      // Get rounds\n      const rounds = await storage.getTournamentRounds(tournamentId);\n\n      // Get matches with player details\n      const matches = await storage.getTournamentMatches(tournamentId);\n\n      return {\n        ...tournament,\n        organizer,\n        participants,\n        rounds,\n        matches,\n        participantCount: participants.length,\n        currentParticipants: participants.length,\n      };\n    } catch (error) {\n      logger.error(\"Service error: Failed to get tournament details\", error, {\n        tournamentId,\n      });\n      throw error;\n    }\n  },\n\n  /**\n   * Create a game session for a tournament match\n   */\n  async createMatchGameSession(\n    tournamentId: string,\n    matchId: string,\n    userId: string,\n  ) {\n    try {\n      logger.info(\"Creating game session for tournament match\", {\n        tournamentId,\n        matchId,\n        userId,\n      });\n\n      // Get the tournament and verify it exists\n      const tournament = await storage.getTournament(tournamentId);\n      if (!tournament) {\n        throw new Error(\"Tournament not found\");\n      }\n\n      // Get the match and verify it exists\n      const allMatches = await storage.getTournamentMatches(tournamentId);\n      const match = allMatches.find((m) => m.id === matchId);\n      if (!match || match.tournamentId !== tournamentId) {\n        throw new Error(\"Match not found in this tournament\");\n      }\n\n      // Verify the user is one of the players in this match\n      if (match.player1Id !== userId && match.player2Id !== userId) {\n        throw new Error(\n          \"Only participating players can create game sessions for their matches\",\n        );\n      }\n\n      // Note: gameSessionId doesn't exist in schema, skip this check\n      // Game sessions are tracked via events instead\n\n      // Create a tournament-specific event for the game session\n      const eventData = {\n        title: `${tournament.name} - Match ${(match as any).bracketPosition || match.matchNumber}`,\n        description: `Tournament match between players in ${tournament.name}`,\n        type: \"tournament\" as const,\n        startTime: new Date(), // Use startTime instead of date/time\n        location: `Tournament Match Room`,\n        communityId: tournament.communityId,\n        organizerId: userId,\n        maxAttendees: 4, // Players + spectators\n        isPublic: false, // Tournament matches should be private\n        // Note: events table doesn't have gameFormat field\n        playerSlots: 2, // Tournament matches are 1v1\n        alternateSlots: 0,\n      };\n\n      // Create the event for the game session\n      const event = await storage.createEvent({\n        ...eventData,\n        creatorId: userId,\n      });\n\n      // Create the game session\n      const sessionData = {\n        eventId: event.id,\n        hostId: userId,\n        gameType: tournament.gameType, // Add required gameType field\n        maxPlayers: 2,\n        currentPlayers: 0,\n        gameData: JSON.stringify({\n          // gameData should be JSON string\n          name: `Tournament Match - ${tournament.name}`,\n          format: tournament.format,\n          powerLevel: \"Tournament\",\n          description: `Match ${(match as any).bracketPosition || match.matchNumber} in tournament: ${tournament.name}`,\n          tournament: {\n            tournamentId: tournament.id,\n            matchId: match.id,\n            tournamentName: tournament.name,\n            bracketPosition:\n              (match as any).bracketPosition || match.matchNumber,\n          },\n        }),\n        communityId: tournament.communityId,\n      };\n\n      const gameSession = await storage.createGameSession(sessionData);\n\n      // Note: gameSessionId doesn't exist in tournamentMatches schema\n      // Link is tracked via eventId relationship instead\n      await storage.updateTournamentMatch(matchId, {\n        status: \"active\",\n        startTime: new Date(),\n      });\n\n      logger.info(\"Game session created for tournament match\", {\n        tournamentId,\n        matchId,\n        gameSessionId: gameSession.id,\n      });\n\n      return gameSession;\n    } catch (error) {\n      logger.error(\n        \"Service error: Failed to create match game session\",\n        error,\n        { tournamentId, matchId, userId },\n      );\n      throw error;\n    }\n  },\n\n  // ======================================\n  // HELPER METHODS FOR TOURNAMENT ENGINE\n  // ======================================\n\n  /**\n   * Seed participants (simple implementation - can be enhanced with ELO ratings)\n   */\n  seedParticipants(participants: (TournamentParticipant & { user: User })[]) {\n    // Simple seeding based on join order - can be enhanced with ranking systems\n    return [...participants].sort((a, b) => (a.seed || 0) - (b.seed || 0));\n  },\n\n  /**\n   * Calculate number of rounds for single elimination\n   */\n  calculateSingleEliminationRounds(participantCount: number): number {\n    return Math.ceil(Math.log2(participantCount));\n  },\n\n  /**\n   * Calculate rounds for double elimination\n   */\n  calculateDoubleEliminationRounds(participantCount: number) {\n    const winnerBracketRounds = Math.ceil(Math.log2(participantCount));\n    const loserBracketRounds = (winnerBracketRounds - 1) * 2;\n    return {\n      winnerBracket: winnerBracketRounds,\n      loserBracket: loserBracketRounds,\n    };\n  },\n\n  /**\n   * Calculate rounds for Swiss tournament\n   */\n  calculateSwissRounds(participantCount: number): number {\n    return Math.ceil(Math.log2(participantCount));\n  },\n\n  /**\n   * Get round name based on position\n   */\n  getRoundName(roundNumber: number, totalRounds: number): string {\n    const remaining = totalRounds - roundNumber + 1;\n\n    if (remaining === 1) return \"Finals\";\n    if (remaining === 2) return \"Semifinals\";\n    if (remaining === 3) return \"Quarterfinals\";\n    if (remaining === 4) return \"Round of 16\";\n    if (remaining === 5) return \"Round of 32\";\n\n    return `Round ${roundNumber}`;\n  },\n\n  /**\n   * Generate single elimination pairings\n   */\n  generateSingleEliminationPairings(\n    participants: (TournamentParticipant & { user: User })[],\n  ): PairingResult[] {\n    const pairings: PairingResult[] = [];\n    let bracketPosition = 1;\n\n    for (let i = 0; i < participants.length; i += 2) {\n      const player1 = participants[i];\n      const player2 = participants[i + 1] || null;\n\n      if (!player1) continue; // Skip if player1 is undefined\n\n      pairings.push({\n        player1: player1.userId,\n        player2: player2?.userId || null,\n        bracketPosition: bracketPosition++,\n      });\n    }\n\n    return pairings;\n  },\n\n  /**\n   * Generate Swiss pairings (simplified - can be enhanced with more sophisticated algorithms)\n   */\n  generateSwissPairings(\n    participants: (TournamentParticipant & { user: User })[],\n    previousResults: any[],\n  ): PairingResult[] {\n    // Simple Swiss pairing - pair participants with similar records\n    // In a real implementation, this would consider previous matchups, colors, etc.\n\n    const shuffled = [...participants].sort(() => Math.random() - 0.5);\n    const pairings: PairingResult[] = [];\n    let bracketPosition = 1;\n\n    for (let i = 0; i < shuffled.length; i += 2) {\n      const player1 = shuffled[i];\n      const player2 = shuffled[i + 1] || null;\n\n      if (!player1) continue; // Skip if player1 is undefined\n\n      pairings.push({\n        player1: player1.userId,\n        player2: player2?.userId || null,\n        bracketPosition: bracketPosition++,\n      });\n    }\n\n    return pairings;\n  },\n\n  /**\n   * Generate round robin pairings\n   */\n  generateRoundRobinPairings(\n    participants: (TournamentParticipant & { user: User })[],\n  ): PairingResult[][] {\n    const players = [...participants];\n    if (players.length % 2 !== 0) {\n      // Add a \"bye\" placeholder for odd number of players\n      players.push({ userId: \"BYE\", user: { id: \"BYE\" } } as any);\n    }\n\n    const rounds: PairingResult[][] = [];\n    const numRounds = players.length - 1;\n\n    for (let round = 0; round < numRounds; round++) {\n      const roundPairings: PairingResult[] = [];\n      let bracketPosition = 1;\n\n      for (let i = 0; i < players.length / 2; i++) {\n        const player1 = players[i];\n        const player2 = players[players.length - 1 - i];\n\n        if (\n          player1 &&\n          player2 &&\n          player1.userId !== \"BYE\" &&\n          player2.userId !== \"BYE\"\n        ) {\n          roundPairings.push({\n            player1: player1.userId,\n            player2: player2.userId,\n            bracketPosition: bracketPosition++,\n          });\n        }\n      }\n\n      rounds.push(roundPairings);\n\n      // Rotate players (except the first one)\n      const lastPlayer = players.pop();\n      if (lastPlayer) {\n        players.splice(1, 0, lastPlayer);\n      }\n    }\n\n    return rounds;\n  },\n\n  /**\n   * Create matches from pairings\n   */\n  async createMatches(\n    tournamentId: string,\n    roundId: string,\n    pairings: PairingResult[],\n  ) {\n    for (const pairing of pairings) {\n      const matchData: InsertTournamentMatch = {\n        tournamentId,\n        roundId,\n        matchNumber: pairing.bracketPosition, // Use matchNumber instead of bracketPosition\n        player1Id: pairing.player1,\n        player2Id: pairing.player2,\n        status: pairing.player2 ? \"pending\" : \"bye\",\n      };\n\n      await storage.createTournamentMatch(matchData);\n    }\n  },\n\n  /**\n   * Generate next Swiss round based on current standings\n   */\n  async generateNextSwissRound(tournamentId: string, roundId: string) {\n    // TODO: Implement sophisticated Swiss pairing algorithm\n    // For now, this is a placeholder\n    logger.info(\"Generating next Swiss round\", { tournamentId, roundId });\n  },\n\n  /**\n   * Generate next elimination round based on previous results\n   */\n  async generateNextEliminationRound(\n    tournamentId: string,\n    roundId: string,\n    previousMatches: any[],\n  ) {\n    // TODO: Implement elimination advancement logic\n    // For now, this is a placeholder\n    logger.info(\"Generating next elimination round\", { tournamentId, roundId });\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/users/users.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/users/users.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/features/users/users.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[590,593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[590,593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[656,659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[656,659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[858,861],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[858,861],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Note: UpsertUser type from @shared/schema reserved for user creation/update operations\n\nexport interface UpdateProfileRequest {\n  firstName?: string;\n  lastName?: string;\n  primaryCommunity?: string;\n  username?: string;\n  bio?: string;\n  location?: string;\n  website?: string;\n  status?: \"online\" | \"offline\" | \"away\" | \"busy\" | \"gaming\";\n  statusMessage?: string;\n  timezone?: string;\n  isPrivate?: boolean;\n  showOnlineStatus?: \"everyone\" | \"friends_only\" | \"private\";\n  allowDirectMessages?: \"everyone\" | \"friends_only\" | \"private\";\n}\n\nexport interface SocialLinksRequest {\n  links: any[];\n}\n\nexport interface UserSettingsRequest {\n  [key: string]: any;\n}\n\nexport interface FriendRequestRequest {\n  addresseeId: string;\n}\n\nexport interface FriendRequestResponse {\n  status: string;\n}\n\nexport interface MatchmakingPreferencesRequest {\n  [key: string]: any;\n}\n\nexport interface FindPlayersRequest {\n  gameType?: string;\n  skillLevel?: string;\n  communityId?: string;\n  pagination?: {\n    limit?: number;\n    cursor?: string;\n    page?: number;\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/health.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'authError' is defined but never used.","line":578,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":578,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'authError' is defined but never used.","line":772,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":772,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":793,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":793,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24633,24636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24633,24636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":793,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":793,"endColumn":55}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Load environment variables from .env.local for development only\nimport { config } from \"dotenv\";\nimport { resolve } from \"path\";\nimport { existsSync } from \"fs\";\n\n// Only load .env.local in development or if it exists\n// Use a more defensive approach for path resolution\nconst cwd = process.cwd();\nif (cwd && process.env.NODE_ENV !== \"production\") {\n  const envPath = resolve(cwd, \".env.local\");\n  if (existsSync(envPath)) {\n    config({ path: envPath });\n  }\n}\n\n// CRITICAL: Initialize Sentry BEFORE importing any other modules\n// This ensures error tracking captures all errors including initialization errors\nimport {\n  initializeSentry,\n  sentryRequestHandler,\n  sentryTracingHandler,\n  sentryErrorHandler,\n  flushSentry,\n} from \"./services/error-tracking\";\ninitializeSentry();\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { serveStatic, log } from \"./static-server\";\nimport { logger } from \"./logger\";\nimport { db, initializeDatabase } from \"@shared/database-unified\";\nimport {\n  validateAndLogEnvironment,\n  getEnvironmentStatus,\n} from \"./env-validation\";\nimport {\n  startTimer,\n  endTimer,\n  setupGracefulShutdown,\n  logMemoryConfiguration,\n  warmupCriticalPaths,\n} from \"./startup-optimization\";\nimport { sql } from \"drizzle-orm\";\n\n// Import feature-based routes\n// Note: authRoutes reserved for future feature-based auth routing\nimport {\n  communitiesRoutes,\n  userCommunitiesRouter,\n  themePreferencesRouter,\n} from \"./features/communities/communities.routes\";\nimport {\n  eventsRoutes,\n  userEventsRouter,\n  calendarEventsRouter,\n} from \"./features/events/events.routes\";\nimport {\n  usersRoutes,\n  friendsRouter,\n  friendRequestsRouter,\n  matchmakingRouter,\n} from \"./features/users/users.routes\";\nimport {\n  notificationsRoutes,\n  messagesRouter,\n  conversationsRouter,\n} from \"./features/messaging/messaging.routes\";\nimport { tournamentsRoutes } from \"./features/tournaments/tournaments.routes\";\nimport { gamesRoutes } from \"./features/games/games.routes\";\n\n// Import shared middleware\n// Note: errorHandler, requestLogger, corsHandler reserved for enhanced middleware setup\nimport { securityHeaders } from \"./validation\";\n\n// Import Auth.js configuration and webhook routes\n// Note: ExpressAuth reserved for direct Auth.js integration\n// LAZY: Import auth routes after database initialization to avoid accessing db before it's ready\n// import authRoutesFixed from \"./auth/auth.routes\";\nimport webhooksRouter from \"./routes/webhooks\";\nimport notificationPreferencesRouter from \"./routes/notification-preferences\";\nimport monitoringRouter from \"./routes/monitoring\";\nimport infrastructureTestsRouter from \"./routes/infrastructure-tests\";\nimport adminRoutes from \"./admin/admin.routes\";\nimport { monitoringService } from \"./services/monitoring-service\";\n\n// Import email verification route dependencies\nimport { validateEmailSchema, validateRequest } from \"./validation\";\nimport { authRateLimit } from \"./rate-limiting\";\nimport { sendEmailVerificationEmail } from \"./email-service\";\nimport {\n  generateEmailVerificationJWT,\n  verifyEmailVerificationJWT,\n  TOKEN_EXPIRY,\n} from \"./auth/tokens\";\nimport { storage } from \"./storage\";\nimport { getAuthUserId } from \"./auth\";\nimport { z } from \"zod\";\nimport { auditSecurityConfiguration } from \"./utils/security.utils\";\n\nconst app = express();\n\n// Trust proxy for correct x-forwarded-* headers (required for Auth.js host validation)\n// Use \"1\" to trust only the first proxy (safer than \"true\" for rate limiting)\napp.set(\"trust proxy\", 1);\n\n// CRITICAL: Add Sentry request and tracing handlers FIRST\n// This ensures all requests are tracked for error monitoring and performance\napp.use(sentryRequestHandler());\napp.use(sentryTracingHandler());\n\n// Basic middleware - body parsers MUST come before Auth.js routes\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Apply security headers (including CSP) before other routes\napp.use(securityHeaders);\n\n// Track initialization state for health checks\nlet initializationStatus = {\n  status: \"initializing\" as \"initializing\" | \"ready\" | \"degraded\",\n  startupTime: new Date(),\n  env: false,\n  security: false,\n  database: false,\n  routes: false,\n};\n\n// CRITICAL: Set up a basic health check IMMEDIATELY before any async initialization\n// This ensures Cloud Run sees the container as healthy while initialization proceeds\napp.get(\"/api/health\", async (_req, res) => {\n  const uptime = Date.now() - initializationStatus.startupTime.getTime();\n  const envStatus = getEnvironmentStatus();\n\n  // Check database connectivity - but don't fail health check if DB is unavailable\n  let dbStatus = \"unknown\";\n  if (initializationStatus.database) {\n    try {\n      if (process.env.DATABASE_URL) {\n        await db\n          .select({ count: sql`COUNT(*)` })\n          .from(sql`(SELECT 1)`)\n          .limit(1);\n        dbStatus = \"connected\";\n      } else {\n        dbStatus = \"not_configured\";\n      }\n    } catch (error) {\n      dbStatus = \"disconnected\";\n      logger.warn(\"Database health check failed\", error);\n    }\n  } else {\n    dbStatus = \"initializing\";\n  }\n\n  // For Cloud Run compatibility, always return 200 OK if server is running\n  // Even during initialization or with degraded services, the container is \"healthy\" for TCP probe\n  const overallStatus =\n    initializationStatus.status === \"initializing\" ? \"initializing\" : \"ok\";\n\n  res.json({\n    status: overallStatus,\n    timestamp: new Date().toISOString(),\n    uptime: Math.floor(uptime / 1000), // seconds\n    initialization: initializationStatus.status,\n    environment: {\n      nodeEnv: process.env.NODE_ENV || \"development\",\n      valid: envStatus.valid,\n      requiredVars: envStatus.requiredCount,\n      missingRequired: envStatus.missingRequired,\n      missingRecommended: envStatus.missingRecommended,\n    },\n    services: {\n      database: dbStatus,\n      port: process.env.PORT || \"default\",\n    },\n  });\n});\n\n// Create HTTP server immediately\nconst { createServer } = await import(\"http\");\nconst server = createServer(app);\n\n// CRITICAL: Start listening on PORT immediately BEFORE initialization\n// This allows Cloud Run to detect the container as healthy while initialization proceeds in background\nconst port = parseInt(\n  process.env.PORT ??\n    (app.get(\"env\") === \"development\"\n      ? \"5000\"\n      : (() => {\n          throw new Error(\n            \"PORT environment variable must be set in production\",\n          );\n        })()),\n  10,\n);\n\nserver.listen(\n  {\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  },\n  () => {\n    logger.info(`Server listening on port ${port} - starting initialization`, {\n      port,\n      host: \"0.0.0.0\",\n      environment: process.env.NODE_ENV,\n    });\n    log(`serving on port ${port}`);\n  },\n);\n\n// Run initialization asynchronously AFTER server starts listening\n(async () => {\n  // Log memory configuration recommendations\n  logMemoryConfiguration();\n\n  startTimer(\"total-startup\");\n\n  // Validate environment variables early in startup\n  startTimer(\"env-validation\");\n  try {\n    validateAndLogEnvironment();\n    endTimer(\"env-validation\");\n    initializationStatus.env = true;\n  } catch (error) {\n    endTimer(\"env-validation\");\n    logger.error(\"Environment validation failed during startup\", error);\n    initializationStatus.status = \"degraded\";\n    if (process.env.NODE_ENV === \"production\") {\n      logger.error(\"Environment validation failed - cannot continue\");\n      process.exit(1);\n    }\n  }\n\n  // Run security audit\n  startTimer(\"security-audit\");\n  try {\n    const securityAudit = auditSecurityConfiguration();\n    endTimer(\"security-audit\");\n\n    if (!securityAudit.passed) {\n      logger.warn(\"Security audit found issues\", {\n        issues: securityAudit.issues,\n      });\n      initializationStatus.security = false;\n      if (process.env.NODE_ENV === \"production\") {\n        logger.error(\"Security audit failed in production - stopping server\", {\n          issues: securityAudit.issues,\n        });\n        process.exit(1);\n      }\n    } else {\n      logger.info(\"Security audit passed\");\n      initializationStatus.security = true;\n    }\n  } catch (error) {\n    endTimer(\"security-audit\");\n    logger.error(\"Security audit failed during startup\", error);\n    initializationStatus.status = \"degraded\";\n    if (process.env.NODE_ENV === \"production\") {\n      process.exit(1);\n    }\n  }\n\n  // Initialize database on server startup\n  startTimer(\"database-init\");\n  try {\n    await initializeDatabase();\n    endTimer(\"database-init\");\n    logger.info(\"Database initialized successfully\");\n    initializationStatus.database = true;\n  } catch (error) {\n    endTimer(\"database-init\");\n    logger.error(\"Failed to initialize database\", error);\n    initializationStatus.database = false;\n    initializationStatus.status = \"degraded\";\n    if (process.env.NODE_ENV === \"production\") {\n      logger.warn(\n        \"Continuing startup with database unavailable - some endpoints will be degraded\",\n      );\n    } else {\n      process.exit(1);\n    }\n  }\n\n  // Warm up critical paths for faster initial requests\n  await warmupCriticalPaths();\n\n  // Set up Auth.js routes AFTER database initialization\n  // This ensures db is ready when DrizzleAdapter is accessed\n  // CRITICAL: Use \"/api/auth/*\" pattern to properly handle all Auth.js sub-routes\n  const { default: authRoutesFixed } = await import(\"./auth/auth.routes\");\n  app.use(\"/api/auth/*\", authRoutesFixed);\n\n  // Register feature-based routes (skip /api/auth since it's handled by authRouter)\n  // app.use('/api/auth', authRoutes); // DISABLED - conflicts with Auth.js\n  app.use(\"/api/communities\", communitiesRoutes);\n  app.use(\"/api/user/communities\", userCommunitiesRouter);\n  app.use(\"/api/user/theme-preferences\", themePreferencesRouter);\n  app.use(\"/api/events\", eventsRoutes);\n  app.use(\"/api\", gamesRoutes);\n  app.use(\"/api/user/events\", userEventsRouter);\n  app.use(\"/api/calendar/events\", calendarEventsRouter);\n  app.use(\"/api/user\", usersRoutes);\n  app.use(\"/api/friends\", friendsRouter);\n  app.use(\"/api/friend-requests\", friendRequestsRouter);\n  app.use(\"/api/matchmaking\", matchmakingRouter);\n  app.use(\"/api/notifications\", notificationsRoutes);\n  app.use(\"/api/messages\", messagesRouter);\n  app.use(\"/api/conversations\", conversationsRouter);\n  app.use(\"/api/tournaments\", tournamentsRoutes);\n\n  // Register webhook routes\n  app.use(\"/api/webhooks\", webhooksRouter);\n\n  // Register notification preferences routes\n  app.use(\"/api/notification-preferences\", notificationPreferencesRouter);\n\n  // Register monitoring and alerting routes\n  app.use(\"/api/monitoring\", monitoringRouter);\n\n  // Register infrastructure testing routes\n  app.use(\"/api/tests\", infrastructureTestsRouter);\n\n  // Register admin routes\n  app.use(\"/api/admin\", adminRoutes);\n\n  // Email verification endpoints (moved from routes.ts to avoid Auth.js conflicts)\n  app.post(\n    \"/api/email/send-verification-email\",\n    authRateLimit,\n    validateRequest(validateEmailSchema),\n    async (req, res): Promise<void> => {\n      try {\n        const { email } = req.body;\n\n        if (!email) {\n          res.status(400).json({ message: \"Email is required\" });\n          return;\n        }\n\n        // Check if user exists\n        const user = await storage.getUserByEmail(email);\n\n        if (!user) {\n          // Don't reveal if email exists to prevent enumeration attacks\n          res.json({\n            message:\n              \"If an account with that email exists, a verification email has been sent.\",\n          });\n          return;\n        }\n\n        // Check if email is already verified - but don't reveal this to prevent enumeration\n        if (user.isEmailVerified) {\n          res.json({\n            message:\n              \"If an account with that email exists, a verification email has been sent.\",\n          });\n          return;\n        }\n\n        // Invalidate any existing verification tokens for this user\n        await storage.invalidateUserEmailVerificationTokens(user.id);\n\n        // Generate JWT token for email verification\n        const verificationToken = await generateEmailVerificationJWT(\n          user.id,\n          email,\n          TOKEN_EXPIRY.EMAIL_VERIFICATION,\n        );\n\n        // Store token in database\n        const expiresAt = new Date(\n          Date.now() + TOKEN_EXPIRY.EMAIL_VERIFICATION * 1000,\n        );\n        await storage.createEmailVerificationToken({\n          userId: user.id,\n          email,\n          token: verificationToken,\n          expiresAt,\n        });\n\n        // Send verification email with trusted base URL\n        const baseUrl =\n          process.env.AUTH_URL ||\n          process.env.PUBLIC_WEB_URL ||\n          \"https://shuffleandsync.org\";\n        await sendEmailVerificationEmail(\n          email,\n          verificationToken,\n          baseUrl,\n          user.firstName || undefined,\n        );\n\n        res.json({\n          message:\n            \"If an account with that email exists, a verification email has been sent.\",\n        });\n      } catch (error) {\n        logger.error(\"Failed to send verification email\", error);\n        res.status(500).json({ message: \"Failed to send verification email\" });\n        return;\n      }\n    },\n  );\n\n  app.get(\"/api/email/verify-email\", async (req, res): Promise<void> => {\n    try {\n      const { token } = req.query;\n\n      if (!token || typeof token !== \"string\") {\n        res.status(400).json({ message: \"Verification token is required\" });\n        return;\n      }\n\n      // Verify JWT token\n      const jwtResult = await verifyEmailVerificationJWT(token);\n\n      if (!jwtResult.valid) {\n        res\n          .status(400)\n          .json({ message: \"Invalid or expired verification token\" });\n        return;\n      }\n\n      // Check token in database\n      const dbToken = await storage.getEmailVerificationToken(token);\n\n      if (!dbToken) {\n        res\n          .status(400)\n          .json({ message: \"Invalid or expired verification token\" });\n        return;\n      }\n\n      // Mark token as used\n      await storage.markEmailVerificationTokenAsUsed(token);\n\n      // Update user's email verification status\n      await storage.updateUser(dbToken.userId, {\n        isEmailVerified: true,\n        emailVerifiedAt: new Date(),\n      });\n\n      res.json({\n        message: \"Email verified successfully\",\n        redirectUrl: \"/dashboard\",\n      });\n    } catch (error) {\n      logger.error(\"Failed to verify email\", error);\n      res.status(500).json({ message: \"Failed to verify email\" });\n      return;\n    }\n  });\n\n  app.post(\n    \"/api/email/resend-verification-email\",\n    authRateLimit,\n    async (req, res): Promise<void> => {\n      try {\n        // Get user from session or request body\n        let userId;\n        try {\n          userId = getAuthUserId(req);\n        } catch {\n          // No session, use email from body\n        }\n\n        const { email } = req.body;\n\n        if (!userId && !email) {\n          res\n            .status(400)\n            .json({ message: \"User session or email is required\" });\n          return;\n        }\n\n        let user;\n        if (userId) {\n          user = await storage.getUser(userId);\n        } else if (email) {\n          user = await storage.getUserByEmail(email);\n        }\n\n        if (!user) {\n          // Don't reveal if user exists to prevent enumeration attacks\n          res.json({\n            message:\n              \"If an account exists, a verification email has been sent.\",\n          });\n          return;\n        }\n\n        // Check if email is already verified - but don't reveal this to prevent enumeration\n        if (user.isEmailVerified) {\n          res.json({\n            message:\n              \"If an account exists, a verification email has been sent.\",\n          });\n          return;\n        }\n\n        // Check for existing unexpired token\n        const existingToken = await storage.getEmailVerificationTokenByUserId(\n          user.id,\n        );\n        if (existingToken) {\n          res.status(429).json({\n            message:\n              \"A verification email was already sent recently. Please check your email or wait before requesting another.\",\n          });\n          return;\n        }\n\n        // Validate user email exists\n        if (!user.email) {\n          res.status(400).json({ message: \"User email not found\" });\n          return;\n        }\n\n        // Invalidate any existing verification tokens for this user\n        await storage.invalidateUserEmailVerificationTokens(user.id);\n\n        // Generate new JWT token\n        const verificationToken = await generateEmailVerificationJWT(\n          user.id,\n          user.email,\n          TOKEN_EXPIRY.EMAIL_VERIFICATION,\n        );\n\n        // Store token in database\n        const expiresAt = new Date(\n          Date.now() + TOKEN_EXPIRY.EMAIL_VERIFICATION * 1000,\n        );\n        await storage.createEmailVerificationToken({\n          userId: user.id,\n          email: user.email,\n          token: verificationToken,\n          expiresAt,\n        });\n\n        // Send verification email with trusted base URL\n        const baseUrl =\n          process.env.AUTH_URL ||\n          process.env.PUBLIC_WEB_URL ||\n          \"https://shuffleandsync.org\";\n        await sendEmailVerificationEmail(\n          user.email,\n          verificationToken,\n          baseUrl,\n          user.firstName || undefined,\n        );\n\n        res.json({\n          message: \"If an account exists, a verification email has been sent.\",\n        });\n      } catch (error) {\n        logger.error(\"Failed to resend verification email\", error);\n        res\n          .status(500)\n          .json({ message: \"Failed to resend verification email\" });\n        return;\n      }\n    },\n  );\n\n  // Email change endpoints (Phase 2)\n  app.post(\n    \"/api/email/initiate-email-change\",\n    authRateLimit,\n    async (req, res): Promise<void> => {\n      try {\n        // Require authenticated user\n        let userId;\n        try {\n          userId = getAuthUserId(req);\n        } catch (authError) {\n          res.status(401).json({ message: \"Authentication required\" });\n          return;\n        }\n\n        // Validate request body with Zod\n        const emailChangeSchema = z.object({\n          newEmail: z.string().email(\"Please enter a valid email address\"),\n        });\n\n        const validation = emailChangeSchema.safeParse(req.body);\n        if (!validation.success) {\n          res.status(400).json({\n            message:\n              validation.error.errors[0]?.message || \"Invalid email address\",\n          });\n          return;\n        }\n\n        const { newEmail } = validation.data;\n\n        // Get current user\n        const user = await storage.getUser(userId);\n        if (!user || !user.email) {\n          res.status(404).json({ message: \"User not found\" });\n          return;\n        }\n\n        // Check if new email is same as current\n        if (user.email === newEmail) {\n          res\n            .status(400)\n            .json({\n              message: \"New email address must be different from current email\",\n            });\n          return;\n        }\n\n        // Check if new email is already taken by another user\n        const existingUser = await storage.getUserByEmail(newEmail);\n        if (existingUser && existingUser.id !== userId) {\n          res\n            .status(409)\n            .json({\n              message: \"Email address is already in use by another account\",\n            });\n          return;\n        }\n\n        // Check for existing pending email change request\n        const existingRequest = await storage.getUserEmailChangeRequest(userId);\n        if (existingRequest) {\n          res.status(429).json({\n            message:\n              \"An email change request is already pending. Please complete or cancel the existing request first.\",\n          });\n          return;\n        }\n\n        // Create email change request\n        const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n        const emailChangeRequest = await storage.createEmailChangeRequest({\n          userId,\n          currentEmail: user.email,\n          newEmail,\n          status: \"pending\",\n          expiresAt,\n        });\n\n        // Generate JWT token for email change verification\n        const verificationToken = await generateEmailVerificationJWT(\n          userId,\n          newEmail,\n          TOKEN_EXPIRY.EMAIL_VERIFICATION,\n        );\n\n        // Store email change token\n        const tokenExpiresAt = new Date(\n          Date.now() + TOKEN_EXPIRY.EMAIL_VERIFICATION * 1000,\n        );\n        await storage.createEmailChangeToken({\n          requestId: emailChangeRequest.id,\n          token: verificationToken,\n          type: \"new_email\", // This is for verifying the new email\n          expiresAt: tokenExpiresAt,\n        });\n\n        // Send verification email to new email address\n        const baseUrl =\n          process.env.AUTH_URL ||\n          process.env.PUBLIC_WEB_URL ||\n          \"https://shuffleandsync.org\";\n        await sendEmailVerificationEmail(\n          newEmail,\n          verificationToken,\n          baseUrl,\n          user.firstName || undefined,\n        );\n\n        res.json({\n          message:\n            \"Email change verification sent to your new email address. Please check your inbox and click the verification link.\",\n          expiresAt: expiresAt.toISOString(),\n        });\n      } catch (error) {\n        logger.error(\"Failed to initiate email change\", error);\n        res.status(500).json({ message: \"Failed to initiate email change\" });\n        return;\n      }\n    },\n  );\n\n  app.get(\n    \"/api/email/confirm-email-change\",\n    authRateLimit,\n    async (req, res): Promise<void> => {\n      try {\n        const { token } = req.query;\n\n        if (!token || typeof token !== \"string\") {\n          res\n            .status(400)\n            .json({ message: \"Email change verification token is required\" });\n          return;\n        }\n\n        // Verify JWT token\n        const jwtResult = await verifyEmailVerificationJWT(token);\n\n        if (!jwtResult.valid) {\n          res\n            .status(400)\n            .json({ message: \"Invalid or expired verification token\" });\n          return;\n        }\n\n        // Check token in database\n        const dbToken = await storage.getEmailChangeToken(token);\n\n        if (!dbToken) {\n          res\n            .status(400)\n            .json({ message: \"Invalid or expired verification token\" });\n          return;\n        }\n\n        // Get the email change request\n        const emailChangeRequest = await storage.getEmailChangeRequest(\n          dbToken.requestId,\n        );\n\n        if (!emailChangeRequest || emailChangeRequest.status !== \"pending\") {\n          res\n            .status(400)\n            .json({ message: \"Invalid or expired email change request\" });\n          return;\n        }\n\n        // Mark token as used\n        await storage.markEmailChangeTokenAsUsed(token);\n\n        // Update email change request status\n        await storage.updateEmailChangeRequest(emailChangeRequest.id, {\n          status: \"verified\",\n        });\n\n        // Update user's email address\n        await storage.updateUser(emailChangeRequest.userId, {\n          email: emailChangeRequest.newEmail,\n          isEmailVerified: true,\n          emailVerifiedAt: new Date(),\n        });\n\n        res.json({\n          message: \"Email address updated successfully\",\n          redirectUrl: \"/dashboard\",\n        });\n      } catch (error) {\n        logger.error(\"Failed to confirm email change\", error);\n        res.status(500).json({ message: \"Failed to confirm email change\" });\n        return;\n      }\n    },\n  );\n\n  app.post(\n    \"/api/email/cancel-email-change\",\n    authRateLimit,\n    async (req, res): Promise<void> => {\n      try {\n        // Require authenticated user\n        let userId;\n        try {\n          userId = getAuthUserId(req);\n        } catch (authError) {\n          res.status(401).json({ message: \"Authentication required\" });\n          return;\n        }\n\n        // Cancel any pending email change request\n        await storage.cancelEmailChangeRequest(userId);\n\n        res.json({ message: \"Email change request cancelled successfully\" });\n      } catch (error) {\n        logger.error(\"Failed to cancel email change\", error);\n        res.status(500).json({ message: \"Failed to cancel email change\" });\n      }\n    },\n  );\n\n  // CRITICAL: Add Sentry error handler BEFORE other error handlers\n  // This ensures all errors are captured by Sentry\n  app.use(sentryErrorHandler());\n\n  // Basic error handler\n  app.use((err: any, req: Request, res: Response, next: NextFunction) => {\n    console.error(\"Server error:\", err.message);\n    res.status(500).json({ message: \"Internal server error\" });\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  // CRITICAL: Check process.env.NODE_ENV directly (not app.get(\"env\")) for reliability\n  // Only load vite in explicit development mode to avoid module errors in production\n  if (process.env.NODE_ENV === \"development\") {\n    // Use dynamic import with runtime path resolution to avoid bundling vite in production\n    try {\n      const viteModule = await import(`./vite.js`);\n      await viteModule.setupVite(app, server);\n    } catch (error) {\n      console.error(\"Failed to load vite module:\", error);\n      // Fallback to static serving if vite module fails to load\n      serveStatic(app);\n    }\n  } else {\n    serveStatic(app);\n  }\n\n  // Mark routes as initialized\n  initializationStatus.routes = true;\n  initializationStatus.status = \"ready\";\n  endTimer(\"total-startup\");\n  logger.info(\"Server initialization complete\", {\n    status: initializationStatus.status,\n  });\n\n  // Setup graceful shutdown handlers with server and database references\n  const { closeDatabaseConnections } = await import(\"@shared/database-unified\");\n  setupGracefulShutdown(server, { drizzle: db, closeDatabaseConnections });\n\n  // Add Sentry flush to shutdown process\n  process.on(\"SIGTERM\", async () => {\n    logger.info(\"SIGTERM received, flushing Sentry events\");\n    await flushSentry(2000);\n  });\n\n  process.on(\"SIGINT\", async () => {\n    logger.info(\"SIGINT received, flushing Sentry events\");\n    await flushSentry(2000);\n  });\n\n  // Start monitoring service after server is running\n  try {\n    monitoringService.start();\n    logger.info(\"Monitoring service started\");\n  } catch (error) {\n    logger.warn(\"Failed to start monitoring service\", error);\n  }\n})().catch((error) => {\n  logger.error(\"Fatal error during server initialization\", error);\n  process.exit(1);\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/logger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1193,1196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1193,1196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1557,1560],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1557,1560],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1576,1579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1576,1579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1615,1618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1615,1618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2446,2449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2446,2449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2461,2464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2461,2464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3029,3032],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3029,3032],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3363,3366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3363,3366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3698,3701],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3698,3701],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":156,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4224,4227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4224,4227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"interface LogLevel {\n  ERROR: 0;\n  WARN: 1;\n  INFO: 2;\n  DEBUG: 3;\n}\n\nconst LOG_LEVELS: LogLevel = {\n  ERROR: 0,\n  WARN: 1,\n  INFO: 2,\n  DEBUG: 3,\n};\n\n/**\n * Logger class for application-wide logging with structured output\n * Supports both development (human-readable) and production (JSON) formats\n */\nclass Logger {\n  private logLevel: number;\n  private isDevelopment: boolean;\n  private useStructuredLogging: boolean;\n\n  constructor() {\n    this.isDevelopment = process.env.NODE_ENV === \"development\";\n\n    // Configure log level based on environment variable or defaults\n    const configuredLevel = process.env.LOG_LEVEL?.toUpperCase();\n    if (configuredLevel && configuredLevel in LOG_LEVELS) {\n      this.logLevel = LOG_LEVELS[configuredLevel as keyof LogLevel];\n    } else {\n      this.logLevel = this.isDevelopment ? LOG_LEVELS.DEBUG : LOG_LEVELS.INFO;\n    }\n\n    // Use structured JSON logging in production for better log aggregation\n    this.useStructuredLogging =\n      !this.isDevelopment && process.env.STRUCTURED_LOGGING !== \"false\";\n  }\n\n  /**\n   * Format message for human-readable output (development)\n   */\n  private formatMessage(level: string, message: string, context?: any): string {\n    const timestamp = new Date().toISOString();\n    const contextStr = context ? ` | Context: ${JSON.stringify(context)}` : \"\";\n    return `[${timestamp}] [${level}] ${message}${contextStr}`;\n  }\n\n  /**\n   * Format message as structured JSON (production)\n   */\n  private formatStructured(\n    level: string,\n    message: string,\n    error?: Error | any,\n    context?: any,\n  ): string {\n    const logEntry: any = {\n      timestamp: new Date().toISOString(),\n      level: level.toLowerCase(),\n      message,\n      environment: process.env.NODE_ENV || \"development\",\n      service: \"shuffle-and-sync\",\n    };\n\n    if (context) {\n      logEntry.context = context;\n    }\n\n    if (error) {\n      if (error instanceof Error) {\n        logEntry.error = {\n          name: error.name,\n          message: error.message,\n          stack: error.stack,\n        };\n      } else {\n        logEntry.error = error;\n      }\n    }\n\n    // Add request ID if available (from async local storage or context)\n    if (context?.requestId) {\n      logEntry.requestId = context.requestId;\n    }\n\n    return JSON.stringify(logEntry);\n  }\n\n  private shouldLog(level: number): boolean {\n    return level <= this.logLevel;\n  }\n\n  error(message: string, error?: Error | any, context?: any): void {\n    if (this.shouldLog(LOG_LEVELS.ERROR)) {\n      if (this.useStructuredLogging) {\n        console.error(this.formatStructured(\"ERROR\", message, error, context));\n      } else {\n        const errorInfo =\n          error instanceof Error\n            ? `\\nError: ${error.message}\\nStack: ${error.stack}`\n            : error\n              ? `\\nError Data: ${JSON.stringify(error)}`\n              : \"\";\n        console.error(\n          this.formatMessage(\"ERROR\", message, context) + errorInfo,\n        );\n      }\n    }\n  }\n\n  warn(message: string, context?: any): void {\n    if (this.shouldLog(LOG_LEVELS.WARN)) {\n      if (this.useStructuredLogging) {\n        console.warn(\n          this.formatStructured(\"WARN\", message, undefined, context),\n        );\n      } else {\n        console.warn(this.formatMessage(\"WARN\", message, context));\n      }\n    }\n  }\n\n  info(message: string, context?: any): void {\n    if (this.shouldLog(LOG_LEVELS.INFO)) {\n      if (this.useStructuredLogging) {\n        console.info(\n          this.formatStructured(\"INFO\", message, undefined, context),\n        );\n      } else {\n        console.info(this.formatMessage(\"INFO\", message, context));\n      }\n    }\n  }\n\n  debug(message: string, context?: any): void {\n    if (this.shouldLog(LOG_LEVELS.DEBUG)) {\n      if (this.useStructuredLogging) {\n        console.log(\n          this.formatStructured(\"DEBUG\", message, undefined, context),\n        );\n      } else {\n        console.log(this.formatMessage(\"DEBUG\", message, context));\n      }\n    }\n  }\n\n  /**\n   * Log API request (development mode provides detailed output, production uses structured format)\n   */\n  apiRequest(\n    method: string,\n    path: string,\n    statusCode: number,\n    duration: number,\n    response?: any,\n  ): void {\n    if (this.isDevelopment) {\n      let logLine = `${method} ${path} ${statusCode} in ${duration}ms`;\n      if (response) {\n        logLine += ` :: ${JSON.stringify(response)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      console.log(logLine);\n    } else if (this.shouldLog(LOG_LEVELS.INFO)) {\n      // In production, log structured API request data\n      console.info(\n        this.formatStructured(\"INFO\", \"API Request\", undefined, {\n          method,\n          path,\n          statusCode,\n          duration,\n          type: \"api_request\",\n        }),\n      );\n    }\n  }\n\n  /**\n   * Get current log level name\n   */\n  getLogLevel(): string {\n    const levels = Object.entries(LOG_LEVELS);\n    const level = levels.find(([_, value]) => value === this.logLevel);\n    return level ? level[0] : \"UNKNOWN\";\n  }\n\n  /**\n   * Check if structured logging is enabled\n   */\n  isStructuredLoggingEnabled(): boolean {\n    return this.useStructuredLogging;\n  }\n}\n\nexport const logger = new Logger();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/middleware/cache-middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1682,1685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1682,1685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2701,2704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2701,2704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3198,3201],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3198,3201],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4467,4470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4467,4470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Request, Response, NextFunction } from \"express\";\nimport { cacheService } from \"../services/cache-service\";\nimport { logger } from \"../logger\";\n\n/**\n * Cache middleware for API responses\n */\nexport interface CacheOptions {\n  ttl?: number; // Time to live in seconds\n  keyGenerator?: (req: Request) => string;\n  skipCache?: (req: Request) => boolean;\n  skipCacheIf?: (req: Request, res: Response) => boolean;\n}\n\n/**\n * Express middleware for caching API responses\n */\nexport function cacheMiddleware(options: CacheOptions = {}) {\n  const {\n    ttl = 60, // Default 1 minute\n    keyGenerator = defaultKeyGenerator,\n    skipCache = () => false,\n    skipCacheIf = () => false,\n  } = options;\n\n  return async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      // Skip caching for non-GET requests\n      if (req.method !== \"GET\") {\n        return next();\n      }\n\n      // Skip if cache is disabled for this request\n      if (skipCache(req)) {\n        return next();\n      }\n\n      const cacheKey = keyGenerator(req);\n\n      // Try to get cached response\n      const cachedResponse = await cacheService.get(cacheKey);\n\n      if (cachedResponse) {\n        logger.debug(\"Cache hit\", { cacheKey, path: req.path });\n\n        // Set cache headers\n        res.set(\"X-Cache\", \"HIT\");\n        res.set(\"Cache-Control\", `public, max-age=${ttl}`);\n\n        return res.json(cachedResponse);\n      }\n\n      // Cache miss - intercept response\n      logger.debug(\"Cache miss\", { cacheKey, path: req.path });\n\n      // Store original json method\n      const originalJson = res.json.bind(res);\n\n      // Override json method to cache response\n      res.json = function (body: any) {\n        // Check if we should skip caching this response\n        if (\n          !skipCacheIf(req, res) &&\n          res.statusCode >= 200 &&\n          res.statusCode < 300\n        ) {\n          // Cache successful responses only\n          cacheService.set(cacheKey, body, ttl).catch((error) => {\n            logger.error(\"Failed to cache response\", { cacheKey, error });\n          });\n        }\n\n        // Set cache headers\n        res.set(\"X-Cache\", \"MISS\");\n        res.set(\"Cache-Control\", `public, max-age=${ttl}`);\n\n        // Call original json method\n        return originalJson(body);\n      };\n\n      next();\n    } catch (error) {\n      logger.error(\"Cache middleware error\", { error, path: req.path });\n      next(); // Continue without caching on error\n    }\n  };\n}\n\n/**\n * Default cache key generator\n */\nfunction defaultKeyGenerator(req: Request): string {\n  const baseUrl = req.baseUrl || \"\";\n  const path = req.path || \"\";\n  const query = JSON.stringify(req.query || {});\n  const userId = (req as any).user?.id || \"anonymous\";\n\n  return `api:${baseUrl}${path}:${userId}:${Buffer.from(query).toString(\"base64\")}`;\n}\n\n/**\n * Cache invalidation middleware\n */\nexport function invalidateCacheMiddleware(patterns: string[]) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      // Store original json method\n      const originalJson = res.json.bind(res);\n\n      // Override json method to invalidate cache after successful response\n      res.json = function (body: any) {\n        // Invalidate cache patterns after successful mutations\n        if (res.statusCode >= 200 && res.statusCode < 300) {\n          Promise.all(\n            patterns.map((pattern) => cacheService.deletePattern(pattern)),\n          ).catch((error) => {\n            logger.error(\"Failed to invalidate cache\", { patterns, error });\n          });\n        }\n\n        return originalJson(body);\n      };\n\n      next();\n    } catch (error) {\n      logger.error(\"Cache invalidation middleware error\", { error, patterns });\n      next();\n    }\n  };\n}\n\n/**\n * Predefined cache configurations\n */\nexport const cacheConfigs = {\n  // Short-lived cache for frequently changing data\n  shortCache: {\n    ttl: 30, // 30 seconds\n    skipCacheIf: (req: Request, res: Response) => res.statusCode !== 200,\n  },\n\n  // Medium cache for relatively stable data\n  mediumCache: {\n    ttl: 300, // 5 minutes\n    skipCacheIf: (req: Request, res: Response) => res.statusCode !== 200,\n  },\n\n  // Long cache for rarely changing data\n  longCache: {\n    ttl: 1800, // 30 minutes\n    skipCacheIf: (req: Request, res: Response) => res.statusCode !== 200,\n  },\n\n  // User-specific cache\n  userCache: {\n    ttl: 300, // 5 minutes\n    keyGenerator: (req: Request) => {\n      const userId = (req as any).user?.id || \"anonymous\";\n      const path = req.path;\n      const query = JSON.stringify(req.query);\n      return `user:${userId}:${path}:${Buffer.from(query).toString(\"base64\")}`;\n    },\n  },\n\n  // Analytics cache\n  analyticsCache: {\n    ttl: 60, // 1 minute for analytics\n    keyGenerator: (req: Request) => {\n      const path = req.path;\n      const query = JSON.stringify(req.query);\n      return `analytics:${path}:${Buffer.from(query).toString(\"base64\")}`;\n    },\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/middleware/error-handling.middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":130,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":229,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6022,6025],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6022,6025],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":235,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6129,6132],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6129,6132],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Centralized Error Handling Middleware\n *\n * This module provides comprehensive error handling following Copilot best practices\n * for maintainable, scalable error management across the application.\n */\n\nimport { Request, Response, NextFunction } from \"express\";\nimport { Server } from \"http\";\nimport { logger } from \"../logger\";\nimport { ZodError } from \"zod\";\nimport { nanoid } from \"nanoid\";\n\n// Custom error types for better error categorization\nexport class AppError extends Error {\n  public readonly statusCode: number;\n  public readonly isOperational: boolean;\n  public readonly errorCode: string;\n  public readonly context?: Record<string, unknown>;\n\n  constructor(\n    message: string,\n    statusCode: number = 500,\n    errorCode: string = \"INTERNAL_ERROR\",\n    isOperational: boolean = true,\n    context?: Record<string, unknown>,\n  ) {\n    super(message);\n    this.statusCode = statusCode;\n    this.isOperational = isOperational;\n    this.errorCode = errorCode;\n    this.context = context;\n\n    // Maintains proper stack trace for where our error was thrown\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\nexport class ValidationError extends AppError {\n  constructor(message: string, context?: Record<string, unknown>) {\n    super(message, 400, \"VALIDATION_ERROR\", true, context);\n  }\n}\n\nexport class AuthenticationError extends AppError {\n  constructor(\n    message: string = \"Authentication required\",\n    context?: Record<string, unknown>,\n  ) {\n    super(message, 401, \"AUTHENTICATION_ERROR\", true, context);\n  }\n}\n\nexport class AuthorizationError extends AppError {\n  constructor(\n    message: string = \"Insufficient permissions\",\n    context?: Record<string, unknown>,\n  ) {\n    super(message, 403, \"AUTHORIZATION_ERROR\", true, context);\n  }\n}\n\nexport class NotFoundError extends AppError {\n  constructor(resource: string = \"Resource\", context?: Record<string, unknown>) {\n    super(`${resource} not found`, 404, \"NOT_FOUND_ERROR\", true, context);\n  }\n}\n\nexport class ConflictError extends AppError {\n  constructor(message: string, context?: Record<string, unknown>) {\n    super(message, 409, \"CONFLICT_ERROR\", true, context);\n  }\n}\n\nexport class RateLimitError extends AppError {\n  constructor(\n    message: string = \"Rate limit exceeded\",\n    context?: Record<string, unknown>,\n  ) {\n    super(message, 429, \"RATE_LIMIT_ERROR\", true, context);\n  }\n}\n\nexport class DatabaseError extends AppError {\n  constructor(\n    message: string = \"Database operation failed\",\n    context?: Record<string, unknown>,\n  ) {\n    super(message, 500, \"DATABASE_ERROR\", true, context);\n  }\n}\n\nexport class ExternalServiceError extends AppError {\n  constructor(\n    service: string,\n    message: string = \"External service unavailable\",\n    context?: Record<string, unknown>,\n  ) {\n    super(\n      `${service}: ${message}`,\n      503,\n      \"EXTERNAL_SERVICE_ERROR\",\n      true,\n      context,\n    );\n  }\n}\n\n// Error response interface\ninterface ErrorResponse {\n  success: false;\n  error: {\n    code: string;\n    message: string;\n    statusCode: number;\n    requestId: string;\n    timestamp: string;\n    details?: unknown;\n  };\n}\n\n/**\n * Global error handling middleware\n * Should be the last middleware in the chain\n */\nexport function globalErrorHandler(\n  error: Error,\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): void {\n  const requestId = (res.getHeader(\"X-Request-ID\") as string) || nanoid();\n  const timestamp = new Date().toISOString();\n\n  // Set request ID header if not already set\n  if (!res.getHeader(\"X-Request-ID\")) {\n    res.setHeader(\"X-Request-ID\", requestId);\n  }\n\n  // Handle different types of errors\n  let statusCode = 500;\n  let errorCode = \"INTERNAL_ERROR\";\n  let message = \"Internal server error\";\n  let details: unknown = undefined;\n\n  if (error instanceof AppError) {\n    statusCode = error.statusCode;\n    errorCode = error.errorCode;\n    message = error.message;\n    details = error.context;\n  } else if (error instanceof ZodError) {\n    statusCode = 400;\n    errorCode = \"VALIDATION_ERROR\";\n    message = \"Invalid input data\";\n    details = {\n      validationErrors: error.errors.map((err) => ({\n        field: err.path.join(\".\"),\n        message: err.message,\n        code: err.code,\n      })),\n    };\n  } else if (error.name === \"JsonWebTokenError\") {\n    statusCode = 401;\n    errorCode = \"INVALID_TOKEN\";\n    message = \"Invalid or expired token\";\n  } else if (error.name === \"TokenExpiredError\") {\n    statusCode = 401;\n    errorCode = \"TOKEN_EXPIRED\";\n    message = \"Token has expired\";\n  } else if (error.name === \"CastError\") {\n    statusCode = 400;\n    errorCode = \"INVALID_ID\";\n    message = \"Invalid ID format\";\n  } else if (error.message?.includes(\"duplicate key\")) {\n    statusCode = 409;\n    errorCode = \"DUPLICATE_ENTRY\";\n    message = \"Resource already exists\";\n  }\n\n  // Log error with appropriate level\n  const errorLog = {\n    requestId,\n    timestamp,\n    errorCode,\n    message: error.message,\n    stack: error.stack,\n    statusCode,\n    url: req.url,\n    method: req.method,\n    userAgent: req.get(\"User-Agent\"),\n    ip: req.ip,\n    userId: (req as Request & { user?: { id: string } }).user?.id,\n    body: req.body,\n    query: req.query,\n    params: req.params,\n  };\n\n  if (statusCode >= 500) {\n    logger.error(\"Server error\", error, errorLog);\n  } else if (statusCode >= 400) {\n    logger.warn(\"Client error\", errorLog);\n  }\n\n  // Prepare error response\n  const errorResponse: ErrorResponse = {\n    success: false,\n    error: {\n      code: errorCode,\n      message,\n      statusCode,\n      requestId,\n      timestamp,\n    },\n  };\n\n  // Include details only in development or for validation errors\n  if (process.env.NODE_ENV === \"development\" || statusCode === 400) {\n    errorResponse.error.details = details;\n  }\n\n  // Send error response\n  res.status(statusCode).json(errorResponse);\n}\n\n/**\n * Async error handler wrapper\n * Use this to wrap async route handlers to automatically catch errors\n */\nexport function asyncHandler<T extends any[]>(\n  fn: (\n    req: Request,\n    res: Response,\n    next: NextFunction,\n    ...args: T\n  ) => Promise<any>,\n) {\n  return (req: Request, res: Response, next: NextFunction, ...args: T) => {\n    Promise.resolve(fn(req, res, next, ...args)).catch(next);\n  };\n}\n\n/**\n * Request ID middleware\n * Adds a unique request ID to each request for tracking\n */\nexport function requestIdMiddleware(\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): void {\n  const requestId = (req.headers[\"x-request-id\"] as string) || nanoid();\n  res.setHeader(\"X-Request-ID\", requestId);\n  (req as Request & { requestId?: string }).requestId = requestId;\n  next();\n}\n\n/**\n * 404 handler for unmatched routes\n */\nexport function notFoundHandler(\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): void {\n  const error = new NotFoundError(\"Endpoint\", {\n    url: req.url,\n    method: req.method,\n  });\n  next(error);\n}\n\n/**\n * Graceful shutdown handler\n * Properly closes server connections during shutdown\n */\nexport function createGracefulShutdownHandler(server: Server) {\n  return function gracefulShutdown(signal: string) {\n    logger.info(`Received ${signal}. Starting graceful shutdown...`);\n\n    server.close((err: Error) => {\n      if (err) {\n        logger.error(\"Error during server shutdown\", err);\n        process.exit(1);\n      }\n\n      logger.info(\"Server closed successfully\");\n      process.exit(0);\n    });\n\n    // Force close after 10 seconds\n    setTimeout(() => {\n      logger.error(\"Forcefully shutting down after timeout\");\n      process.exit(1);\n    }, 10000);\n  };\n}\n\n/**\n * Database connection error handler\n */\nexport function handleDatabaseError(error: Error & { code?: string }): never {\n  logger.error(\"Database connection error\", error);\n\n  if (error.code === \"ECONNREFUSED\") {\n    throw new DatabaseError(\"Database connection refused\", {\n      code: error.code,\n    });\n  } else if (error.code === \"ENOTFOUND\") {\n    throw new DatabaseError(\"Database host not found\", { code: error.code });\n  } else if (error.code === \"28P01\") {\n    throw new DatabaseError(\"Database authentication failed\", {\n      code: error.code,\n    });\n  } else if (error.code === \"3D000\") {\n    throw new DatabaseError(\"Database does not exist\", { code: error.code });\n  }\n\n  throw new DatabaseError(\"Database operation failed\", {\n    code: error.code,\n    message: error.message,\n  });\n}\n\n/**\n * Validation helper for common patterns\n */\nexport function validateAndThrow(\n  condition: boolean,\n  message: string,\n  ErrorClass = ValidationError,\n): void {\n  if (!condition) {\n    throw new ErrorClass(message);\n  }\n}\n\n/**\n * Safe JSON parse with error handling\n */\nexport function safeJsonParse<T>(json: string, fallback: T): T {\n  try {\n    return JSON.parse(json);\n  } catch (error) {\n    logger.warn(\"JSON parse failed, using fallback\", {\n      json,\n      error: error instanceof Error ? error.message : String(error),\n    });\n    return fallback;\n  }\n}\n\n// Export error handling middleware collection\nexport const errorHandlingMiddleware = {\n  requestId: requestIdMiddleware,\n  notFound: notFoundHandler,\n  global: globalErrorHandler,\n  asyncHandler,\n  createGracefulShutdown: createGracefulShutdownHandler,\n};\n\n// Export custom error classes\nexport const errors = {\n  AppError,\n  ValidationError,\n  AuthenticationError,\n  AuthorizationError,\n  NotFoundError,\n  ConflictError,\n  RateLimitError,\n  DatabaseError,\n  ExternalServiceError,\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/middleware/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2970,2973],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2970,2973],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2992,2995],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2992,2995],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":140,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3196,3199],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3196,3199],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3430,3433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3430,3433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Middleware Integration Module\n *\n * This module exports all middleware in a structured way for easy integration,\n * following Copilot best practices for middleware organization and composition.\n */\n\n// Import all middleware modules\nimport { securityMiddleware } from \"./security.middleware\";\nimport { errorHandlingMiddleware } from \"./error-handling.middleware\";\nimport { performanceMonitoring } from \"./performance.middleware\";\n\n// Re-export individual middleware for granular control\nexport { securityMiddleware } from \"./security.middleware\";\nexport { errorHandlingMiddleware, errors } from \"./error-handling.middleware\";\nexport { performanceMonitoring } from \"./performance.middleware\";\n\n// Export individual middleware functions for backwards compatibility\nexport const {\n  headers: securityHeaders,\n  sanitization: inputSanitization,\n  monitoring: securityMonitoring,\n  rateLimits,\n  requestSizeLimit,\n} = securityMiddleware;\n\nexport const {\n  requestId,\n  notFound,\n  global: globalErrorHandler,\n  asyncHandler,\n} = errorHandlingMiddleware;\n\nexport const {\n  middleware: performanceMiddleware,\n  memory: memoryMonitoring,\n  requestSize: requestSizeMonitoring,\n  database: databaseMonitoring,\n  healthCheck,\n  metrics,\n} = performanceMonitoring;\n\n/**\n * Middleware composition for different application phases\n */\n\n// Core middleware that should be applied early\nexport const coreMiddleware = [\n  requestId,\n  securityHeaders,\n  performanceMiddleware,\n  memoryMonitoring,\n  requestSizeMonitoring,\n];\n\n// Security middleware stack\nexport const securityMiddlewareStack = [\n  securityHeaders,\n  inputSanitization,\n  securityMonitoring,\n  requestSizeLimit,\n];\n\n// Monitoring middleware stack\nexport const monitoringMiddlewareStack = [\n  performanceMiddleware,\n  memoryMonitoring,\n  requestSizeMonitoring,\n  databaseMonitoring,\n];\n\n// Error handling middleware (should be applied last)\nexport const errorMiddlewareStack = [notFound, globalErrorHandler];\n\n/**\n * Complete middleware stack for production use\n */\nexport const productionMiddlewareStack = [\n  ...coreMiddleware,\n  inputSanitization,\n  securityMonitoring,\n  databaseMonitoring,\n];\n\n/**\n * Development middleware stack with additional debugging\n */\nexport const developmentMiddlewareStack = [\n  ...coreMiddleware,\n  inputSanitization,\n  securityMonitoring,\n  databaseMonitoring,\n];\n\n/**\n * API-specific middleware stack\n */\nexport const apiMiddlewareStack = [\n  requestId,\n  performanceMiddleware,\n  rateLimits.api,\n  inputSanitization,\n  securityMonitoring,\n];\n\n/**\n * Authentication-specific middleware stack\n */\nexport const authMiddlewareStack = [\n  requestId,\n  rateLimits.auth,\n  inputSanitization,\n  securityMonitoring,\n];\n\n/**\n * File upload middleware stack\n */\nexport const uploadMiddlewareStack = [\n  requestId,\n  rateLimits.upload,\n  requestSizeLimit,\n  securityMonitoring,\n];\n\n/**\n * Utility function to apply middleware stack to Express app\n */\nexport function applyMiddlewareStack(app: any, middlewareStack: any[]) {\n  middlewareStack.forEach((middleware) => {\n    if (middleware) {\n      app.use(middleware);\n    }\n  });\n}\n\n/**\n * Express error handler setup utility\n */\nexport function setupErrorHandlers(app: any) {\n  // 404 handler for unmatched routes\n  app.use(notFound);\n\n  // Global error handler (must be last)\n  app.use(globalErrorHandler);\n}\n\n/**\n * Health and metrics endpoints setup\n */\nexport function setupMonitoringEndpoints(app: any) {\n  app.get(\"/health\", healthCheck);\n  app.get(\"/metrics\", metrics);\n}\n\n// Default export with commonly used middleware\nexport default {\n  security: securityMiddleware,\n  errors: errorHandlingMiddleware,\n  performance: performanceMonitoring,\n  stacks: {\n    production: productionMiddlewareStack,\n    development: developmentMiddlewareStack,\n    api: apiMiddlewareStack,\n    auth: authMiddlewareStack,\n    upload: uploadMiddlewareStack,\n  },\n  utils: {\n    applyMiddlewareStack,\n    setupErrorHandlers,\n    setupMonitoringEndpoints,\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/middleware/performance.middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4738,4741],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4738,4741],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":193,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4942,4945],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4942,4945],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":206,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5298,5301],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5298,5301],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5561,5564],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5561,5564],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":295,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":295,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7538,7541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7538,7541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":334,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":334,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8480,8483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8480,8483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":336,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":336,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8607,8610],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8607,8610],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":348,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":348,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8954,8957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8954,8957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Performance Monitoring Middleware\n *\n * This module provides comprehensive performance monitoring and metrics collection,\n * following Copilot best practices for application observability and performance optimization.\n */\n\nimport { Request, Response, NextFunction } from \"express\";\nimport { logger } from \"../logger\";\nimport { DatabaseMonitor } from \"@shared/database-unified\";\n\n// Performance metrics interface\nexport interface PerformanceMetrics {\n  requestCount: number;\n  averageResponseTime: number;\n  slowRequestCount: number;\n  errorCount: number;\n  activeConnections: number;\n  memoryUsage: {\n    rss: number;\n    heapUsed: number;\n    heapTotal: number;\n    external: number;\n  };\n  cpuUsage: NodeJS.CpuUsage;\n  uptime: number;\n}\n\n// Request timing interface\nexport interface RequestTiming {\n  requestId: string;\n  method: string;\n  url: string;\n  statusCode: number;\n  responseTime: number;\n  timestamp: Date;\n  userAgent?: string;\n  ip?: string;\n  userId?: string;\n}\n\n/**\n * Performance Monitor Class\n * Singleton pattern for centralized performance tracking\n */\nexport class PerformanceMonitor {\n  private static instance: PerformanceMonitor;\n  private requestTimings: RequestTiming[] = [];\n  private maxTimings = 1000; // Keep last 1000 requests\n  private activeConnections = 0;\n  private requestCount = 0;\n  private errorCount = 0;\n  private slowRequestThreshold = 1000; // 1 second\n  private startTime = Date.now();\n\n  public static getInstance(): PerformanceMonitor {\n    if (!PerformanceMonitor.instance) {\n      PerformanceMonitor.instance = new PerformanceMonitor();\n    }\n    return PerformanceMonitor.instance;\n  }\n\n  /**\n   * Record a request timing\n   */\n  public recordRequest(timing: RequestTiming): void {\n    this.requestTimings.push(timing);\n    this.requestCount++;\n\n    // Track errors\n    if (timing.statusCode >= 400) {\n      this.errorCount++;\n    }\n\n    // Keep only recent timings\n    if (this.requestTimings.length > this.maxTimings) {\n      this.requestTimings = this.requestTimings.slice(-this.maxTimings);\n    }\n\n    // Log slow requests\n    if (timing.responseTime > this.slowRequestThreshold) {\n      logger.warn(\"Slow request detected\", {\n        url: timing.url,\n        method: timing.method,\n        responseTime: timing.responseTime,\n        statusCode: timing.statusCode,\n        requestId: timing.requestId,\n      });\n    }\n  }\n\n  /**\n   * Increment active connections\n   */\n  public incrementConnections(): void {\n    this.activeConnections++;\n  }\n\n  /**\n   * Decrement active connections\n   */\n  public decrementConnections(): void {\n    this.activeConnections = Math.max(0, this.activeConnections - 1);\n  }\n\n  /**\n   * Get current performance metrics\n   */\n  public getMetrics(): PerformanceMetrics {\n    const recentTimings = this.requestTimings.slice(-100); // Last 100 requests\n    const averageResponseTime =\n      recentTimings.length > 0\n        ? recentTimings.reduce((sum, timing) => sum + timing.responseTime, 0) /\n          recentTimings.length\n        : 0;\n\n    const slowRequestCount = this.requestTimings.filter(\n      (timing) => timing.responseTime > this.slowRequestThreshold,\n    ).length;\n\n    return {\n      requestCount: this.requestCount,\n      averageResponseTime: Math.round(averageResponseTime),\n      slowRequestCount,\n      errorCount: this.errorCount,\n      activeConnections: this.activeConnections,\n      memoryUsage: process.memoryUsage(),\n      cpuUsage: process.cpuUsage(),\n      uptime: Date.now() - this.startTime,\n    };\n  }\n\n  /**\n   * Get recent request timings\n   */\n  public getRecentTimings(limit: number = 50): RequestTiming[] {\n    return this.requestTimings.slice(-limit);\n  }\n\n  /**\n   * Get slow requests\n   */\n  public getSlowRequests(\n    threshold: number = this.slowRequestThreshold,\n  ): RequestTiming[] {\n    return this.requestTimings.filter(\n      (timing) => timing.responseTime > threshold,\n    );\n  }\n\n  /**\n   * Reset metrics (useful for testing)\n   */\n  public reset(): void {\n    this.requestTimings = [];\n    this.requestCount = 0;\n    this.errorCount = 0;\n    this.activeConnections = 0;\n    this.startTime = Date.now();\n  }\n\n  /**\n   * Set slow request threshold\n   */\n  public setSlowRequestThreshold(threshold: number): void {\n    this.slowRequestThreshold = threshold;\n  }\n}\n\n/**\n * Performance monitoring middleware\n * Tracks request timing and performance metrics\n */\nexport function performanceMonitoringMiddleware(\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): void {\n  const startTime = Date.now();\n  const monitor = PerformanceMonitor.getInstance();\n\n  // Track active connections\n  monitor.incrementConnections();\n\n  // Get request ID from headers or generate one\n  const requestId =\n    (req as any).requestId ||\n    (res.getHeader(\"X-Request-ID\") as string) ||\n    \"unknown\";\n\n  // Override end method to capture timing\n  const originalEnd = res.end;\n  res.end = function (this: Response, ...args: any[]): Response {\n    const responseTime = Date.now() - startTime;\n\n    // Record the request timing\n    monitor.recordRequest({\n      requestId,\n      method: req.method,\n      url: req.url,\n      statusCode: res.statusCode,\n      responseTime,\n      timestamp: new Date(),\n      userAgent: req.get(\"User-Agent\"),\n      ip: req.ip,\n      userId: (req as any).user?.id,\n    });\n\n    // Decrement active connections\n    monitor.decrementConnections();\n\n    // Add performance headers\n    res.setHeader(\"X-Response-Time\", `${responseTime}ms`);\n\n    // Call original end method\n    return originalEnd.apply(this, args as any);\n  };\n\n  next();\n}\n\n/**\n * Memory monitoring middleware\n * Checks memory usage and warns if too high\n */\nexport function memoryMonitoringMiddleware(\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): void {\n  const memUsage = process.memoryUsage();\n  const heapUsedMB = memUsage.heapUsed / 1024 / 1024;\n  const heapTotalMB = memUsage.heapTotal / 1024 / 1024;\n  const memoryUsagePercent = (heapUsedMB / heapTotalMB) * 100;\n\n  // Warn if memory usage is high\n  if (memoryUsagePercent > 80) {\n    logger.warn(\"High memory usage detected\", {\n      heapUsedMB: Math.round(heapUsedMB),\n      heapTotalMB: Math.round(heapTotalMB),\n      usagePercent: Math.round(memoryUsagePercent),\n      url: req.url,\n      method: req.method,\n    });\n  }\n\n  // Add memory usage to response headers in development\n  if (process.env.NODE_ENV === \"development\") {\n    res.setHeader(\"X-Memory-Usage\", `${Math.round(heapUsedMB)}MB`);\n  }\n\n  next();\n}\n\n/**\n * Request size monitoring middleware\n * Tracks and logs large request payloads\n */\nexport function requestSizeMonitoringMiddleware(\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): void {\n  const contentLength = parseInt(req.headers[\"content-length\"] || \"0\");\n  const largeSizeThreshold = 1024 * 1024; // 1MB\n\n  if (contentLength > largeSizeThreshold) {\n    logger.info(\"Large request payload detected\", {\n      contentLength,\n      url: req.url,\n      method: req.method,\n      contentType: req.headers[\"content-type\"],\n    });\n\n    // Add header to track large requests\n    res.setHeader(\"X-Large-Payload\", \"true\");\n  }\n\n  next();\n}\n\n/**\n * Cache performance monitoring middleware\n * Tracks cache hit/miss rates for optimizing caching strategies\n */\nexport function cacheMonitoringMiddleware(\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): void {\n  const startTime = Date.now();\n\n  // Override json method to capture cache information\n  const originalJson = res.json;\n  res.json = function (this: Response, obj: any): Response {\n    const responseTime = Date.now() - startTime;\n\n    // Check if response came from cache (would need cache implementation)\n    const fromCache = res.getHeader(\"X-Cache-Hit\") === \"true\";\n\n    if (fromCache) {\n      logger.debug(\"Cache hit\", {\n        url: req.url,\n        method: req.method,\n        responseTime,\n      });\n    } else {\n      logger.debug(\"Cache miss\", {\n        url: req.url,\n        method: req.method,\n        responseTime,\n      });\n    }\n\n    return originalJson.call(this, obj);\n  };\n\n  next();\n}\n\n/**\n * Database performance monitoring middleware\n * Integrates with database monitoring for query performance tracking\n */\nexport function databaseMonitoringMiddleware(\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): void {\n  const dbMonitor = DatabaseMonitor.getInstance();\n\n  // Log database stats periodically\n  const originalEnd = res.end;\n  res.end = function (this: Response, ...args: any[]): Response {\n    // Log database stats for slow requests or errors\n    if (res.statusCode >= 400 || Date.now() - (req as any).startTime > 1000) {\n      const dbStats = dbMonitor.getStats();\n      if (Object.keys(dbStats).length > 0) {\n        logger.info(\"Database performance stats\", {\n          url: req.url,\n          method: req.method,\n          statusCode: res.statusCode,\n          dbStats,\n        });\n      }\n    }\n\n    return originalEnd.apply(this, args as any);\n  };\n\n  next();\n}\n\n/**\n * Health check endpoint generator\n * Creates a comprehensive health check endpoint\n */\nexport function createHealthCheckEndpoint() {\n  return async (req: Request, res: Response): Promise<void> => {\n    try {\n      const monitor = PerformanceMonitor.getInstance();\n      const dbMonitor = DatabaseMonitor.getInstance();\n      const metrics = monitor.getMetrics();\n      const dbStats = dbMonitor.getStats();\n\n      // Check various health indicators\n      const health = {\n        status: \"healthy\",\n        timestamp: new Date().toISOString(),\n        uptime: metrics.uptime,\n        version: process.env.npm_package_version || \"1.0.0\",\n        environment: process.env.NODE_ENV || \"development\",\n        performance: {\n          requestCount: metrics.requestCount,\n          averageResponseTime: metrics.averageResponseTime,\n          slowRequestCount: metrics.slowRequestCount,\n          errorRate:\n            metrics.requestCount > 0\n              ? (metrics.errorCount / metrics.requestCount) * 100\n              : 0,\n          activeConnections: metrics.activeConnections,\n        },\n        system: {\n          memoryUsage: {\n            heapUsedMB: Math.round(metrics.memoryUsage.heapUsed / 1024 / 1024),\n            heapTotalMB: Math.round(\n              metrics.memoryUsage.heapTotal / 1024 / 1024,\n            ),\n            rssMB: Math.round(metrics.memoryUsage.rss / 1024 / 1024),\n          },\n          cpuUsage: metrics.cpuUsage,\n        },\n        database: {\n          connected: true, // Would need actual database connection check\n          queryStats: dbStats,\n        },\n      };\n\n      // Determine overall health status\n      const memoryUsagePercent =\n        (metrics.memoryUsage.heapUsed / metrics.memoryUsage.heapTotal) * 100;\n      const errorRate =\n        metrics.requestCount > 0\n          ? (metrics.errorCount / metrics.requestCount) * 100\n          : 0;\n\n      if (\n        memoryUsagePercent > 90 ||\n        errorRate > 10 ||\n        metrics.averageResponseTime > 2000\n      ) {\n        health.status = \"degraded\";\n        res.status(503);\n      } else if (\n        memoryUsagePercent > 70 ||\n        errorRate > 5 ||\n        metrics.averageResponseTime > 1000\n      ) {\n        health.status = \"warning\";\n      }\n\n      res.json(health);\n    } catch (error) {\n      logger.error(\"Health check failed\", error);\n      res.status(503).json({\n        status: \"unhealthy\",\n        timestamp: new Date().toISOString(),\n        error: \"Health check failed\",\n      });\n    }\n  };\n}\n\n/**\n * Performance metrics endpoint generator\n * Creates an endpoint for detailed performance metrics\n */\nexport function createMetricsEndpoint() {\n  return (req: Request, res: Response): void => {\n    try {\n      const monitor = PerformanceMonitor.getInstance();\n      const dbMonitor = DatabaseMonitor.getInstance();\n\n      const limit = parseInt(req.query.limit as string) || 50;\n      const includeTimings = req.query.timings === \"true\";\n\n      const metrics = {\n        summary: monitor.getMetrics(),\n        database: dbMonitor.getStats(),\n        ...(includeTimings && {\n          recentRequests: monitor.getRecentTimings(limit),\n          slowRequests: monitor.getSlowRequests(),\n        }),\n      };\n\n      res.json(metrics);\n    } catch (error) {\n      logger.error(\"Failed to get metrics\", error);\n      res.status(500).json({ error: \"Failed to get metrics\" });\n    }\n  };\n}\n\n// Export performance monitoring utilities\nexport const performanceMonitoring = {\n  middleware: performanceMonitoringMiddleware,\n  memory: memoryMonitoringMiddleware,\n  requestSize: requestSizeMonitoringMiddleware,\n  cache: cacheMonitoringMiddleware,\n  database: databaseMonitoringMiddleware,\n  healthCheck: createHealthCheckEndpoint(),\n  metrics: createMetricsEndpoint(),\n  monitor: PerformanceMonitor.getInstance(),\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/middleware/security.middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":341,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":341,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9101,9104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9101,9104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":341,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":341,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9107,9110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9107,9110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":351,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":351,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9334,9337],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9334,9337],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Centralized Security Middleware\n *\n * This module provides comprehensive security middleware for the application,\n * following Copilot best practices for security, scalability, and maintainability.\n */\n\nimport { Request, Response, NextFunction } from \"express\";\nimport { logger } from \"../logger\";\nimport rateLimit from \"express-rate-limit\";\nimport { validateUUID, sanitizeInput } from \"../validation\";\n\n// Security headers configuration\nexport interface SecurityHeadersConfig {\n  development?: boolean;\n  allowedOrigins?: string[];\n  contentSecurityPolicy?: {\n    enabled: boolean;\n    reportOnly?: boolean;\n    customPolicies?: string[];\n  };\n  hsts?: {\n    enabled: boolean;\n    maxAge: number;\n    includeSubDomains: boolean;\n  };\n}\n\n/**\n * Comprehensive security headers middleware\n * Configurable for development and production environments\n */\nexport function createSecurityHeadersMiddleware(\n  config: SecurityHeadersConfig = {},\n) {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    // Basic security headers\n    res.setHeader(\"X-Content-Type-Options\", \"nosniff\");\n    res.setHeader(\"X-Frame-Options\", \"DENY\");\n    res.setHeader(\"X-XSS-Protection\", \"1; mode=block\");\n    res.setHeader(\"Referrer-Policy\", \"strict-origin-when-cross-origin\");\n    res.setHeader(\"X-Download-Options\", \"noopen\");\n    res.setHeader(\"X-Permitted-Cross-Domain-Policies\", \"none\");\n\n    // CORS headers\n    const allowedOrigins = config.allowedOrigins || [\n      \"http://localhost:3000\",\n      \"https://*.replit.app\",\n    ];\n    const origin = req.headers.origin;\n\n    if (\n      origin &&\n      allowedOrigins.some(\n        (allowed) =>\n          allowed === \"*\" ||\n          origin === allowed ||\n          (allowed.includes(\"*\") && origin.includes(allowed.replace(\"*\", \"\"))),\n      )\n    ) {\n      res.setHeader(\"Access-Control-Allow-Origin\", origin);\n    }\n\n    res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n    res.setHeader(\n      \"Access-Control-Allow-Methods\",\n      \"GET, POST, PUT, DELETE, OPTIONS, PATCH\",\n    );\n    res.setHeader(\n      \"Access-Control-Allow-Headers\",\n      \"Origin, X-Requested-With, Content-Type, Accept, Authorization, Cookie\",\n    );\n\n    // Content Security Policy\n    const cspConfig = config.contentSecurityPolicy || {\n      enabled: true,\n      reportOnly: config.development,\n    };\n\n    if (cspConfig.enabled) {\n      const defaultPolicies = [\n        \"default-src 'self'\",\n        \"script-src 'self' 'unsafe-inline' 'unsafe-eval' https://replit.com\",\n        \"style-src 'self' 'unsafe-inline' fonts.googleapis.com https:\",\n        \"font-src 'self' fonts.gstatic.com https:\",\n        \"img-src 'self' data: blob: https:\",\n        \"connect-src 'self' https: wss: ws:\",\n        \"frame-ancestors 'none'\",\n        \"object-src 'none'\",\n        \"base-uri 'self'\",\n      ];\n\n      const policies = cspConfig.customPolicies || defaultPolicies;\n      const cspValue = policies.join(\"; \");\n\n      if (cspConfig.reportOnly) {\n        res.setHeader(\"Content-Security-Policy-Report-Only\", cspValue);\n      } else {\n        res.setHeader(\"Content-Security-Policy\", cspValue);\n      }\n    }\n\n    // HTTP Strict Transport Security (HSTS)\n    const hstsConfig = config.hsts || {\n      enabled: !config.development,\n      maxAge: 31536000,\n      includeSubDomains: true,\n    };\n\n    if (hstsConfig.enabled) {\n      const hstsValue = `max-age=${hstsConfig.maxAge}${hstsConfig.includeSubDomains ? \"; includeSubDomains\" : \"\"}`;\n      res.setHeader(\"Strict-Transport-Security\", hstsValue);\n    }\n\n    next();\n  };\n}\n\n/**\n * Input sanitization middleware\n * Sanitizes all string inputs in request body, query, and params\n */\nexport function inputSanitizationMiddleware(\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): void {\n  try {\n    // Sanitize request body\n    if (req.body && typeof req.body === \"object\") {\n      req.body = sanitizeObjectInputs(req.body);\n    }\n\n    // Sanitize query parameters\n    if (req.query && typeof req.query === \"object\") {\n      req.query = sanitizeObjectInputs(req.query);\n    }\n\n    // Sanitize route parameters\n    if (req.params && typeof req.params === \"object\") {\n      req.params = sanitizeObjectInputs(req.params);\n    }\n\n    next();\n  } catch (error) {\n    logger.error(\"Input sanitization error\", error, {\n      url: req.url,\n      method: req.method,\n    });\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n}\n\n/**\n * Parameter validation middleware factory\n * Creates middleware to validate specific parameters\n */\nexport function createParameterValidationMiddleware(\n  validations: Array<{\n    param: string;\n    validator: (value: string) => boolean;\n    errorMessage: string;\n  }>,\n) {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    for (const validation of validations) {\n      const value = req.params[validation.param];\n\n      if (!value || !validation.validator(value)) {\n        logger.warn(\"Parameter validation failed\", {\n          url: req.url,\n          method: req.method,\n          param: validation.param,\n          value: value,\n        });\n\n        res.status(400).json({\n          message: validation.errorMessage,\n          field: validation.param,\n        });\n        return;\n      }\n    }\n\n    next();\n  };\n}\n\n/**\n * Common parameter validators\n */\nexport const validators = {\n  uuid: (value: string) => validateUUID(value),\n  positiveInteger: (value: string) =>\n    /^\\d+$/.test(value) && parseInt(value) > 0,\n  alphanumeric: (value: string) => /^[a-zA-Z0-9]+$/.test(value),\n  email: (value: string) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value),\n  slug: (value: string) => /^[a-z0-9-]+$/.test(value),\n};\n\n/**\n * Rate limiting configurations for different endpoint types\n */\nexport const rateLimitConfigs = {\n  general: {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100, // requests per window\n    standardHeaders: true,\n    legacyHeaders: false,\n  },\n  auth: {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 5, // auth attempts per window\n    standardHeaders: true,\n    legacyHeaders: false,\n    skipSuccessfulRequests: true,\n  },\n  api: {\n    windowMs: 60 * 1000, // 1 minute\n    max: 60, // API calls per minute\n    standardHeaders: true,\n    legacyHeaders: false,\n  },\n  upload: {\n    windowMs: 60 * 60 * 1000, // 1 hour\n    max: 10, // file uploads per hour\n    standardHeaders: true,\n    legacyHeaders: false,\n  },\n  message: {\n    windowMs: 60 * 1000, // 1 minute\n    max: 20, // messages per minute\n    standardHeaders: true,\n    legacyHeaders: false,\n  },\n};\n\n/**\n * Create rate limiter with custom configuration\n */\nexport function createRateLimit(\n  config: typeof rateLimitConfigs.general,\n  type: string = \"general\",\n) {\n  return rateLimit({\n    ...config,\n    handler: (req: Request, res: Response) => {\n      logger.warn(`${type} rate limit exceeded`, {\n        ip: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n        url: req.originalUrl,\n        method: req.method,\n      });\n\n      res.status(429).json({\n        error: \"Too many requests\",\n        message: `Rate limit exceeded for ${type}. Please try again later.`,\n        retryAfter: Math.ceil(config.windowMs / 1000),\n      });\n    },\n  });\n}\n\n/**\n * Security monitoring middleware\n * Logs suspicious activities and potential security threats\n */\nexport function securityMonitoringMiddleware(\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): void {\n  const suspiciousPatterns = [\n    /(<script|javascript:|vbscript:|onload|onerror)/i,\n    /(union|select|insert|update|delete|drop|create|alter)\\s+/i,\n    /(\\.\\.|\\/etc\\/passwd|\\/proc\\/|cmd\\.exe)/i,\n    /(eval\\(|setTimeout\\(|setInterval\\()/i,\n  ];\n\n  const requestData = JSON.stringify({\n    body: req.body,\n    query: req.query,\n    params: req.params,\n  });\n\n  // Check for suspicious patterns\n  const hasSuspiciousContent = suspiciousPatterns.some(\n    (pattern) => pattern.test(requestData) || pattern.test(req.url),\n  );\n\n  if (hasSuspiciousContent) {\n    logger.warn(\"Suspicious request detected\", {\n      ip: req.ip,\n      userAgent: req.get(\"User-Agent\"),\n      url: req.url,\n      method: req.method,\n      body: req.body,\n      query: req.query,\n      params: req.params,\n    });\n\n    // Don't block the request, just log it\n    // In production, you might want to block or rate-limit such requests\n  }\n\n  next();\n}\n\n/**\n * Request size limiting middleware\n */\nexport function createRequestSizeLimitMiddleware(\n  maxSize: number = 10 * 1024 * 1024,\n) {\n  // 10MB default\n  return (req: Request, res: Response, next: NextFunction): void => {\n    const contentLength = parseInt(req.headers[\"content-length\"] || \"0\");\n\n    if (contentLength > maxSize) {\n      logger.warn(\"Request size limit exceeded\", {\n        ip: req.ip,\n        url: req.url,\n        method: req.method,\n        contentLength,\n        maxSize,\n      });\n\n      res.status(413).json({\n        error: \"Payload too large\",\n        message: `Request size exceeds maximum allowed size of ${maxSize} bytes`,\n      });\n      return;\n    }\n\n    next();\n  };\n}\n\n// Helper functions\n\nfunction sanitizeObjectInputs(obj: any): any {\n  if (typeof obj === \"string\") {\n    return sanitizeInput(obj);\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map((item) => sanitizeObjectInputs(item));\n  }\n\n  if (obj && typeof obj === \"object\") {\n    const sanitized: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      sanitized[key] = sanitizeObjectInputs(value);\n    }\n    return sanitized;\n  }\n\n  return obj;\n}\n\n// Export commonly used middleware combinations\nexport const securityMiddleware = {\n  headers: createSecurityHeadersMiddleware(),\n  sanitization: inputSanitizationMiddleware,\n  monitoring: securityMonitoringMiddleware,\n  rateLimits: {\n    general: createRateLimit(rateLimitConfigs.general, \"general\"),\n    auth: createRateLimit(rateLimitConfigs.auth, \"authentication\"),\n    api: createRateLimit(rateLimitConfigs.api, \"API\"),\n    upload: createRateLimit(rateLimitConfigs.upload, \"upload\"),\n    message: createRateLimit(rateLimitConfigs.message, \"message\"),\n  },\n  requestSizeLimit: createRequestSizeLimitMiddleware(),\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/rate-limiting.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[480,483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[480,483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import rateLimit from \"express-rate-limit\";\nimport { Request, Response } from \"express\";\nimport { logger } from \"./logger\";\nimport { getAuthUserId } from \"./auth\";\n\n// Safe helper to get user ID without throwing error\nfunction safeGetUserId(req: Request): string | undefined {\n  try {\n    return getAuthUserId(req);\n  } catch {\n    return undefined;\n  }\n}\n\n// Helper function to log rate limit events\nconst logRateLimit = (\n  req: Request,\n  limitType: string,\n  additionalData?: any,\n) => {\n  logger.warn(`${limitType} rate limit exceeded`, {\n    ip: req.ip,\n    userAgent: req.get(\"User-Agent\"),\n    url: req.originalUrl,\n    method: req.method,\n    ...additionalData,\n  });\n};\n\n// General API rate limiting\nexport const generalRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: {\n    error: \"Too many requests\",\n    message: \"You have exceeded the rate limit. Please try again later.\",\n  },\n  standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\n  legacyHeaders: false, // Disable the `X-RateLimit-*` headers\n  handler: (req: Request, res: Response) => {\n    logRateLimit(req, \"General API\");\n    res.status(429).json({\n      error: \"Too many requests\",\n      message: \"You have exceeded the rate limit. Please try again later.\",\n    });\n  },\n});\n\n// Strict rate limiting for authentication endpoints\nexport const authRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // Limit each IP to 5 auth requests per windowMs\n  skipSuccessfulRequests: true,\n  handler: (req: Request, res: Response) => {\n    logRateLimit(req, \"Authentication\");\n    res.status(429).json({\n      error: \"Too many authentication attempts\",\n      message:\n        \"Too many authentication attempts. Please try again in 15 minutes.\",\n    });\n  },\n});\n\n// Rate limiting for password reset\nexport const passwordResetRateLimit = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 3, // Limit each IP to 3 password reset requests per hour\n  handler: (req: Request, res: Response) => {\n    logRateLimit(req, \"Password reset\", { email: req.body?.email });\n    res.status(429).json({\n      error: \"Too many password reset attempts\",\n      message: \"Too many password reset requests. Please try again in 1 hour.\",\n    });\n  },\n});\n\n// Rate limiting for message sending\nexport const messageRateLimit = rateLimit({\n  windowMs: 60 * 1000, // 1 minute\n  max: 20, // Limit each IP to 20 messages per minute\n  handler: (req: Request, res: Response) => {\n    logRateLimit(req, \"Message sending\", { userId: safeGetUserId(req) });\n    res.status(429).json({\n      error: \"Too many messages sent\",\n      message: \"You are sending messages too quickly. Please slow down.\",\n    });\n  },\n});\n\n// Rate limiting for event creation\nexport const eventCreationRateLimit = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 10, // Limit each IP to 10 event creations per hour\n  handler: (req: Request, res: Response) => {\n    logRateLimit(req, \"Event creation\", { userId: safeGetUserId(req) });\n    res.status(429).json({\n      error: \"Too many events created\",\n      message:\n        \"You have created too many events recently. Please try again later.\",\n    });\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/repositories/base.repository.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'or' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2147,2150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2147,2150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2187,2190],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2187,2190],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2776,2779],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2776,2779],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2819,2822],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2819,2822],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3607,3610],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3607,3610],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3871,3874],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3871,3874],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3991,3994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3991,3994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":153,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4155,4158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4155,4158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":160,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4313,4316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4313,4316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":209,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5672,5675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5672,5675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":231,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6262,6265],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6262,6265],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":256,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":256,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6951,6954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6951,6954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":278,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":278,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7581,7584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7581,7584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":332,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":332,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9234,9237],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9234,9237],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":333,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":333,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9276,9279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9276,9279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":340,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":340,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9493,9496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9493,9496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":372,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":372,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10479,10482],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10479,10482],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":400,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":400,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11320,11323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11320,11323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":405,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":405,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11559,11562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11559,11562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":447,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":447,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12681,12684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12681,12684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":460,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":460,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13160,13163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13160,13163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":473,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":473,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13588,13591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13588,13591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":477,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":477,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13671,13674],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13671,13674],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":481,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":481,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13837,13840],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13837,13840],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":592,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":592,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17002,17005],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17002,17005],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Base Repository Pattern Implementation\n *\n * This module provides a base repository class that abstracts common database operations,\n * following Copilot best practices for database interaction patterns.\n */\n\nimport { eq, and, or, SQL, sql, asc, desc, count, lt, gt } from \"drizzle-orm\";\nimport type { SQLiteTable } from \"drizzle-orm/sqlite-core\";\nimport { logger } from \"../logger\";\nimport { DatabaseError } from \"../middleware/error-handling.middleware\";\nimport {\n  withQueryTiming,\n  type Database,\n  type Transaction,\n} from \"@shared/database-unified\";\n\n// Generic types for repository operations\nexport interface PaginationOptions {\n  page?: number;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface SortOptions {\n  field: string;\n  direction?: \"asc\" | \"desc\";\n}\n\nexport interface FilterOptions {\n  [key: string]:\n    | string\n    | number\n    | boolean\n    | Date\n    | null\n    | undefined\n    | string[]\n    | number[]\n    | {\n        operator: \"gte\" | \"lte\" | \"gt\" | \"lt\" | \"like\" | \"not\";\n        value: unknown;\n      };\n}\n\nexport interface QueryOptions {\n  pagination?: PaginationOptions;\n  sort?: SortOptions;\n  filters?: FilterOptions;\n  select?: string[];\n  include?: string[];\n}\n\nexport interface PaginatedResult<T> {\n  data: T[];\n  total: number;\n  page: number;\n  limit: number;\n  totalPages: number;\n  hasNext: boolean;\n  hasPrevious: boolean;\n}\n\n/**\n * Base Repository Class\n * Provides common CRUD operations and utilities for database entities\n */\nexport abstract class BaseRepository<\n  TTable extends SQLiteTable,\n  TEntity = TTable[\"$inferSelect\"],\n  TInsert = TTable[\"$inferInsert\"],\n  TUpdate = Partial<TInsert>,\n> {\n  protected db: Database;\n  protected table: TTable;\n  protected tableName: string;\n\n  constructor(db: Database, table: TTable, tableName: string) {\n    this.db = db;\n    this.table = table;\n    this.tableName = tableName;\n  }\n\n  /**\n   * Find entity by ID\n   */\n  async findById(id: string): Promise<TEntity | null> {\n    return withQueryTiming(`${this.tableName}:findById`, async () => {\n      try {\n        const result = await this.db\n          .select()\n          .from(this.table as any)\n          .where(eq((this.table as any).id, id))\n          .limit(1);\n\n        return (result[0] as TEntity) || null;\n      } catch (error) {\n        logger.error(`Failed to find ${this.tableName} by ID`, error, { id });\n        throw new DatabaseError(`Failed to find ${this.tableName}`);\n      }\n    });\n  }\n\n  /**\n   * Find multiple entities by IDs\n   */\n  async findByIds(ids: string[]): Promise<TEntity[]> {\n    return withQueryTiming(`${this.tableName}:findByIds`, async () => {\n      if (ids.length === 0) return [];\n\n      try {\n        const result = await this.db\n          .select()\n          .from(this.table as any)\n          .where(sql`${(this.table as any).id} = ANY(${ids})`);\n\n        return result as TEntity[];\n      } catch (error) {\n        logger.error(`Failed to find ${this.tableName} by IDs`, error, { ids });\n        throw new DatabaseError(`Failed to find ${this.tableName} records`);\n      }\n    });\n  }\n\n  /**\n   * Find entities with filters and options\n   */\n  async find(options: QueryOptions = {}): Promise<PaginatedResult<TEntity>> {\n    return withQueryTiming(`${this.tableName}:find`, async () => {\n      try {\n        const { pagination, sort, filters } = options;\n        const page = pagination?.page || 1;\n        const limit = Math.min(pagination?.limit || 50, 100); // Max 100 per page\n        const offset = (page - 1) * limit;\n\n        // Build base query\n        let query = this.db.select().from(this.table as any);\n\n        // Apply filters\n        if (filters && Object.keys(filters).length > 0) {\n          const whereConditions = this.buildWhereConditions(filters);\n          if (whereConditions.length > 0) {\n            query = query.where(and(...whereConditions)) as any;\n          }\n        }\n\n        // Apply sorting\n        if (sort?.field) {\n          const column = (this.table as any)[sort.field];\n          if (column) {\n            query = query.orderBy(\n              sort.direction === \"desc\" ? desc(column) : asc(column),\n            ) as any;\n          }\n        }\n\n        // Get total count\n        const countQuery = this.db\n          .select({ count: count() })\n          .from(this.table as any);\n\n        if (filters && Object.keys(filters).length > 0) {\n          const whereConditions = this.buildWhereConditions(filters);\n          if (whereConditions.length > 0) {\n            countQuery.where(and(...whereConditions));\n          }\n        }\n\n        const [data, totalResult] = await Promise.all([\n          query.limit(limit).offset(offset),\n          countQuery,\n        ]);\n\n        const total = totalResult[0]?.count || 0;\n        const totalPages = Math.ceil(total / limit);\n\n        return {\n          data: data as TEntity[],\n          total,\n          page,\n          limit,\n          totalPages,\n          hasNext: page < totalPages,\n          hasPrevious: page > 1,\n        };\n      } catch (error) {\n        logger.error(`Failed to find ${this.tableName} records`, error, {\n          options,\n        });\n        throw new DatabaseError(`Failed to find ${this.tableName} records`);\n      }\n    });\n  }\n\n  /**\n   * Find one entity with filters\n   */\n  async findOne(filters: FilterOptions): Promise<TEntity | null> {\n    return withQueryTiming(`${this.tableName}:findOne`, async () => {\n      try {\n        const whereConditions = this.buildWhereConditions(filters);\n\n        if (whereConditions.length === 0) {\n          return null;\n        }\n\n        const result = await this.db\n          .select()\n          .from(this.table as any)\n          .where(and(...whereConditions))\n          .limit(1);\n\n        return (result[0] as TEntity) || null;\n      } catch (error) {\n        logger.error(`Failed to find one ${this.tableName}`, error, {\n          filters,\n        });\n        throw new DatabaseError(`Failed to find ${this.tableName}`);\n      }\n    });\n  }\n\n  /**\n   * Create new entity\n   */\n  async create(data: TInsert): Promise<TEntity> {\n    return withQueryTiming(`${this.tableName}:create`, async () => {\n      try {\n        const result = await this.db\n          .insert(this.table)\n          .values(data as any)\n          .returning();\n\n        if (!result[0]) {\n          throw new DatabaseError(`Failed to create ${this.tableName}`);\n        }\n\n        return result[0] as TEntity;\n      } catch (error) {\n        logger.error(`Failed to create ${this.tableName}`, error, { data });\n        throw new DatabaseError(`Failed to create ${this.tableName}`);\n      }\n    });\n  }\n\n  /**\n   * Create multiple entities\n   */\n  async createMany(data: TInsert[]): Promise<TEntity[]> {\n    return withQueryTiming(`${this.tableName}:createMany`, async () => {\n      if (data.length === 0) return [];\n\n      try {\n        const result = await this.db\n          .insert(this.table)\n          .values(data as any)\n          .returning();\n\n        return result as unknown as TEntity[];\n      } catch (error) {\n        logger.error(`Failed to create multiple ${this.tableName}`, error, {\n          count: data.length,\n        });\n        throw new DatabaseError(`Failed to create ${this.tableName} records`);\n      }\n    });\n  }\n\n  /**\n   * Update entity by ID\n   */\n  async update(id: string, data: TUpdate): Promise<TEntity | null> {\n    return withQueryTiming(`${this.tableName}:update`, async () => {\n      try {\n        const result = await this.db\n          .update(this.table)\n          .set(data)\n          .where(eq((this.table as any).id, id))\n          .returning();\n\n        return (result as unknown as TEntity[])[0] || null;\n      } catch (error) {\n        logger.error(`Failed to update ${this.tableName}`, error, { id, data });\n        throw new DatabaseError(`Failed to update ${this.tableName}`);\n      }\n    });\n  }\n\n  /**\n   * Update entities with filters\n   */\n  async updateWhere(filters: FilterOptions, data: TUpdate): Promise<TEntity[]> {\n    return withQueryTiming(`${this.tableName}:updateWhere`, async () => {\n      try {\n        const whereConditions = this.buildWhereConditions(filters);\n\n        if (whereConditions.length === 0) {\n          throw new DatabaseError(\n            \"Update requires at least one filter condition\",\n          );\n        }\n\n        const result = await this.db\n          .update(this.table)\n          .set(data)\n          .where(and(...whereConditions))\n          .returning();\n\n        return result as unknown as TEntity[];\n      } catch (error) {\n        logger.error(`Failed to update ${this.tableName} with filters`, error, {\n          filters,\n          data,\n        });\n        throw new DatabaseError(`Failed to update ${this.tableName} records`);\n      }\n    });\n  }\n\n  /**\n   * Delete entity by ID (soft delete if supported)\n   */\n  async delete(id: string): Promise<boolean> {\n    return withQueryTiming(`${this.tableName}:delete`, async () => {\n      try {\n        // Check if table has deletedAt column for soft delete\n        const hasDeletedAt = \"deletedAt\" in this.table;\n\n        if (hasDeletedAt) {\n          const result = await this.db\n            .update(this.table)\n            .set({ deletedAt: new Date() } as any)\n            .where(eq((this.table as any).id, id))\n            .returning();\n\n          return (result as unknown[]).length > 0;\n        } else {\n          const result = await this.db\n            .delete(this.table)\n            .where(eq((this.table as any).id, id))\n            .returning();\n\n          return (result as unknown[]).length > 0;\n        }\n      } catch (error) {\n        logger.error(`Failed to delete ${this.tableName}`, error, { id });\n        throw new DatabaseError(`Failed to delete ${this.tableName}`);\n      }\n    });\n  }\n\n  /**\n   * Delete entities with filters\n   */\n  async deleteWhere(filters: FilterOptions): Promise<number> {\n    return withQueryTiming(`${this.tableName}:deleteWhere`, async () => {\n      try {\n        const whereConditions = this.buildWhereConditions(filters);\n\n        if (whereConditions.length === 0) {\n          throw new DatabaseError(\n            \"Delete requires at least one filter condition\",\n          );\n        }\n\n        // Check if table has deletedAt column for soft delete\n        const hasDeletedAt = \"deletedAt\" in this.table;\n\n        if (hasDeletedAt) {\n          const result = await this.db\n            .update(this.table)\n            .set({ deletedAt: new Date() } as any)\n            .where(and(...whereConditions))\n            .returning();\n\n          return (result as unknown[]).length;\n        } else {\n          const result = await this.db\n            .delete(this.table)\n            .where(and(...whereConditions))\n            .returning();\n\n          return (result as unknown[]).length;\n        }\n      } catch (error) {\n        logger.error(`Failed to delete ${this.tableName} with filters`, error, {\n          filters,\n        });\n        throw new DatabaseError(`Failed to delete ${this.tableName} records`);\n      }\n    });\n  }\n\n  /**\n   * Count entities with optional filters\n   */\n  async count(filters?: FilterOptions): Promise<number> {\n    return withQueryTiming(`${this.tableName}:count`, async () => {\n      try {\n        let query = this.db.select({ count: count() }).from(this.table as any);\n\n        if (filters && Object.keys(filters).length > 0) {\n          const whereConditions = this.buildWhereConditions(filters);\n          if (whereConditions.length > 0) {\n            query = query.where(and(...whereConditions)) as any;\n          }\n        }\n\n        const result = await query;\n        return result[0]?.count || 0;\n      } catch (error) {\n        logger.error(`Failed to count ${this.tableName}`, error, { filters });\n        throw new DatabaseError(`Failed to count ${this.tableName} records`);\n      }\n    });\n  }\n\n  /**\n   * Find entities with cursor-based pagination for better performance\n   * Especially useful for large datasets where OFFSET becomes slow\n   */\n  async findWithCursor(\n    options: {\n      cursor?: string;\n      limit?: number;\n      sortField?: string;\n      sortDirection?: \"asc\" | \"desc\";\n      filters?: FilterOptions;\n    } = {},\n  ): Promise<{\n    data: TEntity[];\n    nextCursor?: string;\n    hasMore: boolean;\n  }> {\n    return withQueryTiming(`${this.tableName}:findWithCursor`, async () => {\n      try {\n        const {\n          cursor,\n          limit = 50,\n          sortField = \"createdAt\",\n          sortDirection = \"desc\",\n          filters,\n        } = options;\n        const maxLimit = Math.min(limit, 100);\n\n        // Build base query\n        let query = this.db.select().from(this.table as any);\n\n        // Apply filters\n        const conditions = [];\n        if (filters && Object.keys(filters).length > 0) {\n          const whereConditions = this.buildWhereConditions(filters);\n          conditions.push(...whereConditions);\n        }\n\n        // Apply cursor condition for pagination\n        if (cursor) {\n          const cursorData = this.parseCursor(cursor);\n          if (cursorData && cursorData.field === sortField) {\n            const column = (this.table as any)[sortField];\n            if (column) {\n              const cursorCondition =\n                sortDirection === \"desc\"\n                  ? lt(column, cursorData.value)\n                  : gt(column, cursorData.value);\n              conditions.push(cursorCondition);\n            }\n          }\n        }\n\n        // Apply all conditions\n        if (conditions.length > 0) {\n          query = query.where(and(...conditions)) as any;\n        }\n\n        // Apply sorting\n        const sortColumn = (this.table as any)[sortField];\n        if (sortColumn) {\n          query = query.orderBy(\n            sortDirection === \"desc\" ? desc(sortColumn) : asc(sortColumn),\n          ) as any;\n        }\n\n        // Fetch one extra item to check if there's more data\n        const data = (await query.limit(maxLimit + 1)) as TEntity[];\n\n        const hasMore = data.length > maxLimit;\n        const results = hasMore ? data.slice(0, maxLimit) : data;\n\n        // Generate next cursor if there's more data\n        let nextCursor: string | undefined;\n        if (hasMore && results.length > 0) {\n          const lastItem = results[results.length - 1];\n          if (lastItem) {\n            nextCursor = this.generateCursor(lastItem, sortField);\n          }\n        }\n\n        return {\n          data: results,\n          nextCursor,\n          hasMore,\n        };\n      } catch (error) {\n        logger.error(`Failed to find ${this.tableName} with cursor`, error, {\n          options,\n        });\n        throw new DatabaseError(`Failed to find ${this.tableName} records`);\n      }\n    });\n  }\n\n  /**\n   * Generate cursor for pagination\n   */\n  private generateCursor(\n    item: TEntity | Record<string, unknown>,\n    sortField: string,\n  ): string {\n    if (!item || !item[sortField as keyof typeof item]) {\n      return \"\";\n    }\n\n    const itemAsRecord = item as Record<string, unknown>;\n    const cursorData = {\n      field: sortField,\n      value: itemAsRecord[sortField],\n      id: itemAsRecord.id || \"\",\n    };\n\n    return Buffer.from(JSON.stringify(cursorData)).toString(\"base64\");\n  }\n\n  /**\n   * Parse cursor data\n   */\n  private parseCursor(\n    cursor: string,\n  ): { field: string; value: unknown; id: string } | null {\n    try {\n      const decoded = Buffer.from(cursor, \"base64\").toString(\"utf-8\");\n      return JSON.parse(decoded);\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Check if entity exists\n   */\n  async exists(filters: FilterOptions): Promise<boolean> {\n    const count = await this.count(filters);\n    return count > 0;\n  }\n\n  /**\n   * Execute raw SQL query with proper error handling\n   */\n  protected async executeRawQuery<T = Record<string, unknown>>(\n    query: string,\n    params?: unknown[],\n  ): Promise<T[]> {\n    return withQueryTiming(`${this.tableName}:rawQuery`, async () => {\n      try {\n        // Use sql.raw for simple queries without params, or use sql template for parameterized queries\n        const sqlQuery =\n          params && params.length > 0\n            ? sql.raw(query) // Note: For truly parameterized queries, use sql`` template literal instead\n            : sql.raw(query);\n        // @ts-expect-error: Temporary workaround for SQLite vs PostgreSQL type mismatch\n        const result = await this.db.execute(sqlQuery);\n        return result as unknown as T[];\n      } catch (error) {\n        logger.error(`Raw query failed for ${this.tableName}`, error, {\n          query,\n          params,\n        });\n        throw new DatabaseError(`Database query failed`);\n      }\n    });\n  }\n\n  /**\n   * Build WHERE conditions from filters\n   */\n  protected buildWhereConditions(filters: FilterOptions): SQL[] {\n    const conditions: SQL[] = [];\n\n    for (const [key, value] of Object.entries(filters)) {\n      if (value === undefined || value === null) continue;\n\n      const column = (this.table as any)[key];\n      if (!column) continue;\n\n      if (Array.isArray(value)) {\n        // IN clause for arrays\n        conditions.push(sql`${column} = ANY(${value})`);\n      } else if (\n        typeof value === \"object\" &&\n        value !== null &&\n        \"operator\" in value &&\n        typeof value.operator === \"string\"\n      ) {\n        // Custom operators like { operator: 'gte', value: 10 }\n        const operatorValue = value as { operator: string; value: unknown };\n        switch (operatorValue.operator) {\n          case \"gte\":\n            conditions.push(sql`${column} >= ${operatorValue.value}`);\n            break;\n          case \"lte\":\n            conditions.push(sql`${column} <= ${operatorValue.value}`);\n            break;\n          case \"gt\":\n            conditions.push(sql`${column} > ${operatorValue.value}`);\n            break;\n          case \"lt\":\n            conditions.push(sql`${column} < ${operatorValue.value}`);\n            break;\n          case \"like\":\n            conditions.push(sql`${column} ILIKE ${`%${operatorValue.value}%`}`);\n            break;\n          case \"not\":\n            conditions.push(sql`${column} != ${operatorValue.value}`);\n            break;\n        }\n      } else {\n        // Simple equality\n        conditions.push(eq(column, value));\n      }\n    }\n\n    return conditions;\n  }\n\n  /**\n   * Transaction wrapper for complex operations with enhanced performance monitoring\n   */\n  async transaction<T>(callback: (tx: Transaction) => Promise<T>): Promise<T> {\n    return withQueryTiming(`${this.tableName}:transaction`, async () => {\n      try {\n        return await this.db.transaction(async (tx) => {\n          return await callback(tx);\n        });\n      } catch (error) {\n        logger.error(`Transaction failed for ${this.tableName}`, error);\n        throw new DatabaseError(\n          `Transaction failed for ${this.tableName}: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n        );\n      }\n    });\n  }\n\n  /**\n   * Batch operations with transaction support for better performance\n   */\n  async batchOperation<T>(\n    operations: Array<(tx: Transaction) => Promise<T>>,\n  ): Promise<T[]> {\n    return this.transaction(async (tx) => {\n      const results: T[] = [];\n      for (const operation of operations) {\n        const result = await operation(tx);\n        results.push(result);\n      }\n      return results;\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/repositories/user.repository.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'includeDeleted' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":151,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":151,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":237,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6730,6733],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6730,6733],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":242,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6871,6874],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6871,6874],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":248,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7103,7106],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7103,7106],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * User Repository Implementation\n *\n * This module provides user-specific database operations using the base repository pattern,\n * demonstrating Copilot best practices for domain-specific data access.\n */\n\nimport {\n  BaseRepository,\n  QueryOptions,\n  PaginatedResult,\n} from \"./base.repository\";\nimport { db } from \"@shared/database-unified\";\nimport {\n  users,\n  communities,\n  userCommunities,\n  userRoles,\n  type User,\n  type InsertUser,\n} from \"@shared/schema\";\nimport { eq, and, sql, ilike, or, count, desc, asc } from \"drizzle-orm\";\nimport { logger } from \"../logger\";\nimport { withQueryTiming } from \"@shared/database-unified\";\nimport {\n  ValidationError,\n  NotFoundError,\n} from \"../middleware/error-handling.middleware\";\n\nexport interface UserWithCommunities extends User {\n  communities: Array<{\n    community: typeof communities.$inferSelect;\n    isPrimary: boolean | null;\n    joinedAt: Date | null;\n  }>;\n}\n\nexport interface UserSearchOptions extends QueryOptions {\n  search?: string;\n  status?: \"online\" | \"offline\" | \"away\" | \"busy\" | \"gaming\";\n  role?: string;\n  communityId?: string;\n  includeDeleted?: boolean;\n}\n\nexport interface UserUpdateData {\n  name?: string;\n  email?: string;\n  bio?: string;\n  location?: string;\n  website?: string;\n  twitterHandle?: string;\n  twitchHandle?: string;\n  youtubeHandle?: string;\n  discordHandle?: string;\n  primaryCommunityId?: string;\n  status?: \"online\" | \"offline\" | \"away\" | \"busy\" | \"gaming\";\n  isEmailVerified?: boolean;\n  mfaEnabled?: boolean;\n  updatedAt?: Date;\n}\n\n/**\n * User Repository Class\n * Extends BaseRepository with user-specific operations\n */\nexport class UserRepository extends BaseRepository<\n  typeof users,\n  User,\n  InsertUser,\n  UserUpdateData\n> {\n  constructor() {\n    super(db, users, \"users\");\n  }\n\n  /**\n   * Find user by email\n   */\n  async findByEmail(email: string): Promise<User | null> {\n    return withQueryTiming(\"users:findByEmail\", async () => {\n      if (!email) return null;\n\n      try {\n        const result = await this.db\n          .select()\n          .from(this.table)\n          .where(eq(this.table.email, email.toLowerCase()))\n          .limit(1);\n\n        return result[0] || null;\n      } catch (error) {\n        logger.error(\"Failed to find user by email\", error, { email });\n        throw error;\n      }\n    });\n  }\n\n  /**\n   * Find user with their communities\n   */\n  async findByIdWithCommunities(\n    userId: string,\n  ): Promise<UserWithCommunities | null> {\n    return withQueryTiming(\"users:findByIdWithCommunities\", async () => {\n      if (!userId) return null;\n\n      try {\n        // First get the user\n        const user = await this.findById(userId);\n        if (!user) return null;\n\n        // Then get their communities\n        const userCommunitiesData = await this.db\n          .select({\n            community: communities,\n            isPrimary: userCommunities.isPrimary,\n            joinedAt: userCommunities.joinedAt,\n          })\n          .from(userCommunities)\n          .innerJoin(\n            communities,\n            eq(userCommunities.communityId, communities.id),\n          )\n          .where(eq(userCommunities.userId, userId));\n\n        return {\n          ...user,\n          communities: userCommunitiesData,\n        };\n      } catch (error) {\n        logger.error(\"Failed to find user with communities\", error, { userId });\n        throw error;\n      }\n    });\n  }\n\n  /**\n   * Search users with advanced filtering\n   */\n  async searchUsers(\n    options: UserSearchOptions = {},\n  ): Promise<PaginatedResult<User>> {\n    return withQueryTiming(\"users:searchUsers\", async () => {\n      try {\n        const {\n          search,\n          status,\n          role,\n          communityId,\n          includeDeleted,\n          ...baseOptions\n        } = options;\n\n        // Build additional where conditions\n        const conditions = [];\n\n        // Search by name or email\n        if (search && search.trim()) {\n          const searchTerm = `%${search.trim()}%`;\n          conditions.push(\n            or(\n              ilike(this.table.firstName, searchTerm),\n              ilike(this.table.lastName, searchTerm),\n              ilike(this.table.username, searchTerm),\n              ilike(this.table.email, searchTerm),\n            ),\n          );\n        }\n\n        // Filter by status\n        if (status) {\n          conditions.push(eq(this.table.status, status));\n        }\n\n        // Filter by role\n        if (role) {\n          const roleUserIds = await this.db\n            .select({ userId: userRoles.userId })\n            .from(userRoles)\n            .where(and(eq(userRoles.role, role), eq(userRoles.isActive, true)));\n\n          if (roleUserIds.length > 0) {\n            const userIds = roleUserIds.map((ur) => ur.userId);\n            conditions.push(sql`${this.table.id} = ANY(${userIds})`);\n          } else {\n            // No users with this role, return empty result\n            return {\n              data: [],\n              total: 0,\n              page: baseOptions.pagination?.page || 1,\n              limit: baseOptions.pagination?.limit || 50,\n              totalPages: 0,\n              hasNext: false,\n              hasPrevious: false,\n            };\n          }\n        }\n\n        // Filter by community membership\n        if (communityId) {\n          const communityUserIds = await this.db\n            .select({ userId: userCommunities.userId })\n            .from(userCommunities)\n            .where(eq(userCommunities.communityId, communityId));\n\n          if (communityUserIds.length > 0) {\n            const userIds = communityUserIds.map((uc) => uc.userId);\n            conditions.push(sql`${this.table.id} = ANY(${userIds})`);\n          } else {\n            // No users in this community, return empty result\n            return {\n              data: [],\n              total: 0,\n              page: baseOptions.pagination?.page || 1,\n              limit: baseOptions.pagination?.limit || 50,\n              totalPages: 0,\n              hasNext: false,\n              hasPrevious: false,\n            };\n          }\n        }\n\n        // Note: User soft deletion is not implemented in current schema\n        // Exclude deleted users logic would go here if deletedAt field exists\n\n        // If we have custom conditions, we need to handle them separately\n        if (conditions.length > 0) {\n          // Build custom query with conditions\n          const page = baseOptions.pagination?.page || 1;\n          const limit = Math.min(baseOptions.pagination?.limit || 50, 100);\n          const offset = (page - 1) * limit;\n\n          let query = this.db.select().from(this.table);\n\n          if (conditions.length > 0) {\n            query = query.where(and(...conditions)) as any;\n          }\n\n          // Apply sorting if specified\n          if (baseOptions.sort?.field) {\n            const column = (this.table as any)[baseOptions.sort.field];\n            if (column) {\n              query = query.orderBy(\n                baseOptions.sort.direction === \"desc\"\n                  ? desc(column)\n                  : asc(column),\n              ) as any;\n            }\n          }\n\n          const [data, totalResult] = await Promise.all([\n            query.limit(limit).offset(offset),\n            this.db\n              .select({ count: count() })\n              .from(this.table)\n              .where(and(...conditions)),\n          ]);\n\n          const total = totalResult[0]?.count || 0;\n          const totalPages = Math.ceil(total / limit);\n\n          return {\n            data: data as User[],\n            total,\n            page,\n            limit,\n            totalPages,\n            hasNext: page < totalPages,\n            hasPrevious: page > 1,\n          };\n        }\n\n        // Otherwise use base filters\n        return await this.find({\n          ...baseOptions,\n          filters: baseOptions.filters,\n        });\n      } catch (error) {\n        logger.error(\"Failed to search users\", error, { options });\n        throw error;\n      }\n    });\n  }\n\n  /**\n   * Update user profile\n   */\n  async updateProfile(userId: string, data: UserUpdateData): Promise<User> {\n    return withQueryTiming(\"users:updateProfile\", async () => {\n      try {\n        // Validate the user exists\n        const existingUser = await this.findById(userId);\n        if (!existingUser) {\n          throw new NotFoundError(\"User\");\n        }\n\n        // If updating email, check for conflicts\n        if (data.email && data.email !== existingUser.email) {\n          const emailExists = await this.findByEmail(data.email);\n          if (emailExists && emailExists.id !== userId) {\n            throw new ValidationError(\"Email already in use\");\n          }\n\n          // Reset email verification if email is changed\n          data.isEmailVerified = false;\n        }\n\n        // Update the user\n        const updatedUser = await this.update(userId, {\n          ...data,\n          updatedAt: new Date(),\n        });\n\n        if (!updatedUser) {\n          throw new Error(\"Failed to update user profile\");\n        }\n\n        return updatedUser;\n      } catch (error) {\n        logger.error(\"Failed to update user profile\", error, { userId, data });\n        throw error;\n      }\n    });\n  }\n\n  /**\n   * Join a community\n   */\n  async joinCommunity(\n    userId: string,\n    communityId: string,\n    isPrimary: boolean = false,\n  ): Promise<void> {\n    return withQueryTiming(\"users:joinCommunity\", async () => {\n      try {\n        await this.transaction(async (tx) => {\n          // Check if user exists\n          const user = await tx\n            .select()\n            .from(users)\n            .where(eq(users.id, userId))\n            .limit(1);\n\n          if (!user[0]) {\n            throw new NotFoundError(\"User\");\n          }\n\n          // Check if community exists\n          const community = await tx\n            .select()\n            .from(communities)\n            .where(eq(communities.id, communityId))\n            .limit(1);\n\n          if (!community[0]) {\n            throw new NotFoundError(\"Community\");\n          }\n\n          // Check if already a member\n          const existingMembership = await tx\n            .select()\n            .from(userCommunities)\n            .where(\n              and(\n                eq(userCommunities.userId, userId),\n                eq(userCommunities.communityId, communityId),\n              ),\n            )\n            .limit(1);\n\n          if (existingMembership[0]) {\n            return; // Already a member, nothing to do\n          }\n\n          // If this is to be the primary community, unset other primary communities\n          if (isPrimary) {\n            await tx\n              .update(userCommunities)\n              .set({ isPrimary: false })\n              .where(eq(userCommunities.userId, userId));\n          }\n\n          // Add the membership\n          await tx.insert(userCommunities).values({\n            userId,\n            communityId,\n            isPrimary,\n            joinedAt: new Date(),\n          });\n\n          logger.info(\"User joined community\", {\n            userId,\n            communityId,\n            isPrimary,\n          });\n        });\n      } catch (error) {\n        logger.error(\"Failed to join community\", error, {\n          userId,\n          communityId,\n          isPrimary,\n        });\n        throw error;\n      }\n    });\n  }\n\n  /**\n   * Leave a community\n   */\n  async leaveCommunity(userId: string, communityId: string): Promise<void> {\n    return withQueryTiming(\"users:leaveCommunity\", async () => {\n      try {\n        await this.transaction(async (tx) => {\n          // Remove the membership\n          const result = await tx\n            .delete(userCommunities)\n            .where(\n              and(\n                eq(userCommunities.userId, userId),\n                eq(userCommunities.communityId, communityId),\n              ),\n            )\n            .returning();\n\n          if (result.length === 0) {\n            throw new NotFoundError(\"Community membership\");\n          }\n\n          // If this was the primary community, set another as primary if available\n          if (result[0]?.isPrimary) {\n            const remainingCommunities = await tx\n              .select()\n              .from(userCommunities)\n              .where(eq(userCommunities.userId, userId))\n              .limit(1);\n\n            if (remainingCommunities[0]) {\n              await tx\n                .update(userCommunities)\n                .set({ isPrimary: true })\n                .where(\n                  and(\n                    eq(userCommunities.userId, userId),\n                    eq(\n                      userCommunities.communityId,\n                      remainingCommunities[0].communityId,\n                    ),\n                  ),\n                );\n            }\n          }\n\n          logger.info(\"User left community\", { userId, communityId });\n        });\n      } catch (error) {\n        logger.error(\"Failed to leave community\", error, {\n          userId,\n          communityId,\n        });\n        throw error;\n      }\n    });\n  }\n\n  /**\n   * Set primary community for user\n   */\n  async setPrimaryCommunity(\n    userId: string,\n    communityId: string,\n  ): Promise<void> {\n    return withQueryTiming(\"users:setPrimaryCommunity\", async () => {\n      try {\n        await this.transaction(async (tx) => {\n          // Verify user is a member of the community\n          const membership = await tx\n            .select()\n            .from(userCommunities)\n            .where(\n              and(\n                eq(userCommunities.userId, userId),\n                eq(userCommunities.communityId, communityId),\n              ),\n            )\n            .limit(1);\n\n          if (!membership[0]) {\n            throw new NotFoundError(\"Community membership\");\n          }\n\n          // Unset all primary communities for this user\n          await tx\n            .update(userCommunities)\n            .set({ isPrimary: false })\n            .where(eq(userCommunities.userId, userId));\n\n          // Set the new primary community\n          await tx\n            .update(userCommunities)\n            .set({ isPrimary: true })\n            .where(\n              and(\n                eq(userCommunities.userId, userId),\n                eq(userCommunities.communityId, communityId),\n              ),\n            );\n\n          logger.info(\"Primary community updated\", { userId, communityId });\n        });\n      } catch (error) {\n        logger.error(\"Failed to set primary community\", error, {\n          userId,\n          communityId,\n        });\n        throw error;\n      }\n    });\n  }\n\n  /**\n   * Get user statistics\n   */\n  async getUserStats(userId: string): Promise<{\n    totalCommunities: number;\n    totalFriends: number;\n    totalEvents: number;\n    joinedAt: Date | null;\n  }> {\n    return withQueryTiming(\"users:getUserStats\", async () => {\n      try {\n        const user = await this.findById(userId);\n        if (!user) {\n          throw new NotFoundError(\"User\");\n        }\n\n        const [communityCount, friendCount, eventCount] = await Promise.all([\n          // Count communities\n          this.db\n            .select({ count: sql<number>`COUNT(*)::int` })\n            .from(userCommunities)\n            .where(eq(userCommunities.userId, userId)),\n\n          // Count friends (this would need a friends table implementation)\n          Promise.resolve([{ count: 0 }]), // Placeholder\n\n          // Count events (this would need to join with events table)\n          Promise.resolve([{ count: 0 }]), // Placeholder\n        ]);\n\n        return {\n          totalCommunities: communityCount[0]?.count || 0,\n          totalFriends: friendCount[0]?.count || 0,\n          totalEvents: eventCount[0]?.count || 0,\n          joinedAt: user.createdAt,\n        };\n      } catch (error) {\n        logger.error(\"Failed to get user stats\", error, { userId });\n        throw error;\n      }\n    });\n  }\n\n  /**\n   * Soft delete user account\n   */\n  async softDeleteUser(userId: string): Promise<void> {\n    return withQueryTiming(\"users:softDeleteUser\", async () => {\n      try {\n        await this.transaction(async (tx) => {\n          // Soft delete the user by marking as offline and changing email\n          const result = await tx\n            .update(users)\n            .set({\n              status: \"offline\",\n              email: `deleted_${userId}@deleted.local`, // Prevent email conflicts\n            })\n            .where(eq(users.id, userId))\n            .returning();\n\n          if (!result[0]) {\n            throw new NotFoundError(\"User\");\n          }\n\n          // Remove from all communities\n          await tx\n            .delete(userCommunities)\n            .where(eq(userCommunities.userId, userId));\n\n          logger.info(\"User account soft deleted\", { userId });\n        });\n      } catch (error) {\n        logger.error(\"Failed to soft delete user\", error, { userId });\n        throw error;\n      }\n    });\n  }\n\n  /**\n   * Restore soft deleted user account\n   */\n  async restoreUser(userId: string, newEmail: string): Promise<User> {\n    return withQueryTiming(\"users:restoreUser\", async () => {\n      try {\n        // Check if email is available\n        const emailExists = await this.findByEmail(newEmail);\n        if (emailExists) {\n          throw new ValidationError(\"Email already in use\");\n        }\n\n        const result = await this.update(userId, {\n          status: \"online\",\n          email: newEmail,\n          isEmailVerified: false,\n          updatedAt: new Date(),\n        });\n\n        if (!result) {\n          throw new NotFoundError(\"User\");\n        }\n\n        logger.info(\"User account restored\", { userId, newEmail });\n        return result;\n      } catch (error) {\n        logger.error(\"Failed to restore user\", error, { userId, newEmail });\n        throw error;\n      }\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/routes.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WebSocketServer' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WebSocket' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'insertCommunitySchema' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'insertEventAttendeeSchema' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'insertGameSessionSchema' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'insertStreamCoordinationSessionSchema' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'verifyEmailVerificationJWT' is defined but never used. Allowed unused vars must match /^_/u.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NotFoundError' is defined but never used. Allowed unused vars must match /^_/u.","line":55,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ValidationError' is defined but never used. Allowed unused vars must match /^_/u.","line":55,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AppError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":66,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ValidationErr' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":67,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuthenticationError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":68,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuthorizationError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":69,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DatabaseError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":72,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'websocketMessageSchema' is defined but never used. Allowed unused vars must match /^_/u.","line":81,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validateJoinCommunitySchema' is defined but never used. Allowed unused vars must match /^_/u.","line":100,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validateJoinEventSchema' is defined but never used. Allowed unused vars must match /^_/u.","line":101,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":101,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validateMessageSchema' is defined but never used. Allowed unused vars must match /^_/u.","line":102,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'eventParamSchema' is defined but never used. Allowed unused vars must match /^_/u.","line":106,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":106,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userParamSchema' is defined but never used. Allowed unused vars must match /^_/u.","line":107,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'communityParamSchema' is defined but never used. Allowed unused vars must match /^_/u.","line":108,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'searchQuerySchema' is defined but never used. Allowed unused vars must match /^_/u.","line":110,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":110,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'messageRateLimit' is defined but never used. Allowed unused vars must match /^_/u.","line":152,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":152,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":288,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":288,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8945,8948],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8945,8948],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":608,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":608,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1200,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":1200,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1343,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":1343,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1391,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":1391,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'eventId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1392,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":1392,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1424,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":1424,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'eventId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1425,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":1425,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":1634,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":1634,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2961,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2961,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[98340,98343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[98340,98343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2980,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2980,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[98883,98886],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[98883,98886],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'authenticatedReq' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":3253,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":3253,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'authenticatedReq' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":3338,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":3338,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport {\n  isAuthenticated,\n  getAuthUserId,\n  requireHybridAuth,\n  type AuthenticatedRequest,\n} from \"./auth\";\nimport {\n  insertCommunitySchema,\n  insertEventSchema,\n  insertEventAttendeeSchema,\n  insertGameSessionSchema,\n  insertCollaborativeStreamEventSchema,\n  insertStreamCollaboratorSchema,\n  insertStreamCoordinationSessionSchema,\n  type UpsertUser,\n} from \"@shared/schema\";\nimport {\n  sendPasswordResetEmail,\n  sendEmailVerificationEmail,\n} from \"./email-service\";\nimport { sendContactEmail } from \"./email\";\nimport {\n  validatePasswordStrength,\n  hashPassword,\n  verifyPassword,\n} from \"./auth/password\";\nimport {\n  generateEmailVerificationJWT,\n  verifyEmailVerificationJWT,\n  generatePasswordResetJWT,\n  verifyPasswordResetJWT,\n  TOKEN_EXPIRY,\n  generateAccessTokenJWT,\n  generateRefreshTokenJWT,\n  verifyRefreshTokenJWT,\n  generateRefreshTokenId,\n} from \"./auth/tokens\";\nimport {\n  generateTOTPSetup,\n  verifyTOTPCode,\n  verifyBackupCode,\n  hashBackupCode,\n  validateMFASetupRequirements,\n  generateBackupCodes,\n} from \"./auth/mfa\";\nimport {\n  generateDeviceFingerprint,\n  extractDeviceContext,\n} from \"./auth/device-fingerprinting\";\nimport { logger } from \"./logger\";\nimport { NotFoundError, ValidationError } from \"./types\";\nimport {\n  errorHandlingMiddleware,\n  errors,\n} from \"./middleware/error-handling.middleware\";\nimport { assertRouteParam } from \"./shared/utils\";\nimport { graphicsGeneratorService } from \"./services/graphics-generator\";\nimport { enhancedNotificationService } from \"./services/enhanced-notifications\";\nimport { waitlistService } from \"./services/waitlist\";\nconst { asyncHandler } = errorHandlingMiddleware;\nconst {\n  AppError,\n  ValidationError: ValidationErr,\n  AuthenticationError,\n  AuthorizationError,\n  NotFoundError: NotFoundErr,\n  ConflictError,\n  DatabaseError,\n} = errors;\nimport analyticsRouter from \"./routes/analytics\";\nimport cacheHealthRouter from \"./routes/cache-health\";\nimport databaseHealthRouter from \"./routes/database-health\";\nimport backupRouter from \"./routes/backup\";\nimport monitoringRouter from \"./routes/monitoring\";\nimport matchingRouter from \"./routes/matching\";\nimport { CollaborativeStreamingService } from \"./services/collaborative-streaming\";\nimport { websocketMessageSchema } from \"@shared/websocket-schemas\";\nimport EnhancedWebSocketServer from \"./utils/websocket-server-enhanced\";\n// Auth.js session validation will be done via session endpoint\nimport { healthCheck } from \"./health\";\nimport {\n  generatePlatformOAuthURL,\n  handlePlatformOAuthCallback,\n} from \"./services/platform-oauth\";\nimport {\n  validateRequest,\n  validateQuery,\n  validateParams,\n  validateParamsWithSchema,\n  securityHeaders,\n  validateUserProfileUpdateSchema,\n  validateEmailSchema,\n  validateEventSchema,\n  validatePasswordResetSchema,\n  validateSocialLinksSchema,\n  validateJoinCommunitySchema,\n  validateJoinEventSchema,\n  validateMessageSchema,\n  validateGameSessionSchema,\n  validateUUID,\n  uuidParamSchema,\n  eventParamSchema,\n  userParamSchema,\n  communityParamSchema,\n  paginationQuerySchema,\n  searchQuerySchema,\n} from \"./validation\";\nimport { z } from \"zod\";\n\n// JWT request validation schemas\nconst refreshTokenSchema = z.object({\n  refreshToken: z.string().min(1, \"Refresh token is required\"),\n});\n\nconst revokeTokenSchema = z.object({\n  refreshToken: z.string().min(1, \"Refresh token is required\"),\n});\n\n// Registration validation schema\nconst registrationSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(12, \"Password must be at least 12 characters long\"),\n  firstName: z\n    .string()\n    .min(1, \"First name is required\")\n    .max(50, \"First name is too long\"),\n  lastName: z\n    .string()\n    .min(1, \"Last name is required\")\n    .max(50, \"Last name is too long\"),\n  username: z\n    .string()\n    .min(3, \"Username must be at least 3 characters\")\n    .max(30, \"Username is too long\")\n    .regex(\n      /^[a-zA-Z0-9_-]+$/,\n      \"Username can only contain letters, numbers, underscores, and hyphens\",\n    ),\n  primaryCommunity: z.string().optional(),\n  acceptTerms: z\n    .boolean()\n    .refine((val) => val === true, \"You must accept the terms and conditions\"),\n});\nimport {\n  generalRateLimit,\n  authRateLimit,\n  passwordResetRateLimit,\n  messageRateLimit,\n  eventCreationRateLimit,\n} from \"./rate-limiting\";\nimport { cardRecognitionRoutes } from \"./features/cards/cards.routes\";\nimport { universalCardRoutes } from \"./features/cards/universal-cards.routes\";\nimport { gamesCrudRoutes } from \"./features/games/games-crud.routes\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Security headers middleware\n  app.use(securityHeaders);\n\n  // General rate limiting for all API routes\n  app.use(\"/api/\", generalRateLimit);\n\n  // Auth.js routes are handled in server/index.ts via authRouter\n\n  // Initialize default communities\n  await initializeDefaultCommunities();\n\n  // Initialize collaborative streaming service\n  const collaborativeStreaming = CollaborativeStreamingService.getInstance();\n\n  // Health check endpoint\n  app.get(\"/api/health\", healthCheck);\n\n  // Platform OAuth routes for account linking\n  app.get(\n    \"/api/platforms/:platform/oauth/initiate\",\n    isAuthenticated,\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const platform = assertRouteParam(req.params.platform, \"platform\");\n\n        if (![\"twitch\", \"youtube\", \"facebook\"].includes(platform)) {\n          return res.status(400).json({ message: \"Unsupported platform\" });\n        }\n\n        // Generate OAuth authorization URL\n        const authUrl = await generatePlatformOAuthURL(platform, userId);\n        return res.json({ authUrl });\n      } catch (error) {\n        logger.error(\"Platform OAuth initiation error:\", error);\n        return res\n          .status(500)\n          .json({ message: \"Failed to initiate OAuth flow\" });\n      }\n    },\n  );\n\n  app.get(\n    \"/api/platforms/:platform/oauth/callback\",\n    isAuthenticated,\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const platform = assertRouteParam(req.params.platform, \"platform\");\n        const { code, state } = req.query;\n\n        if (!code || !state) {\n          return res.status(400).json({ message: \"Missing OAuth parameters\" });\n        }\n\n        // Exchange code for tokens and save to storage\n        const account = await handlePlatformOAuthCallback(\n          platform,\n          code as string,\n          state as string,\n          userId,\n        );\n        return res.json({\n          success: true,\n          platform: account.platform,\n          handle: account.handle,\n        });\n      } catch (error) {\n        logger.error(\"Platform OAuth callback error:\", error);\n        return res\n          .status(500)\n          .json({ message: \"Failed to complete OAuth flow\" });\n      }\n    },\n  );\n\n  app.get(\"/api/platforms/accounts\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n      const accounts = await storage.getUserPlatformAccounts(userId);\n      return res.json(accounts);\n    } catch (error) {\n      logger.error(\"Get platform accounts error:\", error);\n      return res\n        .status(500)\n        .json({ message: \"Failed to fetch platform accounts\" });\n    }\n  });\n\n  app.delete(\n    \"/api/platforms/accounts/:id\",\n    isAuthenticated,\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const id = assertRouteParam(req.params.id, \"id\");\n\n        // Verify ownership before deletion\n        const account = await storage.getUserPlatformAccounts(userId);\n        const targetAccount = account.find((acc) => acc.id === id);\n\n        if (!targetAccount) {\n          return res\n            .status(404)\n            .json({ message: \"Platform account not found\" });\n        }\n\n        await storage.deleteUserPlatformAccount(id);\n        return res.json({ success: true });\n      } catch (error) {\n        logger.error(\"Delete platform account error:\", error);\n        return res\n          .status(500)\n          .json({ message: \"Failed to delete platform account\" });\n      }\n    },\n  );\n\n  app.get(\"/api/platforms/status\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n      const accounts = await storage.getUserPlatformAccounts(userId);\n\n      const status: Record<string, any> = {};\n\n      for (const account of accounts) {\n        const now = new Date();\n        const isExpired =\n          account.tokenExpiresAt && account.tokenExpiresAt < now;\n\n        status[account.platform] = {\n          isConnected: account.isActive && !isExpired,\n          isExpired: !!isExpired,\n          expiryDate: account.tokenExpiresAt?.toISOString(),\n          lastChecked: now.toISOString(),\n        };\n      }\n\n      return res.json(status);\n    } catch (error) {\n      logger.error(\"Get platform status error:\", error);\n      return res\n        .status(500)\n        .json({ message: \"Failed to fetch platform status\" });\n    }\n  });\n\n  app.post(\n    \"/api/platforms/:platform/refresh\",\n    isAuthenticated,\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const platform = assertRouteParam(req.params.platform, \"platform\");\n\n        // Import refresh function\n        const { refreshPlatformToken } = await import(\n          \"./services/platform-oauth\"\n        );\n\n        const newToken = await refreshPlatformToken(userId, platform);\n\n        if (!newToken) {\n          return res.status(400).json({ message: \"Failed to refresh token\" });\n        }\n\n        return res.json({\n          success: true,\n          message: \"Token refreshed successfully\",\n        });\n      } catch (error) {\n        logger.error(\"Refresh platform token error:\", error);\n        return res\n          .status(500)\n          .json({ message: \"Failed to refresh platform token\" });\n      }\n    },\n  );\n\n  // Auth routes\n  app.get(\"/api/auth/user\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Get user's communities\n      const userCommunities = await storage.getUserCommunities(userId);\n\n      return res.json({\n        ...user,\n        communities: userCommunities,\n      });\n    } catch (error) {\n      logger.error(\"Failed to fetch user\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.patch(\n    \"/api/user/profile\",\n    isAuthenticated,\n    validateRequest(validateUserProfileUpdateSchema),\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n\n        const {\n          firstName,\n          lastName,\n          primaryCommunity,\n          username,\n          bio,\n          location,\n          website,\n          status,\n          statusMessage,\n          timezone,\n          isPrivate,\n          showOnlineStatus,\n          allowDirectMessages,\n        } = req.body;\n\n        const updates: Partial<UpsertUser> = {};\n        if (firstName !== undefined) updates.firstName = firstName;\n        if (lastName !== undefined) updates.lastName = lastName;\n        if (primaryCommunity !== undefined)\n          updates.primaryCommunity = primaryCommunity;\n        if (username !== undefined) updates.username = username;\n        if (bio !== undefined) updates.bio = bio;\n        if (location !== undefined) updates.location = location;\n        if (website !== undefined) updates.website = website;\n        if (status !== undefined) updates.status = status;\n        if (statusMessage !== undefined) updates.statusMessage = statusMessage;\n        if (timezone !== undefined) updates.timezone = timezone;\n        if (isPrivate !== undefined) updates.isPrivate = isPrivate;\n        if (showOnlineStatus !== undefined)\n          updates.showOnlineStatus = showOnlineStatus;\n        if (allowDirectMessages !== undefined)\n          updates.allowDirectMessages = allowDirectMessages;\n\n        const updatedUser = await storage.updateUser(userId, updates);\n        return res.json(updatedUser);\n      } catch (error) {\n        logger.error(\"Failed to update user profile\", error, {\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res.status(500).json({ message: \"Failed to update profile\" });\n      }\n    },\n  );\n\n  // Get user profile (for viewing other users' profiles)\n  app.get(\"/api/user/profile/:userId?\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const currentUserId = getAuthUserId(authenticatedReq);\n      const targetUserId = req.params.userId || currentUserId;\n\n      const user = await storage.getUser(targetUserId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Get additional profile data\n      const userCommunities = await storage.getUserCommunities(targetUserId);\n\n      return res.json({\n        ...user,\n        communities: userCommunities,\n        isOwnProfile: currentUserId === targetUserId,\n        friendCount: await storage.getFriendCount(targetUserId),\n      });\n    } catch (error) {\n      logger.error(\"Failed to fetch user profile\", error, {\n        currentUserId: getAuthUserId(authenticatedReq),\n        targetUserId: req.params.userId,\n      });\n      return res.status(500).json({ message: \"Failed to fetch profile\" });\n    }\n  });\n\n  // Social links routes\n  app.get(\n    \"/api/user/social-links/:userId?\",\n    isAuthenticated,\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const currentUserId = getAuthUserId(authenticatedReq);\n        const targetUserId = req.params.userId || currentUserId;\n\n        const socialLinks = await storage.getUserSocialLinks(targetUserId);\n        return res.json(socialLinks);\n      } catch (error) {\n        logger.error(\"Failed to fetch social links\", error, {\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res\n          .status(500)\n          .json({ message: \"Failed to fetch social links\" });\n      }\n    },\n  );\n\n  app.put(\n    \"/api/user/social-links\",\n    isAuthenticated,\n    validateRequest(validateSocialLinksSchema),\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const { links } = req.body;\n\n        const updatedLinks = await storage.updateUserSocialLinks(userId, links);\n        return res.json(updatedLinks);\n      } catch (error) {\n        logger.error(\"Failed to update social links\", error, {\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res\n          .status(500)\n          .json({ message: \"Failed to update social links\" });\n      }\n    },\n  );\n\n  // Gaming profiles routes\n  app.get(\n    \"/api/user/gaming-profiles/:userId?\",\n    isAuthenticated,\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const currentUserId = getAuthUserId(authenticatedReq);\n        const targetUserId = req.params.userId || currentUserId;\n\n        const gamingProfiles =\n          await storage.getUserGamingProfiles(targetUserId);\n        return res.json(gamingProfiles);\n      } catch (error) {\n        logger.error(\"Failed to fetch gaming profiles\", error, {\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res\n          .status(500)\n          .json({ message: \"Failed to fetch gaming profiles\" });\n      }\n    },\n  );\n\n  // Friendship routes\n  app.get(\"/api/friends\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n      const friends = await storage.getFriends(userId);\n      return res.json(friends);\n    } catch (error) {\n      logger.error(\"Failed to fetch friends\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res.status(500).json({ message: \"Failed to fetch friends\" });\n    }\n  });\n\n  app.get(\"/api/friend-requests\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n      const friendRequests = await storage.getFriendRequests(userId);\n      return res.json(friendRequests);\n    } catch (error) {\n      logger.error(\"Failed to fetch friend requests\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res\n        .status(500)\n        .json({ message: \"Failed to fetch friend requests\" });\n    }\n  });\n\n  app.post(\"/api/friend-requests\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const requesterId = getAuthUserId(authenticatedReq);\n      const { addresseeId } = req.body;\n\n      if (!addresseeId) {\n        return res.status(400).json({ message: \"Addressee ID is required\" });\n      }\n\n      if (requesterId === addresseeId) {\n        return res\n          .status(400)\n          .json({ message: \"Cannot send friend request to yourself\" });\n      }\n\n      // Check if friendship already exists\n      const existingFriendship = await storage.checkFriendshipStatus(\n        requesterId,\n        addresseeId,\n      );\n      if (existingFriendship) {\n        return res\n          .status(400)\n          .json({ message: \"Friendship request already exists\" });\n      }\n\n      const friendship = await storage.sendFriendRequest(\n        requesterId,\n        addresseeId,\n      );\n\n      // Create notification for the addressee\n      await storage.createNotification({\n        userId: addresseeId,\n        type: \"friend_request\",\n        title: \"New Friend Request\",\n        message: `You have a new friend request`,\n        data: JSON.stringify({ friendshipId: friendship.id, requesterId }),\n      });\n\n      return res.status(201).json(friendship);\n    } catch (error) {\n      logger.error(\"Failed to send friend request\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res.status(500).json({ message: \"Failed to send friend request\" });\n    }\n  });\n\n  app.put(\"/api/friend-requests/:id\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n      const id = assertRouteParam(req.params.id, \"id\");\n      const { status } = req.body;\n\n      if (![\"accepted\", \"declined\", \"blocked\"].includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n\n      const friendship = await storage.respondToFriendRequest(id, status);\n\n      // Create notification for the requester if accepted\n      if (status === \"accepted\") {\n        await storage.createNotification({\n          userId: friendship.requesterId,\n          type: \"friend_accepted\",\n          title: \"Friend Request Accepted\",\n          message: `Your friend request was accepted`,\n          data: JSON.stringify({ friendshipId: friendship.id }),\n        });\n      }\n\n      return res.json(friendship);\n    } catch (error) {\n      logger.error(\"Failed to respond to friend request\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res\n        .status(500)\n        .json({ message: \"Failed to respond to friend request\" });\n    }\n  });\n\n  app.delete(\"/api/friends/:id\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n      const id = assertRouteParam(req.params.id, \"id\");\n\n      // First check if the user is part of this friendship\n      const friendship = await storage.checkFriendshipStatus(userId, id);\n      if (!friendship) {\n        return res.status(404).json({ message: \"Friendship not found\" });\n      }\n\n      await storage.respondToFriendRequest(friendship.id, \"declined\");\n      return res.json({ success: true });\n    } catch (error) {\n      logger.error(\"Failed to remove friend\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res.status(500).json({ message: \"Failed to remove friend\" });\n    }\n  });\n\n  // User settings routes\n  app.get(\"/api/user/settings\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n      const settings = await storage.getUserSettings(userId);\n      return res.json(settings);\n    } catch (error) {\n      logger.error(\"Failed to fetch user settings\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res.status(500).json({ message: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.put(\"/api/user/settings\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n      const settingsData = { ...req.body, userId };\n\n      const settings = await storage.upsertUserSettings(settingsData);\n      return res.json(settings);\n    } catch (error) {\n      logger.error(\"Failed to update user settings\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res.status(500).json({ message: \"Failed to update settings\" });\n    }\n  });\n\n  // Matchmaking routes\n  app.get(\"/api/matchmaking/preferences\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n      const preferences = await storage.getMatchmakingPreferences(userId);\n      return res.json(preferences);\n    } catch (error) {\n      logger.error(\"Failed to fetch matchmaking preferences\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res.status(500).json({ message: \"Failed to fetch preferences\" });\n    }\n  });\n\n  app.put(\"/api/matchmaking/preferences\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n      const preferencesData = { ...req.body, userId };\n\n      const preferences =\n        await storage.upsertMatchmakingPreferences(preferencesData);\n      return res.json(preferences);\n    } catch (error) {\n      logger.error(\"Failed to update matchmaking preferences\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res.status(500).json({ message: \"Failed to update preferences\" });\n    }\n  });\n\n  app.post(\n    \"/api/matchmaking/find-players\",\n    isAuthenticated,\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n\n        // Get user's current preferences or use request body preferences\n        let preferences = await storage.getMatchmakingPreferences(userId);\n        if (!preferences) {\n          // Create default preferences if none exist\n          preferences = await storage.upsertMatchmakingPreferences({\n            userId,\n            gameType: req.body.selectedGames?.[0] || \"MTG\", // Take first game as gameType\n            preferredFormats: JSON.stringify(\n              req.body.selectedFormats || [\"commander\"],\n            ),\n            skillLevelRange: JSON.stringify([\n              req.body.powerLevelMin || 1,\n              req.body.powerLevelMax || 10,\n            ]),\n            playStyle: req.body.playstyle || \"casual\",\n            preferredLocation: req.body.location || null,\n            maxTravelDistance: req.body.maxDistance || 50,\n            availabilitySchedule: JSON.stringify(req.body.availability || {}),\n            communicationPreferences: JSON.stringify({\n              language: req.body.language || \"english\",\n              onlineOnly: req.body.onlineOnly || false,\n            }),\n          });\n        }\n\n        const matches = await storage.findMatchingPlayers(userId, preferences);\n        return res.json(matches);\n      } catch (error) {\n        logger.error(\"Failed to find matching players\", error, {\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res.status(500).json({ message: \"Failed to find matches\" });\n      }\n    },\n  );\n\n  // Tournament routes - improved with proper error handling\n  app.get(\n    \"/api/tournaments\",\n    validateQuery(\n      z.object({\n        community: z.string().uuid().optional(),\n        ...paginationQuerySchema.shape,\n      }),\n    ),\n    asyncHandler(async (req, res) => {\n      const { community: communityId, page, limit } = req.query as Record<string, string>;\n      const tournaments = await storage.getTournaments(communityId);\n      return res.json({\n        success: true,\n        data: tournaments,\n        meta: {\n          page: page || 1,\n          limit: limit || 20,\n          total: tournaments.length,\n        },\n      });\n    }),\n  );\n\n  app.get(\n    \"/api/tournaments/:id\",\n    validateParamsWithSchema(uuidParamSchema),\n    asyncHandler(async (req, res) => {\n      const tournamentId = assertRouteParam(req.params.id, \"id\");\n      const tournament = await storage.getTournament(tournamentId);\n\n      if (!tournament) {\n        throw new NotFoundErr(\"Tournament not found\");\n      }\n\n      return res.json({\n        success: true,\n        data: tournament,\n      });\n    }),\n  );\n\n  app.post(\n    \"/api/tournaments\",\n    isAuthenticated,\n    validateRequest(\n      z.object({\n        title: z.string().min(1, \"Title is required\").max(200),\n        description: z.string().max(1000).optional(),\n        type: z.enum([\"tournament\", \"convention\", \"release\", \"community\"]),\n        date: z\n          .string()\n          .regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Date must be in YYYY-MM-DD format\"),\n        maxParticipants: z.number().int().min(1).max(1000).optional(),\n        communityId: z.string().uuid(\"Invalid community ID\"),\n        isPublic: z.boolean().default(true),\n      }),\n    ),\n    asyncHandler(async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      const userId = getAuthUserId(authenticatedReq);\n      const tournamentData = { ...req.body, organizerId: userId };\n\n      const tournament = await storage.createTournament(tournamentData);\n      return res.status(201).json({\n        success: true,\n        data: tournament,\n        message: \"Tournament created successfully\",\n      });\n    }),\n  );\n\n  app.post(\n    \"/api/tournaments/:id/join\",\n    isAuthenticated,\n    validateParamsWithSchema(uuidParamSchema),\n    asyncHandler(async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      const userId = getAuthUserId(authenticatedReq);\n      const tournamentId = assertRouteParam(req.params.id, \"id\");\n\n      const participant = await storage.joinTournament(tournamentId, userId);\n      if (!participant) {\n        throw new ConflictError(\n          \"Already joined tournament or tournament is full\",\n        );\n      }\n\n      return res.status(201).json({\n        success: true,\n        data: participant,\n        message: \"Successfully joined tournament\",\n      });\n    }),\n  );\n\n  app.delete(\n    \"/api/tournaments/:id/leave\",\n    isAuthenticated,\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const tournamentId = assertRouteParam(req.params.id, \"id\");\n\n        const success = await storage.leaveTournament(tournamentId, userId);\n        if (success) {\n          return res.json({ message: \"Left tournament successfully\" });\n        } else {\n          return res\n            .status(404)\n            .json({ message: \"Tournament participation not found\" });\n        }\n      } catch (error) {\n        logger.error(\"Failed to leave tournament\", error, {\n          userId: getAuthUserId(authenticatedReq),\n          tournamentId: req.params.id,\n        });\n        return res.status(500).json({ message: \"Failed to leave tournament\" });\n      }\n    },\n  );\n\n  // Forum routes\n  app.get(\"/api/forum/posts\", async (req, res) => {\n    try {\n      const { communityId, category, limit, offset } = req.query;\n\n      if (!communityId) {\n        return res.status(400).json({ message: \"Community ID is required\" });\n      }\n\n      const posts = await storage.getForumPosts(communityId as string, {\n        category: category as string,\n        limit: limit ? parseInt(limit as string) : undefined,\n        offset: offset ? parseInt(offset as string) : undefined,\n      });\n\n      return res.json(posts);\n    } catch (error) {\n      logger.error(\"Failed to fetch forum posts\", error, {\n        communityId: req.query.communityId,\n      });\n      return res.status(500).json({ message: \"Failed to fetch forum posts\" });\n    }\n  });\n\n  app.get(\"/api/forum/posts/:id\", async (req, res) => {\n    try {\n      const postId = assertRouteParam(req.params.id, \"id\");\n      const userId = req.query.userId as string;\n\n      const post = await storage.getForumPost(postId, userId);\n      if (!post) {\n        return res.status(404).json({ message: \"Forum post not found\" });\n      }\n\n      return res.json(post);\n    } catch (error) {\n      logger.error(\"Failed to fetch forum post\", error, {\n        postId: req.params.id,\n      });\n      return res.status(500).json({ message: \"Failed to fetch forum post\" });\n    }\n  });\n\n  app.post(\"/api/forum/posts\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n      const postData = { ...req.body, authorId: userId };\n\n      const post = await storage.createForumPost(postData);\n      return res.json(post);\n    } catch (error) {\n      logger.error(\"Failed to create forum post\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res.status(500).json({ message: \"Failed to create forum post\" });\n    }\n  });\n\n  app.put(\"/api/forum/posts/:id\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const postId = assertRouteParam(req.params.id, \"id\");\n      const userId = getAuthUserId(authenticatedReq);\n\n      // Check if user owns the post\n      const existingPost = await storage.getForumPost(postId);\n      if (!existingPost) {\n        return res.status(404).json({ message: \"Forum post not found\" });\n      }\n      if (existingPost.authorId !== userId) {\n        return res\n          .status(403)\n          .json({ message: \"Not authorized to edit this post\" });\n      }\n\n      const updatedPost = await storage.updateForumPost(postId, req.body);\n      return res.json(updatedPost);\n    } catch (error) {\n      logger.error(\"Failed to update forum post\", error, {\n        postId: req.params.id,\n      });\n      return res.status(500).json({ message: \"Failed to update forum post\" });\n    }\n  });\n\n  app.delete(\"/api/forum/posts/:id\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const postId = assertRouteParam(req.params.id, \"id\");\n      const userId = getAuthUserId(authenticatedReq);\n\n      // Check if user owns the post\n      const existingPost = await storage.getForumPost(postId);\n      if (!existingPost) {\n        return res.status(404).json({ message: \"Forum post not found\" });\n      }\n      if (existingPost.authorId !== userId) {\n        return res\n          .status(403)\n          .json({ message: \"Not authorized to delete this post\" });\n      }\n\n      await storage.deleteForumPost(postId);\n      return res.json({ success: true });\n    } catch (error) {\n      logger.error(\"Failed to delete forum post\", error, {\n        postId: req.params.id,\n      });\n      return res.status(500).json({ message: \"Failed to delete forum post\" });\n    }\n  });\n\n  app.post(\"/api/forum/posts/:id/like\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const postId = assertRouteParam(req.params.id, \"id\");\n      const userId = getAuthUserId(authenticatedReq);\n\n      await storage.likeForumPost(postId, userId);\n      return res.json({ success: true });\n    } catch (error) {\n      logger.error(\"Failed to like forum post\", error, {\n        postId: req.params.id,\n      });\n      return res.status(500).json({ message: \"Failed to like forum post\" });\n    }\n  });\n\n  app.delete(\"/api/forum/posts/:id/like\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const postId = assertRouteParam(req.params.id, \"id\");\n      const userId = getAuthUserId(authenticatedReq);\n\n      await storage.unlikeForumPost(postId, userId);\n      return res.json({ success: true });\n    } catch (error) {\n      logger.error(\"Failed to unlike forum post\", error, {\n        postId: req.params.id,\n      });\n      return res.status(500).json({ message: \"Failed to unlike forum post\" });\n    }\n  });\n\n  app.get(\"/api/forum/posts/:id/replies\", async (req, res) => {\n    try {\n      const postId = req.params.id;\n      const userId = req.query.userId as string;\n\n      const replies = await storage.getForumReplies(postId, userId);\n      return res.json(replies);\n    } catch (error) {\n      logger.error(\"Failed to fetch forum replies\", error, {\n        postId: req.params.id,\n      });\n      return res.status(500).json({ message: \"Failed to fetch forum replies\" });\n    }\n  });\n\n  app.post(\n    \"/api/forum/posts/:id/replies\",\n    isAuthenticated,\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const postId = req.params.id;\n        const userId = getAuthUserId(authenticatedReq);\n        const replyData = { ...req.body, postId, authorId: userId };\n\n        const reply = await storage.createForumReply(replyData);\n        return res.json(reply);\n      } catch (error) {\n        logger.error(\"Failed to create forum reply\", error, {\n          postId: req.params.id,\n        });\n        return res\n          .status(500)\n          .json({ message: \"Failed to create forum reply\" });\n      }\n    },\n  );\n\n  app.post(\"/api/forum/replies/:id/like\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const replyId = assertRouteParam(req.params.id, \"id\");\n      const userId = getAuthUserId(authenticatedReq);\n\n      await storage.likeForumReply(replyId, userId);\n      return res.json({ success: true });\n    } catch (error) {\n      logger.error(\"Failed to like forum reply\", error, {\n        replyId: req.params.id,\n      });\n      return res.status(500).json({ message: \"Failed to like forum reply\" });\n    }\n  });\n\n  app.delete(\n    \"/api/forum/replies/:id/like\",\n    isAuthenticated,\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const replyId = assertRouteParam(req.params.id, \"id\");\n        const userId = getAuthUserId(authenticatedReq);\n\n        await storage.unlikeForumReply(replyId, userId);\n        return res.json({ success: true });\n      } catch (error) {\n        logger.error(\"Failed to unlike forum reply\", error, {\n          replyId: req.params.id,\n        });\n        return res\n          .status(500)\n          .json({ message: \"Failed to unlike forum reply\" });\n      }\n    },\n  );\n\n  // Analytics routes - comprehensive analytics system\n  app.use(\"/api/analytics\", analyticsRouter);\n\n  // Cache health and management routes\n  app.use(\"/api/cache\", cacheHealthRouter);\n\n  // Database health and monitoring routes\n  app.use(\"/api/database\", databaseHealthRouter);\n\n  // Backup and recovery management routes\n  app.use(\"/api/backup\", backupRouter);\n\n  // Monitoring and alerting routes\n  app.use(\"/api/monitoring\", monitoringRouter);\n\n  // Real-time matching and AI recommendations\n  app.use(\"/api/matching\", matchingRouter);\n\n  // Universal Deck-Building routes (new)\n  app.use(\"/api/games\", gamesCrudRoutes); // Game CRUD operations\n  app.use(\"/api/games\", universalCardRoutes); // Game-scoped card operations\n\n  // Card recognition routes for MTG and other TCG cards (legacy, maintained for backward compatibility)\n  app.use(\"/api/cards\", cardRecognitionRoutes);\n\n  // ========================================\n  // COLLABORATIVE STREAMING API ROUTES\n  // ========================================\n\n  // Create collaborative stream event\n  app.post(\n    \"/api/collaborative-streams\",\n    isAuthenticated,\n    eventCreationRateLimit,\n    validateRequest(insertCollaborativeStreamEventSchema),\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n\n        const event = await collaborativeStreaming.createCollaborativeEvent(\n          userId,\n          req.body,\n        );\n\n        logger.info(\"Collaborative stream event created\", {\n          eventId: event.id,\n          userId,\n          title: event.title,\n        });\n        return res.status(201).json(event);\n      } catch (error) {\n        logger.error(\"Failed to create collaborative stream event\", error, {\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res\n          .status(500)\n          .json({ message: \"Failed to create collaborative stream event\" });\n      }\n    },\n  );\n\n  // Get user's collaborative stream events\n  app.get(\"/api/collaborative-streams\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n      const events = await storage.getUserCollaborativeStreamEvents(userId);\n      return res.json(events);\n    } catch (error) {\n      logger.error(\"Failed to get collaborative stream events\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res\n        .status(500)\n        .json({ message: \"Failed to get collaborative stream events\" });\n    }\n  });\n\n  // Get specific collaborative stream event\n  app.get(\n    \"/api/collaborative-streams/:eventId\",\n    isAuthenticated,\n    validateParams(\"eventId\", validateUUID, \"Invalid event ID format\"),\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const eventId = assertRouteParam(req.params.eventId, \"eventId\");\n\n        const event = await storage.getCollaborativeStreamEvent(eventId);\n        if (!event) {\n          return res\n            .status(404)\n            .json({ message: \"Collaborative stream event not found\" });\n        }\n\n        return res.json(event);\n      } catch (error) {\n        logger.error(\"Failed to get collaborative stream event\", error, {\n          eventId: req.params.eventId,\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res\n          .status(500)\n          .json({ message: \"Failed to get collaborative stream event\" });\n      }\n    },\n  );\n\n  // Update collaborative stream event\n  app.patch(\n    \"/api/collaborative-streams/:eventId\",\n    isAuthenticated,\n    validateParams(\"eventId\", validateUUID, \"Invalid event ID format\"),\n    validateRequest(insertCollaborativeStreamEventSchema.partial()),\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const eventId = assertRouteParam(req.params.eventId, \"eventId\");\n\n        // Check if user is the event creator\n        const event = await storage.getCollaborativeStreamEvent(eventId);\n        if (!event) {\n          return res\n            .status(404)\n            .json({ message: \"Collaborative stream event not found\" });\n        }\n        if (event.creatorId !== userId) {\n          return res\n            .status(403)\n            .json({ message: \"Only event creator can update the event\" });\n        }\n\n        const updatedEvent = await storage.updateCollaborativeStreamEvent(\n          eventId,\n          req.body,\n        );\n        return res.json(updatedEvent);\n      } catch (error) {\n        logger.error(\"Failed to update collaborative stream event\", error, {\n          eventId: req.params.eventId,\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res\n          .status(500)\n          .json({ message: \"Failed to update collaborative stream event\" });\n      }\n    },\n  );\n\n  // Delete collaborative stream event\n  app.delete(\n    \"/api/collaborative-streams/:eventId\",\n    isAuthenticated,\n    validateParams(\"eventId\", validateUUID, \"Invalid event ID format\"),\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const eventId = assertRouteParam(req.params.eventId, \"eventId\");\n\n        // Check if user is the event creator\n        const event = await storage.getCollaborativeStreamEvent(eventId);\n        if (!event) {\n          return res\n            .status(404)\n            .json({ message: \"Collaborative stream event not found\" });\n        }\n        if (event.creatorId !== userId) {\n          return res\n            .status(403)\n            .json({ message: \"Only event creator can delete the event\" });\n        }\n\n        await storage.deleteCollaborativeStreamEvent(eventId);\n        return res.json({\n          message: \"Collaborative stream event deleted successfully\",\n        });\n      } catch (error) {\n        logger.error(\"Failed to delete collaborative stream event\", error, {\n          eventId: req.params.eventId,\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res\n          .status(500)\n          .json({ message: \"Failed to delete collaborative stream event\" });\n      }\n    },\n  );\n\n  // Get collaboration suggestions for an event\n  app.get(\n    \"/api/collaborative-streams/:eventId/suggestions\",\n    isAuthenticated,\n    validateParams(\"eventId\", validateUUID, \"Invalid event ID format\"),\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const eventId = assertRouteParam(req.params.eventId, \"eventId\");\n\n        const suggestions =\n          await collaborativeStreaming.getCollaborationSuggestions(\n            eventId,\n            userId,\n          );\n        return res.json(suggestions);\n      } catch (error) {\n        logger.error(\"Failed to get collaboration suggestions\", error, {\n          eventId: req.params.eventId,\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res\n          .status(500)\n          .json({ message: \"Failed to get collaboration suggestions\" });\n      }\n    },\n  );\n\n  // Add collaborator to stream event\n  app.post(\n    \"/api/collaborative-streams/:eventId/collaborators\",\n    isAuthenticated,\n    validateParams(\"eventId\", validateUUID, \"Invalid event ID format\"),\n    validateRequest(insertStreamCollaboratorSchema),\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const eventId = assertRouteParam(req.params.eventId, \"eventId\");\n\n        const collaborator = await collaborativeStreaming.addCollaborator(\n          eventId,\n          req.body,\n        );\n        return res.status(201).json(collaborator);\n      } catch (error) {\n        logger.error(\"Failed to add collaborator\", error, {\n          eventId: req.params.eventId,\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res.status(500).json({ message: \"Failed to add collaborator\" });\n      }\n    },\n  );\n\n  // Get collaborators for stream event\n  app.get(\n    \"/api/collaborative-streams/:eventId/collaborators\",\n    isAuthenticated,\n    validateParams(\"eventId\", validateUUID, \"Invalid event ID format\"),\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const eventId = assertRouteParam(req.params.eventId, \"eventId\");\n        const collaborators = await storage.getStreamCollaborators(eventId);\n        return res.json(collaborators);\n      } catch (error) {\n        logger.error(\"Failed to get collaborators\", error, {\n          eventId: req.params.eventId,\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res.status(500).json({ message: \"Failed to get collaborators\" });\n      }\n    },\n  );\n\n  // Update collaborator status\n  app.patch(\n    \"/api/collaborative-streams/:eventId/collaborators/:collaboratorId\",\n    isAuthenticated,\n    validateParams(\"eventId\", validateUUID, \"Invalid event ID format\"),\n    validateRequest(insertStreamCollaboratorSchema.partial()),\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const eventId = assertRouteParam(req.params.eventId, \"eventId\");\n        const collaboratorId = assertRouteParam(\n          req.params.collaboratorId,\n          \"collaboratorId\",\n        );\n\n        const collaborator = await storage.updateStreamCollaborator(\n          collaboratorId,\n          req.body,\n        );\n        return res.json(collaborator);\n      } catch (error) {\n        logger.error(\"Failed to update collaborator\", error, {\n          eventId: req.params.eventId,\n          collaboratorId: req.params.collaboratorId,\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res\n          .status(500)\n          .json({ message: \"Failed to update collaborator\" });\n      }\n    },\n  );\n\n  // Remove collaborator from stream event\n  app.delete(\n    \"/api/collaborative-streams/:eventId/collaborators/:collaboratorId\",\n    isAuthenticated,\n    validateParams(\"eventId\", validateUUID, \"Invalid event ID format\"),\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const eventId = assertRouteParam(req.params.eventId, \"eventId\");\n        const collaboratorId = assertRouteParam(\n          req.params.collaboratorId,\n          \"collaboratorId\",\n        );\n\n        await storage.deleteStreamCollaborator(collaboratorId);\n        return res.json({ message: \"Collaborator removed successfully\" });\n      } catch (error) {\n        logger.error(\"Failed to remove collaborator\", error, {\n          eventId: req.params.eventId,\n          collaboratorId: req.params.collaboratorId,\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res\n          .status(500)\n          .json({ message: \"Failed to remove collaborator\" });\n      }\n    },\n  );\n\n  // Start coordination session\n  app.post(\n    \"/api/collaborative-streams/:eventId/coordination/start\",\n    isAuthenticated,\n    validateParams(\"eventId\", validateUUID, \"Invalid event ID format\"),\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const eventId = assertRouteParam(req.params.eventId, \"eventId\");\n\n        const session = await collaborativeStreaming.startCoordinationSession(\n          eventId,\n          userId,\n        );\n        return res.status(201).json(session);\n      } catch (error) {\n        logger.error(\"Failed to start coordination session\", error, {\n          eventId: req.params.eventId,\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res\n          .status(500)\n          .json({ message: \"Failed to start coordination session\" });\n      }\n    },\n  );\n\n  // Update coordination session phase\n  app.patch(\n    \"/api/collaborative-streams/:eventId/coordination/phase\",\n    isAuthenticated,\n    validateParams(\"eventId\", validateUUID, \"Invalid event ID format\"),\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const eventId = assertRouteParam(req.params.eventId, \"eventId\");\n        const { phase } = req.body;\n\n        await collaborativeStreaming.updateCoordinationPhase(\n          eventId,\n          phase,\n          userId,\n        );\n        return res.json({ message: \"Coordination phase updated successfully\" });\n      } catch (error) {\n        logger.error(\"Failed to update coordination phase\", error, {\n          eventId: req.params.eventId,\n          phase: req.body.phase,\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res\n          .status(500)\n          .json({ message: \"Failed to update coordination phase\" });\n      }\n    },\n  );\n\n  // Get coordination session status\n  app.get(\n    \"/api/collaborative-streams/:eventId/coordination/status\",\n    isAuthenticated,\n    validateParams(\"eventId\", validateUUID, \"Invalid event ID format\"),\n    async (req, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const eventId = assertRouteParam(req.params.eventId, \"eventId\");\n\n        const status =\n          await collaborativeStreaming.getCoordinationStatus(eventId);\n        return res.json(status);\n      } catch (error) {\n        logger.error(\"Failed to get coordination status\", error, {\n          eventId: req.params.eventId,\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res\n          .status(500)\n          .json({ message: \"Failed to get coordination status\" });\n      }\n    },\n  );\n\n  // Data export route\n  app.get(\"/api/user/export-data\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n\n      // Get comprehensive user data for export\n      const userData = await storage.exportUserData(userId);\n\n      logger.info(\"Data export completed\", { userId });\n      return res.json(userData);\n    } catch (error) {\n      logger.error(\"Failed to export user data\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res.status(500).json({ message: \"Failed to export data\" });\n    }\n  });\n\n  // Account deletion route\n  app.delete(\"/api/user/account\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n\n      // Perform cascade deletion of user data\n      const success = await storage.deleteUserAccount(userId);\n\n      if (success) {\n        logger.info(\"Account deletion completed\", { userId });\n\n        // Note: Auth.js handles session cleanup automatically when user is deleted\n        // Clear any additional cookies if needed\n        res.clearCookie(\"authjs.session-token\");\n        res.clearCookie(\"__Secure-authjs.session-token\");\n\n        return res.json({\n          message: \"Account deleted successfully\",\n        });\n      } else {\n        return res.status(404).json({ message: \"User account not found\" });\n      }\n    } catch (error) {\n      logger.error(\"Failed to delete user account\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res.status(500).json({ message: \"Failed to delete account\" });\n    }\n  });\n\n  // Password reset routes\n  app.post(\n    \"/api/auth/forgot-password\",\n    passwordResetRateLimit,\n    validateRequest(validateEmailSchema),\n    async (req, res) => {\n      try {\n        const { email } = req.body;\n\n        if (!email) {\n          return res.status(400).json({ message: \"Email is required\" });\n        }\n\n        // Check if user exists (we check this for security but don't reveal it)\n        const userExists = await storage.getUserByEmail(email);\n\n        if (userExists) {\n          // Invalidate any existing reset tokens for this user\n          await storage.invalidateUserPasswordResetTokens(userExists.id);\n\n          // Generate secure JWT token for password reset\n          const resetToken = await generatePasswordResetJWT(\n            userExists.id,\n            email,\n            TOKEN_EXPIRY.PASSWORD_RESET,\n          );\n\n          // Store token in database\n          const expiresAt = new Date(\n            Date.now() + TOKEN_EXPIRY.PASSWORD_RESET * 1000,\n          );\n          await storage.createPasswordResetToken({\n            userId: userExists.id,\n            token: resetToken,\n            expiresAt,\n          });\n\n          // Send email with trusted base URL\n          const baseUrl =\n            process.env.AUTH_URL ||\n            process.env.PUBLIC_WEB_URL ||\n            \"https://shuffleandsync.org\";\n          await sendPasswordResetEmail(\n            email,\n            resetToken,\n            baseUrl,\n            userExists.firstName || undefined,\n          );\n        }\n\n        return res.json({\n          message:\n            \"If an account with that email exists, a password reset link has been sent.\",\n        });\n      } catch (error) {\n        logger.error(\"Password reset request failed\", {\n          email: req.body.email,\n        });\n        return res\n          .status(500)\n          .json({ message: \"Failed to process password reset request\" });\n      }\n    },\n  );\n\n  app.get(\"/api/auth/verify-reset-token/:token\", async (req, res) => {\n    try {\n      const { token } = req.params;\n\n      const resetToken = await storage.getPasswordResetToken(token);\n\n      if (!resetToken) {\n        return res\n          .status(400)\n          .json({ message: \"Invalid or expired reset token\" });\n      }\n\n      // Get user email from userId\n      const user = await storage.getUser(resetToken.userId);\n      return res.json({ message: \"Token is valid\", email: user?.email });\n    } catch (error) {\n      logger.error(\"Failed to verify reset token\", error, {\n        token: req.body.token,\n      });\n      return res.status(500).json({ message: \"Failed to verify reset token\" });\n    }\n  });\n\n  app.post(\n    \"/api/auth/reset-password\",\n    passwordResetRateLimit,\n    validateRequest(validatePasswordResetSchema),\n    async (req, res) => {\n      try {\n        const { token, newPassword } = req.body;\n\n        if (!token || !newPassword) {\n          return res\n            .status(400)\n            .json({ message: \"Token and new password are required\" });\n        }\n\n        // Validate password strength with enhanced security rules\n        const validation = validatePasswordStrength(newPassword);\n        if (!validation.valid) {\n          return res.status(400).json({\n            message: \"Password does not meet security requirements\",\n            details: validation.errors,\n          });\n        }\n\n        // Verify JWT token\n        const jwtResult = await verifyPasswordResetJWT(token);\n        if (!jwtResult.valid) {\n          return res\n            .status(400)\n            .json({ message: \"Invalid or expired reset token\" });\n        }\n\n        // Check token in database\n        const resetToken = await storage.getPasswordResetToken(token);\n        if (!resetToken) {\n          return res\n            .status(400)\n            .json({ message: \"Invalid or expired reset token\" });\n        }\n\n        // Find user by userId from token\n        const user = await storage.getUser(resetToken.userId);\n        if (!user) {\n          return res.status(400).json({ message: \"Invalid reset request\" });\n        }\n\n        // Hash new password with Argon2\n        const hashedPassword = await hashPassword(newPassword);\n\n        // Update user password\n        await storage.updateUser(user.id, { passwordHash: hashedPassword });\n\n        // Mark token as used\n        await storage.markTokenAsUsed(token);\n\n        // Log successful password reset (without sensitive data)\n        logger.info(\"Password reset completed successfully\", {\n          userId: user.id,\n          email: user.email,\n        });\n\n        return res.json({ message: \"Password has been reset successfully\" });\n      } catch (error) {\n        logger.error(\"Password reset failed\", {\n          error: error instanceof Error ? error.message : \"Unknown error\",\n        });\n        return res.status(500).json({ message: \"Failed to reset password\" });\n      }\n    },\n  );\n\n  // Multi-Factor Authentication endpoints\n  app.post(\"/api/auth/mfa/setup\", isAuthenticated, async (req, res) => {\n    try {\n      const authenticatedReq = req as AuthenticatedRequest;\n      const userId = getAuthUserId(authenticatedReq);\n\n      // Get user details\n      const user = await storage.getUser(userId);\n      if (!user || !user.email) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Check if MFA is already enabled\n      const existingMfa = await storage.getUserMfaSettings(userId);\n      if (existingMfa?.enabled) {\n        return res\n          .status(400)\n          .json({ message: \"MFA is already enabled for this account\" });\n      }\n\n      // Generate TOTP setup data\n      const setupData = await generateTOTPSetup(user.email, \"Shuffle & Sync\");\n\n      // Store pending TOTP secret in session with 10-minute expiry\n      const pendingData = {\n        secret: setupData.secret,\n        qrCodeUrl: setupData.qrCodeUrl,\n        manualEntryKey: setupData.manualEntryKey,\n        userId,\n        createdAt: Date.now(),\n        expiresAt: Date.now() + 10 * 60 * 1000, // 10 minutes\n      };\n\n      // Store in session for production-ready distributed deployments\n      if (!authenticatedReq.session) {\n        return res\n          .status(500)\n          .json({\n            message: \"Session not available - server configuration error\",\n          });\n      }\n      authenticatedReq.session.mfaPendingSecret = pendingData;\n\n      // Only return QR code and manual entry - NO plaintext secret or backup codes\n      return res.json({\n        message: \"MFA setup data generated - scan QR code or enter manual key\",\n        qrCodeUrl: setupData.qrCodeUrl,\n        manualEntryKey: setupData.manualEntryKey,\n        // Backup codes will be generated server-side upon successful enable\n      });\n    } catch (error) {\n      logger.error(\"MFA setup failed\", {\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        userId: getAuthUserId(req as AuthenticatedRequest),\n      });\n      return res.status(500).json({ message: \"Failed to generate MFA setup\" });\n    }\n  });\n\n  app.post(\"/api/auth/mfa/enable\", isAuthenticated, async (req, res) => {\n    try {\n      const authenticatedReq = req as AuthenticatedRequest;\n      const userId = getAuthUserId(authenticatedReq);\n      const { totpCode } = req.body;\n\n      if (!totpCode) {\n        return res\n          .status(400)\n          .json({ message: \"TOTP verification code is required\" });\n      }\n\n      // Get pending secret from session storage\n      const pendingData = authenticatedReq.session?.mfaPendingSecret;\n\n      if (\n        !pendingData ||\n        pendingData.expiresAt < Date.now() ||\n        pendingData.userId !== userId\n      ) {\n        // Clear expired or invalid pending secret\n        if (authenticatedReq.session?.mfaPendingSecret) {\n          delete authenticatedReq.session.mfaPendingSecret;\n        }\n        return res\n          .status(400)\n          .json({ message: \"MFA setup expired. Please start setup again.\" });\n      }\n\n      // Validate TOTP code against server-stored secret\n      const validation = validateMFASetupRequirements(\n        totpCode,\n        pendingData.secret,\n      );\n      if (!validation.isValid) {\n        return res.status(400).json({\n          message: \"Invalid TOTP code\",\n          details: validation.errors,\n        });\n      }\n\n      // Generate secure backup codes server-side (12 chars, higher entropy)\n      const newBackupCodes = generateBackupCodes(8); // 8 codes for better UX\n      const hashedBackupCodes = await Promise.all(\n        newBackupCodes.map(async (code: string) => await hashBackupCode(code)),\n      );\n\n      // Enable MFA for the user with server-generated data\n      await storage.enableUserMfa(\n        userId,\n        pendingData.secret,\n        hashedBackupCodes,\n      );\n\n      // Clear pending secret from session\n      if (authenticatedReq.session?.mfaPendingSecret) {\n        delete authenticatedReq.session.mfaPendingSecret;\n      }\n\n      // Log MFA enabled event with audit trail\n      logger.info(\"MFA enabled successfully\", { userId });\n\n      // Create audit log entry\n      await storage.createAuthAuditLog({\n        userId,\n        eventType: \"mfa_enabled\",\n        details: JSON.stringify({\n          method: \"totp\",\n          backupCodesGenerated: newBackupCodes.length,\n          userAgent: req.get(\"User-Agent\") || \"Unknown\",\n        }),\n        ipAddress: req.ip || req.connection.remoteAddress || \"Unknown\",\n        isSuccessful: true,\n      });\n\n      // Return backup codes ONCE - user must save them now\n      return res.json({\n        message: \"Multi-factor authentication has been enabled successfully\",\n        backupCodes: newBackupCodes,\n        warning: \"Save these backup codes now - they will not be shown again!\",\n      });\n    } catch (error) {\n      logger.error(\"MFA enable failed\", {\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        userId: getAuthUserId(req as AuthenticatedRequest),\n      });\n      return res.status(500).json({ message: \"Failed to enable MFA\" });\n    }\n  });\n\n  app.post(\"/api/auth/mfa/disable\", isAuthenticated, async (req, res) => {\n    try {\n      const authenticatedReq = req as AuthenticatedRequest;\n      const userId = getAuthUserId(authenticatedReq);\n      const { password } = req.body;\n\n      if (!password) {\n        return res\n          .status(400)\n          .json({\n            message: \"Password confirmation is required to disable MFA\",\n          });\n      }\n\n      // Get user and verify password\n      const user = await storage.getUser(userId);\n      if (!user || !user.passwordHash) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Verify password before allowing MFA disable\n      const isPasswordValid = await verifyPassword(password, user.passwordHash);\n      if (!isPasswordValid) {\n        return res.status(400).json({ message: \"Invalid password\" });\n      }\n\n      // Disable MFA\n      await storage.disableUserMfa(userId);\n\n      // Log MFA disabled event with audit trail\n      logger.info(\"MFA disabled successfully\", { userId });\n\n      // Create audit log entry\n      await storage.createAuthAuditLog({\n        userId,\n        eventType: \"mfa_disabled\",\n        details: JSON.stringify({\n          method: \"password_confirmation\",\n          userAgent: req.get(\"User-Agent\") || \"Unknown\",\n        }),\n        ipAddress: req.ip || req.connection.remoteAddress || \"Unknown\",\n        isSuccessful: true,\n      });\n\n      return res.json({\n        message: \"Multi-factor authentication has been disabled\",\n      });\n    } catch (error) {\n      logger.error(\"MFA disable failed\", {\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        userId: getAuthUserId(req as AuthenticatedRequest),\n      });\n      return res.status(500).json({ message: \"Failed to disable MFA\" });\n    }\n  });\n\n  app.post(\n    \"/api/auth/mfa/verify\",\n    isAuthenticated,\n    authRateLimit,\n    async (req, res) => {\n      try {\n        const authenticatedReq = req as AuthenticatedRequest;\n        const userId = getAuthUserId(authenticatedReq);\n        const { code, isBackupCode = false } = req.body;\n\n        if (!code) {\n          return res\n            .status(400)\n            .json({ message: \"Verification code is required\" });\n        }\n\n        // Extract device context for security validation\n        const deviceContext = extractDeviceContext(\n          req.headers,\n          req.ip || req.connection.remoteAddress || \"unknown\",\n        );\n        const deviceFingerprint = generateDeviceFingerprint(deviceContext);\n\n        // Calculate device risk score\n        const riskAssessment = await storage.calculateDeviceRiskScore(userId, {\n          userAgent: deviceContext.userAgent,\n          ipAddress: deviceContext.ipAddress,\n          location: deviceContext.location,\n          timezone: deviceContext.timezone,\n        });\n\n        // Validate device context and get trust score\n        const deviceValidation = await storage.validateDeviceContext(\n          userId,\n          deviceFingerprint.hash,\n        );\n\n        // Get user MFA settings\n        const mfaSettings = await storage.getUserMfaSettings(userId);\n        if (!mfaSettings || !mfaSettings.enabled) {\n          return res\n            .status(400)\n            .json({ message: \"MFA is not enabled for this account\" });\n        }\n\n        let isValid = false;\n\n        if (isBackupCode) {\n          // Verify backup code with Argon2id\n          const backupCodes = mfaSettings.backupCodes\n            ? JSON.parse(mfaSettings.backupCodes)\n            : [];\n          const backupResult = await verifyBackupCode(code, backupCodes);\n          if (backupResult.isValid && backupResult.codeIndex !== undefined) {\n            // Mark backup code as used by removing it from the array\n            await storage.markBackupCodeAsUsed(userId, backupResult.codeIndex);\n            isValid = true;\n          }\n        } else {\n          // Verify TOTP code\n          if (!mfaSettings.secret) {\n            return res.status(400).json({ message: \"TOTP secret not found\" });\n          }\n\n          const totpResult = verifyTOTPCode(code, mfaSettings.secret);\n          isValid = totpResult.isValid;\n        }\n\n        if (isValid) {\n          // Update last verified timestamp\n          await storage.updateUserMfaLastVerified(userId);\n\n          // Store MFA security context for this verification\n          await storage.createMfaSecurityContext({\n            userId,\n            deviceFingerprint: deviceValidation.deviceFingerprint?.id || null,\n            contextType: \"login\",\n            ipAddress: deviceContext.ipAddress,\n            location: deviceContext.location || null,\n            riskLevel:\n              riskAssessment.riskScore > 0.7\n                ? \"high\"\n                : riskAssessment.riskScore > 0.4\n                  ? \"medium\"\n                  : \"low\",\n            requiresMfa: true,\n            mfaCompleted: true,\n            isSuccessful: true,\n          });\n\n          // Update device fingerprint with successful verification\n          if (deviceValidation.deviceFingerprint) {\n            await storage.updateDeviceLastSeen(deviceFingerprint.hash);\n            // Increment successful verifications via updateDeviceFingerprint\n            await storage.updateDeviceFingerprint(\n              deviceValidation.deviceFingerprint.id,\n              {\n                lastSeen: new Date(),\n                trustScore: Math.min(\n                  1.0,\n                  (deviceValidation.deviceFingerprint.trustScore || 0.5) + 0.1,\n                ),\n              },\n            );\n          }\n\n          // Log successful MFA verification with audit trail\n          logger.info(\"MFA verification successful\", {\n            userId,\n            isBackupCode,\n            deviceTrustScore: deviceValidation.trustScore,\n            riskScore: riskAssessment.riskScore,\n            riskFactorsDetected: riskAssessment.riskFactors.length,\n          });\n\n          // Create audit log entry\n          await storage.createAuthAuditLog({\n            userId,\n            eventType: \"mfa_verified\",\n            details: JSON.stringify({\n              method: isBackupCode ? \"backup_code\" : \"totp\",\n              userAgent: req.get(\"User-Agent\") || \"Unknown\",\n              deviceTrustScore: deviceValidation.trustScore,\n              riskScore: riskAssessment.riskScore,\n            }),\n            ipAddress: req.ip || req.connection.remoteAddress || \"Unknown\",\n            isSuccessful: true,\n          });\n\n          return res.json({\n            message: \"MFA verification successful\",\n            securityContext: {\n              trustScore: deviceValidation.trustScore,\n              riskScore: riskAssessment.riskScore,\n              deviceTrusted: deviceValidation.trustScore > 0.7,\n            },\n          });\n        } else {\n          // Log failed MFA verification with audit trail\n          logger.warn(\"MFA verification failed\", { userId, isBackupCode });\n\n          // Create audit log entry for failed verification\n          await storage.createAuthAuditLog({\n            userId,\n            eventType: \"mfa_verified\",\n            details: JSON.stringify({\n              method: isBackupCode ? \"backup_code\" : \"totp\",\n              userAgent: req.get(\"User-Agent\") || \"Unknown\",\n            }),\n            ipAddress: req.ip || req.connection.remoteAddress || \"Unknown\",\n            isSuccessful: false,\n            failureReason: \"invalid_mfa_code\",\n          });\n\n          return res.status(400).json({ message: \"Invalid verification code\" });\n        }\n      } catch (error) {\n        logger.error(\"MFA verification error\", {\n          error: error instanceof Error ? error.message : \"Unknown error\",\n          userId: getAuthUserId(req as AuthenticatedRequest),\n        });\n        return res.status(500).json({ message: \"MFA verification failed\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/auth/mfa/backup-codes/regenerate\",\n    isAuthenticated,\n    async (req, res) => {\n      try {\n        const authenticatedReq = req as AuthenticatedRequest;\n        const userId = getAuthUserId(authenticatedReq);\n        const { password } = req.body;\n\n        if (!password) {\n          return res\n            .status(400)\n            .json({ message: \"Password confirmation is required\" });\n        }\n\n        // Get user and verify password\n        const user = await storage.getUser(userId);\n        if (!user || !user.passwordHash) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        // Verify password\n        const isPasswordValid = await verifyPassword(\n          password,\n          user.passwordHash,\n        );\n        if (!isPasswordValid) {\n          return res.status(400).json({ message: \"Invalid password\" });\n        }\n\n        // Check if MFA is enabled\n        const mfaSettings = await storage.getUserMfaSettings(userId);\n        if (!mfaSettings || !mfaSettings.enabled) {\n          return res\n            .status(400)\n            .json({ message: \"MFA is not enabled for this account\" });\n        }\n\n        // Generate new backup codes with enhanced security\n        const newBackupCodes = generateBackupCodes(8);\n        const hashedBackupCodes = await Promise.all(\n          newBackupCodes.map(async (code) => await hashBackupCode(code)),\n        );\n\n        // Update backup codes in database\n        await storage.updateUserMfaSettings(userId, {\n          backupCodes: JSON.stringify(hashedBackupCodes),\n        });\n\n        // Log backup codes regeneration with audit trail\n        logger.info(\"MFA backup codes regenerated\", { userId });\n\n        // Create audit log entry\n        await storage.createAuthAuditLog({\n          userId,\n          eventType: \"mfa_verified\", // Using existing enum, could add 'mfa_backup_codes_regenerated'\n          details: JSON.stringify({\n            action: \"backup_codes_regenerated\",\n            codesGenerated: newBackupCodes.length,\n            userAgent: req.get(\"User-Agent\") || \"Unknown\",\n          }),\n          ipAddress: req.ip || req.connection.remoteAddress || \"Unknown\",\n          isSuccessful: true,\n        });\n\n        return res.json({\n          message: \"New backup codes generated successfully\",\n          backupCodes: newBackupCodes,\n        });\n      } catch (error) {\n        logger.error(\"Backup codes regeneration failed\", {\n          error: error instanceof Error ? error.message : \"Unknown error\",\n          userId: getAuthUserId(req as AuthenticatedRequest),\n        });\n        return res\n          .status(500)\n          .json({ message: \"Failed to generate new backup codes\" });\n      }\n    },\n  );\n\n  app.get(\"/api/auth/mfa/status\", isAuthenticated, async (req, res) => {\n    try {\n      const authenticatedReq = req as AuthenticatedRequest;\n      const userId = getAuthUserId(authenticatedReq);\n\n      // Get user MFA settings\n      const mfaSettings = await storage.getUserMfaSettings(userId);\n\n      return res.json({\n        mfaEnabled: mfaSettings?.enabled || false,\n        enabledAt: mfaSettings?.createdAt || null, // Use createdAt since schema doesn't have enabledAt\n        lastVerifiedAt: mfaSettings?.updatedAt || null, // Use updatedAt since schema doesn't have lastVerifiedAt\n        backupCodesCount: mfaSettings?.backupCodes?.length || 0,\n      });\n    } catch (error) {\n      logger.error(\"MFA status check failed\", {\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        userId: getAuthUserId(req as AuthenticatedRequest),\n      });\n      return res.status(500).json({ message: \"Failed to get MFA status\" });\n    }\n  });\n\n  // JWT Session Management endpoints\n  app.post(\n    \"/api/auth/refresh\",\n    authRateLimit,\n    validateRequest(refreshTokenSchema),\n    async (req, res) => {\n      try {\n        const { refreshToken } = req.body;\n\n        if (!refreshToken) {\n          return res.status(400).json({ message: \"Refresh token is required\" });\n        }\n\n        // Verify the refresh token JWT\n        const { valid, payload, error } =\n          await verifyRefreshTokenJWT(refreshToken);\n        if (!valid || !payload) {\n          logger.warn(\"Invalid refresh token attempted\", { error, ip: req.ip });\n          return res\n            .status(401)\n            .json({ message: \"Invalid or expired refresh token\" });\n        }\n\n        // Check if refresh token exists in database and is not revoked\n        const tokenRecord = await storage.getRefreshToken(payload.jti);\n        if (!tokenRecord) {\n          logger.warn(\"Refresh token not found in database\", {\n            tokenId: payload.jti,\n            ip: req.ip,\n          });\n          return res.status(401).json({ message: \"Invalid refresh token\" });\n        }\n\n        // CRITICAL SECURITY: Check if token was already revoked (reuse detection)\n        if (tokenRecord.isRevoked) {\n          logger.error(\n            \"SECURITY ALERT: Refresh token reuse detected - revoking all user tokens\",\n            {\n              userId: payload.sub,\n              tokenId: payload.jti,\n              ip: req.ip,\n              userAgent: req.headers[\"user-agent\"],\n            },\n          );\n\n          // Revoke ALL user's refresh tokens immediately\n          await storage.revokeAllUserRefreshTokens(payload.sub);\n\n          // Log security incident to audit trail\n          await storage.createAuthAuditLog({\n            userId: payload.sub,\n            eventType: \"logout\", // Closest equivalent to forced logout due to security\n            ipAddress: req.ip || \"unknown\",\n            userAgent: req.headers[\"user-agent\"] || \"unknown\",\n            isSuccessful: false,\n            failureReason: \"security_policy\", // Use valid enum value instead\n            details: JSON.stringify({\n              tokenId: payload.jti,\n              revokedAllTokens: true,\n            }),\n          });\n          return res\n            .status(401)\n            .json({\n              message: \"Security violation detected - all tokens revoked\",\n            });\n        }\n\n        // Get user details\n        const user = await storage.getUser(payload.sub);\n        if (!user) {\n          logger.warn(\"User not found for refresh token\", {\n            userId: payload.sub,\n            ip: req.ip,\n          });\n          return res.status(401).json({ message: \"User not found\" });\n        }\n\n        if (!user.email) {\n          logger.warn(\"User has no email for refresh token\", {\n            userId: payload.sub,\n            ip: req.ip,\n          });\n          return res.status(401).json({ message: \"User has no email address\" });\n        }\n\n        // CRITICAL SECURITY: Implement refresh token rotation\n        // 1. Generate new refresh token ID and JWT\n        const newRefreshTokenId = generateRefreshTokenId();\n        const newRefreshTokenJWT = await generateRefreshTokenJWT(\n          user.id,\n          user.email,\n          newRefreshTokenId,\n        );\n\n        // 2. Generate new access token\n        const newAccessToken = await generateAccessTokenJWT(\n          user.id,\n          user.email,\n        );\n\n        // 3. Atomic operation: Create new refresh token and revoke old one\n        try {\n          // Create new refresh token record\n          const newRefreshTokenData = {\n            id: newRefreshTokenId,\n            userId: user.id,\n            token: newRefreshTokenJWT,\n            userAgent: req.headers[\"user-agent\"] || null,\n            ipAddress: req.ip || \"unknown\",\n            expiresAt: new Date(Date.now() + TOKEN_EXPIRY.REFRESH_TOKEN * 1000),\n          };\n\n          await storage.createRefreshToken(newRefreshTokenData);\n\n          // Revoke the old refresh token\n          await storage.revokeRefreshToken(payload.jti);\n\n          // Log successful token refresh to audit trail\n          await storage.createAuthAuditLog({\n            userId: user.id,\n            eventType: \"login_success\", // Token refresh is maintaining session\n            ipAddress: req.ip || \"unknown\",\n            userAgent: req.headers[\"user-agent\"] || \"unknown\",\n            isSuccessful: true,\n            details: JSON.stringify({\n              oldTokenId: payload.jti,\n              newTokenId: newRefreshTokenId,\n              refreshType: \"token_rotation\",\n            }),\n          });\n\n          logger.info(\"Refresh token rotation completed successfully\", {\n            userId: user.id,\n            oldTokenId: payload.jti,\n            newTokenId: newRefreshTokenId,\n            ip: req.ip,\n            userAgent: req.headers[\"user-agent\"],\n          });\n\n          // Return both new access token and new refresh token\n          return res.json({\n            accessToken: newAccessToken,\n            refreshToken: newRefreshTokenJWT,\n            expiresIn: TOKEN_EXPIRY.ACCESS_TOKEN,\n            tokenType: \"Bearer\",\n          });\n        } catch (rotationError) {\n          logger.error(\"Refresh token rotation failed\", rotationError, {\n            userId: user.id,\n            tokenId: payload.jti,\n            ip: req.ip,\n          });\n\n          // If rotation fails, revoke the old token for security\n          await storage.revokeRefreshToken(payload.jti);\n          return res\n            .status(500)\n            .json({ message: \"Token rotation failed - please login again\" });\n        }\n      } catch (error) {\n        logger.error(\"Token refresh failed\", error, {\n          userAgent: req.headers[\"user-agent\"],\n          ipAddress: req.ip,\n        });\n        return res.status(500).json({ message: \"Failed to refresh token\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/auth/revoke\",\n    requireHybridAuth,\n    authRateLimit,\n    validateRequest(revokeTokenSchema),\n    async (req, res) => {\n      try {\n        const authenticatedReq = req as AuthenticatedRequest;\n        const userId = getAuthUserId(authenticatedReq);\n        const { refreshToken } = req.body;\n\n        if (!refreshToken) {\n          return res.status(400).json({ message: \"Refresh token is required\" });\n        }\n\n        // Verify and get refresh token payload\n        const { valid, payload } = await verifyRefreshTokenJWT(refreshToken);\n        if (!valid || !payload) {\n          return res.status(400).json({ message: \"Invalid refresh token\" });\n        }\n\n        // Ensure user can only revoke their own tokens\n        if (payload.sub !== userId) {\n          return res\n            .status(403)\n            .json({ message: \"Cannot revoke another user's token\" });\n        }\n\n        // Revoke the refresh token\n        await storage.revokeRefreshToken(payload.jti);\n\n        logger.info(\"Refresh token revoked successfully\", {\n          userId,\n          tokenId: payload.jti,\n          userAgent: req.headers[\"user-agent\"],\n          ipAddress: req.ip,\n        });\n\n        return res.json({ message: \"Token revoked successfully\" });\n      } catch (error) {\n        logger.error(\"Token revocation failed\", error, {\n          userId: getAuthUserId(req as AuthenticatedRequest),\n          userAgent: req.headers[\"user-agent\"],\n          ipAddress: req.ip,\n        });\n        return res.status(500).json({ message: \"Failed to revoke token\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/auth/revoke-all\",\n    requireHybridAuth,\n    authRateLimit,\n    async (req, res) => {\n      try {\n        const authenticatedReq = req as AuthenticatedRequest;\n        const userId = getAuthUserId(authenticatedReq);\n\n        // Get count of active tokens before revoking\n        const activeTokens = await storage.getUserActiveRefreshTokens(userId);\n        const tokenCount = activeTokens.length;\n\n        // Revoke all user's refresh tokens\n        await storage.revokeAllUserRefreshTokens(userId);\n\n        logger.info(\"All refresh tokens revoked for user\", {\n          userId,\n          revokedTokenCount: tokenCount,\n          userAgent: req.headers[\"user-agent\"],\n          ipAddress: req.ip,\n        });\n\n        return res.json({\n          message: \"All tokens revoked successfully\",\n          revokedTokenCount: tokenCount,\n        });\n      } catch (error) {\n        logger.error(\"All tokens revocation failed\", error, {\n          userId: getAuthUserId(req as AuthenticatedRequest),\n          userAgent: req.headers[\"user-agent\"],\n          ipAddress: req.ip,\n        });\n        return res.status(500).json({ message: \"Failed to revoke all tokens\" });\n      }\n    },\n  );\n\n  app.get(\"/api/auth/tokens\", requireHybridAuth, async (req, res) => {\n    try {\n      const authenticatedReq = req as AuthenticatedRequest;\n      const userId = getAuthUserId(authenticatedReq);\n\n      // Get user's active refresh tokens\n      const activeTokens = await storage.getUserActiveRefreshTokens(userId);\n\n      // Format tokens for response (hide sensitive data)\n      const tokenList = activeTokens.map((token) => ({\n        id: token.id,\n        userAgent: (() => {\n          try {\n            const deviceInfo = JSON.parse(token.deviceInfo || \"{}\");\n            return deviceInfo.userAgent || \"Unknown\";\n          } catch {\n            return \"Unknown\";\n          }\n        })(),\n        ipAddress: token.ipAddress,\n        createdAt: token.createdAt,\n        lastUsed: token.lastUsed,\n        expiresAt: token.expiresAt,\n        isCurrentSession: (() => {\n          try {\n            const deviceInfo = JSON.parse(token.deviceInfo || \"{}\");\n            return req.headers[\"user-agent\"] === deviceInfo.userAgent;\n          } catch {\n            return false;\n          }\n        })(),\n      }));\n\n      return res.json({\n        tokens: tokenList,\n        totalActive: tokenList.length,\n      });\n    } catch (error) {\n      logger.error(\"Failed to fetch user tokens\", error, {\n        userId: getAuthUserId(req as AuthenticatedRequest),\n      });\n      return res.status(500).json({ message: \"Failed to fetch active tokens\" });\n    }\n  });\n\n  // Registration endpoint\n  app.post(\n    \"/api/auth/register\",\n    authRateLimit,\n    validateRequest(registrationSchema),\n    async (req, res) => {\n      try {\n        const {\n          email,\n          password,\n          firstName,\n          lastName,\n          username,\n          primaryCommunity,\n        } = req.body;\n\n        // Validate password strength\n        const passwordValidation = validatePasswordStrength(password);\n        if (!passwordValidation.valid) {\n          return res.status(400).json({\n            message: \"Password does not meet security requirements\",\n            errors: passwordValidation.errors,\n          });\n        }\n\n        // Normalize email and username for consistency\n        const normalizedEmail = email.toLowerCase().trim();\n        const normalizedUsername = username.toLowerCase().trim();\n\n        // Check if user already exists by email\n        const existingUserByEmail =\n          await storage.getUserByEmail(normalizedEmail);\n        if (existingUserByEmail) {\n          logger.warn(\"Registration attempted with existing email\", {\n            email: normalizedEmail,\n            ip: req.ip,\n          });\n          return res\n            .status(409)\n            .json({ message: \"An account with this email already exists\" });\n        }\n\n        // Check if username is already taken\n        const existingUserByUsername =\n          await storage.getUserByUsername(normalizedUsername);\n        if (existingUserByUsername) {\n          logger.warn(\"Registration attempted with existing username\", {\n            username: normalizedUsername,\n            ip: req.ip,\n          });\n          return res\n            .status(409)\n            .json({ message: \"This username is already taken\" });\n        }\n\n        // Hash the password\n        const hashedPassword = await hashPassword(password);\n\n        // Generate unique user ID\n        const userId = `user_${Date.now()}_${Math.random().toString(36).substring(2)}`;\n\n        // Prepare user data with normalized values (correct schema field names)\n        const userData = {\n          id: userId,\n          email: normalizedEmail,\n          firstName: firstName.trim(),\n          lastName: lastName.trim(),\n          username: normalizedUsername,\n          primaryCommunity: primaryCommunity || \"general\",\n          passwordHash: hashedPassword, // Correct schema field name\n          isEmailVerified: false,\n          status: \"offline\" as const,\n          showOnlineStatus: \"everyone\" as const,\n          allowDirectMessages: \"everyone\" as const,\n          isPrivate: false,\n          mfaEnabled: false, // Correct schema field name\n        };\n\n        // TRANSACTIONAL REGISTRATION PROCESS\n        let newUser;\n        let verificationToken;\n        let emailSent = false;\n\n        try {\n          // Create the user\n          newUser = await storage.createUser(userData);\n\n          // Generate email verification token\n          verificationToken = await generateEmailVerificationJWT(\n            userId,\n            normalizedEmail,\n          );\n\n          // Create email verification record\n          await storage.createEmailVerificationToken({\n            userId: userId,\n            email: normalizedEmail,\n            token: verificationToken,\n            expiresAt: new Date(\n              Date.now() + TOKEN_EXPIRY.EMAIL_VERIFICATION * 1000,\n            ),\n          });\n\n          // Send verification email\n          const baseUrl =\n            process.env.AUTH_URL ||\n            process.env.PUBLIC_WEB_URL ||\n            \"https://shuffleandsync.org\";\n          emailSent = await sendEmailVerificationEmail(\n            normalizedEmail,\n            verificationToken,\n            baseUrl,\n          );\n\n          if (!emailSent) {\n            logger.error(\n              \"Failed to send verification email during registration\",\n              {\n                userId,\n                email: normalizedEmail,\n                ip: req.ip,\n              },\n            );\n            // Don't fail registration if email fails, user can resend later\n          }\n        } catch (transactionError) {\n          logger.error(\"Registration transaction failed\", transactionError, {\n            email: normalizedEmail,\n            username: normalizedUsername,\n            ip: req.ip,\n          });\n\n          // Log failed registration attempt\n          try {\n            await storage.createAuthAuditLog({\n              userId: null,\n              eventType: \"registration\",\n              ipAddress: req.ip || \"unknown\",\n              userAgent: req.headers[\"user-agent\"] || \"unknown\",\n              isSuccessful: false,\n              failureReason: \"transaction_error\",\n              details: JSON.stringify({\n                email: normalizedEmail,\n                username: normalizedUsername,\n                error:\n                  transactionError instanceof Error\n                    ? transactionError.message\n                    : \"Unknown error\",\n              }),\n            });\n          } catch (auditError) {\n            logger.error(\"Failed to log registration failure\", auditError);\n          }\n\n          return res\n            .status(500)\n            .json({ message: \"Registration failed. Please try again.\" });\n        }\n\n        if (!emailSent) {\n          logger.error(\n            \"Failed to send verification email during registration\",\n            {\n              userId,\n              email: normalizedEmail,\n              ip: req.ip,\n            },\n          );\n\n          // Log email sending failure\n          await storage.createAuthAuditLog({\n            userId: userId,\n            eventType: \"email_verification\",\n            ipAddress: req.ip || \"unknown\",\n            userAgent: req.headers[\"user-agent\"] || \"unknown\",\n            isSuccessful: false,\n            failureReason: \"email_send_failed\",\n            details: JSON.stringify({\n              email: normalizedEmail,\n              reason: \"email_service_error\",\n            }),\n          });\n          // Don't fail registration if email fails, user can resend later\n        } else {\n          // Log successful email verification sent\n          await storage.createAuthAuditLog({\n            userId: userId,\n            eventType: \"email_verification\",\n            ipAddress: req.ip || \"unknown\",\n            userAgent: req.headers[\"user-agent\"] || \"unknown\",\n            isSuccessful: true,\n            details: JSON.stringify({\n              email: normalizedEmail,\n              action: \"verification_email_sent\",\n            }),\n          });\n        }\n\n        // Log successful registration with complete audit trail\n        await storage.createAuthAuditLog({\n          userId: userId,\n          eventType: \"registration\",\n          ipAddress: req.ip || \"unknown\",\n          userAgent: req.headers[\"user-agent\"] || \"unknown\",\n          isSuccessful: true,\n          details: JSON.stringify({\n            email: normalizedEmail,\n            username: normalizedUsername,\n            emailSent,\n            userAgent: req.headers[\"user-agent\"],\n            registrationMethod: \"email_password\",\n          }),\n        });\n\n        logger.info(\"User registered successfully\", {\n          userId,\n          email: email.toLowerCase(),\n          username: username.toLowerCase(),\n          ip: req.ip,\n          emailSent,\n        });\n\n        // Return success response (don't include sensitive data)\n        return res.status(201).json({\n          message:\n            \"Registration successful! Please check your email to verify your account.\",\n          user: {\n            id: newUser.id,\n            email: newUser.email,\n            firstName: newUser.firstName,\n            lastName: newUser.lastName,\n            username: newUser.username,\n            isEmailVerified: newUser.isEmailVerified,\n          },\n          emailSent,\n        });\n      } catch (error) {\n        logger.error(\"Registration failed\", error, {\n          email: req.body?.email,\n          username: req.body?.username,\n          ip: req.ip,\n          userAgent: req.headers[\"user-agent\"],\n        });\n\n        // Log failed registration attempt\n        if (req.body?.email) {\n          try {\n            await storage.createAuthAuditLog({\n              userId: null,\n              eventType: \"registration\",\n              ipAddress: req.ip || \"unknown\",\n              userAgent: req.headers[\"user-agent\"] || \"unknown\",\n              isSuccessful: false,\n              failureReason: \"registration_error\",\n              details: JSON.stringify({\n                email: req.body.email,\n                error: error instanceof Error ? error.message : \"Unknown error\",\n              }),\n            });\n          } catch (auditError) {\n            logger.error(\"Failed to log registration failure\", auditError);\n          }\n        }\n\n        return res\n          .status(500)\n          .json({ message: \"Registration failed. Please try again.\" });\n      }\n    },\n  );\n\n  // Contact form route\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const { name, email, subject, message } = req.body;\n\n      if (\n        !name?.trim() ||\n        !email?.trim() ||\n        !subject?.trim() ||\n        !message?.trim()\n      ) {\n        return res.status(400).json({ message: \"All fields are required\" });\n      }\n\n      const emailSent = await sendContactEmail({\n        name,\n        email,\n        subject,\n        message,\n      });\n\n      if (emailSent) {\n        logger.info(\"Contact email sent successfully\", {\n          senderEmail: email,\n          subject,\n        });\n        return res.json({ message: \"Message sent successfully\" });\n      } else {\n        logger.warn(\"Contact email failed to send\", {\n          senderEmail: email,\n          subject,\n        });\n        return res.status(500).json({ message: \"Failed to send message\" });\n      }\n    } catch (error) {\n      logger.error(\"Contact form error\", error, { email: req.body?.email });\n      return res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // Communities routes\n  app.get(\"/api/communities\", async (req, res) => {\n    try {\n      const communities = await storage.getCommunities();\n      return res.json(communities);\n    } catch (error) {\n      logger.error(\"Failed to fetch communities\", error);\n      return res.status(500).json({ message: \"Failed to fetch communities\" });\n    }\n  });\n\n  app.get(\"/api/communities/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const community = await storage.getCommunity(id);\n      if (!community) {\n        return res.status(404).json({ message: \"Community not found\" });\n      }\n      return res.json(community);\n    } catch (error) {\n      logger.error(\"Failed to fetch community\", error, { id: req.params.id });\n      return res.status(500).json({ message: \"Failed to fetch community\" });\n    }\n  });\n\n  // User community management\n  app.post(\n    \"/api/user/communities/:communityId/join\",\n    isAuthenticated,\n    async (req: AuthenticatedRequest, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const { communityId } = req.params;\n\n        // Verify community exists\n        const community = await storage.getCommunity(communityId);\n        if (!community) {\n          return res.status(404).json({ message: \"Community not found\" });\n        }\n\n        const userCommunity = await storage.joinCommunity({\n          userId,\n          communityId,\n          isPrimary: false,\n        });\n\n        return res.json(userCommunity);\n      } catch (error) {\n        logger.error(\"Failed to join community\", error, {\n          userId: getAuthUserId(authenticatedReq),\n          communityId: req.body.communityId,\n        });\n        return res.status(500).json({ message: \"Failed to join community\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/user/communities/:communityId/set-primary\",\n    isAuthenticated,\n    async (req: AuthenticatedRequest, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const { communityId } = req.params;\n\n        await storage.setPrimaryCommunity(userId, communityId);\n        return res.json({ success: true });\n      } catch (error) {\n        logger.error(\"Failed to set primary community\", error, {\n          userId: getAuthUserId(authenticatedReq),\n          communityId: req.body.communityId,\n        });\n        return res\n          .status(500)\n          .json({ message: \"Failed to set primary community\" });\n      }\n    },\n  );\n\n  // Theme preferences\n  app.get(\n    \"/api/user/theme-preferences\",\n    isAuthenticated,\n    async (req: AuthenticatedRequest, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const preferences = await storage.getUserThemePreferences(userId);\n        return res.json(preferences);\n      } catch (error) {\n        logger.error(\"Failed to fetch theme preferences\", error, {\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res\n          .status(500)\n          .json({ message: \"Failed to fetch theme preferences\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/user/theme-preferences\",\n    isAuthenticated,\n    async (req: AuthenticatedRequest, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const { communityId, themeMode, customColors } = req.body;\n\n        const preference = await storage.upsertThemePreference({\n          userId,\n          communityId,\n          themeMode,\n          customColors,\n        });\n\n        return res.json(preference);\n      } catch (error) {\n        logger.error(\"Failed to update theme preferences\", error, {\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res\n          .status(500)\n          .json({ message: \"Failed to update theme preferences\" });\n      }\n    },\n  );\n\n  // Event routes\n  app.get(\"/api/events\", async (req, res) => {\n    try {\n      const { communityId, type, upcoming } = req.query;\n      const userId = (req as any).user?.id;\n\n      const events = await storage.getEvents({\n        userId,\n        communityId: communityId as string,\n        type: type as string,\n        upcoming: upcoming === \"true\",\n      });\n\n      return res.json(events);\n    } catch (error) {\n      logger.error(\"Failed to fetch events\", error, { filters: req.query });\n      return res.status(500).json({ message: \"Failed to fetch events\" });\n    }\n  });\n\n  app.get(\"/api/events/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const userId = (req as any).user?.id;\n\n      const event = await storage.getEvent(id, userId);\n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n\n      return res.json(event);\n    } catch (error) {\n      logger.error(\"Failed to fetch event\", error, { eventId: req.params.id });\n      return res.status(500).json({ message: \"Failed to fetch event\" });\n    }\n  });\n\n  app.post(\n    \"/api/events\",\n    isAuthenticated,\n    eventCreationRateLimit,\n    validateRequest(validateEventSchema),\n    async (req: AuthenticatedRequest, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const eventData = insertEventSchema.parse({\n          ...req.body,\n          creatorId: userId,\n          hostId: userId, // Set host to the same user who created the event\n        });\n\n        const event = await storage.createEvent(eventData);\n        return res.json(event);\n      } catch (error) {\n        logger.error(\"Failed to create event\", error, {\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res.status(500).json({ message: \"Failed to create event\" });\n      }\n    },\n  );\n\n  app.put(\"/api/events/:id\", isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const { id } = req.params;\n      const userId = getAuthUserId(authenticatedReq);\n\n      // Check if user owns the event\n      const existingEvent = await storage.getEvent(id);\n      if (!existingEvent) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      if (existingEvent.creatorId !== userId) {\n        return res\n          .status(403)\n          .json({ message: \"Not authorized to edit this event\" });\n      }\n\n      const eventData = insertEventSchema.partial().parse(req.body);\n      const updatedEvent = await storage.updateEvent(id, eventData);\n\n      // Send update notifications\n      const changes: string[] = [];\n      if (\n        eventData.startTime &&\n        eventData.startTime !== existingEvent.startTime\n      )\n        changes.push(\"schedule\");\n      if (eventData.location && eventData.location !== existingEvent.location)\n        changes.push(\"location\");\n\n      if (changes.length > 0) {\n        enhancedNotificationService\n          .sendEventUpdatedNotification(id, changes)\n          .catch((err) =>\n            logger.error(\"Failed to send update notification\", err),\n          );\n      }\n\n      return res.json(updatedEvent);\n    } catch (error) {\n      logger.error(\"Failed to update event\", error, { eventId: req.params.id });\n      return res.status(500).json({ message: \"Failed to update event\" });\n    }\n  });\n\n  app.delete(\"/api/events/:id\", isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const { id } = req.params;\n      const userId = getAuthUserId(authenticatedReq);\n\n      // Check if user owns the event\n      const existingEvent = await storage.getEvent(id);\n      if (!existingEvent) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      if (existingEvent.creatorId !== userId) {\n        return res\n          .status(403)\n          .json({ message: \"Not authorized to delete this event\" });\n      }\n\n      await storage.deleteEvent(id);\n      return res.json({ success: true });\n    } catch (error) {\n      logger.error(\"Failed to delete event\", error, { eventId: req.params.id });\n      return res.status(500).json({ message: \"Failed to delete event\" });\n    }\n  });\n\n  // Event attendance routes\n  app.post(\n    \"/api/events/:eventId/join\",\n    isAuthenticated,\n    async (req: AuthenticatedRequest, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const { eventId } = req.params;\n        const userId = getAuthUserId(authenticatedReq);\n        const { status = \"attending\" } = req.body;\n\n        // Verify event exists\n        const event = await storage.getEvent(eventId);\n        if (!event) {\n          return res.status(404).json({ message: \"Event not found\" });\n        }\n\n        const { role = \"participant\", playerType = \"main\" } = req.body;\n\n        const attendee = await storage.joinEvent({\n          eventId,\n          userId,\n          status,\n          role,\n          playerType,\n        });\n\n        // Get current event details for notifications\n        const updatedEvent = await storage.getEvent(eventId);\n        const joiningUser = await storage.getUser(userId);\n\n        if (updatedEvent && joiningUser) {\n          // Notify event creator that someone joined\n          if (updatedEvent.creatorId !== userId) {\n            await storage.createNotification({\n              userId: updatedEvent.creatorId,\n              type: \"event_join\",\n              title: \"New Player Joined Your Pod\",\n              message: `${joiningUser.firstName || joiningUser.email} joined your ${updatedEvent.title} game pod`,\n              data: JSON.stringify({\n                eventId,\n                playerType,\n                joinedUserId: userId,\n              }),\n              priority: \"normal\",\n            });\n          }\n\n          // Check if pod is now full or almost full for additional notifications\n          const attendees = await storage.getEventAttendees(eventId);\n          const mainPlayers = attendees.filter(\n            (a) => a.playerType === \"main\" && a.status === \"attending\",\n          ).length;\n          const playerSlots = updatedEvent.playerSlots || 4;\n\n          if (mainPlayers >= playerSlots) {\n            // Pod is full - notify all participants\n            for (const attendeeRecord of attendees) {\n              if (attendeeRecord.userId !== userId) {\n                await storage.createNotification({\n                  userId: attendeeRecord.userId,\n                  type: \"pod_filled\",\n                  title: \"Game Pod is Full!\",\n                  message: `${updatedEvent.title} is now at full capacity`,\n                  data: JSON.stringify({ eventId }),\n                  priority: \"high\",\n                });\n              }\n            }\n          } else if (mainPlayers === playerSlots - 1) {\n            // Pod is almost full\n            await storage.createNotification({\n              userId: updatedEvent.creatorId,\n              type: \"pod_almost_full\",\n              title: \"Game Pod Almost Full\",\n              message: `${updatedEvent.title} needs 1 more player`,\n              data: JSON.stringify({ eventId }),\n              priority: \"normal\",\n            });\n          }\n        }\n\n        return res.json(attendee);\n      } catch (error) {\n        logger.error(\"Failed to join event\", error, {\n          userId: getAuthUserId(authenticatedReq),\n          eventId: req.body.eventId,\n        });\n        return res.status(500).json({ message: \"Failed to join event\" });\n      }\n    },\n  );\n\n  app.delete(\n    \"/api/events/:eventId/leave\",\n    isAuthenticated,\n    async (req: AuthenticatedRequest, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const { eventId } = req.params;\n        const userId = getAuthUserId(authenticatedReq);\n\n        // Get event and user details before leaving\n        const event = await storage.getEvent(eventId);\n        const leavingUser = await storage.getUser(userId);\n\n        // Get attendee info to check if they were a main player\n        const attendees = await storage.getEventAttendees(eventId);\n        const leavingAttendee = attendees.find((a) => a.userId === userId);\n        const wasMainPlayer = leavingAttendee?.playerType === \"main\";\n\n        await storage.leaveEvent(eventId, userId);\n\n        // If a main player left, try to promote from waitlist\n        if (wasMainPlayer && event?.type === \"game_pod\") {\n          await waitlistService\n            .promoteFromWaitlist(eventId)\n            .catch((err) =>\n              logger.error(\"Failed to promote from waitlist\", err),\n            );\n        }\n\n        // Notify event creator that someone left\n        if (event && leavingUser && event.creatorId !== userId) {\n          await storage.createNotification({\n            userId: event.creatorId,\n            type: \"event_leave\",\n            title: \"Player Left Your Pod\",\n            message: `${leavingUser.firstName || leavingUser.email} left your ${event.title} game pod`,\n            data: JSON.stringify({ eventId, leftUserId: userId }),\n            priority: \"normal\",\n          });\n        }\n\n        return res.json({ success: true });\n      } catch (error) {\n        logger.error(\"Failed to leave event\", error, {\n          userId: getAuthUserId(authenticatedReq),\n          eventId: req.params.eventId,\n        });\n        return res.status(500).json({ message: \"Failed to leave event\" });\n      }\n    },\n  );\n\n  app.get(\"/api/events/:eventId/attendees\", async (req, res) => {\n    try {\n      const { eventId } = req.params;\n\n      const attendees = await storage.getEventAttendees(eventId);\n      return res.json(attendees);\n    } catch (error) {\n      logger.error(\"Failed to fetch event attendees\", error, {\n        eventId: req.params.eventId,\n      });\n      return res\n        .status(500)\n        .json({ message: \"Failed to fetch event attendees\" });\n    }\n  });\n\n  // Graphics generation route\n  app.post(\"/api/graphics/generate\", isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const { eventId, template = \"modern\", includeQR = true } = req.body;\n\n      if (!eventId) {\n        return res.status(400).json({ message: \"Event ID is required\" });\n      }\n\n      // Verify user has access to this event\n      const event = await storage.getEvent(eventId);\n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n\n      const graphicDataUrl =\n        await graphicsGeneratorService.generateEventGraphic(\n          eventId,\n          template,\n          includeQR,\n        );\n\n      return res.json({\n        dataUrl: graphicDataUrl,\n        template,\n        eventId,\n      });\n    } catch (error) {\n      logger.error(\"Failed to generate graphic\", error, {\n        eventId: req.body.eventId,\n      });\n      return res.status(500).json({ message: \"Failed to generate graphic\" });\n    }\n  });\n\n  app.get(\"/api/user/events\", isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n\n      const attendance = await storage.getUserEventAttendance(userId);\n      return res.json(attendance);\n    } catch (error) {\n      logger.error(\"Failed to fetch user events\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res.status(500).json({ message: \"Failed to fetch user events\" });\n    }\n  });\n\n  // Notification routes\n  app.get(\"/api/notifications\", isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n      const { unreadOnly, limit } = req.query;\n      const notifications = await storage.getUserNotifications(userId, {\n        unreadOnly: unreadOnly === \"true\",\n        limit: limit ? parseInt(limit as string) : undefined,\n      });\n      return res.json(notifications);\n    } catch (error) {\n      logger.error(\"Failed to fetch notifications\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/notifications\", isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n      const notificationData = { ...req.body, userId: userId };\n      const notification = await storage.createNotification(notificationData);\n      return res.status(201).json(notification);\n    } catch (error) {\n      logger.error(\"Failed to create notification\", error);\n      return res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\n    \"/api/notifications/:id/read\",\n    isAuthenticated,\n    async (req: AuthenticatedRequest, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const { id } = req.params;\n        await storage.markNotificationAsRead(id);\n        return res.json({ success: true });\n      } catch (error) {\n        logger.error(\"Failed to mark notification as read\", error, {\n          notificationId: req.params.id,\n        });\n        return res.status(500).json({ message: \"Internal server error\" });\n      }\n    },\n  );\n\n  app.patch(\n    \"/api/notifications/read-all\",\n    isAuthenticated,\n    async (req: AuthenticatedRequest, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        await storage.markAllNotificationsAsRead(userId);\n        return res.json({ success: true });\n      } catch (error) {\n        logger.error(\"Failed to mark all notifications as read\", error, {\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res.status(500).json({ message: \"Internal server error\" });\n      }\n    },\n  );\n\n  // Message routes\n  app.get(\"/api/messages\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n      const { eventId, communityId, limit } = req.query;\n      const messages = await storage.getUserMessages(userId, {\n        eventId: eventId as string,\n        communityId: communityId as string,\n        limit: limit ? parseInt(limit as string) : undefined,\n      });\n      return res.json(messages);\n    } catch (error) {\n      logger.error(\"Failed to fetch messages\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/messages\", isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n      const messageData = { ...req.body, senderId: userId };\n      const message = await storage.sendMessage(messageData);\n      return res.status(201).json(message);\n    } catch (error) {\n      logger.error(\"Failed to send message\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/conversations/:userId\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const currentUserId = getAuthUserId(authenticatedReq);\n      const userId = assertRouteParam(req.params.userId, \"userId\");\n      const conversation = await storage.getConversation(currentUserId, userId);\n      return res.json(conversation);\n    } catch (error) {\n      logger.error(\"Failed to fetch conversation\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Calendar routes for game pod scheduling\n  app.post(\"/api/events/bulk\", isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n      const { events } = req.body;\n\n      if (!Array.isArray(events) || events.length === 0) {\n        return res.status(400).json({ message: \"Events array is required\" });\n      }\n\n      // Add creator and host information to each event\n      const eventData = events.map((event: Record<string, unknown>) => ({\n        ...event,\n        creatorId: userId,\n        hostId: userId,\n      }));\n\n      const createdEvents = await storage.createBulkEvents(eventData);\n      return res.status(201).json(createdEvents);\n    } catch (error) {\n      logger.error(\"Failed to create bulk events\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/events/recurring\", isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const userId = getAuthUserId(authenticatedReq);\n      const eventData = {\n        ...req.body,\n        creatorId: userId,\n        hostId: userId,\n      };\n\n      const createdEvents = await storage.createRecurringEvents(\n        eventData,\n        req.body.recurrenceEndDate,\n      );\n      return res.status(201).json(createdEvents);\n    } catch (error) {\n      logger.error(\"Failed to create recurring events\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/calendar/events\", async (req, res) => {\n    try {\n      const { communityId, startDate, endDate, type } = req.query;\n\n      if (!startDate || !endDate) {\n        return res\n          .status(400)\n          .json({ message: \"startDate and endDate are required\" });\n      }\n\n      const events = await storage.getCalendarEvents({\n        communityId: communityId as string,\n        startDate: startDate as string,\n        endDate: endDate as string,\n        type: type as string,\n      });\n\n      return res.json(events);\n    } catch (error) {\n      logger.error(\"Failed to fetch calendar events\", error, {\n        filters: req.query,\n      });\n      return res\n        .status(500)\n        .json({ message: \"Failed to fetch calendar events\" });\n    }\n  });\n\n  // Game session routes\n  app.get(\"/api/game-sessions\", isAuthenticated, async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const { eventId, communityId, hostId, status } = req.query;\n      const gameSessions = await storage.getGameSessions({\n        eventId: eventId as string,\n        communityId: communityId as string,\n        hostId: hostId as string,\n        status: status as string,\n      });\n      return res.json(gameSessions);\n    } catch (error) {\n      logger.error(\"Failed to fetch game sessions\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\n    \"/api/game-sessions\",\n    isAuthenticated,\n    validateRequest(validateGameSessionSchema),\n    async (req: AuthenticatedRequest, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const sessionData = { ...req.body, hostId: userId };\n        const gameSession = await storage.createGameSession(sessionData);\n        return res.status(201).json(gameSession);\n      } catch (error) {\n        logger.error(\"Failed to create game session\", error, {\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res.status(500).json({ message: \"Internal server error\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/game-sessions/:id/join\",\n    isAuthenticated,\n    async (req: AuthenticatedRequest, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const user = authenticatedReq.user;\n        const { id } = req.params;\n        await storage.joinGameSession(id, userId);\n\n        // Create notification for host when someone joins\n        const gameSession = await storage.getGameSessions({ eventId: id });\n        if (gameSession.length > 0 && gameSession[0]?.hostId) {\n          await storage.createNotification({\n            userId: gameSession[0].hostId,\n            type: \"event_join\",\n            title: \"Player Joined Game\",\n            message: `${user?.name || user?.email || \"A player\"} joined your game session`,\n            data: JSON.stringify({ gameSessionId: id, playerId: userId }),\n          });\n        }\n\n        return res.json({ success: true });\n      } catch (error) {\n        logger.error(\"Failed to join game session\", error, {\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res.status(500).json({ message: \"Internal server error\" });\n      }\n    },\n  );\n\n  // Get single game session\n  app.get(\"/api/game-sessions/:id\", isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    try {\n      const { id } = req.params;\n      const gameSession = await storage.getGameSessionById(id);\n\n      if (!gameSession) {\n        return res.status(404).json({ message: \"Game session not found\" });\n      }\n\n      return res.json(gameSession);\n    } catch (error) {\n      logger.error(\"Failed to fetch game session\", error, {\n        userId: getAuthUserId(authenticatedReq),\n      });\n      return res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\n    \"/api/game-sessions/:id/leave\",\n    isAuthenticated,\n    async (req: AuthenticatedRequest, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const user = authenticatedReq.user;\n        const { id } = req.params;\n        await storage.leaveGameSession(id, userId);\n\n        // Create notification for host when someone leaves\n        const gameSession = await storage.getGameSessions({ eventId: id });\n        if (gameSession.length > 0 && gameSession[0]?.hostId) {\n          await storage.createNotification({\n            userId: gameSession[0].hostId,\n            type: \"event_leave\",\n            title: \"Player Left Game\",\n            message: `${user?.name || user?.email || \"A player\"} left your game session`,\n            data: JSON.stringify({ gameSessionId: id, playerId: userId }),\n          });\n        }\n\n        return res.json({ success: true });\n      } catch (error) {\n        logger.error(\"Failed to leave game session\", error, {\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res.status(500).json({ message: \"Internal server error\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/game-sessions/:id/spectate\",\n    isAuthenticated,\n    async (req: AuthenticatedRequest, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const user = authenticatedReq.user;\n        const { id } = req.params;\n        await storage.spectateGameSession(id, userId);\n\n        // Create notification for host when someone starts spectating\n        const gameSession = await storage.getGameSessions({ eventId: id });\n        if (gameSession.length > 0 && gameSession[0]?.hostId) {\n          await storage.createNotification({\n            userId: gameSession[0].hostId,\n            type: \"spectator_join\",\n            title: \"New Spectator\",\n            message: `${user?.name || user?.email || \"Someone\"} is now spectating your game`,\n            data: JSON.stringify({ gameSessionId: id, spectatorId: userId }),\n          });\n        }\n\n        return res.json({ success: true });\n      } catch (error) {\n        logger.error(\"Failed to spectate game session\", error, {\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res.status(500).json({ message: \"Internal server error\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/game-sessions/:id/leave-spectating\",\n    isAuthenticated,\n    async (req: AuthenticatedRequest, res) => {\n      const authenticatedReq = req as AuthenticatedRequest;\n      try {\n        const userId = getAuthUserId(authenticatedReq);\n        const { id } = req.params;\n        await storage.leaveSpectating(id, userId);\n\n        return res.json({ success: true });\n      } catch (error) {\n        logger.error(\"Failed to leave spectating\", error, {\n          userId: getAuthUserId(authenticatedReq),\n        });\n        return res.status(500).json({ message: \"Internal server error\" });\n      }\n    },\n  );\n\n  const httpServer = createServer(app);\n\n  // Initialize Enhanced WebSocket Server with security and reliability features\n  const enhancedWebSocketServer = new EnhancedWebSocketServer(httpServer);\n\n  logger.info(\"Enhanced WebSocket server initialized with security features\", {\n    rateLimiting: true,\n    authenticationValidation: true,\n    messageValidation: true,\n    connectionManagement: true,\n  });\n\n  // Health check endpoint for WebSocket server\n  app.get(\"/api/websocket/health\", (req, res) => {\n    const stats = enhancedWebSocketServer.getStats();\n    return res.json({\n      status: \"healthy\",\n      timestamp: new Date().toISOString(),\n      websocket: stats,\n    });\n  });\n\n  // WebSocket functionality is now handled by the Enhanced WebSocket Server\n  // All real-time features including authentication, rate limiting, message validation,\n  // and connection management are implemented in the EnhancedWebSocketServer class\n\n  // Add error handling middleware - must be last\n  app.use(errorHandlingMiddleware.notFound);\n  app.use(errorHandlingMiddleware.global);\n\n  return httpServer;\n}\n\n// Initialize the 6 default gaming communities\nasync function initializeDefaultCommunities() {\n  const defaultCommunities = [\n    {\n      id: \"scry-gather\",\n      name: \"scry-gather\",\n      displayName: \"Scry & Gather\",\n      description:\n        \"Magic: The Gathering streaming coordination. Manage spell circles, strategic alliances, and create legendary MTG content.\",\n      themeColor: \"hsl(0, 75%, 60%)\", // Red theme for MTG\n      iconClass: \"fas fa-magic\",\n    },\n    {\n      id: \"pokestream-hub\",\n      name: \"pokestream-hub\",\n      displayName: \"PokeStream Hub\",\n      description:\n        \"Unite Pokemon trainers worldwide. Coordinate teams, host battle arenas, and create legendary content together.\",\n      themeColor: \"hsl(45, 100%, 50%)\", // Yellow theme for Pokemon\n      iconClass: \"fas fa-bolt\",\n    },\n    {\n      id: \"decksong\",\n      name: \"decksong\",\n      displayName: \"Decksong\",\n      description:\n        \"Disney Lorcana creators unite in harmony. Orchestrate collaborative streams and build magical kingdoms together.\",\n      themeColor: \"hsl(300, 70%, 65%)\", // Purple theme for Lorcana\n      iconClass: \"fas fa-crown\",\n    },\n    {\n      id: \"duelcraft\",\n      name: \"duelcraft\",\n      displayName: \"Duelcraft\",\n      description:\n        \"Yu-Gi-Oh duelists assemble! Master the shadow realm of collaborative content and strategic partnerships.\",\n      themeColor: \"hsl(240, 70%, 65%)\", // Blue theme for Yu-Gi-Oh\n      iconClass: \"fas fa-eye\",\n    },\n    {\n      id: \"bladeforge\",\n      name: \"bladeforge\",\n      displayName: \"Bladeforge\",\n      description:\n        \"Forge alliances in the world of strategic card combat. Unite creators and build legendary gaming content.\",\n      themeColor: \"hsl(160, 70%, 50%)\", // Green theme\n      iconClass: \"fas fa-sword\",\n    },\n    {\n      id: \"deckmaster\",\n      name: \"deckmaster\",\n      displayName: \"Deckmaster\",\n      description:\n        \"Master the art of strategic deck building and content creation. Perfect your craft with fellow creators.\",\n      themeColor: \"hsl(260, 70%, 65%)\", // Indigo theme\n      iconClass: \"fas fa-chess\",\n    },\n  ];\n\n  for (const communityData of defaultCommunities) {\n    try {\n      const existing = await storage.getCommunity(communityData.id);\n      if (!existing) {\n        await storage.createCommunity(communityData);\n        logger.info(\"Created community successfully\", {\n          name: communityData.displayName,\n          id: communityData.id,\n        });\n      }\n    } catch (error) {\n      logger.error(\"Failed to create community\", error, {\n        name: communityData.displayName,\n      });\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/routes/analytics.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validateQuery' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validateParamsWithSchema' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userParamSchema' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'paginationQuerySchema' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NotFoundError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":27,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ValidationError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":27,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":43,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Router } from \"express\";\nimport { analyticsService } from \"../services/analytics-service\";\nimport { storage } from \"../storage\";\nimport { logger } from \"../logger\";\nimport { z } from \"zod\";\nimport {\n  isAuthenticated,\n  getAuthUserId,\n  type AuthenticatedRequest,\n} from \"../auth\";\nimport { generalRateLimit } from \"../rate-limiting\";\nimport { streamingCoordinator } from \"../services/streaming-coordinator\";\nimport { cacheMiddleware, cacheConfigs } from \"../middleware/cache-middleware\";\nimport {\n  errorHandlingMiddleware,\n  errors,\n} from \"../middleware/error-handling.middleware\";\nimport {\n  validateRequest,\n  validateQuery,\n  validateParamsWithSchema,\n  userParamSchema,\n  paginationQuerySchema,\n} from \"../validation\";\n\nconst { asyncHandler } = errorHandlingMiddleware;\nconst { NotFoundError, AuthorizationError, ValidationError } = errors;\n\nconst router = Router();\n\n// Apply authentication to all analytics routes\nrouter.use(isAuthenticated);\n\n// Apply rate limiting to all analytics routes\nrouter.use(generalRateLimit);\n\n// Admin check utility\nconst isAdmin = async (userId: string): Promise<boolean> => {\n  try {\n    const user = await storage.getUser(userId);\n    // In production, implement proper role-based access control\n    return user?.email === \"admin@shuffleandsync.com\";\n  } catch (error) {\n    return false;\n  }\n};\n\n/**\n * Track user activity events\n * POST /api/analytics/events\n */\nconst eventTrackingSchema = z.object({\n  userId: z.string().optional(),\n  sessionId: z.string().optional(),\n  eventName: z.string().min(1, \"Event name is required\"),\n  eventCategory: z.enum([\n    \"navigation\",\n    \"streaming\",\n    \"social\",\n    \"tournament\",\n    \"community\",\n    \"profile\",\n    \"settings\",\n  ]),\n  eventAction: z.enum([\n    \"click\",\n    \"scroll\",\n    \"submit\",\n    \"create\",\n    \"join\",\n    \"leave\",\n    \"share\",\n    \"like\",\n    \"comment\",\n  ]),\n  eventLabel: z.string().optional(),\n  eventValue: z.number().optional(),\n  properties: z.record(z.any()).optional(),\n  context: z\n    .object({\n      userAgent: z.string().optional(),\n      ipAddress: z.string().optional(),\n      pageUrl: z.string().optional(),\n      referrerUrl: z.string().optional(),\n    })\n    .optional(),\n});\n\nrouter.post(\n  \"/events\",\n  validateRequest(eventTrackingSchema),\n  asyncHandler(async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n    const eventData = req.body;\n\n    // Ensure userId matches authenticated user if provided\n    if (\n      eventData.userId &&\n      eventData.userId !== getAuthUserId(authenticatedReq)\n    ) {\n      throw new AuthorizationError(\"Cannot track events for other users\");\n    }\n\n    // Auto-set userId to authenticated user if not provided\n    if (!eventData.userId) {\n      eventData.userId = getAuthUserId(authenticatedReq);\n    }\n\n    await analyticsService.trackEvent(eventData);\n\n    return res.json({\n      success: true,\n      message: \"Event tracked successfully\",\n    });\n  }),\n);\n\n/**\n * Track funnel progression\n * POST /api/analytics/funnel\n */\nrouter.post(\"/funnel\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    const funnelSchema = z.object({\n      funnelName: z.string(),\n      stepName: z.string(),\n      stepOrder: z.number().int().min(1),\n      userId: z.string(),\n      sessionId: z.string(),\n      completed: z.boolean().default(true),\n      timeSpent: z.number().optional(),\n      metadata: z.record(z.any()).optional(),\n    });\n\n    const funnelData = funnelSchema.parse(req.body);\n\n    // Ensure userId matches authenticated user\n    if (funnelData.userId !== getAuthUserId(authenticatedReq)) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Cannot track funnel for other users\" });\n    }\n\n    await analyticsService.trackFunnelStep(\n      funnelData.funnelName,\n      funnelData.stepName,\n      funnelData.stepOrder,\n      funnelData.userId,\n      funnelData.sessionId,\n      funnelData.completed,\n      funnelData.timeSpent,\n      funnelData.metadata,\n    );\n\n    return res.json({\n      success: true,\n      message: \"Funnel step tracked successfully\",\n    });\n  } catch (error) {\n    logger.error(\"Failed to track funnel step\", {\n      error,\n      userId: getAuthUserId(authenticatedReq),\n    });\n    return res.status(400).json({\n      success: false,\n      error:\n        error instanceof z.ZodError\n          ? error.errors\n          : \"Failed to track funnel step\",\n    });\n  }\n});\n\n/**\n * Track streaming metrics\n * POST /api/analytics/stream-metrics\n */\nrouter.post(\"/stream-metrics\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    const streamMetricsSchema = z.object({\n      sessionId: z.string(),\n      platform: z.enum([\"twitch\", \"youtube\", \"facebook\", \"discord\"]),\n      viewerCount: z.number().int().min(0),\n      chatMessageCount: z.number().int().min(0).optional(),\n      followersGained: z.number().int().min(0).optional(),\n      subscriptionsGained: z.number().int().min(0).optional(),\n      streamQuality: z.string().optional(),\n      frameDrops: z.number().int().min(0).optional(),\n      bitrate: z.number().int().min(0).optional(),\n    });\n\n    const metricsData = streamMetricsSchema.parse(req.body);\n\n    // Validate sessionId ownership - users can only submit metrics for their own streaming sessions\n    const authUserId = getAuthUserId(authenticatedReq);\n    const userSessions =\n      await streamingCoordinator.getUserStreamSessions(authUserId);\n    const hasSessionAccess = userSessions.some(\n      (session) => session.id === metricsData.sessionId,\n    );\n\n    if (!hasSessionAccess && !(await isAdmin(authUserId))) {\n      return res.status(403).json({\n        success: false,\n        error: \"Cannot submit metrics for streaming sessions you do not own\",\n      });\n    }\n\n    await analyticsService.trackStreamMetrics(metricsData);\n\n    return res.json({\n      success: true,\n      message: \"Stream metrics tracked successfully\",\n    });\n  } catch (error) {\n    logger.error(\"Failed to track stream metrics\", {\n      error,\n      userId: getAuthUserId(authenticatedReq),\n    });\n    return res.status(400).json({\n      success: false,\n      error:\n        error instanceof z.ZodError\n          ? error.errors\n          : \"Failed to track stream metrics\",\n    });\n  }\n});\n\n/**\n * Record system metrics (admin only)\n * POST /api/analytics/system-metrics\n */\nrouter.post(\"/system-metrics\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n    const systemMetricsSchema = z.object({\n      metricType: z.enum([\n        \"performance\",\n        \"usage\",\n        \"system\",\n        \"error\",\n        \"business\",\n      ]),\n      metricName: z.string(),\n      metricValue: z.number(),\n      metricUnit: z.string().optional(),\n      aggregationType: z.enum([\n        \"avg\",\n        \"sum\",\n        \"max\",\n        \"min\",\n        \"count\",\n        \"percentile\",\n      ]),\n      timeWindow: z.enum([\"1m\", \"5m\", \"15m\", \"1h\", \"6h\", \"1d\", \"7d\", \"30d\"]),\n      tags: z.record(z.string()).optional(),\n    });\n\n    const metricsData = systemMetricsSchema.parse(req.body);\n\n    await analyticsService.recordSystemMetrics(metricsData);\n\n    return res.json({\n      success: true,\n      message: \"System metrics recorded successfully\",\n    });\n  } catch (error) {\n    logger.error(\"Failed to record system metrics\", {\n      error,\n      userId: getAuthUserId(authenticatedReq),\n    });\n    return res.status(400).json({\n      success: false,\n      error:\n        error instanceof z.ZodError\n          ? error.errors\n          : \"Failed to record system metrics\",\n    });\n  }\n});\n\n/**\n * Aggregate community metrics (admin only)\n * POST /api/analytics/community-metrics\n */\nrouter.post(\"/community-metrics\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n    const communityMetricsSchema = z.object({\n      communityId: z.string(),\n      date: z.coerce.date(),\n      hour: z.number().int().min(0).max(23).optional(),\n    });\n\n    const { communityId, date, hour } = communityMetricsSchema.parse(req.body);\n\n    await analyticsService.aggregateCommunityMetrics(communityId, date, hour);\n\n    return res.json({\n      success: true,\n      message: \"Community metrics aggregated successfully\",\n    });\n  } catch (error) {\n    logger.error(\"Failed to aggregate community metrics\", {\n      error,\n      userId: getAuthUserId(authenticatedReq),\n    });\n    return res.status(400).json({\n      success: false,\n      error:\n        error instanceof z.ZodError\n          ? error.errors\n          : \"Failed to aggregate community metrics\",\n    });\n  }\n});\n\n/**\n * Get real-time platform statistics\n * GET /api/analytics/realtime-stats\n */\nrouter.get(\n  \"/realtime-stats\",\n  cacheMiddleware(cacheConfigs.shortCache),\n  async (req, res) => {\n    try {\n      const stats = await analyticsService.getRealTimeStats();\n      return res.json({ success: true, data: stats });\n    } catch (error) {\n      logger.error(\"Failed to get real-time stats\", { error });\n      return res\n        .status(500)\n        .json({ success: false, error: \"Failed to get real-time stats\" });\n    }\n  },\n);\n\n/**\n * Generate dashboard data\n * GET /api/analytics/dashboard?timeframe=7d&userId=xxx&communityId=xxx\n */\nrouter.get(\n  \"/dashboard\",\n  cacheMiddleware(cacheConfigs.analyticsCache),\n  async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n\n    try {\n      const querySchema = z.object({\n        timeframe: z.enum([\"24h\", \"7d\", \"30d\", \"90d\"]).default(\"7d\"),\n        userId: z.string().optional(),\n        communityId: z.string().optional(),\n      });\n\n      const { timeframe, userId, communityId } = querySchema.parse(req.query);\n\n      // If userId provided, ensure user can only access their own data unless admin\n      if (userId) {\n        const authUserId = getAuthUserId(authenticatedReq);\n        if (userId !== authUserId && !(await isAdmin(authUserId))) {\n          return res\n            .status(403)\n            .json({\n              success: false,\n              error: \"Cannot access other users dashboard data\",\n            });\n        }\n      }\n\n      const dashboardData = await analyticsService.generateDashboardData(\n        userId,\n        communityId,\n        timeframe,\n      );\n\n      return res.json({ success: true, data: dashboardData });\n    } catch (error) {\n      logger.error(\"Failed to generate dashboard data\", {\n        error,\n        query: req.query,\n      });\n      return res.status(400).json({\n        success: false,\n        error:\n          error instanceof z.ZodError\n            ? error.errors\n            : \"Failed to generate dashboard data\",\n      });\n    }\n  },\n);\n\n/**\n * Get user activity analytics\n * GET /api/analytics/user-activity/:userId?days=30\n */\nrouter.get(\"/user-activity/:userId\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    const paramsSchema = z.object({\n      userId: z.string(),\n    });\n\n    const querySchema = z.object({\n      days: z.coerce.number().int().min(1).max(365).default(30),\n    });\n\n    const { userId } = paramsSchema.parse(req.params);\n    const { days } = querySchema.parse(req.query);\n\n    // Users can only access their own analytics unless admin\n    const authUserId = getAuthUserId(authenticatedReq);\n    if (userId !== authUserId && !(await isAdmin(authUserId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Cannot access other users analytics\" });\n    }\n\n    const activityData = await storage.getUserActivityAnalytics(userId, days);\n\n    return res.json({ success: true, data: activityData });\n  } catch (error) {\n    logger.error(\"Failed to get user activity analytics\", {\n      error,\n      userId: getAuthUserId(authenticatedReq),\n    });\n    return res.status(400).json({\n      success: false,\n      error:\n        error instanceof z.ZodError\n          ? error.errors\n          : \"Failed to get user activity analytics\",\n    });\n  }\n});\n\n/**\n * Get community analytics\n * GET /api/analytics/community/:communityId?startDate=xxx&endDate=xxx\n */\nrouter.get(\"/community/:communityId\", async (req, res) => {\n  try {\n    const paramsSchema = z.object({\n      communityId: z.string(),\n    });\n\n    const querySchema = z.object({\n      startDate: z.coerce.date().default(() => {\n        const date = new Date();\n        date.setDate(date.getDate() - 30);\n        return date;\n      }),\n      endDate: z.coerce.date().default(() => new Date()),\n    });\n\n    const { communityId } = paramsSchema.parse(req.params);\n    const { startDate, endDate } = querySchema.parse(req.query);\n\n    const communityData = await storage.getCommunityAnalytics(\n      communityId,\n      startDate,\n      endDate,\n    );\n\n    return res.json({ success: true, data: communityData });\n  } catch (error) {\n    logger.error(\"Failed to get community analytics\", {\n      error,\n      params: req.params,\n      query: req.query,\n    });\n    return res.status(400).json({\n      success: false,\n      error:\n        error instanceof z.ZodError\n          ? error.errors\n          : \"Failed to get community analytics\",\n    });\n  }\n});\n\n/**\n * Get platform metrics\n * GET /api/analytics/platform-metrics?metricType=xxx&timeWindow=xxx&startDate=xxx&endDate=xxx\n */\nrouter.get(\"/platform-metrics\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const authUserId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(authUserId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n    const querySchema = z.object({\n      metricType: z\n        .enum([\"performance\", \"usage\", \"system\", \"error\", \"business\"])\n        .optional(),\n      timeWindow: z\n        .enum([\"1m\", \"5m\", \"15m\", \"1h\", \"6h\", \"1d\", \"7d\", \"30d\"])\n        .optional(),\n      startDate: z.coerce.date().optional(),\n      endDate: z.coerce.date().optional(),\n    });\n\n    const { metricType, timeWindow, startDate, endDate } = querySchema.parse(\n      req.query,\n    );\n\n    const platformData = await storage.getPlatformMetrics(\n      metricType,\n      timeWindow,\n      startDate,\n      endDate,\n    );\n\n    return res.json({ success: true, data: platformData });\n  } catch (error) {\n    logger.error(\"Failed to get platform metrics\", { error, query: req.query });\n    return res.status(400).json({\n      success: false,\n      error:\n        error instanceof z.ZodError\n          ? error.errors\n          : \"Failed to get platform metrics\",\n    });\n  }\n});\n\n/**\n * Get event tracking data\n * GET /api/analytics/events?eventName=xxx&userId=xxx&startDate=xxx&endDate=xxx\n */\nrouter.get(\"/events\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint for viewing all events\n    const authUserId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(authUserId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    const querySchema = z.object({\n      eventName: z.string().optional(),\n      userId: z.string().optional(),\n      startDate: z.coerce.date().optional(),\n      endDate: z.coerce.date().optional(),\n    });\n\n    const { eventName, userId, startDate, endDate } = querySchema.parse(\n      req.query,\n    );\n\n    const eventData = await storage.getEventTracking(\n      eventName,\n      userId,\n      startDate,\n      endDate,\n    );\n\n    return res.json({ success: true, data: eventData });\n  } catch (error) {\n    logger.error(\"Failed to get event tracking data\", {\n      error,\n      userId: getAuthUserId(authenticatedReq),\n    });\n    return res.status(400).json({\n      success: false,\n      error:\n        error instanceof z.ZodError\n          ? error.errors\n          : \"Failed to get event tracking data\",\n    });\n  }\n});\n\n/**\n * Get conversion funnel data\n * GET /api/analytics/funnel/:funnelName?startDate=xxx&endDate=xxx\n */\nrouter.get(\"/funnel/:funnelName\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const authUserId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(authUserId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n    const paramsSchema = z.object({\n      funnelName: z.string(),\n    });\n\n    const querySchema = z.object({\n      startDate: z.coerce.date().optional(),\n      endDate: z.coerce.date().optional(),\n    });\n\n    const { funnelName } = paramsSchema.parse(req.params);\n    const { startDate, endDate } = querySchema.parse(req.query);\n\n    const funnelData = await storage.getConversionFunnelData(\n      funnelName,\n      startDate,\n      endDate,\n    );\n\n    return res.json({ success: true, data: funnelData });\n  } catch (error) {\n    logger.error(\"Failed to get conversion funnel data\", {\n      error,\n      params: req.params,\n      query: req.query,\n    });\n    return res.status(400).json({\n      success: false,\n      error:\n        error instanceof z.ZodError\n          ? error.errors\n          : \"Failed to get conversion funnel data\",\n    });\n  }\n});\n\n/**\n * Get user insights and behavioral analysis\n * GET /api/analytics/user-insights/:userId\n */\nrouter.get(\"/user-insights/:userId\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    const paramsSchema = z.object({\n      userId: z.string(),\n    });\n\n    const { userId } = paramsSchema.parse(req.params);\n\n    // Users can only access their own insights unless admin\n    const authUserId = getAuthUserId(authenticatedReq);\n    if (userId !== authUserId && !(await isAdmin(authUserId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Cannot access other users insights\" });\n    }\n\n    const insights = await analyticsService.generateUserInsights(userId);\n\n    return res.json({ success: true, data: insights });\n  } catch (error) {\n    logger.error(\"Failed to get user insights\", {\n      error,\n      userId: getAuthUserId(authenticatedReq),\n    });\n    return res.status(400).json({\n      success: false,\n      error:\n        error instanceof z.ZodError\n          ? error.errors\n          : \"Failed to get user insights\",\n    });\n  }\n});\n\n/**\n * Health check endpoint for analytics service\n * GET /api/analytics/health\n */\nrouter.get(\"/health\", async (req, res) => {\n  try {\n    // Test database connectivity and analytics service health\n    const testMetrics = await storage.getPlatformMetrics(\"system\", \"1m\");\n\n    return res.json({\n      success: true,\n      status: \"healthy\",\n      timestamp: new Date().toISOString(),\n      systemCheck: {\n        database: \"connected\",\n        analyticsService: \"operational\",\n        lastMetricCount: testMetrics.length,\n      },\n    });\n  } catch (error) {\n    logger.error(\"Analytics health check failed\", { error });\n    return res.status(500).json({\n      success: false,\n      status: \"unhealthy\",\n      error: \"Analytics service health check failed\",\n    });\n  }\n});\n\nexport default router;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/routes/backup.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":24,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Router } from \"express\";\nimport {\n  isAuthenticated,\n  getAuthUserId,\n  type AuthenticatedRequest,\n} from \"../auth\";\nimport { generalRateLimit } from \"../rate-limiting\";\nimport { backupService } from \"../services/backup-service\";\nimport { logger } from \"../logger\";\n\nconst router = Router();\n\n// Apply authentication and rate limiting to all backup routes\nrouter.use(isAuthenticated);\nrouter.use(generalRateLimit);\n\n// Admin check utility\nconst isAdmin = async (userId: string): Promise<boolean> => {\n  try {\n    const { storage } = await import(\"../storage\");\n    const user = await storage.getUser(userId);\n    // In production, implement proper role-based access control\n    return user?.email === \"admin@shuffleandsync.com\";\n  } catch (error) {\n    return false;\n  }\n};\n\n/**\n * Get backup system status and history\n * GET /api/backup/status\n */\nrouter.get(\"/status\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    const status = backupService.getBackupStatus();\n\n    return res.json({\n      success: true,\n      status,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    logger.error(\"Failed to get backup status\", error);\n    return res.status(500).json({\n      success: false,\n      error: \"Failed to get backup status\",\n    });\n  }\n});\n\n/**\n * Create a full database backup\n * POST /api/backup/full\n */\nrouter.post(\"/full\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    // Production safety check\n    if (process.env.NODE_ENV === \"production\") {\n      const confirmHeader = req.headers[\"x-confirm-full-backup\"];\n      if (confirmHeader !== \"yes-create-full-backup\") {\n        return res.status(400).json({\n          success: false,\n          error:\n            \"Add header X-Confirm-Full-Backup: yes-create-full-backup to confirm\",\n        });\n      }\n    }\n\n    logger.info(\"Full backup initiated by admin\", { userId });\n\n    const metadata = await backupService.createFullBackup();\n\n    return res.json({\n      success: true,\n      backup: metadata,\n      message: \"Full backup completed successfully\",\n    });\n  } catch (error) {\n    logger.error(\"Full backup failed\", error, {\n      userId: getAuthUserId(authenticatedReq),\n    });\n    return res.status(500).json({\n      success: false,\n      error: \"Full backup failed\",\n      details: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n});\n\n/**\n * Create a critical data backup\n * POST /api/backup/critical\n */\nrouter.post(\"/critical\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    logger.info(\"Critical data backup initiated by admin\", { userId });\n\n    const metadata = await backupService.createCriticalDataBackup();\n\n    return res.json({\n      success: true,\n      backup: metadata,\n      message: \"Critical data backup completed successfully\",\n    });\n  } catch (error) {\n    logger.error(\"Critical data backup failed\", error, {\n      userId: getAuthUserId(authenticatedReq),\n    });\n    return res.status(500).json({\n      success: false,\n      error: \"Critical data backup failed\",\n      details: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n});\n\n/**\n * Restore database from backup\n * POST /api/backup/restore\n */\nrouter.post(\"/restore\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint with strict validation\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    // Strict production safety check\n    if (process.env.NODE_ENV === \"production\") {\n      return res.status(403).json({\n        success: false,\n        error: \"Database restore is disabled in production for safety\",\n      });\n    }\n\n    const { backupPath, tables, dropExisting, dryRun } = req.body;\n\n    if (!backupPath) {\n      return res.status(400).json({\n        success: false,\n        error: \"backupPath is required\",\n      });\n    }\n\n    logger.info(\"Database restore initiated by admin\", {\n      userId,\n      backupPath,\n      tables,\n      dropExisting,\n      dryRun,\n    });\n\n    const result = await backupService.restoreFromBackup(backupPath, {\n      tables,\n      dropExisting,\n      dryRun,\n    });\n\n    return res.json({\n      success: result.success,\n      result,\n      message: result.success\n        ? \"Database restore completed successfully\"\n        : \"Database restore failed\",\n    });\n  } catch (error) {\n    logger.error(\"Database restore failed\", error, {\n      userId: getAuthUserId(authenticatedReq),\n    });\n    return res.status(500).json({\n      success: false,\n      error: \"Database restore failed\",\n      details: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n});\n\n/**\n * Verify backup integrity\n * POST /api/backup/verify\n */\nrouter.post(\"/verify\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    const { backupPath } = req.body;\n\n    if (!backupPath) {\n      return res.status(400).json({\n        success: false,\n        error: \"backupPath is required\",\n      });\n    }\n\n    logger.info(\"Backup verification initiated by admin\", {\n      userId,\n      backupPath,\n    });\n\n    const result = await backupService.verifyBackup(backupPath);\n\n    return res.json({\n      success: result.valid,\n      verification: result,\n      message: result.valid\n        ? \"Backup verification successful\"\n        : \"Backup verification failed\",\n    });\n  } catch (error) {\n    logger.error(\"Backup verification failed\", error, {\n      userId: getAuthUserId(authenticatedReq),\n    });\n    return res.status(500).json({\n      success: false,\n      error: \"Backup verification failed\",\n      details: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n});\n\n/**\n * Clean up old backups\n * DELETE /api/backup/cleanup\n */\nrouter.delete(\"/cleanup\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    logger.info(\"Backup cleanup initiated by admin\", { userId });\n\n    const result = await backupService.cleanupOldBackups();\n\n    return res.json({\n      success: true,\n      cleanup: result,\n      message: `Cleanup completed: ${result.deletedCount} files deleted, ${Math.round(result.freedSpace / 1024 / 1024)}MB freed`,\n    });\n  } catch (error) {\n    logger.error(\"Backup cleanup failed\", error, {\n      userId: getAuthUserId(authenticatedReq),\n    });\n    return res.status(500).json({\n      success: false,\n      error: \"Backup cleanup failed\",\n      details: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n});\n\n/**\n * Test backup system health\n * GET /api/backup/health\n */\nrouter.get(\"/health\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    const status = backupService.getBackupStatus();\n\n    // Basic health checks\n    const health = {\n      backupServiceEnabled: status.config.enabled,\n      backupDirectoryAccessible: true, // Would need fs check\n      recentBackupStatus:\n        status.recentBackups.length > 0\n          ? (status.recentBackups[status.recentBackups.length - 1]?.status ??\n            \"no_backups\")\n          : \"no_backups\",\n      configurationValid:\n        status.config.schedule.full && status.config.schedule.criticalData,\n      diskSpaceAvailable: true, // Would need actual disk space check\n    };\n\n    const allHealthy = Object.values(health).every(\n      (check) =>\n        check === true || check === \"completed\" || check === \"no_backups\",\n    );\n\n    return res.json({\n      success: true,\n      healthy: allHealthy,\n      health,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    logger.error(\"Backup health check failed\", error);\n    return res.status(500).json({\n      success: false,\n      error: \"Backup health check failed\",\n    });\n  }\n});\n\nexport default router;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/routes/cache-health.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ValidationError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":17,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":32,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Router } from \"express\";\nimport { redisClient } from \"../services/redis-client\";\nimport { cacheService } from \"../services/cache-service\";\nimport { logger } from \"../logger\";\nimport {\n  isAuthenticated,\n  getAuthUserId,\n  type AuthenticatedRequest,\n} from \"../auth\";\nimport { generalRateLimit } from \"../rate-limiting\";\nimport {\n  errorHandlingMiddleware,\n  errors,\n} from \"../middleware/error-handling.middleware\";\n\nconst { asyncHandler } = errorHandlingMiddleware;\nconst { AuthorizationError, ValidationError } = errors;\n\nconst router = Router();\n\n// Apply authentication and rate limiting to all cache routes\nrouter.use(isAuthenticated);\nrouter.use(generalRateLimit);\n\n// Admin check utility (reuse from analytics)\nconst isAdmin = async (userId: string): Promise<boolean> => {\n  try {\n    const { storage } = await import(\"../storage\");\n    const user = await storage.getUser(userId);\n    // In production, implement proper role-based access control\n    return user?.email === \"admin@shuffleandsync.com\";\n  } catch (error) {\n    return false;\n  }\n};\n\n/**\n * Redis and cache health check endpoints (admin only)\n */\n\n/**\n * Check Redis connection and health\n * GET /api/cache/health\n */\nrouter.get(\n  \"/health\",\n  asyncHandler(async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      throw new AuthorizationError(\"Admin access required\");\n    }\n\n    const isHealthy = redisClient.isHealthy();\n    const pingResult = await redisClient.ping();\n    const stats = await cacheService.getStats();\n\n    const healthStatus = {\n      redis: {\n        connected: isHealthy,\n        ping: pingResult,\n        client: redisClient.getClient() !== null,\n      },\n      cache: {\n        stats: stats,\n        service: \"operational\",\n      },\n      timestamp: new Date().toISOString(),\n    };\n\n    if (isHealthy && pingResult) {\n      return res.json({\n        success: true,\n        status: \"healthy\",\n        data: healthStatus,\n      });\n    } else {\n      return res.status(503).json({\n        success: false,\n        status: \"unhealthy\",\n        data: healthStatus,\n      });\n    }\n  }),\n);\n\n/**\n * Get Redis info and statistics\n * GET /api/cache/info\n */\nrouter.get(\"/info\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n    const redisInfo = await redisClient.getInfo();\n    const cacheStats = await cacheService.getStats();\n\n    return res.json({\n      success: true,\n      data: {\n        redis: {\n          info: redisInfo,\n          connected: redisClient.isHealthy(),\n        },\n        cache: {\n          stats: cacheStats,\n        },\n      },\n    });\n  } catch (error) {\n    logger.error(\"Failed to get cache info\", { error });\n    return res.status(500).json({\n      success: false,\n      error: \"Failed to get cache info\",\n    });\n  }\n});\n\n/**\n * Test cache operations\n * POST /api/cache/test\n */\nrouter.post(\n  \"/test\",\n  asyncHandler(async (req, res) => {\n    const authenticatedReq = req as AuthenticatedRequest;\n\n    // Admin-only endpoint with environment check\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      throw new AuthorizationError(\"Admin access required\");\n    }\n\n    // Only allow in development/testing environments\n    if (process.env.NODE_ENV === \"production\") {\n      throw new AuthorizationError(\"Cache testing disabled in production\");\n    }\n\n    const testKey = `cache_test_${Date.now()}`;\n    const testValue = { test: \"data\", timestamp: new Date().toISOString() };\n\n    // Test set operation\n    const setResult = await cacheService.set(testKey, testValue, 60);\n\n    // Test get operation\n    const getValue = await cacheService.get(testKey);\n\n    // Test exists operation\n    const existsResult = await cacheService.exists(testKey);\n\n    // Test delete operation\n    const deleteResult = await cacheService.delete(testKey);\n\n    const testResults = {\n      set: setResult,\n      get: getValue,\n      exists: existsResult,\n      delete: deleteResult,\n      dataMatch: JSON.stringify(getValue) === JSON.stringify(testValue),\n    };\n\n    const allPassed =\n      setResult &&\n      getValue !== null &&\n      existsResult &&\n      deleteResult &&\n      testResults.dataMatch;\n\n    return res.json({\n      success: true,\n      data: {\n        allTestsPassed: allPassed,\n        results: testResults,\n      },\n    });\n  }),\n);\n\n/**\n * Clear all cache data (use with caution)\n * DELETE /api/cache/clear\n */\nrouter.delete(\"/clear\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only destructive endpoint with strict environment check\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    // Only allow in development environments - disabled in production\n    if (process.env.NODE_ENV === \"production\") {\n      return res\n        .status(403)\n        .json({\n          success: false,\n          error: \"Cache clearing disabled in production\",\n        });\n    }\n\n    // Additional confirmation required\n    const confirmHeader = req.headers[\"x-confirm-cache-clear\"];\n    if (confirmHeader !== \"yes-delete-all-cache\") {\n      return res.status(400).json({\n        success: false,\n        error:\n          \"Add header X-Confirm-Cache-Clear: yes-delete-all-cache to confirm\",\n      });\n    }\n    await redisClient.flushAll();\n\n    return res.json({\n      success: true,\n      message: \"Cache cleared successfully\",\n    });\n  } catch (error) {\n    logger.error(\"Failed to clear cache\", { error });\n    return res.status(500).json({\n      success: false,\n      error: \"Failed to clear cache\",\n    });\n  }\n});\n\nexport default router;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/routes/database-health.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":24,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2512,2515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2512,2515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Router } from \"express\";\nimport {\n  isAuthenticated,\n  getAuthUserId,\n  type AuthenticatedRequest,\n} from \"../auth\";\nimport { generalRateLimit } from \"../rate-limiting\";\nimport { checkDatabaseHealth, DatabaseMonitor } from \"@shared/database-unified\";\nimport { logger } from \"../logger\";\n\nconst router = Router();\n\n// Apply authentication and rate limiting to all database health routes\nrouter.use(isAuthenticated);\nrouter.use(generalRateLimit);\n\n// Admin check utility\nconst isAdmin = async (userId: string): Promise<boolean> => {\n  try {\n    const { storage } = await import(\"../storage\");\n    const user = await storage.getUser(userId);\n    // In production, implement proper role-based access control\n    return user?.email === \"admin@shuffleandsync.com\";\n  } catch (error) {\n    return false;\n  }\n};\n\n/**\n * Database health check endpoint\n * GET /api/database/health\n */\nrouter.get(\"/health\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    const health = await checkDatabaseHealth();\n\n    return res.json({\n      success: true,\n      database: health,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    logger.error(\"Database health check failed\", error);\n    return res.status(500).json({\n      success: false,\n      error: \"Health check failed\",\n    });\n  }\n});\n\n/**\n * Database performance statistics\n * GET /api/database/stats\n */\nrouter.get(\"/stats\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    const monitor = DatabaseMonitor.getInstance();\n    const allStats = monitor.getStats();\n    const slowQueries = monitor.getSlowQueries(500); // Queries >500ms\n\n    // SQLite doesn't have a connection pool like PostgreSQL\n    const poolStats = {\n      note: \"SQLite uses single connection, pool stats not applicable\",\n    };\n\n    return res.json({\n      success: true,\n      stats: {\n        pool: poolStats,\n        queries: allStats,\n        slowQueries,\n        queryCount: Object.values(allStats).reduce(\n          (sum, stat: any) => sum + stat.count,\n          0,\n        ),\n      },\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    logger.error(\"Failed to get database stats\", error);\n    return res.status(500).json({\n      success: false,\n      error: \"Failed to get database statistics\",\n    });\n  }\n});\n\n/**\n * Reset performance statistics\n * POST /api/database/reset-stats\n */\nrouter.post(\"/reset-stats\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint with environment check\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    // Only allow in development/testing environments\n    if (process.env.NODE_ENV === \"production\") {\n      return res.status(403).json({\n        success: false,\n        error: \"Statistics reset disabled in production\",\n      });\n    }\n\n    const monitor = DatabaseMonitor.getInstance();\n    monitor.reset();\n\n    logger.info(\"Database performance statistics reset\", { userId });\n\n    return res.json({\n      success: true,\n      message: \"Performance statistics reset successfully\",\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    logger.error(\"Failed to reset database stats\", error);\n    return res.status(500).json({\n      success: false,\n      error: \"Failed to reset statistics\",\n    });\n  }\n});\n\n/**\n * Database connection pool information\n * GET /api/database/pool\n */\nrouter.get(\"/pool\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    // SQLite doesn't have a connection pool like PostgreSQL\n    const poolInfo = {\n      note: \"SQLite uses single connection, pool configuration not applicable\",\n      databaseType: \"SQLite Cloud\",\n    };\n\n    return res.json({\n      success: true,\n      pool: poolInfo,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    logger.error(\"Failed to get pool information\", error);\n    return res.status(500).json({\n      success: false,\n      error: \"Failed to get pool information\",\n    });\n  }\n});\n\nexport default router;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/routes/infrastructure-tests.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":24,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Router } from \"express\";\nimport {\n  isAuthenticated,\n  getAuthUserId,\n  type AuthenticatedRequest,\n} from \"../auth\";\nimport { generalRateLimit } from \"../rate-limiting\";\nimport { infrastructureTestService } from \"../services/infrastructure-test-service\";\nimport { logger } from \"../logger\";\n\nconst router = Router();\n\n// Apply authentication and rate limiting to all test routes\nrouter.use(isAuthenticated);\nrouter.use(generalRateLimit);\n\n// Admin check utility\nconst isAdmin = async (userId: string): Promise<boolean> => {\n  try {\n    const { storage } = await import(\"../storage\");\n    const user = await storage.getUser(userId);\n    // In production, implement proper role-based access control\n    return user?.email === \"admin@shuffleandsync.com\";\n  } catch (error) {\n    return false;\n  }\n};\n\n/**\n * Get infrastructure test service status\n * GET /api/tests/status\n */\nrouter.get(\"/status\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    const status = infrastructureTestService.getStatus();\n\n    return res.json({\n      success: true,\n      status,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    logger.error(\"Failed to get test service status\", error);\n    return res.status(500).json({\n      success: false,\n      error: \"Failed to get test service status\",\n    });\n  }\n});\n\n/**\n * Run comprehensive infrastructure tests\n * POST /api/tests/run\n */\nrouter.post(\"/run\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    // Production safety check\n    if (process.env.NODE_ENV === \"production\") {\n      const confirmHeader = req.headers[\"x-confirm-run-tests\"];\n      if (confirmHeader !== \"yes-run-infrastructure-tests\") {\n        return res.status(400).json({\n          success: false,\n          error:\n            \"Add header X-Confirm-Run-Tests: yes-run-infrastructure-tests to confirm\",\n        });\n      }\n    }\n\n    logger.info(\"Infrastructure tests initiated by admin\", { userId });\n\n    // Set timeout for long-running test suite\n    req.setTimeout(300000); // 5 minutes\n    res.setTimeout(300000); // 5 minutes\n\n    const report = await infrastructureTestService.runComprehensiveTests();\n\n    return res.json({\n      success: true,\n      report,\n      message: `Infrastructure tests completed with ${report.overall.score}% success rate`,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    logger.error(\"Infrastructure tests failed\", error, {\n      userId: getAuthUserId(authenticatedReq),\n    });\n    return res.status(500).json({\n      success: false,\n      error: \"Infrastructure tests failed\",\n      details: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n});\n\n/**\n * Run specific test suite\n * POST /api/tests/suite/:suiteName\n */\nrouter.post(\"/suite/:suiteName\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    const { suiteName } = req.params;\n\n    if (!suiteName) {\n      return res.status(400).json({\n        success: false,\n        error: \"Suite name is required\",\n      });\n    }\n\n    logger.info(\"Specific test suite initiated by admin\", {\n      userId,\n      suiteName,\n    });\n\n    // For now, run comprehensive tests and filter to specific suite\n    // In a full implementation, we'd have individual suite runners\n    const report = await infrastructureTestService.runComprehensiveTests();\n    const suite = report.suites.find((s) =>\n      s.name.toLowerCase().includes(suiteName.toLowerCase()),\n    );\n\n    if (!suite) {\n      return res.status(404).json({\n        success: false,\n        error: `Test suite '${suiteName}' not found`,\n        availableSuites: report.suites.map((s) => s.name),\n      });\n    }\n\n    return res.json({\n      success: true,\n      suite,\n      message: `Test suite '${suite.name}' completed`,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    logger.error(\"Test suite execution failed\", error, {\n      userId: getAuthUserId(authenticatedReq),\n      suiteName: req.params.suiteName,\n    });\n    return res.status(500).json({\n      success: false,\n      error: \"Test suite execution failed\",\n      details: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n});\n\n/**\n * Get test results summary\n * GET /api/tests/summary\n */\nrouter.get(\"/summary\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    // Return a summary of available test suites and current status\n    const status = infrastructureTestService.getStatus();\n\n    const summary = {\n      testServiceStatus: status,\n      availableTestSuites: [\n        {\n          name: \"Monitoring System\",\n          description:\n            \"Test monitoring service, metrics collection, health checks, and alerting\",\n          tests: [\n            \"service_status\",\n            \"metrics_collection\",\n            \"health_checks\",\n            \"alert_system\",\n          ],\n        },\n        {\n          name: \"Caching Layer\",\n          description:\n            \"Test Redis caching, fallback mechanisms, and cache operations\",\n          tests: [\n            \"service_status\",\n            \"cache_set\",\n            \"cache_get\",\n            \"cache_delete\",\n            \"graceful_degradation\",\n          ],\n        },\n        {\n          name: \"Database Optimization\",\n          description:\n            \"Test database connection pooling, query optimization, and performance monitoring\",\n          tests: [\n            \"connectivity\",\n            \"optimized_queries\",\n            \"connection_pool\",\n            \"performance_monitoring\",\n          ],\n        },\n        {\n          name: \"Backup System\",\n          description:\n            \"Test backup service, backup verification, and recovery capabilities\",\n          tests: [\n            \"service_status\",\n            \"configuration\",\n            \"backup_directory\",\n            \"cleanup_system\",\n          ],\n        },\n        {\n          name: \"Analytics System\",\n          description:\n            \"Test analytics data collection, metrics tracking, and reporting\",\n          tests: [\n            \"data_models\",\n            \"storage_operations\",\n            \"metrics_collection\",\n            \"api_endpoints\",\n          ],\n        },\n        {\n          name: \"Notification System\",\n          description:\n            \"Test notification delivery, preferences, and multi-channel support\",\n          tests: [\n            \"data_models\",\n            \"preferences_system\",\n            \"delivery_channels\",\n            \"queue_system\",\n          ],\n        },\n        {\n          name: \"Health Check System\",\n          description:\n            \"Test comprehensive health monitoring and status reporting\",\n          tests: [\n            \"database_health\",\n            \"redis_health\",\n            \"application_health\",\n            \"filesystem_health\",\n            \"overall_status\",\n          ],\n        },\n        {\n          name: \"Integration Scenarios\",\n          description: \"Test cross-system integration and end-to-end workflows\",\n          tests: [\n            \"monitoring_alerting\",\n            \"cache_database\",\n            \"monitoring_database\",\n            \"backup_monitoring\",\n            \"system_resilience\",\n          ],\n        },\n      ],\n      instructions: {\n        runAllTests: \"POST /api/tests/run\",\n        runSpecificSuite: \"POST /api/tests/suite/{suiteName}\",\n        headers: {\n          production: \"X-Confirm-Run-Tests: yes-run-infrastructure-tests\",\n        },\n      },\n    };\n\n    return res.json({\n      success: true,\n      summary,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    logger.error(\"Failed to get test summary\", error);\n    return res.status(500).json({\n      success: false,\n      error: \"Failed to get test summary\",\n    });\n  }\n});\n\n/**\n * Health check for test service\n * GET /api/tests/health\n */\nrouter.get(\"/health\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    const status = infrastructureTestService.getStatus();\n\n    const health = {\n      testServiceOperational: true,\n      testServiceRunning: !status.isRunning, // false when not running tests (good)\n      testFrameworkAvailable: true,\n      adminAccessVerified: true,\n    };\n\n    const allHealthy = Object.values(health).every((check) => check === true);\n\n    return res.json({\n      success: true,\n      healthy: allHealthy,\n      health,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    logger.error(\"Test service health check failed\", error);\n    return res.status(500).json({\n      success: false,\n      error: \"Test service health check failed\",\n    });\n  }\n});\n\nexport default router;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/routes/matching.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":262,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":262,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7657,7660],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7657,7660],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Real-time Matching API Routes\n *\n * Provides endpoints for real-time streaming partner matching\n * with machine learning recommendations and live updates.\n */\n\nimport { Router } from \"express\";\nimport { z } from \"zod\";\nimport { logger } from \"../logger\";\nimport { realtimeMatchingAPI } from \"../services/real-time-matching-api\";\nimport { isAuthenticated } from \"../auth\";\nimport { assertRouteParam } from \"../shared/utils\";\n\nexport const matchingRouter = Router();\n\n// Request validation schemas\nconst realtimeMatchRequestSchema = z.object({\n  preferences: z\n    .object({\n      urgency: z.enum([\"immediate\", \"today\", \"this_week\"]).optional(),\n      maxResults: z.number().min(1).max(50).optional(),\n      minCompatibilityScore: z.number().min(0).max(100).optional(),\n      requiredGames: z.array(z.string()).optional(),\n      preferredTimeSlots: z.array(z.string()).optional(),\n      excludeUserIds: z.array(z.string()).optional(),\n      platformFilter: z\n        .array(z.enum([\"twitch\", \"youtube\", \"facebook\"]))\n        .optional(),\n    })\n    .optional(),\n  context: z\n    .object({\n      currentlyStreaming: z.boolean().optional(),\n      plannedStreamTime: z.string().datetime().optional(),\n      streamDuration: z.number().optional(),\n      contentType: z.string().optional(),\n      specialEvent: z.boolean().optional(),\n    })\n    .optional(),\n});\n\nconst collaborationOutcomeSchema = z.object({\n  matchId: z.string(),\n  success: z.boolean(),\n  rating: z.number().min(1).max(5),\n  viewerGrowth: z.number(),\n  engagementIncrease: z.number(),\n  wouldCollaborateAgain: z.boolean(),\n  feedback: z.string().optional(),\n});\n\n/**\n * GET /api/matching/realtime\n * Get real-time streaming match suggestions\n */\nmatchingRouter.get(\"/realtime\", isAuthenticated, async (req, res) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n\n    // Parse query parameters\n    const preferences = {\n      urgency: req.query.urgency as\n        | \"immediate\"\n        | \"today\"\n        | \"this_week\"\n        | undefined,\n      maxResults: req.query.maxResults\n        ? parseInt(req.query.maxResults as string)\n        : undefined,\n      minCompatibilityScore: req.query.minCompatibilityScore\n        ? parseInt(req.query.minCompatibilityScore as string)\n        : undefined,\n      requiredGames: req.query.requiredGames\n        ? (req.query.requiredGames as string).split(\",\")\n        : undefined,\n      preferredTimeSlots: req.query.preferredTimeSlots\n        ? (req.query.preferredTimeSlots as string).split(\",\")\n        : undefined,\n      excludeUserIds: req.query.excludeUserIds\n        ? (req.query.excludeUserIds as string).split(\",\")\n        : undefined,\n      platformFilter: req.query.platformFilter\n        ? ((req.query.platformFilter as string).split(\",\") as (\n            | \"twitch\"\n            | \"youtube\"\n            | \"facebook\"\n          )[])\n        : undefined,\n    };\n\n    const context = {\n      currentlyStreaming: req.query.currentlyStreaming === \"true\",\n      plannedStreamTime: req.query.plannedStreamTime\n        ? new Date(req.query.plannedStreamTime as string)\n        : undefined,\n      streamDuration: req.query.streamDuration\n        ? parseInt(req.query.streamDuration as string)\n        : undefined,\n      contentType: req.query.contentType as string | undefined,\n      specialEvent: req.query.specialEvent === \"true\",\n    };\n\n    const matchRequest = {\n      userId,\n      preferences: Object.keys(preferences).some(\n        (key) => preferences[key as keyof typeof preferences] !== undefined,\n      )\n        ? preferences\n        : undefined,\n      context: Object.keys(context).some(\n        (key) => context[key as keyof typeof context] !== undefined,\n      )\n        ? context\n        : undefined,\n    };\n\n    const matches = await realtimeMatchingAPI.getRealtimeMatches(matchRequest);\n\n    // Log real-time matches retrieved event\n    logger.info(\"Real-time matches retrieved successfully\", {\n      userId,\n      matchCount: matches.matches.length,\n      processingTime: matches.metadata.processingTime,\n    });\n\n    return res.json({\n      success: true,\n      data: matches,\n    });\n  } catch (error) {\n    logger.error(\"Failed to get real-time matches\", {\n      error,\n      userId: req.user?.id,\n    });\n    return res.status(500).json({\n      error: \"Failed to get real-time matches\",\n      message:\n        process.env.NODE_ENV === \"development\"\n          ? (error as Error).message\n          : undefined,\n    });\n  }\n});\n\n/**\n * POST /api/matching/realtime\n * Get real-time matches with detailed request body\n */\nmatchingRouter.post(\"/realtime\", isAuthenticated, async (req, res) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n\n    // Validate request body\n    const validationResult = realtimeMatchRequestSchema.safeParse(req.body);\n    if (!validationResult.success) {\n      return res.status(400).json({\n        error: \"Invalid request format\",\n        details: validationResult.error.errors,\n      });\n    }\n\n    const matchRequest = {\n      userId,\n      ...validationResult.data,\n      context: validationResult.data.context\n        ? {\n            ...validationResult.data.context,\n            plannedStreamTime: validationResult.data.context.plannedStreamTime\n              ? new Date(validationResult.data.context.plannedStreamTime)\n              : undefined,\n          }\n        : undefined,\n    } as const;\n\n    const matches = await realtimeMatchingAPI.getRealtimeMatches(matchRequest);\n\n    logger.info(\"Real-time matches retrieved via POST\", {\n      userId,\n      matchCount: matches.matches.length,\n      processingTime: matches.metadata.processingTime,\n    });\n\n    return res.json({\n      success: true,\n      data: matches,\n    });\n  } catch (error) {\n    logger.error(\"Failed to get real-time matches via POST\", {\n      error,\n      userId: req.user?.id,\n    });\n    return res.status(500).json({\n      error: \"Failed to get real-time matches\",\n      message:\n        process.env.NODE_ENV === \"development\"\n          ? (error as Error).message\n          : undefined,\n    });\n  }\n});\n\n/**\n * GET /api/matching/trending\n * Get trending collaboration opportunities\n */\nmatchingRouter.get(\"/trending\", isAuthenticated, async (req, res) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n\n    const opportunities =\n      await realtimeMatchingAPI.getTrendingOpportunities(userId);\n\n    logger.info(\"Trending opportunities retrieved\", {\n      userId,\n      opportunityCount: opportunities.length,\n    });\n\n    return res.json({\n      success: true,\n      data: opportunities,\n    });\n  } catch (error) {\n    logger.error(\"Failed to get trending opportunities\", {\n      error,\n      userId: req.user?.id,\n    });\n    return res.status(500).json({\n      error: \"Failed to get trending opportunities\",\n      message:\n        process.env.NODE_ENV === \"development\"\n          ? (error as Error).message\n          : undefined,\n    });\n  }\n});\n\n/**\n * POST /api/matching/subscribe\n * Subscribe to real-time match updates\n */\nmatchingRouter.post(\"/subscribe\", isAuthenticated, async (req, res) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n\n    const preferences = req.body.preferences || {};\n\n    // Create callback for real-time updates\n    // In a real implementation, this would use WebSockets or SSE\n    const callback = (matches: any) => {\n      logger.debug(\"Real-time match update\", {\n        userId,\n        matchCount: matches.matches.length,\n      });\n      // This would push to WebSocket connection\n    };\n\n    const subscriptionId = realtimeMatchingAPI.subscribeToUpdates(\n      userId,\n      preferences,\n      callback,\n    );\n\n    logger.info(\"Real-time subscription created\", { userId, subscriptionId });\n\n    return res.json({\n      success: true,\n      data: {\n        subscriptionId,\n        message: \"Subscribed to real-time updates\",\n      },\n    });\n  } catch (error) {\n    logger.error(\"Failed to create subscription\", {\n      error,\n      userId: req.user?.id,\n    });\n    return res.status(500).json({\n      error: \"Failed to create subscription\",\n      message:\n        process.env.NODE_ENV === \"development\"\n          ? (error as Error).message\n          : undefined,\n    });\n  }\n});\n\n/**\n * DELETE /api/matching/subscribe/:subscriptionId\n * Unsubscribe from real-time updates\n */\nmatchingRouter.delete(\n  \"/subscribe/:subscriptionId\",\n  isAuthenticated,\n  async (req, res) => {\n    try {\n      const userId = req.user?.id;\n      const subscriptionId = assertRouteParam(\n        req.params.subscriptionId,\n        \"subscriptionId\",\n      );\n\n      if (!userId) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const success = realtimeMatchingAPI.unsubscribe(subscriptionId);\n\n      if (success) {\n        logger.info(\"Real-time subscription removed\", {\n          userId,\n          subscriptionId,\n        });\n\n        return res.json({\n          success: true,\n          message: \"Unsubscribed successfully\",\n        });\n      } else {\n        return res.status(404).json({\n          error: \"Subscription not found\",\n        });\n      }\n    } catch (error) {\n      logger.error(\"Failed to remove subscription\", {\n        error,\n        userId: req.user?.id,\n        subscriptionId: req.params.subscriptionId,\n      });\n      return res.status(500).json({\n        error: \"Failed to remove subscription\",\n        message:\n          process.env.NODE_ENV === \"development\"\n            ? (error as Error).message\n            : undefined,\n      });\n    }\n  },\n);\n\n/**\n * POST /api/matching/outcome\n * Record collaboration outcome for machine learning\n */\nmatchingRouter.post(\"/outcome\", isAuthenticated, async (req, res) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n\n    // Validate outcome data\n    const validationResult = collaborationOutcomeSchema.safeParse(req.body);\n    if (!validationResult.success) {\n      return res.status(400).json({\n        error: \"Invalid outcome format\",\n        details: validationResult.error.errors,\n      });\n    }\n\n    const outcome = validationResult.data;\n\n    await realtimeMatchingAPI.recordCollaborationOutcome(outcome.matchId, {\n      success: outcome.success,\n      rating: outcome.rating,\n      viewerGrowth: outcome.viewerGrowth,\n      engagementIncrease: outcome.engagementIncrease,\n      wouldCollaborateAgain: outcome.wouldCollaborateAgain,\n      feedback: outcome.feedback,\n    });\n\n    logger.info(\"Collaboration outcome recorded\", {\n      userId,\n      matchId: outcome.matchId,\n      success: outcome.success,\n      rating: outcome.rating,\n    });\n\n    return res.json({\n      success: true,\n      message: \"Collaboration outcome recorded successfully\",\n    });\n  } catch (error) {\n    logger.error(\"Failed to record collaboration outcome\", {\n      error,\n      userId: req.user?.id,\n    });\n    return res.status(500).json({\n      error: \"Failed to record outcome\",\n      message:\n        process.env.NODE_ENV === \"development\"\n          ? (error as Error).message\n          : undefined,\n    });\n  }\n});\n\n/**\n * GET /api/matching/performance\n * Get matching algorithm performance metrics (admin/debugging)\n */\nmatchingRouter.get(\"/performance\", isAuthenticated, async (req, res) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n\n    // Basic performance metrics\n    const metrics = {\n      cacheStats: {\n        hitRate: 75,\n        size: 150,\n        maxSize: 1000,\n      },\n      algorithmConfig: {\n        version: \"2.1\",\n        mlEnabled: true,\n        adaptiveWeights: true,\n      },\n      systemHealth: {\n        status: \"healthy\",\n        avgProcessingTime: 245,\n        successRate: 94.2,\n      },\n    };\n\n    logger.debug(\"Performance metrics retrieved\", { userId });\n\n    return res.json({\n      success: true,\n      data: metrics,\n    });\n  } catch (error) {\n    logger.error(\"Failed to get performance metrics\", {\n      error,\n      userId: req.user?.id,\n    });\n    return res.status(500).json({\n      error: \"Failed to get performance metrics\",\n      message:\n        process.env.NODE_ENV === \"development\"\n          ? (error as Error).message\n          : undefined,\n    });\n  }\n});\n\n/**\n * POST /api/matching/feedback\n * Submit feedback about match quality\n */\nmatchingRouter.post(\"/feedback\", isAuthenticated, async (req, res) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n\n    const { requestId, rating, feedback, suggestions } = req.body;\n\n    if (!requestId || !rating) {\n      return res.status(400).json({\n        error: \"Request ID and rating are required\",\n      });\n    }\n\n    // Log feedback for analysis\n    logger.info(\"Match feedback received\", {\n      userId,\n      requestId,\n      rating,\n      feedback: feedback ? \"provided\" : \"none\",\n      suggestions: suggestions ? \"provided\" : \"none\",\n    });\n\n    return res.json({\n      success: true,\n      message: \"Feedback recorded successfully\",\n    });\n  } catch (error) {\n    logger.error(\"Failed to record feedback\", { error, userId: req.user?.id });\n    return res.status(500).json({\n      error: \"Failed to record feedback\",\n      message:\n        process.env.NODE_ENV === \"development\"\n          ? (error as Error).message\n          : undefined,\n    });\n  }\n});\n\nexport default matchingRouter;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/routes/monitoring.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":24,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":115,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":115,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Router } from \"express\";\nimport {\n  isAuthenticated,\n  getAuthUserId,\n  type AuthenticatedRequest,\n} from \"../auth\";\nimport { generalRateLimit } from \"../rate-limiting\";\nimport { monitoringService } from \"../services/monitoring-service\";\nimport { logger } from \"../logger\";\n\nconst router = Router();\n\n// Apply authentication and rate limiting to all monitoring routes\nrouter.use(isAuthenticated);\nrouter.use(generalRateLimit);\n\n// Admin check utility\nconst isAdmin = async (userId: string): Promise<boolean> => {\n  try {\n    const { storage } = await import(\"../storage\");\n    const user = await storage.getUser(userId);\n    // In production, implement proper role-based access control\n    return user?.email === \"admin@shuffleandsync.com\";\n  } catch (error) {\n    return false;\n  }\n};\n\n/**\n * Get monitoring system status and overview\n * GET /api/monitoring/status\n */\nrouter.get(\"/status\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    const status = monitoringService.getStatus();\n\n    return res.json({\n      success: true,\n      status,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    logger.error(\"Failed to get monitoring status\", error);\n    return res.status(500).json({\n      success: false,\n      error: \"Failed to get monitoring status\",\n    });\n  }\n});\n\n/**\n * Get system metrics\n * GET /api/monitoring/metrics\n */\nrouter.get(\"/metrics\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    const { since, limit } = req.query;\n\n    const sinceDate = since ? new Date(since as string) : undefined;\n    const limitNum = limit ? parseInt(limit as string) : 100;\n\n    const metrics = monitoringService.getMetrics(sinceDate, limitNum);\n\n    return res.json({\n      success: true,\n      metrics,\n      count: metrics.length,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    logger.error(\"Failed to get metrics\", error);\n    return res.status(500).json({\n      success: false,\n      error: \"Failed to get metrics\",\n    });\n  }\n});\n\n/**\n * Get service health status\n * GET /api/monitoring/health\n */\nrouter.get(\"/health\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    const status = monitoringService.getStatus();\n    const healthChecks = await monitoringService.performHealthChecks();\n\n    return res.json({\n      success: true,\n      health: Object.fromEntries(healthChecks),\n      summary: {\n        total: healthChecks.size,\n        healthy: Array.from(healthChecks.values()).filter(\n          (h) => h.status === \"healthy\",\n        ).length,\n        degraded: Array.from(healthChecks.values()).filter(\n          (h) => h.status === \"degraded\",\n        ).length,\n        unhealthy: Array.from(healthChecks.values()).filter(\n          (h) => h.status === \"unhealthy\",\n        ).length,\n      },\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    logger.error(\"Failed to get health status\", error);\n    return res.status(500).json({\n      success: false,\n      error: \"Failed to get health status\",\n    });\n  }\n});\n\n/**\n * Get alerts\n * GET /api/monitoring/alerts\n */\nrouter.get(\"/alerts\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    const { service, severity, resolved, since } = req.query;\n\n    const filters = {\n      service: service as string,\n      severity: severity as \"critical\" | \"warning\" | \"info\",\n      resolved: resolved ? resolved === \"true\" : undefined,\n      since: since ? new Date(since as string) : undefined,\n    };\n\n    const alerts = monitoringService.getAlerts(filters);\n\n    return res.json({\n      success: true,\n      alerts,\n      count: alerts.length,\n      summary: {\n        critical: alerts.filter((a) => a.severity === \"critical\" && !a.resolved)\n          .length,\n        warning: alerts.filter((a) => a.severity === \"warning\" && !a.resolved)\n          .length,\n        info: alerts.filter((a) => a.severity === \"info\" && !a.resolved).length,\n        resolved: alerts.filter((a) => a.resolved).length,\n      },\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    logger.error(\"Failed to get alerts\", error);\n    return res.status(500).json({\n      success: false,\n      error: \"Failed to get alerts\",\n    });\n  }\n});\n\n/**\n * Trigger manual health check\n * POST /api/monitoring/health/check\n */\nrouter.post(\"/health/check\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    logger.info(\"Manual health check initiated by admin\", { userId });\n\n    const healthChecks = await monitoringService.performHealthChecks();\n\n    return res.json({\n      success: true,\n      health: Object.fromEntries(healthChecks),\n      message: \"Health check completed successfully\",\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    logger.error(\"Manual health check failed\", error);\n    return res.status(500).json({\n      success: false,\n      error: \"Health check failed\",\n      details: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n});\n\n/**\n * Trigger manual metrics collection\n * POST /api/monitoring/metrics/collect\n */\nrouter.post(\"/metrics/collect\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    logger.info(\"Manual metrics collection initiated by admin\", { userId });\n\n    const metrics = await monitoringService.collectSystemMetrics();\n\n    return res.json({\n      success: true,\n      metrics,\n      message: \"Metrics collection completed successfully\",\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    logger.error(\"Manual metrics collection failed\", error);\n    return res.status(500).json({\n      success: false,\n      error: \"Metrics collection failed\",\n      details: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n});\n\n/**\n * Start monitoring service\n * POST /api/monitoring/start\n */\nrouter.post(\"/start\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    logger.info(\"Monitoring service start requested by admin\", { userId });\n\n    monitoringService.start();\n\n    return res.json({\n      success: true,\n      message: \"Monitoring service started successfully\",\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    logger.error(\"Failed to start monitoring service\", error);\n    return res.status(500).json({\n      success: false,\n      error: \"Failed to start monitoring service\",\n      details: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n});\n\n/**\n * Stop monitoring service\n * POST /api/monitoring/stop\n */\nrouter.post(\"/stop\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    // Production safety check\n    if (process.env.NODE_ENV === \"production\") {\n      const confirmHeader = req.headers[\"x-confirm-stop-monitoring\"];\n      if (confirmHeader !== \"yes-stop-monitoring\") {\n        return res.status(400).json({\n          success: false,\n          error:\n            \"Add header X-Confirm-Stop-Monitoring: yes-stop-monitoring to confirm\",\n        });\n      }\n    }\n\n    logger.info(\"Monitoring service stop requested by admin\", { userId });\n\n    monitoringService.stop();\n\n    return res.json({\n      success: true,\n      message: \"Monitoring service stopped successfully\",\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    logger.error(\"Failed to stop monitoring service\", error);\n    return res.status(500).json({\n      success: false,\n      error: \"Failed to stop monitoring service\",\n      details: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n});\n\n/**\n * Test alert system\n * POST /api/monitoring/alerts/test\n */\nrouter.post(\"/alerts/test\", async (req, res) => {\n  const authenticatedReq = req as AuthenticatedRequest;\n\n  try {\n    // Admin-only endpoint\n    const userId = getAuthUserId(authenticatedReq);\n    if (!(await isAdmin(userId))) {\n      return res\n        .status(403)\n        .json({ success: false, error: \"Admin access required\" });\n    }\n\n    const { severity = \"info\", message = \"Test alert from monitoring system\" } =\n      req.body;\n\n    logger.info(\"Test alert requested by admin\", { userId, severity, message });\n\n    // Create a test alert by emitting it\n    const testAlert = {\n      id: `test_alert_${Date.now()}`,\n      severity: severity as \"critical\" | \"warning\" | \"info\",\n      service: \"monitoring\",\n      message,\n      timestamp: new Date(),\n      resolved: false,\n      metadata: { test: true, requestedBy: userId },\n    };\n\n    monitoringService.emit(\"alert\", testAlert);\n\n    return res.json({\n      success: true,\n      alert: testAlert,\n      message: \"Test alert created successfully\",\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    logger.error(\"Failed to create test alert\", error);\n    return res.status(500).json({\n      success: false,\n      error: \"Failed to create test alert\",\n      details: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n});\n\nexport default router;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/routes/notification-preferences.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/routes/webhooks.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[305,308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[305,308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[397,400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[397,400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[491,494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[491,494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[907,910],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[907,910],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Router, Request, Response, NextFunction } from \"express\";\nimport { twitchAPI } from \"../services/twitch-api\";\nimport { streamingCoordinator } from \"../services/streaming-coordinator\";\n// Simple logger since logger is not exported from validation\nconst logger = {\n  info: (message: string, meta?: any) =>\n    console.log(`[INFO] ${message}`, meta || \"\"),\n  error: (message: string, meta?: any) =>\n    console.error(`[ERROR] ${message}`, meta || \"\"),\n  warn: (message: string, meta?: any) =>\n    console.warn(`[WARN] ${message}`, meta || \"\"),\n};\n\nconst router = Router();\n\n/**\n * Raw body middleware for webhook signature verification\n * Must capture raw body before JSON parsing for HMAC verification\n */\nfunction rawBodyMiddleware(req: Request, res: Response, next: NextFunction) {\n  let rawBody = \"\";\n\n  req.on(\"data\", (chunk) => {\n    rawBody += chunk;\n  });\n\n  req.on(\"end\", () => {\n    (req as any).rawBody = rawBody;\n    next();\n  });\n}\n\n/**\n * Twitch EventSub webhook endpoint\n * Handles stream.online, stream.offline, and other Twitch events\n */\nrouter.post(\n  \"/twitch\",\n  rawBodyMiddleware,\n  async (req: Request, res: Response) => {\n    try {\n      logger.info(\"Twitch EventSub webhook received\", {\n        headers: req.headers,\n        messageType: req.headers[\"twitch-eventsub-message-type\"],\n      });\n\n      // Handle the webhook with proper security verification\n      const event = twitchAPI.handleWebhook(req, res);\n\n      if (event) {\n        // Process the verified event\n        await streamingCoordinator.handlePlatformEvent(\"twitch\", event);\n\n        logger.info(\"Twitch EventSub event processed\", {\n          eventType: event.event_type,\n          eventId: event.id,\n        });\n      }\n\n      // Response is already sent by handleWebhook\n    } catch (error) {\n      logger.error(\"Error processing Twitch webhook\", { error });\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Internal server error\" });\n      }\n    }\n  },\n);\n\n/**\n * YouTube webhook endpoint (placeholder)\n */\nrouter.post(\"/youtube\", async (req: Request, res: Response) => {\n  try {\n    logger.info(\"YouTube webhook received\", { body: req.body });\n\n    // TODO: Implement YouTube webhook verification and processing\n\n    res.status(200).json({ message: \"YouTube webhook received\" });\n  } catch (error) {\n    logger.error(\"Error processing YouTube webhook\", { error });\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n});\n\n/**\n * Facebook webhook endpoint (placeholder)\n */\nrouter.post(\"/facebook\", async (req: Request, res: Response) => {\n  try {\n    logger.info(\"Facebook webhook received\", { body: req.body });\n\n    // TODO: Implement Facebook webhook verification and processing\n\n    res.status(200).json({ message: \"Facebook webhook received\" });\n  } catch (error) {\n    logger.error(\"Error processing Facebook webhook\", { error });\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n});\n\n/**\n * Webhook health check endpoint\n */\nrouter.get(\"/health\", (req: Request, res: Response) => {\n  res.status(200).json({\n    status: \"healthy\",\n    timestamp: new Date().toISOString(),\n    webhooks: [\"twitch\", \"youtube\", \"facebook\"],\n  });\n});\n\nexport default router;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/ai-algorithm-engine.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userPreferences' is defined but never used. Allowed unused args must match /^_/u.","line":275,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":275,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'candidatePreferences' is defined but never used. Allowed unused args must match /^_/u.","line":276,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":276,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userHistory' is defined but never used. Allowed unused args must match /^_/u.","line":533,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":533,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'candidateHistory' is defined but never used. Allowed unused args must match /^_/u.","line":534,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":534,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'optimalSlots' is defined but never used. Allowed unused args must match /^_/u.","line":1060,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1060,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'timezoneOffset' is defined but never used. Allowed unused args must match /^_/u.","line":1086,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1086,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'successfulCollabs' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1323,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":1323,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'totalAdjustment' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1349,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":1349,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AI Algorithm Engine for Advanced Streaming Partner Matching\n *\n * Provides sophisticated algorithms for:\n * - Game type compatibility analysis with cross-genre synergy\n * - Audience overlap calculation with demographic modeling\n * - Advanced time zone coordination with global scheduling\n * - Streaming style preference matching with behavioral analysis\n * - Machine learning-inspired scoring with adaptive weights\n */\n\nimport { logger } from \"../logger\";\n\n// Core algorithm interfaces\nexport interface GameCompatibilityResult {\n  compatibilityScore: number;\n  sharedGames: string[];\n  complementaryGames: string[];\n  synergyClusters: string[];\n  crossGenreOpportunities: string[];\n  contentMixPotential: number;\n}\n\nexport interface AudienceOverlapAnalysis {\n  overlapScore: number;\n  sharedDemographics: string[];\n  complementaryAudiences: string[];\n  potentialGrowth: number;\n  engagementSynergy: number;\n  retentionPotential: number;\n  geographicDistribution: Record<string, number>;\n}\n\nexport interface TimeZoneCoordination {\n  compatibilityScore: number;\n  optimalTimeSlots: string[];\n  conflictAreas: string[];\n  schedulingFlexibility: number;\n  globalReachPotential: number;\n  weekendOpportunities: string[];\n  timezoneAdvantages: string[];\n}\n\nexport interface StreamingStyleMatch {\n  styleCompatibility: number;\n  contentSynergy: number;\n  communicationAlignment: number;\n  paceCompatibility: number;\n  audienceEngagementStyle: string;\n  collaborationTypes: string[];\n  streamingPersonalities: string[];\n}\n\nexport interface AlgorithmWeights {\n  gameCompatibility: number;\n  audienceOverlap: number;\n  timezoneAlignment: number;\n  styleMatching: number;\n  socialFactors: number;\n  performanceMetrics: number;\n  adaptiveBonus: number;\n}\n\nexport interface GamePreferences {\n  preferredGenres: string[];\n  preferredFormats: string[];\n  skillLevel: \"beginner\" | \"intermediate\" | \"advanced\" | \"expert\";\n  competitiveLevel: \"casual\" | \"competitive\" | \"professional\";\n}\n\nexport interface AudienceData {\n  size: number;\n  demographics: {\n    ageGroups: Record<string, number>;\n  };\n  regions: Record<string, number>;\n  interests: string[];\n  engagementMetrics: {\n    averageViewTime: number;\n    chatActivity: number;\n    followRate: number;\n  };\n}\n\nexport interface StreamingMetrics {\n  averageViewers: number;\n  peakViewers: number;\n  streamDuration: number;\n  followersGained: number;\n  subscriptionConversions: number;\n  engagementRate?: number;\n  retentionRate?: number;\n}\n\nexport interface ScheduleData {\n  timeZone: string;\n  regularHours: {\n    day: string;\n    startTime: string;\n    endTime: string;\n  }[];\n  availability: {\n    flexibleHours: boolean;\n    advanceNotice: number; // hours\n    maxCollabHours: number; // per week\n  };\n  weeklySchedule?: Record<string, Array<{ start: string; end: string }>>;\n}\n\nexport interface UserProfile {\n  id: string;\n  streamingPlatforms: string[];\n  gamePreferences: string[];\n  schedulingPreferences: {\n    timeZone: string;\n    availableHours: number[];\n    preferredDays: string[];\n  };\n  audienceSize: number;\n  engagementRate: number;\n  reputation: number;\n}\n\nexport interface MatchData {\n  matchId: string;\n  participants: string[];\n  outcome: \"successful\" | \"failed\" | \"cancelled\";\n  rating: number;\n  feedback?: string;\n  timestamp: Date;\n}\n\nexport interface AdvancedMatchingCriteria {\n  userId: string;\n  candidateId: string;\n  userProfile: UserProfile;\n  candidateProfile: UserProfile;\n  contextualFactors?: {\n    seasonality?: string;\n    trendingGames?: string[];\n    currentEvents?: string[];\n    platformPromotions?: string[];\n  };\n  learningFactors?: {\n    previousMatches?: MatchData[];\n    successPatterns?: MatchData[];\n    userFeedback?: MatchData[];\n  };\n}\n\n// Types for streaming analytics and style matching\nexport interface StreamingStyleData {\n  contentType?: string;\n  interactionLevel?: string;\n  streamPace?: string;\n  contentMix?: string[];\n  personality?: string;\n  productionQuality?: string;\n  chatEngagement?: string;\n  streamFormat?: string;\n  [key: string]: unknown; // Allow additional analytics fields\n}\n\nexport interface StreamerHistoryData {\n  pastCollaborations?: number;\n  successRate?: number;\n  viewerRetention?: number;\n  averageStreamLength?: number;\n  [key: string]: unknown; // Allow additional history fields\n}\n\nexport interface AudienceAnalytics {\n  ageGroups?: Record<string, number>;\n  interests?: string[];\n  regions?: Record<string, number>;\n  engagementMetrics?: {\n    averageViewTime?: number;\n    chatActivity?: number;\n    followRate?: number;\n  };\n  [key: string]: unknown; // Allow additional audience metrics\n}\n\nexport interface ScheduleAnalytics {\n  timeZone?: string;\n  regularHours?: Array<{\n    day: string;\n    startTime: string;\n    endTime: string;\n  }>;\n  preferredDays?: string[];\n  flexibleHours?: boolean;\n  [key: string]: unknown; // Allow additional schedule fields\n}\n\nexport interface PerformanceMetrics {\n  averageViewers?: number;\n  peakViewers?: number;\n  streamDuration?: number;\n  followersGained?: number;\n  subscriptionConversions?: number;\n  growthRate?: number;\n  retentionRate?: number;\n  [key: string]: unknown; // Allow additional metrics\n}\n\n/**\n * Advanced AI Algorithm Engine for Streaming Compatibility\n */\nexport class AIAlgorithmEngine {\n  private static instance: AIAlgorithmEngine;\n\n  // Algorithm configuration\n  private readonly GAME_COMPATIBILITY_WEIGHTS = {\n    directMatch: 0.4, // Same games\n    genreSynergy: 0.25, // Related genres\n    crossGenre: 0.15, // Cross-genre opportunities\n    contentMix: 0.12, // Content variety potential\n    trendsAlignment: 0.08, // Trending game alignment\n  };\n\n  private readonly AUDIENCE_ANALYSIS_WEIGHTS = {\n    demographic: 0.3, // Age, gender, location overlap\n    interest: 0.25, // Gaming interests\n    engagement: 0.2, // Activity patterns\n    growth: 0.15, // Mutual growth potential\n    retention: 0.1, // Audience retention synergy\n  };\n\n  private readonly TIMEZONE_FACTORS = {\n    optimalOverlap: 0.4, // Perfect time overlap\n    flexibilityBonus: 0.25, // Scheduling flexibility\n    globalReach: 0.2, // Combined global coverage\n    weekendSynergy: 0.15, // Weekend opportunities\n  };\n\n  private readonly STYLE_MATCHING_FACTORS = {\n    contentDelivery: 0.3, // How they present content\n    interaction: 0.25, // Audience interaction style\n    pacing: 0.2, // Stream pacing and energy\n    personality: 0.15, // Personality compatibility\n    collaboration: 0.1, // Previous collaboration style\n  };\n\n  // Machine learning inspired adaptive weights\n  private adaptiveWeights: AlgorithmWeights = {\n    gameCompatibility: 0.25,\n    audienceOverlap: 0.25,\n    timezoneAlignment: 0.2,\n    styleMatching: 0.15,\n    socialFactors: 0.1,\n    performanceMetrics: 0.05,\n    adaptiveBonus: 0.0,\n  };\n\n  private constructor() {\n    logger.info(\n      \"AI Algorithm Engine initialized with advanced matching algorithms\",\n    );\n  }\n\n  public static getInstance(): AIAlgorithmEngine {\n    if (!AIAlgorithmEngine.instance) {\n      AIAlgorithmEngine.instance = new AIAlgorithmEngine();\n    }\n    return AIAlgorithmEngine.instance;\n  }\n\n  /**\n   * Comprehensive game compatibility analysis with cross-genre synergy\n   */\n  async analyzeGameCompatibility(\n    userGames: string[],\n    candidateGames: string[],\n    userPreferences?: GamePreferences,\n    candidatePreferences?: GamePreferences,\n  ): Promise<GameCompatibilityResult> {\n    try {\n      // Direct game matches\n      const sharedGames = userGames.filter((game) =>\n        candidateGames.includes(game),\n      );\n      const directMatchScore =\n        sharedGames.length / Math.max(userGames.length, candidateGames.length);\n\n      // Genre synergy analysis\n      const userGenres = this.extractGameGenres(userGames);\n      const candidateGenres = this.extractGameGenres(candidateGames);\n      const genreSynergy = this.calculateGenreSynergy(\n        userGenres,\n        candidateGenres,\n      );\n\n      // Cross-genre opportunities\n      const crossGenreOpportunities = this.identifyCrossGenreOpportunities(\n        userGenres,\n        candidateGenres,\n      );\n\n      // Content mix potential\n      const contentMixPotential = this.calculateContentMixPotential(\n        userGames,\n        candidateGames,\n      );\n\n      // Trending games alignment\n      const trendingAlignment = await this.calculateTrendingAlignment(\n        userGames,\n        candidateGames,\n      );\n\n      // Complementary games (different but synergistic)\n      const complementaryGames = this.findComplementaryGames(\n        userGames,\n        candidateGames,\n      );\n\n      // Calculate weighted compatibility score\n      const compatibilityScore =\n        directMatchScore * this.GAME_COMPATIBILITY_WEIGHTS.directMatch +\n        genreSynergy * this.GAME_COMPATIBILITY_WEIGHTS.genreSynergy +\n        crossGenreOpportunities.length *\n          0.1 *\n          this.GAME_COMPATIBILITY_WEIGHTS.crossGenre +\n        contentMixPotential * this.GAME_COMPATIBILITY_WEIGHTS.contentMix +\n        trendingAlignment * this.GAME_COMPATIBILITY_WEIGHTS.trendsAlignment;\n\n      return {\n        compatibilityScore: Math.min(100, compatibilityScore * 100),\n        sharedGames,\n        complementaryGames,\n        synergyClusters: this.identifySynergyClusters(\n          userGames,\n          candidateGames,\n        ),\n        crossGenreOpportunities,\n        contentMixPotential: contentMixPotential * 100,\n      };\n    } catch (error) {\n      logger.error(\"Game compatibility analysis failed\", {\n        error,\n        userGames,\n        candidateGames,\n      });\n      return {\n        compatibilityScore: 30, // Conservative fallback\n        sharedGames: [],\n        complementaryGames: [],\n        synergyClusters: [],\n        crossGenreOpportunities: [],\n        contentMixPotential: 20,\n      };\n    }\n  }\n\n  /**\n   * Advanced audience overlap analysis with demographic modeling\n   */\n  async analyzeAudienceOverlap(\n    userAudience: AudienceData,\n    candidateAudience: AudienceData,\n    userMetrics?: StreamingMetrics,\n    candidateMetrics?: StreamingMetrics,\n  ): Promise<AudienceOverlapAnalysis> {\n    try {\n      // Demographic overlap analysis\n      const demographicOverlap = this.calculateDemographicOverlap(\n        userAudience,\n        candidateAudience,\n      );\n\n      // Interest overlap\n      const interestOverlap = this.calculateInterestOverlap(\n        userAudience.interests || [],\n        candidateAudience.interests || [],\n      );\n\n      // Engagement pattern synergy\n      const engagementSynergy = this.calculateEngagementSynergy(\n        userMetrics,\n        candidateMetrics,\n      );\n\n      // Growth potential calculation\n      const potentialGrowth = this.calculateGrowthPotential(\n        userAudience,\n        candidateAudience,\n      );\n\n      // Retention synergy\n      const retentionPotential = this.calculateRetentionSynergy(\n        userMetrics,\n        candidateMetrics,\n      );\n\n      // Geographic distribution analysis\n      const geographicDistribution = this.analyzeGeographicDistribution(\n        userAudience.regions || {},\n        candidateAudience.regions || {},\n      );\n\n      // Weighted overlap score\n      const overlapScore =\n        demographicOverlap * this.AUDIENCE_ANALYSIS_WEIGHTS.demographic +\n        interestOverlap * this.AUDIENCE_ANALYSIS_WEIGHTS.interest +\n        engagementSynergy * this.AUDIENCE_ANALYSIS_WEIGHTS.engagement +\n        potentialGrowth * this.AUDIENCE_ANALYSIS_WEIGHTS.growth +\n        retentionPotential * this.AUDIENCE_ANALYSIS_WEIGHTS.retention;\n\n      return {\n        overlapScore: Math.min(100, overlapScore * 100),\n        sharedDemographics: this.identifySharedDemographics(\n          userAudience,\n          candidateAudience,\n        ),\n        complementaryAudiences: this.identifyComplementaryAudiences(\n          userAudience,\n          candidateAudience,\n        ),\n        potentialGrowth: potentialGrowth * 100,\n        engagementSynergy: engagementSynergy * 100,\n        retentionPotential: retentionPotential * 100,\n        geographicDistribution,\n      };\n    } catch (error) {\n      logger.error(\"Audience overlap analysis failed\", { error });\n      return {\n        overlapScore: 40,\n        sharedDemographics: [],\n        complementaryAudiences: [],\n        potentialGrowth: 30,\n        engagementSynergy: 35,\n        retentionPotential: 40,\n        geographicDistribution: {},\n      };\n    }\n  }\n\n  /**\n   * Advanced timezone coordination with global scheduling optimization\n   */\n  async analyzeTimezoneCoordination(\n    userSchedule: ScheduleData,\n    candidateSchedule: ScheduleData,\n    userTimezone: string = \"UTC\",\n    candidateTimezone: string = \"UTC\",\n  ): Promise<TimeZoneCoordination> {\n    try {\n      // Calculate timezone offset\n      const timezoneOffset = this.calculateTimezoneOffset(\n        userTimezone,\n        candidateTimezone,\n      );\n\n      // Find optimal overlapping time slots\n      const optimalTimeSlots = this.findOptimalTimeSlots(\n        userSchedule,\n        candidateSchedule,\n        timezoneOffset,\n      );\n\n      // Identify scheduling conflicts\n      const conflictAreas = this.identifySchedulingConflicts(\n        userSchedule,\n        candidateSchedule,\n        timezoneOffset,\n      );\n\n      // Calculate scheduling flexibility\n      const schedulingFlexibility = this.calculateSchedulingFlexibility(\n        userSchedule,\n        candidateSchedule,\n      );\n\n      // Global reach potential\n      const globalReachPotential = this.calculateGlobalReachPotential(\n        userTimezone,\n        candidateTimezone,\n        optimalTimeSlots,\n      );\n\n      // Weekend collaboration opportunities\n      const weekendOpportunities = this.findWeekendOpportunities(\n        userSchedule,\n        candidateSchedule,\n        timezoneOffset,\n      );\n\n      // Timezone advantages for different regions\n      const timezoneAdvantages = this.identifyTimezoneAdvantages(\n        userTimezone,\n        candidateTimezone,\n      );\n\n      // Calculate weighted compatibility score\n      const compatibilityScore =\n        optimalTimeSlots.length * 0.15 * this.TIMEZONE_FACTORS.optimalOverlap +\n        schedulingFlexibility * this.TIMEZONE_FACTORS.flexibilityBonus +\n        globalReachPotential * this.TIMEZONE_FACTORS.globalReach +\n        weekendOpportunities.length *\n          0.1 *\n          this.TIMEZONE_FACTORS.weekendSynergy;\n\n      return {\n        compatibilityScore: Math.min(100, compatibilityScore * 100),\n        optimalTimeSlots,\n        conflictAreas,\n        schedulingFlexibility: schedulingFlexibility * 100,\n        globalReachPotential: globalReachPotential * 100,\n        weekendOpportunities,\n        timezoneAdvantages,\n      };\n    } catch (error) {\n      logger.error(\"Timezone coordination analysis failed\", { error });\n      return {\n        compatibilityScore: 50,\n        optimalTimeSlots: [],\n        conflictAreas: [],\n        schedulingFlexibility: 40,\n        globalReachPotential: 30,\n        weekendOpportunities: [],\n        timezoneAdvantages: [],\n      };\n    }\n  }\n\n  /**\n   * Streaming style compatibility with behavioral analysis\n   */\n  async analyzeStreamingStyleMatch(\n    userStyle: StreamingStyleData,\n    candidateStyle: StreamingStyleData,\n    userHistory?: StreamerHistoryData,\n    candidateHistory?: StreamerHistoryData,\n  ): Promise<StreamingStyleMatch> {\n    try {\n      // Content delivery style compatibility\n      const contentDelivery = this.calculateContentDeliveryCompatibility(\n        userStyle,\n        candidateStyle,\n      );\n\n      // Interaction style alignment\n      const communicationAlignment = this.calculateCommunicationAlignment(\n        userStyle,\n        candidateStyle,\n      );\n\n      // Stream pacing compatibility\n      const paceCompatibility = this.calculatePaceCompatibility(\n        userStyle,\n        candidateStyle,\n      );\n\n      // Audience engagement style\n      const audienceEngagementStyle = this.determineAudienceEngagementStyle(\n        userStyle,\n        candidateStyle,\n      );\n\n      // Collaboration types suitability\n      const collaborationTypes = this.identifyCollaborationTypes(\n        userStyle,\n        candidateStyle,\n      );\n\n      // Streaming personality analysis\n      const streamingPersonalities = this.analyzeStreamingPersonalities(\n        userStyle,\n        candidateStyle,\n      );\n\n      // Content synergy potential\n      const contentSynergy = this.calculateContentSynergy(\n        userStyle,\n        candidateStyle,\n      );\n\n      // Weighted style compatibility\n      const styleCompatibility =\n        contentDelivery * this.STYLE_MATCHING_FACTORS.contentDelivery +\n        communicationAlignment * this.STYLE_MATCHING_FACTORS.interaction +\n        paceCompatibility * this.STYLE_MATCHING_FACTORS.pacing +\n        this.getPersonalityScore(streamingPersonalities) *\n          this.STYLE_MATCHING_FACTORS.personality +\n        this.getCollaborationScore(collaborationTypes) *\n          this.STYLE_MATCHING_FACTORS.collaboration;\n\n      return {\n        styleCompatibility: Math.min(100, styleCompatibility * 100),\n        contentSynergy: contentSynergy * 100,\n        communicationAlignment: communicationAlignment * 100,\n        paceCompatibility: paceCompatibility * 100,\n        audienceEngagementStyle,\n        collaborationTypes,\n        streamingPersonalities,\n      };\n    } catch (error) {\n      logger.error(\"Streaming style analysis failed\", { error });\n      return {\n        styleCompatibility: 60,\n        contentSynergy: 55,\n        communicationAlignment: 60,\n        paceCompatibility: 65,\n        audienceEngagementStyle: \"moderate\",\n        collaborationTypes: [\"casual\"],\n        streamingPersonalities: [\"friendly\"],\n      };\n    }\n  }\n\n  // Private helper methods for game compatibility\n\n  private extractGameGenres(games: string[]): string[] {\n    const genreMap: Record<string, string> = {\n      \"Magic: The Gathering\": \"Strategy\",\n      Pokemon: \"Strategy\",\n      \"Yu-Gi-Oh\": \"Strategy\",\n      Lorcana: \"Strategy\",\n      Hearthstone: \"Strategy\",\n      \"Legends of Runeterra\": \"Strategy\",\n      Gwent: \"Strategy\",\n      \"Slay the Spire\": \"Roguelike\",\n      \"Monster Train\": \"Strategy\",\n      Inscryption: \"Puzzle\",\n    };\n\n    const genres = games.map((game) => genreMap[game] || \"Other\");\n    return Array.from(new Set(genres));\n  }\n\n  private calculateGenreSynergy(\n    userGenres: string[],\n    candidateGenres: string[],\n  ): number {\n    const commonGenres = userGenres.filter((genre) =>\n      candidateGenres.includes(genre),\n    );\n    const allGenres = [...userGenres, ...candidateGenres];\n    const uniqueGenres = Array.from(new Set(allGenres));\n    const totalGenres = uniqueGenres.length;\n    return totalGenres > 0 ? commonGenres.length / totalGenres : 0;\n  }\n\n  private identifyCrossGenreOpportunities(\n    userGenres: string[],\n    candidateGenres: string[],\n  ): string[] {\n    const synergisticPairs: [string, string][] = [\n      [\"Strategy\", \"Roguelike\"],\n      [\"Strategy\", \"Puzzle\"],\n      [\"Roguelike\", \"Puzzle\"],\n    ];\n\n    const opportunities: string[] = [];\n    synergisticPairs.forEach(([genre1, genre2]) => {\n      if (\n        (userGenres.includes(genre1) && candidateGenres.includes(genre2)) ||\n        (userGenres.includes(genre2) && candidateGenres.includes(genre1))\n      ) {\n        opportunities.push(`${genre1} + ${genre2} Crossover`);\n      }\n    });\n\n    return opportunities;\n  }\n\n  private calculateContentMixPotential(\n    userGames: string[],\n    candidateGames: string[],\n  ): number {\n    const allGames = [...userGames, ...candidateGames];\n    const uniqueGames = Array.from(new Set(allGames));\n    const sharedGames = userGames.filter((game) =>\n      candidateGames.includes(game),\n    );\n\n    // Higher potential when there's both overlap and diversity\n    const overlapRatio =\n      sharedGames.length / Math.min(userGames.length, candidateGames.length);\n    const diversityRatio =\n      (uniqueGames.length - sharedGames.length) / uniqueGames.length;\n\n    return overlapRatio * 0.6 + diversityRatio * 0.4;\n  }\n\n  private async calculateTrendingAlignment(\n    userGames: string[],\n    candidateGames: string[],\n  ): Promise<number> {\n    // Simulated trending games - in production this would come from external APIs\n    const trendingGames = [\"Magic: The Gathering\", \"Pokemon\", \"Lorcana\"];\n\n    const userTrendingCount = userGames.filter((game) =>\n      trendingGames.includes(game),\n    ).length;\n    const candidateTrendingCount = candidateGames.filter((game) =>\n      trendingGames.includes(game),\n    ).length;\n\n    return (\n      Math.min(userTrendingCount, candidateTrendingCount) / trendingGames.length\n    );\n  }\n\n  private findComplementaryGames(\n    userGames: string[],\n    candidateGames: string[],\n  ): string[] {\n    // Games that work well together but aren't the same\n    const complementaryPairs: Record<string, string[]> = {\n      \"Magic: The Gathering\": [\"Yu-Gi-Oh\", \"Pokemon\"],\n      Pokemon: [\"Magic: The Gathering\", \"Lorcana\"],\n      \"Yu-Gi-Oh\": [\"Magic: The Gathering\", \"Pokemon\"],\n      Lorcana: [\"Pokemon\", \"Magic: The Gathering\"],\n    };\n\n    const complementary: string[] = [];\n    userGames.forEach((userGame) => {\n      const pairs = complementaryPairs[userGame] || [];\n      pairs.forEach((pair) => {\n        if (candidateGames.includes(pair) && !complementary.includes(pair)) {\n          complementary.push(pair);\n        }\n      });\n    });\n\n    return complementary;\n  }\n\n  private identifySynergyClusters(\n    userGames: string[],\n    candidateGames: string[],\n  ): string[] {\n    const clusters = [\n      {\n        name: \"TCG Masters\",\n        games: [\"Magic: The Gathering\", \"Pokemon\", \"Yu-Gi-Oh\"],\n      },\n      {\n        name: \"Modern Strategy\",\n        games: [\"Lorcana\", \"Hearthstone\", \"Legends of Runeterra\"],\n      },\n      {\n        name: \"Digital Innovators\",\n        games: [\"Hearthstone\", \"Legends of Runeterra\", \"Gwent\"],\n      },\n    ];\n\n    return clusters\n      .filter((cluster) => {\n        const userMatches = userGames.filter((game) =>\n          cluster.games.includes(game),\n        ).length;\n        const candidateMatches = candidateGames.filter((game) =>\n          cluster.games.includes(game),\n        ).length;\n        return userMatches >= 1 && candidateMatches >= 1;\n      })\n      .map((cluster) => cluster.name);\n  }\n\n  // Private helper methods for audience analysis\n\n  private calculateDemographicOverlap(\n    userAudience: AudienceData,\n    candidateAudience: AudienceData,\n  ): number {\n    // Simplified demographic overlap calculation\n    const userDemo = userAudience.demographics || {};\n    const candidateDemo = candidateAudience.demographics || {};\n\n    // Age group overlap\n    const ageOverlap = this.calculateAgeOverlap(\n      userDemo.ageGroups,\n      candidateDemo.ageGroups,\n    );\n\n    // Geographic overlap\n    const geoOverlap = this.calculateGeographicOverlap(\n      userAudience.regions,\n      candidateAudience.regions,\n    );\n\n    return ageOverlap * 0.6 + geoOverlap * 0.4;\n  }\n\n  private calculateAgeOverlap(userAges: Record<string, number>, candidateAges: Record<string, number>): number {\n    if (!userAges || !candidateAges) return 0.5; // Default moderate overlap\n\n    const ageGroups = [\"13-17\", \"18-24\", \"25-34\", \"35-44\", \"45+\"];\n    let overlap = 0;\n    let total = 0;\n\n    ageGroups.forEach((group) => {\n      const userPct = userAges[group] || 0;\n      const candidatePct = candidateAges[group] || 0;\n      overlap += Math.min(userPct, candidatePct);\n      total += Math.max(userPct, candidatePct);\n    });\n\n    return total > 0 ? overlap / total : 0;\n  }\n\n  private calculateGeographicOverlap(\n    userRegions: Record<string, number>,\n    candidateRegions: Record<string, number>,\n  ): number {\n    if (!userRegions || !candidateRegions) return 0.5;\n\n    const regions = [\"US\", \"EU\", \"APAC\", \"LATAM\", \"OTHER\"];\n    let overlap = 0;\n    let total = 0;\n\n    regions.forEach((region) => {\n      const userPct = userRegions[region] || 0;\n      const candidatePct = candidateRegions[region] || 0;\n      overlap += Math.min(userPct, candidatePct);\n      total += Math.max(userPct, candidatePct);\n    });\n\n    return total > 0 ? overlap / total : 0;\n  }\n\n  private calculateInterestOverlap(\n    userInterests: string[],\n    candidateInterests: string[],\n  ): number {\n    if (!userInterests.length || !candidateInterests.length) return 0.3;\n\n    const commonInterests = userInterests.filter((interest) =>\n      candidateInterests.includes(interest),\n    );\n    const allInterests = [...userInterests, ...candidateInterests];\n    const uniqueInterests = Array.from(new Set(allInterests));\n    const totalInterests = uniqueInterests.length;\n\n    return totalInterests > 0 ? commonInterests.length / totalInterests : 0;\n  }\n\n  private calculateEngagementSynergy(\n    userMetrics: StreamingMetrics,\n    candidateMetrics: StreamingMetrics,\n  ): number {\n    if (!userMetrics || !candidateMetrics) return 0.5;\n\n    const userEngagement = userMetrics.engagementRate || 50;\n    const candidateEngagement = candidateMetrics.engagementRate || 50;\n\n    // Higher synergy when engagement rates are similar\n    const difference = Math.abs(userEngagement - candidateEngagement);\n    return Math.max(0, 1 - difference / 100);\n  }\n\n  private calculateGrowthPotential(\n    userAudience: AudienceData,\n    candidateAudience: AudienceData,\n  ): number {\n    // Simulate growth potential based on audience complementarity\n    const userSize = userAudience.size || 100;\n    const candidateSize = candidateAudience.size || 100;\n\n    // Better growth potential when audiences are different sizes but compatible\n    const sizeDifference =\n      Math.abs(userSize - candidateSize) / Math.max(userSize, candidateSize);\n    const complementarity =\n      1 - this.calculateDemographicOverlap(userAudience, candidateAudience);\n\n    return sizeDifference * 0.4 + complementarity * 0.6;\n  }\n\n  private calculateRetentionSynergy(\n    userMetrics: StreamingMetrics,\n    candidateMetrics: StreamingMetrics,\n  ): number {\n    if (!userMetrics || !candidateMetrics) return 0.6;\n\n    const userRetention = userMetrics.retentionRate || 70;\n    const candidateRetention = candidateMetrics.retentionRate || 70;\n\n    // Synergy when both have good retention or can help each other improve\n    const avgRetention = (userRetention + candidateRetention) / 2;\n    const synergy = avgRetention / 100;\n\n    return Math.min(1, synergy);\n  }\n\n  private analyzeGeographicDistribution(\n    userRegions: Record<string, number>,\n    candidateRegions: Record<string, number>,\n  ): Record<string, number> {\n    const combined: Record<string, number> = {};\n    const regions = [\"US\", \"EU\", \"APAC\", \"LATAM\", \"OTHER\"];\n\n    regions.forEach((region) => {\n      const userPct = userRegions[region] || 0;\n      const candidatePct = candidateRegions[region] || 0;\n      combined[region] = (userPct + candidatePct) / 2;\n    });\n\n    return combined;\n  }\n\n  private identifySharedDemographics(\n    userAudience: AudienceData,\n    candidateAudience: AudienceData,\n  ): string[] {\n    const shared: string[] = [];\n\n    // Age demographics\n    const userAges = userAudience.demographics?.ageGroups || {};\n    const candidateAges = candidateAudience.demographics?.ageGroups || {};\n\n    Object.keys(userAges).forEach((ageGroup) => {\n      if (userAges[ageGroup] > 20 && candidateAges[ageGroup] > 20) {\n        shared.push(`Age ${ageGroup}`);\n      }\n    });\n\n    return shared;\n  }\n\n  private identifyComplementaryAudiences(\n    userAudience: AudienceData,\n    candidateAudience: AudienceData,\n  ): string[] {\n    const complementary: string[] = [];\n\n    // Identify audiences that complement each other\n    const userStrengths = this.identifyAudienceStrengths(userAudience);\n    const candidateStrengths =\n      this.identifyAudienceStrengths(candidateAudience);\n\n    userStrengths.forEach((strength) => {\n      if (!candidateStrengths.includes(strength)) {\n        complementary.push(`User strength: ${strength}`);\n      }\n    });\n\n    candidateStrengths.forEach((strength) => {\n      if (!userStrengths.includes(strength)) {\n        complementary.push(`Candidate strength: ${strength}`);\n      }\n    });\n\n    return complementary;\n  }\n\n  private identifyAudienceStrengths(audience: AudienceData): string[] {\n    const strengths: string[] = [];\n    const demo = audience.demographics || {};\n\n    if (demo.ageGroups?.[\"18-24\"] > 40) strengths.push(\"Young Adult\");\n    if (demo.ageGroups?.[\"25-34\"] > 35) strengths.push(\"Professional\");\n    if (audience.regions?.US > 50) strengths.push(\"US Market\");\n    if (audience.regions?.EU > 30) strengths.push(\"EU Market\");\n\n    return strengths;\n  }\n\n  // Private helper methods for timezone analysis\n\n  private calculateTimezoneOffset(userTz: string, candidateTz: string): number {\n    // Simplified timezone offset calculation\n    const timezoneOffsets: Record<string, number> = {\n      UTC: 0,\n      EST: -5,\n      PST: -8,\n      CET: 1,\n      JST: 9,\n      AEST: 10,\n    };\n\n    const userOffset = timezoneOffsets[userTz] || 0;\n    const candidateOffset = timezoneOffsets[candidateTz] || 0;\n\n    return Math.abs(userOffset - candidateOffset);\n  }\n\n  private findOptimalTimeSlots(\n    userSchedule: ScheduleData,\n    candidateSchedule: ScheduleData,\n    timezoneOffset: number,\n  ): string[] {\n    const optimalSlots: string[] = [];\n\n    // Simplified schedule analysis\n    const days = [\n      \"monday\",\n      \"tuesday\",\n      \"wednesday\",\n      \"thursday\",\n      \"friday\",\n      \"saturday\",\n      \"sunday\",\n    ];\n\n    days.forEach((day) => {\n      const userSlots = userSchedule?.weeklySchedule?.[day]?.timeSlots || [];\n      const candidateSlots =\n        candidateSchedule?.weeklySchedule?.[day]?.timeSlots || [];\n\n      userSlots.forEach((userSlot: string) => {\n        candidateSlots.forEach((candidateSlot: string) => {\n          if (\n            this.isTimeSlotCompatible(userSlot, candidateSlot, timezoneOffset)\n          ) {\n            optimalSlots.push(`${day}: ${userSlot} / ${candidateSlot}`);\n          }\n        });\n      });\n    });\n\n    return optimalSlots;\n  }\n\n  private isTimeSlotCompatible(\n    userSlot: string,\n    candidateSlot: string,\n    offset: number,\n  ): boolean {\n    // Simplified time compatibility check\n    // In production, this would parse actual times and apply timezone math\n    return offset <= 8; // Max 8 hour difference for reasonable compatibility\n  }\n\n  private identifySchedulingConflicts(\n    userSchedule: ScheduleData,\n    candidateSchedule: ScheduleData,\n    timezoneOffset: number,\n  ): string[] {\n    const conflicts: string[] = [];\n\n    if (timezoneOffset > 12) {\n      conflicts.push(\"Major timezone difference\");\n    }\n\n    if (timezoneOffset > 8) {\n      conflicts.push(\"Limited overlap hours\");\n    }\n\n    return conflicts;\n  }\n\n  private calculateSchedulingFlexibility(\n    userSchedule: ScheduleData,\n    candidateSchedule: ScheduleData,\n  ): number {\n    const userFlexibility = userSchedule?.advanceNotice || 24;\n    const candidateFlexibility = candidateSchedule?.advanceNotice || 24;\n\n    // Higher flexibility when both can schedule with short notice\n    const avgFlexibility = (userFlexibility + candidateFlexibility) / 2;\n    return Math.max(0, 1 - avgFlexibility / 168); // 168 hours in a week\n  }\n\n  private calculateGlobalReachPotential(\n    userTz: string,\n    candidateTz: string,\n    optimalSlots: string[],\n  ): number {\n    // Assess how well their combined timezones cover global audiences\n    const regions: string[] = [];\n\n    // Add timezone coverage\n    if (userTz.includes(\"EST\") || userTz.includes(\"PST\"))\n      regions.push(\"Americas\");\n    if (userTz.includes(\"CET\") || userTz.includes(\"GMT\"))\n      regions.push(\"Europe\");\n    if (userTz.includes(\"JST\") || userTz.includes(\"AEST\")) regions.push(\"Asia\");\n\n    if (candidateTz.includes(\"EST\") || candidateTz.includes(\"PST\"))\n      regions.push(\"Americas\");\n    if (candidateTz.includes(\"CET\") || candidateTz.includes(\"GMT\"))\n      regions.push(\"Europe\");\n    if (candidateTz.includes(\"JST\") || candidateTz.includes(\"AEST\"))\n      regions.push(\"Asia\");\n\n    const uniqueRegions = Array.from(new Set(regions));\n    return uniqueRegions.length / 3; // Max 3 major regions\n  }\n\n  private findWeekendOpportunities(\n    userSchedule: ScheduleData,\n    candidateSchedule: ScheduleData,\n    timezoneOffset: number,\n  ): string[] {\n    const weekendSlots: string[] = [];\n\n    [\"saturday\", \"sunday\"].forEach((day) => {\n      const userSlots = userSchedule?.weeklySchedule?.[day]?.timeSlots || [];\n      const candidateSlots =\n        candidateSchedule?.weeklySchedule?.[day]?.timeSlots || [];\n\n      if (userSlots.length > 0 && candidateSlots.length > 0) {\n        weekendSlots.push(`${day}: Extended collaboration opportunity`);\n      }\n    });\n\n    return weekendSlots;\n  }\n\n  private identifyTimezoneAdvantages(\n    userTz: string,\n    candidateTz: string,\n  ): string[] {\n    const advantages: string[] = [];\n\n    if (userTz !== candidateTz) {\n      advantages.push(\"Extended coverage hours\");\n      advantages.push(\"Follow-the-sun content delivery\");\n    }\n\n    if (this.calculateTimezoneOffset(userTz, candidateTz) <= 3) {\n      advantages.push(\"Real-time collaboration friendly\");\n    }\n\n    return advantages;\n  }\n\n  // Private helper methods for style analysis\n\n  private calculateContentDeliveryCompatibility(\n    userStyle: StreamingStyleData,\n    candidateStyle: StreamingStyleData,\n  ): number {\n    // Analyze how they deliver content (educational, entertainment, competitive, etc.)\n    const userDelivery = userStyle.contentDelivery || \"balanced\";\n    const candidateDelivery = candidateStyle.contentDelivery || \"balanced\";\n\n    const compatibilityMatrix: Record<string, Record<string, number>> = {\n      educational: {\n        educational: 0.9,\n        entertainment: 0.7,\n        competitive: 0.6,\n        balanced: 0.8,\n      },\n      entertainment: {\n        educational: 0.7,\n        entertainment: 0.9,\n        competitive: 0.7,\n        balanced: 0.8,\n      },\n      competitive: {\n        educational: 0.6,\n        entertainment: 0.7,\n        competitive: 0.9,\n        balanced: 0.7,\n      },\n      balanced: {\n        educational: 0.8,\n        entertainment: 0.8,\n        competitive: 0.7,\n        balanced: 0.9,\n      },\n    };\n\n    return compatibilityMatrix[userDelivery]?.[candidateDelivery] || 0.7;\n  }\n\n  private calculateCommunicationAlignment(\n    userStyle: StreamingStyleData,\n    candidateStyle: StreamingStyleData,\n  ): number {\n    // Analyze communication styles (chatty, focused, interactive, etc.)\n    const userComm = userStyle.communicationStyle || \"moderate\";\n    const candidateComm = candidateStyle.communicationStyle || \"moderate\";\n\n    const alignmentMap: Record<string, Record<string, number>> = {\n      chatty: { chatty: 0.9, moderate: 0.7, focused: 0.5 },\n      moderate: { chatty: 0.7, moderate: 0.9, focused: 0.7 },\n      focused: { chatty: 0.5, moderate: 0.7, focused: 0.9 },\n    };\n\n    return alignmentMap[userComm]?.[candidateComm] || 0.7;\n  }\n\n  private calculatePaceCompatibility(\n    userStyle: StreamingStyleData,\n    candidateStyle: StreamingStyleData,\n  ): number {\n    // Analyze streaming pace (fast, moderate, slow)\n    const userPace = userStyle.pace || \"moderate\";\n    const candidatePace = candidateStyle.pace || \"moderate\";\n\n    const paceCompatibility: Record<string, Record<string, number>> = {\n      fast: { fast: 0.9, moderate: 0.7, slow: 0.4 },\n      moderate: { fast: 0.7, moderate: 0.9, slow: 0.7 },\n      slow: { fast: 0.4, moderate: 0.7, slow: 0.9 },\n    };\n\n    return paceCompatibility[userPace]?.[candidatePace] || 0.7;\n  }\n\n  private determineAudienceEngagementStyle(\n    userStyle: StreamingStyleData,\n    candidateStyle: StreamingStyleData,\n  ): string {\n    const userEngagement = userStyle.audienceEngagement || \"moderate\";\n    const candidateEngagement = candidateStyle.audienceEngagement || \"moderate\";\n\n    if (userEngagement === \"high\" && candidateEngagement === \"high\")\n      return \"highly_interactive\";\n    if (userEngagement === \"low\" && candidateEngagement === \"low\")\n      return \"content_focused\";\n    return \"balanced_interaction\";\n  }\n\n  private identifyCollaborationTypes(\n    userStyle: StreamingStyleData,\n    candidateStyle: StreamingStyleData,\n  ): string[] {\n    const types: string[] = [];\n\n    // Based on their styles, suggest collaboration types\n    if (userStyle.competitive && candidateStyle.competitive) {\n      types.push(\"competitive_tournaments\");\n    }\n\n    if (userStyle.educational || candidateStyle.educational) {\n      types.push(\"teaching_streams\");\n    }\n\n    if (userStyle.entertainment && candidateStyle.entertainment) {\n      types.push(\"variety_shows\", \"game_nights\");\n    }\n\n    types.push(\"casual_games\", \"community_events\"); // Always available\n\n    return types;\n  }\n\n  private analyzeStreamingPersonalities(\n    userStyle: StreamingStyleData,\n    candidateStyle: StreamingStyleData,\n  ): string[] {\n    const personalities: string[] = [];\n\n    // Determine personality compatibility\n    if (\n      userStyle.personality?.includes(\"energetic\") &&\n      candidateStyle.personality?.includes(\"energetic\")\n    ) {\n      personalities.push(\"high_energy_duo\");\n    }\n\n    if (\n      userStyle.personality?.includes(\"analytical\") ||\n      candidateStyle.personality?.includes(\"analytical\")\n    ) {\n      personalities.push(\"strategic_minds\");\n    }\n\n    personalities.push(\"friendly_collaboration\"); // Default\n\n    return personalities;\n  }\n\n  private calculateContentSynergy(userStyle: StreamingStyleData, candidateStyle: StreamingStyleData): number {\n    // Calculate how well their content styles work together\n    let synergy = 0.5; // Base synergy\n\n    // Boost for complementary styles\n    if (\n      userStyle.contentDelivery === \"educational\" &&\n      candidateStyle.contentDelivery === \"entertainment\"\n    ) {\n      synergy += 0.2;\n    }\n\n    if (userStyle.pace !== candidateStyle.pace) {\n      synergy += 0.1; // Different paces can create good dynamics\n    }\n\n    return Math.min(1, synergy);\n  }\n\n  private getPersonalityScore(personalities: string[]): number {\n    return personalities.length > 0 ? 0.8 : 0.5;\n  }\n\n  private getCollaborationScore(types: string[]): number {\n    return Math.min(1, types.length * 0.2);\n  }\n\n  /**\n   * Update adaptive weights based on success patterns and collaboration outcomes\n   */\n  updateAdaptiveWeights(\n    collaborationOutcomes: Array<{\n      matchId: string;\n      successScore: number; // 0-1 scale\n      gameCompatibility: number;\n      audienceOverlap: number;\n      timezoneAlignment: number;\n      styleMatching: number;\n      userFeedback?: {\n        rating: number; // 1-5 scale\n        collaborationSuccess: boolean;\n        wouldCollaborateAgain: boolean;\n      };\n      actualResults?: {\n        viewerGrowth: number;\n        engagementIncrease: number;\n        retentionImprovement: number;\n      };\n    }>,\n  ): void {\n    if (collaborationOutcomes.length < 3) {\n      logger.debug(\"Insufficient data for weight adaptation\", {\n        outcomes: collaborationOutcomes.length,\n      });\n      return;\n    }\n\n    try {\n      // Calculate success metrics\n      const avgSuccess =\n        collaborationOutcomes.reduce(\n          (sum, outcome) => sum + outcome.successScore,\n          0,\n        ) / collaborationOutcomes.length;\n      const successfulCollabs = collaborationOutcomes.filter(\n        (o) => o.successScore > 0.7,\n      );\n\n      // Analyze which factors contributed most to success\n      const factorAnalysis = {\n        gameCompatibility: this.analyzeFactorSuccess(\n          collaborationOutcomes,\n          \"gameCompatibility\",\n        ),\n        audienceOverlap: this.analyzeFactorSuccess(\n          collaborationOutcomes,\n          \"audienceOverlap\",\n        ),\n        timezoneAlignment: this.analyzeFactorSuccess(\n          collaborationOutcomes,\n          \"timezoneAlignment\",\n        ),\n        styleMatching: this.analyzeFactorSuccess(\n          collaborationOutcomes,\n          \"styleMatching\",\n        ),\n      };\n\n      // Adjust weights based on factor success correlation\n      const adjustmentFactor = 0.1; // Conservative adjustment\n      const totalAdjustment = adjustmentFactor;\n\n      if (avgSuccess > 0.8) {\n        // System performing well, minimal adjustments\n        this.adaptiveWeights.adaptiveBonus = Math.min(\n          0.1,\n          this.adaptiveWeights.adaptiveBonus + 0.02,\n        );\n      } else if (avgSuccess < 0.5) {\n        // System needs significant adjustment\n        const bestFactor = Object.entries(factorAnalysis).reduce((a, b) =>\n          factorAnalysis[a[0] as keyof typeof factorAnalysis] >\n          factorAnalysis[b[0] as keyof typeof factorAnalysis]\n            ? a\n            : b,\n        )[0] as keyof typeof factorAnalysis;\n\n        // Boost the most successful factor\n        if (bestFactor === \"gameCompatibility\") {\n          this.adaptiveWeights.gameCompatibility += adjustmentFactor;\n          this.adaptiveWeights.audienceOverlap -= adjustmentFactor * 0.3;\n          this.adaptiveWeights.timezoneAlignment -= adjustmentFactor * 0.3;\n          this.adaptiveWeights.styleMatching -= adjustmentFactor * 0.4;\n        } else if (bestFactor === \"audienceOverlap\") {\n          this.adaptiveWeights.audienceOverlap += adjustmentFactor;\n          this.adaptiveWeights.gameCompatibility -= adjustmentFactor * 0.3;\n          this.adaptiveWeights.timezoneAlignment -= adjustmentFactor * 0.3;\n          this.adaptiveWeights.styleMatching -= adjustmentFactor * 0.4;\n        } else if (bestFactor === \"timezoneAlignment\") {\n          this.adaptiveWeights.timezoneAlignment += adjustmentFactor;\n          this.adaptiveWeights.gameCompatibility -= adjustmentFactor * 0.3;\n          this.adaptiveWeights.audienceOverlap -= adjustmentFactor * 0.3;\n          this.adaptiveWeights.styleMatching -= adjustmentFactor * 0.4;\n        } else if (bestFactor === \"styleMatching\") {\n          this.adaptiveWeights.styleMatching += adjustmentFactor;\n          this.adaptiveWeights.gameCompatibility -= adjustmentFactor * 0.3;\n          this.adaptiveWeights.audienceOverlap -= adjustmentFactor * 0.3;\n          this.adaptiveWeights.timezoneAlignment -= adjustmentFactor * 0.4;\n        }\n      }\n\n      // Ensure weights remain within bounds and sum to ~1.0\n      this.normalizeWeights();\n\n      // Persist weights (in production, this would save to database/storage)\n      this.persistAdaptiveWeights();\n\n      logger.info(\"Adaptive weights updated based on collaboration outcomes\", {\n        avgSuccess,\n        factorAnalysis,\n        newWeights: this.adaptiveWeights,\n        outcomesAnalyzed: collaborationOutcomes.length,\n      });\n    } catch (error) {\n      logger.error(\"Failed to update adaptive weights\", {\n        error,\n        outcomesCount: collaborationOutcomes.length,\n      });\n    }\n  }\n\n  /**\n   * Analyze how well a specific factor correlates with success\n   */\n  private analyzeFactorSuccess(outcomes: MatchData[], factor: string): number {\n    if (outcomes.length === 0) return 0.5;\n\n    const correlations = outcomes.map((outcome) => ({\n      factorScore: outcome[factor] || 0,\n      successScore: outcome.successScore || 0,\n    }));\n\n    // Simple correlation calculation\n    let correlation = 0;\n    correlations.forEach(({ factorScore, successScore }) => {\n      if (factorScore > 0.7 && successScore > 0.7) {\n        correlation += 1;\n      } else if (factorScore < 0.4 && successScore < 0.4) {\n        correlation += 0.5;\n      }\n    });\n\n    return correlation / correlations.length;\n  }\n\n  /**\n   * Normalize weights to ensure they sum to approximately 1.0 and stay within bounds\n   */\n  private normalizeWeights(): void {\n    const coreWeights = [\n      \"gameCompatibility\",\n      \"audienceOverlap\",\n      \"timezoneAlignment\",\n      \"styleMatching\",\n      \"socialFactors\",\n      \"performanceMetrics\",\n    ] as const;\n\n    // Ensure individual weights stay within bounds\n    coreWeights.forEach((weight) => {\n      this.adaptiveWeights[weight] = Math.max(\n        0.05,\n        Math.min(0.5, this.adaptiveWeights[weight]),\n      );\n    });\n\n    // Normalize to sum to 1.0 (excluding adaptive bonus)\n    const totalCoreWeight = coreWeights.reduce(\n      (sum, weight) => sum + this.adaptiveWeights[weight],\n      0,\n    );\n    const targetSum = 1.0 - this.adaptiveWeights.adaptiveBonus;\n\n    if (totalCoreWeight > 0) {\n      const scaleFactor = targetSum / totalCoreWeight;\n      coreWeights.forEach((weight) => {\n        this.adaptiveWeights[weight] *= scaleFactor;\n      });\n    }\n\n    // Ensure adaptive bonus stays within bounds\n    this.adaptiveWeights.adaptiveBonus = Math.max(\n      0,\n      Math.min(0.15, this.adaptiveWeights.adaptiveBonus),\n    );\n  }\n\n  /**\n   * Persist adaptive weights for future sessions\n   */\n  private persistAdaptiveWeights(): void {\n    try {\n      // In production, this would save to database or storage service\n      // For now, we'll use in-memory persistence with logging\n      logger.info(\"Adaptive weights persisted\", {\n        weights: this.adaptiveWeights,\n      });\n\n      // TODO: Add actual persistence to storage\n      // await storage.saveAlgorithmWeights(this.adaptiveWeights);\n    } catch (error) {\n      logger.error(\"Failed to persist adaptive weights\", { error });\n    }\n  }\n\n  /**\n   * Load adaptive weights from persistent storage\n   */\n  private async loadAdaptiveWeights(): Promise<void> {\n    try {\n      // In production, this would load from database or storage service\n      // For now, use defaults\n      logger.debug(\"Loading adaptive weights from defaults\");\n\n      // TODO: Add actual loading from storage\n      // const savedWeights = await storage.getAlgorithmWeights();\n      // if (savedWeights) {\n      //   this.adaptiveWeights = { ...this.adaptiveWeights, ...savedWeights };\n      // }\n    } catch (error) {\n      logger.error(\"Failed to load adaptive weights, using defaults\", {\n        error,\n      });\n    }\n  }\n\n  /**\n   * Get current algorithm configuration\n   */\n  getAlgorithmConfiguration(): AlgorithmWeights {\n    return { ...this.adaptiveWeights };\n  }\n\n  /**\n   * Reset algorithm weights to defaults\n   */\n  resetToDefaults(): void {\n    this.adaptiveWeights = {\n      gameCompatibility: 0.25,\n      audienceOverlap: 0.25,\n      timezoneAlignment: 0.2,\n      styleMatching: 0.15,\n      socialFactors: 0.1,\n      performanceMetrics: 0.05,\n      adaptiveBonus: 0.0,\n    };\n\n    logger.info(\"Algorithm weights reset to defaults\");\n  }\n}\n\n// Export singleton instance for use in other services\nexport const aiAlgorithmEngine = AIAlgorithmEngine.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/ai-streaming-matcher.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'aiAlgorithmEngine' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userProfile' is defined but never used. Allowed unused args must match /^_/u.","line":403,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":403,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'criteria' is defined but never used. Allowed unused args must match /^_/u.","line":444,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":444,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":904,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":904,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27555,27558],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27555,27558],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":942,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":942,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29032,29035],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29032,29035],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":953,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":953,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29369,29372],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29369,29372],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userSettings' is defined but never used. Allowed unused args must match /^_/u.","line":954,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":954,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":954,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":954,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29392,29395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29392,29395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":986,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":986,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30257,30260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30257,30260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'matchingPrefs' is defined but never used. Allowed unused args must match /^_/u.","line":1009,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1009,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1009,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1009,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31011,31014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31011,31014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userSettings' is defined but never used. Allowed unused args must match /^_/u.","line":1010,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1010,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1010,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1010,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31034,31037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31034,31037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from \"../logger\";\nimport { aiAlgorithmEngine } from \"./ai-algorithm-engine\";\nimport { storage } from \"../storage\";\nimport { twitchAPI } from \"./twitch-api\";\nimport { youtubeAPI } from \"./youtube-api\";\nimport { facebookAPI } from \"./facebook-api\";\nimport type { User } from \"@shared/schema\";\n\n// Enhanced streaming-specific matching interfaces\nexport interface StreamerProfile {\n  id: string;\n  username: string;\n  avatar?: string;\n  platforms: ConnectedPlatform[];\n  streamingPreferences: StreamingPreferences;\n  audienceMetrics: AudienceMetrics;\n  contentPreferences: ContentPreferences;\n  availabilitySchedule: AvailabilitySchedule;\n  collaborationHistory: CollaborationHistory;\n  matchingPreferences: StreamingMatchPreferences;\n}\n\nexport interface ConnectedPlatform {\n  platform: \"twitch\" | \"youtube\" | \"facebook\";\n  username: string;\n  isActive: boolean;\n  followerCount?: number;\n  averageViewers?: number;\n  lastStreamDate?: Date;\n  streamQuality?: string;\n}\n\nexport interface StreamingPreferences {\n  preferredStreamTimes: string[]; // e.g., [\"19:00-22:00\", \"14:00-17:00\"]\n  streamFrequency: \"daily\" | \"weekly\" | \"biweekly\" | \"monthly\";\n  streamDuration: number; // in minutes\n  contentRating: \"family_friendly\" | \"teen\" | \"mature\";\n  interactionStyle: \"high_energy\" | \"chill\" | \"educational\" | \"competitive\";\n  chatModeration: \"strict\" | \"moderate\" | \"relaxed\";\n}\n\nexport interface AudienceMetrics {\n  totalFollowers: number;\n  averageViewers: number;\n  peakViewers: number;\n  audienceAge: \"teen\" | \"young_adult\" | \"adult\" | \"mixed\";\n  audienceRegions: string[]; // e.g., [\"US\", \"EU\", \"APAC\"]\n  engagementRate: number; // 0-100\n  retentionRate: number; // 0-100\n  chatActivity: \"low\" | \"medium\" | \"high\" | \"very_high\";\n}\n\nexport interface ContentPreferences {\n  primaryGames: string[]; // Community IDs\n  secondaryGames: string[];\n  contentTypes: (\n    | \"gameplay\"\n    | \"tutorial\"\n    | \"tournament\"\n    | \"casual\"\n    | \"speedrun\"\n    | \"review\"\n  )[];\n  collabTypes: (\n    | \"co_op\"\n    | \"versus\"\n    | \"teaching\"\n    | \"tournament\"\n    | \"casual_chat\"\n    | \"raid_train\"\n  )[];\n  avoidedContent: string[];\n}\n\nexport interface AvailabilitySchedule {\n  timezone: string;\n  weeklySchedule: {\n    [day in\n      | \"monday\"\n      | \"tuesday\"\n      | \"wednesday\"\n      | \"thursday\"\n      | \"friday\"\n      | \"saturday\"\n      | \"sunday\"]: {\n      available: boolean;\n      timeSlots: string[]; // e.g., [\"09:00-12:00\", \"19:00-22:00\"]\n    };\n  };\n  advanceNotice: number; // hours needed for planning\n  maxCollabsPerWeek: number;\n}\n\nexport interface CollaborationHistory {\n  totalCollaborations: number;\n  successfulCollaborations: number;\n  averageRating: number; // 1-5 from collaboration partners\n  preferredPartnerTypes: string[];\n  lastCollaboration?: Date;\n  noShowRate: number; // 0-100\n}\n\nexport interface StreamingMatchPreferences {\n  audienceSizeCompatibility:\n    | \"similar\"\n    | \"larger_welcome\"\n    | \"smaller_welcome\"\n    | \"any\";\n  contentSynergy: \"same_games\" | \"complementary\" | \"educational\" | \"any\";\n  collaborationFrequency: \"rare\" | \"occasional\" | \"regular\" | \"frequent\";\n  partnershipGoals: (\n    | \"audience_growth\"\n    | \"content_variety\"\n    | \"learning\"\n    | \"fun\"\n    | \"networking\"\n  )[];\n  excludeCompetitors: boolean;\n  minimumRating: number; // 1-5 minimum collaboration rating\n  geoPreference: \"local\" | \"regional\" | \"global\";\n}\n\nexport interface StreamerMatch {\n  partnerId: string;\n  profile: StreamerProfile;\n  compatibilityScore: number; // 0-100\n  matchReasons: string[];\n  suggestedCollaborationType: string;\n  scheduledTimeSlots: string[];\n  audienceOverlapPotential: number;\n  contentSynergyScore: number;\n  availabilityMatch: number;\n  platformCompatibility: string[];\n  estimatedViewerBoost: number; // projected viewer increase\n}\n\nexport interface MatchingCriteria {\n  userId: string;\n  games?: string[];\n  timeSlots?: string[];\n  collaborationType?: string;\n  audienceSize?: \"any\" | \"similar\" | \"larger\" | \"smaller\";\n  contentType?: string;\n  urgency?: \"low\" | \"medium\" | \"high\";\n  maxResults?: number;\n}\n\n/**\n * AI-powered streaming partnership matching service\n * Provides intelligent matching based on audience compatibility, content synergy,\n * scheduling alignment, and collaboration goals\n */\nexport class AIStreamingMatcher {\n  private static instance: AIStreamingMatcher;\n  private matchingCache = new Map<string, StreamerMatch[]>();\n  private profileCache = new Map<string, StreamerProfile>();\n  private cacheExpiry = 10 * 60 * 1000; // 10 minutes\n\n  static getInstance(): AIStreamingMatcher {\n    if (!AIStreamingMatcher.instance) {\n      AIStreamingMatcher.instance = new AIStreamingMatcher();\n    }\n    return AIStreamingMatcher.instance;\n  }\n\n  /**\n   * Find optimal streaming partners using AI algorithms\n   */\n  async findStreamingPartners(\n    criteria: MatchingCriteria,\n  ): Promise<StreamerMatch[]> {\n    const startTime = Date.now();\n    logger.info(\"AI streaming partner matching started\", {\n      userId: criteria.userId,\n      criteria,\n    });\n\n    try {\n      // Check cache first\n      const cacheKey = this.generateCacheKey(criteria);\n      if (this.matchingCache.has(cacheKey)) {\n        const cached = this.matchingCache.get(cacheKey);\n        if (cached) {\n          logger.info(\"Returned cached streaming matches\", {\n            userId: criteria.userId,\n            count: cached.length,\n          });\n          return cached;\n        }\n      }\n\n      // Get user's streaming profile\n      const userProfile = await this.getStreamerProfile(criteria.userId);\n      if (!userProfile) {\n        throw new Error(`User streaming profile not found: ${criteria.userId}`);\n      }\n\n      // Get potential streaming partners\n      const candidates = await this.getStreamingCandidates(\n        criteria,\n        userProfile,\n      );\n\n      // Apply AI matching algorithms\n      const matches = await this.calculateStreamingCompatibility(\n        userProfile,\n        candidates,\n        criteria,\n      );\n\n      // Sort by compatibility score and apply final filtering\n      const rankedMatches = matches\n        .sort((a, b) => b.compatibilityScore - a.compatibilityScore)\n        .slice(0, criteria.maxResults || 10);\n\n      // Cache results\n      this.matchingCache.set(cacheKey, rankedMatches);\n      setTimeout(() => this.matchingCache.delete(cacheKey), this.cacheExpiry);\n\n      const duration = Date.now() - startTime;\n      logger.info(\"AI streaming partner matching completed\", {\n        userId: criteria.userId,\n        matchCount: rankedMatches.length,\n        duration: `${duration}ms`,\n        averageScore:\n          rankedMatches.reduce(\n            (sum, match) => sum + match.compatibilityScore,\n            0,\n          ) / rankedMatches.length,\n      });\n\n      return rankedMatches;\n    } catch (error) {\n      logger.error(\"AI streaming partner matching failed\", error, {\n        userId: criteria.userId,\n        criteria,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get comprehensive streamer profile including real-time platform data\n   */\n  async getStreamerProfile(userId: string): Promise<StreamerProfile | null> {\n    try {\n      // Check cache first\n      if (this.profileCache.has(userId)) {\n        const cached = this.profileCache.get(userId);\n        if (cached) {\n          return cached;\n        }\n      }\n\n      // Get user data with error handling\n      const user = await storage.getUser(userId);\n      if (!user) return null;\n\n      // Get streaming preferences and settings with fallbacks\n      let userSettings;\n      let matchingPrefs;\n      try {\n        userSettings = (await storage.getUserSettings?.(userId)) || {};\n        matchingPrefs =\n          (await storage.getMatchmakingPreferences?.(userId)) || {};\n      } catch (error) {\n        logger.warn(\"Settings/preferences not available, using defaults\", {\n          userId,\n          error,\n        });\n        userSettings = {};\n        matchingPrefs = {};\n      }\n\n      // Get real-time platform data\n      const platforms = await this.getConnectedPlatforms(\n        userId,\n        user.username || \"\",\n      );\n\n      // Build comprehensive profile\n      const profile: StreamerProfile = {\n        id: userId,\n        username: user.username || `${user.firstName} ${user.lastName}`,\n        avatar: user.profileImageUrl || undefined,\n        platforms,\n        streamingPreferences: this.extractStreamingPreferences(userSettings),\n        audienceMetrics: await this.calculateAudienceMetrics(platforms),\n        contentPreferences: this.extractContentPreferences(matchingPrefs),\n        availabilitySchedule: this.extractAvailabilitySchedule(\n          user,\n          userSettings,\n        ),\n        collaborationHistory: await this.getCollaborationHistory(userId),\n        matchingPreferences: this.extractMatchingPreferences(\n          matchingPrefs,\n          userSettings,\n        ),\n      };\n\n      // Cache profile\n      this.profileCache.set(userId, profile);\n      setTimeout(() => this.profileCache.delete(userId), this.cacheExpiry);\n\n      return profile;\n    } catch (error) {\n      logger.error(\"Failed to get streamer profile\", error, { userId });\n      return null;\n    }\n  }\n\n  /**\n   * Get real-time connected platform data\n   */\n  private async getConnectedPlatforms(\n    userId: string,\n    username: string,\n  ): Promise<ConnectedPlatform[]> {\n    const platforms: ConnectedPlatform[] = [];\n\n    try {\n      // Check Twitch\n      try {\n        const twitchUser = await twitchAPI.getUser(username);\n        const twitchStream = await twitchAPI.getStream(username);\n\n        platforms.push({\n          platform: \"twitch\",\n          username: twitchUser?.display_name || twitchUser?.login || username,\n          isActive: !!twitchStream && twitchStream.type === \"live\",\n          followerCount: twitchUser?.view_count || 0,\n          averageViewers: twitchStream?.viewer_count || 0,\n          lastStreamDate: twitchStream ? new Date() : undefined,\n          streamQuality: \"720p\",\n        });\n      } catch (error) {\n        logger.debug(\"Twitch platform data not available\", {\n          userId,\n          username,\n          error: error instanceof Error ? error.message : String(error),\n        });\n      }\n\n      // Check YouTube\n      try {\n        const youtubeChannel = await youtubeAPI.getChannel(username);\n        const youtubeLive = await youtubeAPI.getLiveStream(username);\n\n        platforms.push({\n          platform: \"youtube\",\n          username: youtubeChannel?.title || username,\n          isActive: !!youtubeLive && youtubeLive.status === \"live\",\n          followerCount: youtubeChannel?.subscriberCount || 0,\n          averageViewers: youtubeLive?.concurrentViewers || 0,\n          lastStreamDate: youtubeLive ? new Date() : undefined,\n        });\n      } catch (error) {\n        logger.debug(\"YouTube platform data not available\", {\n          userId,\n          username,\n          error: error instanceof Error ? error.message : String(error),\n        });\n      }\n\n      // Check Facebook Gaming\n      try {\n        const facebookLive = await facebookAPI.getLiveVideos(\"\", \"\");\n        if (facebookLive && facebookLive.data && facebookLive.data.length > 0) {\n          const video = facebookLive.data[0];\n          if (video) {\n            platforms.push({\n              platform: \"facebook\",\n              username: video.title || video.description || username,\n              isActive: video.status === \"LIVE\",\n              followerCount: 0,\n              averageViewers: 0,\n              lastStreamDate: new Date(),\n            });\n          }\n        }\n      } catch (error) {\n        logger.debug(\"Facebook Gaming platform data not available\", {\n          userId,\n          username,\n          error: error instanceof Error ? error.message : String(error),\n        });\n      }\n    } catch (error) {\n      logger.error(\"Failed to get connected platforms\", error, {\n        userId,\n        username,\n      });\n    }\n\n    return platforms;\n  }\n\n  /**\n   * Get potential streaming candidates using efficient database queries\n   */\n  private async getStreamingCandidates(\n    criteria: MatchingCriteria,\n    userProfile: StreamerProfile,\n  ): Promise<StreamerProfile[]> {\n    try {\n      // Get basic users first, then build streaming profiles\n      let users: User[] = [];\n      try {\n        // Use getAllUsers method\n        const result = await storage.getAllUsers?.();\n        users = result?.users || [];\n      } catch (error) {\n        logger.warn(\"User lookup not available, using empty list\", { error });\n        users = [];\n      }\n      const streamingCandidates = users\n        .filter((u: User) => u.id !== criteria.userId)\n        .slice(0, 50);\n\n      // Convert to streaming profiles\n      const candidates: StreamerProfile[] = [];\n      for (const user of streamingCandidates) {\n        const profile = await this.getStreamerProfile(user.id);\n        if (profile && profile.platforms.length > 0) {\n          candidates.push(profile);\n        }\n      }\n\n      return candidates;\n    } catch (error) {\n      logger.error(\"Failed to get streaming candidates\", error, {\n        userId: criteria.userId,\n      });\n      return [];\n    }\n  }\n\n  /**\n   * AI algorithm to calculate streaming compatibility scores\n   */\n  private async calculateStreamingCompatibility(\n    userProfile: StreamerProfile,\n    candidates: StreamerProfile[],\n    criteria: MatchingCriteria,\n  ): Promise<StreamerMatch[]> {\n    const matches: StreamerMatch[] = [];\n\n    for (const candidate of candidates) {\n      try {\n        let score = 0;\n        const reasons: string[] = [];\n\n        // 1. Audience Compatibility (25% weight)\n        const audienceScore = this.calculateAudienceCompatibility(\n          userProfile.audienceMetrics,\n          candidate.audienceMetrics,\n        );\n        score += audienceScore * 0.25;\n        if (audienceScore > 70) reasons.push(\"Highly compatible audiences\");\n\n        // 2. Content Synergy (25% weight)\n        const contentScore = this.calculateContentSynergy(\n          userProfile.contentPreferences,\n          candidate.contentPreferences,\n        );\n        score += contentScore * 0.25;\n        if (contentScore > 80) reasons.push(\"Excellent content alignment\");\n\n        // 3. Schedule Alignment (20% weight)\n        const scheduleScore = this.calculateScheduleAlignment(\n          userProfile.availabilitySchedule,\n          candidate.availabilitySchedule,\n        );\n        score += scheduleScore * 0.2;\n        if (scheduleScore > 60) reasons.push(\"Good schedule overlap\");\n\n        // 4. Platform Compatibility (15% weight)\n        const platformScore = this.calculatePlatformCompatibility(\n          userProfile.platforms,\n          candidate.platforms,\n        );\n        score += platformScore * 0.15;\n        if (platformScore > 50) reasons.push(\"Shared streaming platforms\");\n\n        // 5. Collaboration History (10% weight)\n        const historyScore = this.calculateCollaborationScore(\n          candidate.collaborationHistory,\n        );\n        score += historyScore * 0.1;\n        if (historyScore > 80)\n          reasons.push(\"Excellent collaboration track record\");\n\n        // 6. Real-time factors (5% weight)\n        const realtimeScore = this.calculateRealtimeFactors(\n          userProfile,\n          candidate,\n        );\n        score += realtimeScore * 0.05;\n\n        // Only include matches above threshold\n        if (score >= 40) {\n          const match: StreamerMatch = {\n            partnerId: candidate.id,\n            profile: candidate,\n            compatibilityScore: Math.round(score),\n            matchReasons: reasons,\n            suggestedCollaborationType: this.suggestCollaborationType(\n              userProfile,\n              candidate,\n            ),\n            scheduledTimeSlots: this.findCommonTimeSlots(\n              userProfile.availabilitySchedule,\n              candidate.availabilitySchedule,\n            ),\n            audienceOverlapPotential: this.calculateAudienceOverlap(\n              userProfile.audienceMetrics,\n              candidate.audienceMetrics,\n            ),\n            contentSynergyScore: Math.round(contentScore),\n            availabilityMatch: Math.round(scheduleScore),\n            platformCompatibility: this.getSharedPlatforms(\n              userProfile.platforms,\n              candidate.platforms,\n            ),\n            estimatedViewerBoost: this.estimateViewerBoost(\n              userProfile.audienceMetrics,\n              candidate.audienceMetrics,\n            ),\n          };\n\n          matches.push(match);\n        }\n      } catch (error) {\n        logger.error(\"Failed to calculate compatibility for candidate\", error, {\n          userId: userProfile.id,\n          candidateId: candidate.id,\n        });\n      }\n    }\n\n    return matches;\n  }\n\n  // Compatibility calculation methods\n  private calculateAudienceCompatibility(\n    user: AudienceMetrics,\n    candidate: AudienceMetrics,\n  ): number {\n    let score = 0;\n\n    // Audience size compatibility\n    const sizeRatio =\n      Math.min(user.totalFollowers, candidate.totalFollowers) /\n      Math.max(user.totalFollowers, candidate.totalFollowers);\n    score += sizeRatio * 30;\n\n    // Engagement compatibility\n    const engagementDiff = Math.abs(\n      user.engagementRate - candidate.engagementRate,\n    );\n    score += Math.max(0, 100 - engagementDiff) * 0.3;\n\n    // Age group compatibility\n    if (user.audienceAge === candidate.audienceAge) score += 20;\n\n    // Regional overlap\n    const sharedRegions = user.audienceRegions.filter((region) =>\n      candidate.audienceRegions.includes(region),\n    );\n    score +=\n      (sharedRegions.length /\n        Math.max(\n          user.audienceRegions.length,\n          candidate.audienceRegions.length,\n        )) *\n      20;\n\n    return Math.min(score, 100);\n  }\n\n  private calculateContentSynergy(\n    user: ContentPreferences,\n    candidate: ContentPreferences,\n  ): number {\n    let score = 0;\n\n    // Shared primary games\n    const sharedPrimary = user.primaryGames.filter((game) =>\n      candidate.primaryGames.includes(game),\n    );\n    score +=\n      (sharedPrimary.length / Math.max(user.primaryGames.length, 1)) * 40;\n\n    // Complementary games\n    const sharedSecondary = user.secondaryGames.filter((game) =>\n      candidate.secondaryGames.includes(game),\n    );\n    score +=\n      (sharedSecondary.length / Math.max(user.secondaryGames.length, 1)) * 20;\n\n    // Content type alignment\n    const sharedTypes = user.contentTypes.filter((type) =>\n      candidate.contentTypes.includes(type),\n    );\n    score += (sharedTypes.length / Math.max(user.contentTypes.length, 1)) * 25;\n\n    // Collaboration type compatibility\n    const sharedCollabTypes = user.collabTypes.filter((type) =>\n      candidate.collabTypes.includes(type),\n    );\n    score +=\n      (sharedCollabTypes.length / Math.max(user.collabTypes.length, 1)) * 15;\n\n    return Math.min(score, 100);\n  }\n\n  private calculateScheduleAlignment(\n    user: AvailabilitySchedule,\n    candidate: AvailabilitySchedule,\n  ): number {\n    let score = 0;\n    let totalSlots = 0;\n    let matchingSlots = 0;\n\n    // Check each day for overlapping time slots\n    Object.keys(user.weeklySchedule).forEach((day) => {\n      const userDay =\n        user.weeklySchedule[day as keyof typeof user.weeklySchedule];\n      const candidateDay =\n        candidate.weeklySchedule[day as keyof typeof candidate.weeklySchedule];\n\n      if (userDay.available && candidateDay.available) {\n        totalSlots += userDay.timeSlots.length;\n\n        // Check for time slot overlaps\n        userDay.timeSlots.forEach((userSlot) => {\n          candidateDay.timeSlots.forEach((candidateSlot) => {\n            if (this.timeSlotsOverlap(userSlot, candidateSlot)) {\n              matchingSlots++;\n            }\n          });\n        });\n      }\n    });\n\n    if (totalSlots > 0) {\n      score = (matchingSlots / totalSlots) * 100;\n    }\n\n    // Timezone adjustment bonus/penalty\n    const timezoneScore = this.calculateTimezoneCompatibility(\n      user.timezone,\n      candidate.timezone,\n    );\n    score = score * 0.7 + timezoneScore * 0.3;\n\n    return Math.min(score, 100);\n  }\n\n  private calculatePlatformCompatibility(\n    userPlatforms: ConnectedPlatform[],\n    candidatePlatforms: ConnectedPlatform[],\n  ): number {\n    const userPlatformNames = userPlatforms\n      .filter((p) => p.isActive)\n      .map((p) => p.platform);\n    const candidatePlatformNames = candidatePlatforms\n      .filter((p) => p.isActive)\n      .map((p) => p.platform);\n\n    const sharedPlatforms = userPlatformNames.filter((platform) =>\n      candidatePlatformNames.includes(platform),\n    );\n    const totalUniquePlatforms = new Set([\n      ...userPlatformNames,\n      ...candidatePlatformNames,\n    ]).size;\n\n    if (totalUniquePlatforms === 0) return 0;\n    return (sharedPlatforms.length / totalUniquePlatforms) * 100;\n  }\n\n  private calculateCollaborationScore(history: CollaborationHistory): number {\n    let score = 0;\n\n    // Success rate\n    if (history.totalCollaborations > 0) {\n      const successRate =\n        (history.successfulCollaborations / history.totalCollaborations) * 100;\n      score += successRate * 0.4;\n    } else {\n      score += 50; // Neutral for new streamers\n    }\n\n    // Average rating\n    score += (history.averageRating / 5) * 30;\n\n    // No-show penalty\n    score -= history.noShowRate * 0.2;\n\n    // Recent activity bonus\n    if (\n      history.lastCollaboration &&\n      Date.now() - history.lastCollaboration.getTime() <\n        30 * 24 * 60 * 60 * 1000\n    ) {\n      score += 10;\n    }\n\n    return Math.max(0, Math.min(score, 100));\n  }\n\n  private calculateRealtimeFactors(\n    user: StreamerProfile,\n    candidate: StreamerProfile,\n  ): number {\n    let score = 50; // Base score\n\n    // Currently streaming bonus\n    const userStreaming = user.platforms.some((p) => p.isActive);\n    const candidateStreaming = candidate.platforms.some((p) => p.isActive);\n\n    if (userStreaming && candidateStreaming) score += 30;\n    else if (userStreaming || candidateStreaming) score += 15;\n\n    // Recent activity bonus\n    const recentThreshold = 24 * 60 * 60 * 1000; // 24 hours\n    const hasRecentActivity = candidate.platforms.some(\n      (p) =>\n        p.lastStreamDate &&\n        Date.now() - p.lastStreamDate.getTime() < recentThreshold,\n    );\n\n    if (hasRecentActivity) score += 20;\n\n    return Math.min(score, 100);\n  }\n\n  // Helper methods for match details\n  private suggestCollaborationType(\n    user: StreamerProfile,\n    candidate: StreamerProfile,\n  ): string {\n    const sharedGames = user.contentPreferences.primaryGames.filter((game) =>\n      candidate.contentPreferences.primaryGames.includes(game),\n    );\n\n    if (sharedGames.length > 0) {\n      return \"Co-operative gameplay stream\";\n    }\n\n    const sharedTypes = user.contentPreferences.collabTypes.filter((type) =>\n      candidate.contentPreferences.collabTypes.includes(type),\n    );\n\n    if (sharedTypes.includes(\"tournament\")) return \"Tournament collaboration\";\n    if (sharedTypes.includes(\"teaching\")) return \"Teaching/Learning stream\";\n    if (sharedTypes.includes(\"versus\")) return \"Competitive matchup\";\n    if (sharedTypes.includes(\"casual_chat\")) return \"Casual chat collaboration\";\n\n    return \"Cross-community collaboration\";\n  }\n\n  private findCommonTimeSlots(\n    user: AvailabilitySchedule,\n    candidate: AvailabilitySchedule,\n  ): string[] {\n    const commonSlots: string[] = [];\n\n    Object.keys(user.weeklySchedule).forEach((day) => {\n      const userDay =\n        user.weeklySchedule[day as keyof typeof user.weeklySchedule];\n      const candidateDay =\n        candidate.weeklySchedule[day as keyof typeof candidate.weeklySchedule];\n\n      if (userDay.available && candidateDay.available) {\n        userDay.timeSlots.forEach((userSlot) => {\n          candidateDay.timeSlots.forEach((candidateSlot) => {\n            if (this.timeSlotsOverlap(userSlot, candidateSlot)) {\n              commonSlots.push(\n                `${day}: ${this.calculateOverlapTime(userSlot, candidateSlot)}`,\n              );\n            }\n          });\n        });\n      }\n    });\n\n    return commonSlots;\n  }\n\n  private calculateAudienceOverlap(\n    user: AudienceMetrics,\n    candidate: AudienceMetrics,\n  ): number {\n    const sharedRegions = user.audienceRegions.filter((region) =>\n      candidate.audienceRegions.includes(region),\n    );\n    const totalRegions = new Set([\n      ...user.audienceRegions,\n      ...candidate.audienceRegions,\n    ]).size;\n\n    if (totalRegions === 0) return 0;\n    return Math.round((sharedRegions.length / totalRegions) * 100);\n  }\n\n  private getSharedPlatforms(\n    user: ConnectedPlatform[],\n    candidate: ConnectedPlatform[],\n  ): string[] {\n    const userPlatforms = user.filter((p) => p.isActive).map((p) => p.platform);\n    const candidatePlatforms = candidate\n      .filter((p) => p.isActive)\n      .map((p) => p.platform);\n\n    return userPlatforms.filter((platform) =>\n      candidatePlatforms.includes(platform),\n    );\n  }\n\n  private estimateViewerBoost(\n    user: AudienceMetrics,\n    candidate: AudienceMetrics,\n  ): number {\n    // Conservative estimate: 10-30% of smaller audience might cross over\n    const smallerAudience = Math.min(\n      user.averageViewers,\n      candidate.averageViewers,\n    );\n    const crossoverRate = 0.15; // 15% average crossover rate\n\n    return Math.round(smallerAudience * crossoverRate);\n  }\n\n  // Utility methods\n  private timeSlotsOverlap(slot1: string, slot2: string): boolean {\n    const [start1, end1] = slot1.split(\"-\").map((t) => this.timeToMinutes(t));\n    const [start2, end2] = slot2.split(\"-\").map((t) => this.timeToMinutes(t));\n\n    if (\n      start1 === undefined ||\n      end1 === undefined ||\n      start2 === undefined ||\n      end2 === undefined\n    ) {\n      return false;\n    }\n\n    return Math.max(start1, start2) < Math.min(end1, end2);\n  }\n\n  private calculateOverlapTime(slot1: string, slot2: string): string {\n    const [start1, end1] = slot1.split(\"-\").map((t) => this.timeToMinutes(t));\n    const [start2, end2] = slot2.split(\"-\").map((t) => this.timeToMinutes(t));\n\n    if (\n      start1 === undefined ||\n      end1 === undefined ||\n      start2 === undefined ||\n      end2 === undefined\n    ) {\n      return \"\";\n    }\n\n    const overlapStart = Math.max(start1, start2);\n    const overlapEnd = Math.min(end1, end2);\n\n    return `${this.minutesToTime(overlapStart)}-${this.minutesToTime(overlapEnd)}`;\n  }\n\n  private timeToMinutes(time: string): number {\n    const parts = time.split(\":\").map(Number);\n    const hours = parts[0];\n    const minutes = parts[1];\n\n    if (hours === undefined || minutes === undefined) {\n      throw new Error(`Invalid time format: ${time}`);\n    }\n\n    return hours * 60 + minutes;\n  }\n\n  private minutesToTime(minutes: number): string {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours.toString().padStart(2, \"0\")}:${mins.toString().padStart(2, \"0\")}`;\n  }\n\n  private calculateTimezoneCompatibility(tz1: string, tz2: string): number {\n    // Simplified timezone compatibility scoring\n    if (tz1 === tz2) return 100;\n\n    // Add actual timezone offset calculation here\n    // For now, return moderate compatibility for different timezones\n    return 60;\n  }\n\n  private generateCacheKey(criteria: MatchingCriteria): string {\n    return `streaming_match_${criteria.userId}_${JSON.stringify(criteria)}`;\n  }\n\n  // Data extraction methods\n  private extractStreamingPreferences(userSettings: any): StreamingPreferences {\n    const streamingSettings = userSettings?.streamingSettings || {};\n\n    return {\n      preferredStreamTimes: streamingSettings.preferredTimes || [\"19:00-22:00\"],\n      streamFrequency: streamingSettings.frequency || \"weekly\",\n      streamDuration: streamingSettings.duration || 120,\n      contentRating: streamingSettings.contentRating || \"family_friendly\",\n      interactionStyle: streamingSettings.interactionStyle || \"chill\",\n      chatModeration: streamingSettings.chatModeration || \"moderate\",\n    };\n  }\n\n  private async calculateAudienceMetrics(\n    platforms: ConnectedPlatform[],\n  ): Promise<AudienceMetrics> {\n    const totalFollowers = platforms.reduce(\n      (sum, p) => sum + (p.followerCount || 0),\n      0,\n    );\n    const avgViewers = platforms.reduce(\n      (sum, p) => sum + (p.averageViewers || 0),\n      0,\n    );\n\n    return {\n      totalFollowers,\n      averageViewers: avgViewers,\n      peakViewers: Math.round(avgViewers * 1.5),\n      audienceAge: \"young_adult\", // Default, could be enhanced with real data\n      audienceRegions: [\"US\", \"EU\"], // Default, could be enhanced with real data\n      engagementRate: Math.min(75, Math.max(25, Math.random() * 50 + 25)), // Simulated\n      retentionRate: Math.min(85, Math.max(40, Math.random() * 45 + 40)), // Simulated\n      chatActivity:\n        avgViewers > 100 ? \"high\" : avgViewers > 50 ? \"medium\" : \"low\",\n    };\n  }\n\n  private extractContentPreferences(matchingPrefs: any): ContentPreferences {\n    return {\n      primaryGames: matchingPrefs?.selectedGames || [\"MTG\"],\n      secondaryGames: matchingPrefs?.selectedFormats || [],\n      contentTypes: [\"gameplay\", \"casual\"],\n      collabTypes: [\"co_op\", \"casual_chat\"],\n      avoidedContent: [],\n    };\n  }\n\n  private extractAvailabilitySchedule(\n    user: any,\n    userSettings: any,\n  ): AvailabilitySchedule {\n    const defaultSchedule = {\n      available: true,\n      timeSlots: [\"19:00-22:00\"],\n    };\n\n    return {\n      timezone: user.timezone || \"UTC\",\n      weeklySchedule: {\n        monday: defaultSchedule,\n        tuesday: defaultSchedule,\n        wednesday: defaultSchedule,\n        thursday: defaultSchedule,\n        friday: defaultSchedule,\n        saturday: {\n          available: true,\n          timeSlots: [\"14:00-17:00\", \"19:00-22:00\"],\n        },\n        sunday: { available: true, timeSlots: [\"14:00-17:00\", \"19:00-22:00\"] },\n      },\n      advanceNotice: 24,\n      maxCollabsPerWeek: 3,\n    };\n  }\n\n  private async getCollaborationHistory(\n    userId: string,\n  ): Promise<CollaborationHistory> {\n    try {\n      // Get collaboration requests history\n      // Simplified collaboration history for now\n      const requests: any[] = [];\n\n      return {\n        totalCollaborations: requests.length,\n        successfulCollaborations: Math.round(requests.length * 0.8), // 80% success rate average\n        averageRating: 4.2, // Default good rating\n        preferredPartnerTypes: [\"content_creator\", \"gamer\"],\n        lastCollaboration: requests.length > 0 ? new Date() : undefined,\n        noShowRate: 5, // 5% no-show rate\n      };\n    } catch (error) {\n      logger.error(\"Failed to get collaboration history\", error, { userId });\n      return {\n        totalCollaborations: 0,\n        successfulCollaborations: 0,\n        averageRating: 4.0,\n        preferredPartnerTypes: [],\n        noShowRate: 0,\n      };\n    }\n  }\n\n  private extractMatchingPreferences(\n    matchingPrefs: any,\n    userSettings: any,\n  ): StreamingMatchPreferences {\n    return {\n      audienceSizeCompatibility: \"similar\",\n      contentSynergy: \"same_games\",\n      collaborationFrequency: \"occasional\",\n      partnershipGoals: [\"audience_growth\", \"fun\"],\n      excludeCompetitors: false,\n      minimumRating: 3.0,\n      geoPreference: \"global\",\n    };\n  }\n\n  /**\n   * Get real-time streaming recommendations for immediate collaboration\n   */\n  async getRealtimeMatches(userId: string): Promise<StreamerMatch[]> {\n    return this.findStreamingPartners({\n      userId,\n      urgency: \"high\",\n      maxResults: 5,\n    });\n  }\n\n  /**\n   * Get scheduled collaboration opportunities\n   */\n  async getScheduledMatches(\n    userId: string,\n    timeSlot?: string,\n  ): Promise<StreamerMatch[]> {\n    return this.findStreamingPartners({\n      userId,\n      timeSlots: timeSlot ? [timeSlot] : undefined,\n      urgency: \"medium\",\n      maxResults: 10,\n    });\n  }\n\n  /**\n   * Clear caches (for testing or admin purposes)\n   */\n  clearCaches(): void {\n    this.matchingCache.clear();\n    this.profileCache.clear();\n    logger.info(\"AI streaming matcher caches cleared\");\n  }\n}\n\n// Export singleton instance\nexport const aiStreamingMatcher = AIStreamingMatcher.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/analytics-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserActivityAnalytics' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CommunityAnalytics' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PlatformMetrics' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EventTracking' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ConversionFunnel' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StreamAnalytics' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InsertUserActivityAnalytics' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Community' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[653,656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[653,656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[788,791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[788,791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3761,3764],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3761,3764],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":325,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":325,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8981,8984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8981,8984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":326,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":326,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9009,9012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9009,9012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":327,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":327,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9038,9041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9038,9041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":328,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":328,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9065,9068],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9065,9068],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":329,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9089,9092],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9089,9092],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":399,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":399,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10856,10859],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10856,10859],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":400,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":400,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10889,10892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10889,10892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":450,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":450,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12349,12352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12349,12352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":451,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":451,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12384,12387],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12384,12387],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'endTime' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":478,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":478,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'communityId' is defined but never used. Allowed unused args must match /^_/u.","line":500,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":500,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":522,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":522,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'startDate' is defined but never used. Allowed unused args must match /^_/u.","line":523,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":523,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":524,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":524,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14870,14873],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14870,14873],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'communityId' is defined but never used. Allowed unused args must match /^_/u.","line":530,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":530,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'startDate' is defined but never used. Allowed unused args must match /^_/u.","line":531,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":531,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":532,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":532,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15044,15047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15044,15047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'communityId' is defined but never used. Allowed unused args must match /^_/u.","line":538,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":538,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'startDate' is defined but never used. Allowed unused args must match /^_/u.","line":539,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":539,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":540,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":540,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15215,15218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15215,15218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'startDate' is defined but never used. Allowed unused args must match /^_/u.","line":545,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":545,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":545,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":545,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15349,15352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15349,15352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used. Allowed unused args must match /^_/u.","line":550,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":550,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":550,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":550,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15456,15459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15456,15459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":550,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":550,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15462,15465],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15462,15465],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":555,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":555,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15590,15593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15590,15593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":566,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":566,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":566,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":566,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15851,15854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15851,15854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":571,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":571,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":571,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":571,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15988,15991],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15988,15991],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'activityData' is defined but never used. Allowed unused args must match /^_/u.","line":577,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":577,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":577,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":577,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16104,16107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16104,16107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'engagementMetrics' is defined but never used. Allowed unused args must match /^_/u.","line":578,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":578,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":578,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":578,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16134,16137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16134,16137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'collaborationData' is defined but never used. Allowed unused args must match /^_/u.","line":579,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":579,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":579,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":579,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16162,16165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16162,16165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":580,"column":6,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":580,"endColumn":9,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16174,16177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16174,16177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":49,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { storage } from \"../storage\";\nimport { logger } from \"../logger\";\nimport type {\n  UserActivityAnalytics,\n  CommunityAnalytics,\n  PlatformMetrics,\n  EventTracking,\n  ConversionFunnel,\n  StreamAnalytics,\n  InsertUserActivityAnalytics,\n  InsertCommunityAnalytics,\n  InsertPlatformMetrics,\n  InsertEventTracking,\n  InsertConversionFunnel,\n  User,\n  Community,\n} from \"@shared/schema\";\n\n/**\n * Analytics event data structures\n */\nexport interface AnalyticsEvent {\n  userId?: string;\n  sessionId?: string;\n  eventName: string;\n  eventCategory: string;\n  eventAction: string;\n  eventLabel?: string;\n  eventValue?: number;\n  properties?: Record<string, any>;\n  context?: {\n    userAgent?: string;\n    ipAddress?: string;\n    pageUrl?: string;\n    referrerUrl?: string;\n    [key: string]: any;\n  };\n}\n\nexport interface StreamMetrics {\n  sessionId: string;\n  platform: string;\n  viewerCount: number;\n  chatMessageCount?: number;\n  followersGained?: number;\n  subscriptionsGained?: number;\n  streamQuality?: string;\n  frameDrops?: number;\n  bitrate?: number;\n}\n\nexport interface CommunityMetrics {\n  communityId: string;\n  activeUsers: number;\n  newMembers: number;\n  streamsStarted: number;\n  totalStreamTime: number;\n  collaborationsCreated: number;\n  tournamentsCreated: number;\n  forumPosts: number;\n  forumReplies: number;\n  avgSessionDuration: number;\n}\n\nexport interface SystemMetrics {\n  metricType: \"performance\" | \"usage\" | \"system\" | \"error\" | \"business\";\n  metricName: string;\n  metricValue: number;\n  metricUnit?: string;\n  aggregationType: \"avg\" | \"sum\" | \"max\" | \"min\" | \"count\" | \"percentile\";\n  timeWindow: \"1m\" | \"5m\" | \"15m\" | \"1h\" | \"6h\" | \"1d\" | \"7d\" | \"30d\";\n  tags?: Record<string, string>;\n}\n\n/**\n * Comprehensive analytics service for tracking user behavior, system metrics, and business intelligence\n */\nexport class AnalyticsService {\n  private readonly eventQueue: AnalyticsEvent[] = [];\n  private readonly metricsQueue: SystemMetrics[] = [];\n  private isProcessing = false;\n\n  /**\n   * Track user activity and behavior analytics\n   */\n  async trackEvent(event: AnalyticsEvent): Promise<void> {\n    try {\n      const eventData: InsertEventTracking = {\n        userId: event.userId,\n        eventName: event.eventName,\n        eventCategory: event.eventCategory,\n        sessionId: event.sessionId || this.generateSessionId(),\n        ipAddress: event.context?.ipAddress,\n        userAgent: event.context?.userAgent,\n        eventProperties: JSON.stringify({\n          eventAction: event.eventAction,\n          eventLabel: event.eventLabel,\n          eventValue: event.eventValue,\n          properties: event.properties,\n          context: event.context,\n        }),\n      };\n\n      await storage.recordEventTracking(eventData);\n\n      // Also add to generic event tracking for cross-platform analysis\n      await this.trackGenericEvent({\n        userId: event.userId,\n        eventName: event.eventName,\n        eventSource: \"web\",\n        properties: event.properties,\n        context: event.context,\n      });\n\n      logger.info(\"User event tracked\", {\n        userId: event.userId,\n        eventName: event.eventName,\n        eventCategory: event.eventCategory,\n      });\n    } catch (error) {\n      logger.error(\"Failed to track user event\", {\n        error,\n        userId: event.userId,\n        eventName: event.eventName,\n        eventCategory: event.eventCategory,\n      });\n      // Add to queue for retry\n      this.eventQueue.push(event);\n    }\n  }\n\n  /**\n   * Track conversion funnel progression\n   */\n  async trackFunnelStep(\n    funnelName: string,\n    stepName: string,\n    stepOrder: number,\n    userId: string,\n    sessionId: string,\n    completed: boolean = true,\n    timeSpent?: number,\n    metadata?: Record<string, any>,\n  ): Promise<void> {\n    try {\n      const funnelData: InsertConversionFunnel = {\n        funnelName,\n        stepName,\n        stepOrder,\n        userId,\n        sessionId,\n        completed,\n        completedAt: completed ? new Date() : undefined,\n        metadata: JSON.stringify({\n          timeSpent,\n          ...(metadata || {}),\n        }),\n      };\n\n      await storage.recordConversionFunnel(funnelData);\n\n      logger.info(\"Funnel step tracked\", {\n        funnelName,\n        stepName,\n        userId,\n        completed,\n      });\n    } catch (error) {\n      logger.error(\"Failed to track funnel step\", {\n        error,\n        funnelName,\n        stepName,\n        userId,\n      });\n    }\n  }\n\n  /**\n   * Track streaming session metrics in real-time\n   */\n  async trackStreamMetrics(metrics: StreamMetrics): Promise<void> {\n    try {\n      await storage.recordStreamAnalytics({\n        sessionId: metrics.sessionId,\n        userId: metrics.platform, // TODO: This should be actual userId, needs to be passed in StreamMetrics\n        platform: metrics.platform as\n          | \"twitch\"\n          | \"youtube\"\n          | \"facebook\"\n          | \"discord\",\n        viewerCount: metrics.viewerCount,\n        chatMessages: metrics.chatMessageCount || 0,\n        // Note: followersGained, subscriptionsGained, streamQuality, frameDrops, bitrate\n        // are not in the schema and would need to be added if needed\n      });\n\n      logger.info(\"Stream metrics recorded\", {\n        sessionId: metrics.sessionId,\n        platform: metrics.platform,\n        viewerCount: metrics.viewerCount,\n      });\n    } catch (error) {\n      logger.error(\"Failed to track stream metrics\", {\n        error,\n        sessionId: metrics.sessionId,\n        platform: metrics.platform,\n        viewerCount: metrics.viewerCount,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Aggregate and record community-level analytics\n   */\n  async aggregateCommunityMetrics(\n    communityId: string,\n    date: Date,\n    hour?: number,\n  ): Promise<void> {\n    try {\n      if (!date) {\n        throw new Error(\"Date parameter is required\");\n      }\n\n      const metrics = await this.calculateCommunityMetrics(\n        communityId,\n        date,\n        hour,\n      );\n\n      // Store metrics as separate records for each metric type\n      const metricsToStore = [\n        { metricType: \"active_users\", value: metrics.activeUsers },\n        { metricType: \"new_members\", value: metrics.newMembers },\n        { metricType: \"streams_started\", value: metrics.streamsStarted },\n        { metricType: \"total_stream_time\", value: metrics.totalStreamTime },\n        {\n          metricType: \"collaborations_created\",\n          value: metrics.collaborationsCreated,\n        },\n        {\n          metricType: \"tournaments_created\",\n          value: metrics.tournamentsCreated,\n        },\n        { metricType: \"forum_posts\", value: metrics.forumPosts },\n        { metricType: \"forum_replies\", value: metrics.forumReplies },\n      ];\n\n      for (const metric of metricsToStore) {\n        const communityAnalytics: InsertCommunityAnalytics = {\n          communityId,\n          metricType: metric.metricType,\n          value: metric.value ?? 0,\n          date: date.toISOString().split(\"T\")[0] || date.toISOString(), // YYYY-MM-DD format\n          metadata: JSON.stringify({\n            calculatedAt: new Date().toISOString(),\n            hour,\n            avgSessionDuration: metrics.avgSessionDuration,\n          }),\n        };\n\n        await storage.recordCommunityAnalytics(communityAnalytics);\n      }\n\n      logger.info(\"Community metrics aggregated\", {\n        communityId,\n        date: date.toISOString().split(\"T\")[0],\n        hour,\n        activeUsers: metrics.activeUsers,\n      });\n    } catch (error) {\n      logger.error(\"Failed to aggregate community metrics\", {\n        error,\n        communityId,\n        date,\n      });\n    }\n  }\n\n  /**\n   * Record system performance and health metrics\n   */\n  async recordSystemMetrics(metrics: SystemMetrics): Promise<void> {\n    try {\n      const platformMetrics: InsertPlatformMetrics = {\n        metricType: metrics.metricType,\n        metricName: metrics.metricName,\n        metricValue: metrics.metricValue,\n        tags: JSON.stringify({\n          metricUnit: metrics.metricUnit,\n          aggregationType: metrics.aggregationType,\n          timeWindow: metrics.timeWindow,\n          ...(metrics.tags || {}),\n        }),\n      };\n\n      await storage.recordPlatformMetrics(platformMetrics);\n\n      logger.debug(\"System metrics recorded\", {\n        metricType: metrics.metricType,\n        metricName: metrics.metricName,\n        metricValue: metrics.metricValue,\n      });\n    } catch (error) {\n      logger.error(\"Failed to record system metrics\", {\n        error,\n        metricType: metrics.metricType,\n        metricName: metrics.metricName,\n        metricValue: metrics.metricValue,\n      });\n      // Add to queue for retry\n      this.metricsQueue.push(metrics);\n    }\n  }\n\n  /**\n   * Generate analytics dashboard data\n   */\n  async generateDashboardData(\n    userId?: string,\n    communityId?: string,\n    timeframe: \"24h\" | \"7d\" | \"30d\" | \"90d\" = \"7d\",\n  ): Promise<{\n    userActivity: any[];\n    communityGrowth: any[];\n    streamingMetrics: any[];\n    platformHealth: any[];\n    keyInsights: any[];\n  }> {\n    try {\n      const startDate = this.getTimeframeStartDate(timeframe);\n\n      const [userActivity, communityGrowth, streamingMetrics, platformHealth] =\n        await Promise.all([\n          this.getUserActivityInsights(userId, startDate),\n          this.getCommunityGrowthInsights(communityId, startDate),\n          this.getStreamingInsights(communityId, startDate),\n          this.getPlatformHealthInsights(startDate),\n        ]);\n\n      const keyInsights = this.generateKeyInsights({\n        userActivity,\n        communityGrowth,\n        streamingMetrics,\n        platformHealth,\n      });\n\n      return {\n        userActivity,\n        communityGrowth,\n        streamingMetrics,\n        platformHealth,\n        keyInsights,\n      };\n    } catch (error) {\n      logger.error(\"Failed to generate dashboard data\", {\n        error,\n        userId,\n        communityId,\n        timeframe,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get real-time platform statistics\n   */\n  async getRealTimeStats(): Promise<{\n    activeUsers: number;\n    liveStreams: number;\n    totalViewers: number;\n    activeCommunities: number;\n    eventsToday: number;\n  }> {\n    try {\n      const stats = await this.calculateRealTimeStats();\n      return stats;\n    } catch (error) {\n      logger.error(\"Failed to get real-time stats\", { error });\n      return {\n        activeUsers: 0,\n        liveStreams: 0,\n        totalViewers: 0,\n        activeCommunities: 0,\n        eventsToday: 0,\n      };\n    }\n  }\n\n  /**\n   * Generate user behavior insights and recommendations\n   */\n  async generateUserInsights(userId: string): Promise<{\n    engagementLevel: \"low\" | \"medium\" | \"high\";\n    preferredFeatures: string[];\n    recommendedActions: string[];\n    activityPattern: any[];\n    collaborationHistory: any[];\n  }> {\n    try {\n      const [activityData, engagementMetrics, collaborationData] =\n        await Promise.all([\n          storage.getUserActivityAnalytics(userId, 30), // Last 30 days\n          this.calculateUserEngagement(userId),\n          this.getUserCollaborationHistory(userId),\n        ]);\n\n      const insights = this.analyzeUserBehavior(\n        activityData,\n        engagementMetrics,\n        collaborationData,\n      );\n      return insights;\n    } catch (error) {\n      logger.error(\"Failed to generate user insights\", { error, userId });\n      throw error;\n    }\n  }\n\n  // Private helper methods\n  private categorizeEventType(\n    eventName: string,\n  ):\n    | \"page_view\"\n    | \"feature_usage\"\n    | \"interaction\"\n    | \"navigation\"\n    | \"form_submit\" {\n    if (eventName.includes(\"page_\") || eventName.includes(\"route_\"))\n      return \"page_view\";\n    if (eventName.includes(\"form_\") || eventName.includes(\"submit\"))\n      return \"form_submit\";\n    if (eventName.includes(\"click_\") || eventName.includes(\"scroll\"))\n      return \"interaction\";\n    if (eventName.includes(\"nav_\") || eventName.includes(\"menu\"))\n      return \"navigation\";\n    return \"feature_usage\";\n  }\n\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private async trackGenericEvent(event: {\n    userId?: string;\n    eventName: string;\n    eventSource: string;\n    properties?: Record<string, any>;\n    context?: Record<string, any>;\n  }): Promise<void> {\n    const eventData: InsertEventTracking = {\n      userId: event.userId,\n      eventName: event.eventName,\n      eventCategory: event.eventSource,\n      eventProperties: JSON.stringify({\n        anonymousId: event.userId ? undefined : this.generateSessionId(),\n        properties: event.properties,\n        traits: event.context,\n        context: event.context,\n      }),\n    };\n\n    await storage.recordEventTracking(eventData);\n  }\n\n  private async calculateCommunityMetrics(\n    communityId: string,\n    date: Date,\n    hour?: number,\n  ): Promise<CommunityMetrics> {\n    const startTime =\n      hour !== undefined\n        ? new Date(date.getFullYear(), date.getMonth(), date.getDate(), hour)\n        : new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\n    const endTime =\n      hour !== undefined\n        ? new Date(startTime.getTime() + 60 * 60 * 1000) // 1 hour\n        : new Date(startTime.getTime() + 24 * 60 * 60 * 1000); // 1 day\n\n    // Calculate metrics for the time period\n    // This would involve complex queries to aggregate data\n    // For now, return mock data structure\n    return {\n      communityId,\n      activeUsers: 0, // Count unique users active in time period\n      newMembers: 0, // Count new community joins\n      streamsStarted: 0, // Count streams initiated\n      totalStreamTime: 0, // Sum of streaming minutes\n      collaborationsCreated: 0, // Count collaboration requests\n      tournamentsCreated: 0, // Count tournaments created\n      forumPosts: 0, // Count forum posts\n      forumReplies: 0, // Count forum replies\n      avgSessionDuration: 0, // Average user session length\n    };\n  }\n\n  private async getCommunityMemberCount(communityId: string): Promise<number> {\n    // Get total members in community\n    return 0; // Implement actual count\n  }\n\n  private getTimeframeStartDate(timeframe: \"24h\" | \"7d\" | \"30d\" | \"90d\"): Date {\n    const now = new Date();\n    switch (timeframe) {\n      case \"24h\":\n        return new Date(now.getTime() - 24 * 60 * 60 * 1000);\n      case \"7d\":\n        return new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      case \"30d\":\n        return new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n      case \"90d\":\n        return new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);\n      default:\n        return new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n    }\n  }\n\n  private async getUserActivityInsights(\n    userId?: string,\n    startDate?: Date,\n  ): Promise<any[]> {\n    // Implement user activity insights\n    return [];\n  }\n\n  private async getCommunityGrowthInsights(\n    communityId?: string,\n    startDate?: Date,\n  ): Promise<any[]> {\n    // Implement community growth insights\n    return [];\n  }\n\n  private async getStreamingInsights(\n    communityId?: string,\n    startDate?: Date,\n  ): Promise<any[]> {\n    // Implement streaming insights\n    return [];\n  }\n\n  private async getPlatformHealthInsights(startDate?: Date): Promise<any[]> {\n    // Implement platform health insights\n    return [];\n  }\n\n  private generateKeyInsights(data: any): any[] {\n    // Generate key insights from aggregated data\n    return [];\n  }\n\n  private async calculateRealTimeStats(): Promise<any> {\n    // Calculate real-time platform statistics\n    return {\n      activeUsers: 0,\n      liveStreams: 0,\n      totalViewers: 0,\n      activeCommunities: 0,\n      eventsToday: 0,\n    };\n  }\n\n  private async calculateUserEngagement(userId: string): Promise<any> {\n    // Calculate user engagement metrics\n    return {};\n  }\n\n  private async getUserCollaborationHistory(userId: string): Promise<any[]> {\n    // Get user collaboration history\n    return [];\n  }\n\n  private analyzeUserBehavior(\n    activityData: any[],\n    engagementMetrics: any,\n    collaborationData: any[],\n  ): any {\n    // Analyze user behavior and generate insights\n    return {\n      engagementLevel: \"medium\",\n      preferredFeatures: [],\n      recommendedActions: [],\n      activityPattern: [],\n      collaborationHistory: [],\n    };\n  }\n\n  /**\n   * Process queued events and metrics\n   */\n  async processQueue(): Promise<void> {\n    if (this.isProcessing) return;\n\n    this.isProcessing = true;\n    try {\n      // Process event queue\n      while (this.eventQueue.length > 0) {\n        const event = this.eventQueue.shift();\n        if (event) {\n          await this.trackEvent(event);\n        }\n      }\n\n      // Process metrics queue\n      while (this.metricsQueue.length > 0) {\n        const metrics = this.metricsQueue.shift();\n        if (metrics) {\n          await this.recordSystemMetrics(metrics);\n        }\n      }\n    } catch (error) {\n      logger.error(\"Failed to process analytics queue\", { error });\n    } finally {\n      this.isProcessing = false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const analyticsService = new AnalyticsService();\n\n// Background queue processing\nsetInterval(() => {\n  analyticsService.processQueue();\n}, 30000); // Process queue every 30 seconds\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/backup-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'promisify' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":449,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":449,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12572,12575],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12572,12575],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'outputFile' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":488,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":488,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":594,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":594,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16354,16357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16354,16357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { db } from \"@shared/database-unified\";\nimport { sql } from \"drizzle-orm\";\nimport { logger } from \"../logger\";\nimport path from \"path\";\nimport fs from \"fs/promises\";\nimport { spawn } from \"child_process\";\nimport { promisify } from \"util\";\nimport crypto from \"crypto\";\n\nexport interface BackupMetadata {\n  id: string;\n  timestamp: Date;\n  type: \"full\" | \"incremental\" | \"critical_data\";\n  size: number;\n  status: \"in_progress\" | \"completed\" | \"failed\";\n  filePath: string;\n  checksum?: string;\n  tables: string[];\n  duration?: number;\n  error?: string;\n}\n\nexport interface BackupConfig {\n  enabled: boolean;\n  schedule: {\n    full: string; // cron pattern for full backups\n    incremental: string; // cron pattern for incremental backups\n    criticalData: string; // cron pattern for critical data backups\n  };\n  retention: {\n    full: number; // days to retain full backups\n    incremental: number; // days to retain incremental backups\n    criticalData: number; // days to retain critical data backups\n  };\n  compression: boolean;\n  encryption: boolean;\n  maxBackupSize: number; // MB\n  notificationChannels: string[];\n}\n\nclass BackupService {\n  private config: BackupConfig;\n  private backupDir: string;\n  private isRunning = false;\n  private backupHistory: BackupMetadata[] = [];\n\n  constructor() {\n    this.backupDir = process.env.BACKUP_DIR || \"/tmp/backups\";\n    this.config = {\n      enabled: process.env.BACKUP_ENABLED === \"true\",\n      schedule: {\n        full: process.env.BACKUP_FULL_SCHEDULE || \"0 2 * * 0\", // Weekly at 2 AM Sunday\n        incremental: process.env.BACKUP_INCREMENTAL_SCHEDULE || \"0 2 * * 1-6\", // Daily at 2 AM Mon-Sat\n        criticalData: process.env.BACKUP_CRITICAL_SCHEDULE || \"0 */6 * * *\", // Every 6 hours\n      },\n      retention: {\n        full: parseInt(process.env.BACKUP_RETENTION_FULL || \"30\"), // 30 days\n        incremental: parseInt(process.env.BACKUP_RETENTION_INCREMENTAL || \"7\"), // 7 days\n        criticalData: parseInt(process.env.BACKUP_RETENTION_CRITICAL || \"3\"), // 3 days\n      },\n      compression: process.env.BACKUP_COMPRESSION === \"true\",\n      encryption: process.env.BACKUP_ENCRYPTION === \"true\",\n      maxBackupSize: parseInt(process.env.BACKUP_MAX_SIZE || \"1000\"), // 1GB default\n      notificationChannels: (process.env.BACKUP_NOTIFICATION_CHANNELS || \"\")\n        .split(\",\")\n        .filter(Boolean),\n    };\n\n    this.initializeBackupDirectory();\n  }\n\n  private async initializeBackupDirectory(): Promise<void> {\n    try {\n      await fs.mkdir(this.backupDir, { recursive: true });\n      logger.info(\"Backup directory initialized\", {\n        backupDir: this.backupDir,\n      });\n    } catch (error) {\n      logger.error(\"Failed to initialize backup directory\", error, {\n        backupDir: this.backupDir,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Create a full database backup\n   */\n  async createFullBackup(): Promise<BackupMetadata> {\n    const backupId = `full_${Date.now()}`;\n    const timestamp = new Date();\n    const fileName = `${backupId}.sql${this.config.compression ? \".gz\" : \"\"}`;\n    const filePath = path.join(this.backupDir, fileName);\n\n    const metadata: BackupMetadata = {\n      id: backupId,\n      timestamp,\n      type: \"full\",\n      size: 0,\n      status: \"in_progress\",\n      filePath,\n      tables: await this.getAllTableNames(),\n    };\n\n    this.backupHistory.push(metadata);\n    logger.info(\"Starting full database backup\", { backupId, filePath });\n\n    const startTime = Date.now();\n\n    try {\n      // Use pg_dump for full backup\n      await this.executePgDump(filePath, {\n        tables: metadata.tables,\n        compression: this.config.compression,\n      });\n\n      const stats = await fs.stat(filePath);\n      const duration = Date.now() - startTime;\n\n      metadata.size = stats.size;\n      metadata.status = \"completed\";\n      metadata.duration = duration;\n      metadata.checksum = await this.calculateChecksum(filePath);\n\n      logger.info(\"Full backup completed successfully\", {\n        backupId,\n        size: metadata.size,\n        duration,\n        checksum: metadata.checksum,\n      });\n\n      await this.notifyBackupCompletion(metadata);\n      return metadata;\n    } catch (error) {\n      metadata.status = \"failed\";\n      metadata.error = error instanceof Error ? error.message : \"Unknown error\";\n      metadata.duration = Date.now() - startTime;\n\n      logger.error(\"Full backup failed\", error, { backupId });\n      await this.notifyBackupFailure(metadata, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a backup of critical data only\n   */\n  async createCriticalDataBackup(): Promise<BackupMetadata> {\n    const backupId = `critical_${Date.now()}`;\n    const timestamp = new Date();\n    const fileName = `${backupId}.sql${this.config.compression ? \".gz\" : \"\"}`;\n    const filePath = path.join(this.backupDir, fileName);\n\n    const criticalTables = [\n      \"users\",\n      \"communities\",\n      \"events\",\n      \"tournaments\",\n      \"stream_sessions\",\n      \"user_settings\",\n      \"notifications\",\n    ];\n\n    const metadata: BackupMetadata = {\n      id: backupId,\n      timestamp,\n      type: \"critical_data\",\n      size: 0,\n      status: \"in_progress\",\n      filePath,\n      tables: criticalTables,\n    };\n\n    this.backupHistory.push(metadata);\n    logger.info(\"Starting critical data backup\", {\n      backupId,\n      tables: criticalTables,\n    });\n\n    const startTime = Date.now();\n\n    try {\n      await this.executePgDump(filePath, {\n        tables: criticalTables,\n        compression: this.config.compression,\n      });\n\n      const stats = await fs.stat(filePath);\n      const duration = Date.now() - startTime;\n\n      metadata.size = stats.size;\n      metadata.status = \"completed\";\n      metadata.duration = duration;\n      metadata.checksum = await this.calculateChecksum(filePath);\n\n      logger.info(\"Critical data backup completed\", {\n        backupId,\n        size: metadata.size,\n        duration,\n      });\n\n      return metadata;\n    } catch (error) {\n      metadata.status = \"failed\";\n      metadata.error = error instanceof Error ? error.message : \"Unknown error\";\n      metadata.duration = Date.now() - startTime;\n\n      logger.error(\"Critical data backup failed\", error, { backupId });\n      throw error;\n    }\n  }\n\n  /**\n   * Restore database from backup\n   */\n  async restoreFromBackup(\n    backupPath: string,\n    options?: {\n      tables?: string[];\n      dropExisting?: boolean;\n      dryRun?: boolean;\n    },\n  ): Promise<{\n    success: boolean;\n    tablesRestored: string[];\n    duration: number;\n    error?: string;\n  }> {\n    const startTime = Date.now();\n    logger.info(\"Starting database restore\", { backupPath, options });\n\n    try {\n      // Verify backup file exists and is readable\n      await fs.access(backupPath, fs.constants.R_OK);\n\n      if (options?.dryRun) {\n        logger.info(\"Dry run: restore validation completed\", { backupPath });\n        return {\n          success: true,\n          tablesRestored: options.tables || [],\n          duration: Date.now() - startTime,\n        };\n      }\n\n      // Execute restore using psql\n      const restoreResult = await this.executePsqlRestore(backupPath, {\n        tables: options?.tables,\n        dropExisting: options?.dropExisting || false,\n      });\n\n      const duration = Date.now() - startTime;\n\n      logger.info(\"Database restore completed successfully\", {\n        backupPath,\n        tablesRestored: restoreResult.tablesRestored,\n        duration,\n      });\n\n      return {\n        success: true,\n        tablesRestored: restoreResult.tablesRestored,\n        duration,\n      };\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n\n      logger.error(\"Database restore failed\", error, { backupPath, duration });\n\n      return {\n        success: false,\n        tablesRestored: [],\n        duration,\n        error: errorMessage,\n      };\n    }\n  }\n\n  /**\n   * Verify backup integrity\n   */\n  async verifyBackup(backupPath: string): Promise<{\n    valid: boolean;\n    checksum: string;\n    size: number;\n    error?: string;\n  }> {\n    try {\n      logger.info(\"Verifying backup integrity\", { backupPath });\n\n      // Check file exists and is readable\n      await fs.access(backupPath, fs.constants.R_OK);\n\n      const stats = await fs.stat(backupPath);\n      const checksum = await this.calculateChecksum(backupPath);\n\n      // Basic validation - check if file is not empty and has reasonable size\n      if (stats.size === 0) {\n        throw new Error(\"Backup file is empty\");\n      }\n\n      if (stats.size > this.config.maxBackupSize * 1024 * 1024) {\n        logger.warn(\"Backup file size exceeds maximum\", {\n          size: stats.size,\n          maxSize: this.config.maxBackupSize * 1024 * 1024,\n        });\n      }\n\n      // Try to validate SQL structure (basic check)\n      if (backupPath.endsWith(\".sql\")) {\n        const isValidSql = await this.validateSqlStructure(backupPath);\n        if (!isValidSql) {\n          throw new Error(\"Invalid SQL structure detected\");\n        }\n      }\n\n      logger.info(\"Backup verification successful\", {\n        backupPath,\n        size: stats.size,\n        checksum,\n      });\n\n      return {\n        valid: true,\n        checksum,\n        size: stats.size,\n      };\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n      logger.error(\"Backup verification failed\", error, { backupPath });\n\n      return {\n        valid: false,\n        checksum: \"\",\n        size: 0,\n        error: errorMessage,\n      };\n    }\n  }\n\n  /**\n   * Clean up old backups based on retention policy\n   */\n  async cleanupOldBackups(): Promise<{\n    deletedCount: number;\n    freedSpace: number;\n    errors: string[];\n  }> {\n    logger.info(\"Starting backup cleanup\", { config: this.config.retention });\n\n    let deletedCount = 0;\n    let freedSpace = 0;\n    const errors: string[] = [];\n\n    try {\n      const files = await fs.readdir(this.backupDir);\n      const now = new Date();\n\n      for (const file of files) {\n        try {\n          const filePath = path.join(this.backupDir, file);\n          const stats = await fs.stat(filePath);\n          const ageInDays =\n            (now.getTime() - stats.mtime.getTime()) / (1000 * 60 * 60 * 24);\n\n          let shouldDelete = false;\n\n          if (\n            file.includes(\"full_\") &&\n            ageInDays > this.config.retention.full\n          ) {\n            shouldDelete = true;\n          } else if (\n            file.includes(\"incremental_\") &&\n            ageInDays > this.config.retention.incremental\n          ) {\n            shouldDelete = true;\n          } else if (\n            file.includes(\"critical_\") &&\n            ageInDays > this.config.retention.criticalData\n          ) {\n            shouldDelete = true;\n          }\n\n          if (shouldDelete) {\n            await fs.unlink(filePath);\n            deletedCount++;\n            freedSpace += stats.size;\n            logger.info(\"Deleted old backup\", {\n              file,\n              ageInDays,\n              size: stats.size,\n            });\n          }\n        } catch (error) {\n          const errorMsg = `Failed to process file ${file}: ${error}`;\n          errors.push(errorMsg);\n          logger.error(\"Backup cleanup error\", error, { file });\n        }\n      }\n\n      logger.info(\"Backup cleanup completed\", { deletedCount, freedSpace });\n      return { deletedCount, freedSpace, errors };\n    } catch (error) {\n      logger.error(\"Backup cleanup failed\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get backup status and history\n   */\n  getBackupStatus(): {\n    isRunning: boolean;\n    config: BackupConfig;\n    recentBackups: BackupMetadata[];\n    diskUsage: {\n      backupDir: string;\n      totalSpace?: number;\n      usedSpace?: number;\n      freeSpace?: number;\n    };\n  } {\n    return {\n      isRunning: this.isRunning,\n      config: this.config,\n      recentBackups: this.backupHistory.slice(-10), // Last 10 backups\n      diskUsage: {\n        backupDir: this.backupDir,\n        // Note: Disk usage calculation would require additional system calls\n      },\n    };\n  }\n\n  // Private helper methods\n\n  private async getAllTableNames(): Promise<string[]> {\n    try {\n      // SQLite query to get all tables\n      const result = await db.all(sql`\n        SELECT name as table_name \n        FROM sqlite_master \n        WHERE type = 'table' \n        AND name NOT LIKE 'sqlite_%'\n      `);\n\n      return result.map((row: any) => row.table_name);\n    } catch (error) {\n      logger.error(\"Failed to get table names\", error);\n      return [];\n    }\n  }\n\n  private async executePgDump(\n    filePath: string,\n    options: {\n      tables: string[];\n      compression: boolean;\n    },\n  ): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (!process.env.DATABASE_URL) {\n        return reject(new Error(\"DATABASE_URL not configured\"));\n      }\n      const args = [\n        process.env.DATABASE_URL,\n        \"--no-password\",\n        \"--verbose\",\n        \"--clean\",\n        \"--if-exists\",\n        \"--format=plain\",\n      ];\n\n      // Add specific tables if provided\n      if (options.tables.length > 0) {\n        options.tables.forEach((table) => {\n          args.push(\"--table\", table);\n        });\n      }\n\n      let command = \"pg_dump\";\n      let outputFile = filePath;\n\n      if (options.compression) {\n        // Use gzip compression\n        outputFile = filePath.replace(\".gz\", \"\");\n        args.push(\"--compress=9\");\n      }\n\n      const pgDump = spawn(command, args);\n\n      let errorOutput = \"\";\n\n      pgDump.stderr.on(\"data\", (data) => {\n        errorOutput += data.toString();\n      });\n\n      pgDump.on(\"close\", (code) => {\n        if (code === 0) {\n          resolve();\n        } else {\n          reject(new Error(`pg_dump failed with code ${code}: ${errorOutput}`));\n        }\n      });\n\n      pgDump.on(\"error\", (error) => {\n        reject(new Error(`Failed to start pg_dump: ${error.message}`));\n      });\n    });\n  }\n\n  private async executePsqlRestore(\n    backupPath: string,\n    options: {\n      tables?: string[];\n      dropExisting: boolean;\n    },\n  ): Promise<{ tablesRestored: string[] }> {\n    return new Promise((resolve, reject) => {\n      if (!process.env.DATABASE_URL) {\n        return reject(new Error(\"DATABASE_URL not configured\"));\n      }\n      const args = [\n        process.env.DATABASE_URL,\n        \"--file\",\n        backupPath,\n        \"--verbose\",\n      ];\n\n      if (options.dropExisting) {\n        args.push(\"--clean\");\n      }\n\n      const psql = spawn(\"psql\", args);\n\n      let errorOutput = \"\";\n\n      psql.stderr.on(\"data\", (data) => {\n        errorOutput += data.toString();\n      });\n\n      psql.on(\"close\", (code) => {\n        if (code === 0) {\n          resolve({ tablesRestored: options.tables || [] });\n        } else {\n          reject(\n            new Error(`psql restore failed with code ${code}: ${errorOutput}`),\n          );\n        }\n      });\n\n      psql.on(\"error\", (error) => {\n        reject(new Error(`Failed to start psql: ${error.message}`));\n      });\n    });\n  }\n\n  private async calculateChecksum(filePath: string): Promise<string> {\n    const fileBuffer = await fs.readFile(filePath);\n    return crypto.createHash(\"sha256\").update(fileBuffer).digest(\"hex\");\n  }\n\n  private async validateSqlStructure(filePath: string): Promise<boolean> {\n    try {\n      const content = await fs.readFile(filePath, \"utf-8\");\n\n      // Basic SQL validation - check for common SQL keywords\n      const hasCreateStatements =\n        content.includes(\"CREATE TABLE\") || content.includes(\"INSERT INTO\");\n      const hasValidStructure = content.includes(\"--\") || content.includes(\";\");\n\n      return hasCreateStatements && hasValidStructure;\n    } catch (error) {\n      logger.error(\"SQL validation failed\", error, { filePath });\n      return false;\n    }\n  }\n\n  private async notifyBackupCompletion(\n    metadata: BackupMetadata,\n  ): Promise<void> {\n    if (this.config.notificationChannels.length === 0) return;\n\n    logger.info(\"Backup completion notification sent\", {\n      backupId: metadata.id,\n      channels: this.config.notificationChannels,\n    });\n  }\n\n  private async notifyBackupFailure(\n    metadata: BackupMetadata,\n    error: any,\n  ): Promise<void> {\n    if (this.config.notificationChannels.length === 0) return;\n\n    logger.error(\"Backup failure notification sent\", error, {\n      backupId: metadata.id,\n      channels: this.config.notificationChannels,\n    });\n  }\n}\n\nexport const backupService = new BackupService();\nexport { BackupService };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/cache-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":159,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4463,4466],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4463,4466],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":160,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4482,4485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4482,4485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":167,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4673,4676],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4673,4676],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":176,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4896,4899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4896,4899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":199,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5424,5427],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5424,5427],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":207,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5603,5606],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5603,5606],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { redisClient } from \"./redis-client\";\nimport { logger } from \"../logger\";\nimport type { User, Community } from \"@shared/schema\";\nimport type { StreamSession } from \"./streaming-coordinator\";\n\n/**\n * High-level caching service for application data\n */\nexport class CacheService {\n  private readonly defaultTTL = 300; // 5 minutes\n  private readonly sessionTTL = 1800; // 30 minutes\n  private readonly userTTL = 600; // 10 minutes\n  private readonly apiTTL = 60; // 1 minute for API responses\n\n  /**\n   * Generic cache operations\n   */\n  async get<T>(key: string): Promise<T | null> {\n    try {\n      const client = redisClient.getClient();\n      if (!client || !redisClient.isHealthy()) return null;\n\n      const data = await client.get(key);\n      if (!data) return null;\n\n      return JSON.parse(data);\n    } catch (error) {\n      logger.error(\"Cache get error\", { key, error });\n      return null;\n    }\n  }\n\n  async set<T>(key: string, value: T, ttlSeconds?: number): Promise<boolean> {\n    try {\n      const client = redisClient.getClient();\n      if (!client || !redisClient.isHealthy()) return false;\n\n      const ttl = ttlSeconds || this.defaultTTL;\n      await client.setEx(key, ttl, JSON.stringify(value));\n      return true;\n    } catch (error) {\n      logger.error(\"Cache set error\", { key, error });\n      return false;\n    }\n  }\n\n  async delete(key: string): Promise<boolean> {\n    try {\n      const client = redisClient.getClient();\n      if (!client || !redisClient.isHealthy()) return false;\n\n      await client.del(key);\n      return true;\n    } catch (error) {\n      logger.error(\"Cache delete error\", { key, error });\n      return false;\n    }\n  }\n\n  async exists(key: string): Promise<boolean> {\n    try {\n      const client = redisClient.getClient();\n      if (!client || !redisClient.isHealthy()) return false;\n\n      const result = await client.exists(key);\n      return result === 1;\n    } catch (error) {\n      logger.error(\"Cache exists error\", { key, error });\n      return false;\n    }\n  }\n\n  /**\n   * Stream session caching\n   */\n  async cacheStreamSession(session: StreamSession): Promise<boolean> {\n    const key = `stream_session:${session.id}`;\n    return await this.set(key, session, this.sessionTTL);\n  }\n\n  async getStreamSession(sessionId: string): Promise<StreamSession | null> {\n    const key = `stream_session:${sessionId}`;\n    return await this.get<StreamSession>(key);\n  }\n\n  async deleteStreamSession(sessionId: string): Promise<boolean> {\n    const key = `stream_session:${sessionId}`;\n    return await this.delete(key);\n  }\n\n  async cacheUserStreamSessions(\n    userId: string,\n    sessions: StreamSession[],\n  ): Promise<boolean> {\n    const key = `user_sessions:${userId}`;\n    return await this.set(key, sessions, this.sessionTTL);\n  }\n\n  async getUserStreamSessions(userId: string): Promise<StreamSession[] | null> {\n    const key = `user_sessions:${userId}`;\n    return await this.get<StreamSession[]>(key);\n  }\n\n  /**\n   * User data caching\n   */\n  async cacheUser(user: User): Promise<boolean> {\n    const key = `user:${user.id}`;\n    return await this.set(key, user, this.userTTL);\n  }\n\n  async getUser(userId: string): Promise<User | null> {\n    const key = `user:${userId}`;\n    return await this.get<User>(key);\n  }\n\n  async deleteUser(userId: string): Promise<boolean> {\n    const key = `user:${userId}`;\n    return await this.delete(key);\n  }\n\n  /**\n   * Community data caching\n   */\n  async cacheCommunity(community: Community): Promise<boolean> {\n    const key = `community:${community.id}`;\n    return await this.set(key, community, this.userTTL);\n  }\n\n  async getCommunity(communityId: string): Promise<Community | null> {\n    const key = `community:${communityId}`;\n    return await this.get<Community>(key);\n  }\n\n  async cacheAllCommunities(communities: Community[]): Promise<boolean> {\n    const key = \"communities:all\";\n    return await this.set(key, communities, this.userTTL);\n  }\n\n  async getAllCommunities(): Promise<Community[] | null> {\n    const key = \"communities:all\";\n    return await this.get<Community[]>(key);\n  }\n\n  /**\n   * API response caching\n   */\n  async cacheApiResponse<T>(\n    endpoint: string,\n    params: Record<string, unknown>,\n    response: T,\n  ): Promise<boolean> {\n    const key = this.generateApiCacheKey(endpoint, params);\n    return await this.set(key, response, this.apiTTL);\n  }\n\n  async getApiResponse(\n    endpoint: string,\n    params: Record<string, any>,\n  ): Promise<any | null> {\n    const key = this.generateApiCacheKey(endpoint, params);\n    return await this.get(key);\n  }\n\n  private generateApiCacheKey(\n    endpoint: string,\n    params: Record<string, any>,\n  ): string {\n    const sortedParams = Object.keys(params)\n      .sort()\n      .reduce(\n        (result, key) => {\n          result[key] = params[key];\n          return result;\n        },\n        {} as Record<string, any>,\n      );\n\n    const paramString = JSON.stringify(sortedParams);\n    return `api:${endpoint}:${Buffer.from(paramString).toString(\"base64\")}`;\n  }\n\n  /**\n   * Analytics caching\n   */\n  async cacheAnalyticsData<T>(\n    type: string,\n    identifier: string,\n    data: T,\n    ttlSeconds?: number,\n  ): Promise<boolean> {\n    const key = `analytics:${type}:${identifier}`;\n    return await this.set(key, data, ttlSeconds || this.defaultTTL);\n  }\n\n  async getAnalyticsData(\n    type: string,\n    identifier: string,\n  ): Promise<any | null> {\n    const key = `analytics:${type}:${identifier}`;\n    return await this.get(key);\n  }\n\n  /**\n   * Batch operations\n   */\n  async multiGet(keys: string[]): Promise<(any | null)[]> {\n    try {\n      const client = redisClient.getClient();\n      if (!client || !redisClient.isHealthy()) return keys.map(() => null);\n\n      const values = await client.mGet(keys);\n      return values.map((value) => (value ? JSON.parse(value) : null));\n    } catch (error) {\n      logger.error(\"Cache multiGet error\", { keys, error });\n      return keys.map(() => null);\n    }\n  }\n\n  async multiSet<T>(\n    keyValuePairs: Array<{ key: string; value: T; ttl?: number }>,\n  ): Promise<boolean> {\n    try {\n      const client = redisClient.getClient();\n      if (!client || !redisClient.isHealthy()) return false;\n\n      const pipeline = client.multi();\n\n      keyValuePairs.forEach(({ key, value, ttl }) => {\n        const ttlSeconds = ttl || this.defaultTTL;\n        pipeline.setEx(key, ttlSeconds, JSON.stringify(value));\n      });\n\n      await pipeline.exec();\n      return true;\n    } catch (error) {\n      logger.error(\"Cache multiSet error\", { error });\n      return false;\n    }\n  }\n\n  /**\n   * Pattern-based operations\n   */\n  async deletePattern(pattern: string): Promise<number> {\n    try {\n      const client = redisClient.getClient();\n      if (!client || !redisClient.isHealthy()) return 0;\n\n      const keys = await client.keys(pattern);\n      if (keys.length === 0) return 0;\n\n      await client.del(keys);\n      return keys.length;\n    } catch (error) {\n      logger.error(\"Cache deletePattern error\", { pattern, error });\n      return 0;\n    }\n  }\n\n  /**\n   * Cache statistics\n   */\n  async getStats(): Promise<{\n    connected: boolean;\n    keyCount: number;\n    memoryUsage: string | null;\n    hitRate: number | null;\n  }> {\n    try {\n      const client = redisClient.getClient();\n      const isConnected = redisClient.isHealthy();\n\n      if (!client || !isConnected) {\n        return {\n          connected: false,\n          keyCount: 0,\n          memoryUsage: null,\n          hitRate: null,\n        };\n      }\n\n      const keyCount = await client.dbSize();\n      const info = await redisClient.getInfo();\n\n      // Parse memory usage from info\n      let memoryUsage: string | null = null;\n      if (info) {\n        const memoryMatch = info.match(/used_memory_human:([^\\r\\n]+)/);\n        if (memoryMatch && memoryMatch[1]) {\n          memoryUsage = memoryMatch[1].trim();\n        }\n      }\n\n      return {\n        connected: true,\n        keyCount,\n        memoryUsage,\n        hitRate: null, // Would need to implement hit/miss tracking\n      };\n    } catch (error) {\n      logger.error(\"Failed to get cache stats\", { error });\n      return {\n        connected: false,\n        keyCount: 0,\n        memoryUsage: null,\n        hitRate: null,\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const cacheService = new CacheService();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/card-recognition.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2910,2913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2910,2913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":277,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":277,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6911,6914],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6911,6914],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Card Recognition Service\n *\n * Service for identifying and retrieving Magic: The Gathering card data\n * using the Scryfall API. Implements caching and rate limiting for optimal performance.\n */\n\nimport { logger } from \"../logger\";\n\n// Card data interface based on Scryfall API structure\nexport interface MtgCard {\n  id: string;\n  oracleId?: string;\n  name: string;\n  manaCost?: string;\n  cmc?: number;\n  typeLine: string;\n  oracleText?: string;\n  power?: string;\n  toughness?: string;\n  loyalty?: string;\n  colors?: string[];\n  colorIdentity?: string[];\n  setCode: string;\n  setName: string;\n  collectorNumber: string;\n  rarity: string;\n  imageUris?: {\n    small?: string;\n    normal?: string;\n    large?: string;\n    png?: string;\n    artCrop?: string;\n    borderCrop?: string;\n  };\n  prices?: {\n    usd?: string;\n    usdFoil?: string;\n    eur?: string;\n    eurFoil?: string;\n    tix?: string;\n  };\n  legalities?: Record<string, string>;\n  releasedAt?: string;\n  scryfallUri?: string;\n}\n\nexport interface CardSearchResult {\n  cards: MtgCard[];\n  total: number;\n  page: number;\n  hasMore: boolean;\n}\n\nexport interface AutocompleteResult {\n  suggestions: Array<{\n    id?: string;\n    name: string;\n  }>;\n}\n\n/**\n * Card Recognition Service\n * Handles all card data retrieval and caching operations\n */\nexport class CardRecognitionService {\n  private readonly SCRYFALL_API_BASE = \"https://api.scryfall.com\";\n  private readonly RATE_LIMIT_DELAY = 100; // 100ms between requests (10 req/sec max)\n  private lastRequestTime = 0;\n\n  // In-memory cache for frequently accessed cards\n  private cardCache = new Map<string, { card: MtgCard; cachedAt: number }>();\n  private readonly CACHE_TTL = 7 * 24 * 60 * 60 * 1000; // 7 days in milliseconds\n  private readonly MAX_CACHE_SIZE = 1000;\n\n  /**\n   * Search for cards by name or other criteria\n   */\n  async searchCards(\n    query: string,\n    options: {\n      set?: string;\n      format?: string;\n      page?: number;\n      limit?: number;\n    } = {},\n  ): Promise<CardSearchResult> {\n    try {\n      const { set, format, page = 1, limit = 20 } = options;\n\n      // Build Scryfall search query\n      let searchQuery = query;\n      if (set) searchQuery += ` set:${set}`;\n      if (format) searchQuery += ` legal:${format}`;\n\n      const params = new URLSearchParams({\n        q: searchQuery,\n        page: page.toString(),\n        unique: \"cards\",\n      });\n\n      await this.enforceRateLimit();\n      const response = await fetch(\n        `${this.SCRYFALL_API_BASE}/cards/search?${params}`,\n      );\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          return { cards: [], total: 0, page: 1, hasMore: false };\n        }\n        throw new Error(`Scryfall API error: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n\n      // Transform Scryfall data to our format\n      const cards: MtgCard[] = data.data.map((card: any) =>\n        this.transformScryfallCard(card),\n      );\n\n      // Cache results\n      cards.forEach((card) => this.cacheCard(card));\n\n      return {\n        cards: cards.slice(0, limit),\n        total: data.total_cards || 0,\n        page,\n        hasMore: data.has_more || false,\n      };\n    } catch (error) {\n      logger.error(\"Error searching cards\", error, { query, options });\n      throw error;\n    }\n  }\n\n  /**\n   * Get card details by Scryfall ID\n   */\n  async getCardById(id: string): Promise<MtgCard | null> {\n    try {\n      // Check cache first\n      const cached = this.cardCache.get(id);\n      if (cached && Date.now() - cached.cachedAt < this.CACHE_TTL) {\n        return cached.card;\n      }\n\n      await this.enforceRateLimit();\n      const response = await fetch(`${this.SCRYFALL_API_BASE}/cards/${id}`);\n\n      if (!response.ok) {\n        if (response.status === 404) return null;\n        throw new Error(`Scryfall API error: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      const card = this.transformScryfallCard(data);\n\n      // Cache the result\n      this.cacheCard(card);\n\n      return card;\n    } catch (error) {\n      logger.error(\"Error fetching card by ID\", error, { id });\n      throw error;\n    }\n  }\n\n  /**\n   * Get card by exact name\n   */\n  async getCardByName(\n    name: string,\n    options: { set?: string } = {},\n  ): Promise<MtgCard | null> {\n    try {\n      const params = new URLSearchParams({\n        exact: name,\n      });\n\n      if (options.set) {\n        params.append(\"set\", options.set);\n      }\n\n      await this.enforceRateLimit();\n      const response = await fetch(\n        `${this.SCRYFALL_API_BASE}/cards/named?${params}`,\n      );\n\n      if (!response.ok) {\n        if (response.status === 404) return null;\n        throw new Error(`Scryfall API error: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      const card = this.transformScryfallCard(data);\n\n      // Cache the result\n      this.cacheCard(card);\n\n      return card;\n    } catch (error) {\n      logger.error(\"Error fetching card by name\", error, { name, options });\n      throw error;\n    }\n  }\n\n  /**\n   * Autocomplete card names\n   */\n  async autocomplete(query: string, limit = 20): Promise<AutocompleteResult> {\n    try {\n      if (query.length < 2) {\n        return { suggestions: [] };\n      }\n\n      const params = new URLSearchParams({\n        q: query,\n      });\n\n      await this.enforceRateLimit();\n      const response = await fetch(\n        `${this.SCRYFALL_API_BASE}/cards/autocomplete?${params}`,\n      );\n\n      if (!response.ok) {\n        throw new Error(`Scryfall API error: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n\n      return {\n        suggestions: data.data\n          .slice(0, limit)\n          .map((name: string) => ({ name })),\n      };\n    } catch (error) {\n      logger.error(\"Error autocompleting card names\", error, { query });\n      throw error;\n    }\n  }\n\n  /**\n   * Get a random card (useful for testing and demos)\n   */\n  async getRandomCard(\n    options: { set?: string; format?: string } = {},\n  ): Promise<MtgCard> {\n    try {\n      let url = `${this.SCRYFALL_API_BASE}/cards/random`;\n      const params = new URLSearchParams();\n\n      if (options.set) params.append(\"q\", `set:${options.set}`);\n      if (options.format) params.append(\"q\", `legal:${options.format}`);\n\n      if (params.toString()) {\n        url += `?${params}`;\n      }\n\n      await this.enforceRateLimit();\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error(`Scryfall API error: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return this.transformScryfallCard(data);\n    } catch (error) {\n      logger.error(\"Error fetching random card\", error, { options });\n      throw error;\n    }\n  }\n\n  /**\n   * Transform Scryfall API response to our card format\n   */\n  private transformScryfallCard(scryfallCard: any): MtgCard {\n    return {\n      id: scryfallCard.id,\n      oracleId: scryfallCard.oracle_id,\n      name: scryfallCard.name,\n      manaCost: scryfallCard.mana_cost,\n      cmc: scryfallCard.cmc,\n      typeLine: scryfallCard.type_line,\n      oracleText: scryfallCard.oracle_text,\n      power: scryfallCard.power,\n      toughness: scryfallCard.toughness,\n      loyalty: scryfallCard.loyalty,\n      colors: scryfallCard.colors,\n      colorIdentity: scryfallCard.color_identity,\n      setCode: scryfallCard.set,\n      setName: scryfallCard.set_name,\n      collectorNumber: scryfallCard.collector_number,\n      rarity: scryfallCard.rarity,\n      imageUris: scryfallCard.image_uris\n        ? {\n            small: scryfallCard.image_uris.small,\n            normal: scryfallCard.image_uris.normal,\n            large: scryfallCard.image_uris.large,\n            png: scryfallCard.image_uris.png,\n            artCrop: scryfallCard.image_uris.art_crop,\n            borderCrop: scryfallCard.image_uris.border_crop,\n          }\n        : undefined,\n      prices: scryfallCard.prices,\n      legalities: scryfallCard.legalities,\n      releasedAt: scryfallCard.released_at,\n      scryfallUri: scryfallCard.scryfall_uri,\n    };\n  }\n\n  /**\n   * Cache a card in memory\n   */\n  private cacheCard(card: MtgCard): void {\n    // Implement simple LRU by removing oldest if cache is full\n    if (this.cardCache.size >= this.MAX_CACHE_SIZE) {\n      const oldestKey = this.cardCache.keys().next().value;\n      if (oldestKey) {\n        this.cardCache.delete(oldestKey);\n      }\n    }\n\n    this.cardCache.set(card.id, {\n      card,\n      cachedAt: Date.now(),\n    });\n  }\n\n  /**\n   * Enforce rate limiting for Scryfall API (max 10 requests per second)\n   */\n  private async enforceRateLimit(): Promise<void> {\n    const now = Date.now();\n    const timeSinceLastRequest = now - this.lastRequestTime;\n\n    if (timeSinceLastRequest < this.RATE_LIMIT_DELAY) {\n      const delay = this.RATE_LIMIT_DELAY - timeSinceLastRequest;\n      await new Promise((resolve) => setTimeout(resolve, delay));\n    }\n\n    this.lastRequestTime = Date.now();\n  }\n\n  /**\n   * Clear the card cache\n   */\n  clearCache(): void {\n    this.cardCache.clear();\n    logger.info(\"Card cache cleared\");\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getCacheStats(): { size: number; maxSize: number; hitRate?: number } {\n    return {\n      size: this.cardCache.size,\n      maxSize: this.MAX_CACHE_SIZE,\n    };\n  }\n}\n\n// Export singleton instance\nexport const cardRecognitionService = new CardRecognitionService();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/card-recognition/adapters/base.adapter.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[475,478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[475,478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Base Card Adapter Interface\n *\n * Defines the contract for all card adapters in the Universal Deck-Building framework\n */\n\nexport interface UniversalCard {\n  id: string;\n  gameId: string;\n  name: string;\n\n  // Core identifiers\n  setCode?: string;\n  setName?: string;\n  collectorNumber?: string;\n  rarity?: string;\n\n  // External references\n  externalId?: string;\n  externalSource?: string;\n\n  // Flexible attributes for game-specific data\n  attributes: Record<string, any>;\n\n  // Visual data\n  imageUris?: Record<string, string>;\n\n  // Metadata\n  isOfficial?: boolean;\n  isCommunitySubmitted?: boolean;\n}\n\nexport interface CardSearchResult {\n  cards: UniversalCard[];\n  total: number;\n  page: number;\n  hasMore: boolean;\n}\n\nexport interface AutocompleteResult {\n  suggestions: Array<{\n    id?: string;\n    name: string;\n  }>;\n}\n\n/**\n * Base interface that all card adapters must implement\n */\nexport interface ICardAdapter {\n  /**\n   * Search for cards by query string\n   */\n  searchCards(\n    query: string,\n    options?: {\n      set?: string;\n      format?: string;\n      page?: number;\n      limit?: number;\n    },\n  ): Promise<CardSearchResult>;\n\n  /**\n   * Get a specific card by ID\n   */\n  getCardById(id: string): Promise<UniversalCard | null>;\n\n  /**\n   * Get a card by exact name\n   */\n  getCardByName(\n    name: string,\n    options?: {\n      set?: string;\n    },\n  ): Promise<UniversalCard | null>;\n\n  /**\n   * Autocomplete card names\n   */\n  autocomplete(query: string, limit?: number): Promise<AutocompleteResult>;\n\n  /**\n   * Get a random card\n   */\n  getRandomCard(options?: {\n    set?: string;\n    format?: string;\n  }): Promise<UniversalCard>;\n\n  /**\n   * Get the game ID this adapter serves\n   */\n  getGameId(): string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/card-recognition/adapters/custom.adapter.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'eq' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'and' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'like' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sql' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'db' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'logger' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[803,806],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[803,806],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'query' is defined but never used. Allowed unused args must match /^_/u.","line":49,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'options' is defined but never used. Allowed unused args must match /^_/u.","line":50,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used. Allowed unused args must match /^_/u.","line":106,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":106,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'name' is defined but never used. Allowed unused args must match /^_/u.","line":134,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'options' is defined but never used. Allowed unused args must match /^_/u.","line":135,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'limit' is assigned a value but never used. Allowed unused args must match /^_/u.","line":169,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":169,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'options' is defined but never used. Allowed unused args must match /^_/u.","line":200,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":200,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Custom Game Adapter\n *\n * Adapter for custom/user-defined games with database-backed cards\n * NOTE: Currently disabled - 'cards' table not yet implemented in schema\n */\n\nimport { eq, and, like, sql } from \"drizzle-orm\";\nimport { db } from \"../../../../shared/database-unified\";\n// TODO: Re-enable when cards table is added to schema\n// import { cards } from '../../../../shared/schema';\nimport { logger } from \"../../../logger\";\nimport type {\n  ICardAdapter,\n  UniversalCard,\n  CardSearchResult,\n  AutocompleteResult,\n} from \"./base.adapter\";\n\nexport class CustomGameAdapter implements ICardAdapter {\n  constructor(private gameId: string) {}\n\n  getGameId(): string {\n    return this.gameId;\n  }\n\n  /**\n   * Transform database card to universal format\n   */\n  private transformToUniversal(dbCard: any): UniversalCard {\n    return {\n      id: dbCard.id,\n      gameId: dbCard.gameId,\n      name: dbCard.name,\n      setCode: dbCard.setCode,\n      setName: dbCard.setName,\n      collectorNumber: dbCard.collectorNumber,\n      rarity: dbCard.rarity,\n      externalId: dbCard.externalId,\n      externalSource: dbCard.externalSource,\n      attributes: dbCard.attributes || {},\n      imageUris: dbCard.imageUris || {},\n      isOfficial: dbCard.isOfficial,\n      isCommunitySubmitted: dbCard.isCommunitySubmitted,\n    };\n  }\n\n  async searchCards(\n    query: string,\n    options?: {\n      set?: string;\n      format?: string;\n      page?: number;\n      limit?: number;\n    },\n  ): Promise<CardSearchResult> {\n    // TODO: Re-enable when cards table is added to schema\n    throw new Error(\n      \"Custom game adapter not yet implemented - cards table missing from schema\",\n    );\n\n    /* Original implementation - disabled until cards table exists\n    try {\n      const page = options?.page || 1;\n      const limit = options?.limit || 20;\n      const offset = (page - 1) * limit;\n\n      let whereConditions = [\n        eq(cards.gameId, this.gameId),\n        like(cards.name, `%${query}%`),\n      ];\n\n      if (options?.set) {\n        whereConditions.push(eq(cards.setCode, options.set));\n      }\n\n      // Get total count\n      const [countResult] = await db\n        .select({ count: sql<number>`count(*)` })\n        .from(cards)\n        .where(and(...whereConditions));\n\n      const total = Number(countResult?.count || 0);\n\n      // Get paginated results\n      const results = await db\n        .select()\n        .from(cards)\n        .where(and(...whereConditions))\n        .limit(limit)\n        .offset(offset);\n\n      return {\n        cards: results.map((card: any) => this.transformToUniversal(card)),\n        total,\n        page,\n        hasMore: offset + results.length < total,\n      };\n    } catch (error) {\n      logger.error('Custom adapter search failed', error, { gameId: this.gameId, query, options });\n      throw error;\n    }\n    */\n  }\n\n  async getCardById(id: string): Promise<UniversalCard | null> {\n    // TODO: Re-enable when cards table is added to schema\n    throw new Error(\n      \"Custom game adapter not yet implemented - cards table missing from schema\",\n    );\n\n    /* Original implementation - disabled until cards table exists\n    try {\n      const [card] = await db\n        .select()\n        .from(cards)\n        .where(and(\n          eq(cards.id, id),\n          eq(cards.gameId, this.gameId)\n        ))\n        .limit(1);\n\n      if (!card) return null;\n      \n      return this.transformToUniversal(card);\n    } catch (error) {\n      logger.error('Custom adapter getCardById failed', error, { gameId: this.gameId, id });\n      throw error;\n    }\n    */\n  }\n\n  async getCardByName(\n    name: string,\n    options?: { set?: string },\n  ): Promise<UniversalCard | null> {\n    // TODO: Re-enable when cards table is added to schema\n    throw new Error(\n      \"Custom game adapter not yet implemented - cards table missing from schema\",\n    );\n\n    /* Original implementation - disabled until cards table exists\n    try {\n      let whereConditions = [\n        eq(cards.gameId, this.gameId),\n        eq(cards.name, name),\n      ];\n\n      if (options?.set) {\n        whereConditions.push(eq(cards.setCode, options.set));\n      }\n\n      const [card] = await db\n        .select()\n        .from(cards)\n        .where(and(...whereConditions))\n        .limit(1);\n\n      if (!card) return null;\n      \n      return this.transformToUniversal(card);\n    } catch (error) {\n      logger.error('Custom adapter getCardByName failed', error, { gameId: this.gameId, name, options });\n      throw error;\n    }\n    */\n  }\n\n  async autocomplete(query: string, limit = 20): Promise<AutocompleteResult> {\n    // TODO: Re-enable when cards table is added to schema\n    throw new Error(\n      \"Custom game adapter not yet implemented - cards table missing from schema\",\n    );\n\n    /* Original implementation - disabled until cards table exists\n    try {\n      if (query.length < 2) {\n        return { suggestions: [] };\n      }\n\n      const results = await db\n        .select({ id: cards.id, name: cards.name })\n        .from(cards)\n        .where(and(\n          eq(cards.gameId, this.gameId),\n          like(cards.name, `${query}%`)\n        ))\n        .limit(limit);\n\n      return {\n        suggestions: results.map((r: any) => ({ id: r.id, name: r.name })),\n      };\n    } catch (error) {\n      logger.error('Custom adapter autocomplete failed', error, { gameId: this.gameId, query, limit });\n      throw error;\n    }\n    */\n  }\n\n  async getRandomCard(options?: {\n    set?: string;\n    format?: string;\n  }): Promise<UniversalCard> {\n    // TODO: Re-enable when cards table is added to schema\n    throw new Error(\n      \"Custom game adapter not yet implemented - cards table missing from schema\",\n    );\n\n    /* Original implementation - disabled until cards table exists\n    try {\n      let whereConditions = [eq(cards.gameId, this.gameId)];\n\n      if (options?.set) {\n        whereConditions.push(eq(cards.setCode, options.set));\n      }\n\n      // Get random card using SQL random function\n      const [card] = await db\n        .select()\n        .from(cards)\n        .where(and(...whereConditions))\n        .orderBy(sql`RANDOM()`)\n        .limit(1);\n\n      if (!card) {\n        throw new Error('No cards found for this game');\n      }\n\n      return this.transformToUniversal(card);\n    } catch (error) {\n      logger.error('Custom adapter getRandomCard failed', error, { gameId: this.gameId, options });\n      throw error;\n    }\n    */\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/card-recognition/adapters/pokemon.adapter.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1246,1249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1246,1249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Pokemon TCG Adapter\n *\n * Adapter for Pokemon Trading Card Game via Pokemon TCG API\n * Official API: https://pokemontcg.io/\n */\n\nimport { logger } from \"../../../logger\";\nimport type {\n  ICardAdapter,\n  UniversalCard,\n  CardSearchResult,\n  AutocompleteResult,\n} from \"./base.adapter\";\n\n// Pokemon TCG API base URL\nconst POKEMON_TCG_API_BASE = \"https://api.pokemontcg.io/v2\";\n\ninterface PokemonCard {\n  id: string;\n  name: string;\n  supertype: string;\n  subtypes?: string[];\n  hp?: string;\n  types?: string[];\n  evolvesFrom?: string;\n  evolvesTo?: string[];\n  attacks?: Array<{\n    name: string;\n    cost: string[];\n    convertedEnergyCost: number;\n    damage: string;\n    text: string;\n  }>;\n  weaknesses?: Array<{\n    type: string;\n    value: string;\n  }>;\n  resistances?: Array<{\n    type: string;\n    value: string;\n  }>;\n  retreatCost?: string[];\n  convertedRetreatCost?: number;\n  set: {\n    id: string;\n    name: string;\n    series: string;\n    printedTotal: number;\n    total: number;\n    releaseDate: string;\n  };\n  number: string;\n  artist?: string;\n  rarity?: string;\n  flavorText?: string;\n  nationalPokedexNumbers?: number[];\n  images: {\n    small: string;\n    large: string;\n  };\n  tcgplayer?: {\n    url: string;\n    prices?: any;\n  };\n}\n\ninterface PokemonApiResponse {\n  data: PokemonCard[];\n  page: number;\n  pageSize: number;\n  count: number;\n  totalCount: number;\n}\n\nexport class PokemonTCGAdapter implements ICardAdapter {\n  private readonly POKEMON_GAME_ID = \"pokemon-tcg\";\n  private readonly API_KEY = process.env.POKEMON_TCG_API_KEY || \"\";\n\n  getGameId(): string {\n    return this.POKEMON_GAME_ID;\n  }\n\n  /**\n   * Get headers for Pokemon TCG API requests\n   */\n  private getHeaders(): HeadersInit {\n    const headers: HeadersInit = {\n      \"Content-Type\": \"application/json\",\n    };\n\n    // API key is optional but recommended for higher rate limits\n    if (this.API_KEY) {\n      headers[\"X-Api-Key\"] = this.API_KEY;\n    }\n\n    return headers;\n  }\n\n  /**\n   * Transform Pokemon card to universal format\n   */\n  private transformToUniversal(pokemonCard: PokemonCard): UniversalCard {\n    return {\n      id: pokemonCard.id,\n      gameId: this.POKEMON_GAME_ID,\n      name: pokemonCard.name,\n      setCode: pokemonCard.set.id,\n      setName: pokemonCard.set.name,\n      collectorNumber: pokemonCard.number,\n      rarity: pokemonCard.rarity,\n      externalId: pokemonCard.id,\n      externalSource: \"pokemontcg\",\n      attributes: {\n        supertype: pokemonCard.supertype,\n        subtypes: pokemonCard.subtypes,\n        hp: pokemonCard.hp,\n        types: pokemonCard.types,\n        evolvesFrom: pokemonCard.evolvesFrom,\n        evolvesTo: pokemonCard.evolvesTo,\n        attacks: pokemonCard.attacks,\n        weaknesses: pokemonCard.weaknesses,\n        resistances: pokemonCard.resistances,\n        retreatCost: pokemonCard.retreatCost,\n        convertedRetreatCost: pokemonCard.convertedRetreatCost,\n        artist: pokemonCard.artist,\n        flavorText: pokemonCard.flavorText,\n        nationalPokedexNumbers: pokemonCard.nationalPokedexNumbers,\n        series: pokemonCard.set.series,\n        releaseDate: pokemonCard.set.releaseDate,\n        tcgplayerUrl: pokemonCard.tcgplayer?.url,\n        prices: pokemonCard.tcgplayer?.prices,\n      },\n      imageUris: {\n        small: pokemonCard.images.small,\n        large: pokemonCard.images.large,\n      },\n      isOfficial: true,\n      isCommunitySubmitted: false,\n    };\n  }\n\n  async searchCards(\n    query: string,\n    options?: {\n      set?: string;\n      format?: string;\n      page?: number;\n      limit?: number;\n    },\n  ): Promise<CardSearchResult> {\n    try {\n      const page = options?.page || 1;\n      const pageSize = options?.limit || 20;\n\n      // Build search query\n      let searchQuery = `name:\"${query}*\"`;\n      if (options?.set) {\n        searchQuery += ` set.id:${options.set}`;\n      }\n\n      const url = `${POKEMON_TCG_API_BASE}/cards?q=${encodeURIComponent(searchQuery)}&page=${page}&pageSize=${pageSize}`;\n\n      logger.info(\"Pokemon TCG API search\", { query, options, url });\n\n      const response = await fetch(url, {\n        headers: this.getHeaders(),\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Pokemon TCG API error: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data: PokemonApiResponse = await response.json();\n\n      return {\n        cards: data.data.map((card) => this.transformToUniversal(card)),\n        total: data.totalCount,\n        page: data.page,\n        hasMore: data.page * data.pageSize < data.totalCount,\n      };\n    } catch (error) {\n      logger.error(\"Pokemon TCG adapter search failed\", error, {\n        query,\n        options,\n      });\n      throw error;\n    }\n  }\n\n  async getCardById(id: string): Promise<UniversalCard | null> {\n    try {\n      const url = `${POKEMON_TCG_API_BASE}/cards/${id}`;\n\n      logger.info(\"Pokemon TCG API get by ID\", { id, url });\n\n      const response = await fetch(url, {\n        headers: this.getHeaders(),\n      });\n\n      if (response.status === 404) {\n        return null;\n      }\n\n      if (!response.ok) {\n        throw new Error(\n          `Pokemon TCG API error: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data: { data: PokemonCard } = await response.json();\n\n      return this.transformToUniversal(data.data);\n    } catch (error) {\n      logger.error(\"Pokemon TCG adapter getCardById failed\", error, { id });\n      throw error;\n    }\n  }\n\n  async getCardByName(\n    name: string,\n    options?: { set?: string },\n  ): Promise<UniversalCard | null> {\n    try {\n      // Search for exact name match\n      let searchQuery = `name:\"${name}\"`;\n      if (options?.set) {\n        searchQuery += ` set.id:${options.set}`;\n      }\n\n      const url = `${POKEMON_TCG_API_BASE}/cards?q=${encodeURIComponent(searchQuery)}`;\n\n      logger.info(\"Pokemon TCG API get by name\", { name, options, url });\n\n      const response = await fetch(url, {\n        headers: this.getHeaders(),\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Pokemon TCG API error: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data: PokemonApiResponse = await response.json();\n\n      if (data.data.length === 0) {\n        return null;\n      }\n\n      // Return the first exact match\n      const firstCard = data.data[0];\n      if (!firstCard) {\n        return null;\n      }\n      return this.transformToUniversal(firstCard);\n    } catch (error) {\n      logger.error(\"Pokemon TCG adapter getCardByName failed\", error, {\n        name,\n        options,\n      });\n      throw error;\n    }\n  }\n\n  async autocomplete(query: string, limit = 20): Promise<AutocompleteResult> {\n    try {\n      if (query.length < 2) {\n        return { suggestions: [] };\n      }\n\n      // Search for cards matching the query\n      const searchQuery = `name:\"${query}*\"`;\n      const url = `${POKEMON_TCG_API_BASE}/cards?q=${encodeURIComponent(searchQuery)}&pageSize=${limit}`;\n\n      logger.info(\"Pokemon TCG API autocomplete\", { query, limit, url });\n\n      const response = await fetch(url, {\n        headers: this.getHeaders(),\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Pokemon TCG API error: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data: PokemonApiResponse = await response.json();\n\n      // Remove duplicates by name\n      const uniqueNames = new Map<string, string>();\n      data.data.forEach((card) => {\n        if (!uniqueNames.has(card.name)) {\n          uniqueNames.set(card.name, card.id);\n        }\n      });\n\n      return {\n        suggestions: Array.from(uniqueNames.entries()).map(([name, id]) => ({\n          id,\n          name,\n        })),\n      };\n    } catch (error) {\n      logger.error(\"Pokemon TCG adapter autocomplete failed\", error, {\n        query,\n        limit,\n      });\n      throw error;\n    }\n  }\n\n  async getRandomCard(options?: {\n    set?: string;\n    format?: string;\n  }): Promise<UniversalCard> {\n    try {\n      // Pokemon TCG API doesn't have a direct random endpoint\n      // We'll get a random page and pick a random card\n      let searchQuery = \"\";\n      if (options?.set) {\n        searchQuery = `set.id:${options.set}`;\n      }\n\n      const url = searchQuery\n        ? `${POKEMON_TCG_API_BASE}/cards?q=${encodeURIComponent(searchQuery)}&pageSize=250`\n        : `${POKEMON_TCG_API_BASE}/cards?pageSize=250`;\n\n      logger.info(\"Pokemon TCG API get random\", { options, url });\n\n      const response = await fetch(url, {\n        headers: this.getHeaders(),\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Pokemon TCG API error: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data: PokemonApiResponse = await response.json();\n\n      if (data.data.length === 0) {\n        throw new Error(\"No Pokemon cards found\");\n      }\n\n      // Pick a random card from the results\n      const randomIndex = Math.floor(Math.random() * data.data.length);\n      const randomCard = data.data[randomIndex];\n      if (!randomCard) {\n        throw new Error(\"No Pokemon cards found\");\n      }\n      return this.transformToUniversal(randomCard);\n    } catch (error) {\n      logger.error(\"Pokemon TCG adapter getRandomCard failed\", error, {\n        options,\n      });\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const pokemonTCGAdapter = new PokemonTCGAdapter();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/card-recognition/adapters/scryfall.adapter.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[655,658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[655,658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Scryfall Adapter\n *\n * Adapter for Magic: The Gathering cards via Scryfall API\n * Wraps the existing CardRecognitionService to provide the ICardAdapter interface\n */\n\nimport { cardRecognitionService } from \"../../card-recognition\";\nimport { logger } from \"../../../logger\";\nimport type {\n  ICardAdapter,\n  UniversalCard,\n  CardSearchResult,\n  AutocompleteResult,\n} from \"./base.adapter\";\n\nexport class ScryfallAdapter implements ICardAdapter {\n  private readonly MTG_GAME_ID = \"mtg-official\";\n\n  getGameId(): string {\n    return this.MTG_GAME_ID;\n  }\n\n  /**\n   * Transform MTG card to universal format\n   */\n  private transformToUniversal(mtgCard: any): UniversalCard {\n    return {\n      id: mtgCard.id,\n      gameId: this.MTG_GAME_ID,\n      name: mtgCard.name,\n      setCode: mtgCard.setCode,\n      setName: mtgCard.setName,\n      collectorNumber: mtgCard.collectorNumber,\n      rarity: mtgCard.rarity,\n      externalId: mtgCard.id,\n      externalSource: \"scryfall\",\n      attributes: {\n        manaCost: mtgCard.manaCost,\n        cmc: mtgCard.cmc,\n        typeLine: mtgCard.typeLine,\n        oracleText: mtgCard.oracleText,\n        power: mtgCard.power,\n        toughness: mtgCard.toughness,\n        loyalty: mtgCard.loyalty,\n        colors: mtgCard.colors,\n        colorIdentity: mtgCard.colorIdentity,\n        legalities: mtgCard.legalities,\n        prices: mtgCard.prices,\n        releasedAt: mtgCard.releasedAt,\n        scryfallUri: mtgCard.scryfallUri,\n        oracleId: mtgCard.oracleId,\n      },\n      imageUris: mtgCard.imageUris,\n      isOfficial: true,\n      isCommunitySubmitted: false,\n    };\n  }\n\n  async searchCards(\n    query: string,\n    options?: {\n      set?: string;\n      format?: string;\n      page?: number;\n      limit?: number;\n    },\n  ): Promise<CardSearchResult> {\n    try {\n      const result = await cardRecognitionService.searchCards(query, options);\n\n      return {\n        cards: result.cards.map((card) => this.transformToUniversal(card)),\n        total: result.total,\n        page: result.page,\n        hasMore: result.hasMore,\n      };\n    } catch (error) {\n      logger.error(\"Scryfall adapter search failed\", error, { query, options });\n      throw error;\n    }\n  }\n\n  async getCardById(id: string): Promise<UniversalCard | null> {\n    try {\n      const card = await cardRecognitionService.getCardById(id);\n      if (!card) return null;\n\n      return this.transformToUniversal(card);\n    } catch (error) {\n      logger.error(\"Scryfall adapter getCardById failed\", error, { id });\n      throw error;\n    }\n  }\n\n  async getCardByName(\n    name: string,\n    options?: { set?: string },\n  ): Promise<UniversalCard | null> {\n    try {\n      const card = await cardRecognitionService.getCardByName(name, options);\n      if (!card) return null;\n\n      return this.transformToUniversal(card);\n    } catch (error) {\n      logger.error(\"Scryfall adapter getCardByName failed\", error, {\n        name,\n        options,\n      });\n      throw error;\n    }\n  }\n\n  async autocomplete(query: string, limit = 20): Promise<AutocompleteResult> {\n    try {\n      const result = await cardRecognitionService.autocomplete(query, limit);\n      return result;\n    } catch (error) {\n      logger.error(\"Scryfall adapter autocomplete failed\", error, {\n        query,\n        limit,\n      });\n      throw error;\n    }\n  }\n\n  async getRandomCard(options?: {\n    set?: string;\n    format?: string;\n  }): Promise<UniversalCard> {\n    try {\n      const card = await cardRecognitionService.getRandomCard(options);\n      return this.transformToUniversal(card);\n    } catch (error) {\n      logger.error(\"Scryfall adapter getRandomCard failed\", error, { options });\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const scryfallAdapter = new ScryfallAdapter();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/card-recognition/adapters/yugioh.adapter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/card-recognition/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'eq' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'db' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CustomGameAdapter' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Universal Card Service\n *\n * Main service that routes card requests to appropriate adapters based on game ID\n * NOTE: games table not yet implemented in schema - custom games disabled\n */\n\nimport { eq } from \"drizzle-orm\";\nimport { db } from \"../../../shared/database-unified\";\n// TODO: Re-enable when games table is added to schema\n// import { games } from '../../../shared/schema';\nimport { logger } from \"../../logger\";\nimport {\n  ICardAdapter,\n  UniversalCard,\n  CardSearchResult,\n  AutocompleteResult,\n} from \"./adapters/base.adapter\";\nimport { scryfallAdapter } from \"./adapters/scryfall.adapter\";\nimport { pokemonTCGAdapter } from \"./adapters/pokemon.adapter\";\nimport { yugiohAdapter } from \"./adapters/yugioh.adapter\";\nimport { CustomGameAdapter } from \"./adapters/custom.adapter\";\n\nexport class UniversalCardService {\n  private adapters = new Map<string, ICardAdapter>();\n\n  constructor() {\n    // Register official game adapters\n    this.adapters.set(\"mtg-official\", scryfallAdapter);\n    this.adapters.set(\"pokemon-tcg\", pokemonTCGAdapter);\n    this.adapters.set(\"yugioh-tcg\", yugiohAdapter);\n    logger.info(\n      \"Universal Card Service initialized with MTG, Pokemon, and Yu-Gi-Oh adapters\",\n    );\n  }\n\n  /**\n   * Get or create adapter for a specific game\n   */\n  private async getAdapter(gameId: string): Promise<ICardAdapter> {\n    // Check if adapter already exists\n    if (this.adapters.has(gameId)) {\n      const adapter = this.adapters.get(gameId);\n      if (adapter) {\n        return adapter;\n      }\n    }\n\n    // TODO: Re-enable when games table is added to schema\n    // For now, only support official games\n    /* Original implementation - disabled until games table exists\n    // Load game configuration\n    const [game] = await db\n      .select()\n      .from(games)\n      .where(eq(games.id, gameId))\n      .limit(1);\n\n    if (!game) {\n      throw new Error(`Game not found: ${gameId}`);\n    }\n    */\n\n    // Determine which adapter to use\n    let adapter: ICardAdapter;\n\n    // Check for official game adapters\n    if (gameId === \"mtg-official\") {\n      adapter = scryfallAdapter;\n    } else if (gameId === \"pokemon-tcg\") {\n      adapter = pokemonTCGAdapter;\n    } else if (gameId === \"yugioh-tcg\") {\n      adapter = yugiohAdapter;\n    } else {\n      // Custom games not supported until games table is implemented\n      throw new Error(\n        `Custom games not yet supported - games table missing from schema. Supported games: mtg-official, pokemon-tcg, yugioh-tcg`,\n      );\n      // Default to custom game adapter for all user-defined games\n      // adapter = new CustomGameAdapter(gameId);\n    }\n\n    // Cache the adapter\n    this.adapters.set(gameId, adapter);\n    logger.info(\"Created adapter for game\", {\n      gameId,\n      adapterType: adapter.constructor.name,\n    });\n\n    return adapter;\n  }\n\n  /**\n   * Search for cards in a specific game\n   */\n  async searchCards(\n    gameId: string,\n    query: string,\n    options?: {\n      set?: string;\n      format?: string;\n      page?: number;\n      limit?: number;\n    },\n  ): Promise<CardSearchResult> {\n    try {\n      const adapter = await this.getAdapter(gameId);\n      return await adapter.searchCards(query, options);\n    } catch (error) {\n      logger.error(\"Universal card search failed\", error, {\n        gameId,\n        query,\n        options,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get card by ID in a specific game\n   */\n  async getCardById(gameId: string, id: string): Promise<UniversalCard | null> {\n    try {\n      const adapter = await this.getAdapter(gameId);\n      return await adapter.getCardById(id);\n    } catch (error) {\n      logger.error(\"Universal getCardById failed\", error, { gameId, id });\n      throw error;\n    }\n  }\n\n  /**\n   * Get card by name in a specific game\n   */\n  async getCardByName(\n    gameId: string,\n    name: string,\n    options?: { set?: string },\n  ): Promise<UniversalCard | null> {\n    try {\n      const adapter = await this.getAdapter(gameId);\n      return await adapter.getCardByName(name, options);\n    } catch (error) {\n      logger.error(\"Universal getCardByName failed\", error, {\n        gameId,\n        name,\n        options,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Autocomplete card names in a specific game\n   */\n  async autocomplete(\n    gameId: string,\n    query: string,\n    limit = 20,\n  ): Promise<AutocompleteResult> {\n    try {\n      const adapter = await this.getAdapter(gameId);\n      return await adapter.autocomplete(query, limit);\n    } catch (error) {\n      logger.error(\"Universal autocomplete failed\", error, {\n        gameId,\n        query,\n        limit,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get random card from a specific game\n   */\n  async getRandomCard(\n    gameId: string,\n    options?: {\n      set?: string;\n      format?: string;\n    },\n  ): Promise<UniversalCard> {\n    try {\n      const adapter = await this.getAdapter(gameId);\n      return await adapter.getRandomCard(options);\n    } catch (error) {\n      logger.error(\"Universal getRandomCard failed\", error, {\n        gameId,\n        options,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Clear adapter cache (useful for testing or when game config changes)\n   */\n  clearAdapterCache(): void {\n    // Keep the official game adapters\n    const mtgAdapter = this.adapters.get(\"mtg-official\");\n    const pokemonAdapter = this.adapters.get(\"pokemon-tcg\");\n    const yugiohAdapter = this.adapters.get(\"yugioh-tcg\");\n\n    this.adapters.clear();\n\n    if (mtgAdapter) {\n      this.adapters.set(\"mtg-official\", mtgAdapter);\n    }\n    if (pokemonAdapter) {\n      this.adapters.set(\"pokemon-tcg\", pokemonAdapter);\n    }\n    if (yugiohAdapter) {\n      this.adapters.set(\"yugioh-tcg\", yugiohAdapter);\n    }\n\n    logger.info(\"Adapter cache cleared\");\n  }\n}\n\n// Export singleton instance\nexport const universalCardService = new UniversalCardService();\n\n// Re-export types for convenience\nexport type { UniversalCard, CardSearchResult, AutocompleteResult };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/collaborative-streaming.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InsertStreamCoordinationSession' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3752,3755],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3752,3755],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3822,3825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3822,3825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":293,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":293,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8810,8813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8810,8813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":346,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":346,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10309,10312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10309,10312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":398,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":398,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11809,11812],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11809,11812],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":442,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":442,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13125,13128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13125,13128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":443,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":443,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13145,13148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13145,13148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'matches' is defined but never used. Allowed unused args must match /^_/u.","line":457,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":457,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":457,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":457,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13617,13620],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13617,13620],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":457,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":457,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13625,13628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13625,13628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":511,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":511,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15162,15165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15162,15165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":842,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":842,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27799,27802],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27799,27802],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1057,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1057,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[35420,35423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[35420,35423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1318,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1318,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[44950,44953],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[44950,44953],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'eventId' is defined but never used. Allowed unused args must match /^_/u.","line":1341,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":1341,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from \"../logger\";\nimport { storage } from \"../storage\";\nimport { streamingCoordinator } from \"./streaming-coordinator\";\nimport { aiStreamingMatcher } from \"./ai-streaming-matcher\";\nimport {\n  resolvePlatformIdentifiers,\n  getValidPlatformToken,\n} from \"./platform-oauth\";\nimport { youtubeAPI } from \"./youtube-api\";\nimport { twitchAPI } from \"./twitch-api\";\nimport { facebookAPI } from \"./facebook-api\";\n\nimport type {\n  CollaborativeStreamEvent,\n  StreamCollaborator,\n  StreamCoordinationSession,\n  InsertCollaborativeStreamEvent,\n  InsertStreamCollaborator,\n  InsertStreamCoordinationSession,\n} from \"@shared/schema\";\n\n/**\n * Collaborative Streaming Service\n * Manages multi-streamer coordination, automated scheduling, and real-time collaboration\n */\nexport class CollaborativeStreamingService {\n  private static instance: CollaborativeStreamingService;\n  private activeCoordinationSessions = new Map<\n    string,\n    StreamCoordinationSession\n  >();\n  private eventSubscriptions = new Map<string, Set<string>>(); // eventId -> Set of user IDs\n\n  static getInstance(): CollaborativeStreamingService {\n    if (!CollaborativeStreamingService.instance) {\n      CollaborativeStreamingService.instance =\n        new CollaborativeStreamingService();\n    }\n    return CollaborativeStreamingService.instance;\n  }\n\n  /**\n   * Create a new collaborative streaming event\n   */\n  async createCollaborativeEvent(\n    creatorId: string,\n    eventData: Omit<InsertCollaborativeStreamEvent, \"creatorId\">,\n  ): Promise<CollaborativeStreamEvent> {\n    try {\n      const event = await storage.createCollaborativeStreamEvent({\n        ...eventData,\n        creatorId,\n        status: \"planning\",\n      });\n\n      // Add creator as the primary host\n      await this.addCollaborator(event.id, {\n        eventId: event.id, // Required field for compatibility\n        userId: creatorId,\n        role: \"host\",\n        status: \"accepted\",\n        invitedByUserId: creatorId,\n        platformHandles: JSON.stringify({}),\n        streamingCapabilities: JSON.stringify([\"host\", \"co_stream\"]),\n        availableTimeSlots: JSON.stringify({}),\n        contentSpecialties: JSON.stringify([]),\n        technicalSetup: JSON.stringify({}),\n      });\n\n      // Initialize event subscription tracking\n      this.eventSubscriptions.set(event.id, new Set([creatorId]));\n\n      logger.info(\"Collaborative streaming event created\", {\n        eventId: event.id,\n        creatorId,\n        title: event.title,\n      });\n\n      return event;\n    } catch (error) {\n      logger.error(\"Failed to create collaborative streaming event\", error, {\n        creatorId,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Add a collaborator to a streaming event\n   */\n  async addCollaborator(\n    eventId: string,\n    collaboratorData: Omit<InsertStreamCollaborator, \"streamEventId\">,\n  ): Promise<StreamCollaborator> {\n    try {\n      const collaborator = await storage.createStreamCollaborator({\n        ...collaboratorData,\n        streamEventId: eventId,\n      });\n\n      // Add to subscription tracking\n      const eventSubs = this.eventSubscriptions.get(eventId) || new Set();\n      eventSubs.add(collaborator.userId);\n      this.eventSubscriptions.set(eventId, eventSubs);\n\n      logger.info(\"Collaborator added to streaming event\", {\n        eventId,\n        userId: collaborator.userId,\n        role: collaborator.role,\n      });\n\n      return collaborator;\n    } catch (error) {\n      logger.error(\"Failed to add collaborator\", error, { eventId });\n      throw error;\n    }\n  }\n\n  /**\n   * Get AI-powered collaboration suggestions for an event\n   */\n  async getCollaborationSuggestions(\n    eventId: string,\n    requesterId: string,\n  ): Promise<{\n    suggestedCollaborators: any[];\n    strategicRecommendations: string[];\n    optimalScheduling: any;\n  }> {\n    try {\n      const event = await storage.getCollaborativeStreamEvent(eventId);\n      if (!event) {\n        throw new Error(`Collaborative event not found: ${eventId}`);\n      }\n\n      // Use AI matching to find potential collaborators\n      const matchingResults = await aiStreamingMatcher.findStreamingPartners({\n        userId: requesterId,\n        games: [event.contentType || \"general\"],\n        maxResults: 10,\n        urgency: \"low\",\n        // Note: platforms removed as not part of MatchingCriteria type\n      });\n\n      // Generate strategic recommendations\n      const strategicRecommendations = this.generateStrategicRecommendations(\n        event,\n        matchingResults,\n      );\n\n      // Calculate optimal scheduling\n      const optimalScheduling = await this.calculateOptimalScheduling(\n        event,\n        matchingResults,\n      );\n\n      return {\n        suggestedCollaborators: matchingResults,\n        strategicRecommendations,\n        optimalScheduling,\n      };\n    } catch (error) {\n      logger.error(\"Failed to get collaboration suggestions\", error, {\n        eventId,\n        requesterId,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Start real-time coordination session for a collaborative event\n   */\n  async startCoordinationSession(\n    eventId: string,\n    hostUserId: string,\n  ): Promise<StreamCoordinationSession> {\n    try {\n      const event = await storage.getCollaborativeStreamEvent(eventId);\n      if (!event) {\n        throw new Error(`Collaborative event not found: ${eventId}`);\n      }\n\n      // Create coordination session\n      const session = await storage.createStreamCoordinationSession({\n        streamEventId: eventId,\n        eventId: eventId, // Required field for compatibility\n        actualStartTime: new Date(),\n        currentPhase: \"preparation\",\n        currentHost: hostUserId,\n        activeCollaborators: JSON.stringify([hostUserId]),\n        platformStatuses: JSON.stringify({}),\n        viewerCounts: JSON.stringify({}),\n        coordinationEvents: JSON.stringify([]),\n        chatModerationActive: false,\n        streamQualitySettings: JSON.stringify({}),\n        audioCoordination: JSON.stringify({}),\n      });\n\n      // Cache active session\n      this.activeCoordinationSessions.set(eventId, session);\n\n      // Create stream session for all platforms\n      const streamingPlatforms = event.streamingPlatforms\n        ? JSON.parse(event.streamingPlatforms)\n        : [];\n      await streamingCoordinator.createStreamSession({\n        title: event.title,\n        description: event.description || \"\",\n        category: event.contentType || \"general\",\n        platforms: streamingPlatforms.map((p: string) => ({\n          id: p,\n          name: p.charAt(0).toUpperCase() + p.slice(1),\n          isConnected: true,\n        })),\n        hostUserId,\n        coHostUserIds: [], // Will be populated as collaborators join\n        scheduledStartTime: event.scheduledStartTime,\n        tags: [\"collaborative\", event.targetAudience || \"general\"],\n        isPublic: true,\n        autoStartEnabled: false,\n        crossPlatformChat: true,\n        recordingEnabled: false,\n        multistreaming: true,\n        status: \"scheduled\" as const,\n      });\n\n      logger.info(\"Coordination session started\", {\n        eventId,\n        sessionId: session.id,\n        hostUserId,\n      });\n\n      return session;\n    } catch (error) {\n      logger.error(\"Failed to start coordination session\", error, {\n        eventId,\n        hostUserId,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Update coordination session phase and sync across platforms\n   */\n  async updateCoordinationPhase(\n    eventId: string,\n    newPhase: \"preparation\" | \"live\" | \"break\" | \"wrap_up\" | \"ended\",\n    hostUserId: string,\n  ): Promise<void> {\n    try {\n      const session = this.activeCoordinationSessions.get(eventId);\n      if (!session) {\n        throw new Error(`No active coordination session for event: ${eventId}`);\n      }\n\n      // Update session phase\n      await storage.updateStreamCoordinationSession(session.id, {\n        currentPhase: newPhase,\n        updatedAt: new Date(),\n      });\n\n      // Update cached session\n      session.currentPhase = newPhase;\n      this.activeCoordinationSessions.set(eventId, session);\n\n      // Coordinate across platforms based on phase\n      await this.coordinatePlatformActions(eventId, newPhase);\n\n      logger.info(\"Coordination phase updated\", {\n        eventId,\n        newPhase,\n        hostUserId,\n      });\n    } catch (error) {\n      logger.error(\"Failed to update coordination phase\", error, {\n        eventId,\n        newPhase,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get real-time coordination status for an event\n   */\n  async getCoordinationStatus(eventId: string): Promise<{\n    session?: StreamCoordinationSession;\n    collaborators: StreamCollaborator[];\n    platformStatuses: Record<string, string>;\n    activeViewers: number;\n    coordinationMetrics: any;\n  }> {\n    try {\n      const session = this.activeCoordinationSessions.get(eventId);\n      const collaborators = await storage.getStreamCollaborators(eventId);\n\n      let platformStatuses: Record<string, string> = {};\n      let activeViewers = 0;\n\n      if (session) {\n        platformStatuses = session.platformStatuses\n          ? JSON.parse(session.platformStatuses)\n          : {};\n        const viewerCounts: Record<string, number> = session.viewerCounts\n          ? JSON.parse(session.viewerCounts)\n          : {};\n        activeViewers = Object.values(viewerCounts).reduce(\n          (sum: number, count: number) => sum + count,\n          0,\n        );\n      }\n\n      const coordinationMetrics = {\n        totalCollaborators: collaborators.length,\n        activeCollaborators: session\n          ? JSON.parse(session.activeCollaborators || \"[]\").length\n          : 0,\n        averageResponseTime: this.calculateAverageResponseTime(eventId),\n        coordinationHealth: this.calculateCoordinationHealth(\n          session,\n          collaborators,\n        ),\n      };\n\n      return {\n        session,\n        collaborators,\n        platformStatuses,\n        activeViewers,\n        coordinationMetrics,\n      };\n    } catch (error) {\n      logger.error(\"Failed to get coordination status\", error, { eventId });\n      throw error;\n    }\n  }\n\n  /**\n   * Handle collaborator joining live session\n   */\n  async handleCollaboratorJoin(\n    eventId: string,\n    userId: string,\n    platformData: any,\n  ): Promise<void> {\n    try {\n      const session = this.activeCoordinationSessions.get(eventId);\n      if (!session) {\n        throw new Error(`No active coordination session for event: ${eventId}`);\n      }\n\n      // Update active collaborators\n      const activeCollaborators = JSON.parse(\n        session.activeCollaborators || \"[]\",\n      );\n      if (!activeCollaborators.includes(userId)) {\n        activeCollaborators.push(userId);\n\n        await storage.updateStreamCoordinationSession(session.id, {\n          activeCollaborators: JSON.stringify(activeCollaborators),\n          updatedAt: new Date(),\n        });\n\n        // Update cached session\n        session.activeCollaborators = JSON.stringify(activeCollaborators);\n        this.activeCoordinationSessions.set(eventId, session);\n      }\n\n      // Log coordination event\n      await this.logCoordinationEvent(eventId, {\n        type: \"collaborator_joined\",\n        userId,\n        timestamp: new Date().toISOString(),\n        data: platformData,\n      });\n\n      logger.info(\"Collaborator joined live session\", {\n        eventId,\n        userId,\n        activeCount: activeCollaborators.length,\n      });\n    } catch (error) {\n      logger.error(\"Failed to handle collaborator join\", error, {\n        eventId,\n        userId,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Generate strategic recommendations for collaboration\n   */\n  private generateStrategicRecommendations(\n    event: CollaborativeStreamEvent,\n    matches: any[],\n  ): string[] {\n    const recommendations: string[] = [];\n\n    // Audience synergy recommendations\n    if (matches.some((m) => m.audienceOverlap > 0.7)) {\n      recommendations.push(\n        \"High audience overlap detected - consider cross-promotion strategies\",\n      );\n    }\n\n    // Content type optimization\n    if (event.contentType === \"gaming\") {\n      recommendations.push(\n        \"Gaming content: Plan for smooth transitions between hosts and consider viewer participation\",\n      );\n    }\n\n    // Platform strategy\n    const streamingPlatforms = event.streamingPlatforms\n      ? JSON.parse(event.streamingPlatforms)\n      : [];\n    if (streamingPlatforms.length > 1) {\n      recommendations.push(\n        \"Multi-platform streaming: Coordinate chat moderation and ensure consistent branding\",\n      );\n    }\n\n    // Timing optimization\n    const scheduledHour = new Date(event.scheduledStartTime).getHours();\n    if (scheduledHour >= 19 && scheduledHour <= 22) {\n      recommendations.push(\n        \"Prime time slot detected - maximize engagement with interactive elements\",\n      );\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Calculate optimal scheduling based on collaborator availability\n   */\n  private async calculateOptimalScheduling(\n    event: CollaborativeStreamEvent,\n    matches: any[],\n  ): Promise<any> {\n    // This would integrate with calendar systems and timezone coordination\n    // For now, return basic scheduling optimization\n    return {\n      recommendedStartTime: event.scheduledStartTime,\n      timezoneCoverage: this.calculateTimezoneCoverage(matches),\n      conflictWarnings: [],\n      optimalDuration: event.estimatedDuration,\n    };\n  }\n\n  /**\n   * Calculate timezone coverage for global audience reach\n   */\n  private calculateTimezoneCoverage(matches: any[]): any {\n    // Analyze timezone distribution of potential collaborators\n    return {\n      primaryTimezone: \"UTC-5\",\n      coverage: \"North America focused\",\n      suggestedAlternatives: [],\n    };\n  }\n\n  /**\n   * Coordinate actions across streaming platforms\n   */\n  private async coordinatePlatformActions(\n    eventId: string,\n    phase: string,\n  ): Promise<void> {\n    try {\n      switch (phase) {\n        case \"live\":\n          // Start streams on all platforms\n          await this.startCrossPlatformStreaming(eventId);\n          break;\n        case \"break\":\n          // Sync break across platforms\n          await this.coordinateBreak(eventId);\n          break;\n        case \"ended\":\n          // End streams and cleanup\n          await this.endCrossPlatformStreaming(eventId);\n          break;\n      }\n    } catch (error) {\n      logger.error(\"Failed to coordinate platform actions\", error, {\n        eventId,\n        phase,\n      });\n    }\n  }\n\n  /**\n   * Start synchronized streaming across multiple platforms using production-ready APIs\n   */\n  private async startCrossPlatformStreaming(eventId: string): Promise<void> {\n    try {\n      const session = this.activeCoordinationSessions.get(eventId);\n      if (!session) {\n        throw new Error(`No active coordination session for event: ${eventId}`);\n      }\n\n      const event = await storage.getCollaborativeStreamEvent(eventId);\n      if (!event) {\n        throw new Error(`Collaborative event not found: ${eventId}`);\n      }\n\n      const platformResults: Record<string, any> = {};\n      const platformErrors: string[] = [];\n\n      // Validate current host before proceeding\n      if (!session.currentHost) {\n        throw new Error(\n          \"No current host available for cross-platform streaming coordination\",\n        );\n      }\n\n      // Get platform identifiers for the current host\n      const platformIdentifiers = await resolvePlatformIdentifiers(\n        session.currentHost,\n      );\n\n      // Start streaming on each configured platform\n      const streamingPlatforms = event.streamingPlatforms\n        ? JSON.parse(event.streamingPlatforms)\n        : [];\n      for (const platformName of streamingPlatforms) {\n        try {\n          switch (platformName) {\n            case \"youtube\":\n              if (youtubeAPI && youtubeAPI.isConfigured()) {\n                try {\n                  // Get valid access token for YouTube\n                  const accessToken = await getValidPlatformToken(\n                    session.currentHost,\n                    \"youtube\",\n                  );\n                  const channelId = platformIdentifiers.youtube?.channelId;\n\n                  if (accessToken && channelId) {\n                    // Make real API call to check YouTube stream status\n                    const streamStatus =\n                      await youtubeAPI.getLiveStream(channelId);\n\n                    if (streamStatus && streamStatus.status === \"live\") {\n                      platformResults.youtube = {\n                        streamId: streamStatus.id,\n                        status: \"live\",\n                        channelId: channelId,\n                      };\n                      logger.info(\"YouTube stream detected and synced\", {\n                        eventId,\n                        streamId: streamStatus.id,\n                        channelId,\n                      });\n                    } else {\n                      platformResults.youtube = {\n                        status: \"ready\",\n                        message: \"YouTube ready for streaming\",\n                        channelId: channelId,\n                      };\n                      logger.info(\"YouTube ready for streaming\", {\n                        eventId,\n                        channelId,\n                      });\n                    }\n                  } else {\n                    platformResults.youtube = {\n                      status: \"needs_setup\",\n                      message: accessToken\n                        ? \"YouTube channel ID not found - please link your account\"\n                        : \"YouTube access token invalid - please reconnect\",\n                    };\n                    logger.warn(\n                      \"YouTube coordination blocked by missing credentials\",\n                      {\n                        eventId,\n                        hasToken: !!accessToken,\n                        hasChannelId: !!channelId,\n                      },\n                    );\n                  }\n                } catch (error) {\n                  logger.error(\"Failed to sync YouTube stream status\", error, {\n                    eventId,\n                  });\n                  platformResults.youtube = {\n                    status: \"error\",\n                    error:\n                      error instanceof Error ? error.message : \"Unknown error\",\n                  };\n                }\n              } else {\n                platformResults.youtube = {\n                  status: \"unavailable\",\n                  message: \"YouTube API not configured\",\n                };\n                logger.warn(\"YouTube API not available\", { eventId });\n              }\n              break;\n\n            case \"twitch\":\n              if (twitchAPI) {\n                try {\n                  // Get valid access token for Twitch\n                  const accessToken = await getValidPlatformToken(\n                    session.currentHost,\n                    \"twitch\",\n                  );\n                  const twitchUserId = platformIdentifiers.twitch;\n\n                  if (accessToken && twitchUserId) {\n                    // Twitch API integration - placeholder for future implementation\n                    // Note: TwitchAPIService doesn't have getStreamByUserId method yet\n                    // For now, assume stream is ready but not live\n                    platformResults.twitch = {\n                      status: \"ready\",\n                      message: \"Twitch ready for streaming\",\n                      userId: twitchUserId,\n                    };\n                    logger.info(\"Twitch ready for streaming\", {\n                      eventId,\n                      userId: twitchUserId,\n                    });\n                  } else {\n                    platformResults.twitch = {\n                      status: \"needs_setup\",\n                      message: accessToken\n                        ? \"Twitch user ID not found - please link your account\"\n                        : \"Twitch access token invalid - please reconnect\",\n                    };\n                    logger.warn(\n                      \"Twitch coordination blocked by missing credentials\",\n                      {\n                        eventId,\n                        hasToken: !!accessToken,\n                        hasUserId: !!twitchUserId,\n                      },\n                    );\n                  }\n                } catch (error) {\n                  logger.error(\"Failed to sync Twitch stream status\", error, {\n                    eventId,\n                  });\n                  platformResults.twitch = {\n                    status: \"error\",\n                    error:\n                      error instanceof Error ? error.message : \"Unknown error\",\n                  };\n                }\n              } else {\n                platformResults.twitch = {\n                  status: \"unavailable\",\n                  message: \"Twitch API not configured\",\n                };\n                logger.warn(\"Twitch API not available\", { eventId });\n              }\n              break;\n\n            case \"facebook\":\n              if (facebookAPI && facebookAPI.isConfigured()) {\n                try {\n                  // Get valid access token for Facebook\n                  const accessToken = await getValidPlatformToken(\n                    session.currentHost,\n                    \"facebook\",\n                  );\n                  const pageId = platformIdentifiers.facebook?.pageId;\n\n                  if (accessToken && pageId) {\n                    // Make real API call to check Facebook live video status\n                    const liveVideosResult = await facebookAPI.getLiveVideos(\n                      pageId,\n                      accessToken,\n                    );\n                    const liveStatus = liveVideosResult?.data?.[0];\n\n                    if (liveStatus && liveStatus.status === \"LIVE\") {\n                      platformResults.facebook = {\n                        streamId: liveStatus.id,\n                        status: \"live\",\n                        viewerCount: liveStatus.live_views || 0,\n                        pageId: pageId,\n                      };\n                      logger.info(\"Facebook live video detected and synced\", {\n                        eventId,\n                        streamId: liveStatus.id,\n                        pageId,\n                      });\n                    } else {\n                      platformResults.facebook = {\n                        status: \"ready\",\n                        message: \"Facebook ready for streaming\",\n                        pageId: pageId,\n                      };\n                      logger.info(\"Facebook ready for streaming\", {\n                        eventId,\n                        pageId,\n                      });\n                    }\n                  } else {\n                    platformResults.facebook = {\n                      status: \"needs_setup\",\n                      message: accessToken\n                        ? \"Facebook page ID not found - please link your page\"\n                        : \"Facebook access token invalid - please reconnect\",\n                    };\n                    logger.warn(\n                      \"Facebook coordination blocked by missing credentials\",\n                      { eventId, hasToken: !!accessToken, hasPageId: !!pageId },\n                    );\n                  }\n                } catch (error) {\n                  logger.error(\n                    \"Failed to sync Facebook live video status\",\n                    error,\n                    { eventId },\n                  );\n                  platformResults.facebook = {\n                    status: \"error\",\n                    error:\n                      error instanceof Error ? error.message : \"Unknown error\",\n                  };\n                }\n              } else {\n                platformResults.facebook = {\n                  status: \"unavailable\",\n                  message: \"Facebook API not configured\",\n                };\n                logger.warn(\"Facebook API not available\", { eventId });\n              }\n              break;\n\n            default:\n              logger.warn(\"Unsupported platform for streaming coordination\", {\n                platform: platformName,\n                eventId,\n              });\n          }\n        } catch (error) {\n          logger.error(`Failed to start ${platformName} streaming`, error, {\n            eventId,\n          });\n          platformErrors.push(\n            `${platformName}: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n          );\n        }\n      }\n\n      // Update session with actual platform statuses from API results\n      const platformStatuses = Object.keys(platformResults).reduce(\n        (acc, platform) => {\n          const result = platformResults[platform];\n          acc[platform] = result.status || \"unknown\";\n          return acc;\n        },\n        {} as Record<string, string>,\n      );\n\n      // Extract viewer counts from API results\n      const viewerCounts = Object.keys(platformResults).reduce(\n        (acc, platform) => {\n          const result = platformResults[platform];\n          if (result.viewerCount !== undefined) {\n            acc[platform] = result.viewerCount;\n          }\n          return acc;\n        },\n        {} as Record<string, number>,\n      );\n\n      // Add errors to platform statuses\n      platformErrors.forEach((error) => {\n        const [platform] = error.split(\":\");\n        if (platform) {\n          platformStatuses[platform] = \"error\";\n        }\n      });\n\n      // Persist platform statuses and viewer counts to storage\n      await storage.updateStreamCoordinationSession(session.id, {\n        platformStatuses: JSON.stringify(platformStatuses),\n        viewerCounts: JSON.stringify(viewerCounts),\n        coordinationEvents: JSON.stringify([\n          ...(session.coordinationEvents\n            ? JSON.parse(session.coordinationEvents)\n            : []),\n          {\n            type: \"platform_sync_started\",\n            timestamp: new Date().toISOString(),\n            data: { platformResults, errors: platformErrors },\n          },\n        ]),\n        updatedAt: new Date(),\n      });\n\n      // Update cached session with persisted data\n      session.platformStatuses = JSON.stringify(platformStatuses);\n      session.viewerCounts = JSON.stringify(viewerCounts);\n      this.activeCoordinationSessions.set(eventId, session);\n\n      logger.info(\"Cross-platform streaming coordination initiated\", {\n        eventId,\n        successfulPlatforms: Object.keys(platformResults),\n        errors: platformErrors,\n      });\n    } catch (error) {\n      logger.error(\"Failed to start cross-platform streaming\", error, {\n        eventId,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Coordinate synchronized break across all platforms\n   */\n  private async coordinateBreak(eventId: string): Promise<void> {\n    try {\n      const session = this.activeCoordinationSessions.get(eventId);\n      if (!session) {\n        throw new Error(`No active coordination session for event: ${eventId}`);\n      }\n\n      const event = await storage.getCollaborativeStreamEvent(eventId);\n      if (!event) {\n        throw new Error(`Collaborative event not found: ${eventId}`);\n      }\n\n      // Validate current host before proceeding\n      if (!session.currentHost) {\n        throw new Error(\"No current host available for break coordination\");\n      }\n\n      // Get platform identifiers for the current host\n      const platformIdentifiers = await resolvePlatformIdentifiers(\n        session.currentHost,\n      );\n      const breakResults: Record<string, any> = {};\n\n      // Coordinate break on each active platform with real API calls\n      const streamingPlatforms = event.streamingPlatforms\n        ? JSON.parse(event.streamingPlatforms)\n        : [];\n      for (const platformName of streamingPlatforms) {\n        try {\n          switch (platformName) {\n            case \"youtube\":\n              if (youtubeAPI && youtubeAPI.isConfigured()) {\n                const accessToken = await getValidPlatformToken(\n                  session.currentHost,\n                  \"youtube\",\n                );\n                const channelId = platformIdentifiers.youtube?.channelId;\n\n                if (accessToken && channelId) {\n                  // Note: YouTube API doesn't have updateBroadcastDescription method yet\n                  // This is a placeholder for future implementation\n                  breakResults.youtube = {\n                    status: \"break\",\n                    action: \"manual\",\n                    timestamp: new Date(),\n                  };\n                  logger.info(\n                    \"YouTube break coordination requires manual action\",\n                    { eventId, channelId },\n                  );\n                } else {\n                  breakResults.youtube = {\n                    status: \"break\",\n                    action: \"manual\",\n                    message: \"Manual break coordination required\",\n                  };\n                  logger.warn(\n                    \"YouTube break coordination limited by missing credentials\",\n                    { eventId },\n                  );\n                }\n              } else {\n                breakResults.youtube = {\n                  status: \"break\",\n                  action: \"unavailable\",\n                  message: \"YouTube API not available\",\n                };\n              }\n              break;\n\n            case \"twitch\":\n              if (twitchAPI) {\n                const accessToken = await getValidPlatformToken(\n                  session.currentHost,\n                  \"twitch\",\n                );\n                const twitchUserId = platformIdentifiers.twitch;\n\n                if (accessToken && twitchUserId) {\n                  // Note: Twitch API doesn't have updateStreamTitle method yet\n                  // This is a placeholder for future implementation\n                  breakResults.twitch = {\n                    status: \"break\",\n                    action: \"manual\",\n                    timestamp: new Date(),\n                  };\n                  logger.info(\n                    \"Twitch break coordination requires manual action\",\n                    { eventId, userId: twitchUserId },\n                  );\n                } else {\n                  breakResults.twitch = {\n                    status: \"break\",\n                    action: \"manual\",\n                    message: \"Manual break coordination required\",\n                  };\n                  logger.warn(\n                    \"Twitch break coordination limited by missing credentials\",\n                    { eventId },\n                  );\n                }\n              } else {\n                breakResults.twitch = {\n                  status: \"break\",\n                  action: \"unavailable\",\n                  message: \"Twitch API not available\",\n                };\n              }\n              break;\n\n            case \"facebook\":\n              if (facebookAPI && facebookAPI.isConfigured()) {\n                const accessToken = await getValidPlatformToken(\n                  session.currentHost,\n                  \"facebook\",\n                );\n                const pageId = platformIdentifiers.facebook?.pageId;\n\n                if (accessToken && pageId) {\n                  // Note: Facebook API doesn't have updateLiveVideoDescription method yet\n                  // This is a placeholder for future implementation\n                  breakResults.facebook = {\n                    status: \"break\",\n                    action: \"manual\",\n                    timestamp: new Date(),\n                  };\n                  logger.info(\n                    \"Facebook break coordination requires manual action\",\n                    { eventId, pageId },\n                  );\n                } else {\n                  breakResults.facebook = {\n                    status: \"break\",\n                    action: \"manual\",\n                    message: \"Manual break coordination required\",\n                  };\n                  logger.warn(\n                    \"Facebook break coordination limited by missing credentials\",\n                    { eventId },\n                  );\n                }\n              } else {\n                breakResults.facebook = {\n                  status: \"break\",\n                  action: \"unavailable\",\n                  message: \"Facebook API not available\",\n                };\n              }\n              break;\n\n            default:\n              logger.warn(\"Unsupported platform for break coordination\", {\n                platform: platformName,\n                eventId,\n              });\n          }\n        } catch (error) {\n          logger.error(`Failed to coordinate break on ${platformName}`, error, {\n            eventId,\n          });\n          breakResults[platformName] = {\n            status: \"error\",\n            action: \"break_failed\",\n            error: error instanceof Error ? error.message : \"Unknown error\",\n          };\n        }\n      }\n\n      // Update platform statuses to 'break' and persist\n      const platformStatuses = Object.keys(breakResults).reduce(\n        (acc, platform) => {\n          acc[platform] = breakResults[platform].status || \"break\";\n          return acc;\n        },\n        {} as Record<string, string>,\n      );\n\n      await storage.updateStreamCoordinationSession(session.id, {\n        platformStatuses: JSON.stringify(platformStatuses),\n        coordinationEvents: JSON.stringify([\n          ...(session.coordinationEvents\n            ? JSON.parse(session.coordinationEvents)\n            : []),\n          {\n            type: \"break_coordinated\",\n            timestamp: new Date().toISOString(),\n            data: { breakResults },\n          },\n        ]),\n        updatedAt: new Date(),\n      });\n\n      // Update cached session\n      session.platformStatuses = JSON.stringify(platformStatuses);\n      this.activeCoordinationSessions.set(eventId, session);\n\n      logger.info(\"Break coordination completed across platforms\", {\n        eventId,\n        platforms: Object.keys(breakResults),\n        results: breakResults,\n      });\n    } catch (error) {\n      logger.error(\"Failed to coordinate break\", error, { eventId });\n      throw error;\n    }\n  }\n\n  /**\n   * End synchronized streaming across all platforms\n   */\n  private async endCrossPlatformStreaming(eventId: string): Promise<void> {\n    try {\n      const session = this.activeCoordinationSessions.get(eventId);\n      if (!session) {\n        logger.warn(\"No active coordination session found for ending\", {\n          eventId,\n        });\n        return;\n      }\n\n      const event = await storage.getCollaborativeStreamEvent(eventId);\n      if (!event) {\n        throw new Error(`Collaborative event not found: ${eventId}`);\n      }\n\n      // Validate current host before proceeding\n      if (!session.currentHost) {\n        throw new Error(\n          \"No current host available for ending cross-platform streaming\",\n        );\n      }\n\n      // Get platform identifiers for the current host\n      const platformIdentifiers = await resolvePlatformIdentifiers(\n        session.currentHost,\n      );\n      const endResults: Record<string, any> = {};\n      const errors: string[] = [];\n\n      // End streaming on each platform with real API calls\n      const streamingPlatforms = event.streamingPlatforms\n        ? JSON.parse(event.streamingPlatforms)\n        : [];\n      for (const platformName of streamingPlatforms) {\n        try {\n          switch (platformName) {\n            case \"youtube\":\n              if (youtubeAPI && youtubeAPI.isConfigured()) {\n                const accessToken = await getValidPlatformToken(\n                  session.currentHost,\n                  \"youtube\",\n                );\n                const channelId = platformIdentifiers.youtube?.channelId;\n\n                if (accessToken && channelId) {\n                  // End YouTube live broadcast\n                  const broadcastStatus =\n                    await youtubeAPI.getLiveStream(channelId);\n                  if (broadcastStatus && broadcastStatus.status === \"live\") {\n                    await youtubeAPI.transitionBroadcast(\n                      broadcastStatus.id,\n                      \"complete\",\n                      accessToken,\n                    );\n                    endResults.youtube = {\n                      status: \"ended\",\n                      action: \"broadcast_ended\",\n                      timestamp: new Date(),\n                      channelId,\n                    };\n                    logger.info(\"YouTube broadcast ended via API\", {\n                      eventId,\n                      broadcastId: broadcastStatus.id,\n                      channelId,\n                    });\n                  } else {\n                    endResults.youtube = {\n                      status: \"ended\",\n                      action: \"already_ended\",\n                      timestamp: new Date(),\n                      channelId,\n                    };\n                    logger.info(\"YouTube broadcast already ended\", {\n                      eventId,\n                      channelId,\n                    });\n                  }\n                } else {\n                  endResults.youtube = {\n                    status: \"ended\",\n                    action: \"manual\",\n                    message: \"Manual stream ending required\",\n                  };\n                  logger.warn(\n                    \"YouTube stream ending limited by missing credentials\",\n                    { eventId },\n                  );\n                }\n              } else {\n                endResults.youtube = {\n                  status: \"ended\",\n                  action: \"unavailable\",\n                  message: \"YouTube API not available\",\n                };\n              }\n              break;\n\n            case \"twitch\":\n              if (twitchAPI) {\n                const accessToken = await getValidPlatformToken(\n                  session.currentHost,\n                  \"twitch\",\n                );\n                const twitchUserId = platformIdentifiers.twitch;\n\n                if (accessToken && twitchUserId) {\n                  // Note: TwitchAPIService doesn't have getStreamByUserId method yet\n                  // Placeholder for future implementation - assume stream has ended\n                  endResults.twitch = {\n                    status: \"ended\",\n                    action: \"stream_confirmed_ended\",\n                    timestamp: new Date(),\n                    userId: twitchUserId,\n                  };\n                  logger.info(\"Twitch stream confirmed ended\", {\n                    eventId,\n                    userId: twitchUserId,\n                  });\n                } else {\n                  endResults.twitch = {\n                    status: \"ended\",\n                    action: \"manual\",\n                    message: \"Manual stream ending required\",\n                  };\n                  logger.warn(\n                    \"Twitch stream ending limited by missing credentials\",\n                    { eventId },\n                  );\n                }\n              } else {\n                endResults.twitch = {\n                  status: \"ended\",\n                  action: \"unavailable\",\n                  message: \"Twitch API not available\",\n                };\n              }\n              break;\n\n            case \"facebook\":\n              if (facebookAPI && facebookAPI.isConfigured()) {\n                const accessToken = await getValidPlatformToken(\n                  session.currentHost,\n                  \"facebook\",\n                );\n                const pageId = platformIdentifiers.facebook?.pageId;\n\n                if (accessToken && pageId) {\n                  // End Facebook live video\n                  const liveVideosResult = facebookAPI.getLiveVideos\n                    ? await facebookAPI.getLiveVideos(pageId, accessToken)\n                    : null;\n                  const liveStatus = liveVideosResult?.data?.[0];\n                  if (liveStatus && liveStatus.status === \"LIVE\") {\n                    await facebookAPI.endLiveVideo(liveStatus.id, accessToken);\n                    endResults.facebook = {\n                      status: \"ended\",\n                      action: \"live_video_ended\",\n                      timestamp: new Date(),\n                      pageId,\n                    };\n                    logger.info(\"Facebook live video ended via API\", {\n                      eventId,\n                      liveVideoId: liveStatus.id,\n                      pageId,\n                    });\n                  } else {\n                    endResults.facebook = {\n                      status: \"ended\",\n                      action: \"already_ended\",\n                      timestamp: new Date(),\n                      pageId,\n                    };\n                    logger.info(\"Facebook live video already ended\", {\n                      eventId,\n                      pageId,\n                    });\n                  }\n                } else {\n                  endResults.facebook = {\n                    status: \"ended\",\n                    action: \"manual\",\n                    message: \"Manual stream ending required\",\n                  };\n                  logger.warn(\n                    \"Facebook stream ending limited by missing credentials\",\n                    { eventId },\n                  );\n                }\n              } else {\n                endResults.facebook = {\n                  status: \"ended\",\n                  action: \"unavailable\",\n                  message: \"Facebook API not available\",\n                };\n              }\n              break;\n\n            default:\n              logger.warn(\"Unsupported platform for stream ending\", {\n                platform: platformName,\n                eventId,\n              });\n          }\n        } catch (error) {\n          logger.error(`Failed to end ${platformName} streaming`, error, {\n            eventId,\n          });\n          errors.push(\n            `${platformName}: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n          );\n          endResults[platformName] = {\n            status: \"error\",\n            action: \"end_failed\",\n            error: error instanceof Error ? error.message : \"Unknown error\",\n          };\n        }\n      }\n\n      // Update platform statuses to 'ended' and zero out viewer counts\n      const platformStatuses = Object.keys(endResults).reduce(\n        (acc, platform) => {\n          acc[platform] = endResults[platform].status || \"ended\";\n          return acc;\n        },\n        {} as Record<string, string>,\n      );\n\n      const finalViewerCounts = Object.keys(endResults).reduce(\n        (acc, platform) => {\n          acc[platform] = 0; // Zero out viewer counts for ended streams\n          return acc;\n        },\n        {} as Record<string, number>,\n      );\n\n      // Persist final state with platform statuses and viewer counts\n      await storage.updateStreamCoordinationSession(session.id, {\n        currentPhase: \"ended\",\n        actualEndTime: new Date(),\n        platformStatuses: JSON.stringify(platformStatuses),\n        viewerCounts: JSON.stringify(finalViewerCounts),\n        coordinationEvents: JSON.stringify([\n          ...(session.coordinationEvents\n            ? JSON.parse(session.coordinationEvents)\n            : []),\n          {\n            type: \"streaming_ended\",\n            timestamp: new Date().toISOString(),\n            data: { endResults, errors },\n          },\n        ]),\n        updatedAt: new Date(),\n      });\n\n      // Update cached session with final data\n      session.currentPhase = \"ended\";\n      session.actualEndTime = new Date();\n      session.platformStatuses = JSON.stringify(platformStatuses);\n      session.viewerCounts = JSON.stringify(finalViewerCounts);\n      this.activeCoordinationSessions.set(eventId, session);\n\n      // Clean up active session after brief delay for final status retrieval\n      setTimeout(() => {\n        this.activeCoordinationSessions.delete(eventId);\n        logger.info(\"Coordination session cleaned up\", { eventId });\n      }, 5000);\n\n      logger.info(\"Cross-platform streaming coordination ended\", {\n        eventId,\n        endedPlatforms: Object.keys(endResults),\n        errors,\n      });\n    } catch (error) {\n      logger.error(\"Failed to end cross-platform streaming\", error, {\n        eventId,\n      });\n      // Clean up session even if there were errors\n      this.activeCoordinationSessions.delete(eventId);\n      throw error;\n    }\n  }\n\n  /**\n   * Log coordination events for analytics and debugging\n   */\n  private async logCoordinationEvent(\n    eventId: string,\n    event: any,\n  ): Promise<void> {\n    try {\n      const session = this.activeCoordinationSessions.get(eventId);\n      if (session) {\n        const events = session.coordinationEvents\n          ? JSON.parse(session.coordinationEvents)\n          : [];\n        events.push(event);\n\n        await storage.updateStreamCoordinationSession(session.id, {\n          coordinationEvents: JSON.stringify(events),\n          updatedAt: new Date(),\n        });\n      }\n    } catch (error) {\n      logger.error(\"Failed to log coordination event\", error, { eventId });\n    }\n  }\n\n  /**\n   * Calculate average response time for coordination actions\n   */\n  private calculateAverageResponseTime(eventId: string): number {\n    // Implementation for response time calculation\n    return 2.5; // seconds average\n  }\n\n  /**\n   * Calculate overall coordination health score\n   */\n  private calculateCoordinationHealth(\n    session?: StreamCoordinationSession,\n    collaborators?: StreamCollaborator[],\n  ): number {\n    if (!session || !collaborators) return 0;\n\n    const factors = {\n      activeParticipation:\n        (session.activeCollaborators?.length || 0) / collaborators.length,\n      technicalStability: 0.9, // Would be calculated from platform status\n      communicationQuality: 0.85, // Would be calculated from coordination events\n    };\n\n    return (\n      (factors.activeParticipation +\n        factors.technicalStability +\n        factors.communicationQuality) /\n      3\n    );\n  }\n}\n\n// Export singleton instance\nexport const collaborativeStreaming =\n  CollaborativeStreamingService.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/enhanced-notification.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[962,965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[962,965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1274,1277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1274,1277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2835,2838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2835,2838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3613,3616],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3613,3616],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4067,4070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4067,4070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":173,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4794,4797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4794,4797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":189,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5146,5149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5146,5149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":303,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8124,8127],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8124,8127],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":310,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8336,8339],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8336,8339],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":319,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":319,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":319,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":319,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8634,8637],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8634,8637],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":336,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":336,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9054,9057],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9054,9057],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":381,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":381,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10441,10444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10441,10444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { storage } from \"../storage\";\nimport { logger } from \"../logger\";\nimport { notificationDeliveryService } from \"./notification-delivery\";\nimport {\n  notificationTemplateService,\n  type TemplateContext,\n} from \"./notification-templates\";\nimport type { InsertNotification, Notification } from \"@shared/schema\";\n\n/**\n * Enhanced notification service with multi-channel delivery and templating\n */\nexport class EnhancedNotificationService {\n  /**\n   * Send a templated notification with multi-channel delivery\n   */\n  async sendNotification(\n    userId: string,\n    type: string,\n    context: TemplateContext,\n    options?: {\n      priority?: \"low\" | \"normal\" | \"high\" | \"urgent\";\n      communityId?: string;\n      expiresAt?: Date;\n      forceChannels?: {\n        browser?: boolean;\n        email?: boolean;\n        push?: boolean;\n        sms?: boolean;\n        webhook?: boolean;\n      };\n    },\n  ): Promise<{ notification: Notification; deliveryResults: any[] }> {\n    try {\n      // Generate notification from template\n      const template = notificationTemplateService.generateNotification(\n        type,\n        context,\n      );\n\n      // Create notification in database\n      const notificationData: InsertNotification = {\n        userId,\n        type: type as any, // Type assertion for notification type enum\n        title: template.title,\n        message: template.message,\n        priority: options?.priority || template.priority,\n        data: JSON.stringify({\n          actionUrl: template.actionUrl,\n          actionText: template.actionText,\n          emailSubject: template.emailSubject,\n          emailTemplate: template.emailTemplate,\n          pushTitle: template.pushTitle,\n          pushBody: template.pushBody,\n          smsMessage: template.smsMessage,\n          context,\n          communityId: options?.communityId, // Include in data instead\n        }),\n      };\n\n      const notification = await storage.createNotification(notificationData);\n\n      // Deliver notification through appropriate channels\n      const deliveryResults =\n        await notificationDeliveryService.deliverNotification(\n          userId,\n          notification,\n          options?.forceChannels,\n        );\n\n      logger.info(\"Enhanced notification sent successfully\", {\n        userId,\n        notificationId: notification.id,\n        type,\n        deliveryChannels: deliveryResults.map((r) => r.channel),\n        successfulDeliveries: deliveryResults.filter((r) => r.success).length,\n      });\n\n      return { notification, deliveryResults };\n    } catch (error) {\n      logger.error(\"Failed to send enhanced notification\", {\n        error,\n        userId,\n        type,\n        context,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Send stream started notification\n   */\n  async notifyStreamStarted(\n    streamSession: any,\n    followers: string[] = [],\n  ): Promise<void> {\n    const context: TemplateContext = {\n      fromUser: { id: streamSession.hostUserId },\n      stream: {\n        id: streamSession.id,\n        title: streamSession.title,\n        platform: streamSession.platforms?.[0]?.platform || \"streaming\",\n      },\n    };\n\n    // Notify followers\n    const notificationPromises = followers.map((userId) =>\n      this.sendNotification(userId, \"streamStarted\", context, {\n        priority: \"normal\",\n        communityId: streamSession.communityId,\n      }),\n    );\n\n    await Promise.allSettled(notificationPromises);\n  }\n\n  /**\n   * Send collaboration invite notification\n   */\n  async notifyCollaborationInvite(\n    fromUserId: string,\n    toUserId: string,\n    collaborationRequest: any,\n  ): Promise<void> {\n    const context: TemplateContext = {\n      fromUser: { id: fromUserId },\n      stream: { id: collaborationRequest.streamSessionId },\n      type: collaborationRequest.type,\n      requestId: collaborationRequest.id,\n    };\n\n    await this.sendNotification(toUserId, \"collaborationInvite\", context, {\n      priority: \"high\",\n    });\n  }\n\n  /**\n   * Send event reminder notifications\n   */\n  async notifyEventReminder(\n    event: any,\n    attendees: string[],\n    reminderTime: string = \"15 minutes\",\n  ): Promise<void> {\n    const context: TemplateContext = {\n      event: {\n        id: event.id,\n        title: event.title,\n        date: event.date,\n        time: event.time,\n        location: event.location,\n      },\n      reminderTime,\n    };\n\n    const notificationPromises = attendees.map((userId) =>\n      this.sendNotification(userId, \"eventReminders\", context, {\n        priority: \"normal\",\n        communityId: event.communityId,\n      }),\n    );\n\n    await Promise.allSettled(notificationPromises);\n  }\n\n  /**\n   * Send friend request notification\n   */\n  async notifyFriendRequest(\n    fromUserId: string,\n    toUserId: string,\n    friendship: any,\n  ): Promise<void> {\n    const context: TemplateContext = {\n      fromUser: { id: fromUserId },\n      requestId: friendship.id,\n    };\n\n    await this.sendNotification(toUserId, \"friendRequests\", context, {\n      priority: \"normal\",\n    });\n  }\n\n  /**\n   * Send tournament update notification\n   */\n  async notifyTournamentUpdate(\n    tournament: any,\n    participants: string[],\n    updateType: string,\n    updateMessage: string,\n  ): Promise<void> {\n    const context: TemplateContext = {\n      tournament: {\n        id: tournament.id,\n        name: tournament.name,\n        status: tournament.status,\n      },\n      updateType,\n      updateMessage,\n    };\n\n    const notificationPromises = participants.map((userId) =>\n      this.sendNotification(userId, \"tournamentUpdates\", context, {\n        priority: \"normal\",\n        communityId: tournament.communityId,\n      }),\n    );\n\n    await Promise.allSettled(notificationPromises);\n  }\n\n  /**\n   * Send system announcement\n   */\n  async sendSystemAnnouncement(\n    userIds: string[],\n    title: string,\n    message: string,\n    options?: {\n      priority?: \"low\" | \"normal\" | \"high\" | \"urgent\";\n      actionUrl?: string;\n      actionText?: string;\n      communityId?: string;\n    },\n  ): Promise<void> {\n    const context: TemplateContext = {\n      title,\n      message,\n      actionUrl: options?.actionUrl,\n      actionText: options?.actionText,\n      priority: options?.priority || \"normal\",\n    };\n\n    const notificationPromises = userIds.map((userId) =>\n      this.sendNotification(userId, \"systemAnnouncements\", context, {\n        priority: options?.priority || \"normal\",\n        communityId: options?.communityId,\n      }),\n    );\n\n    await Promise.allSettled(notificationPromises);\n  }\n\n  /**\n   * Send weekly digest notifications\n   */\n  async sendWeeklyDigests(): Promise<void> {\n    try {\n      // Get all users who have weekly digest enabled\n      const users = await this.getUsersWithWeeklyDigestEnabled();\n\n      for (const user of users) {\n        try {\n          const weeklyStats = await this.generateWeeklyStats(user.id);\n\n          const context: TemplateContext = {\n            user: {\n              id: user.id,\n              firstName: user.firstName,\n              username: user.username,\n            },\n            weeklyStats,\n          };\n\n          await this.sendNotification(user.id, \"weeklyDigest\", context, {\n            priority: \"low\",\n            forceChannels: {\n              email: true,\n              browser: false,\n              push: false,\n              sms: false,\n              webhook: false,\n            },\n          });\n        } catch (error) {\n          logger.error(\"Failed to send weekly digest to user\", {\n            error,\n            userId: user.id,\n          });\n        }\n      }\n\n      logger.info(\"Weekly digest notifications completed\", {\n        totalUsers: users.length,\n      });\n    } catch (error) {\n      logger.error(\"Failed to send weekly digest notifications\", { error });\n    }\n  }\n\n  /**\n   * Process notification queue (called by background job)\n   */\n  async processNotificationQueue(): Promise<void> {\n    await notificationDeliveryService.processQueuedNotifications();\n  }\n\n  /**\n   * Register WebSocket for real-time notifications\n   */\n  registerWebSocketConnection(userId: string, connection: any): void {\n    notificationDeliveryService.registerWebSocketConnection(userId, connection);\n  }\n\n  /**\n   * Get users with weekly digest enabled\n   */\n  private async getUsersWithWeeklyDigestEnabled(): Promise<any[]> {\n    // TODO: Implement query to get users with weekly digest enabled\n    // This would query the userSettings table for users with digestFrequency = 'weekly'\n    return [];\n  }\n\n  /**\n   * Generate weekly stats for a user\n   */\n  private async generateWeeklyStats(userId: string): Promise<any> {\n    // TODO: Implement weekly stats generation\n    // This would aggregate user activity, events attended, streams watched, etc.\n    return {\n      eventsAttended: 0,\n      streamsWatched: 0,\n      friendsAdded: 0,\n      communitiesJoined: 0,\n      gamesPlayed: 0,\n    };\n  }\n\n  /**\n   * Update notification preferences for a user\n   */\n  async updateNotificationPreferences(\n    userId: string,\n    preferences: any,\n  ): Promise<void> {\n    try {\n      const currentSettings = await storage.getUserSettings(userId);\n\n      // Parse JSON strings from database\n      const currentNotificationSettings = currentSettings?.notificationTypes\n        ? JSON.parse(currentSettings.notificationTypes as string)\n        : {};\n      const currentPrivacySettings = currentSettings?.privacySettings\n        ? JSON.parse(currentSettings.privacySettings as string)\n        : {};\n      const currentDisplayPreferences = currentSettings?.displayPreferences\n        ? JSON.parse(currentSettings.displayPreferences as string)\n        : {};\n\n      const updatedSettings = {\n        userId,\n        notificationTypes: JSON.stringify({\n          ...currentNotificationSettings,\n          ...preferences,\n        }),\n        privacySettings: JSON.stringify(currentPrivacySettings),\n        displayPreferences: JSON.stringify(currentDisplayPreferences),\n      };\n\n      await storage.upsertUserSettings(updatedSettings);\n\n      logger.info(\"Notification preferences updated\", {\n        userId,\n        preferences,\n      });\n    } catch (error) {\n      logger.error(\"Failed to update notification preferences\", {\n        error,\n        userId,\n        preferences,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get notification preferences for a user\n   */\n  async getNotificationPreferences(userId: string): Promise<any> {\n    try {\n      const userSettings = await storage.getUserSettings(userId);\n      if (!userSettings?.notificationTypes) {\n        return {};\n      }\n      return JSON.parse(userSettings.notificationTypes as string);\n    } catch (error) {\n      logger.error(\"Failed to get notification preferences\", {\n        error,\n        userId,\n      });\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const enhancedNotificationService = new EnhancedNotificationService();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/enhanced-notifications.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[292,295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[292,295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[830,833],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[830,833],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1927,1930],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1927,1930],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2887,2890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2887,2890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3891,3894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3891,3894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":168,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4792,4795],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4792,4795],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { storage } from \"../storage\";\nimport { logger } from \"../logger\";\n\nexport interface NotificationTrigger {\n  type:\n    | \"event_reminder\"\n    | \"event_updated\"\n    | \"event_cancelled\"\n    | \"event_starting_soon\"\n    | \"waitlist_promoted\";\n  eventId: string;\n  userId: string;\n  data?: any;\n}\n\nexport class EnhancedNotificationService {\n  /**\n   * Send event reminder notification\n   */\n  async sendEventReminder(eventId: string, hoursBeforeEvent: number) {\n    try {\n      const event = await storage.getEvent(eventId);\n      if (!event) return;\n\n      const attendees = await storage.getEventAttendees(eventId);\n\n      for (const attendee of attendees) {\n        if (attendee.status === \"attending\") {\n          await storage.createNotification({\n            userId: attendee.userId,\n            type: \"event_reminder\" as any,\n            title: `Event Starting in ${hoursBeforeEvent} Hours`,\n            message: `${event.title} starts at ${new Date(event.startTime).toLocaleString()}`,\n            data: JSON.stringify({\n              eventId,\n              hoursBeforeEvent,\n              communityId: event.communityId,\n            }),\n            priority: hoursBeforeEvent <= 1 ? \"high\" : \"normal\",\n          });\n        }\n      }\n\n      logger.info(\"Event reminders sent\", { eventId, count: attendees.length });\n    } catch (error) {\n      logger.error(\"Failed to send event reminders\", error, { eventId });\n    }\n  }\n\n  /**\n   * Send event updated notification\n   */\n  async sendEventUpdatedNotification(eventId: string, changes: string[]) {\n    try {\n      const event = await storage.getEvent(eventId);\n      if (!event) return;\n\n      const attendees = await storage.getEventAttendees(eventId);\n\n      for (const attendee of attendees) {\n        if (attendee.userId !== event.creatorId) {\n          await storage.createNotification({\n            userId: attendee.userId,\n            type: \"event_updated\" as any,\n            title: \"Event Updated\",\n            message: `${event.title} has been updated: ${changes.join(\", \")}`,\n            data: JSON.stringify({\n              eventId,\n              changes,\n              communityId: event.communityId,\n            }),\n            priority: \"normal\",\n          });\n        }\n      }\n\n      logger.info(\"Event update notifications sent\", { eventId, changes });\n    } catch (error) {\n      logger.error(\"Failed to send event update notifications\", error, {\n        eventId,\n      });\n    }\n  }\n\n  /**\n   * Send event cancelled notification\n   */\n  async sendEventCancelledNotification(eventId: string) {\n    try {\n      const event = await storage.getEvent(eventId);\n      if (!event) return;\n\n      const attendees = await storage.getEventAttendees(eventId);\n\n      for (const attendee of attendees) {\n        await storage.createNotification({\n          userId: attendee.userId,\n          type: \"event_cancelled\" as any,\n          title: \"Event Cancelled\",\n          message: `${event.title} has been cancelled`,\n          data: JSON.stringify({ eventId, communityId: event.communityId }),\n          priority: \"high\",\n        });\n      }\n\n      logger.info(\"Event cancellation notifications sent\", {\n        eventId,\n        count: attendees.length,\n      });\n    } catch (error) {\n      logger.error(\"Failed to send event cancellation notifications\", error, {\n        eventId,\n      });\n    }\n  }\n\n  /**\n   * Send starting soon notification\n   */\n  async sendEventStartingSoonNotification(\n    eventId: string,\n    minutesUntilStart: number,\n  ) {\n    try {\n      const event = await storage.getEvent(eventId);\n      if (!event) return;\n\n      const attendees = await storage.getEventAttendees(eventId);\n\n      for (const attendee of attendees) {\n        if (attendee.status === \"attending\") {\n          await storage.createNotification({\n            userId: attendee.userId,\n            type: \"event_starting_soon\" as any,\n            title: \"Event Starting Soon!\",\n            message: `${event.title} starts in ${minutesUntilStart} minutes`,\n            data: JSON.stringify({\n              eventId,\n              minutesUntilStart,\n              communityId: event.communityId,\n            }),\n            priority: \"urgent\",\n          });\n        }\n      }\n\n      logger.info(\"Starting soon notifications sent\", {\n        eventId,\n        minutesUntilStart,\n      });\n    } catch (error) {\n      logger.error(\"Failed to send starting soon notifications\", error, {\n        eventId,\n      });\n    }\n  }\n\n  /**\n   * Send waitlist promoted notification\n   */\n  async sendWaitlistPromotedNotification(eventId: string, userId: string) {\n    try {\n      const event = await storage.getEvent(eventId);\n      if (!event) return;\n\n      await storage.createNotification({\n        userId,\n        type: \"waitlist_promoted\" as any,\n        title: \"Promoted from Waitlist!\",\n        message: `You've been promoted to a main player slot in ${event.title}`,\n        data: JSON.stringify({ eventId, communityId: event.communityId }),\n        priority: \"high\",\n      });\n\n      logger.info(\"Waitlist promotion notification sent\", { eventId, userId });\n    } catch (error) {\n      logger.error(\"Failed to send waitlist promotion notification\", error, {\n        eventId,\n        userId,\n      });\n    }\n  }\n}\n\nexport const enhancedNotificationService = new EnhancedNotificationService();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/error-tracking.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3024,3027],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3024,3027],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4209,4212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4209,4212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":182,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4665,4668],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4665,4668],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":235,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5526,5529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5526,5529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":285,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":285,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6299,6302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6299,6302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Error Tracking Service - Sentry Integration\n *\n * Provides centralized error tracking and monitoring using Sentry.\n * Automatically captures errors, exceptions, and performance metrics.\n */\n\nimport * as Sentry from \"@sentry/node\";\nimport { nodeProfilingIntegration } from \"@sentry/profiling-node\";\nimport { logger } from \"../logger\";\nimport type {\n  Request,\n  Response,\n  NextFunction,\n  ErrorRequestHandler,\n} from \"express\";\n\n/**\n * Initialize Sentry error tracking\n * Should be called early in application startup\n */\nexport function initializeSentry(): void {\n  const sentryDsn = process.env.SENTRY_DSN;\n\n  // Only initialize if DSN is configured\n  if (!sentryDsn) {\n    logger.info(\"Sentry DSN not configured - error tracking disabled\");\n    return;\n  }\n\n  try {\n    Sentry.init({\n      dsn: sentryDsn,\n      environment: process.env.NODE_ENV || \"development\",\n\n      // Release tracking for better error grouping\n      release: process.env.npm_package_version || \"1.0.0\",\n\n      // Set sample rate for performance monitoring\n      tracesSampleRate: process.env.NODE_ENV === \"production\" ? 0.1 : 1.0,\n\n      // Set sample rate for profiling\n      profilesSampleRate: process.env.NODE_ENV === \"production\" ? 0.1 : 1.0,\n\n      // Enable profiling integration\n      integrations: [nodeProfilingIntegration()],\n\n      // Configure what data to send\n      beforeSend(event) {\n        // Filter out sensitive data\n        if (event.request) {\n          // Remove sensitive headers\n          if (event.request.headers) {\n            delete event.request.headers[\"authorization\"];\n            delete event.request.headers[\"cookie\"];\n          }\n\n          // Remove sensitive query parameters\n          if (\n            event.request.query_string &&\n            typeof event.request.query_string === \"string\"\n          ) {\n            event.request.query_string = event.request.query_string\n              .replace(/token=[^&]*/g, \"token=[REDACTED]\")\n              .replace(/api_key=[^&]*/g, \"api_key=[REDACTED]\")\n              .replace(/apikey=[^&]*/g, \"apikey=[REDACTED]\");\n          }\n        }\n\n        // Add custom context\n        event.tags = {\n          ...event.tags,\n          service: \"shuffle-and-sync\",\n        };\n\n        return event;\n      },\n\n      // Ignore certain errors\n      ignoreErrors: [\n        // Browser extensions\n        /extensions\\//i,\n        /^Non-Error/,\n        // Network errors that are user-side issues\n        \"Network request failed\",\n        \"NetworkError\",\n      ],\n    });\n\n    logger.info(\"Sentry error tracking initialized\", {\n      environment: process.env.NODE_ENV,\n      release: process.env.npm_package_version,\n      sampleRate: process.env.NODE_ENV === \"production\" ? 0.1 : 1.0,\n    });\n  } catch (error) {\n    logger.error(\"Failed to initialize Sentry\", error);\n  }\n}\n\n/**\n * Express error handler middleware for Sentry\n * Should be added before other error handlers but after all routes\n */\nexport function sentryErrorHandler(): ErrorRequestHandler {\n  return (err: any, req: Request, res: Response, next: NextFunction) => {\n    // Capture error in Sentry\n    Sentry.captureException(err);\n\n    // Pass to next error handler\n    next(err);\n  };\n}\n\n/**\n * Express request handler middleware for Sentry\n * Should be added early in the middleware chain\n */\nexport function sentryRequestHandler() {\n  return (req: Request, res: Response, next: NextFunction) => {\n    // Set request context for Sentry\n    Sentry.setContext(\"request\", {\n      url: req.url,\n      method: req.method,\n      headers: {\n        \"user-agent\": req.get(\"User-Agent\"),\n      },\n      query: req.query,\n    });\n\n    next();\n  };\n}\n\n/**\n * Express tracing middleware for performance monitoring\n * Should be added early in the middleware chain\n */\nexport function sentryTracingHandler() {\n  return (req: Request, _res: Response, next: NextFunction) => {\n    // Start span for request tracing\n    Sentry.startSpan(\n      {\n        op: \"http.server\",\n        name: `${req.method} ${req.path}`,\n      },\n      () => {\n        next();\n      },\n    );\n  };\n}\n\n/**\n * Manually capture an exception\n */\nexport function captureException(\n  error: Error | unknown,\n  context?: Record<string, any>,\n): void {\n  if (!process.env.SENTRY_DSN) {\n    return;\n  }\n\n  Sentry.withScope((scope) => {\n    if (context) {\n      // Add extra context\n      Object.entries(context).forEach(([key, value]) => {\n        scope.setExtra(key, value);\n      });\n    }\n\n    Sentry.captureException(error);\n  });\n}\n\n/**\n * Manually capture a message\n */\nexport function captureMessage(\n  message: string,\n  level: Sentry.SeverityLevel = \"info\",\n  context?: Record<string, any>,\n): void {\n  if (!process.env.SENTRY_DSN) {\n    return;\n  }\n\n  Sentry.withScope((scope) => {\n    if (context) {\n      Object.entries(context).forEach(([key, value]) => {\n        scope.setExtra(key, value);\n      });\n    }\n\n    Sentry.captureMessage(message, level);\n  });\n}\n\n/**\n * Set user context for error tracking\n */\nexport function setUserContext(user: {\n  id: string;\n  email?: string;\n  username?: string;\n}): void {\n  if (!process.env.SENTRY_DSN) {\n    return;\n  }\n\n  Sentry.setUser({\n    id: user.id,\n    email: user.email,\n    username: user.username,\n  });\n}\n\n/**\n * Clear user context\n */\nexport function clearUserContext(): void {\n  if (!process.env.SENTRY_DSN) {\n    return;\n  }\n\n  Sentry.setUser(null);\n}\n\n/**\n * Add breadcrumb for debugging\n */\nexport function addBreadcrumb(\n  message: string,\n  category: string,\n  data?: Record<string, any>,\n): void {\n  if (!process.env.SENTRY_DSN) {\n    return;\n  }\n\n  Sentry.addBreadcrumb({\n    message,\n    category,\n    level: \"info\",\n    data,\n    timestamp: Date.now() / 1000,\n  });\n}\n\n/**\n * Start a span for performance monitoring\n */\nexport function startSpan(\n  name: string,\n  op: string,\n  callback: () => void,\n): void {\n  if (!process.env.SENTRY_DSN) {\n    callback();\n    return;\n  }\n\n  Sentry.startSpan(\n    {\n      name,\n      op,\n    },\n    callback,\n  );\n}\n\n/**\n * Middleware to track user context from authenticated requests\n */\nexport function trackUserMiddleware(\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): void {\n  if (!process.env.SENTRY_DSN) {\n    return next();\n  }\n\n  // Extract user from request if available\n  const user = (req as any).user;\n  if (user) {\n    setUserContext({\n      id: user.id,\n      email: user.email,\n      username: user.username,\n    });\n  }\n\n  // Clear user context on response\n  res.on(\"finish\", () => {\n    if (user) {\n      clearUserContext();\n    }\n  });\n\n  next();\n}\n\n/**\n * Flush pending events to Sentry\n * Useful for graceful shutdown\n */\nexport async function flushSentry(timeout = 2000): Promise<boolean> {\n  if (!process.env.SENTRY_DSN) {\n    return true;\n  }\n\n  try {\n    const result = await Sentry.close(timeout);\n    logger.info(\"Sentry events flushed successfully\");\n    return result;\n  } catch (error) {\n    logger.error(\"Failed to flush Sentry events\", error);\n    return false;\n  }\n}\n\n// Export Sentry for advanced usage\nexport { Sentry };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/facebook-api.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[935,938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[935,938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":270,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7323,7326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7323,7326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errorType' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":272,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":272,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":314,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":314,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8436,8439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8436,8439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":349,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":349,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9197,9200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9197,9200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":394,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":394,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10333,10336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10333,10336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":404,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":404,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10718,10721],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10718,10721],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":557,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":557,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15151,15154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15151,15154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":709,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":709,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19454,19457],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19454,19457],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":752,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":752,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20493,20496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20493,20496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":991,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":991,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'callbackUrl' is defined but never used. Allowed unused args must match /^_/u.","line":1003,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1003,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'verifyToken' is defined but never used. Allowed unused args must match /^_/u.","line":1004,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1004,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Facebook Gaming API Service Stub\n// This is a placeholder implementation for Facebook Gaming API integration\n// TODO: Implement full Facebook Gaming Creator API and Graph API integration\n\nimport { logger } from \"../logger\";\nimport { createHmac, randomBytes, timingSafeEqual } from \"crypto\";\n\nexport interface FacebookPage {\n  id: string;\n  name: string;\n  about?: string;\n  category: string;\n  picture: {\n    data: {\n      url: string;\n    };\n  };\n  fan_count?: number;\n  followers_count?: number;\n}\n\nexport interface FacebookLiveVideo {\n  id: string;\n  title?: string;\n  description?: string;\n  status:\n    | \"UNPUBLISHED\"\n    | \"LIVE\"\n    | \"LIVE_STOPPED\"\n    | \"PROCESSING\"\n    | \"VOD\"\n    | \"SCHEDULED_UNPUBLISHED\"\n    | \"SCHEDULED_LIVE\"\n    | \"SCHEDULED_CANCELED\";\n  live_views?: number;\n  creation_time: string;\n  planned_start_time?: string;\n  actual_start_time?: string;\n  broadcast_start_time?: string;\n  ad_break_config?: any;\n  permalink_url?: string;\n  embed_html?: string;\n}\n\nexport interface FacebookLiveVideoDetails extends FacebookLiveVideo {\n  stream_url?: string;\n  secure_stream_url?: string;\n  dash_ingest_url?: string;\n  rtmp_preview_url?: string;\n}\n\nexport interface FacebookPost {\n  id: string;\n  message?: string;\n  story?: string;\n  created_time: string;\n  updated_time: string;\n  permalink_url?: string;\n  likes?: {\n    summary: {\n      total_count: number;\n    };\n  };\n  comments?: {\n    summary: {\n      total_count: number;\n    };\n  };\n  shares?: {\n    count: number;\n  };\n}\n\n// Production-ready API result wrapper for Facebook API\nexport interface FacebookAPIResult<T> {\n  success: boolean;\n  data?: T;\n  error?: {\n    code: string;\n    message: string;\n    type?: string;\n    subcode?: number;\n  };\n  newAccessToken?: string; // For token refresh scenarios\n}\n\n// Error taxonomy for Facebook API\nexport type FacebookAPIError =\n  | \"NO_CONFIG\" // API not configured\n  | \"NO_AUTH\" // No authentication method\n  | \"INVALID_INPUT\" // Invalid input parameters\n  | \"INVALID_RESPONSE\" // Invalid response from API\n  | \"RATE_LIMITED\" // Rate limit exceeded\n  | \"PERMISSION_DENIED\" // Insufficient permissions\n  | \"SERVER_ERROR\" // Facebook server error\n  | \"NETWORK_ERROR\" // Network connectivity issue\n  | \"TOKEN_EXPIRED\" // Access token expired\n  | \"UNKNOWN_ERROR\"; // Fallback error type\n\n/**\n * Facebook Gaming API Service (Stub Implementation)\n *\n * To implement full functionality, you will need:\n * 1. Facebook App ID and App Secret\n * 2. Facebook Gaming Creator API access\n * 3. Graph API permissions for live video and gaming features\n * 4. Webhooks setup for real-time notifications\n */\nexport class FacebookAPIService {\n  private appId: string | undefined;\n  private appSecret: string | undefined;\n  private apiVersion: string = \"v18.0\";\n\n  // Store OAuth states to validate CSRF protection\n  private oauthStates = new Map<\n    string,\n    { timestamp: number; redirectUri: string }\n  >();\n\n  constructor() {\n    this.appId = process.env.FACEBOOK_APP_ID;\n    this.appSecret = process.env.FACEBOOK_APP_SECRET;\n    this.webhookVerifyToken =\n      process.env.FACEBOOK_WEBHOOK_VERIFY_TOKEN || this.generateSecureState();\n  }\n\n  // Webhook verification token for security\n  private webhookVerifyToken: string;\n\n  /**\n   * Check if Facebook API is properly configured\n   */\n  isConfigured(): boolean {\n    return !!(this.appId && this.appSecret);\n  }\n\n  /**\n   * Centralized API request handler with retry logic, error handling, and security\n   */\n  private async makeAPIRequest<T>(\n    endpoint: string,\n    options: RequestInit & { accessToken?: string } = {},\n    retries: number = 3,\n  ): Promise<FacebookAPIResult<T>> {\n    const { accessToken, ...fetchOptions } = options;\n\n    // Generate appsecret_proof for enhanced security on server-side calls\n    let appsecret_proof: string | undefined;\n    if (accessToken && this.appSecret) {\n      appsecret_proof = createHmac(\"sha256\", this.appSecret)\n        .update(accessToken)\n        .digest(\"hex\");\n    }\n\n    for (let attempt = 0; attempt < retries; attempt++) {\n      try {\n        // Construct URL properly with security enhancements\n        let finalUrl: string;\n        if (endpoint.startsWith(\"http\")) {\n          finalUrl = endpoint;\n        } else {\n          const url = new URL(\n            endpoint,\n            `https://graph.facebook.com/${this.apiVersion}`,\n          );\n          if (accessToken) {\n            url.searchParams.set(\"access_token\", accessToken);\n            // Add appsecret_proof for enhanced security\n            if (appsecret_proof) {\n              url.searchParams.set(\"appsecret_proof\", appsecret_proof);\n            }\n          }\n          finalUrl = url.toString();\n        }\n\n        const response = await fetch(finalUrl, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            ...(fetchOptions.headers as Record<string, string>),\n          },\n          ...fetchOptions,\n        });\n\n        // Handle rate limiting (HTTP 429) and server errors (5xx) with exponential backoff\n        if (\n          (response.status === 429 || response.status >= 500) &&\n          attempt < retries - 1\n        ) {\n          const retryAfter = response.headers.get(\"Retry-After\");\n          const delay = retryAfter\n            ? parseInt(retryAfter) * 1000\n            : Math.pow(2, attempt) * 1000;\n\n          logger.warn(\n            `Facebook API ${response.status === 429 ? \"rate limited\" : \"server error\"}, retrying after ${delay}ms...`,\n            {\n              status: response.status,\n              attempt,\n              delay,\n            },\n          );\n          await new Promise((resolve) => setTimeout(resolve, delay));\n          continue;\n        }\n\n        const data = await response.json();\n\n        // Handle Facebook API errors\n        if (data.error) {\n          const errorCode = this.mapFacebookErrorToCode(data.error);\n          return {\n            success: false,\n            error: {\n              code: errorCode,\n              message: data.error.message,\n              type: data.error.type,\n              subcode: data.error.code,\n            },\n          };\n        }\n\n        if (!response.ok) {\n          return {\n            success: false,\n            error: {\n              code: \"SERVER_ERROR\",\n              message: `HTTP ${response.status}: ${response.statusText}`,\n            },\n          };\n        }\n\n        return { success: true, data };\n      } catch (error) {\n        console.error(\n          `Facebook API request attempt ${attempt + 1} failed:`,\n          error,\n        );\n\n        if (attempt === retries - 1) {\n          return {\n            success: false,\n            error: {\n              code: \"NETWORK_ERROR\",\n              message:\n                error instanceof Error\n                  ? error.message\n                  : \"Unknown network error\",\n            },\n          };\n        }\n\n        // Exponential backoff for network errors\n        const delay = Math.pow(2, attempt) * 1000;\n        await new Promise((resolve) => setTimeout(resolve, delay));\n      }\n    }\n\n    return {\n      success: false,\n      error: {\n        code: \"UNKNOWN_ERROR\",\n        message: \"Max retries exceeded\",\n      },\n    };\n  }\n\n  /**\n   * Map Facebook API errors to our error taxonomy\n   */\n  private mapFacebookErrorToCode(error: any): FacebookAPIError {\n    const errorCode = error.code || 0;\n    const errorType = error.type || \"\";\n\n    // Rate limiting\n    if (errorCode === 4 || errorCode === 17 || errorCode === 341) {\n      return \"RATE_LIMITED\";\n    }\n\n    // Authentication/permission errors\n    if (errorCode === 190 || errorCode === 102 || errorCode === 10) {\n      return \"TOKEN_EXPIRED\";\n    }\n    if (errorCode === 200 || errorCode === 201 || errorCode === 220) {\n      return \"PERMISSION_DENIED\";\n    }\n\n    // Server errors\n    if (errorCode >= 1 && errorCode <= 2) {\n      return \"SERVER_ERROR\";\n    }\n\n    // Input validation errors\n    if (errorCode >= 100 && errorCode < 200) {\n      return \"INVALID_INPUT\";\n    }\n\n    // Fallback\n    return \"UNKNOWN_ERROR\";\n  }\n\n  /**\n   * Get current user information\n   */\n  async getMe(\n    accessToken: string,\n  ): Promise<FacebookAPIResult<{ id: string; name: string }>> {\n    if (!this.isConfigured()) {\n      return {\n        success: false,\n        error: { code: \"NO_CONFIG\", message: \"Facebook API not configured\" },\n      };\n    }\n\n    const result = await this.makeAPIRequest<any>(`/me?fields=id,name`, {\n      accessToken,\n    });\n\n    if (!result.success) {\n      return { success: false, error: result.error };\n    }\n\n    return {\n      success: true,\n      data: result.data,\n    };\n  }\n\n  /**\n   * Get page information with production error handling\n   */\n  async getPage(\n    pageId: string,\n    accessToken: string,\n  ): Promise<FacebookAPIResult<FacebookPage>> {\n    if (!this.isConfigured()) {\n      return {\n        success: false,\n        error: { code: \"NO_CONFIG\", message: \"Facebook API not configured\" },\n      };\n    }\n\n    if (!pageId?.trim()) {\n      return {\n        success: false,\n        error: { code: \"INVALID_INPUT\", message: \"Page ID is required\" },\n      };\n    }\n\n    const result = await this.makeAPIRequest<any>(\n      `/${encodeURIComponent(pageId)}?fields=id,name,about,category,picture,fan_count,followers_count`,\n      { accessToken },\n    );\n\n    if (!result.success) {\n      return { success: false, error: result.error };\n    }\n\n    const data = result.data;\n    return {\n      success: true,\n      data: {\n        id: data.id,\n        name: data.name,\n        about: data.about,\n        category: data.category,\n        picture: data.picture || { data: { url: \"\" } },\n        fan_count: data.fan_count,\n        followers_count: data.followers_count,\n      },\n    };\n  }\n\n  /**\n   * Get live videos for a page with production error handling\n   */\n  async getLiveVideos(\n    pageId: string,\n    accessToken: string,\n  ): Promise<FacebookAPIResult<FacebookLiveVideo[]>> {\n    if (!this.isConfigured()) {\n      return {\n        success: false,\n        error: { code: \"NO_CONFIG\", message: \"Facebook API not configured\" },\n      };\n    }\n\n    if (!pageId?.trim()) {\n      return {\n        success: false,\n        error: { code: \"INVALID_INPUT\", message: \"Page ID is required\" },\n      };\n    }\n\n    const result = await this.makeAPIRequest<any>(\n      `/${encodeURIComponent(pageId)}/live_videos?fields=id,title,description,status,live_views,creation_time,planned_start_time,actual_start_time,broadcast_start_time,permalink_url`,\n      { accessToken },\n    );\n\n    if (!result.success) {\n      return { success: false, error: result.error };\n    }\n\n    const videos: FacebookLiveVideo[] =\n      result.data.data?.map((video: any) => ({\n        id: video.id,\n        title: video.title,\n        description: video.description,\n        status: video.status,\n        live_views: video.live_views,\n        creation_time: video.creation_time,\n        planned_start_time: video.planned_start_time,\n        actual_start_time: video.actual_start_time,\n        broadcast_start_time: video.broadcast_start_time,\n        permalink_url: video.permalink_url,\n      })) || [];\n\n    return { success: true, data: videos };\n  }\n\n  /**\n   * Create a live video\n   */\n  async createLiveVideo(\n    pageId: string,\n    accessToken: string,\n    title: string,\n    description?: string,\n    plannedStartTime?: Date,\n  ): Promise<FacebookLiveVideoDetails | null> {\n    if (!this.isConfigured()) {\n      console.warn(\"Facebook API not configured\");\n      return null;\n    }\n\n    try {\n      const body = new URLSearchParams({\n        title,\n        status: plannedStartTime ? \"SCHEDULED_UNPUBLISHED\" : \"UNPUBLISHED\",\n        ...(description && { description }),\n        ...(plannedStartTime && {\n          planned_start_time: Math.floor(\n            plannedStartTime.getTime() / 1000,\n          ).toString(),\n        }),\n        access_token: accessToken,\n      });\n\n      const response = await fetch(\n        `https://graph.facebook.com/${this.apiVersion}/${pageId}/live_videos`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n          },\n          body: body.toString(),\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          `Facebook API request failed: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data = await response.json();\n\n      if (data.error) {\n        throw new Error(`Facebook API error: ${data.error.message}`);\n      }\n\n      // Fetch the created live video to get authoritative details including streaming info\n      const createdVideo = await this.getLiveVideoDetails(data.id, accessToken);\n\n      return (\n        createdVideo || {\n          id: data.id,\n          title,\n          description,\n          status: \"UNPUBLISHED\",\n          creation_time: new Date().toISOString(),\n          planned_start_time: plannedStartTime?.toISOString(),\n          permalink_url: data.permalink_url,\n          embed_html: data.embed_html,\n        }\n      );\n    } catch (error) {\n      console.error(\"Error creating Facebook live video:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Get live video details with streaming information\n   */\n  async getLiveVideoDetails(\n    liveVideoId: string,\n    accessToken: string,\n  ): Promise<FacebookLiveVideoDetails | null> {\n    if (!this.isConfigured()) {\n      console.warn(\"Facebook API not configured\");\n      return null;\n    }\n\n    try {\n      const response = await fetch(\n        `https://graph.facebook.com/${this.apiVersion}/${liveVideoId}?fields=id,title,description,status,creation_time,planned_start_time,permalink_url,embed_html,stream_url,secure_stream_url,dash_ingest_url,rtmp_preview_url&access_token=${accessToken}`,\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          `Facebook API request failed: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data = await response.json();\n\n      if (data.error) {\n        throw new Error(`Facebook API error: ${data.error.message}`);\n      }\n\n      return {\n        id: data.id,\n        title: data.title,\n        description: data.description,\n        status: data.status,\n        creation_time: data.creation_time,\n        planned_start_time: data.planned_start_time\n          ? this.parseTimestamp(data.planned_start_time)\n          : undefined,\n        permalink_url: data.permalink_url,\n        embed_html: data.embed_html,\n        stream_url: data.stream_url,\n        secure_stream_url: data.secure_stream_url,\n        dash_ingest_url: data.dash_ingest_url,\n        rtmp_preview_url: data.rtmp_preview_url,\n      };\n    } catch (error) {\n      console.error(\"Error fetching Facebook live video details:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Update live video\n   */\n  async updateLiveVideo(\n    liveVideoId: string,\n    accessToken: string,\n    updates: Partial<FacebookLiveVideo>,\n  ): Promise<FacebookLiveVideoDetails | null> {\n    if (!this.isConfigured()) {\n      console.warn(\"Facebook API not configured\");\n      return null;\n    }\n\n    try {\n      const updateData: any = {};\n\n      if (updates.title) updateData.title = updates.title;\n      if (updates.description) updateData.description = updates.description;\n      if (updates.planned_start_time) {\n        if (typeof updates.planned_start_time === \"string\") {\n          // Handle both ISO strings and Unix timestamp strings\n          const numericValue = parseFloat(updates.planned_start_time);\n          if (\n            !isNaN(numericValue) &&\n            updates.planned_start_time.match(/^\\d+(\\.\\d+)?$/)\n          ) {\n            // It's a numeric string (Unix timestamp)\n            updateData.planned_start_time = Math.floor(numericValue).toString();\n          } else {\n            // It's an ISO string\n            updateData.planned_start_time = Math.floor(\n              new Date(updates.planned_start_time).getTime() / 1000,\n            ).toString();\n          }\n        } else {\n          updateData.planned_start_time = updates.planned_start_time;\n        }\n      }\n\n      const body = new URLSearchParams({\n        ...updateData,\n        access_token: accessToken,\n      });\n\n      const response = await fetch(\n        `https://graph.facebook.com/${this.apiVersion}/${liveVideoId}`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n          },\n          body: body.toString(),\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          `Facebook API request failed: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data = await response.json();\n\n      if (data.error) {\n        throw new Error(`Facebook API error: ${data.error.message}`);\n      }\n\n      // Fetch the updated live video to get authoritative details\n      const updatedVideo = await this.getLiveVideoDetails(\n        liveVideoId,\n        accessToken,\n      );\n\n      return (\n        updatedVideo || {\n          id: liveVideoId,\n          title: updates.title || \"\",\n          description: updates.description || \"\",\n          status: \"UNPUBLISHED\",\n          creation_time: new Date().toISOString(),\n          planned_start_time: updates.planned_start_time,\n        }\n      );\n    } catch (error) {\n      console.error(\"Error updating Facebook live video:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * End live video\n   */\n  async endLiveVideo(\n    liveVideoId: string,\n    accessToken: string,\n  ): Promise<boolean> {\n    if (!this.isConfigured()) {\n      console.warn(\"Facebook API not configured\");\n      return false;\n    }\n\n    try {\n      const response = await fetch(\n        `https://graph.facebook.com/${this.apiVersion}/${liveVideoId}`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n          },\n          body: new URLSearchParams({\n            end_live_video: \"true\",\n            access_token: accessToken,\n          }).toString(),\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          `Facebook API request failed: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data = await response.json();\n\n      if (data.error) {\n        throw new Error(`Facebook API error: ${data.error.message}`);\n      }\n\n      return data.success === true || response.ok;\n    } catch (error) {\n      console.error(\"Error ending Facebook live video:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Get page posts\n   */\n  async getPagePosts(\n    pageId: string,\n    accessToken: string,\n    limit: number = 10,\n  ): Promise<FacebookPost[]> {\n    if (!this.isConfigured()) {\n      console.warn(\"Facebook API not configured\");\n      return [];\n    }\n\n    try {\n      const response = await fetch(\n        `https://graph.facebook.com/${this.apiVersion}/${pageId}/posts?fields=id,message,story,created_time,updated_time,permalink_url,likes.summary(true),comments.summary(true),shares&limit=${limit}&access_token=${accessToken}`,\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          `Facebook API request failed: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data = await response.json();\n\n      if (data.error) {\n        throw new Error(`Facebook API error: ${data.error.message}`);\n      }\n\n      return (\n        data.data?.map((post: any) => ({\n          id: post.id,\n          message: post.message,\n          story: post.story,\n          created_time: post.created_time,\n          updated_time: post.updated_time,\n          permalink_url: post.permalink_url,\n          likes: {\n            summary: {\n              total_count: post.likes?.summary?.total_count || 0,\n            },\n          },\n          comments: {\n            summary: {\n              total_count: post.comments?.summary?.total_count || 0,\n            },\n          },\n          shares: {\n            count: post.shares?.count || 0,\n          },\n        })) || []\n      );\n    } catch (error) {\n      console.error(\"Error fetching Facebook page posts:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * Create a post\n   */\n  async createPost(\n    pageId: string,\n    accessToken: string,\n    message: string,\n    link?: string,\n  ): Promise<FacebookPost | null> {\n    if (!this.isConfigured()) {\n      console.warn(\"Facebook API not configured\");\n      return null;\n    }\n\n    try {\n      const postData: any = {\n        message,\n        access_token: accessToken,\n      };\n\n      if (link) {\n        postData.link = link;\n      }\n\n      const response = await fetch(\n        `https://graph.facebook.com/${this.apiVersion}/${pageId}/feed`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n          },\n          body: new URLSearchParams(postData).toString(),\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          `Facebook API request failed: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data = await response.json();\n\n      if (data.error) {\n        throw new Error(`Facebook API error: ${data.error.message}`);\n      }\n\n      return {\n        id: data.id,\n        message,\n        created_time: new Date().toISOString(),\n        updated_time: new Date().toISOString(),\n        permalink_url: `https://facebook.com/${data.id}`,\n        likes: { summary: { total_count: 0 } },\n        comments: { summary: { total_count: 0 } },\n        shares: { count: 0 },\n      };\n    } catch (error) {\n      console.error(\"Error creating Facebook post:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Get OAuth authorization URL for Facebook with CSRF protection\n   */\n  getAuthorizationUrl(redirectUri: string): { url: string; state: string } {\n    if (!this.isConfigured()) {\n      console.warn(\"Facebook API not configured\");\n      return { url: \"\", state: \"\" };\n    }\n\n    // Generate secure random state for CSRF protection\n    const state = this.generateSecureState();\n\n    // Store state with timestamp for validation (expires in 10 minutes)\n    this.oauthStates.set(state, {\n      timestamp: Date.now(),\n      redirectUri,\n    });\n\n    // Clean expired states\n    this.cleanExpiredStates();\n\n    if (!this.appId) {\n      throw new Error(\"Facebook App ID not configured\");\n    }\n    \n    const params = new URLSearchParams({\n      client_id: this.appId,\n      redirect_uri: redirectUri,\n      scope:\n        \"pages_manage_posts,pages_read_engagement,publish_video,pages_manage_metadata,pages_read_user_content,pages_show_list\",\n      response_type: \"code\",\n      state: state,\n    });\n\n    return {\n      url: `https://www.facebook.com/v18.0/dialog/oauth?${params.toString()}`,\n      state,\n    };\n  }\n\n  /**\n   * Generate cryptographically secure state token\n   */\n  private generateSecureState(): string {\n    return randomBytes(32).toString(\"hex\");\n  }\n\n  /**\n   * Clean expired OAuth states (older than 10 minutes)\n   */\n  private cleanExpiredStates(): void {\n    const tenMinutesAgo = Date.now() - 10 * 60 * 1000;\n    // Fix TypeScript Map iteration issue\n    const expiredStates: string[] = [];\n    this.oauthStates.forEach((data, state) => {\n      if (data.timestamp < tenMinutesAgo) {\n        expiredStates.push(state);\n      }\n    });\n    expiredStates.forEach((state) => this.oauthStates.delete(state));\n  }\n\n  /**\n   * Validate OAuth state for CSRF protection\n   */\n  validateOAuthState(state: string, redirectUri: string): boolean {\n    const stateData = this.oauthStates.get(state);\n    if (!stateData) {\n      console.warn(\"Invalid OAuth state: not found\");\n      return false;\n    }\n\n    // Check if state is expired (10 minutes)\n    const tenMinutesAgo = Date.now() - 10 * 60 * 1000;\n    if (stateData.timestamp < tenMinutesAgo) {\n      console.warn(\"Invalid OAuth state: expired\");\n      this.oauthStates.delete(state);\n      return false;\n    }\n\n    // Check if redirect URI matches\n    if (stateData.redirectUri !== redirectUri) {\n      console.warn(\"Invalid OAuth state: redirect URI mismatch\");\n      this.oauthStates.delete(state);\n      return false;\n    }\n\n    // State is valid, remove it to prevent reuse\n    this.oauthStates.delete(state);\n    return true;\n  }\n\n  /**\n   * Exchange authorization code for access token\n   */\n  async exchangeCodeForToken(\n    code: string,\n    redirectUri: string,\n  ): Promise<{ access_token: string; token_type: string } | null> {\n    if (!this.isConfigured()) {\n      console.warn(\"Facebook API not configured\");\n      return null;\n    }\n\n    try {\n      const response = await fetch(\n        `https://graph.facebook.com/${this.apiVersion}/oauth/access_token?` +\n          `client_id=${this.appId}&` +\n          `redirect_uri=${encodeURIComponent(redirectUri)}&` +\n          `client_secret=${this.appSecret}&` +\n          `code=${code}`,\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          `Facebook OAuth request failed: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data = await response.json();\n\n      if (data.error) {\n        throw new Error(`Facebook OAuth error: ${data.error.message}`);\n      }\n\n      return {\n        access_token: data.access_token,\n        token_type: data.token_type || \"bearer\",\n      };\n    } catch (error) {\n      console.error(\"Error exchanging Facebook OAuth code:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Get long-lived page access token\n   */\n  async getPageAccessToken(\n    pageId: string,\n    userAccessToken: string,\n  ): Promise<string | null> {\n    if (!this.isConfigured()) {\n      console.warn(\"Facebook API not configured\");\n      return null;\n    }\n\n    try {\n      const response = await fetch(\n        `https://graph.facebook.com/${this.apiVersion}/${pageId}?fields=access_token&access_token=${userAccessToken}`,\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          `Facebook API request failed: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data = await response.json();\n\n      if (data.error) {\n        throw new Error(`Facebook API error: ${data.error.message}`);\n      }\n\n      return data.access_token || null;\n    } catch (error) {\n      console.error(\"Error getting Facebook page access token:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Parse timestamp from Facebook API (handles both Unix seconds and ISO strings)\n   */\n  private parseTimestamp(timestamp: string): string {\n    // Check if it's a numeric Unix timestamp\n    if (/^\\d+(?:\\.\\d+)?$/.test(timestamp)) {\n      return new Date(parseInt(timestamp) * 1000).toISOString();\n    }\n\n    // Try parsing as ISO string\n    try {\n      const date = new Date(timestamp);\n      if (isNaN(date.getTime())) {\n        console.warn(\n          \"Invalid timestamp format, returning raw value:\",\n          timestamp,\n        );\n        return timestamp;\n      }\n      return date.toISOString();\n    } catch (error) {\n      console.warn(\"Error parsing timestamp, returning raw value:\", timestamp);\n      return timestamp;\n    }\n  }\n\n  /**\n   * Subscribe to page webhooks\n   */\n  async subscribeToWebhooks(\n    pageId: string,\n    accessToken: string,\n    callbackUrl: string,\n    verifyToken: string,\n  ): Promise<boolean> {\n    if (!this.isConfigured()) {\n      console.warn(\"Facebook API not configured\");\n      return false;\n    }\n\n    try {\n      const response = await fetch(\n        `https://graph.facebook.com/${this.apiVersion}/${pageId}/subscribed_apps`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n          },\n          body: new URLSearchParams({\n            subscribed_fields: \"live_videos,feed\",\n            access_token: accessToken,\n          }).toString(),\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          `Facebook API request failed: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data = await response.json();\n\n      if (data.error) {\n        throw new Error(`Facebook API error: ${data.error.message}`);\n      }\n\n      return data.success === true;\n    } catch (error) {\n      console.error(\"Error subscribing to Facebook webhooks:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Verify webhook callback for GET requests (challenge verification)\n   */\n  verifyWebhookCallback(\n    mode: string,\n    token: string,\n    challenge: string,\n    verifyToken: string,\n  ): string | null {\n    if (mode === \"subscribe\" && token === verifyToken) {\n      return challenge;\n    }\n    return null;\n  }\n\n  /**\n   * Verify webhook POST signature with HMAC-SHA256\n   */\n  verifyWebhookSignature(signature: string, body: string): boolean {\n    if (!this.isConfigured()) {\n      console.warn(\"Facebook API not configured\");\n      return false;\n    }\n\n    try {\n      // Remove 'sha256=' prefix if present\n      const cleanSignature = signature.replace(\"sha256=\", \"\");\n\n      // Calculate expected signature using app secret\n      const expectedSignature = createHmac(\"sha256\", this.appSecret || \"\")\n        .update(body, \"utf8\")\n        .digest(\"hex\");\n\n      // Use constant-time comparison to prevent timing attacks\n      return timingSafeEqual(\n        Buffer.from(cleanSignature, \"hex\"),\n        Buffer.from(expectedSignature, \"hex\"),\n      );\n    } catch (error) {\n      console.error(\"Error verifying webhook signature:\", error);\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const facebookAPI = new FacebookAPIService();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/games/game.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'eq' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'and' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'db' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'logger' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[743,746],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[743,746],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1330,1333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1330,1333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1400,1403],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1400,1403],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1415,1418],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1415,1418],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":66,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'gameData' is defined but never used. Allowed unused args must match /^_/u.","line":66,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'gameId' is defined but never used. Allowed unused args must match /^_/u.","line":70,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'filters' is defined but never used. Allowed unused args must match /^_/u.","line":74,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'gameId' is defined but never used. Allowed unused args must match /^_/u.","line":82,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":82,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updates' is defined but never used. Allowed unused args must match /^_/u.","line":82,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'gameId' is defined but never used. Allowed unused args must match /^_/u.","line":86,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":86,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'gameId' is defined but never used. Allowed unused args must match /^_/u.","line":90,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":90,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'gameId' is defined but never used. Allowed unused args must match /^_/u.","line":94,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Game Service\n *\n * Service for managing user-defined games in the Universal Deck-Building framework\n * NOTE: Currently disabled - 'games' table not yet implemented in schema\n */\n\nimport { eq, and } from \"drizzle-orm\";\nimport { db } from \"../../../shared/database-unified\";\n// TODO: Re-enable when games table is added to schema\n// import { games } from '../../../shared/schema';\nimport { logger } from \"../../logger\";\n\nexport interface GameData {\n  name: string;\n  displayName: string;\n  description?: string;\n  creatorId: string;\n  isOfficial?: boolean;\n  version?: string;\n  playerCount?: { min: number; max: number };\n  avgGameDuration?: number;\n  complexity?: number;\n  ageRating?: string;\n  cardTypes?: string[];\n  resourceTypes?: any[];\n  zones?: string[];\n  phaseStructure?: string[];\n  deckRules?: {\n    minDeckSize?: number;\n    maxDeckSize?: number | null;\n    maxCopies?: number;\n    allowedSets?: string[] | null;\n  };\n  theme?: {\n    primaryColor?: string;\n    accentColor?: string;\n    cardBackUrl?: string | null;\n  };\n  externalSource?: string;\n}\n\nexport interface GameUpdate {\n  displayName?: string;\n  description?: string;\n  version?: string;\n  playerCount?: { min: number; max: number };\n  avgGameDuration?: number;\n  complexity?: number;\n  ageRating?: string;\n  cardTypes?: string[];\n  resourceTypes?: any[];\n  zones?: string[];\n  phaseStructure?: string[];\n  deckRules?: any;\n  theme?: any;\n}\n\nexport class GameService {\n  private throwNotImplemented() {\n    throw new Error(\n      \"Game service not yet implemented - games table missing from schema\",\n    );\n  }\n\n  async createGame(userId: string, gameData: GameData) {\n    this.throwNotImplemented();\n  }\n\n  async getGameById(gameId: string) {\n    this.throwNotImplemented();\n  }\n\n  async getAllGames(filters?: {\n    isPublished?: boolean;\n    isOfficial?: boolean;\n    creatorId?: string;\n  }) {\n    this.throwNotImplemented();\n  }\n\n  async updateGame(gameId: string, userId: string, updates: GameUpdate) {\n    this.throwNotImplemented();\n  }\n\n  async deleteGame(gameId: string, userId: string) {\n    this.throwNotImplemented();\n  }\n\n  async publishGame(gameId: string, userId: string) {\n    this.throwNotImplemented();\n  }\n\n  async getGameStats(gameId: string) {\n    this.throwNotImplemented();\n  }\n}\n\nexport const gameService = new GameService();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/graphics-generator.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2061,2064],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2061,2064],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { storage } from \"../storage\";\nimport { logger } from \"../logger\";\nimport QRCode from \"qrcode\";\n\nexport interface GraphicTemplate {\n  name: string;\n  width: number;\n  height: number;\n}\n\nexport const GRAPHIC_TEMPLATES: Record<string, GraphicTemplate> = {\n  modern: { name: \"Modern\", width: 1200, height: 630 },\n  classic: { name: \"Classic\", width: 1200, height: 630 },\n  minimal: { name: \"Minimal\", width: 1200, height: 630 },\n  square: { name: \"Square\", width: 1080, height: 1080 },\n};\n\nexport class GraphicsGeneratorService {\n  /**\n   * Generate promotional graphic for an event\n   */\n  async generateEventGraphic(\n    eventId: string,\n    template: keyof typeof GRAPHIC_TEMPLATES = \"modern\",\n    includeQR: boolean = true,\n  ): Promise<string> {\n    try {\n      const event = await storage.getEvent(eventId);\n      if (!event) {\n        throw new Error(\"Event not found\");\n      }\n\n      const templateConfig = GRAPHIC_TEMPLATES[template];\n      if (!templateConfig) {\n        throw new Error(\"Invalid template\");\n      }\n      const eventUrl = `${process.env.AUTH_URL || \"http://localhost:3000\"}/calendar?eventId=${eventId}`;\n\n      // Generate QR code if requested\n      let qrCodeDataUrl = \"\";\n      if (includeQR) {\n        qrCodeDataUrl = await QRCode.toDataURL(eventUrl, {\n          width: 200,\n          margin: 2,\n          color: {\n            dark: \"#000000\",\n            light: \"#FFFFFF\",\n          },\n        });\n      }\n\n      // Generate SVG graphic (using SVG for simplicity instead of canvas/sharp)\n      const svg = this.generateSVG(\n        event,\n        templateConfig,\n        qrCodeDataUrl,\n        template,\n      );\n\n      // Return as data URL\n      const svgDataUrl = `data:image/svg+xml;base64,${Buffer.from(svg).toString(\"base64\")}`;\n\n      logger.info(\"Event graphic generated\", { eventId, template });\n      return svgDataUrl;\n    } catch (error) {\n      logger.error(\"Failed to generate event graphic\", error, {\n        eventId,\n        template,\n      });\n      throw error;\n    }\n  }\n\n  private generateSVG(\n    event: any,\n    config: GraphicTemplate,\n    qrCodeDataUrl: string,\n    template: string,\n  ): string {\n    const { width, height } = config;\n    const backgroundColor = this.getTemplateColor(template);\n    const textColor = template === \"modern\" ? \"#FFFFFF\" : \"#000000\";\n\n    // Format date\n    const eventDate = new Date(event.date);\n    const formattedDate = eventDate.toLocaleDateString(\"en-US\", {\n      weekday: \"long\",\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n\n    let svg = `\n      <svg width=\"${width}\" height=\"${height}\" xmlns=\"http://www.w3.org/2000/svg\">\n        <!-- Background -->\n        <rect width=\"${width}\" height=\"${height}\" fill=\"${backgroundColor}\"/>\n        \n        <!-- Gradient Overlay -->\n        <defs>\n          <linearGradient id=\"grad1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n            <stop offset=\"0%\" style=\"stop-color:${backgroundColor};stop-opacity:1\" />\n            <stop offset=\"100%\" style=\"stop-color:${this.adjustColor(backgroundColor, -20)};stop-opacity:1\" />\n          </linearGradient>\n        </defs>\n        <rect width=\"${width}\" height=\"${height}\" fill=\"url(#grad1)\"/>\n        \n        <!-- Event Type Badge -->\n        <rect x=\"50\" y=\"50\" width=\"200\" height=\"50\" rx=\"25\" fill=\"${this.getEventTypeColor(event.type)}\"/>\n        <text x=\"150\" y=\"82\" font-family=\"Arial, sans-serif\" font-size=\"24\" fill=\"white\" text-anchor=\"middle\" font-weight=\"bold\">\n          ${event.type.toUpperCase().replace(\"_\", \" \")}\n        </text>\n        \n        <!-- Event Title -->\n        <text x=\"${width / 2}\" y=\"220\" font-family=\"Arial, sans-serif\" font-size=\"64\" fill=\"${textColor}\" text-anchor=\"middle\" font-weight=\"bold\">\n          ${this.truncateText(event.title, 30)}\n        </text>\n        \n        <!-- Date and Time -->\n        <text x=\"${width / 2}\" y=\"300\" font-family=\"Arial, sans-serif\" font-size=\"32\" fill=\"${textColor}\" text-anchor=\"middle\">\n          ${formattedDate}\n        </text>\n        <text x=\"${width / 2}\" y=\"350\" font-family=\"Arial, sans-serif\" font-size=\"36\" fill=\"${textColor}\" text-anchor=\"middle\" font-weight=\"bold\">\n          ${event.time}\n        </text>\n        \n        <!-- Location -->\n        <text x=\"${width / 2}\" y=\"420\" font-family=\"Arial, sans-serif\" font-size=\"28\" fill=\"${textColor}\" text-anchor=\"middle\">\n          📍 ${this.truncateText(event.location, 40)}\n        </text>\n    `;\n\n    // Add pod info for game_pod events\n    if (event.type === \"game_pod\" && event.playerSlots) {\n      svg += `\n        <!-- Pod Info -->\n        <rect x=\"${width / 2 - 150}\" y=\"460\" width=\"300\" height=\"60\" rx=\"10\" fill=\"rgba(255,255,255,0.2)\"/>\n        <text x=\"${width / 2}\" y=\"500\" font-family=\"Arial, sans-serif\" font-size=\"28\" fill=\"${textColor}\" text-anchor=\"middle\" font-weight=\"bold\">\n          ${event.playerSlots} Player Pod\n        </text>\n      `;\n    }\n\n    // Add QR code if provided\n    if (qrCodeDataUrl) {\n      svg += `\n        <!-- QR Code -->\n        <image x=\"${width - 250}\" y=\"${height - 250}\" width=\"200\" height=\"200\" href=\"${qrCodeDataUrl}\"/>\n        <text x=\"${width - 150}\" y=\"${height - 20}\" font-family=\"Arial, sans-serif\" font-size=\"18\" fill=\"${textColor}\" text-anchor=\"middle\">\n          Scan to RSVP\n        </text>\n      `;\n    }\n\n    svg += `\n      </svg>\n    `;\n\n    return svg;\n  }\n\n  private getTemplateColor(template: string): string {\n    const colors: Record<string, string> = {\n      modern: \"#6366f1\", // Indigo\n      classic: \"#f59e0b\", // Amber\n      minimal: \"#e5e7eb\", // Gray\n      square: \"#8b5cf6\", // Purple\n    };\n    return colors[template] || \"#6366f1\";\n  }\n\n  private getEventTypeColor(type: string): string {\n    const colors: Record<string, string> = {\n      tournament: \"#eab308\", // Yellow\n      convention: \"#a855f7\", // Purple\n      release: \"#3b82f6\", // Blue\n      game_pod: \"#ef4444\", // Red\n      community: \"#22c55e\", // Green\n    };\n    return colors[type] || \"#6b7280\";\n  }\n\n  private adjustColor(color: string, percent: number): string {\n    // Simple color adjustment (darkens if negative, lightens if positive)\n    const num = parseInt(color.replace(\"#\", \"\"), 16);\n    const amt = Math.round(2.55 * percent);\n    const R = (num >> 16) + amt;\n    const G = ((num >> 8) & 0x00ff) + amt;\n    const B = (num & 0x0000ff) + amt;\n    return (\n      \"#\" +\n      (\n        0x1000000 +\n        (R < 255 ? (R < 1 ? 0 : R) : 255) * 0x10000 +\n        (G < 255 ? (G < 1 ? 0 : G) : 255) * 0x100 +\n        (B < 255 ? (B < 1 ? 0 : B) : 255)\n      )\n        .toString(16)\n        .slice(1)\n    );\n  }\n\n  private truncateText(text: string, maxLength: number): string {\n    if (text.length <= maxLength) return text;\n    return text.substring(0, maxLength - 3) + \"...\";\n  }\n}\n\nexport const graphicsGeneratorService = new GraphicsGeneratorService();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/infrastructure-test-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'redisClient' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[516,519],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[516,519],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'initialAlerts' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":155,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":155,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":317,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":317,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9620,9623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9620,9623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'result' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":441,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":441,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":448,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":448,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":530,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":530,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":782,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":782,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24142,24145],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24142,24145],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from \"../logger\";\nimport { monitoringService } from \"./monitoring-service\";\nimport { cacheService } from \"./cache-service\";\nimport { backupService } from \"./backup-service\";\nimport { db } from \"@shared/database-unified\";\nimport { sql } from \"drizzle-orm\";\nimport { redisClient } from \"./redis-client\";\nimport { storage } from \"../storage\";\n\nexport interface TestResult {\n  component: string;\n  test: string;\n  status: \"pass\" | \"fail\" | \"warning\";\n  duration: number;\n  message: string;\n  details?: any;\n  error?: string;\n}\n\nexport interface TestSuite {\n  name: string;\n  description: string;\n  tests: TestResult[];\n  summary: {\n    total: number;\n    passed: number;\n    failed: number;\n    warnings: number;\n    duration: number;\n  };\n}\n\nexport interface InfrastructureTestReport {\n  timestamp: Date;\n  suites: TestSuite[];\n  overall: {\n    total: number;\n    passed: number;\n    failed: number;\n    warnings: number;\n    duration: number;\n    score: number; // percentage of passing tests\n  };\n}\n\nclass InfrastructureTestService {\n  private isRunning = false;\n\n  constructor() {}\n\n  /**\n   * Run comprehensive infrastructure tests\n   */\n  async runComprehensiveTests(): Promise<InfrastructureTestReport> {\n    if (this.isRunning) {\n      throw new Error(\"Infrastructure tests are already running\");\n    }\n\n    this.isRunning = true;\n    const startTime = Date.now();\n\n    logger.info(\"Starting comprehensive infrastructure tests\");\n\n    try {\n      const suites: TestSuite[] = [];\n\n      // Run all test suites\n      suites.push(await this.testMonitoringSystem());\n      suites.push(await this.testCachingLayer());\n      suites.push(await this.testDatabaseOptimization());\n      suites.push(await this.testBackupSystem());\n      suites.push(await this.testAnalyticsSystem());\n      suites.push(await this.testNotificationSystem());\n      suites.push(await this.testHealthChecks());\n      suites.push(await this.testIntegrationScenarios());\n\n      // Calculate overall results\n      const totalDuration = Date.now() - startTime;\n      const overall = this.calculateOverallResults(suites, totalDuration);\n\n      const report: InfrastructureTestReport = {\n        timestamp: new Date(),\n        suites,\n        overall,\n      };\n\n      logger.info(\"Infrastructure tests completed\", {\n        duration: totalDuration,\n        score: overall.score,\n        passed: overall.passed,\n        failed: overall.failed,\n      });\n\n      return report;\n    } finally {\n      this.isRunning = false;\n    }\n  }\n\n  /**\n   * Test monitoring and alerting system\n   */\n  private async testMonitoringSystem(): Promise<TestSuite> {\n    const suite: TestSuite = {\n      name: \"Monitoring System\",\n      description:\n        \"Test monitoring service, metrics collection, health checks, and alerting\",\n      tests: [],\n      summary: { total: 0, passed: 0, failed: 0, warnings: 0, duration: 0 },\n    };\n\n    const startTime = Date.now();\n\n    // Test monitoring service status\n    suite.tests.push(\n      await this.runTest(\"monitoring\", \"service_status\", async () => {\n        const status = monitoringService.getStatus();\n        if (!status.isRunning) {\n          throw new Error(\"Monitoring service is not running\");\n        }\n        return { isRunning: status.isRunning, config: status.config };\n      }),\n    );\n\n    // Test metrics collection\n    suite.tests.push(\n      await this.runTest(\"monitoring\", \"metrics_collection\", async () => {\n        const metrics = await monitoringService.collectSystemMetrics();\n        if (!metrics || typeof metrics.cpu.usage !== \"number\") {\n          throw new Error(\"Invalid metrics collected\");\n        }\n        return {\n          cpu: metrics.cpu.usage,\n          memory: metrics.memory.usage,\n          disk: metrics.disk.usage,\n        };\n      }),\n    );\n\n    // Test health checks\n    suite.tests.push(\n      await this.runTest(\"monitoring\", \"health_checks\", async () => {\n        const healthStatus = await monitoringService.performHealthChecks();\n        const services = Array.from(healthStatus.keys());\n        if (services.length === 0) {\n          throw new Error(\"No health checks performed\");\n        }\n        return { services, count: services.length };\n      }),\n    );\n\n    // Test alert creation (controlled test)\n    suite.tests.push(\n      await this.runTest(\"monitoring\", \"alert_system\", async () => {\n        const initialAlerts = monitoringService.getAlerts().length;\n\n        // Trigger a test alert via event emission (safe way to test)\n        monitoringService.emit(\"alert\", {\n          id: `test_alert_${Date.now()}`,\n          severity: \"info\" as const,\n          service: \"test\",\n          message: \"Infrastructure test alert\",\n          timestamp: new Date(),\n          resolved: false,\n          metadata: { test: true },\n        });\n\n        // Small delay to allow processing\n        await new Promise((resolve) => setTimeout(resolve, 100));\n\n        return { alertTriggered: true, testType: \"event_emission\" };\n      }),\n    );\n\n    suite.summary.duration = Date.now() - startTime;\n    this.calculateSuiteSummary(suite);\n    return suite;\n  }\n\n  /**\n   * Test caching layer functionality\n   */\n  private async testCachingLayer(): Promise<TestSuite> {\n    const suite: TestSuite = {\n      name: \"Caching Layer\",\n      description:\n        \"Test Redis caching, fallback mechanisms, and cache operations\",\n      tests: [],\n      summary: { total: 0, passed: 0, failed: 0, warnings: 0, duration: 0 },\n    };\n\n    const startTime = Date.now();\n    const testKey = `infrastructure_test_${Date.now()}`;\n    const testValue = { test: true, timestamp: Date.now() };\n\n    // Test cache service initialization\n    suite.tests.push(\n      await this.runTest(\"cache\", \"service_status\", async () => {\n        const stats = await cacheService.getStats();\n        return {\n          connected: stats.connected,\n          keyCount: stats.keyCount,\n          memoryUsage: stats.memoryUsage,\n        };\n      }),\n    );\n\n    // Test cache set operation\n    suite.tests.push(\n      await this.runTest(\"cache\", \"cache_set\", async () => {\n        await cacheService.set(testKey, testValue, 300);\n        return { key: testKey, cached: true };\n      }),\n    );\n\n    // Test cache get operation\n    suite.tests.push(\n      await this.runTest(\"cache\", \"cache_get\", async () => {\n        const retrieved = await cacheService.get(testKey);\n        if (\n          !retrieved ||\n          (typeof retrieved === \"object\" &&\n            retrieved &&\n            \"test\" in retrieved &&\n            retrieved.test !== testValue.test)\n        ) {\n          throw new Error(\"Cache retrieval failed or data mismatch\");\n        }\n        return { retrieved: true, dataMatch: true };\n      }),\n    );\n\n    // Test cache delete operation\n    suite.tests.push(\n      await this.runTest(\"cache\", \"cache_delete\", async () => {\n        await cacheService.delete(testKey);\n        const afterDelete = await cacheService.get(testKey);\n        if (afterDelete !== null) {\n          throw new Error(\"Cache delete operation failed\");\n        }\n        return { deleted: true };\n      }),\n    );\n\n    // Test graceful degradation (when Redis is down)\n    suite.tests.push(\n      await this.runTest(\"cache\", \"graceful_degradation\", async () => {\n        // This should work even if Redis is down due to memory fallback\n        const fallbackKey = `fallback_test_${Date.now()}`;\n        await cacheService.set(fallbackKey, { fallback: true }, 60);\n        const retrieved = await cacheService.get(fallbackKey);\n        const cacheStats = await cacheService.getStats();\n\n        return {\n          fallbackWorking: retrieved !== null,\n          redisDown: !cacheStats.connected,\n        };\n      }),\n    );\n\n    suite.summary.duration = Date.now() - startTime;\n    this.calculateSuiteSummary(suite);\n    return suite;\n  }\n\n  /**\n   * Test database optimization features\n   */\n  private async testDatabaseOptimization(): Promise<TestSuite> {\n    const suite: TestSuite = {\n      name: \"Database Optimization\",\n      description:\n        \"Test database connection pooling, query optimization, and performance monitoring\",\n      tests: [],\n      summary: { total: 0, passed: 0, failed: 0, warnings: 0, duration: 0 },\n    };\n\n    const startTime = Date.now();\n\n    // Test database connectivity\n    suite.tests.push(\n      await this.runTest(\"database\", \"connectivity\", async () => {\n        const queryStart = Date.now();\n        await db.run(sql`SELECT 1 as health_check`);\n        const queryTime = Date.now() - queryStart;\n        return { connected: true, queryTime };\n      }),\n    );\n\n    // Test optimized database functions\n    suite.tests.push(\n      await this.runTest(\"database\", \"optimized_queries\", async () => {\n        const queryStart = Date.now();\n        // Test a simple storage operation to verify optimizations\n        const communities = await storage.getCommunities();\n        const queryTime = Date.now() - queryStart;\n\n        return {\n          communitiesCount: communities.length,\n          queryTime,\n          optimized: queryTime < 1000, // Should be fast\n        };\n      }),\n    );\n\n    // Test connection pool health\n    suite.tests.push(\n      await this.runTest(\"database\", \"connection_pool\", async () => {\n        // Test multiple concurrent queries to verify pool functionality\n        const queries = Array(5)\n          .fill(null)\n          .map(() => db.run(sql`SELECT current_timestamp as now`));\n\n        const results = await Promise.all(queries);\n        return {\n          concurrentQueries: results.length,\n          allSuccessful: results.every((r: any) => r !== null),\n        };\n      }),\n    );\n\n    // Test query performance monitoring\n    suite.tests.push(\n      await this.runTest(\"database\", \"performance_monitoring\", async () => {\n        // This tests if our withQueryTiming wrapper is working\n        const testStart = Date.now();\n        await storage.getCommunities(); // This should be wrapped with timing\n        const testTime = Date.now() - testStart;\n\n        return {\n          monitoringActive: true,\n          queryExecuted: true,\n          responseTime: testTime,\n        };\n      }),\n    );\n\n    suite.summary.duration = Date.now() - startTime;\n    this.calculateSuiteSummary(suite);\n    return suite;\n  }\n\n  /**\n   * Test backup and recovery system\n   */\n  private async testBackupSystem(): Promise<TestSuite> {\n    const suite: TestSuite = {\n      name: \"Backup System\",\n      description:\n        \"Test backup service, backup verification, and recovery capabilities\",\n      tests: [],\n      summary: { total: 0, passed: 0, failed: 0, warnings: 0, duration: 0 },\n    };\n\n    const startTime = Date.now();\n\n    // Test backup service status\n    suite.tests.push(\n      await this.runTest(\"backup\", \"service_status\", async () => {\n        const status = backupService.getBackupStatus();\n        return {\n          isRunning: status.isRunning,\n          configEnabled: status.config.enabled,\n          recentBackups: status.recentBackups.length,\n        };\n      }),\n    );\n\n    // Test backup configuration validation\n    suite.tests.push(\n      await this.runTest(\"backup\", \"configuration\", async () => {\n        const status = backupService.getBackupStatus();\n        const config = status.config;\n\n        const validConfig =\n          config.schedule.full &&\n          config.schedule.criticalData &&\n          config.retention.full > 0 &&\n          config.retention.criticalData > 0;\n\n        if (!validConfig) {\n          throw new Error(\"Invalid backup configuration\");\n        }\n\n        return { configValid: true, config };\n      }),\n    );\n\n    // Test backup directory accessibility (mock test)\n    suite.tests.push(\n      await this.runTest(\"backup\", \"backup_directory\", async () => {\n        // In production, this would test actual backup directory\n        // For now, we verify the service can report its status\n        const status = backupService.getBackupStatus();\n\n        return {\n          directoryConfigured: true,\n          backupDirPath: status.diskUsage.backupDir,\n        };\n      }),\n    );\n\n    // Test backup cleanup functionality\n    suite.tests.push(\n      await this.runTest(\"backup\", \"cleanup_system\", async () => {\n        // Test the cleanup system without actually running it\n        const cleanupResult = await backupService.cleanupOldBackups();\n\n        return {\n          cleanupExecuted: true,\n          deletedCount: cleanupResult.deletedCount,\n          errors: cleanupResult.errors,\n        };\n      }),\n    );\n\n    suite.summary.duration = Date.now() - startTime;\n    this.calculateSuiteSummary(suite);\n    return suite;\n  }\n\n  /**\n   * Test analytics system\n   */\n  private async testAnalyticsSystem(): Promise<TestSuite> {\n    const suite: TestSuite = {\n      name: \"Analytics System\",\n      description:\n        \"Test analytics data collection, metrics tracking, and reporting\",\n      tests: [],\n      summary: { total: 0, passed: 0, failed: 0, warnings: 0, duration: 0 },\n    };\n\n    const startTime = Date.now();\n\n    // Test analytics data models\n    suite.tests.push(\n      await this.runTest(\"analytics\", \"data_models\", async () => {\n        // Test that analytics tables exist and are accessible\n        try {\n          const result = await db.all(sql`\n          SELECT COUNT(*) as count \n          FROM sqlite_master \n          WHERE type = 'table' \n          AND name IN ('user_activity_logs', 'system_metrics', 'events')\n        `);\n          return { analyticsTablesExists: true };\n        } catch (error) {\n          return {\n            analyticsTablesExists: false,\n            note: \"Tables may not be created yet\",\n          };\n        }\n      }),\n    );\n\n    // Test analytics storage operations\n    suite.tests.push(\n      await this.runTest(\"analytics\", \"storage_operations\", async () => {\n        // Test basic storage functionality that would be used by analytics\n        const communities = await storage.getCommunities();\n        const events = await storage.getEvents();\n\n        return {\n          communitiesCount: communities.length,\n          eventsCount: events.length,\n          storageOperational: true,\n        };\n      }),\n    );\n\n    // Test metrics collection capability\n    suite.tests.push(\n      await this.runTest(\"analytics\", \"metrics_collection\", async () => {\n        // Test system metrics that would feed analytics\n        const metrics = monitoringService.getStatus().metrics;\n\n        return {\n          metricsAvailable: metrics.latest !== null,\n          metricsCount: metrics.count,\n          collectionActive: true,\n        };\n      }),\n    );\n\n    // Test analytics API endpoints accessibility\n    suite.tests.push(\n      await this.runTest(\"analytics\", \"api_endpoints\", async () => {\n        // This is a structural test - verify the analytics routes are configured\n        // In a real test, we'd make HTTP requests to the endpoints\n        return {\n          endpointsConfigured: true,\n          authenticationRequired: true,\n          note: \"Endpoints require admin authentication\",\n        };\n      }),\n    );\n\n    suite.summary.duration = Date.now() - startTime;\n    this.calculateSuiteSummary(suite);\n    return suite;\n  }\n\n  /**\n   * Test notification system\n   */\n  private async testNotificationSystem(): Promise<TestSuite> {\n    const suite: TestSuite = {\n      name: \"Notification System\",\n      description:\n        \"Test notification delivery, preferences, and multi-channel support\",\n      tests: [],\n      summary: { total: 0, passed: 0, failed: 0, warnings: 0, duration: 0 },\n    };\n\n    const startTime = Date.now();\n\n    // Test notification data models\n    suite.tests.push(\n      await this.runTest(\"notifications\", \"data_models\", async () => {\n        try {\n          // Test notification-related storage operations\n          const result = await db.all(sql`\n          SELECT COUNT(*) as count \n          FROM sqlite_master \n          WHERE type = 'table' \n          AND name IN ('notifications', 'notification_preferences', 'messages')\n        `);\n          return { notificationTablesExist: true, count: result[0] };\n        } catch (error) {\n          return {\n            notificationTablesExist: false,\n            error: \"Tables may not be created yet\",\n          };\n        }\n      }),\n    );\n\n    // Test notification preferences system\n    suite.tests.push(\n      await this.runTest(\"notifications\", \"preferences_system\", async () => {\n        // Test that the notification preferences system is functional\n        return {\n          preferencesSystemConfigured: true,\n          multiChannelSupport: true,\n          userPreferencesSupported: true,\n        };\n      }),\n    );\n\n    // Test notification delivery channels\n    suite.tests.push(\n      await this.runTest(\"notifications\", \"delivery_channels\", async () => {\n        // Test notification channel configuration\n        const channels = [\"in_app\", \"email\", \"sms\", \"push\"];\n\n        return {\n          supportedChannels: channels,\n          channelCount: channels.length,\n          configurationValid: true,\n        };\n      }),\n    );\n\n    // Test notification queue system\n    suite.tests.push(\n      await this.runTest(\"notifications\", \"queue_system\", async () => {\n        // Test notification queuing and processing\n        return {\n          queueSystemActive: true,\n          processingEnabled: true,\n          note: \"Queue system configured for async processing\",\n        };\n      }),\n    );\n\n    suite.summary.duration = Date.now() - startTime;\n    this.calculateSuiteSummary(suite);\n    return suite;\n  }\n\n  /**\n   * Test health check systems\n   */\n  private async testHealthChecks(): Promise<TestSuite> {\n    const suite: TestSuite = {\n      name: \"Health Check System\",\n      description: \"Test comprehensive health monitoring and status reporting\",\n      tests: [],\n      summary: { total: 0, passed: 0, failed: 0, warnings: 0, duration: 0 },\n    };\n\n    const startTime = Date.now();\n\n    // Test individual health checks\n    suite.tests.push(\n      await this.runTest(\"health\", \"database_health\", async () => {\n        const healthStatus = await monitoringService.performHealthChecks();\n        const dbHealth = healthStatus.get(\"database\");\n\n        return {\n          status: dbHealth?.status || \"unknown\",\n          latency: dbHealth?.latency,\n          lastChecked: dbHealth?.lastChecked,\n        };\n      }),\n    );\n\n    suite.tests.push(\n      await this.runTest(\"health\", \"redis_health\", async () => {\n        const healthStatus = await monitoringService.performHealthChecks();\n        const redisHealth = healthStatus.get(\"redis\");\n\n        return {\n          status: redisHealth?.status || \"unknown\",\n          gracefulDegradation:\n            redisHealth?.details?.gracefulDegradation || false,\n          note: \"Redis expected to be degraded/unhealthy in test environment\",\n        };\n      }),\n    );\n\n    suite.tests.push(\n      await this.runTest(\"health\", \"application_health\", async () => {\n        const healthStatus = await monitoringService.performHealthChecks();\n        const appHealth = healthStatus.get(\"application\");\n\n        return {\n          status: appHealth?.status || \"unknown\",\n          uptime: appHealth?.details?.uptime,\n          memoryUsage: appHealth?.details?.memoryUsage,\n        };\n      }),\n    );\n\n    suite.tests.push(\n      await this.runTest(\"health\", \"filesystem_health\", async () => {\n        const healthStatus = await monitoringService.performHealthChecks();\n        const fsHealth = healthStatus.get(\"filesystem\");\n\n        return {\n          status: fsHealth?.status || \"unknown\",\n          readWrite: fsHealth?.details?.readWrite,\n          tempDirectory: fsHealth?.details?.tempDirectory,\n        };\n      }),\n    );\n\n    // Test overall health status aggregation\n    suite.tests.push(\n      await this.runTest(\"health\", \"overall_status\", async () => {\n        const healthStatus = await monitoringService.performHealthChecks();\n        const services = Array.from(healthStatus.keys());\n        const healthyServices = Array.from(healthStatus.values()).filter(\n          (h) => h.status === \"healthy\",\n        ).length;\n\n        return {\n          totalServices: services.length,\n          healthyServices,\n          servicesList: services,\n          overallHealth: healthyServices / services.length,\n        };\n      }),\n    );\n\n    suite.summary.duration = Date.now() - startTime;\n    this.calculateSuiteSummary(suite);\n    return suite;\n  }\n\n  /**\n   * Test integration scenarios across systems\n   */\n  private async testIntegrationScenarios(): Promise<TestSuite> {\n    const suite: TestSuite = {\n      name: \"Integration Scenarios\",\n      description: \"Test cross-system integration and end-to-end workflows\",\n      tests: [],\n      summary: { total: 0, passed: 0, failed: 0, warnings: 0, duration: 0 },\n    };\n\n    const startTime = Date.now();\n\n    // Test monitoring + alerting integration\n    suite.tests.push(\n      await this.runTest(\"integration\", \"monitoring_alerting\", async () => {\n        const alerts = monitoringService.getAlerts({ resolved: false });\n        const metrics = monitoringService.getStatus().metrics;\n\n        return {\n          activeAlerts: alerts.length,\n          metricsCollection: metrics.latest !== null,\n          integrationWorking: true,\n        };\n      }),\n    );\n\n    // Test caching + database integration\n    suite.tests.push(\n      await this.runTest(\"integration\", \"cache_database\", async () => {\n        const cacheKey = `integration_test_${Date.now()}`;\n\n        // Test data flow: Database -> Cache -> Retrieval\n        const communities = await storage.getCommunities();\n        await cacheService.set(cacheKey, communities, 300);\n        const cachedData = await cacheService.get(cacheKey);\n\n        return {\n          databaseQuery: communities.length > 0,\n          cacheStorage: true,\n          cacheRetrieval: cachedData !== null,\n          dataIntegrity:\n            Array.isArray(cachedData) &&\n            cachedData.length === communities.length,\n        };\n      }),\n    );\n\n    // Test monitoring + database optimization integration\n    suite.tests.push(\n      await this.runTest(\"integration\", \"monitoring_database\", async () => {\n        const dbHealthBefore = await monitoringService.performHealthChecks();\n        const dbHealth = dbHealthBefore.get(\"database\");\n\n        // Perform a database operation that should be monitored\n        await storage.getCommunities();\n\n        return {\n          dbHealthStatus: dbHealth?.status,\n          dbLatency: dbHealth?.latency,\n          monitoring: true,\n          queryPerformed: true,\n        };\n      }),\n    );\n\n    // Test backup + monitoring integration\n    suite.tests.push(\n      await this.runTest(\"integration\", \"backup_monitoring\", async () => {\n        const backupStatus = backupService.getBackupStatus();\n        const monitoringStatus = monitoringService.getStatus();\n\n        return {\n          backupSystemActive: backupStatus.isRunning,\n          monitoringActive: monitoringStatus.isRunning,\n          bothSystemsIntegrated: true,\n          healthChecksIncludeBackup: true,\n        };\n      }),\n    );\n\n    // Test end-to-end system resilience\n    suite.tests.push(\n      await this.runTest(\"integration\", \"system_resilience\", async () => {\n        // Test that systems work together even when Redis is down\n        const cacheStatus = await cacheService.getStats();\n        const monitoringStatus = monitoringService.getStatus();\n        const dbConnectivity = await db.run(sql`SELECT 1`);\n\n        return {\n          redisDown: !cacheStatus.connected,\n          monitoringStillWorking: monitoringStatus.isRunning,\n          databaseStillWorking: dbConnectivity.rows.length > 0,\n          gracefulDegradation: true,\n          systemResilience: \"excellent\",\n        };\n      }),\n    );\n\n    suite.summary.duration = Date.now() - startTime;\n    this.calculateSuiteSummary(suite);\n    return suite;\n  }\n\n  /**\n   * Run a single test with error handling and timing\n   */\n  private async runTest(\n    component: string,\n    testName: string,\n    testFn: () => Promise<any>,\n  ): Promise<TestResult> {\n    const startTime = Date.now();\n\n    try {\n      const result = await testFn();\n      const duration = Date.now() - startTime;\n\n      // Determine status based on result\n      let status: \"pass\" | \"fail\" | \"warning\" = \"pass\";\n      let message = \"Test passed successfully\";\n\n      // Check for warning conditions\n      if (result && typeof result === \"object\") {\n        if (result.error || result.warning) {\n          status = \"warning\";\n          message =\n            result.error || result.warning || \"Test completed with warnings\";\n        }\n      }\n\n      return {\n        component,\n        test: testName,\n        status,\n        duration,\n        message,\n        details: result,\n      };\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      return {\n        component,\n        test: testName,\n        status: \"fail\",\n        duration,\n        message: \"Test failed\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      };\n    }\n  }\n\n  /**\n   * Calculate test suite summary\n   */\n  private calculateSuiteSummary(suite: TestSuite): void {\n    suite.summary.total = suite.tests.length;\n    suite.summary.passed = suite.tests.filter(\n      (t) => t.status === \"pass\",\n    ).length;\n    suite.summary.failed = suite.tests.filter(\n      (t) => t.status === \"fail\",\n    ).length;\n    suite.summary.warnings = suite.tests.filter(\n      (t) => t.status === \"warning\",\n    ).length;\n  }\n\n  /**\n   * Calculate overall test results\n   */\n  private calculateOverallResults(suites: TestSuite[], duration: number) {\n    const total = suites.reduce((sum, suite) => sum + suite.summary.total, 0);\n    const passed = suites.reduce((sum, suite) => sum + suite.summary.passed, 0);\n    const failed = suites.reduce((sum, suite) => sum + suite.summary.failed, 0);\n    const warnings = suites.reduce(\n      (sum, suite) => sum + suite.summary.warnings,\n      0,\n    );\n    const score = total > 0 ? Math.round((passed / total) * 100) : 0;\n\n    return {\n      total,\n      passed,\n      failed,\n      warnings,\n      duration,\n      score,\n    };\n  }\n\n  /**\n   * Get test service status\n   */\n  getStatus(): { isRunning: boolean } {\n    return { isRunning: this.isRunning };\n  }\n}\n\nexport const infrastructureTestService = new InfrastructureTestService();\nexport { InfrastructureTestService };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/monitoring-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[878,881],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[878,881],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1098,1101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1098,1101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'severity' is defined but never used. Allowed unused args must match /^_/u.","line":700,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":700,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EventEmitter } from \"events\";\nimport { logger } from \"../logger\";\nimport os from \"os\";\nimport fs from \"fs/promises\";\nimport { db } from \"@shared/database-unified\";\nimport { sql } from \"drizzle-orm\";\nimport { redisClient } from \"./redis-client\";\n\nexport interface SystemMetrics {\n  timestamp: Date;\n  cpu: {\n    usage: number;\n    loadAverage: number[];\n    cores: number;\n  };\n  memory: {\n    used: number;\n    free: number;\n    total: number;\n    usage: number;\n  };\n  disk: {\n    used: number;\n    free: number;\n    total: number;\n    usage: number;\n  };\n  process: {\n    pid: number;\n    uptime: number;\n    memoryUsage: NodeJS.MemoryUsage;\n    cpuUsage: NodeJS.CpuUsage;\n  };\n}\n\nexport interface ServiceHealth {\n  service: string;\n  status: \"healthy\" | \"degraded\" | \"unhealthy\";\n  latency?: number;\n  lastChecked: Date;\n  error?: string;\n  details?: Record<string, any>;\n}\n\nexport interface Alert {\n  id: string;\n  severity: \"critical\" | \"warning\" | \"info\";\n  service: string;\n  message: string;\n  timestamp: Date;\n  resolved: boolean;\n  resolvedAt?: Date;\n  metadata?: Record<string, any>;\n}\n\nexport interface MonitoringConfig {\n  enabled: boolean;\n  intervals: {\n    metrics: number; // System metrics collection interval (ms)\n    healthCheck: number; // Health check interval (ms)\n    alertCheck: number; // Alert evaluation interval (ms)\n  };\n  thresholds: {\n    cpu: { warning: number; critical: number };\n    memory: { warning: number; critical: number };\n    disk: { warning: number; critical: number };\n    responseTime: { warning: number; critical: number };\n    errorRate: { warning: number; critical: number };\n  };\n  retention: {\n    metrics: number; // Days to retain metrics\n    alerts: number; // Days to retain alerts\n  };\n  alerting: {\n    enabled: boolean;\n    channels: string[]; // Alert delivery channels\n    rateLimiting: {\n      maxAlertsPerHour: number;\n      cooldownMinutes: number;\n    };\n  };\n}\n\nclass MonitoringService extends EventEmitter {\n  private config: MonitoringConfig;\n  private metrics: SystemMetrics[] = [];\n  private healthStatus: Map<string, ServiceHealth> = new Map();\n  private alerts: Alert[] = [];\n  private intervals: Map<string, NodeJS.Timeout> = new Map();\n  private isRunning = false;\n  private lastCpuUsage?: NodeJS.CpuUsage;\n\n  constructor() {\n    super();\n    this.config = {\n      enabled: process.env.MONITORING_ENABLED !== \"false\",\n      intervals: {\n        metrics: parseInt(process.env.MONITORING_METRICS_INTERVAL || \"60000\"), // 1 minute\n        healthCheck: parseInt(\n          process.env.MONITORING_HEALTH_INTERVAL || \"30000\",\n        ), // 30 seconds\n        alertCheck: parseInt(process.env.MONITORING_ALERT_INTERVAL || \"10000\"), // 10 seconds\n      },\n      thresholds: {\n        cpu: {\n          warning: parseInt(process.env.MONITORING_CPU_WARNING || \"70\"),\n          critical: parseInt(process.env.MONITORING_CPU_CRITICAL || \"90\"),\n        },\n        memory: {\n          warning: parseInt(process.env.MONITORING_MEMORY_WARNING || \"80\"),\n          critical: parseInt(process.env.MONITORING_MEMORY_CRITICAL || \"95\"),\n        },\n        disk: {\n          warning: parseInt(process.env.MONITORING_DISK_WARNING || \"85\"),\n          critical: parseInt(process.env.MONITORING_DISK_CRITICAL || \"95\"),\n        },\n        responseTime: {\n          warning: parseInt(process.env.MONITORING_RESPONSE_WARNING || \"1000\"),\n          critical: parseInt(\n            process.env.MONITORING_RESPONSE_CRITICAL || \"5000\",\n          ),\n        },\n        errorRate: {\n          warning: parseInt(process.env.MONITORING_ERROR_WARNING || \"5\"),\n          critical: parseInt(process.env.MONITORING_ERROR_CRITICAL || \"10\"),\n        },\n      },\n      retention: {\n        metrics: parseInt(process.env.MONITORING_METRICS_RETENTION || \"7\"), // 7 days\n        alerts: parseInt(process.env.MONITORING_ALERTS_RETENTION || \"30\"), // 30 days\n      },\n      alerting: {\n        enabled: process.env.MONITORING_ALERTING_ENABLED !== \"false\",\n        channels: (process.env.MONITORING_ALERT_CHANNELS || \"\")\n          .split(\",\")\n          .filter(Boolean),\n        rateLimiting: {\n          maxAlertsPerHour: parseInt(\n            process.env.MONITORING_MAX_ALERTS_PER_HOUR || \"20\",\n          ),\n          cooldownMinutes: parseInt(\n            process.env.MONITORING_ALERT_COOLDOWN || \"15\",\n          ),\n        },\n      },\n    };\n\n    // Initialize CPU usage tracking\n    this.lastCpuUsage = process.cpuUsage();\n  }\n\n  /**\n   * Start monitoring services\n   */\n  start(): void {\n    if (this.isRunning || !this.config.enabled) {\n      return;\n    }\n\n    this.isRunning = true;\n    logger.info(\"Monitoring service starting\", { config: this.config });\n\n    // Start metrics collection\n    const metricsInterval = setInterval(() => {\n      this.collectSystemMetrics().catch((error) => {\n        logger.error(\"Failed to collect system metrics\", error);\n      });\n    }, this.config.intervals.metrics);\n    this.intervals.set(\"metrics\", metricsInterval);\n\n    // Start health checks\n    const healthInterval = setInterval(() => {\n      this.performHealthChecks().catch((error) => {\n        logger.error(\"Failed to perform health checks\", error);\n      });\n    }, this.config.intervals.healthCheck);\n    this.intervals.set(\"health\", healthInterval);\n\n    // Start alert evaluation\n    const alertInterval = setInterval(() => {\n      this.evaluateAlerts().catch((error) => {\n        logger.error(\"Failed to evaluate alerts\", error);\n      });\n    }, this.config.intervals.alertCheck);\n    this.intervals.set(\"alerts\", alertInterval);\n\n    // Start cleanup\n    const cleanupInterval = setInterval(\n      () => {\n        this.cleanup().catch((error) => {\n          logger.error(\"Failed to cleanup old data\", error);\n        });\n      },\n      24 * 60 * 60 * 1000,\n    ); // Daily cleanup\n    this.intervals.set(\"cleanup\", cleanupInterval);\n\n    // Perform initial checks\n    this.collectSystemMetrics().catch((error) => {\n      logger.error(\"Initial metrics collection failed\", error);\n    });\n    this.performHealthChecks().catch((error) => {\n      logger.error(\"Initial health check failed\", error);\n    });\n\n    logger.info(\"Monitoring service started successfully\");\n  }\n\n  /**\n   * Stop monitoring services\n   */\n  stop(): void {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this.isRunning = false;\n    logger.info(\"Monitoring service stopping\");\n\n    // Clear all intervals\n    Array.from(this.intervals.entries()).forEach(([name, interval]) => {\n      clearInterval(interval);\n      logger.debug(\"Stopped monitoring interval\", { interval: name });\n    });\n    this.intervals.clear();\n\n    logger.info(\"Monitoring service stopped\");\n  }\n\n  /**\n   * Collect system metrics\n   */\n  async collectSystemMetrics(): Promise<SystemMetrics> {\n    try {\n      const timestamp = new Date();\n\n      // CPU metrics\n      const currentCpuUsage = process.cpuUsage(this.lastCpuUsage);\n      this.lastCpuUsage = process.cpuUsage();\n      const cpuPercent =\n        ((currentCpuUsage.user + currentCpuUsage.system) / 1000000) * 100;\n      const loadAverage = os.loadavg();\n\n      // Memory metrics\n      const totalMemory = os.totalmem();\n      const freeMemory = os.freemem();\n      const usedMemory = totalMemory - freeMemory;\n\n      // Process memory\n      const processMemory = process.memoryUsage();\n\n      // Disk metrics (basic implementation)\n      let diskUsage = { used: 0, free: 0, total: 0, usage: 0 };\n      try {\n        const cwd = process.cwd();\n        if (cwd) {\n          const stats = await fs.statfs(cwd);\n          diskUsage = {\n            used: (stats.blocks - stats.bavail) * stats.bsize,\n            free: stats.bavail * stats.bsize,\n            total: stats.blocks * stats.bsize,\n            usage: ((stats.blocks - stats.bavail) / stats.blocks) * 100,\n          };\n        }\n      } catch (error) {\n        // If statfs is not available or cwd is undefined, use reasonable defaults\n        logger.debug(\"Disk usage calculation failed, using defaults\", error);\n      }\n\n      const metrics: SystemMetrics = {\n        timestamp,\n        cpu: {\n          usage: Math.min(cpuPercent, 100),\n          loadAverage,\n          cores: os.cpus().length,\n        },\n        memory: {\n          used: usedMemory,\n          free: freeMemory,\n          total: totalMemory,\n          usage: (usedMemory / totalMemory) * 100,\n        },\n        disk: diskUsage,\n        process: {\n          pid: process.pid,\n          uptime: process.uptime(),\n          memoryUsage: processMemory,\n          cpuUsage: currentCpuUsage,\n        },\n      };\n\n      // Store metrics\n      this.metrics.push(metrics);\n\n      // Emit metrics event\n      this.emit(\"metrics\", metrics);\n\n      logger.debug(\"System metrics collected\", {\n        cpu: metrics.cpu.usage,\n        memory: metrics.memory.usage,\n        disk: metrics.disk.usage,\n      });\n\n      return metrics;\n    } catch (error) {\n      logger.error(\"Failed to collect system metrics\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Perform health checks on all services\n   */\n  async performHealthChecks(): Promise<Map<string, ServiceHealth>> {\n    const checks = [\n      this.checkDatabaseHealth(),\n      this.checkRedisHealth(),\n      this.checkApplicationHealth(),\n      this.checkFileSystemHealth(),\n    ];\n\n    const results = await Promise.allSettled(checks);\n\n    results.forEach((result, index) => {\n      if (result.status === \"fulfilled\") {\n        this.healthStatus.set(result.value.service, result.value);\n      } else {\n        const serviceNames = [\"database\", \"redis\", \"application\", \"filesystem\"];\n        const serviceName = serviceNames[index] || \"unknown\";\n        this.healthStatus.set(serviceName, {\n          service: serviceName,\n          status: \"unhealthy\",\n          lastChecked: new Date(),\n          error: result.reason?.message || \"Health check failed\",\n        });\n      }\n    });\n\n    // Emit health status update\n    this.emit(\"healthUpdate\", this.healthStatus);\n\n    return this.healthStatus;\n  }\n\n  /**\n   * Check database connectivity and performance\n   */\n  private async checkDatabaseHealth(): Promise<ServiceHealth> {\n    const startTime = Date.now();\n\n    try {\n      // Simple connectivity test\n      await db.run(sql`SELECT 1 as health_check`);\n\n      const latency = Date.now() - startTime;\n\n      return {\n        service: \"database\",\n        status: latency < 1000 ? \"healthy\" : \"degraded\",\n        latency,\n        lastChecked: new Date(),\n        details: {\n          connectionPool: \"active\",\n          queryTime: `${latency}ms`,\n        },\n      };\n    } catch (error) {\n      return {\n        service: \"database\",\n        status: \"unhealthy\",\n        latency: Date.now() - startTime,\n        lastChecked: new Date(),\n        error:\n          error instanceof Error ? error.message : \"Database connection failed\",\n      };\n    }\n  }\n\n  /**\n   * Check Redis connectivity and performance\n   */\n  private async checkRedisHealth(): Promise<ServiceHealth> {\n    const startTime = Date.now();\n\n    try {\n      await redisClient.ping();\n\n      const latency = Date.now() - startTime;\n\n      return {\n        service: \"redis\",\n        status: latency < 500 ? \"healthy\" : \"degraded\",\n        latency,\n        lastChecked: new Date(),\n        details: {\n          connected: true,\n          responseTime: `${latency}ms`,\n        },\n      };\n    } catch (error) {\n      return {\n        service: \"redis\",\n        status: \"degraded\", // Redis failure is not critical due to graceful degradation\n        latency: Date.now() - startTime,\n        lastChecked: new Date(),\n        error:\n          error instanceof Error ? error.message : \"Redis connection failed\",\n        details: {\n          gracefulDegradation: true,\n        },\n      };\n    }\n  }\n\n  /**\n   * Check application health\n   */\n  private async checkApplicationHealth(): Promise<ServiceHealth> {\n    try {\n      const uptime = process.uptime();\n      const memoryUsage = process.memoryUsage();\n\n      return {\n        service: \"application\",\n        status: \"healthy\",\n        lastChecked: new Date(),\n        details: {\n          uptime: `${Math.floor(uptime / 60)} minutes`,\n          memoryUsage: `${Math.round(memoryUsage.rss / 1024 / 1024)}MB`,\n          nodeVersion: process.version,\n          pid: process.pid,\n        },\n      };\n    } catch (error) {\n      return {\n        service: \"application\",\n        status: \"unhealthy\",\n        lastChecked: new Date(),\n        error:\n          error instanceof Error\n            ? error.message\n            : \"Application health check failed\",\n      };\n    }\n  }\n\n  /**\n   * Check filesystem health\n   */\n  private async checkFileSystemHealth(): Promise<ServiceHealth> {\n    try {\n      const testFile = \"/tmp/health_check_test\";\n\n      // Test write/read/delete\n      await fs.writeFile(testFile, \"health_check\");\n      const content = await fs.readFile(testFile, \"utf-8\");\n      await fs.unlink(testFile);\n\n      if (content !== \"health_check\") {\n        throw new Error(\"File content mismatch\");\n      }\n\n      return {\n        service: \"filesystem\",\n        status: \"healthy\",\n        lastChecked: new Date(),\n        details: {\n          readWrite: \"operational\",\n          tempDirectory: \"/tmp\",\n        },\n      };\n    } catch (error) {\n      return {\n        service: \"filesystem\",\n        status: \"unhealthy\",\n        lastChecked: new Date(),\n        error:\n          error instanceof Error\n            ? error.message\n            : \"Filesystem health check failed\",\n      };\n    }\n  }\n\n  /**\n   * Evaluate alerts based on current metrics and health status\n   */\n  private async evaluateAlerts(): Promise<void> {\n    if (!this.config.alerting.enabled) {\n      return;\n    }\n\n    const currentMetrics = this.metrics[this.metrics.length - 1];\n    if (!currentMetrics) {\n      return;\n    }\n\n    // Check system thresholds\n    await this.checkCpuAlerts(currentMetrics);\n    await this.checkMemoryAlerts(currentMetrics);\n    await this.checkDiskAlerts(currentMetrics);\n    await this.checkServiceAlerts();\n\n    // Clean up resolved alerts\n    this.cleanupResolvedAlerts();\n  }\n\n  /**\n   * Check CPU usage alerts\n   */\n  private async checkCpuAlerts(metrics: SystemMetrics): Promise<void> {\n    const usage = metrics.cpu.usage;\n    const { warning, critical } = this.config.thresholds.cpu;\n\n    if (usage >= critical) {\n      await this.createAlert({\n        severity: \"critical\",\n        service: \"system\",\n        message: `Critical CPU usage: ${usage.toFixed(1)}%`,\n        metadata: { usage, threshold: critical, metric: \"cpu\" },\n      });\n    } else if (usage >= warning) {\n      await this.createAlert({\n        severity: \"warning\",\n        service: \"system\",\n        message: `High CPU usage: ${usage.toFixed(1)}%`,\n        metadata: { usage, threshold: warning, metric: \"cpu\" },\n      });\n    } else {\n      // Resolve any existing CPU alerts\n      this.resolveAlerts(\"system\", \"cpu\");\n    }\n  }\n\n  /**\n   * Check memory usage alerts\n   */\n  private async checkMemoryAlerts(metrics: SystemMetrics): Promise<void> {\n    const usage = metrics.memory.usage;\n    const { warning, critical } = this.config.thresholds.memory;\n\n    if (usage >= critical) {\n      await this.createAlert({\n        severity: \"critical\",\n        service: \"system\",\n        message: `Critical memory usage: ${usage.toFixed(1)}%`,\n        metadata: { usage, threshold: critical, metric: \"memory\" },\n      });\n    } else if (usage >= warning) {\n      await this.createAlert({\n        severity: \"warning\",\n        service: \"system\",\n        message: `High memory usage: ${usage.toFixed(1)}%`,\n        metadata: { usage, threshold: warning, metric: \"memory\" },\n      });\n    } else {\n      this.resolveAlerts(\"system\", \"memory\");\n    }\n  }\n\n  /**\n   * Check disk usage alerts\n   */\n  private async checkDiskAlerts(metrics: SystemMetrics): Promise<void> {\n    const usage = metrics.disk.usage;\n    const { warning, critical } = this.config.thresholds.disk;\n\n    if (usage >= critical) {\n      await this.createAlert({\n        severity: \"critical\",\n        service: \"system\",\n        message: `Critical disk usage: ${usage.toFixed(1)}%`,\n        metadata: { usage, threshold: critical, metric: \"disk\" },\n      });\n    } else if (usage >= warning) {\n      await this.createAlert({\n        severity: \"warning\",\n        service: \"system\",\n        message: `High disk usage: ${usage.toFixed(1)}%`,\n        metadata: { usage, threshold: warning, metric: \"disk\" },\n      });\n    } else {\n      this.resolveAlerts(\"system\", \"disk\");\n    }\n  }\n\n  /**\n   * Check service health alerts\n   */\n  private async checkServiceAlerts(): Promise<void> {\n    Array.from(this.healthStatus.entries()).forEach(\n      async ([serviceName, health]) => {\n        if (health.status === \"unhealthy\") {\n          await this.createAlert({\n            severity: \"critical\",\n            service: serviceName,\n            message: `Service ${serviceName} is unhealthy: ${health.error || \"Unknown error\"}`,\n            metadata: { health, metric: \"service_health\" },\n          });\n        } else if (health.status === \"degraded\") {\n          await this.createAlert({\n            severity: \"warning\",\n            service: serviceName,\n            message: `Service ${serviceName} is degraded`,\n            metadata: { health, metric: \"service_health\" },\n          });\n        } else {\n          this.resolveAlerts(serviceName, \"service_health\");\n        }\n      },\n    );\n  }\n\n  /**\n   * Create a new alert\n   */\n  private async createAlert(\n    alertData: Omit<Alert, \"id\" | \"timestamp\" | \"resolved\">,\n  ): Promise<Alert> {\n    // Check if similar alert already exists and is not resolved\n    const existingAlert = this.alerts.find(\n      (alert) =>\n        alert.service === alertData.service &&\n        alert.metadata?.metric === alertData.metadata?.metric &&\n        !alert.resolved,\n    );\n\n    if (existingAlert) {\n      // Update existing alert timestamp\n      existingAlert.timestamp = new Date();\n      return existingAlert;\n    }\n\n    // Rate limiting check\n    if (!this.canCreateAlert(alertData.service, alertData.severity)) {\n      logger.warn(\"Alert rate limited\", {\n        service: alertData.service,\n        severity: alertData.severity,\n      });\n      // If rate limited and no existing alert, create a placeholder\n      if (!existingAlert) {\n        throw new Error(`Alert rate limited for ${alertData.service}`);\n      }\n      return existingAlert;\n    }\n\n    const alert: Alert = {\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date(),\n      resolved: false,\n      ...alertData,\n    };\n\n    this.alerts.push(alert);\n\n    // Emit alert event\n    this.emit(\"alert\", alert);\n\n    // Send notification\n    await this.sendAlertNotification(alert);\n\n    logger.warn(\"Alert created\", {\n      id: alert.id,\n      severity: alert.severity,\n      service: alert.service,\n      message: alert.message,\n    });\n\n    return alert;\n  }\n\n  /**\n   * Resolve alerts for a specific service and metric\n   */\n  private resolveAlerts(service: string, metric: string): void {\n    const alertsToResolve = this.alerts.filter(\n      (alert) =>\n        alert.service === service &&\n        alert.metadata?.metric === metric &&\n        !alert.resolved,\n    );\n\n    for (const alert of alertsToResolve) {\n      alert.resolved = true;\n      alert.resolvedAt = new Date();\n\n      this.emit(\"alertResolved\", alert);\n\n      logger.info(\"Alert resolved\", {\n        id: alert.id,\n        service: alert.service,\n        duration: alert.resolvedAt.getTime() - alert.timestamp.getTime(),\n      });\n    }\n  }\n\n  /**\n   * Check if alert can be created based on rate limiting\n   */\n  private canCreateAlert(service: string, severity: string): boolean {\n    const hourAgo = new Date(Date.now() - 60 * 60 * 1000);\n    const recentAlerts = this.alerts.filter(\n      (alert) => alert.service === service && alert.timestamp > hourAgo,\n    );\n\n    return (\n      recentAlerts.length < this.config.alerting.rateLimiting.maxAlertsPerHour\n    );\n  }\n\n  /**\n   * Send alert notification\n   */\n  private async sendAlertNotification(alert: Alert): Promise<void> {\n    try {\n      // Log alert (basic notification)\n      logger.warn(\"ALERT NOTIFICATION\", {\n        id: alert.id,\n        severity: alert.severity,\n        service: alert.service,\n        message: alert.message,\n        timestamp: alert.timestamp,\n      });\n\n      // In production, implement actual notification channels:\n      // - Email notifications\n      // - Slack/Discord webhooks\n      // - SMS alerts\n      // - PagerDuty integration\n    } catch (error) {\n      logger.error(\"Failed to send alert notification\", error, {\n        alertId: alert.id,\n      });\n    }\n  }\n\n  /**\n   * Clean up old metrics and alerts\n   */\n  private async cleanup(): Promise<void> {\n    const now = new Date();\n\n    // Clean up old metrics\n    const metricsRetentionMs =\n      this.config.retention.metrics * 24 * 60 * 60 * 1000;\n    const metricsOldestDate = new Date(now.getTime() - metricsRetentionMs);\n    this.metrics = this.metrics.filter(\n      (metric) => metric.timestamp > metricsOldestDate,\n    );\n\n    // Clean up old alerts\n    const alertsRetentionMs =\n      this.config.retention.alerts * 24 * 60 * 60 * 1000;\n    const alertsOldestDate = new Date(now.getTime() - alertsRetentionMs);\n    this.alerts = this.alerts.filter(\n      (alert) => alert.timestamp > alertsOldestDate,\n    );\n\n    logger.debug(\"Monitoring cleanup completed\", {\n      metricsRetained: this.metrics.length,\n      alertsRetained: this.alerts.length,\n    });\n  }\n\n  /**\n   * Clean up resolved alerts older than cooldown period\n   */\n  private cleanupResolvedAlerts(): void {\n    const cooldownMs =\n      this.config.alerting.rateLimiting.cooldownMinutes * 60 * 1000;\n    const cutoffTime = new Date(Date.now() - cooldownMs);\n\n    this.alerts = this.alerts.filter((alert) => {\n      if (alert.resolved && alert.resolvedAt && alert.resolvedAt < cutoffTime) {\n        return false; // Remove old resolved alerts\n      }\n      return true;\n    });\n  }\n\n  /**\n   * Get current monitoring status\n   */\n  getStatus(): {\n    isRunning: boolean;\n    config: MonitoringConfig;\n    metrics: {\n      latest: SystemMetrics | null;\n      count: number;\n    };\n    health: Record<string, ServiceHealth>;\n    alerts: {\n      active: Alert[];\n      total: number;\n    };\n  } {\n    return {\n      isRunning: this.isRunning,\n      config: this.config,\n      metrics: {\n        latest: this.metrics[this.metrics.length - 1] || null,\n        count: this.metrics.length,\n      },\n      health: Object.fromEntries(this.healthStatus),\n      alerts: {\n        active: this.alerts.filter((alert) => !alert.resolved),\n        total: this.alerts.length,\n      },\n    };\n  }\n\n  /**\n   * Get metrics for a time range\n   */\n  getMetrics(since?: Date, limit = 100): SystemMetrics[] {\n    let filteredMetrics = this.metrics;\n\n    if (since) {\n      filteredMetrics = filteredMetrics.filter(\n        (metric) => metric.timestamp >= since,\n      );\n    }\n\n    return filteredMetrics.slice(-limit);\n  }\n\n  /**\n   * Get alerts with optional filtering\n   */\n  getAlerts(filters?: {\n    service?: string;\n    severity?: string;\n    resolved?: boolean;\n    since?: Date;\n  }): Alert[] {\n    let filteredAlerts = this.alerts;\n\n    if (filters?.service) {\n      filteredAlerts = filteredAlerts.filter(\n        (alert) => alert.service === filters.service,\n      );\n    }\n\n    if (filters?.severity) {\n      filteredAlerts = filteredAlerts.filter(\n        (alert) => alert.severity === filters.severity,\n      );\n    }\n\n    if (filters?.resolved !== undefined) {\n      filteredAlerts = filteredAlerts.filter(\n        (alert) => alert.resolved === filters.resolved,\n      );\n    }\n\n    if (filters?.since) {\n      const sinceDate = filters.since;\n      filteredAlerts = filteredAlerts.filter(\n        (alert) => alert.timestamp >= sinceDate,\n      );\n    }\n\n    return filteredAlerts.sort(\n      (a, b) => b.timestamp.getTime() - a.timestamp.getTime(),\n    );\n  }\n}\n\nexport const monitoringService = new MonitoringService();\nexport { MonitoringService };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/notification-delivery.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1349,1352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1349,1352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1413,1416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1413,1416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1469,1472],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1469,1472],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1527,1530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1527,1530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is defined but never used. Allowed unused args must match /^_/u.","line":469,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":469,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'now' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":473,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":473,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userTimezone' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":474,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":474,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":523,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":523,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13883,13886],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13883,13886],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { storage } from \"../storage\";\nimport { logger } from \"../logger\";\nimport type { Notification, UserSettings, User } from \"@shared/schema\";\n\n/**\n * Notification delivery channels and preferences\n */\nexport interface NotificationChannels {\n  browser: boolean;\n  email: boolean;\n  push: boolean;\n  sms: boolean;\n  webhook: boolean;\n}\n\nexport interface NotificationPreferences {\n  streamStarted: NotificationChannels;\n  streamEnded: NotificationChannels;\n  collaborationInvite: NotificationChannels;\n  raidIncoming: NotificationChannels;\n  eventReminders: NotificationChannels;\n  friendRequests: NotificationChannels;\n  socialUpdates: NotificationChannels;\n  tournamentUpdates: NotificationChannels;\n  systemAnnouncements: NotificationChannels;\n  weeklyDigest: NotificationChannels;\n  digestFrequency: \"daily\" | \"weekly\" | \"monthly\" | \"never\";\n  quietHours: { enabled: boolean; start: string; end: string };\n  timezone: string;\n  groupNotifications: boolean;\n  soundEnabled: boolean;\n  vibrationEnabled: boolean;\n  showPreview: boolean;\n}\n\nexport interface DeliveryResult {\n  channel: keyof NotificationChannels;\n  success: boolean;\n  error?: string;\n  deliveryId?: string;\n}\n\n/**\n * Enhanced notification delivery service with multi-channel support\n */\nexport class NotificationDeliveryService {\n  private webSocketConnections = new Map<string, any>(); // WebSocket connections per user\n  private emailQueue: any[] = []; // Email delivery queue\n  private smsQueue: any[] = []; // SMS delivery queue\n  private webhookQueue: any[] = []; // Webhook delivery queue\n\n  /**\n   * Send notification through all enabled channels based on user preferences\n   */\n  async deliverNotification(\n    userId: string,\n    notification: Notification,\n    forceChannels?: Partial<NotificationChannels>,\n  ): Promise<DeliveryResult[]> {\n    try {\n      const user = await storage.getUser(userId);\n      if (!user) {\n        throw new Error(`User not found: ${userId}`);\n      }\n\n      const userSettings = await storage.getUserSettings(userId);\n      const preferences = this.getUserNotificationPreferences(userSettings);\n\n      // Check if notification should be delivered (quiet hours, etc.)\n      if (!this.shouldDeliverNotification(notification, preferences, user)) {\n        logger.info(\"Notification delivery skipped due to user preferences\", {\n          userId,\n          notificationType: notification.type,\n          reason: \"quiet_hours_or_preferences\",\n        });\n        return [];\n      }\n\n      // Determine which channels to use\n      const channels =\n        forceChannels ||\n        this.getChannelsForNotificationType(notification.type, preferences);\n\n      // Track channels and promises together to avoid index misalignment\n      const deliveryTasks: Array<{\n        channel: keyof NotificationChannels;\n        promise: Promise<DeliveryResult>;\n      }> = [];\n\n      // Browser notification (real-time WebSocket)\n      if (channels.browser) {\n        deliveryTasks.push({\n          channel: \"browser\",\n          promise: this.deliverBrowserNotification(userId, notification),\n        });\n      }\n\n      // Email notification\n      if (channels.email) {\n        deliveryTasks.push({\n          channel: \"email\",\n          promise: this.deliverEmailNotification(user, notification),\n        });\n      }\n\n      // Push notification\n      if (channels.push) {\n        deliveryTasks.push({\n          channel: \"push\",\n          promise: this.deliverPushNotification(userId, notification),\n        });\n      }\n\n      // SMS notification\n      if (channels.sms) {\n        deliveryTasks.push({\n          channel: \"sms\",\n          promise: this.deliverSMSNotification(user, notification),\n        });\n      }\n\n      // Webhook notification\n      if (channels.webhook) {\n        deliveryTasks.push({\n          channel: \"webhook\",\n          promise: this.deliverWebhookNotification(user, notification),\n        });\n      }\n\n      const results = await Promise.allSettled(\n        deliveryTasks.map((task) => task.promise),\n      );\n      const deliveryResults: DeliveryResult[] = results.map((result, index) => {\n        const task = deliveryTasks[index];\n        if (!task) {\n          // This should never happen since we map over the same array\n          return {\n            channel: \"browser\" as keyof NotificationChannels,\n            success: false,\n            error: \"Task not found\",\n          };\n        }\n\n        if (result.status === \"fulfilled\") {\n          return result.value;\n        } else {\n          return {\n            channel: task.channel,\n            success: false,\n            error: result.reason?.message || \"Unknown error\",\n          };\n        }\n      });\n\n      logger.info(\"Notification delivered across channels\", {\n        userId,\n        notificationId: notification.id,\n        deliveryResults: deliveryResults.map((r) => ({\n          channel: r.channel,\n          success: r.success,\n        })),\n      });\n\n      return deliveryResults;\n    } catch (error) {\n      logger.error(\"Failed to deliver notification\", {\n        error,\n        userId,\n        notificationId: notification.id,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Deliver browser notification via WebSocket\n   */\n  private async deliverBrowserNotification(\n    userId: string,\n    notification: Notification,\n  ): Promise<DeliveryResult> {\n    try {\n      const connection = this.webSocketConnections.get(userId);\n      if (connection && connection.readyState === 1) {\n        // WebSocket.OPEN\n        connection.send(\n          JSON.stringify({\n            type: \"notification\",\n            data: notification,\n          }),\n        );\n\n        return {\n          channel: \"browser\",\n          success: true,\n          deliveryId: `ws_${Date.now()}`,\n        };\n      } else {\n        // Store notification for delivery when user comes online\n        await this.storeForLaterDelivery(userId, notification, \"browser\");\n        return {\n          channel: \"browser\",\n          success: true,\n          deliveryId: `stored_${Date.now()}`,\n        };\n      }\n    } catch (error) {\n      return {\n        channel: \"browser\",\n        success: false,\n        error:\n          error instanceof Error ? error.message : \"WebSocket delivery failed\",\n      };\n    }\n  }\n\n  /**\n   * Deliver email notification\n   */\n  private async deliverEmailNotification(\n    user: User,\n    notification: Notification,\n  ): Promise<DeliveryResult> {\n    try {\n      // TODO: Implement with SendGrid or similar email service\n      // For now, add to queue for processing\n      this.emailQueue.push({\n        to: user.email,\n        subject: notification.title,\n        content: notification.message,\n        template: this.getEmailTemplate(notification.type),\n        data: notification.data,\n        createdAt: new Date(),\n      });\n\n      // Simulate email sending (replace with actual implementation)\n      logger.info(\"Email notification queued\", {\n        userId: user.id,\n        email: user.email,\n        notificationId: notification.id,\n      });\n\n      return {\n        channel: \"email\",\n        success: true,\n        deliveryId: `email_${Date.now()}`,\n      };\n    } catch (error) {\n      return {\n        channel: \"email\",\n        success: false,\n        error: error instanceof Error ? error.message : \"Email delivery failed\",\n      };\n    }\n  }\n\n  /**\n   * Deliver push notification\n   */\n  private async deliverPushNotification(\n    userId: string,\n    notification: Notification,\n  ): Promise<DeliveryResult> {\n    try {\n      // TODO: Implement with web push service or mobile push service\n      logger.info(\"Push notification would be delivered\", {\n        userId,\n        notificationId: notification.id,\n      });\n\n      return {\n        channel: \"push\",\n        success: true,\n        deliveryId: `push_${Date.now()}`,\n      };\n    } catch (error) {\n      return {\n        channel: \"push\",\n        success: false,\n        error: error instanceof Error ? error.message : \"Push delivery failed\",\n      };\n    }\n  }\n\n  /**\n   * Deliver SMS notification\n   */\n  private async deliverSMSNotification(\n    user: User,\n    notification: Notification,\n  ): Promise<DeliveryResult> {\n    try {\n      // TODO: Implement with Twilio or similar SMS service\n      logger.info(\"SMS notification would be delivered\", {\n        userId: user.id,\n        notificationId: notification.id,\n      });\n\n      return {\n        channel: \"sms\",\n        success: true,\n        deliveryId: `sms_${Date.now()}`,\n      };\n    } catch (error) {\n      return {\n        channel: \"sms\",\n        success: false,\n        error: error instanceof Error ? error.message : \"SMS delivery failed\",\n      };\n    }\n  }\n\n  /**\n   * Deliver webhook notification\n   */\n  private async deliverWebhookNotification(\n    user: User,\n    notification: Notification,\n  ): Promise<DeliveryResult> {\n    try {\n      // TODO: Implement webhook delivery to user-configured endpoints\n      logger.info(\"Webhook notification would be delivered\", {\n        userId: user.id,\n        notificationId: notification.id,\n      });\n\n      return {\n        channel: \"webhook\",\n        success: true,\n        deliveryId: `webhook_${Date.now()}`,\n      };\n    } catch (error) {\n      return {\n        channel: \"webhook\",\n        success: false,\n        error:\n          error instanceof Error ? error.message : \"Webhook delivery failed\",\n      };\n    }\n  }\n\n  /**\n   * Get user notification preferences from settings\n   */\n  private getUserNotificationPreferences(\n    userSettings?: UserSettings,\n  ): NotificationPreferences {\n    const defaultPreferences: NotificationPreferences = {\n      streamStarted: {\n        browser: true,\n        email: false,\n        push: true,\n        sms: false,\n        webhook: false,\n      },\n      streamEnded: {\n        browser: true,\n        email: false,\n        push: false,\n        sms: false,\n        webhook: false,\n      },\n      collaborationInvite: {\n        browser: true,\n        email: true,\n        push: true,\n        sms: false,\n        webhook: false,\n      },\n      raidIncoming: {\n        browser: true,\n        email: false,\n        push: true,\n        sms: false,\n        webhook: false,\n      },\n      eventReminders: {\n        browser: true,\n        email: true,\n        push: true,\n        sms: false,\n        webhook: false,\n      },\n      friendRequests: {\n        browser: true,\n        email: true,\n        push: false,\n        sms: false,\n        webhook: false,\n      },\n      socialUpdates: {\n        browser: false,\n        email: false,\n        push: false,\n        sms: false,\n        webhook: false,\n      },\n      tournamentUpdates: {\n        browser: true,\n        email: true,\n        push: true,\n        sms: false,\n        webhook: false,\n      },\n      systemAnnouncements: {\n        browser: true,\n        email: true,\n        push: false,\n        sms: false,\n        webhook: false,\n      },\n      weeklyDigest: {\n        browser: false,\n        email: true,\n        push: false,\n        sms: false,\n        webhook: false,\n      },\n      digestFrequency: \"weekly\",\n      quietHours: { enabled: false, start: \"22:00\", end: \"08:00\" },\n      timezone: \"UTC\",\n      groupNotifications: true,\n      soundEnabled: true,\n      vibrationEnabled: true,\n      showPreview: true,\n    };\n\n    if (!userSettings?.notificationTypes) {\n      return defaultPreferences;\n    }\n\n    const notificationSettings = JSON.parse(\n      userSettings.notificationTypes as string,\n    );\n    return { ...defaultPreferences, ...notificationSettings };\n  }\n\n  /**\n   * Get enabled channels for a specific notification type\n   */\n  private getChannelsForNotificationType(\n    notificationType: string,\n    preferences: NotificationPreferences,\n  ): NotificationChannels {\n    const typePreferences = preferences[\n      notificationType as keyof NotificationPreferences\n    ] as NotificationChannels;\n\n    if (typePreferences) {\n      return typePreferences;\n    }\n\n    // Default channels for unknown notification types\n    return {\n      browser: true,\n      email: false,\n      push: false,\n      sms: false,\n      webhook: false,\n    };\n  }\n\n  /**\n   * Check if notification should be delivered based on user preferences\n   */\n  private shouldDeliverNotification(\n    notification: Notification,\n    preferences: NotificationPreferences,\n    user: User,\n  ): boolean {\n    // Check quiet hours\n    if (preferences.quietHours.enabled) {\n      const now = new Date();\n      const userTimezone = preferences.timezone || \"UTC\";\n      // TODO: Implement timezone checking\n      // For now, skip quiet hours check\n    }\n\n    // Check notification priority vs user preferences\n    if (notification.priority === \"low\" && !preferences.showPreview) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Store notification for later delivery when user comes online\n   */\n  private async storeForLaterDelivery(\n    userId: string,\n    notification: Notification,\n    channel: keyof NotificationChannels,\n  ): Promise<void> {\n    // This would typically store in a pending notifications table\n    // For now, just log it\n    logger.info(\"Notification stored for later delivery\", {\n      userId,\n      notificationId: notification.id,\n      channel,\n    });\n  }\n\n  /**\n   * Get email template based on notification type\n   */\n  private getEmailTemplate(notificationType: string): string {\n    const templates: Record<string, string> = {\n      streamStarted: \"stream-started\",\n      collaborationInvite: \"collaboration-invite\",\n      eventReminders: \"event-reminder\",\n      friendRequests: \"friend-request\",\n      tournamentUpdates: \"tournament-update\",\n      systemAnnouncements: \"system-announcement\",\n    };\n\n    return templates[notificationType] || \"default\";\n  }\n\n  /**\n   * Register WebSocket connection for real-time notifications\n   */\n  registerWebSocketConnection(userId: string, connection: any): void {\n    this.webSocketConnections.set(userId, connection);\n\n    connection.on(\"close\", () => {\n      this.webSocketConnections.delete(userId);\n    });\n\n    logger.info(\"WebSocket connection registered for notifications\", {\n      userId,\n    });\n  }\n\n  /**\n   * Process queued notifications (email, SMS, webhooks)\n   * This should be called periodically by a background job\n   */\n  async processQueuedNotifications(): Promise<void> {\n    try {\n      // Process email queue\n      await this.processEmailQueue();\n\n      // Process SMS queue\n      await this.processSMSQueue();\n\n      // Process webhook queue\n      await this.processWebhookQueue();\n    } catch (error) {\n      logger.error(\"Failed to process notification queues\", { error });\n    }\n  }\n\n  private async processEmailQueue(): Promise<void> {\n    if (this.emailQueue.length === 0) return;\n\n    logger.info(\n      `Processing ${this.emailQueue.length} queued email notifications`,\n    );\n\n    // TODO: Implement actual email sending\n    // For now, just clear the queue\n    this.emailQueue = [];\n  }\n\n  private async processSMSQueue(): Promise<void> {\n    if (this.smsQueue.length === 0) return;\n\n    logger.info(`Processing ${this.smsQueue.length} queued SMS notifications`);\n\n    // TODO: Implement actual SMS sending\n    this.smsQueue = [];\n  }\n\n  private async processWebhookQueue(): Promise<void> {\n    if (this.webhookQueue.length === 0) return;\n\n    logger.info(\n      `Processing ${this.webhookQueue.length} queued webhook notifications`,\n    );\n\n    // TODO: Implement actual webhook sending\n    this.webhookQueue = [];\n  }\n}\n\n// Export singleton instance\nexport const notificationDeliveryService = new NotificationDeliveryService();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/notification-templates.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1213,1216],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1213,1216],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1356,1359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1356,1359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1549,1552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1549,1552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1928,1931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1928,1931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2051,2054],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2051,2054],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":295,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":295,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9140,9143],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9140,9143],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'weeklyStats' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":308,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":308,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Notification template service for generating rich, contextual notifications\n */\nexport interface NotificationTemplate {\n  title: string;\n  message: string;\n  emailSubject?: string;\n  emailTemplate?: string;\n  pushTitle?: string;\n  pushBody?: string;\n  smsMessage?: string;\n  priority: \"low\" | \"normal\" | \"high\" | \"urgent\";\n  actionUrl?: string;\n  actionText?: string;\n}\n\nexport interface TemplateContext {\n  user?: { id?: string; name?: string; firstName?: string; username?: string };\n  fromUser?: {\n    id?: string;\n    name?: string;\n    firstName?: string;\n    username?: string;\n  };\n  event?: {\n    id?: string;\n    title?: string;\n    date?: string;\n    time?: string;\n    location?: string;\n  };\n  stream?: {\n    id?: string;\n    title?: string;\n    platform?: string;\n    viewerCount?: number;\n  };\n  tournament?: { id?: string; name?: string; status?: string };\n  community?: { id?: string; name?: string; displayName?: string };\n  requestId?: string;\n  conversationId?: string;\n  gameId?: string;\n  reminderTime?: string;\n  activityType?: string;\n  activityDescription?: string;\n  updateType?: string;\n  updateMessage?: string;\n  messagePreview?: string;\n  viewerCount?: number;\n  weeklyStats?: any;\n  title?: string;\n  message?: string;\n  priority?: string;\n  actionUrl?: string;\n  actionText?: string;\n  type?: string;\n  [key: string]: any;\n}\n\nexport class NotificationTemplateService {\n  /**\n   * Generate notification from template\n   */\n  generateNotification(\n    type: string,\n    context: TemplateContext,\n    customData?: any,\n  ): NotificationTemplate {\n    const generator = this.getTemplateGenerator(type);\n    if (!generator) {\n      return this.getDefaultTemplate(type, context);\n    }\n\n    return generator(context, customData);\n  }\n\n  /**\n   * Get template generator function for notification type\n   */\n  private getTemplateGenerator(\n    type: string,\n  ): ((context: TemplateContext, data?: any) => NotificationTemplate) | null {\n    const generators: Record<\n      string,\n      (context: TemplateContext, data?: any) => NotificationTemplate\n    > = {\n      streamStarted: this.streamStartedTemplate,\n      streamEnded: this.streamEndedTemplate,\n      collaborationInvite: this.collaborationInviteTemplate,\n      raidIncoming: this.raidIncomingTemplate,\n      eventReminders: this.eventReminderTemplate,\n      friendRequests: this.friendRequestTemplate,\n      socialUpdates: this.socialUpdateTemplate,\n      tournamentUpdates: this.tournamentUpdateTemplate,\n      systemAnnouncements: this.systemAnnouncementTemplate,\n      weeklyDigest: this.weeklyDigestTemplate,\n      eventJoin: this.eventJoinTemplate,\n      eventLeave: this.eventLeaveTemplate,\n      gameInvite: this.gameInviteTemplate,\n      message: this.messageTemplate,\n    };\n\n    return generators[type] || null;\n  }\n\n  /**\n   * Stream started notification template\n   */\n  private streamStartedTemplate = (\n    context: TemplateContext,\n  ): NotificationTemplate => {\n    const streamerName =\n      context.fromUser?.firstName || context.fromUser?.username || \"A streamer\";\n    const streamTitle = context.stream?.title || \"Untitled Stream\";\n    const platform = context.stream?.platform || \"streaming platform\";\n\n    return {\n      title: `${streamerName} is now live!`,\n      message: `${streamerName} started streaming \"${streamTitle}\" on ${platform}`,\n      emailSubject: `🔴 ${streamerName} is now live - ${streamTitle}`,\n      pushTitle: `${streamerName} is live!`,\n      pushBody: streamTitle,\n      smsMessage: `${streamerName} is now streaming \"${streamTitle}\" on ${platform}`,\n      priority: \"normal\",\n      actionUrl: `/streams/${context.stream?.id || \"\"}`,\n      actionText: \"Watch Stream\",\n    };\n  };\n\n  /**\n   * Stream ended notification template\n   */\n  private streamEndedTemplate = (\n    context: TemplateContext,\n  ): NotificationTemplate => {\n    const streamerName =\n      context.fromUser?.firstName || context.fromUser?.username || \"A streamer\";\n    const streamTitle = context.stream?.title || \"stream\";\n    const viewerCount = context.stream?.viewerCount || 0;\n\n    return {\n      title: `${streamerName}'s stream ended`,\n      message: `\"${streamTitle}\" has ended with ${viewerCount} viewers`,\n      priority: \"low\",\n      actionUrl: `/streams/${context.stream?.id || \"\"}/replay`,\n      actionText: \"View Replay\",\n    };\n  };\n\n  /**\n   * Collaboration invite notification template\n   */\n  private collaborationInviteTemplate = (\n    context: TemplateContext,\n  ): NotificationTemplate => {\n    const inviterName =\n      context.fromUser?.firstName || context.fromUser?.username || \"A user\";\n    const streamTitle = context.stream?.title || \"a stream\";\n    const collaborationType = context.type || \"collaboration\";\n\n    return {\n      title: `Collaboration invite from ${inviterName}`,\n      message: `${inviterName} invited you to ${collaborationType} on \"${streamTitle}\"`,\n      emailSubject: `🤝 Collaboration invite from ${inviterName}`,\n      pushTitle: \"Collaboration Invite\",\n      pushBody: `${inviterName} wants to collaborate with you`,\n      priority: \"high\",\n      actionUrl: `/collaboration-requests/${context.requestId || \"\"}`,\n      actionText: \"View Invite\",\n    };\n  };\n\n  /**\n   * Raid incoming notification template\n   */\n  private raidIncomingTemplate = (\n    context: TemplateContext,\n  ): NotificationTemplate => {\n    const raiderName =\n      context.fromUser?.firstName || context.fromUser?.username || \"A streamer\";\n    const viewerCount = context.viewerCount || 0;\n\n    return {\n      title: `Incoming raid from ${raiderName}!`,\n      message: `${raiderName} is raiding your stream with ${viewerCount} viewers!`,\n      pushTitle: \"Incoming Raid!\",\n      pushBody: `${raiderName} is bringing ${viewerCount} viewers`,\n      priority: \"high\",\n      actionUrl: \"/streams/current\",\n      actionText: \"Go to Stream\",\n    };\n  };\n\n  /**\n   * Event reminder notification template\n   */\n  private eventReminderTemplate = (\n    context: TemplateContext,\n  ): NotificationTemplate => {\n    const eventTitle = context.event?.title || \"Event\";\n    const eventDate = context.event?.date || \"today\";\n    const eventTime = context.event?.time || \"soon\";\n    const reminderTime = context.reminderTime || \"15 minutes\";\n\n    return {\n      title: `Event reminder: ${eventTitle}`,\n      message: `\"${eventTitle}\" starts in ${reminderTime} (${eventDate} at ${eventTime})`,\n      emailSubject: `📅 Reminder: ${eventTitle} starts soon`,\n      pushTitle: \"Event Reminder\",\n      pushBody: `${eventTitle} starts in ${reminderTime}`,\n      priority: \"normal\",\n      actionUrl: `/events/${context.event?.id || \"\"}`,\n      actionText: \"View Event\",\n    };\n  };\n\n  /**\n   * Friend request notification template\n   */\n  private friendRequestTemplate = (\n    context: TemplateContext,\n  ): NotificationTemplate => {\n    const requesterName =\n      context.fromUser?.firstName || context.fromUser?.username || \"Someone\";\n\n    return {\n      title: `Friend request from ${requesterName}`,\n      message: `${requesterName} sent you a friend request`,\n      emailSubject: `👋 Friend request from ${requesterName}`,\n      pushTitle: \"Friend Request\",\n      pushBody: `${requesterName} wants to be friends`,\n      priority: \"normal\",\n      actionUrl: \"/friends/requests\",\n      actionText: \"View Request\",\n    };\n  };\n\n  /**\n   * Social update notification template\n   */\n  private socialUpdateTemplate = (\n    context: TemplateContext,\n  ): NotificationTemplate => {\n    const userName =\n      context.fromUser?.firstName || context.fromUser?.username || \"A friend\";\n    const activityType = context.activityType || \"activity\";\n\n    return {\n      title: `${userName} ${activityType}`,\n      message:\n        context.activityDescription || `${userName} has new ${activityType}`,\n      priority: \"low\",\n      actionUrl: `/users/${context.fromUser?.id || \"\"}`,\n      actionText: \"View Profile\",\n    };\n  };\n\n  /**\n   * Tournament update notification template\n   */\n  private tournamentUpdateTemplate = (\n    context: TemplateContext,\n  ): NotificationTemplate => {\n    const tournamentName = context.tournament?.name || \"Tournament\";\n    const updateType = context.updateType || \"update\";\n\n    return {\n      title: `Tournament ${updateType}: ${tournamentName}`,\n      message:\n        context.updateMessage || `${tournamentName} has a new ${updateType}`,\n      emailSubject: `🏆 Tournament Update: ${tournamentName}`,\n      pushTitle: \"Tournament Update\",\n      pushBody: `${tournamentName} - ${updateType}`,\n      priority: \"normal\",\n      actionUrl: `/tournaments/${context.tournament?.id || \"\"}`,\n      actionText: \"View Tournament\",\n    };\n  };\n\n  /**\n   * System announcement notification template\n   */\n  private systemAnnouncementTemplate = (\n    context: TemplateContext,\n  ): NotificationTemplate => {\n    const title = context.title || \"System Announcement\";\n    const message = context.message || \"New system announcement available\";\n\n    return {\n      title,\n      message,\n      emailSubject: `📢 ${title}`,\n      pushTitle: \"System Announcement\",\n      pushBody: message,\n      priority: (context.priority as any) || \"normal\",\n      actionUrl: context.actionUrl || \"/announcements\",\n      actionText: context.actionText || \"View Details\",\n    };\n  };\n\n  /**\n   * Weekly digest notification template\n   */\n  private weeklyDigestTemplate = (\n    context: TemplateContext,\n  ): NotificationTemplate => {\n    const userName = context.user?.firstName || \"there\";\n    const weeklyStats = context.weeklyStats || {};\n\n    return {\n      title: `Your weekly TCG update`,\n      message: `Hi ${userName}! Here's what happened this week in your communities.`,\n      emailSubject: `📊 Your Weekly TCG Digest`,\n      priority: \"low\",\n      actionUrl: \"/digest/weekly\",\n      actionText: \"View Full Digest\",\n    };\n  };\n\n  /**\n   * Event join notification template\n   */\n  private eventJoinTemplate = (\n    context: TemplateContext,\n  ): NotificationTemplate => {\n    const userName =\n      context.fromUser?.firstName || context.fromUser?.username || \"Someone\";\n    const eventTitle = context.event?.title || \"your event\";\n\n    return {\n      title: `${userName} joined ${eventTitle}`,\n      message: `${userName} joined \"${eventTitle}\"`,\n      priority: \"low\",\n      actionUrl: `/events/${context.event?.id || \"\"}`,\n      actionText: \"View Event\",\n    };\n  };\n\n  /**\n   * Event leave notification template\n   */\n  private eventLeaveTemplate = (\n    context: TemplateContext,\n  ): NotificationTemplate => {\n    const userName =\n      context.fromUser?.firstName || context.fromUser?.username || \"Someone\";\n    const eventTitle = context.event?.title || \"your event\";\n\n    return {\n      title: `${userName} left ${eventTitle}`,\n      message: `${userName} left \"${eventTitle}\"`,\n      priority: \"low\",\n      actionUrl: `/events/${context.event?.id || \"\"}`,\n      actionText: \"View Event\",\n    };\n  };\n\n  /**\n   * Game invite notification template\n   */\n  private gameInviteTemplate = (\n    context: TemplateContext,\n  ): NotificationTemplate => {\n    const inviterName =\n      context.fromUser?.firstName || context.fromUser?.username || \"Someone\";\n    const gameType = context.gameType || \"game\";\n\n    return {\n      title: `Game invite from ${inviterName}`,\n      message: `${inviterName} invited you to play ${gameType}`,\n      priority: \"normal\",\n      actionUrl: `/games/${context.gameId || \"\"}`,\n      actionText: \"Join Game\",\n    };\n  };\n\n  /**\n   * Message notification template\n   */\n  private messageTemplate = (\n    context: TemplateContext,\n  ): NotificationTemplate => {\n    const senderName =\n      context.fromUser?.firstName || context.fromUser?.username || \"Someone\";\n    const messagePreview = context.messagePreview || \"sent you a message\";\n\n    return {\n      title: `Message from ${senderName}`,\n      message: messagePreview,\n      pushTitle: \"New Message\",\n      pushBody: `${senderName}: ${messagePreview}`,\n      priority: \"normal\",\n      actionUrl: `/messages/${context.conversationId || \"\"}`,\n      actionText: \"View Message\",\n    };\n  };\n\n  /**\n   * Default template for unknown notification types\n   */\n  private getDefaultTemplate = (\n    type: string,\n    context: TemplateContext,\n  ): NotificationTemplate => {\n    return {\n      title: context.title || \"Notification\",\n      message: context.message || \"You have a new notification\",\n      priority: \"normal\",\n      actionUrl: context.actionUrl,\n      actionText: context.actionText,\n    };\n  };\n}\n\n// Export singleton instance\nexport const notificationTemplateService = new NotificationTemplateService();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/platform-oauth.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4510,4513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4510,4513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":316,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9456,9459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9456,9459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":411,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":411,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12178,12181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12178,12181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":458,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":458,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13604,13607],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13604,13607],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":466,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":466,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13837,13840],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13837,13840],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":485,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":485,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14165,14168],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14165,14168],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":657,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":657,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19204,19207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19204,19207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Platform OAuth Service\n *\n * This module handles OAuth 2.0 authentication flows for streaming platforms:\n * - Twitch\n * - YouTube\n * - Facebook Gaming\n *\n * Security Features:\n * - PKCE (Proof Key for Code Exchange) for all platforms\n * - Cryptographically secure state parameters\n * - Token encryption in storage\n * - Automatic token refresh\n * - CSRF protection via state validation\n *\n * @see docs/features/twitch/TWITCH_OAUTH_GUIDE.md for detailed Twitch OAuth documentation\n */\n\nimport { randomBytes, createHash } from \"crypto\";\nimport { storage } from \"../storage\";\nimport { logger } from \"../logger\";\nimport { YouTubeAPIService } from \"./youtube-api\";\nimport { FacebookAPIService } from \"./facebook-api\";\n\n/**\n * OAuth state stored temporarily during authorization flow\n * Used to prevent CSRF attacks and store PKCE verifiers\n */\ninterface OAuthState {\n  userId: string; // User initiating the OAuth flow\n  platform: string; // Platform being authorized (twitch/youtube/facebook)\n  timestamp: number; // Creation time for expiry checking\n  codeVerifier?: string; // PKCE code verifier (required for token exchange)\n}\n\n/**\n * In-memory OAuth state storage\n * TODO: Replace with Redis in production for scalability\n * States expire after 10 minutes and are cleaned up automatically\n */\nconst oauthStates = new Map<string, OAuthState>();\n\n/**\n * OAuth scopes requested for each streaming platform\n *\n * Twitch Scopes:\n * - user:read:email: Access user's email address\n * - channel:read:stream_key: Read the user's stream key\n * - channel:manage:broadcast: Manage broadcast settings (title, game, etc.)\n * - channel:read:subscriptions: Read subscription information\n * - bits:read: View bits/cheers information\n * - analytics:read:games: Access game analytics\n * - analytics:read:extensions: Access extension analytics\n *\n * YouTube Scopes:\n * - youtube.readonly: View YouTube account data\n * - youtube.force-ssl: Manage YouTube account (required for live streaming)\n * - youtube.channel-memberships.creator: Access channel membership data\n *\n * Facebook Scopes:\n * - pages_show_list: List user's Facebook pages\n * - pages_read_engagement: Read page engagement metrics\n * - pages_manage_posts: Create and manage posts\n * - publish_video: Upload and publish videos\n * - gaming_user_picture: Access gaming profile picture\n */\nconst PLATFORM_SCOPES = {\n  twitch: [\n    \"user:read:email\",\n    \"channel:read:stream_key\",\n    \"channel:manage:broadcast\",\n    \"channel:read:subscriptions\",\n    \"bits:read\",\n    \"analytics:read:games\",\n    \"analytics:read:extensions\",\n  ],\n  youtube: [\n    \"https://www.googleapis.com/auth/youtube.readonly\",\n    \"https://www.googleapis.com/auth/youtube.force-ssl\",\n    \"https://www.googleapis.com/auth/youtube.channel-memberships.creator\",\n  ],\n  facebook: [\n    \"pages_show_list\",\n    \"pages_read_engagement\",\n    \"pages_manage_posts\",\n    \"publish_video\",\n    \"gaming_user_picture\",\n  ],\n};\n\n/**\n * Generate OAuth authorization URL for platform account linking\n *\n * This initiates the OAuth 2.0 authorization code flow with PKCE:\n * 1. Generates cryptographically secure state parameter\n * 2. Stores state with user ID and platform for validation\n * 3. Generates platform-specific authorization URL\n * 4. Cleans up expired states (>10 minutes old)\n *\n * @param platform - Platform identifier (twitch, youtube, facebook)\n * @param userId - ID of user initiating OAuth flow\n * @returns Authorization URL to redirect user to\n * @throws Error if platform is unsupported\n */\nexport async function generatePlatformOAuthURL(\n  platform: string,\n  userId: string,\n): Promise<string> {\n  const state = generateSecureState();\n  const timestamp = Date.now();\n\n  // Store state for validation\n  oauthStates.set(state, { userId, platform, timestamp });\n\n  // Clean up old states (older than 10 minutes)\n  const entries = Array.from(oauthStates.entries());\n  for (const [key, value] of entries) {\n    if (timestamp - value.timestamp > 10 * 60 * 1000) {\n      oauthStates.delete(key);\n    }\n  }\n\n  switch (platform) {\n    case \"twitch\":\n      return generateTwitchOAuthURL(state);\n    case \"youtube\":\n      return generateYouTubeOAuthURL(state);\n    case \"facebook\":\n      return generateFacebookOAuthURL(state);\n    default:\n      throw new Error(`Unsupported platform: ${platform}`);\n  }\n}\n\n/**\n * Handle OAuth callback and store tokens securely\n */\nexport async function handlePlatformOAuthCallback(\n  platform: string,\n  code: string,\n  state: string,\n  userId: string,\n): Promise<any> {\n  // Validate state\n  const storedState = oauthStates.get(state);\n  if (\n    !storedState ||\n    storedState.userId !== userId ||\n    storedState.platform !== platform\n  ) {\n    throw new Error(\"Invalid OAuth state\");\n  }\n\n  let result;\n\n  switch (platform) {\n    case \"twitch\":\n      result = await handleTwitchCallback(code, userId, storedState);\n      break;\n    case \"youtube\":\n      result = await handleYouTubeCallback(code, userId, storedState);\n      break;\n    case \"facebook\":\n      result = await handleFacebookCallback(code, userId);\n      break;\n    default:\n      throw new Error(`Unsupported platform: ${platform}`);\n  }\n\n  // Remove used state only after successful callback\n  oauthStates.delete(state);\n  return result;\n}\n\n/**\n * Refresh platform access token\n */\nexport async function refreshPlatformToken(\n  userId: string,\n  platform: string,\n): Promise<string | null> {\n  const account = await storage.getUserPlatformAccount(userId, platform);\n  if (!account) {\n    return null;\n  }\n\n  // TODO: Add secure refresh token accessor to storage interface\n  // For now, platform refresh methods will need to handle token retrieval internally\n  // This is a limitation that needs to be addressed with a dedicated storage method\n\n  try {\n    // Get platform account with tokens for refresh\n    const fullAccount = await storage.getUserPlatformAccountWithTokens(\n      userId,\n      platform,\n    );\n\n    if (!fullAccount?.refreshToken) {\n      logger.warn(`No refresh token available for ${platform} user ${userId}`);\n      return null;\n    }\n\n    // Call platform-specific refresh with the refresh token\n    switch (platform) {\n      case \"twitch\":\n        return await refreshTwitchToken(fullAccount.refreshToken, userId);\n      case \"youtube\":\n        return await refreshYouTubeToken(fullAccount.refreshToken, userId);\n      case \"facebook\":\n        return await refreshFacebookToken(fullAccount.refreshToken, userId);\n      default:\n        throw new Error(\n          `Token refresh not supported for platform: ${platform}`,\n        );\n    }\n  } catch (error) {\n    logger.error(\n      `Failed to refresh ${platform} token for user ${userId}:`,\n      error,\n    );\n    return null;\n  }\n}\n\n/**\n * Generate Twitch OAuth URL with PKCE for enhanced security\n * PKCE (Proof Key for Code Exchange) prevents authorization code interception attacks\n */\nfunction generateTwitchOAuthURL(state: string): string {\n  const codeVerifier = generateCodeVerifier();\n  const codeChallenge = generateCodeChallenge(codeVerifier);\n\n  // Store code verifier with state for later verification\n  const storedState = oauthStates.get(state);\n  if (storedState) {\n    storedState.codeVerifier = codeVerifier;\n  }\n\n  if (!process.env.TWITCH_CLIENT_ID) {\n    throw new Error(\"TWITCH_CLIENT_ID not configured\");\n  }\n  \n  const params = new URLSearchParams({\n    client_id: process.env.TWITCH_CLIENT_ID,\n    redirect_uri: `${process.env.AUTH_URL}/api/platforms/twitch/oauth/callback`,\n    response_type: \"code\",\n    scope: PLATFORM_SCOPES.twitch.join(\" \"),\n    state,\n    code_challenge: codeChallenge,\n    code_challenge_method: \"S256\",\n    // Force consent to ensure user sees all requested permissions\n    force_verify: \"true\",\n  });\n\n  return `https://id.twitch.tv/oauth2/authorize?${params.toString()}`;\n}\n\n/**\n * Generate YouTube OAuth URL with PKCE\n */\nfunction generateYouTubeOAuthURL(state: string): string {\n  const codeVerifier = generateCodeVerifier();\n  const codeChallenge = generateCodeChallenge(codeVerifier);\n\n  // Store code verifier with state\n  const storedState = oauthStates.get(state);\n  if (storedState) {\n    storedState.codeVerifier = codeVerifier;\n  }\n\n  if (!process.env.YOUTUBE_CLIENT_ID) {\n    throw new Error(\"YOUTUBE_CLIENT_ID not configured\");\n  }\n  \n  const params = new URLSearchParams({\n    client_id: process.env.YOUTUBE_CLIENT_ID,\n    redirect_uri: `${process.env.AUTH_URL}/api/platforms/youtube/oauth/callback`,\n    response_type: \"code\",\n    scope: PLATFORM_SCOPES.youtube.join(\" \"),\n    state,\n    code_challenge: codeChallenge,\n    code_challenge_method: \"S256\",\n    access_type: \"offline\",\n    prompt: \"consent\",\n  });\n\n  return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;\n}\n\n/**\n * Generate Facebook OAuth URL\n */\nfunction generateFacebookOAuthURL(state: string): string {\n  if (!process.env.FACEBOOK_APP_ID) {\n    throw new Error(\"FACEBOOK_APP_ID not configured\");\n  }\n  \n  const params = new URLSearchParams({\n    client_id: process.env.FACEBOOK_APP_ID,\n    redirect_uri: `${process.env.AUTH_URL}/api/platforms/facebook/oauth/callback`,\n    response_type: \"code\",\n    scope: PLATFORM_SCOPES.facebook.join(\",\"),\n    state,\n  });\n\n  return `https://www.facebook.com/v18.0/dialog/oauth?${params.toString()}`;\n}\n\n/**\n * Handle Twitch OAuth callback with PKCE verification\n */\nasync function handleTwitchCallback(\n  code: string,\n  userId: string,\n  storedState: OAuthState,\n): Promise<any> {\n  const codeVerifier = storedState.codeVerifier;\n\n  if (!codeVerifier) {\n    logger.error(\"Missing PKCE code verifier for Twitch OAuth\", { userId });\n    throw new Error(\"Missing PKCE code verifier for Twitch OAuth\");\n  }\n\n  // Exchange code for tokens with PKCE verification\n  if (!process.env.TWITCH_CLIENT_ID || !process.env.TWITCH_CLIENT_SECRET) {\n    throw new Error(\"Twitch credentials not configured\");\n  }\n  \n  const tokenParams: Record<string, string> = {\n    client_id: process.env.TWITCH_CLIENT_ID,\n    client_secret: process.env.TWITCH_CLIENT_SECRET,\n    code,\n    grant_type: \"authorization_code\",\n    redirect_uri: `${process.env.AUTH_URL}/api/platforms/twitch/oauth/callback`,\n    code_verifier: codeVerifier,\n  };\n\n  const response = await fetch(\"https://id.twitch.tv/oauth2/token\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n    body: new URLSearchParams(tokenParams),\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    logger.error(\"Failed to exchange Twitch authorization code\", {\n      userId,\n      status: response.status,\n      error: errorText,\n    });\n    throw new Error(\"Failed to exchange Twitch authorization code\");\n  }\n\n  const tokenData = await response.json();\n\n  // Get user info\n  if (!process.env.TWITCH_CLIENT_ID) {\n    throw new Error(\"TWITCH_CLIENT_ID not configured\");\n  }\n  \n  const userResponse = await fetch(\"https://api.twitch.tv/helix/users\", {\n    headers: {\n      Authorization: `Bearer ${tokenData.access_token}`,\n      \"Client-Id\": process.env.TWITCH_CLIENT_ID,\n    },\n  });\n\n  if (!userResponse.ok) {\n    logger.error(\"Failed to fetch Twitch user info\", { userId });\n    throw new Error(\"Failed to fetch Twitch user info\");\n  }\n\n  const userData = await userResponse.json();\n  const user = userData.data[0];\n\n  if (!user) {\n    logger.error(\"No user data returned from Twitch API\", { userId });\n    throw new Error(\"No user data returned from Twitch API\");\n  }\n\n  // Store account with tokens\n  const expiresAt = new Date(Date.now() + tokenData.expires_in * 1000);\n\n  logger.info(\"Twitch OAuth completed successfully\", {\n    userId,\n    twitchUserId: user.id,\n    twitchLogin: user.login,\n    scopes: tokenData.scope,\n  });\n\n  return await storage.createUserPlatformAccount({\n    userId,\n    platform: \"twitch\",\n    handle: user.login,\n    platformUserId: user.id,\n    accessToken: tokenData.access_token,\n    refreshToken: tokenData.refresh_token,\n    tokenExpiresAt: expiresAt,\n    scopes: tokenData.scope,\n    isActive: true,\n  });\n}\n\n/**\n * Handle YouTube OAuth callback\n */\nasync function handleYouTubeCallback(\n  code: string,\n  userId: string,\n  storedState: OAuthState,\n): Promise<any> {\n  const codeVerifier = storedState.codeVerifier;\n\n  if (!codeVerifier) {\n    throw new Error(\"Missing PKCE code verifier for YouTube OAuth\");\n  }\n\n  try {\n    // Import YouTube API service safely\n    const { YouTubeAPIService } = await import(\"./youtube-api\");\n    const youtubeService = new YouTubeAPIService();\n\n    // Exchange code for tokens with PKCE code verifier\n    const tokenData = await youtubeService.exchangeCodeForTokens(\n      code,\n      `${process.env.AUTH_URL}/api/platforms/youtube/oauth/callback`,\n      codeVerifier,\n    );\n\n    if (!tokenData) {\n      throw new Error(\"Failed to exchange code for tokens\");\n    }\n\n    // Get channel info using the access token\n    const channelData = await youtubeService.getMyChannel(\n      tokenData.access_token,\n    );\n\n    if (!channelData) {\n      throw new Error(\"Failed to fetch YouTube channel info\");\n    }\n\n    // Calculate token expiry\n    const expiresAt = tokenData.expires_in\n      ? new Date(Date.now() + tokenData.expires_in * 1000)\n      : null;\n\n    // Store account with tokens securely\n    const account = await storage.createUserPlatformAccount({\n      userId,\n      platform: \"youtube\",\n      handle: channelData.title,\n      platformUserId: channelData.id,\n      channelId: channelData.id,\n      accessToken: tokenData.access_token,\n      refreshToken: tokenData.refresh_token,\n      tokenExpiresAt: expiresAt,\n      scopes: (tokenData as any).scope?.split(\" \") || [],\n      isActive: true,\n    });\n\n    logger.info(\"YouTube OAuth completed successfully\", {\n      userId,\n      channelId: channelData.id,\n      channelTitle: channelData.title,\n      scopes: (tokenData as any).scope,\n    });\n\n    return account;\n  } catch (error) {\n    logger.error(\"YouTube OAuth callback failed\", error, {\n      userId,\n      codeVerifier: !!codeVerifier,\n    });\n    throw error;\n  }\n}\n\n/**\n * Handle Facebook OAuth callback\n */\nasync function handleFacebookCallback(\n  code: string,\n  userId: string,\n): Promise<any> {\n  const facebookService = new FacebookAPIService();\n\n  // Exchange code for tokens\n  const tokenData = await facebookService.exchangeCodeForToken(\n    code,\n    `${process.env.AUTH_URL}/api/platforms/facebook/oauth/callback`,\n  );\n\n  if (!tokenData) {\n    throw new Error(\"Failed to exchange code for tokens\");\n  }\n\n  // Get user info\n  const userInfo = await facebookService.getMe(tokenData.access_token);\n\n  if (!userInfo.success || !userInfo.data) {\n    throw new Error(\"Failed to fetch Facebook user info\");\n  }\n\n  // Store account with tokens\n  // Note: Facebook short-lived tokens don't include expires_in, they're typically valid for 1-2 hours\n  const expiresAt = new Date(Date.now() + 2 * 60 * 60 * 1000); // 2 hours default\n\n  return await storage.createUserPlatformAccount({\n    userId,\n    platform: \"facebook\",\n    handle: userInfo.data.name,\n    platformUserId: userInfo.data.id,\n    accessToken: tokenData.access_token,\n    refreshToken: null, // Facebook uses long-lived token exchange instead of refresh tokens\n    tokenExpiresAt: expiresAt,\n    scopes: JSON.stringify([]),\n    isActive: true,\n  });\n}\n\n/**\n * Refresh Twitch token\n */\nasync function refreshTwitchToken(\n  refreshToken: string,\n  userId: string,\n): Promise<string | null> {\n  try {\n    if (!process.env.TWITCH_CLIENT_ID || !process.env.TWITCH_CLIENT_SECRET) {\n      throw new Error(\"Twitch credentials not configured\");\n    }\n    \n    const response = await fetch(\"https://id.twitch.tv/oauth2/token\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      body: new URLSearchParams({\n        client_id: process.env.TWITCH_CLIENT_ID,\n        client_secret: process.env.TWITCH_CLIENT_SECRET,\n        grant_type: \"refresh_token\",\n        refresh_token: refreshToken,\n      }),\n    });\n\n    if (!response.ok) {\n      logger.warn(\"Failed to refresh Twitch token\", {\n        userId,\n        status: response.status,\n      });\n      return null;\n    }\n\n    const tokenData = await response.json();\n    const expiresAt = new Date(Date.now() + tokenData.expires_in * 1000);\n\n    // Update stored tokens - FIX: was incorrectly using 'youtube' instead of 'twitch'\n    const account = await storage.getUserPlatformAccount(userId, \"twitch\");\n    if (account) {\n      await storage.updateUserPlatformAccount(account.id, {\n        accessToken: tokenData.access_token,\n        refreshToken: tokenData.refresh_token || refreshToken,\n        tokenExpiresAt: expiresAt,\n      });\n\n      logger.info(\"Twitch token refreshed successfully\", {\n        userId,\n        twitchUserId: account.platformUserId,\n      });\n    }\n\n    return tokenData.access_token;\n  } catch (error) {\n    logger.error(\"Failed to refresh Twitch token:\", error, { userId });\n    return null;\n  }\n}\n\n/**\n * Refresh YouTube token\n */\nasync function refreshYouTubeToken(\n  refreshToken: string,\n  userId: string,\n): Promise<string | null> {\n  try {\n    const youtubeService = new YouTubeAPIService();\n    const tokenData = await youtubeService.refreshAccessToken(refreshToken);\n\n    if (!tokenData) {\n      return null;\n    }\n\n    const expiresAt = tokenData.expires_in\n      ? new Date(Date.now() + tokenData.expires_in * 1000)\n      : undefined;\n\n    // Update stored tokens\n    const account = await storage.getUserPlatformAccount(userId, \"youtube\");\n    if (account) {\n      await storage.updateUserPlatformAccount(account.id, {\n        accessToken: tokenData.access_token,\n        tokenExpiresAt: expiresAt,\n      });\n    }\n\n    return tokenData.access_token;\n  } catch (error) {\n    logger.error(\"Failed to refresh YouTube token:\", error);\n    return null;\n  }\n}\n\n/**\n * Refresh Facebook token\n * Note: Facebook tokens typically need to be exchanged for long-lived tokens\n */\nasync function refreshFacebookToken(\n  refreshToken: string,\n  userId: string,\n): Promise<string | null> {\n  try {\n    // Facebook doesn't use refresh tokens the same way as YouTube/Twitch\n    // Long-lived tokens need to be exchanged via a different flow\n    // For now, return null to indicate refresh is not available\n    logger.warn(`Facebook token refresh not implemented for user ${userId}`);\n    return null;\n  } catch (error) {\n    logger.error(`Failed to refresh Facebook token for user ${userId}:`, error);\n    return null;\n  }\n}\n\n/**\n * Utility functions\n */\nfunction generateSecureState(): string {\n  return randomBytes(32).toString(\"hex\");\n}\n\nfunction generateCodeVerifier(): string {\n  return randomBytes(32).toString(\"base64url\");\n}\n\nfunction generateCodeChallenge(verifier: string): string {\n  return createHash(\"sha256\").update(verifier).digest(\"base64url\");\n}\n\n/**\n * Helper to resolve platform identifiers for streaming coordination\n */\nexport async function resolvePlatformIdentifiers(userId: string): Promise<{\n  twitch?: { userId: string; handle: string };\n  youtube?: { channelId: string; handle: string };\n  facebook?: { pageId?: string; handle: string };\n}> {\n  const accounts = await storage.getUserPlatformAccounts(userId);\n  const identifiers: any = {};\n\n  for (const account of accounts) {\n    if (!account.isActive) continue;\n\n    switch (account.platform) {\n      case \"twitch\":\n        if (account.platformUserId) {\n          identifiers.twitch = {\n            userId: account.platformUserId,\n            handle: account.handle,\n          };\n        }\n        break;\n      case \"youtube\":\n        if (account.channelId) {\n          identifiers.youtube = {\n            channelId: account.channelId,\n            handle: account.handle,\n          };\n        }\n        break;\n      case \"facebook\":\n        identifiers.facebook = {\n          pageId: account.pageId,\n          handle: account.handle,\n        };\n        break;\n    }\n  }\n\n  return identifiers;\n}\n\n/**\n * Get valid access token for platform (with refresh if needed)\n */\nexport async function getValidPlatformToken(\n  userId: string,\n  platform: string,\n): Promise<string | null> {\n  // Get account to check expiry\n  const account = await storage.getUserPlatformAccount(userId, platform);\n  if (!account) {\n    return null;\n  }\n\n  // Check if token is expired or near expiry (5 minute buffer)\n  const now = new Date();\n  const buffer = 5 * 60 * 1000; // 5 minutes in milliseconds\n  const isExpired =\n    account.tokenExpiresAt &&\n    account.tokenExpiresAt.getTime() <= now.getTime() + buffer;\n\n  if (isExpired) {\n    // Try to refresh the token\n    const refreshedToken = await refreshPlatformToken(userId, platform);\n    if (refreshedToken) {\n      return refreshedToken;\n    }\n    // If refresh failed and token is expired, return null instead of expired token\n    return null;\n  }\n\n  // Get current token from storage (only if not expired)\n  return await storage.getUserPlatformToken(userId, platform);\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/real-time-matching-api.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'storage' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1313,1316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1313,1316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":435,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":435,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12598,12601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12598,12601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":567,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":567,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16673,16676],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16673,16676],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":586,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":586,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":661,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":661,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19405,19408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19405,19408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":678,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":678,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19875,19878],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19875,19878],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":713,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":713,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20754,20757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20754,20757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":745,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":745,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21639,21642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21639,21642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":757,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":757,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":884,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":884,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":954,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":954,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28257,28260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28257,28260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userProfile' is defined but never used. Allowed unused args must match /^_/u.","line":974,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":974,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":974,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":974,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28951,28954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28951,28954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userProfile' is defined but never used. Allowed unused args must match /^_/u.","line":991,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":991,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":991,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":991,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29450,29453],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29450,29453],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1048,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1048,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30712,30715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30712,30715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1049,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1049,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30768,30771],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30768,30771],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1052,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1052,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30900,30903],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30900,30903],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1066,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1066,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31271,31274],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31271,31274],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Real-time Matching Suggestions API\n *\n * Provides machine learning-based recommendations for optimal streaming partnerships\n * with real-time updates, performance optimization, and intelligent caching.\n */\n\nimport { logger } from \"../logger\";\nimport { aiStreamingMatcher } from \"./ai-streaming-matcher\";\nimport { aiAlgorithmEngine } from \"./ai-algorithm-engine\";\nimport { storage } from \"../storage\";\nimport type { ConnectedPlatform } from \"./ai-streaming-matcher\";\n\n// Real-time matching interfaces\nexport interface RealTimeMatchRequest {\n  userId: string;\n  preferences?: {\n    urgency?: \"immediate\" | \"today\" | \"this_week\";\n    maxResults?: number;\n    minCompatibilityScore?: number;\n    requiredGames?: string[];\n    preferredTimeSlots?: string[];\n    excludeUserIds?: string[];\n    platformFilter?: (\"twitch\" | \"youtube\" | \"facebook\")[];\n  };\n  context?: {\n    currentlyStreaming?: boolean;\n    plannedStreamTime?: Date;\n    streamDuration?: number;\n    contentType?: string;\n    specialEvent?: boolean;\n  };\n}\n\nexport interface RealTimeMatchResponse {\n  requestId: string;\n  timestamp: Date;\n  matches: EnhancedStreamerMatch[];\n  metadata: MatchingMetadata;\n  recommendations: SmartRecommendations;\n  updateFrequency: number; // milliseconds\n}\n\nexport interface EnhancedStreamerMatch {\n  candidate: any; // StreamerProfile\n  compatibilityScore: number;\n  matchStrength: \"perfect\" | \"excellent\" | \"good\" | \"fair\";\n  availability: AvailabilityStatus;\n  recommendationReason: string[];\n  collaborationTypes: string[];\n  estimatedOutcome: CollaborationOutcome;\n  urgencyScore: number;\n  mlConfidence: number; // Machine learning confidence 0-1\n}\n\nexport interface AvailabilityStatus {\n  currentlyOnline: boolean;\n  currentlyStreaming: boolean;\n  nextAvailableSlot?: Date;\n  responseTime: \"immediate\" | \"within_hour\" | \"within_day\" | \"unknown\";\n  timezone: string;\n  preferredNotificationMethod: string[];\n}\n\nexport interface CollaborationOutcome {\n  expectedViewerBoost: number; // percentage\n  audienceGrowthPotential: number; // percentage\n  engagementIncrease: number; // percentage\n  successProbability: number; // 0-1\n  estimatedDuration: number; // minutes\n  contentSynergyScore: number; // 0-100\n}\n\nexport interface MatchingMetadata {\n  totalCandidatesAnalyzed: number;\n  processingTime: number; // milliseconds\n  algorithmVersion: string;\n  cacheHitRate: number;\n  qualityScore: number; // Overall quality of matches\n  diversityScore: number; // Diversity of recommendation types\n}\n\nexport interface SmartRecommendations {\n  quickActions: QuickAction[];\n  strategicSuggestions: StrategicSuggestion[];\n  trendingOpportunities: TrendingOpportunity[];\n  learningInsights: LearningInsight[];\n}\n\nexport interface QuickAction {\n  type: \"send_request\" | \"schedule_stream\" | \"join_event\" | \"message_directly\";\n  label: string;\n  description: string;\n  targetUserId: string;\n  priority: \"high\" | \"medium\" | \"low\";\n  timeWindow?: {\n    start: Date;\n    end: Date;\n  };\n}\n\nexport interface StrategicSuggestion {\n  category:\n    | \"audience_growth\"\n    | \"content_variety\"\n    | \"skill_development\"\n    | \"network_expansion\";\n  title: string;\n  description: string;\n  actionItems: string[];\n  expectedTimeframe: string;\n  successMetrics: string[];\n}\n\nexport interface TrendingOpportunity {\n  type: \"game_trend\" | \"event_based\" | \"seasonal\" | \"platform_feature\";\n  title: string;\n  description: string;\n  urgency: number; // 0-100\n  potentialReach: number;\n  expirationDate?: Date;\n  relatedUsers: string[];\n}\n\nexport interface LearningInsight {\n  category:\n    | \"personal_pattern\"\n    | \"market_trend\"\n    | \"collaboration_history\"\n    | \"audience_preference\";\n  insight: string;\n  confidence: number; // 0-1\n  actionable: boolean;\n  dataPoints: number;\n  trendDirection: \"improving\" | \"stable\" | \"declining\";\n}\n\n/**\n * Real-time Matching API Service\n */\nexport class RealTimeMatchingAPI {\n  private static instance: RealTimeMatchingAPI;\n\n  // Performance and caching\n  private matchCache = new Map<string, RealTimeMatchResponse>();\n  private cacheExpiry = new Map<string, number>();\n  private readonly CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n  private readonly MAX_CACHE_SIZE = 1000;\n\n  // Machine learning state\n  private mlModel: MachineLearningModel;\n  private performanceHistory: PerformanceMetric[] = [];\n  private readonly MAX_HISTORY = 10000;\n\n  // Real-time subscriptions\n  private activeSubscriptions = new Map<string, RealtimeSubscription>();\n  private updateInterval: NodeJS.Timeout | null = null;\n\n  private constructor() {\n    this.mlModel = new MachineLearningModel();\n    this.initializeRealTimeUpdates();\n    logger.info(\"Real-time Matching API initialized with ML recommendations\");\n  }\n\n  public static getInstance(): RealTimeMatchingAPI {\n    if (!RealTimeMatchingAPI.instance) {\n      RealTimeMatchingAPI.instance = new RealTimeMatchingAPI();\n    }\n    return RealTimeMatchingAPI.instance;\n  }\n\n  /**\n   * Get real-time streaming match suggestions\n   */\n  async getRealtimeMatches(\n    request: RealTimeMatchRequest,\n  ): Promise<RealTimeMatchResponse> {\n    const startTime = Date.now();\n    const requestId = this.generateRequestId(request);\n\n    try {\n      // Check cache first\n      const cached = this.getCachedResponse(requestId);\n      if (cached) {\n        logger.debug(\"Returning cached real-time matches\", {\n          requestId,\n          userId: request.userId,\n        });\n        return cached;\n      }\n\n      // Get base matches from AI matcher\n      // Map urgency to priority for AI matcher\n      const urgencyMap = {\n        immediate: \"high\" as const,\n        today: \"medium\" as const,\n        this_week: \"low\" as const,\n      };\n\n      const baseMatches = await aiStreamingMatcher.findStreamingPartners({\n        userId: request.userId,\n        urgency: request.preferences?.urgency\n          ? urgencyMap[request.preferences.urgency]\n          : \"medium\",\n        maxResults: request.preferences?.maxResults || 20,\n        games: request.preferences?.requiredGames,\n        timeSlots: request.preferences?.preferredTimeSlots,\n      });\n\n      // Enhance matches with real-time data\n      const enhancedMatches = await Promise.all(\n        baseMatches.map((match) =>\n          this.enhanceMatchWithRealtimeData(match, request),\n        ),\n      );\n\n      // Apply machine learning scoring\n      const mlEnhancedMatches = await this.applyMachineLearningScoring(\n        enhancedMatches,\n        request,\n      );\n\n      // Filter and sort by preferences\n      const filteredMatches = this.filterMatchesByPreferences(\n        mlEnhancedMatches,\n        request,\n      );\n      const sortedMatches = this.sortMatchesByRelevance(\n        filteredMatches,\n        request,\n      );\n\n      // Generate smart recommendations\n      const recommendations = await this.generateSmartRecommendations(\n        sortedMatches,\n        request,\n      );\n\n      // Create response\n      const response: RealTimeMatchResponse = {\n        requestId,\n        timestamp: new Date(),\n        matches: sortedMatches.slice(0, request.preferences?.maxResults || 10),\n        metadata: {\n          totalCandidatesAnalyzed: baseMatches.length,\n          processingTime: Date.now() - startTime,\n          algorithmVersion: \"2.1\",\n          cacheHitRate: this.calculateCacheHitRate(),\n          qualityScore: this.calculateQualityScore(sortedMatches),\n          diversityScore: this.calculateDiversityScore(sortedMatches),\n        },\n        recommendations,\n        updateFrequency: this.calculateUpdateFrequency(request),\n      };\n\n      // Cache response\n      this.cacheResponse(requestId, response);\n\n      // Record performance metrics\n      this.recordPerformanceMetric({\n        requestId,\n        userId: request.userId,\n        processingTime: Date.now() - startTime,\n        matchCount: response.matches.length,\n        qualityScore: response.metadata.qualityScore,\n        timestamp: new Date(),\n      });\n\n      logger.info(\"Real-time matches generated successfully\", {\n        requestId,\n        userId: request.userId,\n        matchCount: response.matches.length,\n        processingTime: response.metadata.processingTime,\n      });\n\n      return response;\n    } catch (error) {\n      logger.error(\"Failed to generate real-time matches\", {\n        error,\n        requestId,\n        userId: request.userId,\n      });\n\n      // Return graceful fallback response\n      return this.createFallbackResponse(requestId, request);\n    }\n  }\n\n  /**\n   * Subscribe to real-time match updates\n   */\n  subscribeToUpdates(\n    userId: string,\n    preferences: RealTimeMatchRequest[\"preferences\"] = {},\n    callback: (matches: RealTimeMatchResponse) => void,\n  ): string {\n    const subscriptionId = `${userId}-${Date.now()}`;\n\n    const subscription: RealtimeSubscription = {\n      id: subscriptionId,\n      userId,\n      preferences: preferences || {},\n      callback,\n      lastUpdate: new Date(),\n      updateFrequency: 30000, // 30 seconds default\n      active: true,\n    };\n\n    this.activeSubscriptions.set(subscriptionId, subscription);\n\n    logger.info(\"Real-time subscription created\", {\n      subscriptionId,\n      userId,\n      totalSubscriptions: this.activeSubscriptions.size,\n    });\n\n    return subscriptionId;\n  }\n\n  /**\n   * Unsubscribe from real-time updates\n   */\n  unsubscribe(subscriptionId: string): boolean {\n    const subscription = this.activeSubscriptions.get(subscriptionId);\n    if (subscription) {\n      subscription.active = false;\n      this.activeSubscriptions.delete(subscriptionId);\n\n      logger.info(\"Real-time subscription removed\", {\n        subscriptionId,\n        userId: subscription.userId,\n        remainingSubscriptions: this.activeSubscriptions.size,\n      });\n\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Get trending collaboration opportunities\n   */\n  async getTrendingOpportunities(\n    userId: string,\n  ): Promise<TrendingOpportunity[]> {\n    try {\n      const userProfile = await aiStreamingMatcher.getStreamerProfile(userId);\n      if (!userProfile) return [];\n\n      const opportunities: TrendingOpportunity[] = [];\n\n      // Game trending analysis\n      const gameTrends = await this.analyzeGameTrends(userProfile);\n      opportunities.push(...gameTrends);\n\n      // Event-based opportunities\n      const eventOpportunities =\n        await this.analyzeEventOpportunities(userProfile);\n      opportunities.push(...eventOpportunities);\n\n      // Platform feature opportunities\n      const platformOpportunities =\n        await this.analyzePlatformOpportunities(userProfile);\n      opportunities.push(...platformOpportunities);\n\n      // Sort by urgency and potential\n      return opportunities\n        .sort(\n          (a, b) => b.urgency * b.potentialReach - a.urgency * a.potentialReach,\n        )\n        .slice(0, 10);\n    } catch (error) {\n      logger.error(\"Failed to get trending opportunities\", { error, userId });\n      return [];\n    }\n  }\n\n  /**\n   * Record collaboration outcome for machine learning\n   */\n  async recordCollaborationOutcome(\n    matchId: string,\n    outcome: {\n      success: boolean;\n      rating: number; // 1-5\n      viewerGrowth: number;\n      engagementIncrease: number;\n      wouldCollaborateAgain: boolean;\n      feedback?: string;\n    },\n  ): Promise<void> {\n    try {\n      // Record outcome for machine learning\n      await this.mlModel.recordOutcome(matchId, outcome);\n\n      // Update algorithm weights based on outcome\n      const collaborationOutcome = {\n        matchId,\n        successScore: outcome.success ? outcome.rating / 5 : 0,\n        gameCompatibility: 0.8, // Would get from original match data\n        audienceOverlap: 0.7,\n        timezoneAlignment: 0.9,\n        styleMatching: 0.8,\n        userFeedback: {\n          rating: outcome.rating,\n          collaborationSuccess: outcome.success,\n          wouldCollaborateAgain: outcome.wouldCollaborateAgain,\n        },\n        actualResults: {\n          viewerGrowth: outcome.viewerGrowth,\n          engagementIncrease: outcome.engagementIncrease,\n          retentionImprovement: 0, // Not tracked yet\n        },\n      };\n\n      // Update adaptive weights\n      aiAlgorithmEngine.updateAdaptiveWeights([collaborationOutcome]);\n\n      logger.info(\"Collaboration outcome recorded\", {\n        matchId,\n        success: outcome.success,\n        rating: outcome.rating,\n      });\n    } catch (error) {\n      logger.error(\"Failed to record collaboration outcome\", {\n        error,\n        matchId,\n      });\n    }\n  }\n\n  // Private helper methods\n\n  private async enhanceMatchWithRealtimeData(\n    baseMatch: any,\n    request: RealTimeMatchRequest,\n  ): Promise<EnhancedStreamerMatch> {\n    try {\n      // Get real-time availability\n      const availability = await this.getRealtimeAvailability(\n        baseMatch.candidate.id,\n      );\n\n      // Calculate urgency score\n      const urgencyScore = this.calculateUrgencyScore(baseMatch, request);\n\n      // Get ML confidence\n      const mlConfidence = await this.mlModel.getConfidenceScore(\n        baseMatch.candidate.id,\n        request.userId,\n      );\n\n      // Estimate collaboration outcome\n      const estimatedOutcome = await this.estimateCollaborationOutcome(\n        baseMatch,\n        request,\n      );\n\n      // Generate recommendation reasons\n      const recommendationReason = this.generateRecommendationReasons(\n        baseMatch,\n        availability,\n        estimatedOutcome,\n      );\n\n      return {\n        candidate: baseMatch.candidate,\n        compatibilityScore: baseMatch.totalScore,\n        matchStrength: this.determineMatchStrength(baseMatch.totalScore),\n        availability,\n        recommendationReason,\n        collaborationTypes: baseMatch.reasoning?.suggestedTypes || [\n          \"casual_stream\",\n        ],\n        estimatedOutcome,\n        urgencyScore,\n        mlConfidence,\n      };\n    } catch (error) {\n      logger.error(\"Failed to enhance match with real-time data\", {\n        error,\n        candidateId: baseMatch.candidate.id,\n      });\n\n      // Return basic enhanced match\n      return {\n        candidate: baseMatch.candidate,\n        compatibilityScore: baseMatch.totalScore,\n        matchStrength: this.determineMatchStrength(baseMatch.totalScore),\n        availability: {\n          currentlyOnline: false,\n          currentlyStreaming: false,\n          responseTime: \"unknown\",\n          timezone: \"UTC\",\n          preferredNotificationMethod: [\"email\"],\n        },\n        recommendationReason: [\"Compatible gaming preferences\"],\n        collaborationTypes: [\"casual_stream\"],\n        estimatedOutcome: {\n          expectedViewerBoost: 10,\n          audienceGrowthPotential: 5,\n          engagementIncrease: 15,\n          successProbability: 0.7,\n          estimatedDuration: 120,\n          contentSynergyScore: 70,\n        },\n        urgencyScore: 50,\n        mlConfidence: 0.5,\n      };\n    }\n  }\n\n  private async applyMachineLearningScoring(\n    matches: EnhancedStreamerMatch[],\n    request: RealTimeMatchRequest,\n  ): Promise<EnhancedStreamerMatch[]> {\n    try {\n      return await Promise.all(\n        matches.map(async (match) => {\n          const mlScore = await this.mlModel.predictSuccess(\n            match.candidate.id,\n            request.userId,\n            {\n              compatibilityScore: match.compatibilityScore,\n              urgencyScore: match.urgencyScore,\n              availability: match.availability,\n              context: request.context,\n            },\n          );\n\n          // Blend original score with ML prediction\n          const blendedScore = match.compatibilityScore * 0.7 + mlScore * 30;\n\n          return {\n            ...match,\n            compatibilityScore: Math.min(100, blendedScore),\n            mlConfidence: await this.mlModel.getConfidenceScore(\n              match.candidate.id,\n              request.userId,\n            ),\n          };\n        }),\n      );\n    } catch (error) {\n      logger.error(\"Failed to apply ML scoring\", { error });\n      return matches; // Return original matches as fallback\n    }\n  }\n\n  private filterMatchesByPreferences(\n    matches: EnhancedStreamerMatch[],\n    request: RealTimeMatchRequest,\n  ): EnhancedStreamerMatch[] {\n    let filtered = matches;\n\n    // Filter by minimum compatibility score\n    if (request.preferences?.minCompatibilityScore) {\n      const minScore = request.preferences.minCompatibilityScore;\n      filtered = filtered.filter(\n        (match) => match.compatibilityScore >= minScore,\n      );\n    }\n\n    // Filter by platform\n    if (request.preferences?.platformFilter?.length) {\n      filtered = filtered.filter((match) =>\n        match.candidate.platforms.some((platform: any) =>\n          request.preferences?.platformFilter?.includes(platform.platform),\n        ),\n      );\n    }\n\n    // Filter by excluded users\n    if (request.preferences?.excludeUserIds?.length) {\n      const excludeIds = request.preferences.excludeUserIds;\n      filtered = filtered.filter(\n        (match) => !excludeIds.includes(match.candidate.id),\n      );\n    }\n\n    return filtered;\n  }\n\n  private sortMatchesByRelevance(\n    matches: EnhancedStreamerMatch[],\n    request: RealTimeMatchRequest,\n  ): EnhancedStreamerMatch[] {\n    return matches.sort((a, b) => {\n      // Multi-factor sorting\n      const aScore =\n        a.compatibilityScore * 0.4 +\n        a.urgencyScore * 0.2 +\n        a.mlConfidence * 100 * 0.2 +\n        a.estimatedOutcome.successProbability * 100 * 0.2;\n\n      const bScore =\n        b.compatibilityScore * 0.4 +\n        b.urgencyScore * 0.2 +\n        b.mlConfidence * 100 * 0.2 +\n        b.estimatedOutcome.successProbability * 100 * 0.2;\n\n      return bScore - aScore;\n    });\n  }\n\n  private generateRequestId(request: RealTimeMatchRequest): string {\n    const hash =\n      request.userId +\n      (request.preferences?.urgency || \"medium\") +\n      (request.preferences?.maxResults || 10) +\n      Date.now();\n    return btoa(hash).slice(0, 16);\n  }\n\n  private getCachedResponse(requestId: string): RealTimeMatchResponse | null {\n    const cached = this.matchCache.get(requestId);\n    const expiry = this.cacheExpiry.get(requestId);\n\n    if (cached && expiry && Date.now() < expiry) {\n      return cached;\n    }\n\n    // Clean up expired cache\n    this.matchCache.delete(requestId);\n    this.cacheExpiry.delete(requestId);\n    return null;\n  }\n\n  private cacheResponse(\n    requestId: string,\n    response: RealTimeMatchResponse,\n  ): void {\n    // Manage cache size\n    if (this.matchCache.size >= this.MAX_CACHE_SIZE) {\n      const oldestKey = this.matchCache.keys().next().value;\n      if (oldestKey) {\n        this.matchCache.delete(oldestKey);\n        this.cacheExpiry.delete(oldestKey);\n      }\n    }\n\n    this.matchCache.set(requestId, response);\n    this.cacheExpiry.set(requestId, Date.now() + this.CACHE_DURATION);\n  }\n\n  private async getRealtimeAvailability(\n    userId: string,\n  ): Promise<AvailabilityStatus> {\n    try {\n      // In production, this would check real platform APIs and user status\n      // For now, simulate with reasonable defaults\n\n      return {\n        currentlyOnline: Math.random() > 0.5,\n        currentlyStreaming: Math.random() > 0.8,\n        nextAvailableSlot: new Date(\n          Date.now() + Math.random() * 24 * 60 * 60 * 1000,\n        ),\n        responseTime: [\"immediate\", \"within_hour\", \"within_day\"][\n          Math.floor(Math.random() * 3)\n        ] as any,\n        timezone: \"UTC\",\n        preferredNotificationMethod: [\"discord\", \"email\", \"platform_dm\"],\n      };\n    } catch (error) {\n      logger.error(\"Failed to get real-time availability\", { error, userId });\n      return {\n        currentlyOnline: false,\n        currentlyStreaming: false,\n        responseTime: \"unknown\",\n        timezone: \"UTC\",\n        preferredNotificationMethod: [\"email\"],\n      };\n    }\n  }\n\n  private calculateUrgencyScore(\n    baseMatch: any,\n    request: RealTimeMatchRequest,\n  ): number {\n    let urgencyScore = 50; // Base score\n\n    // Boost for immediate urgency\n    if (request.preferences?.urgency === \"immediate\") {\n      urgencyScore += 30;\n    } else if (request.preferences?.urgency === \"today\") {\n      urgencyScore += 20;\n    }\n\n    // Boost for special events\n    if (request.context?.specialEvent) {\n      urgencyScore += 25;\n    }\n\n    // Boost for currently streaming context\n    if (request.context?.currentlyStreaming) {\n      urgencyScore += 35;\n    }\n\n    return Math.min(100, urgencyScore);\n  }\n\n  private determineMatchStrength(\n    score: number,\n  ): \"perfect\" | \"excellent\" | \"good\" | \"fair\" {\n    if (score >= 90) return \"perfect\";\n    if (score >= 80) return \"excellent\";\n    if (score >= 70) return \"good\";\n    return \"fair\";\n  }\n\n  private generateRecommendationReasons(\n    baseMatch: any,\n    availability: AvailabilityStatus,\n    outcome: CollaborationOutcome,\n  ): string[] {\n    const reasons: string[] = [];\n\n    if (baseMatch.totalScore >= 90) {\n      reasons.push(\"Exceptional compatibility across all factors\");\n    }\n\n    if (availability.currentlyOnline) {\n      reasons.push(\"Currently online and available\");\n    }\n\n    if (outcome.successProbability > 0.8) {\n      reasons.push(\"High probability of successful collaboration\");\n    }\n\n    if (outcome.expectedViewerBoost > 25) {\n      reasons.push(\"Significant audience growth potential\");\n    }\n\n    if (baseMatch.reasoning?.sharedGames?.length > 0) {\n      reasons.push(\n        `Shared interest in ${baseMatch.reasoning.sharedGames.join(\", \")}`,\n      );\n    }\n\n    return reasons.length > 0 ? reasons : [\"Compatible gaming preferences\"];\n  }\n\n  private async estimateCollaborationOutcome(\n    baseMatch: any,\n    request: RealTimeMatchRequest,\n  ): Promise<CollaborationOutcome> {\n    // Use ML model to estimate outcomes\n    try {\n      const prediction = await this.mlModel.predictCollaborationOutcome(\n        baseMatch.candidate.id,\n        request.userId,\n        baseMatch.totalScore,\n      );\n\n      return prediction;\n    } catch (error) {\n      // Fallback to heuristic estimation\n      const compatibilityFactor = baseMatch.totalScore / 100;\n\n      return {\n        expectedViewerBoost: Math.round(compatibilityFactor * 30),\n        audienceGrowthPotential: Math.round(compatibilityFactor * 20),\n        engagementIncrease: Math.round(compatibilityFactor * 25),\n        successProbability: Math.min(0.95, compatibilityFactor * 0.8 + 0.1),\n        estimatedDuration: request.context?.streamDuration || 120,\n        contentSynergyScore: Math.round(compatibilityFactor * 80 + 10),\n      };\n    }\n  }\n\n  private async generateSmartRecommendations(\n    matches: EnhancedStreamerMatch[],\n    request: RealTimeMatchRequest,\n  ): Promise<SmartRecommendations> {\n    const quickActions: QuickAction[] = [];\n    const strategicSuggestions: StrategicSuggestion[] = [];\n    const trendingOpportunities = await this.getTrendingOpportunities(\n      request.userId,\n    );\n    const learningInsights: LearningInsight[] = [];\n\n    // Generate quick actions for top matches\n    matches.slice(0, 3).forEach((match) => {\n      if (match.availability.currentlyOnline) {\n        quickActions.push({\n          type: \"send_request\",\n          label: `Invite ${match.candidate.username}`,\n          description: \"Send collaboration request now\",\n          targetUserId: match.candidate.id,\n          priority: match.matchStrength === \"perfect\" ? \"high\" : \"medium\",\n        });\n      }\n    });\n\n    // Generate strategic suggestions\n    strategicSuggestions.push({\n      category: \"audience_growth\",\n      title: \"Expand Your Audience Reach\",\n      description:\n        \"Collaborate with streamers who have complementary audiences\",\n      actionItems: [\n        \"Focus on streamers with different but compatible gaming preferences\",\n        \"Schedule collaborations during peak hours for both audiences\",\n        \"Plan cross-promotional content\",\n      ],\n      expectedTimeframe: \"2-4 weeks\",\n      successMetrics: [\n        \"Follower growth rate\",\n        \"Audience retention\",\n        \"Cross-platform engagement\",\n      ],\n    });\n\n    // Generate learning insights\n    learningInsights.push({\n      category: \"personal_pattern\",\n      insight: \"You tend to have more successful collaborations on weekends\",\n      confidence: 0.8,\n      actionable: true,\n      dataPoints: 15,\n      trendDirection: \"improving\",\n    });\n\n    return {\n      quickActions,\n      strategicSuggestions,\n      trendingOpportunities: trendingOpportunities.slice(0, 5),\n      learningInsights,\n    };\n  }\n\n  private calculateCacheHitRate(): number {\n    // Simplified calculation\n    return Math.random() * 40 + 60; // 60-100%\n  }\n\n  private calculateQualityScore(matches: EnhancedStreamerMatch[]): number {\n    if (matches.length === 0) return 0;\n\n    const avgCompatibility =\n      matches.reduce((sum, match) => sum + match.compatibilityScore, 0) /\n      matches.length;\n    const avgConfidence =\n      matches.reduce((sum, match) => sum + match.mlConfidence, 0) /\n      matches.length;\n\n    return Math.round(avgCompatibility * 0.7 + avgConfidence * 100 * 0.3);\n  }\n\n  private calculateDiversityScore(matches: EnhancedStreamerMatch[]): number {\n    // Calculate diversity based on different collaboration types and platforms\n    const uniqueTypes = new Set(\n      matches.flatMap((match) => match.collaborationTypes),\n    );\n    const uniquePlatforms = new Set(\n      matches.flatMap((match) =>\n        match.candidate.platforms.map((p: ConnectedPlatform) => p.platform),\n      ),\n    );\n\n    return Math.min(100, uniqueTypes.size * 20 + uniquePlatforms.size * 15);\n  }\n\n  private calculateUpdateFrequency(request: RealTimeMatchRequest): number {\n    if (request.preferences?.urgency === \"immediate\") return 15000; // 15 seconds\n    if (request.preferences?.urgency === \"today\") return 60000; // 1 minute\n    return 300000; // 5 minutes\n  }\n\n  private recordPerformanceMetric(metric: PerformanceMetric): void {\n    this.performanceHistory.push(metric);\n\n    // Keep history size manageable\n    if (this.performanceHistory.length > this.MAX_HISTORY) {\n      this.performanceHistory = this.performanceHistory.slice(\n        -this.MAX_HISTORY + 1000,\n      );\n    }\n  }\n\n  private createFallbackResponse(\n    requestId: string,\n    request: RealTimeMatchRequest,\n  ): RealTimeMatchResponse {\n    return {\n      requestId,\n      timestamp: new Date(),\n      matches: [],\n      metadata: {\n        totalCandidatesAnalyzed: 0,\n        processingTime: 0,\n        algorithmVersion: \"2.1-fallback\",\n        cacheHitRate: 0,\n        qualityScore: 0,\n        diversityScore: 0,\n      },\n      recommendations: {\n        quickActions: [],\n        strategicSuggestions: [],\n        trendingOpportunities: [],\n        learningInsights: [],\n      },\n      updateFrequency: 300000,\n    };\n  }\n\n  private initializeRealTimeUpdates(): void {\n    // Start update interval for active subscriptions\n    this.updateInterval = setInterval(async () => {\n      await this.processRealtimeUpdates();\n    }, 30000) as NodeJS.Timeout; // Check every 30 seconds\n\n    logger.info(\"Real-time update system initialized\");\n  }\n\n  private async processRealtimeUpdates(): Promise<void> {\n    const activeSubscriptions = Array.from(\n      this.activeSubscriptions.values(),\n    ).filter((sub) => sub.active);\n\n    if (activeSubscriptions.length === 0) return;\n\n    logger.debug(\"Processing real-time updates\", {\n      subscriptionCount: activeSubscriptions.length,\n    });\n\n    for (const subscription of activeSubscriptions) {\n      try {\n        const timeSinceLastUpdate =\n          Date.now() - subscription.lastUpdate.getTime();\n\n        if (timeSinceLastUpdate >= subscription.updateFrequency) {\n          const request: RealTimeMatchRequest = {\n            userId: subscription.userId,\n            preferences: subscription.preferences,\n          };\n\n          const matches = await this.getRealtimeMatches(request);\n          subscription.callback(matches);\n          subscription.lastUpdate = new Date();\n        }\n      } catch (error) {\n        logger.error(\"Failed to process real-time update\", {\n          error,\n          subscriptionId: subscription.id,\n          userId: subscription.userId,\n        });\n      }\n    }\n  }\n\n  private async analyzeGameTrends(\n    userProfile: any,\n  ): Promise<TrendingOpportunity[]> {\n    // Simulate game trend analysis\n    const trendingGames = [\"Magic: The Gathering\", \"Pokemon\", \"Lorcana\"];\n    const userGames = userProfile.contentPreferences?.primaryGames || [];\n\n    return trendingGames\n      .filter((game) => userGames.includes(game))\n      .map((game) => ({\n        type: \"game_trend\" as const,\n        title: `${game} Trending Up`,\n        description: `${game} viewership increased 25% this week`,\n        urgency: 75,\n        potentialReach: 1500,\n        expirationDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n        relatedUsers: [],\n      }));\n  }\n\n  private async analyzeEventOpportunities(\n    userProfile: any,\n  ): Promise<TrendingOpportunity[]> {\n    // Simulate event-based opportunities\n    return [\n      {\n        type: \"event_based\" as const,\n        title: \"Weekend Tournament Collaboration\",\n        description: \"Join community tournament streams this weekend\",\n        urgency: 85,\n        potentialReach: 2000,\n        expirationDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),\n        relatedUsers: [],\n      },\n    ];\n  }\n\n  private async analyzePlatformOpportunities(\n    userProfile: any,\n  ): Promise<TrendingOpportunity[]> {\n    // Simulate platform feature opportunities\n    return [\n      {\n        type: \"platform_feature\" as const,\n        title: \"New Collaboration Tools\",\n        description: \"Try new cross-platform streaming features\",\n        urgency: 60,\n        potentialReach: 800,\n        relatedUsers: [],\n      },\n    ];\n  }\n\n  /**\n   * Clean up resources\n   */\n  cleanup(): void {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = null;\n    }\n\n    this.activeSubscriptions.clear();\n    this.matchCache.clear();\n    this.cacheExpiry.clear();\n\n    logger.info(\"Real-time Matching API cleaned up\");\n  }\n}\n\n// Supporting interfaces and classes\n\ninterface RealtimeSubscription {\n  id: string;\n  userId: string;\n  preferences: RealTimeMatchRequest[\"preferences\"];\n  callback: (matches: RealTimeMatchResponse) => void;\n  lastUpdate: Date;\n  updateFrequency: number;\n  active: boolean;\n}\n\ninterface PerformanceMetric {\n  requestId: string;\n  userId: string;\n  processingTime: number;\n  matchCount: number;\n  qualityScore: number;\n  timestamp: Date;\n}\n\n/**\n * Machine Learning Model for Streaming Match Predictions\n */\nclass MachineLearningModel {\n  private outcomeHistory: Map<string, any[]> = new Map();\n  private userPatterns: Map<string, any> = new Map();\n  private collaborationSuccess: Map<string, number> = new Map();\n\n  async recordOutcome(matchId: string, outcome: any): Promise<void> {\n    const history = this.outcomeHistory.get(matchId) || [];\n    history.push({\n      ...outcome,\n      timestamp: new Date(),\n    });\n    this.outcomeHistory.set(matchId, history);\n\n    logger.debug(\"ML outcome recorded\", { matchId, success: outcome.success });\n  }\n\n  async predictSuccess(\n    candidateId: string,\n    userId: string,\n    context: any,\n  ): Promise<number> {\n    // Simplified ML prediction\n    const userPattern = this.userPatterns.get(userId) || { successRate: 0.7 };\n    const candidatePattern = this.userPatterns.get(candidateId) || {\n      successRate: 0.7,\n    };\n\n    let prediction =\n      (userPattern.successRate + candidatePattern.successRate) / 2;\n\n    // Adjust based on context\n    if (context.compatibilityScore > 85) prediction += 0.1;\n    if (context.availability.currentlyOnline) prediction += 0.05;\n    if (context.urgencyScore > 80) prediction += 0.05;\n\n    return Math.min(100, prediction * 100);\n  }\n\n  async getConfidenceScore(\n    candidateId: string,\n    userId: string,\n  ): Promise<number> {\n    // Base confidence on data availability\n    const userHistory = this.outcomeHistory.get(userId)?.length || 0;\n    const candidateHistory = this.outcomeHistory.get(candidateId)?.length || 0;\n\n    const dataPoints = userHistory + candidateHistory;\n    const maxConfidence = 0.95;\n    const minConfidence = 0.3;\n\n    // More data points = higher confidence\n    const confidence =\n      minConfidence + (dataPoints / 100) * (maxConfidence - minConfidence);\n    return Math.min(maxConfidence, confidence);\n  }\n\n  async predictCollaborationOutcome(\n    candidateId: string,\n    userId: string,\n    compatibilityScore: number,\n  ): Promise<CollaborationOutcome> {\n    const successProbability =\n      (await this.predictSuccess(candidateId, userId, { compatibilityScore })) /\n      100;\n\n    return {\n      expectedViewerBoost: Math.round(\n        successProbability * compatibilityScore * 0.4,\n      ),\n      audienceGrowthPotential: Math.round(\n        successProbability * compatibilityScore * 0.3,\n      ),\n      engagementIncrease: Math.round(\n        successProbability * compatibilityScore * 0.5,\n      ),\n      successProbability,\n      estimatedDuration: 120,\n      contentSynergyScore: Math.round(compatibilityScore * successProbability),\n    };\n  }\n}\n\n// Export singleton instance\nexport const realtimeMatchingAPI = RealTimeMatchingAPI.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/redis-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/streaming-coordinator.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1319,1322],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1319,1322],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":411,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":411,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11206,11209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11206,11209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":430,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":430,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11662,11665],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11662,11665],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'timeRange' is assigned a value but never used. Allowed unused args must match /^_/u.","line":457,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":457,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { twitchAPI } from \"./twitch-api\";\nimport { storage } from \"../storage\";\nimport type { User } from \"@shared/schema\";\nimport { cacheService } from \"./cache-service\";\nimport { logger } from \"../logger\";\n// import { notificationDelivery } from './notification-delivery'; // Commented out for now\n\n// Types for streaming coordination\nexport interface StreamingPlatform {\n  id: string;\n  name: string;\n  isConnected: boolean;\n  username?: string;\n  profileUrl?: string;\n  lastStreamCheck?: Date;\n}\n\nexport interface StreamSession {\n  id: string;\n  hostUserId: string;\n  coHostUserIds: string[];\n  title: string;\n  description?: string;\n  scheduledStartTime: Date;\n  actualStartTime?: Date;\n  endTime?: Date;\n  status: \"scheduled\" | \"live\" | \"ended\" | \"cancelled\";\n  platforms: StreamingPlatform[];\n  category: string;\n  tags: string[];\n  maxViewers?: number;\n  averageViewers?: number;\n  peakViewers?: number;\n  communityId?: string;\n  isPublic: boolean;\n  autoStartEnabled: boolean;\n  crossPlatformChat: boolean;\n  recordingEnabled: boolean;\n  multistreaming: boolean;\n}\n\nexport interface StreamingNotification {\n  id: string;\n  userId: string;\n  type:\n    | \"stream_started\"\n    | \"stream_ended\"\n    | \"raid_incoming\"\n    | \"host_request\"\n    | \"collaboration_invite\";\n  message: string;\n  metadata: Record<string, any>;\n  isRead: boolean;\n  createdAt: Date;\n}\n\nexport interface CollaborationRequest {\n  id: string;\n  fromUserId: string;\n  toUserId: string;\n  streamSessionId: string;\n  type: \"co_host\" | \"raid\" | \"host\" | \"guest_appearance\";\n  message?: string;\n  scheduledTime?: Date;\n  status: \"pending\" | \"accepted\" | \"declined\" | \"expired\";\n  createdAt: Date;\n  expiresAt: Date;\n}\n\n/**\n * Multi-platform streaming coordination service\n * Handles stream coordination across Twitch, YouTube, Facebook, and other platforms\n */\nexport class StreamingCoordinator {\n  private activeStreamSessions: Map<string, StreamSession> = new Map();\n  private streamCheckInterval: NodeJS.Timeout | null = null;\n\n  constructor() {\n    // Start periodic stream status checks\n    this.startStreamMonitoring();\n  }\n\n  /**\n   * Start monitoring streams across all platforms\n   */\n  private startStreamMonitoring(): void {\n    if (this.streamCheckInterval) {\n      clearInterval(this.streamCheckInterval);\n    }\n\n    // Check stream statuses every 2 minutes\n    this.streamCheckInterval = setInterval(\n      async () => {\n        await this.checkAllStreamStatuses();\n      },\n      2 * 60 * 1000,\n    );\n  }\n\n  /**\n   * Stop stream monitoring\n   */\n  stopStreamMonitoring(): void {\n    if (this.streamCheckInterval) {\n      clearInterval(this.streamCheckInterval);\n      this.streamCheckInterval = null;\n    }\n  }\n\n  /**\n   * Get user's connected platforms\n   */\n  async getUserPlatforms(userId: string): Promise<StreamingPlatform[]> {\n    // TODO: Implement platform connection storage\n    // For now, return sample data based on auth providers\n    const user = await storage.getUser(userId);\n    if (!user) return [];\n\n    const platforms: StreamingPlatform[] = [];\n\n    // Check Twitch connection (placeholder - would check OAuth tokens in real implementation)\n    platforms.push({\n      id: \"twitch\",\n      name: \"Twitch\",\n      isConnected: true, // TODO: Check actual connection status\n      username: user.username || \"user_\" + userId.slice(0, 8),\n      profileUrl: `https://twitch.tv/${user.username || \"user_\" + userId.slice(0, 8)}`,\n      lastStreamCheck: new Date(),\n    });\n\n    // YouTube placeholder\n    platforms.push({\n      id: \"youtube\",\n      name: \"YouTube\",\n      isConnected: false, // TODO: Implement YouTube OAuth\n      lastStreamCheck: new Date(),\n    });\n\n    // Facebook placeholder\n    platforms.push({\n      id: \"facebook\",\n      name: \"Facebook Gaming\",\n      isConnected: false, // TODO: Implement Facebook OAuth\n      lastStreamCheck: new Date(),\n    });\n\n    return platforms;\n  }\n\n  /**\n   * Create a new stream session\n   */\n  async createStreamSession(\n    session: Omit<StreamSession, \"id\">,\n  ): Promise<StreamSession> {\n    const sessionId = `stream_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n    const newSession: StreamSession = {\n      id: sessionId,\n      ...session,\n    };\n\n    this.activeStreamSessions.set(sessionId, newSession);\n\n    // Cache the new session\n    await cacheService.cacheStreamSession(newSession);\n\n    // Invalidate user sessions cache for host and co-hosts\n    await cacheService.delete(`user_sessions:${newSession.hostUserId}`);\n    for (const coHostId of newSession.coHostUserIds) {\n      await cacheService.delete(`user_sessions:${coHostId}`);\n    }\n\n    // TODO: Store in database\n    logger.info(`Created stream session: ${sessionId}`, {\n      sessionId,\n      hostUserId: newSession.hostUserId,\n    });\n\n    return newSession;\n  }\n\n  /**\n   * Get active stream sessions for a user\n   */\n  async getUserStreamSessions(userId: string): Promise<StreamSession[]> {\n    // Try to get from cache first\n    const cachedSessions = await cacheService.getUserStreamSessions(userId);\n    if (cachedSessions) {\n      logger.debug(\"Cache hit for user stream sessions\", { userId });\n      return cachedSessions;\n    }\n\n    // Get from active sessions\n    const sessions = Array.from(this.activeStreamSessions.values());\n    const userSessions = sessions.filter(\n      (session) =>\n        session.hostUserId === userId || session.coHostUserIds.includes(userId),\n    );\n\n    // Cache the result\n    await cacheService.cacheUserStreamSessions(userId, userSessions);\n    logger.debug(\"Cached user stream sessions\", {\n      userId,\n      count: userSessions.length,\n    });\n\n    return userSessions;\n  }\n\n  /**\n   * Check if a user is currently streaming on any platform\n   */\n  async isUserStreaming(\n    userId: string,\n  ): Promise<{\n    isStreaming: boolean;\n    platform?: string;\n    streamTitle?: string;\n    viewerCount?: number;\n  }> {\n    const user = await storage.getUser(userId);\n    if (!user || !user.username) {\n      return { isStreaming: false };\n    }\n\n    try {\n      // Check Twitch\n      const twitchStream = await twitchAPI.getStream(user.username);\n      if (twitchStream && twitchStream.type === \"live\") {\n        return {\n          isStreaming: true,\n          platform: \"Twitch\",\n          streamTitle: twitchStream.title,\n          viewerCount: twitchStream.viewer_count,\n        };\n      }\n\n      // TODO: Check YouTube API\n      // TODO: Check Facebook Gaming API\n\n      return { isStreaming: false };\n    } catch (error) {\n      console.error(\"Error checking user streaming status:\", error);\n      return { isStreaming: false };\n    }\n  }\n\n  /**\n   * Check streaming status for all active sessions\n   */\n  private async checkAllStreamStatuses(): Promise<void> {\n    const activeSessions = Array.from(\n      this.activeStreamSessions.values(),\n    ).filter(\n      (session) => session.status === \"scheduled\" || session.status === \"live\",\n    );\n\n    for (const session of activeSessions) {\n      try {\n        await this.updateStreamSessionStatus(session.id);\n      } catch (error) {\n        console.error(`Error updating stream session ${session.id}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Update stream session status based on platform data\n   */\n  async updateStreamSessionStatus(\n    sessionId: string,\n  ): Promise<StreamSession | null> {\n    const session = this.activeStreamSessions.get(sessionId);\n    if (!session) return null;\n\n    const hostStreamStatus = await this.isUserStreaming(session.hostUserId);\n    const currentTime = new Date();\n\n    // Update session based on streaming status\n    if (hostStreamStatus.isStreaming && session.status === \"scheduled\") {\n      session.status = \"live\";\n      session.actualStartTime = currentTime;\n      logger.info(`Stream session started live`, { sessionId });\n    } else if (!hostStreamStatus.isStreaming && session.status === \"live\") {\n      session.status = \"ended\";\n      session.endTime = currentTime;\n      logger.info(`Stream session ended`, { sessionId });\n    }\n\n    // Update viewer metrics\n    if (hostStreamStatus.isStreaming && hostStreamStatus.viewerCount) {\n      session.maxViewers = Math.max(\n        session.maxViewers || 0,\n        hostStreamStatus.viewerCount,\n      );\n      session.peakViewers = Math.max(\n        session.peakViewers || 0,\n        hostStreamStatus.viewerCount,\n      );\n    }\n\n    this.activeStreamSessions.set(sessionId, session);\n    return session;\n  }\n\n  /**\n   * Send collaboration request\n   */\n  async sendCollaborationRequest(\n    request: Omit<CollaborationRequest, \"id\" | \"createdAt\" | \"expiresAt\">,\n  ): Promise<CollaborationRequest> {\n    const requestId = `collab_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const now = new Date();\n    const expiresAt = new Date(now.getTime() + 24 * 60 * 60 * 1000); // 24 hours\n\n    const collaborationRequest: CollaborationRequest = {\n      id: requestId,\n      ...request,\n      createdAt: now,\n      expiresAt,\n    };\n\n    // TODO: Store in database\n    // TODO: Send notification to target user\n    logger.info(`Collaboration request sent`, {\n      requestId,\n      collaborationRequest,\n    });\n\n    return collaborationRequest;\n  }\n\n  /**\n   * Get upcoming stream sessions for a community\n   */\n  async getCommunityUpcomingStreams(\n    communityId: string,\n    limit: number = 10,\n  ): Promise<StreamSession[]> {\n    const sessions = Array.from(this.activeStreamSessions.values());\n    const communitySessions = sessions\n      .filter(\n        (session) =>\n          session.communityId === communityId && session.status === \"scheduled\",\n      )\n      .sort(\n        (a, b) =>\n          a.scheduledStartTime.getTime() - b.scheduledStartTime.getTime(),\n      )\n      .slice(0, limit);\n\n    return communitySessions;\n  }\n\n  /**\n   * Get live streams for a community\n   */\n  async getCommunityLiveStreams(communityId: string): Promise<StreamSession[]> {\n    const sessions = Array.from(this.activeStreamSessions.values());\n    return sessions.filter(\n      (session) =>\n        session.communityId === communityId && session.status === \"live\",\n    );\n  }\n\n  /**\n   * Setup EventSub webhooks for real-time updates\n   */\n  async setupPlatformWebhooks(\n    userId: string,\n    callbackUrl: string,\n    secret: string,\n  ): Promise<boolean> {\n    try {\n      const user = await storage.getUser(userId);\n      if (!user || !user.username) {\n        throw new Error(\"User not found or no username\");\n      }\n\n      // Subscribe to Twitch stream online/offline events\n      await twitchAPI.subscribeToEvent(\n        \"stream.online\",\n        \"1\",\n        { broadcaster_user_login: user.username },\n        `${callbackUrl}/twitch`,\n        secret,\n      );\n\n      await twitchAPI.subscribeToEvent(\n        \"stream.offline\",\n        \"1\",\n        { broadcaster_user_login: user.username },\n        `${callbackUrl}/twitch`,\n        secret,\n      );\n\n      // TODO: Setup YouTube webhooks\n      // TODO: Setup Facebook webhooks\n\n      return true;\n    } catch (error) {\n      console.error(\"Error setting up platform webhooks:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Handle platform webhook events\n   */\n  async handlePlatformEvent(platform: string, event: any): Promise<void> {\n    switch (platform) {\n      case \"twitch\":\n        await this.handleTwitchEvent(event);\n        break;\n      case \"youtube\":\n        // TODO: Handle YouTube events\n        break;\n      case \"facebook\":\n        // TODO: Handle Facebook events\n        break;\n      default:\n        console.warn(`Unknown platform event: ${platform}`);\n    }\n  }\n\n  /**\n   * Handle Twitch-specific events\n   */\n  private async handleTwitchEvent(event: any): Promise<void> {\n    const eventType = event.event_type;\n    const eventData = event.event_data;\n\n    switch (eventType) {\n      case \"stream.online\":\n        logger.info(`Stream started`, {\n          broadcaster: eventData.broadcaster_user_login,\n        });\n        // Find and update relevant stream sessions\n        break;\n      case \"stream.offline\":\n        logger.info(`Stream ended`, {\n          broadcaster: eventData.broadcaster_user_login,\n        });\n        // Find and update relevant stream sessions\n        break;\n      default:\n        logger.warn(`Unhandled Twitch event`, { eventType });\n    }\n  }\n\n  /**\n   * Get streaming analytics for a user\n   */\n  async getStreamingAnalytics(\n    userId: string,\n    timeRange: \"week\" | \"month\" | \"year\" = \"month\",\n  ): Promise<{\n    totalStreams: number;\n    totalHours: number;\n    averageViewers: number;\n    peakViewers: number;\n    topCategories: Array<{ category: string; hours: number }>;\n    platformBreakdown: Array<{\n      platform: string;\n      streams: number;\n      hours: number;\n    }>;\n  }> {\n    // TODO: Implement analytics calculation from stored stream data\n    return {\n      totalStreams: 0,\n      totalHours: 0,\n      averageViewers: 0,\n      peakViewers: 0,\n      topCategories: [],\n      platformBreakdown: [],\n    };\n  }\n}\n\n// Export singleton instance\nexport const streamingCoordinator = new StreamingCoordinator();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/twitch-api.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1151,1154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1151,1154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1439,1442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1439,1442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3275,3278],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3275,3278],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":258,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6419,6422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6419,6422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Request, Response } from \"express\";\nimport { logger } from \"../logger\";\nimport { createHmac, timingSafeEqual } from \"crypto\";\n\n// Twitch API configuration\nconst TWITCH_API_BASE = \"https://api.twitch.tv/helix\";\nconst TWITCH_OAUTH_BASE = \"https://id.twitch.tv/oauth2\";\n\n// Types for Twitch API responses\nexport interface TwitchUser {\n  id: string;\n  login: string;\n  display_name: string;\n  type: string;\n  broadcaster_type: string;\n  description: string;\n  profile_image_url: string;\n  offline_image_url: string;\n  view_count: number;\n  email?: string;\n  created_at: string;\n}\n\nexport interface TwitchStream {\n  id: string;\n  user_id: string;\n  user_login: string;\n  user_name: string;\n  game_id: string;\n  game_name: string;\n  type: \"live\" | \"\";\n  title: string;\n  tags: string[];\n  viewer_count: number;\n  started_at: string;\n  language: string;\n  thumbnail_url: string;\n  tag_ids: string[];\n  is_mature: boolean;\n}\n\nexport interface TwitchCategory {\n  id: string;\n  name: string;\n  box_art_url: string;\n}\n\nexport interface TwitchWebhookEvent {\n  id: string;\n  event_type: string;\n  event_timestamp: string;\n  version: string;\n  event_data: any;\n}\n\nexport interface TwitchEventSubSubscription {\n  id: string;\n  status:\n    | \"enabled\"\n    | \"webhook_callback_verification_pending\"\n    | \"webhook_callback_verification_failed\"\n    | \"notification_failures_exceeded\";\n  type: string;\n  version: string;\n  condition: Record<string, any>;\n  transport: {\n    method: \"webhook\";\n    callback: string;\n  };\n  created_at: string;\n  cost: number;\n}\n\n/**\n * Twitch API Service for handling Twitch API interactions and EventSub webhooks\n */\nexport class TwitchAPIService {\n  private clientId: string;\n  private clientSecret: string;\n  private accessToken: string | null = null;\n  private tokenExpiresAt: number | null = null;\n\n  /**\n   * Get app access token for API calls\n   */\n  private async getAppAccessToken(): Promise<string> {\n    // Return cached token if still valid\n    if (\n      this.accessToken &&\n      this.tokenExpiresAt &&\n      Date.now() < this.tokenExpiresAt\n    ) {\n      return this.accessToken;\n    }\n\n    try {\n      const response = await fetch(`${TWITCH_OAUTH_BASE}/token`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        body: new URLSearchParams({\n          client_id: this.clientId,\n          client_secret: this.clientSecret,\n          grant_type: \"client_credentials\",\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Failed to get Twitch access token: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data = await response.json();\n      this.accessToken = data.access_token;\n      this.tokenExpiresAt = Date.now() + data.expires_in * 1000 - 60000; // Subtract 1 minute for safety\n\n      if (!this.accessToken) {\n        throw new Error(\"Failed to obtain valid access token from Twitch\");\n      }\n\n      return this.accessToken;\n    } catch (error) {\n      console.error(\"Error getting Twitch access token:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Make authenticated request to Twitch API\n   */\n  private async makeAPIRequest(\n    endpoint: string,\n    options: RequestInit = {},\n  ): Promise<any> {\n    const token = await this.getAppAccessToken();\n\n    const response = await fetch(`${TWITCH_API_BASE}${endpoint}`, {\n      ...options,\n      headers: {\n        \"Client-ID\": this.clientId,\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n        ...options.headers,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\n        `Twitch API request failed: ${response.status} ${response.statusText}`,\n      );\n    }\n\n    return response.json();\n  }\n\n  /**\n   * Get user information by username or ID\n   */\n  async getUser(login?: string, id?: string): Promise<TwitchUser | null> {\n    const params = new URLSearchParams();\n    if (login) params.append(\"login\", login);\n    if (id) params.append(\"id\", id);\n\n    if (!params.toString()) {\n      throw new Error(\"Either login or id must be provided\");\n    }\n\n    try {\n      const data = await this.makeAPIRequest(`/users?${params.toString()}`);\n      return data.data?.[0] || null;\n    } catch (error) {\n      console.error(\"Error fetching Twitch user:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Get stream information for a user\n   */\n  async getStream(userLogin: string): Promise<TwitchStream | null> {\n    try {\n      const data = await this.makeAPIRequest(\n        `/streams?user_login=${userLogin}`,\n      );\n      return data.data?.[0] || null;\n    } catch (error) {\n      console.error(\"Error fetching Twitch stream:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Get multiple streams by user logins\n   */\n  async getStreams(userLogins: string[]): Promise<TwitchStream[]> {\n    if (userLogins.length === 0) return [];\n\n    const params = userLogins\n      .map((login) => `user_login=${encodeURIComponent(login)}`)\n      .join(\"&\");\n\n    try {\n      const data = await this.makeAPIRequest(`/streams?${params}`);\n      return data.data || [];\n    } catch (error) {\n      console.error(\"Error fetching Twitch streams:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * Get game/category information\n   */\n  async getCategories(\n    names?: string[],\n    ids?: string[],\n  ): Promise<TwitchCategory[]> {\n    const params = new URLSearchParams();\n    names?.forEach((name) => params.append(\"name\", name));\n    ids?.forEach((id) => params.append(\"id\", id));\n\n    if (!params.toString()) {\n      throw new Error(\"Either names or ids must be provided\");\n    }\n\n    try {\n      const data = await this.makeAPIRequest(`/games?${params.toString()}`);\n      return data.data || [];\n    } catch (error) {\n      console.error(\"Error fetching Twitch categories:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * Search for categories/games\n   */\n  async searchCategories(query: string): Promise<TwitchCategory[]> {\n    try {\n      const data = await this.makeAPIRequest(\n        `/search/categories?query=${encodeURIComponent(query)}`,\n      );\n      return data.data || [];\n    } catch (error) {\n      console.error(\"Error searching Twitch categories:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * Subscribe to EventSub webhook events\n   */\n  async subscribeToEvent(\n    type: string,\n    version: string,\n    condition: Record<string, any>,\n    callbackUrl: string,\n    secret: string,\n  ): Promise<TwitchEventSubSubscription | null> {\n    try {\n      const data = await this.makeAPIRequest(\"/eventsub/subscriptions\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          type,\n          version,\n          condition,\n          transport: {\n            method: \"webhook\",\n            callback: callbackUrl,\n            secret,\n          },\n        }),\n      });\n\n      return data.data?.[0] || null;\n    } catch (error) {\n      console.error(\"Error subscribing to Twitch EventSub:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Get existing EventSub subscriptions\n   */\n  async getSubscriptions(): Promise<TwitchEventSubSubscription[]> {\n    try {\n      const data = await this.makeAPIRequest(\"/eventsub/subscriptions\");\n      return data.data || [];\n    } catch (error) {\n      console.error(\"Error fetching Twitch EventSub subscriptions:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * Delete EventSub subscription\n   */\n  async deleteSubscription(subscriptionId: string): Promise<boolean> {\n    try {\n      await this.makeAPIRequest(\n        `/eventsub/subscriptions?id=${subscriptionId}`,\n        {\n          method: \"DELETE\",\n        },\n      );\n      return true;\n    } catch (error) {\n      console.error(\"Error deleting Twitch EventSub subscription:\", error);\n      return false;\n    }\n  }\n\n  // Store for message ID replay protection\n  private processedMessageIds = new Set<string>();\n  private messageIdCleanupInterval: NodeJS.Timeout | null = null;\n\n  constructor() {\n    this.clientId = process.env.TWITCH_CLIENT_ID || \"\";\n    this.clientSecret = process.env.TWITCH_CLIENT_SECRET || \"\";\n\n    if (!this.clientId || !this.clientSecret) {\n      logger.warn(\n        \"Twitch API credentials not configured. Twitch integration will be disabled.\",\n      );\n      // Don't throw error - allow server to start without Twitch integration\n      return;\n    }\n\n    // Clean up old message IDs every hour to prevent memory leaks\n    this.messageIdCleanupInterval = setInterval(\n      () => {\n        this.processedMessageIds.clear();\n      },\n      60 * 60 * 1000,\n    );\n  }\n\n  /**\n   * Verify webhook signature and prevent replay attacks for EventSub\n   */\n  verifyWebhookSignature(\n    headers: Record<string, string>,\n    body: string,\n    secret: string,\n  ): { valid: boolean; error?: string } {\n    const messageId = headers[\"twitch-eventsub-message-id\"];\n    const timestamp = headers[\"twitch-eventsub-message-timestamp\"];\n    const signature = headers[\"twitch-eventsub-message-signature\"];\n\n    if (!messageId || !timestamp || !signature) {\n      return { valid: false, error: \"Missing required headers\" };\n    }\n\n    // Check for replay attacks\n    if (this.processedMessageIds.has(messageId)) {\n      return {\n        valid: false,\n        error: \"Message already processed (replay attack)\",\n      };\n    }\n\n    // Check timestamp to prevent old message replay (10 minutes tolerance)\n    const messageTime = new Date(timestamp).getTime();\n    const currentTime = Date.now();\n    const timeDifference = Math.abs(currentTime - messageTime);\n\n    if (timeDifference > 10 * 60 * 1000) {\n      return { valid: false, error: \"Message timestamp too old\" };\n    }\n\n    // Verify HMAC signature\n    const message = messageId + timestamp + body;\n    const expectedSignature =\n      \"sha256=\" + createHmac(\"sha256\", secret).update(message).digest(\"hex\");\n\n    const isValidSignature = timingSafeEqual(\n      Buffer.from(signature),\n      Buffer.from(expectedSignature),\n    );\n\n    if (!isValidSignature) {\n      return { valid: false, error: \"Invalid signature\" };\n    }\n\n    // Store message ID to prevent replay\n    this.processedMessageIds.add(messageId);\n\n    return { valid: true };\n  }\n\n  /**\n   * Handle EventSub webhook callback with proper security verification\n   */\n  handleWebhook(req: Request, res: Response): TwitchWebhookEvent | null {\n    const messageType = req.headers[\"twitch-eventsub-message-type\"] as string;\n    const body = JSON.stringify(req.body);\n    const secret = process.env.TWITCH_EVENTSUB_SECRET;\n\n    if (!secret) {\n      console.error(\"TWITCH_EVENTSUB_SECRET not configured\");\n      res.status(500).send(\"Server configuration error\");\n      return null;\n    }\n\n    // Verify signature and prevent replay attacks\n    const verification = this.verifyWebhookSignature(\n      req.headers as Record<string, string>,\n      body,\n      secret,\n    );\n    if (!verification.valid) {\n      console.warn(\"Twitch webhook verification failed:\", verification.error);\n      res.status(403).send(\"Forbidden\");\n      return null;\n    }\n\n    // Handle challenge verification (subscription setup)\n    if (messageType === \"webhook_callback_verification\") {\n      const challenge = req.body.challenge;\n      logger.info(\"Twitch EventSub challenge verified\");\n      res.status(200).send(challenge);\n      return null;\n    }\n\n    // Handle notification\n    if (messageType === \"notification\") {\n      const event: TwitchWebhookEvent = {\n        id: req.body.subscription?.id || \"\",\n        event_type: req.body.subscription?.type || \"\",\n        event_timestamp: req.body.event?.started_at || new Date().toISOString(),\n        version: req.body.subscription?.version || \"1\",\n        event_data: req.body.event || {},\n      };\n\n      logger.info(\"Twitch EventSub notification received\", {\n        eventType: event.event_type,\n      });\n      res.status(204).send();\n      return event;\n    }\n\n    // Handle revocation\n    if (messageType === \"revocation\") {\n      logger.info(\"Twitch EventSub subscription revoked\", {\n        subscription: req.body.subscription,\n      });\n      res.status(204).send();\n      return null;\n    }\n\n    logger.warn(\"Unknown Twitch EventSub message type\", { messageType });\n    res.status(400).send(\"Bad Request\");\n    return null;\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy(): void {\n    if (this.messageIdCleanupInterval) {\n      clearInterval(this.messageIdCleanupInterval);\n      this.messageIdCleanupInterval = null;\n    }\n  }\n}\n\n// Export singleton instance\nexport const twitchAPI = new TwitchAPIService();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/user.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserUpdateData' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuthenticationError' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * User Service Layer\n *\n * This module provides business logic for user operations using the repository pattern,\n * demonstrating Copilot best practices for service layer architecture.\n */\n\nimport {\n  UserRepository,\n  UserSearchOptions,\n  UserUpdateData,\n  UserWithCommunities,\n} from \"../repositories/user.repository\";\nimport { type User } from \"@shared/schema\";\nimport { logger } from \"../logger\";\nimport {\n  ValidationError,\n  AuthenticationError,\n  ConflictError,\n} from \"../middleware/error-handling.middleware\";\nimport { PaginatedResult } from \"../repositories/base.repository\";\nimport { generateEmailVerificationJWT } from \"../auth/tokens\";\nimport { sendEmailVerificationEmail } from \"../email-service\";\n\nexport interface CreateUserData {\n  name: string;\n  email: string;\n  password?: string;\n  provider?: \"google\" | \"email\";\n  providerId?: string;\n  image?: string;\n  bio?: string;\n  location?: string;\n  primaryCommunityId?: string;\n}\n\nexport interface UserProfileUpdate {\n  name?: string;\n  bio?: string;\n  location?: string;\n  website?: string;\n  twitterHandle?: string;\n  twitchHandle?: string;\n  youtubeHandle?: string;\n  discordHandle?: string;\n}\n\n/**\n * User Service Class\n * Handles business logic for user operations\n */\nexport class UserService {\n  private userRepository: UserRepository;\n\n  constructor() {\n    this.userRepository = new UserRepository();\n  }\n\n  /**\n   * Create new user account\n   */\n  async createUser(data: CreateUserData): Promise<User> {\n    try {\n      // Validate email format\n      if (!this.isValidEmail(data.email)) {\n        throw new ValidationError(\"Invalid email format\");\n      }\n\n      // Check if email already exists\n      const existingUser = await this.userRepository.findByEmail(data.email);\n      if (existingUser) {\n        throw new ConflictError(\"Email already in use\");\n      }\n\n      // Create user - only include fields that exist in the users table\n      const userData = {\n        email: data.email.toLowerCase(),\n        firstName: data.name, // Map 'name' to 'firstName'\n        status: \"offline\" as const, // Use valid user status enum value\n        isEmailVerified: data.provider === \"google\", // Auto-verify for OAuth\n        mfaEnabled: false,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        ...(data.password && { passwordHash: data.password }), // Only include if password exists\n        ...(data.image && { profileImageUrl: data.image }),\n        ...(data.bio && { bio: data.bio }),\n        ...(data.location && { location: data.location }),\n      };\n\n      const user = await this.userRepository.create(userData);\n\n      // Join primary community if specified\n      if (data.primaryCommunityId) {\n        await this.userRepository.joinCommunity(\n          user.id,\n          data.primaryCommunityId,\n          true,\n        );\n      }\n\n      // Send email verification if needed\n      if (!user.isEmailVerified) {\n        await this.sendEmailVerification(user.id);\n      }\n\n      logger.info(\"User created successfully\", {\n        userId: user.id,\n        email: user.email,\n        provider: data.provider,\n      });\n\n      return user;\n    } catch (error) {\n      logger.error(\"Failed to create user\", error, { email: data.email });\n      throw error;\n    }\n  }\n\n  /**\n   * Get user by ID with communities\n   */\n  async getUserById(userId: string): Promise<UserWithCommunities | null> {\n    try {\n      return await this.userRepository.findByIdWithCommunities(userId);\n    } catch (error) {\n      logger.error(\"Failed to get user by ID\", error, { userId });\n      throw error;\n    }\n  }\n\n  /**\n   * Get user by email\n   */\n  async getUserByEmail(email: string): Promise<User | null> {\n    try {\n      if (!email || !this.isValidEmail(email)) {\n        return null;\n      }\n\n      return await this.userRepository.findByEmail(email);\n    } catch (error) {\n      logger.error(\"Failed to get user by email\", error, { email });\n      throw error;\n    }\n  }\n\n  /**\n   * Search users with filtering and pagination\n   */\n  async searchUsers(\n    options: UserSearchOptions,\n  ): Promise<PaginatedResult<User>> {\n    try {\n      // Validate search parameters\n      if (options.pagination?.limit && options.pagination.limit > 100) {\n        throw new ValidationError(\"Maximum page size is 100\");\n      }\n\n      return await this.userRepository.searchUsers(options);\n    } catch (error) {\n      logger.error(\"Failed to search users\", error, { options });\n      throw error;\n    }\n  }\n\n  /**\n   * Update user profile\n   */\n  async updateProfile(userId: string, data: UserProfileUpdate): Promise<User> {\n    try {\n      // Validate handles format\n      if (\n        data.twitterHandle &&\n        !this.isValidTwitterHandle(data.twitterHandle)\n      ) {\n        throw new ValidationError(\"Invalid Twitter handle format\");\n      }\n\n      if (data.website && !this.isValidUrl(data.website)) {\n        throw new ValidationError(\"Invalid website URL format\");\n      }\n\n      // Sanitize social media handles\n      const sanitizedData = {\n        ...data,\n        twitterHandle: data.twitterHandle\n          ? this.sanitizeHandle(data.twitterHandle)\n          : undefined,\n        twitchHandle: data.twitchHandle\n          ? this.sanitizeHandle(data.twitchHandle)\n          : undefined,\n        youtubeHandle: data.youtubeHandle\n          ? this.sanitizeHandle(data.youtubeHandle)\n          : undefined,\n        discordHandle: data.discordHandle\n          ? this.sanitizeDiscordHandle(data.discordHandle)\n          : undefined,\n      };\n\n      const updatedUser = await this.userRepository.updateProfile(\n        userId,\n        sanitizedData,\n      );\n\n      logger.info(\"User profile updated\", { userId });\n      return updatedUser;\n    } catch (error) {\n      logger.error(\"Failed to update user profile\", error, { userId });\n      throw error;\n    }\n  }\n\n  /**\n   * Change user email\n   */\n  async changeEmail(userId: string, newEmail: string): Promise<User> {\n    try {\n      // Validate email format\n      if (!this.isValidEmail(newEmail)) {\n        throw new ValidationError(\"Invalid email format\");\n      }\n\n      // Check if new email is different from current\n      const currentUser = await this.userRepository.findById(userId);\n      if (!currentUser) {\n        throw new ValidationError(\"User not found\");\n      }\n\n      if (currentUser.email === newEmail.toLowerCase()) {\n        throw new ValidationError(\n          \"New email must be different from current email\",\n        );\n      }\n\n      // Update email (this will reset email verification)\n      const updatedUser = await this.userRepository.updateProfile(userId, {\n        email: newEmail.toLowerCase(),\n      });\n\n      // Send verification email for new address\n      await this.sendEmailVerification(userId);\n\n      logger.info(\"User email changed\", { userId, newEmail });\n      return updatedUser;\n    } catch (error) {\n      logger.error(\"Failed to change user email\", error, { userId, newEmail });\n      throw error;\n    }\n  }\n\n  /**\n   * Join a community\n   */\n  async joinCommunity(\n    userId: string,\n    communityId: string,\n    setAsPrimary: boolean = false,\n  ): Promise<void> {\n    try {\n      await this.userRepository.joinCommunity(\n        userId,\n        communityId,\n        setAsPrimary,\n      );\n      logger.info(\"User joined community\", {\n        userId,\n        communityId,\n        setAsPrimary,\n      });\n    } catch (error) {\n      logger.error(\"Failed to join community\", error, { userId, communityId });\n      throw error;\n    }\n  }\n\n  /**\n   * Leave a community\n   */\n  async leaveCommunity(userId: string, communityId: string): Promise<void> {\n    try {\n      await this.userRepository.leaveCommunity(userId, communityId);\n      logger.info(\"User left community\", { userId, communityId });\n    } catch (error) {\n      logger.error(\"Failed to leave community\", error, { userId, communityId });\n      throw error;\n    }\n  }\n\n  /**\n   * Set primary community\n   */\n  async setPrimaryCommunity(\n    userId: string,\n    communityId: string,\n  ): Promise<void> {\n    try {\n      await this.userRepository.setPrimaryCommunity(userId, communityId);\n      logger.info(\"User primary community set\", { userId, communityId });\n    } catch (error) {\n      logger.error(\"Failed to set primary community\", error, {\n        userId,\n        communityId,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get user statistics\n   */\n  async getUserStats(userId: string) {\n    try {\n      return await this.userRepository.getUserStats(userId);\n    } catch (error) {\n      logger.error(\"Failed to get user stats\", error, { userId });\n      throw error;\n    }\n  }\n\n  /**\n   * Deactivate user account\n   */\n  async deactivateAccount(userId: string): Promise<void> {\n    try {\n      await this.userRepository.updateProfile(userId, {\n        status: \"offline\", // Use valid user status enum value\n        updatedAt: new Date(),\n      });\n\n      logger.info(\"User account deactivated\", { userId });\n    } catch (error) {\n      logger.error(\"Failed to deactivate user account\", error, { userId });\n      throw error;\n    }\n  }\n\n  /**\n   * Delete user account (soft delete)\n   */\n  async deleteAccount(userId: string): Promise<void> {\n    try {\n      await this.userRepository.softDeleteUser(userId);\n      logger.info(\"User account deleted\", { userId });\n    } catch (error) {\n      logger.error(\"Failed to delete user account\", error, { userId });\n      throw error;\n    }\n  }\n\n  /**\n   * Send email verification\n   */\n  async sendEmailVerification(userId: string): Promise<void> {\n    try {\n      const user = await this.userRepository.findById(userId);\n      if (!user) {\n        throw new ValidationError(\"User not found\");\n      }\n\n      if (!user.email) {\n        throw new ValidationError(\"User has no email address\");\n      }\n\n      if (user.isEmailVerified) {\n        throw new ValidationError(\"Email already verified\");\n      }\n\n      // Generate verification token\n      const token = await generateEmailVerificationJWT(user.id, user.email);\n\n      // Send verification email\n      await sendEmailVerificationEmail(\n        user.email,\n        user.firstName || \"User\",\n        token,\n      );\n\n      logger.info(\"Email verification sent\", { userId, email: user.email });\n    } catch (error) {\n      logger.error(\"Failed to send email verification\", error, { userId });\n      throw error;\n    }\n  }\n\n  /**\n   * Verify email with token\n   */\n  async verifyEmail(token: string): Promise<User> {\n    try {\n      // This would need to be implemented with JWT verification\n      // For now, throwing not implemented error\n      throw new Error(\"Email verification not yet implemented\");\n    } catch (error) {\n      logger.error(\"Failed to verify email\", error, { token });\n      throw error;\n    }\n  }\n\n  // Private helper methods\n\n  private isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  private isValidTwitterHandle(handle: string): boolean {\n    const twitterRegex = /^@?[A-Za-z0-9_]{1,15}$/;\n    return twitterRegex.test(handle);\n  }\n\n  private isValidUrl(url: string): boolean {\n    try {\n      new URL(url);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  private sanitizeHandle(handle: string): string {\n    return handle.replace(/^@/, \"\").trim();\n  }\n\n  private sanitizeDiscordHandle(handle: string): string {\n    // Discord handles can include # for discriminator\n    return handle.trim();\n  }\n}\n\n// Export singleton instance\nexport const userService = new UserService();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/waitlist.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":202,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":202,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6094,6097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6094,6097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":202,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":202,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6108,6111],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6108,6111],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { storage } from \"../storage\";\nimport { logger } from \"../logger\";\nimport { enhancedNotificationService } from \"./enhanced-notifications\";\n\nexport class WaitlistService {\n  /**\n   * Join event with automatic waitlist assignment\n   */\n  async joinEventWithWaitlist(\n    eventId: string,\n    userId: string,\n    requestedPlayerType: \"main\" | \"alternate\" = \"main\",\n  ) {\n    try {\n      const event = await storage.getEvent(eventId);\n      if (!event) {\n        throw new Error(\"Event not found\");\n      }\n\n      // Get current attendees\n      const attendees = await storage.getEventAttendees(eventId);\n      const mainPlayers = attendees.filter(\n        (a) => a.playerType === \"main\" && a.status === \"attending\",\n      ).length;\n      const alternates = attendees.filter(\n        (a) => a.playerType === \"alternate\" && a.status === \"attending\",\n      ).length;\n\n      const playerSlots = event.playerSlots || 4;\n      const alternateSlots = event.alternateSlots || 2;\n\n      let assignedPlayerType: \"main\" | \"alternate\" = \"main\";\n      let waitlistPosition = 0;\n\n      // Determine placement\n      if (requestedPlayerType === \"main\") {\n        if (mainPlayers < playerSlots) {\n          assignedPlayerType = \"main\";\n        } else if (alternates < alternateSlots) {\n          assignedPlayerType = \"alternate\";\n          // Calculate waitlist position (alternates serve as waitlist)\n          waitlistPosition = alternates + 1;\n        } else {\n          // Pod is completely full\n          throw new Error(\n            \"Event is full. Please try again later or contact the organizer.\",\n          );\n        }\n      } else {\n        if (alternates < alternateSlots) {\n          assignedPlayerType = \"alternate\";\n          waitlistPosition = alternates + 1;\n        } else {\n          throw new Error(\"Alternate slots are full\");\n        }\n      }\n\n      // Join the event\n      const attendee = await storage.joinEvent({\n        eventId,\n        userId,\n        status: \"attending\",\n        role: \"participant\",\n        playerType: assignedPlayerType,\n      });\n\n      // Log waitlist position if applicable\n      if (assignedPlayerType === \"alternate\") {\n        logger.info(\"User added to waitlist\", {\n          eventId,\n          userId,\n          position: waitlistPosition,\n        });\n      }\n\n      return {\n        attendee,\n        playerType: assignedPlayerType,\n        waitlistPosition:\n          assignedPlayerType === \"alternate\" ? waitlistPosition : 0,\n        isWaitlisted: assignedPlayerType === \"alternate\",\n      };\n    } catch (error) {\n      logger.error(\"Failed to join event with waitlist\", error, {\n        eventId,\n        userId,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Promote from waitlist when a slot opens\n   */\n  async promoteFromWaitlist(eventId: string) {\n    try {\n      const event = await storage.getEvent(eventId);\n      if (!event) return;\n\n      const attendees = await storage.getEventAttendees(eventId);\n      const mainPlayers = attendees.filter(\n        (a) => a.playerType === \"main\" && a.status === \"attending\",\n      );\n      const alternates = attendees\n        .filter((a) => a.playerType === \"alternate\" && a.status === \"attending\")\n        .sort((a, b) => {\n          const aTime = a.joinedAt ? new Date(a.joinedAt).getTime() : 0;\n          const bTime = b.joinedAt ? new Date(b.joinedAt).getTime() : 0;\n          return aTime - bTime;\n        }); // Sort by join time\n\n      const playerSlots = event.playerSlots || 4;\n\n      // Check if there are open main slots\n      if (mainPlayers.length < playerSlots && alternates.length > 0) {\n        // Promote the first alternate (earliest joined)\n        const toPromote = alternates[0];\n\n        if (!toPromote) return null;\n\n        // Update their player type\n        await storage.updateEventAttendee(toPromote.id, {\n          playerType: \"main\",\n        });\n\n        // Send promotion notification\n        await enhancedNotificationService.sendWaitlistPromotedNotification(\n          eventId,\n          toPromote.userId,\n        );\n\n        logger.info(\"Promoted from waitlist\", {\n          eventId,\n          userId: toPromote.userId,\n          attendeeId: toPromote.id,\n        });\n\n        return toPromote;\n      }\n\n      return null;\n    } catch (error) {\n      logger.error(\"Failed to promote from waitlist\", error, { eventId });\n      throw error;\n    }\n  }\n\n  /**\n   * Get waitlist position for a user\n   */\n  async getWaitlistPosition(eventId: string, userId: string): Promise<number> {\n    try {\n      const attendees = await storage.getEventAttendees(eventId);\n      const alternates = attendees\n        .filter((a) => a.playerType === \"alternate\" && a.status === \"attending\")\n        .sort((a, b) => {\n          const aTime = a.joinedAt ? new Date(a.joinedAt).getTime() : 0;\n          const bTime = b.joinedAt ? new Date(b.joinedAt).getTime() : 0;\n          return aTime - bTime;\n        });\n\n      const position = alternates.findIndex((a) => a.userId === userId);\n      return position >= 0 ? position + 1 : 0;\n    } catch (error) {\n      logger.error(\"Failed to get waitlist position\", error, {\n        eventId,\n        userId,\n      });\n      return 0;\n    }\n  }\n\n  /**\n   * Get all waitlisted users for an event\n   */\n  async getWaitlist(eventId: string) {\n    try {\n      const attendees = await storage.getEventAttendees(eventId);\n      const waitlist = attendees\n        .filter((a) => a.playerType === \"alternate\" && a.status === \"attending\")\n        .sort((a, b) => {\n          const aTime = a.joinedAt ? new Date(a.joinedAt).getTime() : 0;\n          const bTime = b.joinedAt ? new Date(b.joinedAt).getTime() : 0;\n          return aTime - bTime;\n        })\n        .map((a, index) => ({\n          ...a,\n          position: index + 1,\n        }));\n\n      return waitlist;\n    } catch (error) {\n      logger.error(\"Failed to get waitlist\", error, { eventId });\n      return [];\n    }\n  }\n}\n\n// Helper method for storage (needs to be added to storage.ts)\ndeclare module \"../storage\" {\n  interface DatabaseStorage {\n    updateEventAttendee(id: string, data: any): Promise<any>;\n  }\n}\n\nexport const waitlistService = new WaitlistService();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/services/youtube-api.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[504,507],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[504,507],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3154,3157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3154,3157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4509,4512],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4509,4512],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4993,4996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4993,4996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":241,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6556,6559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6556,6559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":254,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6925,6928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6925,6928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":261,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":261,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7102,7105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7102,7105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":274,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":274,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7407,7410],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7407,7410],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":314,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":314,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8738,8741],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8738,8741],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":324,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":324,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9060,9063],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9060,9063],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":331,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":331,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9237,9240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9237,9240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":344,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9542,9545],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9542,9545],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":395,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":395,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11101,11104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11101,11104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":445,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":445,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12415,12418],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12415,12418],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":459,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":459,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12899,12902],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12899,12902],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'leaseSeconds' is defined but never used. Allowed unused args must match /^_/u.","line":895,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":895,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1196,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1196,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[33381,33384],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[33381,33384],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// YouTube API Service\n// Production-ready implementation of YouTube Data API v3 and YouTube Live Streaming API integration\n// Includes OAuth 2.0, live broadcasting, webhook support with security and error handling\n\nimport { logger } from \"../logger\";\nimport { generateSecureToken } from \"../utils/security.utils\";\nimport { createHmac, timingSafeEqual } from \"crypto\";\n\n// Structured error types for better error handling\nexport interface YouTubeAPIError {\n  code: string;\n  message: string;\n  details?: any;\n}\n\nexport interface YouTubeChannel {\n  id: string;\n  title: string;\n  description: string;\n  thumbnails: {\n    default: { url: string };\n    medium: { url: string };\n    high: { url: string };\n  };\n  subscriberCount: number;\n  videoCount: number;\n  viewCount: number;\n}\n\nexport interface YouTubeStream {\n  id: string;\n  title: string;\n  description: string;\n  status: \"live\" | \"upcoming\" | \"completed\";\n  scheduledStartTime?: string;\n  actualStartTime?: string;\n  actualEndTime?: string;\n  concurrentViewers?: number;\n  thumbnails: {\n    default: { url: string };\n    medium: { url: string };\n    high: { url: string };\n  };\n}\n\nexport interface YouTubeVideo {\n  id: string;\n  title: string;\n  description: string;\n  publishedAt: string;\n  thumbnails: {\n    default: { url: string };\n    medium: { url: string };\n    high: { url: string };\n  };\n  duration: string;\n  viewCount: number;\n  likeCount: number;\n  commentCount: number;\n}\n\n// Result wrapper type for better error handling\nexport type YouTubeAPIResult<T> =\n  | {\n      success: true;\n      data: T;\n    }\n  | {\n      success: false;\n      error: YouTubeAPIError;\n    };\n\n/**\n * YouTube API Service (Stub Implementation)\n *\n * To implement full functionality, you will need:\n * 1. YouTube Data API v3 credentials\n * 2. YouTube Live Streaming API access\n * 3. OAuth 2.0 setup for user authentication\n * 4. Webhook/Push notifications setup\n */\nexport class YouTubeAPIService {\n  private apiKey: string | undefined;\n  private clientId: string | undefined;\n  private clientSecret: string | undefined;\n  private webhookVerifyToken: string;\n\n  constructor() {\n    this.apiKey = process.env.YOUTUBE_API_KEY;\n    this.clientId = process.env.YOUTUBE_CLIENT_ID;\n    this.clientSecret = process.env.YOUTUBE_CLIENT_SECRET;\n    this.webhookVerifyToken =\n      process.env.YOUTUBE_WEBHOOK_VERIFY_TOKEN || generateSecureToken();\n  }\n\n  /**\n   * Check if YouTube API is properly configured\n   */\n  isConfigured(): boolean {\n    return !!(this.apiKey && this.clientId && this.clientSecret);\n  }\n\n  /**\n   * Check if API key is available for read-only operations\n   */\n  isReadOnlyConfigured(): boolean {\n    return !!this.apiKey;\n  }\n\n  /**\n   * Get channel information by username or channel ID\n   */\n  async getChannel(channelId: string): Promise<YouTubeChannel | null> {\n    if (!channelId?.trim()) {\n      console.warn(\"Channel ID is required\");\n      return null;\n    }\n\n    if (!this.isReadOnlyConfigured()) {\n      console.warn(\n        \"YouTube API not configured. Please set YOUTUBE_API_KEY environment variable.\",\n      );\n      return null;\n    }\n\n    const result = await this.makeAPIRequest<any>(\n      `/channels?part=snippet,statistics&id=${encodeURIComponent(channelId)}`,\n    );\n\n    if (!result.success) {\n      console.error(\"Error fetching YouTube channel:\", result.error);\n      return null;\n    }\n\n    const channel = result.data.items?.[0];\n    if (!channel) {\n      return null;\n    }\n\n    return {\n      id: channel.id,\n      title: channel.snippet.title,\n      description: channel.snippet.description,\n      thumbnails: {\n        default: { url: channel.snippet.thumbnails?.default?.url || \"\" },\n        medium: { url: channel.snippet.thumbnails?.medium?.url || \"\" },\n        high: { url: channel.snippet.thumbnails?.high?.url || \"\" },\n      },\n      subscriberCount: parseInt(channel.statistics.subscriberCount || \"0\"),\n      videoCount: parseInt(channel.statistics.videoCount || \"0\"),\n      viewCount: parseInt(channel.statistics.viewCount || \"0\"),\n    };\n  }\n\n  /**\n   * Get live stream information with production error handling\n   */\n  async getLiveStream(channelId: string): Promise<YouTubeStream | null> {\n    if (!channelId?.trim()) {\n      console.error(\"Channel ID is required\");\n      return null;\n    }\n\n    if (!this.isReadOnlyConfigured()) {\n      console.warn(\"YouTube API not configured\");\n      return null;\n    }\n\n    // First get live broadcasts for the channel\n    const searchResult = await this.makeAPIRequest<any>(\n      `/search?part=snippet&channelId=${encodeURIComponent(channelId)}&type=video&eventType=live&maxResults=1`,\n    );\n\n    if (!searchResult.success) {\n      console.error(\n        \"Error searching for YouTube live streams:\",\n        searchResult.error,\n      );\n      return null;\n    }\n\n    const liveVideo = searchResult.data.items?.[0];\n    if (!liveVideo) {\n      return null;\n    }\n\n    // Get detailed video information\n    const videoResult = await this.makeAPIRequest<any>(\n      `/videos?part=snippet,liveStreamingDetails,statistics&id=${liveVideo.id.videoId}`,\n    );\n\n    if (!videoResult.success) {\n      console.error(\"Error fetching YouTube video details:\", videoResult.error);\n      return null;\n    }\n\n    const video = videoResult.data.items?.[0];\n    if (!video) {\n      return null;\n    }\n\n    return {\n      id: video.id,\n      title: video.snippet.title,\n      description: video.snippet.description,\n      status: \"live\",\n      scheduledStartTime: video.liveStreamingDetails?.scheduledStartTime,\n      actualStartTime: video.liveStreamingDetails?.actualStartTime,\n      concurrentViewers: parseInt(\n        video.liveStreamingDetails?.concurrentViewers || \"0\",\n      ),\n      thumbnails: {\n        default: { url: video.snippet.thumbnails?.default?.url || \"\" },\n        medium: { url: video.snippet.thumbnails?.medium?.url || \"\" },\n        high: { url: video.snippet.thumbnails?.high?.url || \"\" },\n      },\n    };\n  }\n\n  /**\n   * Get channel's recent videos with production error handling\n   */\n  async getChannelVideos(\n    channelId: string,\n    maxResults: number = 10,\n  ): Promise<YouTubeVideo[]> {\n    if (!channelId?.trim()) {\n      console.error(\"Channel ID is required\");\n      return [];\n    }\n\n    if (!this.isReadOnlyConfigured()) {\n      console.warn(\"YouTube API not configured\");\n      return [];\n    }\n\n    // Validate and clamp maxResults\n    const validMaxResults = Math.min(Math.max(1, maxResults), 50);\n\n    // Get recent videos from the channel\n    const searchResult = await this.makeAPIRequest<any>(\n      `/search?part=snippet&channelId=${encodeURIComponent(channelId)}&type=video&order=date&maxResults=${validMaxResults}`,\n    );\n\n    if (!searchResult.success) {\n      console.error(\n        \"Error searching YouTube channel videos:\",\n        searchResult.error,\n      );\n      return [];\n    }\n\n    const videoIds = searchResult.data.items\n      ?.map((item: any) => item.id.videoId)\n      .join(\",\");\n    if (!videoIds) {\n      return [];\n    }\n\n    // Get detailed video information\n    const videosResult = await this.makeAPIRequest<any>(\n      `/videos?part=snippet,statistics,contentDetails&id=${videoIds}`,\n    );\n\n    if (!videosResult.success) {\n      console.error(\n        \"Error fetching YouTube video details:\",\n        videosResult.error,\n      );\n      return [];\n    }\n\n    return (\n      videosResult.data.items?.map((video: any) => ({\n        id: video.id,\n        title: video.snippet.title,\n        description: video.snippet.description,\n        publishedAt: video.snippet.publishedAt,\n        thumbnails: {\n          default: { url: video.snippet.thumbnails?.default?.url || \"\" },\n          medium: { url: video.snippet.thumbnails?.medium?.url || \"\" },\n          high: { url: video.snippet.thumbnails?.high?.url || \"\" },\n        },\n        duration: video.contentDetails.duration,\n        viewCount: parseInt(video.statistics.viewCount || \"0\"),\n        likeCount: parseInt(video.statistics.likeCount || \"0\"),\n        commentCount: parseInt(video.statistics.commentCount || \"0\"),\n      })) || []\n    );\n  }\n\n  /**\n   * Search for videos by query with production validation\n   */\n  async searchVideos(\n    query: string,\n    maxResults: number = 10,\n  ): Promise<YouTubeVideo[]> {\n    if (!query?.trim()) {\n      console.error(\"Search query is required\");\n      return [];\n    }\n\n    if (!this.isReadOnlyConfigured()) {\n      console.warn(\"YouTube API not configured\");\n      return [];\n    }\n\n    // Validate and clamp parameters\n    const validMaxResults = Math.min(Math.max(1, maxResults), 50);\n    const sanitizedQuery = query.trim().slice(0, 1000); // Limit query length\n\n    // Search for videos\n    const searchResult = await this.makeAPIRequest<any>(\n      `/search?part=snippet&type=video&q=${encodeURIComponent(sanitizedQuery)}&maxResults=${validMaxResults}`,\n    );\n\n    if (!searchResult.success) {\n      console.error(\"Error searching YouTube videos:\", searchResult.error);\n      return [];\n    }\n\n    const videoIds = searchResult.data.items\n      ?.map((item: any) => item.id.videoId)\n      .join(\",\");\n    if (!videoIds) {\n      return [];\n    }\n\n    // Get detailed video information\n    const videosResult = await this.makeAPIRequest<any>(\n      `/videos?part=snippet,statistics,contentDetails&id=${videoIds}`,\n    );\n\n    if (!videosResult.success) {\n      console.error(\n        \"Error fetching YouTube video details:\",\n        videosResult.error,\n      );\n      return [];\n    }\n\n    return (\n      videosResult.data.items?.map((video: any) => ({\n        id: video.id,\n        title: video.snippet.title,\n        description: video.snippet.description,\n        publishedAt: video.snippet.publishedAt,\n        thumbnails: {\n          default: { url: video.snippet.thumbnails?.default?.url || \"\" },\n          medium: { url: video.snippet.thumbnails?.medium?.url || \"\" },\n          high: { url: video.snippet.thumbnails?.high?.url || \"\" },\n        },\n        duration: video.contentDetails.duration,\n        viewCount: parseInt(video.statistics.viewCount || \"0\"),\n        likeCount: parseInt(video.statistics.likeCount || \"0\"),\n        commentCount: parseInt(video.statistics.commentCount || \"0\"),\n      })) || []\n    );\n  }\n\n  /**\n   * Create a live broadcast with production validation\n   */\n  async createLiveBroadcast(\n    title: string,\n    description: string,\n    scheduledStartTime: Date,\n    accessToken: string,\n    refreshToken?: string,\n  ): Promise<YouTubeStream | null> {\n    // Input validation\n    if (!title?.trim() || !accessToken?.trim()) {\n      console.error(\"Title and access token are required\");\n      return null;\n    }\n\n    if (!this.isConfigured()) {\n      console.warn(\"YouTube API not configured\");\n      return null;\n    }\n\n    const broadcastData = {\n      snippet: {\n        title: title.trim(),\n        description: description?.trim() || \"\",\n        scheduledStartTime: scheduledStartTime.toISOString(),\n      },\n      status: {\n        privacyStatus: \"public\",\n        selfDeclaredMadeForKids: false,\n      },\n    };\n\n    const result = await this.makeAPIRequest<any>(\n      \"/liveBroadcasts?part=snippet,status\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(broadcastData),\n      },\n      accessToken,\n      refreshToken,\n    );\n\n    if (!result.success) {\n      console.error(\"Error creating YouTube live broadcast:\", result.error);\n      return null;\n    }\n\n    const data = result.data;\n\n    return {\n      id: data.id,\n      title: data.snippet.title,\n      description: data.snippet.description,\n      status: \"upcoming\",\n      scheduledStartTime: data.snippet.scheduledStartTime,\n      thumbnails: {\n        default: { url: data.snippet.thumbnails?.default?.url || \"\" },\n        medium: { url: data.snippet.thumbnails?.medium?.url || \"\" },\n        high: { url: data.snippet.thumbnails?.high?.url || \"\" },\n      },\n    };\n  }\n\n  /**\n   * Update live broadcast with centralized API handling\n   */\n  async updateLiveBroadcast(\n    broadcastId: string,\n    updates: Partial<YouTubeStream>,\n    accessToken: string,\n    refreshToken?: string,\n  ): Promise<YouTubeStream | null> {\n    if (!broadcastId?.trim() || !accessToken?.trim()) {\n      console.error(\"Broadcast ID and access token are required\");\n      return null;\n    }\n\n    if (!this.isConfigured()) {\n      console.warn(\"YouTube API not configured\");\n      return null;\n    }\n\n    const updateData: any = {\n      id: broadcastId,\n    };\n\n    if (updates.title || updates.description || updates.scheduledStartTime) {\n      updateData.snippet = {};\n      if (updates.title) updateData.snippet.title = updates.title;\n      if (updates.description)\n        updateData.snippet.description = updates.description;\n      if (updates.scheduledStartTime) {\n        updateData.snippet.scheduledStartTime = updates.scheduledStartTime;\n      }\n    }\n\n    const result = await this.makeAPIRequest<any>(\n      \"/liveBroadcasts?part=snippet,status\",\n      {\n        method: \"PUT\",\n        body: JSON.stringify(updateData),\n      },\n      accessToken,\n      refreshToken,\n    );\n\n    if (!result.success) {\n      console.error(\"Error updating YouTube live broadcast:\", result.error);\n      return null;\n    }\n\n    const data = result.data;\n\n    return {\n      id: data.id,\n      title: data.snippet.title,\n      description: data.snippet.description,\n      status:\n        data.status.lifeCycleStatus === \"live\"\n          ? \"live\"\n          : data.status.lifeCycleStatus === \"complete\"\n            ? \"completed\"\n            : \"upcoming\",\n      scheduledStartTime: data.snippet.scheduledStartTime,\n      actualStartTime: data.snippet.actualStartTime,\n      actualEndTime: data.snippet.actualEndTime,\n      thumbnails: {\n        default: { url: data.snippet.thumbnails?.default?.url || \"\" },\n        medium: { url: data.snippet.thumbnails?.medium?.url || \"\" },\n        high: { url: data.snippet.thumbnails?.high?.url || \"\" },\n      },\n    };\n  }\n\n  /**\n   * Create live stream for broadcast\n   */\n  async createLiveStream(\n    title: string,\n    accessToken: string,\n    resolution: \"240p\" | \"360p\" | \"480p\" | \"720p\" | \"1080p\" = \"720p\",\n  ): Promise<{\n    id: string;\n    streamName: string;\n    ingestionAddress: string;\n  } | null> {\n    if (!this.isConfigured()) {\n      console.warn(\"YouTube API not configured\");\n      return null;\n    }\n\n    try {\n      const streamData = {\n        snippet: {\n          title,\n        },\n        cdn: {\n          resolution,\n          frameRate: \"30fps\",\n          ingestionType: \"rtmp\",\n        },\n      };\n\n      const response = await fetch(\n        \"https://www.googleapis.com/youtube/v3/liveStreams?part=snippet,cdn\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${accessToken}`,\n          },\n          body: JSON.stringify(streamData),\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          `YouTube Live Stream API request failed: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data = await response.json();\n\n      if (data.error) {\n        throw new Error(`YouTube Live Stream API error: ${data.error.message}`);\n      }\n\n      return {\n        id: data.id,\n        streamName: data.cdn.ingestionInfo.streamName,\n        ingestionAddress: data.cdn.ingestionInfo.ingestionAddress,\n      };\n    } catch (error) {\n      console.error(\"Error creating YouTube live stream:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Bind broadcast to stream\n   */\n  async bindBroadcastToStream(\n    broadcastId: string,\n    streamId: string,\n    accessToken: string,\n  ): Promise<boolean> {\n    if (!this.isConfigured()) {\n      console.warn(\"YouTube API not configured\");\n      return false;\n    }\n\n    try {\n      const response = await fetch(\n        `https://www.googleapis.com/youtube/v3/liveBroadcasts/bind?id=${broadcastId}&streamId=${streamId}&part=snippet,status`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          `YouTube Live Bind API request failed: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data = await response.json();\n\n      if (data.error) {\n        throw new Error(`YouTube Live Bind API error: ${data.error.message}`);\n      }\n\n      // Validate that binding was successful by checking for expected response structure\n      return response.ok && data.id && data.snippet;\n    } catch (error) {\n      console.error(\"Error binding YouTube broadcast to stream:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Transition broadcast state (testing -> live -> complete)\n   */\n  async transitionBroadcast(\n    broadcastId: string,\n    broadcastStatus: \"testing\" | \"live\" | \"complete\",\n    accessToken: string,\n  ): Promise<boolean> {\n    if (!this.isConfigured()) {\n      console.warn(\"YouTube API not configured\");\n      return false;\n    }\n\n    try {\n      const response = await fetch(\n        `https://www.googleapis.com/youtube/v3/liveBroadcasts/transition?broadcastStatus=${broadcastStatus}&id=${broadcastId}&part=snippet,status`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          `YouTube Live Transition API request failed: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data = await response.json();\n\n      if (data.error) {\n        throw new Error(\n          `YouTube Live Transition API error: ${data.error.message}`,\n        );\n      }\n\n      // Validate transition was successful by checking status matches expected state\n      return response.ok && data.id && data.status?.lifeCycleStatus;\n    } catch (error) {\n      console.error(\"Error transitioning YouTube broadcast:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Get OAuth authorization URL for YouTube\n   */\n  getAuthorizationUrl(\n    scopes: string[] = [\n      \"https://www.googleapis.com/auth/youtube.readonly\",\n      \"https://www.googleapis.com/auth/youtube\",\n      \"https://www.googleapis.com/auth/youtube.force-ssl\",\n    ],\n    state?: string,\n  ): string {\n    if (!this.clientId) {\n      throw new Error(\"YouTube Client ID not configured\");\n    }\n\n    const baseUrl = \"https://accounts.google.com/o/oauth2/v2/auth\";\n    const params = new URLSearchParams({\n      client_id: this.clientId,\n      redirect_uri:\n        process.env.YOUTUBE_REDIRECT_URI ||\n        \"http://localhost:5000/auth/youtube/callback\",\n      scope: scopes.join(\" \"),\n      response_type: \"code\",\n      access_type: \"offline\",\n      prompt: \"consent\",\n      ...(state && { state }),\n    });\n\n    return `${baseUrl}?${params.toString()}`;\n  }\n\n  /**\n   * Exchange authorization code for access tokens\n   */\n  async exchangeCodeForTokens(\n    code: string,\n    redirectUri?: string,\n    codeVerifier?: string,\n  ): Promise<{\n    access_token: string;\n    refresh_token?: string;\n    expires_in: number;\n    token_type: string;\n  } | null> {\n    if (!this.isConfigured()) {\n      console.warn(\"YouTube API not configured\");\n      return null;\n    }\n\n    try {\n      if (!this.clientId || !this.clientSecret) {\n        throw new Error(\"YouTube client credentials not configured\");\n      }\n      \n      const tokenParams: Record<string, string> = {\n        client_id: this.clientId,\n        client_secret: this.clientSecret,\n        redirect_uri:\n          redirectUri ||\n          process.env.YOUTUBE_REDIRECT_URI ||\n          \"http://localhost:5000/auth/youtube/callback\",\n        grant_type: \"authorization_code\",\n        code,\n      };\n\n      // Add PKCE code verifier if provided\n      if (codeVerifier) {\n        tokenParams.code_verifier = codeVerifier;\n      }\n\n      const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        body: new URLSearchParams(tokenParams),\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `OAuth token exchange failed: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data = await response.json();\n\n      if (data.error) {\n        throw new Error(`OAuth error: ${data.error_description || data.error}`);\n      }\n\n      return {\n        access_token: data.access_token,\n        refresh_token: data.refresh_token,\n        expires_in: data.expires_in || 3600,\n        token_type: data.token_type || \"Bearer\",\n      };\n    } catch (error) {\n      console.error(\"Error exchanging YouTube OAuth code:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Refresh access token using refresh token\n   */\n  async refreshAccessToken(refreshToken: string): Promise<{\n    access_token: string;\n    expires_in: number;\n    token_type: string;\n  } | null> {\n    if (!this.isConfigured()) {\n      console.warn(\"YouTube API not configured\");\n      return null;\n    }\n\n    try {\n      const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        body: new URLSearchParams({\n          client_id: this.clientId || \"\",\n          client_secret: this.clientSecret || \"\",\n          refresh_token: refreshToken,\n          grant_type: \"refresh_token\",\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Token refresh failed: ${response.status} ${response.statusText}`,\n        );\n      }\n\n      const data = await response.json();\n\n      if (data.error) {\n        throw new Error(\n          `Token refresh error: ${data.error_description || data.error}`,\n        );\n      }\n\n      return {\n        access_token: data.access_token,\n        expires_in: data.expires_in || 3600,\n        token_type: data.token_type || \"Bearer\",\n      };\n    } catch (error) {\n      console.error(\"Error refreshing YouTube access token:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Subscribe to channel push notifications using PubSubHubbub with security\n   */\n  async subscribeToChannelNotifications(\n    channelId: string,\n    callbackUrl: string,\n  ): Promise<boolean> {\n    if (!channelId?.trim() || !callbackUrl?.trim()) {\n      console.error(\"Channel ID and callback URL are required\");\n      return false;\n    }\n\n    try {\n      const hubUrl = \"https://pubsubhubbub.appspot.com/subscribe\";\n      const topicUrl = `https://www.youtube.com/xml/feeds/videos.xml?channel_id=${channelId}`;\n\n      const response = await fetch(hubUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        body: new URLSearchParams({\n          \"hub.callback\": callbackUrl,\n          \"hub.topic\": topicUrl,\n          \"hub.mode\": \"subscribe\",\n          \"hub.verify\": \"async\",\n          \"hub.verify_token\": this.webhookVerifyToken,\n          \"hub.secret\": this.webhookVerifyToken, // Add proper secret for HMAC\n          \"hub.lease_seconds\": \"864000\", // 10 days\n        }),\n      });\n\n      return response.status === 202; // Accepted for verification\n    } catch (error) {\n      console.error(\n        \"Error subscribing to YouTube channel notifications:\",\n        error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Unsubscribe from channel push notifications with security\n   */\n  async unsubscribeFromChannelNotifications(\n    channelId: string,\n    callbackUrl: string,\n  ): Promise<boolean> {\n    if (!channelId?.trim() || !callbackUrl?.trim()) {\n      console.error(\"Channel ID and callback URL are required\");\n      return false;\n    }\n\n    try {\n      const hubUrl = \"https://pubsubhubbub.appspot.com/subscribe\";\n      const topicUrl = `https://www.youtube.com/xml/feeds/videos.xml?channel_id=${channelId}`;\n\n      const response = await fetch(hubUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        body: new URLSearchParams({\n          \"hub.callback\": callbackUrl,\n          \"hub.topic\": topicUrl,\n          \"hub.mode\": \"unsubscribe\",\n          \"hub.verify\": \"async\",\n          \"hub.verify_token\": this.webhookVerifyToken,\n        }),\n      });\n\n      return response.status === 202;\n    } catch (error) {\n      console.error(\n        \"Error unsubscribing from YouTube channel notifications:\",\n        error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Verify webhook callback for push notifications with security validation\n   */\n  verifyWebhookCallback(\n    mode: \"subscribe\" | \"unsubscribe\",\n    topic: string,\n    challenge: string,\n    verifyToken: string,\n    leaseSeconds?: string,\n  ): string | null {\n    // Validate required parameters\n    if (!mode || !topic || !challenge || !verifyToken) {\n      console.warn(\"Missing required webhook verification parameters\");\n      return null;\n    }\n\n    // Validate verify token for security\n    if (verifyToken !== this.webhookVerifyToken) {\n      console.warn(\"Invalid webhook verify token\");\n      return null;\n    }\n\n    // Validate topic URL format\n    if (\n      !topic.startsWith(\n        \"https://www.youtube.com/xml/feeds/videos.xml?channel_id=\",\n      )\n    ) {\n      console.warn(\"Invalid topic URL format\");\n      return null;\n    }\n\n    // Validate mode\n    if (mode === \"subscribe\" || mode === \"unsubscribe\") {\n      // Return the challenge to confirm the subscription\n      return challenge;\n    }\n\n    console.warn(\"Invalid webhook mode:\", mode);\n    return null;\n  }\n\n  /**\n   * Verify webhook signature for security (YouTube uses HMAC-SHA1 with X-Hub-Signature)\n   */\n  verifyWebhookSignature(\n    signature: string,\n    body: string,\n    secret: string,\n  ): boolean {\n    if (!signature || !body || !secret) {\n      return false;\n    }\n\n    try {\n      // Calculate HMAC signature for webhook verification\n      const expectedSignature =\n        \"sha1=\" + createHmac(\"sha1\", secret).update(body).digest(\"hex\");\n\n      // Ensure equal buffer lengths for timingSafeEqual\n      const signatureBuffer = Buffer.from(signature);\n      const expectedBuffer = Buffer.from(expectedSignature);\n\n      if (signatureBuffer.length !== expectedBuffer.length) {\n        return false;\n      }\n\n      return timingSafeEqual(signatureBuffer, expectedBuffer);\n    } catch (error) {\n      console.error(\"Error verifying YouTube webhook signature:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Parse YouTube PubSubHubbub notification with security validation\n   */\n  parseWebhookNotification(\n    xmlContent: string,\n    signature?: string,\n  ): {\n    channelId: string;\n    videoId: string;\n    title: string;\n    publishedAt: string;\n  } | null {\n    if (!xmlContent?.trim()) {\n      console.error(\"Empty XML content provided\");\n      return null;\n    }\n\n    // Verify signature if provided\n    if (\n      signature &&\n      !this.verifyWebhookSignature(\n        signature,\n        xmlContent,\n        this.webhookVerifyToken,\n      )\n    ) {\n      console.error(\"Invalid webhook signature\");\n      return null;\n    }\n\n    // Validate content size (prevent abuse)\n    if (xmlContent.length > 50000) {\n      // 50KB limit\n      console.error(\"XML content too large\");\n      return null;\n    }\n\n    try {\n      // Enhanced XML parsing with better validation\n      const channelIdMatch = xmlContent.match(\n        /<yt:channelId>([a-zA-Z0-9_-]{1,100})<\\/yt:channelId>/,\n      );\n      const videoIdMatch = xmlContent.match(\n        /<yt:videoId>([a-zA-Z0-9_-]{11})<\\/yt:videoId>/,\n      );\n      const titleMatch = xmlContent.match(\n        /<title><!\\[CDATA\\[(.*?)\\]\\]><\\/title>|<title>([^<]*)<\\/title>/,\n      );\n      const publishedMatch = xmlContent.match(\n        /<published>(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{3})?Z?)<\\/published>/,\n      );\n\n      if (channelIdMatch?.[1] && videoIdMatch?.[1] && publishedMatch?.[1]) {\n        return {\n          channelId: channelIdMatch[1],\n          videoId: videoIdMatch[1],\n          title: titleMatch?.[1] || titleMatch?.[2] || \"\",\n          publishedAt: publishedMatch[1],\n        };\n      }\n\n      console.warn(\n        \"Unable to parse YouTube webhook notification - missing required fields\",\n      );\n      return null;\n    } catch (error) {\n      console.error(\"Error parsing YouTube webhook notification:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Make YouTube API request with retry logic and error handling\n   */\n  private async makeAPIRequest<T>(\n    endpoint: string,\n    options: RequestInit = {},\n    accessToken?: string,\n    refreshToken?: string,\n    retries: number = 3,\n  ): Promise<YouTubeAPIResult<T>> {\n    // Validate input parameters\n    if (!endpoint) {\n      return {\n        success: false,\n        error: { code: \"INVALID_INPUT\", message: \"Endpoint is required\" },\n      };\n    }\n\n    for (let attempt = 1; attempt <= retries; attempt++) {\n      try {\n        const headers: Record<string, string> = {\n          \"Content-Type\": \"application/json\",\n          ...(options.headers as Record<string, string>),\n        };\n\n        // Construct final URL properly\n        let finalUrl: string;\n        if (accessToken) {\n          headers[\"Authorization\"] = `Bearer ${accessToken}`;\n          finalUrl = `https://www.googleapis.com/youtube/v3${endpoint}`;\n        } else if (this.apiKey) {\n          // Add API key for public endpoints\n          const url = new URL(\n            endpoint,\n            \"https://www.googleapis.com/youtube/v3\",\n          );\n          url.searchParams.set(\"key\", this.apiKey);\n          finalUrl = url.toString();\n        } else {\n          return {\n            success: false,\n            error: {\n              code: \"NO_AUTH\",\n              message: \"No authentication method available\",\n            },\n          };\n        }\n\n        const response = await fetch(finalUrl, {\n          ...options,\n          headers,\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          if (data.error) {\n            return {\n              success: false,\n              error: {\n                code: data.error.code || \"API_ERROR\",\n                message: data.error.message || \"Unknown API error\",\n                details: data.error,\n              },\n            };\n          }\n          return { success: true, data };\n        }\n\n        // Handle rate limiting (HTTP 429) and server errors (5xx) with exponential backoff\n        if (\n          (response.status === 429 || response.status >= 500) &&\n          attempt < retries\n        ) {\n          const retryAfter = response.headers.get(\"Retry-After\");\n          const delay = retryAfter\n            ? parseInt(retryAfter) * 1000\n            : Math.pow(2, attempt) * 1000;\n\n          logger.warn(\n            `YouTube API ${response.status === 429 ? \"rate limited\" : \"server error\"}, retrying after ${delay}ms`,\n            {\n              status: response.status,\n              attempt,\n              delay,\n            },\n          );\n          await new Promise((resolve) => setTimeout(resolve, delay));\n          continue;\n        }\n\n        // Handle token refresh for 401 errors\n        if (response.status === 401 && refreshToken && attempt < retries) {\n          logger.info(\"Attempting to refresh YouTube access token\", {\n            attempt,\n          });\n          const refreshResult = await this.refreshAccessToken(refreshToken);\n          if (refreshResult) {\n            // Retry with new token\n            accessToken = refreshResult.access_token;\n            continue;\n          }\n        }\n\n        const errorText = await response.text();\n        return {\n          success: false,\n          error: {\n            code: `HTTP_${response.status}`,\n            message: `YouTube API request failed: ${response.status} ${response.statusText}`,\n            details: { status: response.status, body: errorText },\n          },\n        };\n      } catch (error) {\n        if (attempt === retries) {\n          return {\n            success: false,\n            error: {\n              code: \"REQUEST_FAILED\",\n              message:\n                error instanceof Error\n                  ? error.message\n                  : \"Unknown request error\",\n              details: error,\n            },\n          };\n        }\n\n        // Exponential backoff for other errors\n        const delay = Math.pow(2, attempt) * 1000;\n        logger.warn(`YouTube API request failed, retrying after ${delay}ms`, {\n          attempt,\n          delay,\n          error: error instanceof Error ? error.message : \"Unknown error\",\n        });\n        await new Promise((resolve) => setTimeout(resolve, delay));\n      }\n    }\n\n    return {\n      success: false,\n      error: {\n        code: \"MAX_RETRIES_EXCEEDED\",\n        message: \"Maximum retry attempts exceeded\",\n      },\n    };\n  }\n\n  /**\n   * Get authenticated user's channel information\n   */\n  async getMyChannel(\n    accessToken: string,\n    refreshToken?: string,\n  ): Promise<YouTubeChannel | null> {\n    if (!accessToken?.trim()) {\n      console.error(\"Access token is required\");\n      return null;\n    }\n\n    if (!this.isConfigured()) {\n      console.warn(\"YouTube API not configured\");\n      return null;\n    }\n\n    const result = await this.makeAPIRequest<any>(\n      \"/channels?part=snippet,statistics&mine=true\",\n      {},\n      accessToken,\n      refreshToken,\n    );\n\n    if (!result.success) {\n      console.error(\n        \"Error fetching authenticated YouTube channel:\",\n        result.error,\n      );\n      return null;\n    }\n\n    const channel = result.data.items?.[0];\n    if (!channel) {\n      return null;\n    }\n\n    return {\n      id: channel.id,\n      title: channel.snippet.title,\n      description: channel.snippet.description,\n      thumbnails: {\n        default: { url: channel.snippet.thumbnails?.default?.url || \"\" },\n        medium: { url: channel.snippet.thumbnails?.medium?.url || \"\" },\n        high: { url: channel.snippet.thumbnails?.high?.url || \"\" },\n      },\n      subscriberCount: parseInt(channel.statistics.subscriberCount || \"0\"),\n      videoCount: parseInt(channel.statistics.videoCount || \"0\"),\n      viewCount: parseInt(channel.statistics.viewCount || \"0\"),\n    };\n  }\n\n  /**\n   * Get webhook verify token for secure webhook setup\n   */\n  getWebhookVerifyToken(): string {\n    return this.webhookVerifyToken;\n  }\n}\n\n// Export singleton instance\nexport const youtubeAPI = new YouTubeAPIService();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/shared/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/shared/middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[167,170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[167,170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":7}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Request, Response, NextFunction } from \"express\";\nimport { logger } from \"../logger\";\n\n// Common middleware functions\n\nexport const errorHandler = (\n  error: any,\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) => {\n  logger.error(\"Unhandled error in request\", error, {\n    method: req.method,\n    url: req.url,\n    userAgent: req.get(\"User-Agent\"),\n    ip: req.ip,\n  });\n\n  // Don't leak internal error details in production\n  const isDevelopment = process.env.NODE_ENV === \"development\";\n\n  res.status(500).json({\n    message: \"Internal server error\",\n    ...(isDevelopment && { error: error.message, stack: error.stack }),\n  });\n};\n\nexport const requestLogger = (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) => {\n  const start = Date.now();\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    logger.info(`${req.method} ${req.url}`, {\n      statusCode: res.statusCode,\n      duration: `${duration}ms`,\n      userAgent: req.get(\"User-Agent\"),\n      ip: req.ip,\n    });\n  });\n\n  next();\n};\n\nexport const corsHandler = (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): void => {\n  res.header(\"Access-Control-Allow-Origin\", process.env.FRONTEND_URL || \"*\");\n  res.header(\n    \"Access-Control-Allow-Methods\",\n    \"GET, POST, PUT, DELETE, PATCH, OPTIONS\",\n  );\n  res.header(\n    \"Access-Control-Allow-Headers\",\n    \"Origin, X-Requested-With, Content-Type, Accept, Authorization\",\n  );\n  res.header(\"Access-Control-Allow-Credentials\", \"true\");\n\n  if (req.method === \"OPTIONS\") {\n    res.sendStatus(200);\n    return;\n  }\n\n  next();\n};\n\nexport const securityHeaders = (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) => {\n  res.header(\"X-Content-Type-Options\", \"nosniff\");\n  res.header(\"X-Frame-Options\", \"DENY\");\n  res.header(\"X-XSS-Protection\", \"1; mode=block\");\n  res.header(\"Referrer-Policy\", \"strict-origin-when-cross-origin\");\n\n  next();\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/shared/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[414,417],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[414,417],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[455,458],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[455,458],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Request } from \"express\";\n\n// Common types used across features\n\nexport interface AuthenticatedRequest extends Request {\n  user: {\n    id: string;\n    email?: string | null;\n    name?: string | null;\n    image?: string | null;\n  };\n  auth?: {\n    user?: {\n      id: string;\n      email?: string | null;\n      name?: string | null;\n      image?: string | null;\n    };\n    expires: string;\n  };\n  session?: any;\n}\n\nexport interface ApiResponse<T = any> {\n  data?: T;\n  message?: string;\n  success: boolean;\n  errors?: string[];\n}\n\nexport interface PaginationParams {\n  page?: number;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface SortParams {\n  sortBy?: string;\n  sortOrder?: \"asc\" | \"desc\";\n}\n\nexport interface FilterParams {\n  search?: string;\n  status?: string;\n  type?: string;\n  dateFrom?: string;\n  dateTo?: string;\n}\n\nexport interface BaseListQuery\n  extends PaginationParams,\n    SortParams,\n    FilterParams {}\n\n// Error types\nexport class AppError extends Error {\n  public statusCode: number;\n  public isOperational: boolean;\n\n  constructor(\n    message: string,\n    statusCode: number = 500,\n    isOperational: boolean = true,\n  ) {\n    super(message);\n    this.statusCode = statusCode;\n    this.isOperational = isOperational;\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\nexport class ValidationError extends AppError {\n  constructor(message: string) {\n    super(message, 400);\n  }\n}\n\nexport class NotFoundError extends AppError {\n  constructor(message: string = \"Resource not found\") {\n    super(message, 404);\n  }\n}\n\nexport class UnauthorizedError extends AppError {\n  constructor(message: string = \"Unauthorized\") {\n    super(message, 401);\n  }\n}\n\nexport class ForbiddenError extends AppError {\n  constructor(message: string = \"Forbidden\") {\n    super(message, 403);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/shared/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[219,222],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[219,222],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":47,"suggestions":[{"messageId":"suggestPropertyKey","fix":{"range":[2635,2644],"text":"PropertyKey"},"desc":"Use `PropertyKey` instead, this is more explicit than `keyof any`."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4711,4714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4711,4714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'paramName' is defined but never used. Allowed unused args must match /^_/u.","line":211,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":211,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from \"../logger\";\nimport { Request, Response, NextFunction } from \"express\";\n\n// Common utility functions\n\nexport const asyncHandler = (fn: (req: Request, res: Response, next: NextFunction) => Promise<any>) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n  };\n};\n\nexport const sanitizeInput = (input: string): string => {\n  if (!input || typeof input !== \"string\") return \"\";\n\n  return input\n    .trim()\n    .replace(/[<>]/g, \"\") // Remove potential XSS characters\n    .substring(0, 1000); // Limit length\n};\n\nexport const validateEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\nexport const generateId = (): string => {\n  return Math.random().toString(36).substring(2) + Date.now().toString(36);\n};\n\nexport const parseBoolean = (\n  value: string | undefined,\n): boolean | undefined => {\n  if (!value) return undefined;\n  return value.toLowerCase() === \"true\";\n};\n\nexport const parseInteger = (\n  value: string | undefined,\n  defaultValue?: number,\n): number | undefined => {\n  if (!value) return defaultValue;\n  const parsed = parseInt(value, 10);\n  return isNaN(parsed) ? defaultValue : parsed;\n};\n\nexport const formatDate = (date: Date): string => {\n  return date.toISOString().split(\"T\")[0] || \"\";\n};\n\nexport const formatDateTime = (date: Date): string => {\n  return date.toISOString();\n};\n\nexport const isValidDate = (dateString: string): boolean => {\n  const date = new Date(dateString);\n  return date instanceof Date && !isNaN(date.getTime());\n};\n\nexport const delay = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n\nexport const retryOperation = async <T>(\n  operation: () => Promise<T>,\n  maxRetries: number = 3,\n  delayMs: number = 1000,\n): Promise<T> => {\n  let lastError: Error | undefined;\n\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      return await operation();\n    } catch (error) {\n      lastError = error as Error;\n      logger.warn(`Operation failed, attempt ${attempt}/${maxRetries}`, {\n        error: lastError.message,\n      });\n\n      if (attempt < maxRetries) {\n        await delay(delayMs * attempt); // Exponential backoff\n      }\n    }\n  }\n\n  throw lastError || new Error(\"Operation failed after all retries\");\n};\n\nexport const chunk = <T>(array: T[], size: number): T[][] => {\n  const chunks: T[][] = [];\n  for (let i = 0; i < array.length; i += size) {\n    chunks.push(array.slice(i, i + size));\n  }\n  return chunks;\n};\n\nexport const groupBy = <T, K extends keyof any>(\n  array: T[],\n  getKey: (item: T) => K,\n): Record<K, T[]> => {\n  return array.reduce(\n    (groups, item) => {\n      const key = getKey(item);\n      if (!groups[key]) {\n        groups[key] = [];\n      }\n      groups[key].push(item);\n      return groups;\n    },\n    {} as Record<K, T[]>,\n  );\n};\n\nexport const omit = <T extends object, K extends keyof T>(\n  obj: T,\n  keys: K[],\n): Omit<T, K> => {\n  const result = { ...obj };\n  keys.forEach((key) => delete result[key]);\n  return result;\n};\n\nexport const pick = <T extends object, K extends keyof T>(\n  obj: T,\n  keys: K[],\n): Pick<T, K> => {\n  const result = {} as Pick<T, K>;\n  keys.forEach((key) => {\n    if (key in obj) {\n      result[key] = obj[key];\n    }\n  });\n  return result;\n};\n\n// Type guard utilities for null/undefined checking\nexport const isNotNull = <T>(value: T | null): value is T => {\n  return value !== null;\n};\n\nexport const isNotUndefined = <T>(value: T | undefined): value is T => {\n  return value !== undefined;\n};\n\nexport const isNotNullOrUndefined = <T>(\n  value: T | null | undefined,\n): value is T => {\n  return value !== null && value !== undefined;\n};\n\nexport const assertNotNull = <T>(value: T | null, message?: string): T => {\n  if (value === null) {\n    throw new Error(message || \"Value is null\");\n  }\n  return value;\n};\n\nexport const assertNotUndefined = <T>(\n  value: T | undefined,\n  message?: string,\n): T => {\n  if (value === undefined) {\n    throw new Error(message || \"Value is undefined\");\n  }\n  return value;\n};\n\nexport const assertNotNullOrUndefined = <T>(\n  value: T | null | undefined,\n  message?: string,\n): T => {\n  if (value === null || value === undefined) {\n    throw new Error(message || \"Value is null or undefined\");\n  }\n  return value;\n};\n\nexport const withDefault = <T>(\n  value: T | null | undefined,\n  defaultValue: T,\n): T => {\n  return value ?? defaultValue;\n};\n\nexport const safeGet = <T extends object, K extends keyof T>(\n  obj: T | null | undefined,\n  key: K,\n): T[K] | undefined => {\n  return obj?.[key];\n};\n\nexport const safeCall = <T, Args extends any[]>(\n  fn: ((...args: Args) => T) | null | undefined,\n  ...args: Args\n): T | undefined => {\n  return fn?.(...args);\n};\n\n// Route parameter validation utilities for Express\nexport const assertRouteParam = (\n  param: string | undefined,\n  paramName: string,\n): string => {\n  if (!param) {\n    throw new Error(`Required route parameter '${paramName}' is missing`);\n  }\n  return param;\n};\n\nexport const validateRouteParam = (\n  param: string | undefined,\n  paramName: string,\n): param is string => {\n  return param !== undefined && param.length > 0;\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/startup-optimization.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[778,781],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[778,781],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2491,2494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2491,2494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2520,2523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2520,2523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from \"./logger\";\n\n/**\n * Startup optimization utilities for faster Cloud Run deployments\n */\n\n// Track startup timing\nconst startupTimers = new Map<string, number>();\n\nexport function startTimer(name: string): void {\n  startupTimers.set(name, Date.now());\n}\n\nexport function endTimer(name: string): number {\n  const start = startupTimers.get(name);\n  if (!start) {\n    logger.warn(`Timer '${name}' was not started`);\n    return 0;\n  }\n\n  const duration = Date.now() - start;\n  startupTimers.delete(name);\n\n  logger.info(`Startup timing: ${name}`, { duration: `${duration}ms` });\n  return duration;\n}\n\n/**\n * Initialize essential services in parallel where possible\n */\nexport async function initializeServicesParallel<\n  T extends Record<string, () => Promise<any>>,\n>(services: T): Promise<{ [K in keyof T]: Awaited<ReturnType<T[K]>> }> {\n  startTimer(\"parallel-initialization\");\n\n  const serviceNames = Object.keys(services);\n  logger.info(`Initializing ${serviceNames.length} services in parallel`, {\n    services: serviceNames,\n  });\n\n  try {\n    const results = await Promise.all(\n      Object.entries(services).map(async ([name, initFn]) => {\n        startTimer(`service-${name}`);\n        try {\n          const result = await initFn();\n          endTimer(`service-${name}`);\n          return [name, result] as const;\n        } catch (error) {\n          endTimer(`service-${name}`);\n          logger.error(`Failed to initialize service: ${name}`, error);\n          throw error;\n        }\n      }),\n    );\n\n    const resultsObject = Object.fromEntries(results) as {\n      [K in keyof T]: Awaited<ReturnType<T[K]>>;\n    };\n\n    endTimer(\"parallel-initialization\");\n    logger.info(\"All services initialized successfully\");\n\n    return resultsObject;\n  } catch (error) {\n    endTimer(\"parallel-initialization\");\n    logger.error(\"Service initialization failed\", error);\n    throw error;\n  }\n}\n\n/**\n * Warm up critical application paths during startup\n */\nexport async function warmupCriticalPaths(): Promise<void> {\n  startTimer(\"warmup\");\n\n  try {\n    // Pre-compile common Zod schemas\n    // Pre-initialize commonly used modules\n    // This helps reduce cold start time for first requests\n\n    logger.info(\"Critical paths warmed up\");\n  } catch (error) {\n    logger.warn(\"Warmup failed, continuing startup\", error);\n  } finally {\n    endTimer(\"warmup\");\n  }\n}\n\n/**\n * Setup graceful shutdown handlers for Cloud Run\n */\nexport function setupGracefulShutdown(\n  server: any,\n  clients?: { drizzle?: any; closeDatabaseConnections?: () => Promise<void> },\n): void {\n  const gracefulShutdown = async (signal: string) => {\n    logger.info(`Received ${signal}, starting graceful shutdown`);\n\n    try {\n      // Stop accepting new connections\n      server.close(async () => {\n        logger.info(\"HTTP server closed\");\n\n        // Disconnect from database clients\n        if (clients?.closeDatabaseConnections) {\n          try {\n            await clients.closeDatabaseConnections();\n            logger.info(\"Database connections closed\");\n          } catch (error) {\n            logger.warn(\"Error closing database connections\", error);\n          }\n        }\n\n        if (clients?.drizzle?.$client) {\n          try {\n            await clients.drizzle.$client.end();\n            logger.info(\"Drizzle connection pool closed\");\n          } catch (error) {\n            logger.warn(\"Error closing Drizzle connection pool\", error);\n          }\n        }\n\n        logger.info(\"Graceful shutdown complete\");\n        process.exit(0);\n      });\n\n      // Force exit after grace period\n      setTimeout(() => {\n        logger.warn(\"Force shutdown after timeout\");\n        process.exit(1);\n      }, 10000); // 10 second grace period\n    } catch (error) {\n      logger.error(\"Error during graceful shutdown\", error);\n      process.exit(1);\n    }\n  };\n\n  process.on(\"SIGTERM\", () => gracefulShutdown(\"SIGTERM\"));\n  process.on(\"SIGINT\", () => gracefulShutdown(\"SIGINT\"));\n}\n\n/**\n * Log memory configuration (actual flags must be set at process start)\n */\nexport function logMemoryConfiguration(): void {\n  if (process.env.NODE_ENV === \"production\") {\n    logger.info(\"Memory configuration recommendations\", {\n      recommendation:\n        'Set NODE_OPTIONS=\"--max-old-space-size=512\" in Cloud Run environment variables',\n      currentFlags: process.execArgv,\n      heapUsed: Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + \"MB\",\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/static-server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/storage.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ForumPostLike' is defined but never used. Allowed unused vars must match /^_/u.","line":99,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ForumReplyLike' is defined but never used. Allowed unused vars must match /^_/u.","line":100,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InsertFriendship' is defined but never used. Allowed unused vars must match /^_/u.","line":121,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":121,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InsertTournamentParticipant' is defined but never used. Allowed unused vars must match /^_/u.","line":127,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InsertForumPostLike' is defined but never used. Allowed unused vars must match /^_/u.","line":134,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InsertForumReplyLike' is defined but never used. Allowed unused vars must match /^_/u.","line":135,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InsertUserMfaAttempts' is defined but never used. Allowed unused vars must match /^_/u.","line":182,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":182,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InsertRevokedJwtToken' is defined but never used. Allowed unused vars must match /^_/u.","line":193,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":193,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RevokedJwtToken' is defined but never used. Allowed unused vars must match /^_/u.","line":194,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":194,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExtendedEvent' is defined but never used. Allowed unused vars must match /^_/u.","line":216,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":216,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExtendedTournament' is defined but never used. Allowed unused vars must match /^_/u.","line":228,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":228,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1354,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1354,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39908,39911],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39908,39911],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1360,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1360,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[40075,40078],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[40075,40078],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1398,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1398,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[40974,40977],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[40974,40977],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1400,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1400,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41045,41048],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41045,41048],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1404,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1404,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41147,41150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41147,41150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1413,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1413,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41404,41407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41404,41407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1416,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1416,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41507,41510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41507,41510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1423,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1423,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41708,41711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41708,41711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sortBy' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1508,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":1508,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1964,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1964,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[58252,58255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[58252,58255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'endDate' is defined but never used. Allowed unused args must match /^_/u.","line":2408,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":2408,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2502,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2502,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[74968,74971],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[74968,74971],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'originalExpiry' is defined but never used. Allowed unused args must match /^_/u.","line":3598,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":3598,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ipAddress' is defined but never used. Allowed unused args must match /^_/u.","line":3599,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":3599,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userAgent' is defined but never used. Allowed unused args must match /^_/u.","line":3600,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":3600,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3967,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3967,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[116623,116626],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[116623,116626],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":4021,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":4021,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":4029,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":4029,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":4039,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":4039,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":4047,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":4047,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4173,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4173,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[122804,122807],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[122804,122807],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4207,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4207,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[123861,123864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[123861,123864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4328,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4328,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[127076,127079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[127076,127079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4607,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4607,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[136301,136304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[136301,136304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4651,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4651,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[137576,137579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[137576,137579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4826,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4826,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[142152,142155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[142152,142155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4931,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4931,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[145112,145115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[145112,145115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5016,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5016,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[147603,147606],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[147603,147606],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5112,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5112,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[150503,150506],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[150503,150506],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5165,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5165,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[152084,152087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[152084,152087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":5266,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":5266,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5315,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5315,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[155805,155808],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[155805,155808],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":5378,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":5378,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5406,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5406,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[158121,158124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[158121,158124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":5472,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":5472,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5510,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5510,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[161476,161479],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[161476,161479],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":5518,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":5518,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5529,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5529,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[162074,162077],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[162074,162077],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5565,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5565,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[163166,163169],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[163166,163169],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5643,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5643,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[165417,165420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[165417,165420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5662,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5662,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[166086,166089],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[166086,166089],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5736,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5736,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[168166,168169],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[168166,168169],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5737,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5737,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[168201,168204],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[168201,168204],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5999,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5999,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[175190,175193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[175190,175193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6027,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6027,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[176117,176120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[176117,176120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6028,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6028,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[176166,176169],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[176166,176169],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'responseMessage' is defined but never used. Allowed unused args must match /^_/u.","line":6061,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":6061,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6879,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6879,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[200237,200240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[200237,200240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6884,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6884,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[200360,200363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[200360,200363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6967,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6967,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[203017,203020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[203017,203020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6980,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6980,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[203499,203502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[203499,203502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7005,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7005,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[204202,204205],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[204202,204205],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7018,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7018,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[204698,204701],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[204698,204701],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7518,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7518,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[219511,219514],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[219511,219514],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7545,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7545,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[220410,220413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[220410,220413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7847,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7847,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[229096,229099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[229096,229099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7847,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7847,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[229107,229110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[229107,229110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7920,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7920,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[231270,231273],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[231270,231273],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7985,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7985,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[233284,233287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[233284,233287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8017,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8017,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[234183,234186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[234183,234186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8017,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8017,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[234194,234197],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[234194,234197],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'suspiciousActivity' is defined but never used. Allowed unused args must match /^_/u.","line":8320,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":8320,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8509,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8509,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[249540,249543],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[249540,249543],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":74,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  db,\n  withQueryTiming,\n  type Transaction,\n} from \"@shared/database-unified\";\nimport { logger } from \"./logger\";\nimport {\n  users,\n  communities,\n  userCommunities,\n  userPlatformAccounts,\n  themePreferences,\n  events,\n  eventAttendees,\n  notifications,\n  messages,\n  gameSessions,\n  passwordResetTokens,\n  emailVerificationTokens,\n  emailChangeRequests,\n  emailChangeTokens,\n  userSocialLinks,\n  userGamingProfiles,\n  friendships,\n  userActivities,\n  userSettings,\n  matchmakingPreferences,\n  tournaments,\n  tournamentParticipants,\n  tournamentFormats,\n  tournamentRounds,\n  tournamentMatches,\n  matchResults,\n  forumPosts,\n  forumReplies,\n  forumPostLikes,\n  forumReplyLikes,\n  streamSessions,\n  streamSessionCoHosts,\n  streamSessionPlatforms,\n  collaborationRequests,\n  streamAnalytics,\n  userActivityAnalytics,\n  communityAnalytics,\n  platformMetrics,\n  eventTracking,\n  conversionFunnels,\n  collaborativeStreamEvents,\n  streamCollaborators,\n  streamCoordinationSessions,\n  // Admin & Moderation tables\n  userRoles,\n  userReputation,\n  contentReports,\n  moderationActions,\n  moderationQueue,\n  cmsContent,\n  banEvasionTracking,\n  userAppeals,\n  moderationTemplates,\n  adminAuditLog,\n  userMfaSettings,\n  userMfaAttempts,\n  deviceFingerprints,\n  mfaSecurityContext,\n  trustedDevices,\n  refreshTokens,\n  authAuditLog,\n  revokedJwtTokens,\n  type User,\n  type UpsertUser,\n  type Community,\n  type UserCommunity,\n  type UserPlatformAccount,\n  type ThemePreference,\n  type Event,\n  type EventAttendee,\n  type Notification,\n  type Message,\n  type GameSession,\n  type PasswordResetToken,\n  type EmailChangeRequest,\n  type EmailChangeToken,\n  type EmailVerificationToken,\n  type UserSocialLink,\n  type UserGamingProfile,\n  type Friendship,\n  type UserActivity,\n  type UserSettings,\n  type MatchmakingPreferences,\n  type Tournament,\n  type TournamentParticipant,\n  type TournamentFormat,\n  type TournamentRound,\n  type TournamentMatch,\n  type MatchResult,\n  type ForumPost,\n  type ForumReply,\n  type ForumPostLike,\n  type ForumReplyLike,\n  type StreamSession,\n  type StreamSessionCoHost,\n  type StreamSessionPlatform,\n  type CollaborationRequest,\n  type StreamAnalytics,\n  type InsertCommunity,\n  type InsertUserCommunity,\n  type InsertUserPlatformAccount,\n  type InsertThemePreference,\n  type InsertEvent,\n  type InsertEventAttendee,\n  type InsertNotification,\n  type InsertMessage,\n  type InsertGameSession,\n  type InsertPasswordResetToken,\n  type InsertEmailVerificationToken,\n  type InsertEmailChangeRequest,\n  type InsertEmailChangeToken,\n  type InsertUserSocialLink,\n  type InsertUserGamingProfile,\n  type InsertFriendship,\n  type InsertUserActivity,\n  type InsertUserSettings,\n  type InsertMatchmakingPreferences,\n  type InsertTournament,\n  type UpdateTournament,\n  type InsertTournamentParticipant,\n  type InsertTournamentFormat,\n  type InsertTournamentRound,\n  type InsertTournamentMatch,\n  type InsertMatchResult,\n  type InsertForumPost,\n  type InsertForumReply,\n  type InsertForumPostLike,\n  type InsertForumReplyLike,\n  type InsertStreamSession,\n  type InsertStreamSessionCoHost,\n  type InsertStreamSessionPlatform,\n  type InsertCollaborationRequest,\n  type InsertStreamAnalytics,\n  type UserActivityAnalytics,\n  type CommunityAnalytics,\n  type CollaborativeStreamEvent,\n  type StreamCollaborator,\n  type StreamCoordinationSession,\n  type InsertCollaborativeStreamEvent,\n  type InsertStreamCollaborator,\n  type InsertStreamCoordinationSession,\n  type PlatformMetrics,\n  type EventTracking,\n  type ConversionFunnel,\n  type InsertUserActivityAnalytics,\n  type InsertCommunityAnalytics,\n  type InsertPlatformMetrics,\n  type InsertEventTracking,\n  type InsertConversionFunnel,\n  // Admin & Moderation types\n  type UserRole,\n  type UserReputation,\n  type ContentReport,\n  type ModerationAction,\n  type ModerationQueue,\n  type CmsContent,\n  type BanEvasionTracking,\n  type UserAppeal,\n  type ModerationTemplate,\n  type AdminAuditLog,\n  type InsertUserRole,\n  type InsertUserReputation,\n  type InsertContentReport,\n  type InsertModerationAction,\n  type InsertModerationQueue,\n  type InsertCmsContent,\n  type InsertBanEvasionTracking,\n  type InsertUserAppeal,\n  type InsertModerationTemplate,\n  type InsertAdminAuditLog,\n  SafeUserPlatformAccount,\n  type UserMfaSettings,\n  type InsertUserMfaSettings,\n  type UserMfaAttempts,\n  type InsertUserMfaAttempts,\n  type DeviceFingerprint,\n  type InsertDeviceFingerprint,\n  type MfaSecurityContext,\n  type InsertMfaSecurityContext,\n  type TrustedDevice,\n  type InsertTrustedDevice,\n  type RefreshToken,\n  type InsertRefreshToken,\n  type AuthAuditLog,\n  type InsertAuthAuditLog,\n  type InsertRevokedJwtToken,\n  type RevokedJwtToken,\n} from \"@shared/schema\";\nimport {\n  eq,\n  and,\n  gte,\n  lte,\n  count,\n  sql,\n  or,\n  desc,\n  not,\n  asc,\n  ilike,\n  isNotNull,\n  inArray,\n  lt,\n} from \"drizzle-orm\";\nimport { alias } from \"drizzle-orm/sqlite-core\";\n\n// Extended types for entities with properties not yet in schema\n// TODO: Add these columns to schema when implementing full functionality\ninterface ExtendedEvent extends Event {\n  date?: string;\n  time?: string;\n  gameFormat?: string;\n  powerLevel?: string;\n  isRecurring?: boolean;\n  recurrencePattern?: string;\n  recurrenceInterval?: number;\n  recurrenceEndDate?: Date;\n  isPublic?: boolean;\n}\n\ninterface ExtendedTournament extends Tournament {\n  gameFormat?: string;\n  rules?: Record<string, unknown>;\n}\n\n// Type for matchmaking results\nexport interface MatchedPlayer {\n  id: string;\n  username: string;\n  avatar: string | null;\n  games: (string | null)[];\n  formats: string[];\n  powerLevel: number;\n  playstyle: string | null;\n  location: string;\n  availability: Record<string, unknown>;\n  matchScore: number;\n  commonInterests: string[];\n  lastOnline: string;\n  isOnline: boolean;\n}\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations\n  // (IMPORTANT) these user operations are mandatory for authentication integration.\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: UpsertUser): Promise<User>;\n  getAllUsers(filters?: {\n    page?: number;\n    limit?: number;\n    search?: string;\n    role?: string;\n    status?: string;\n    sortBy?: string;\n    order?: \"asc\" | \"desc\";\n  }): Promise<{ users: User[]; total: number }>;\n  getCommunityActiveUsers(\n    communityId: string,\n    options?: {\n      limit?: number;\n      cursor?: string;\n      includeOffline?: boolean;\n      sortBy?: string;\n      sortDirection?: \"asc\" | \"desc\";\n    },\n  ): Promise<{ data: User[]; hasMore: boolean }>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUser(id: string, data: Partial<UpsertUser>): Promise<User>;\n\n  // Community operations\n  getCommunities(): Promise<Community[]>;\n  getCommunity(id: string): Promise<Community | undefined>;\n  createCommunity(community: InsertCommunity): Promise<Community>;\n\n  // User community operations\n  getUserCommunities(\n    userId: string,\n  ): Promise<(UserCommunity & { community: Community })[]>;\n  joinCommunity(data: InsertUserCommunity): Promise<UserCommunity>;\n  setPrimaryCommunity(userId: string, communityId: string): Promise<void>;\n\n  // Platform account operations for cross-platform streaming\n  getUserPlatformAccounts(userId: string): Promise<SafeUserPlatformAccount[]>;\n  getUserPlatformAccount(\n    userId: string,\n    platform: string,\n  ): Promise<SafeUserPlatformAccount | undefined>;\n  createUserPlatformAccount(\n    data: InsertUserPlatformAccount,\n  ): Promise<SafeUserPlatformAccount>;\n  updateUserPlatformAccount(\n    id: string,\n    data: {\n      handle?: string;\n      accessToken?: string;\n      refreshToken?: string;\n      tokenExpiresAt?: Date;\n      scopes?: unknown;\n      isActive?: boolean;\n      lastVerified?: Date;\n    },\n  ): Promise<SafeUserPlatformAccount>;\n  deleteUserPlatformAccount(id: string): Promise<void>;\n  getUserPlatformHandle(\n    userId: string,\n    platform: string,\n  ): Promise<string | null>;\n  getUserPlatformToken(\n    userId: string,\n    platform: string,\n  ): Promise<string | null>;\n\n  // Theme preference operations\n  getUserThemePreferences(userId: string): Promise<ThemePreference[]>;\n  upsertThemePreference(data: InsertThemePreference): Promise<ThemePreference>;\n\n  // Event operations\n  getEvents(filters?: {\n    userId?: string;\n    communityId?: string;\n    type?: string;\n    upcoming?: boolean;\n  }): Promise<\n    (Event & {\n      creator: User;\n      community: Community | null;\n      attendeeCount: number;\n      isUserAttending?: boolean;\n    })[]\n  >;\n  getEvent(\n    id: string,\n    userId?: string,\n  ): Promise<\n    | (Event & {\n        creator: User;\n        community: Community | null;\n        attendeeCount: number;\n        isUserAttending: boolean;\n      })\n    | undefined\n  >;\n  createEvent(data: InsertEvent): Promise<Event>;\n  updateEvent(id: string, data: Partial<InsertEvent>): Promise<Event>;\n  deleteEvent(id: string): Promise<void>;\n  // Bulk calendar operations for game pods\n  createBulkEvents(data: InsertEvent[]): Promise<Event[]>;\n  createRecurringEvents(data: InsertEvent, endDate: string): Promise<Event[]>;\n  getCalendarEvents(filters: {\n    communityId?: string;\n    startDate: string;\n    endDate: string;\n    type?: string;\n  }): Promise<\n    (Event & {\n      creator: User;\n      community: Community | null;\n      attendeeCount: number;\n      mainPlayers: number;\n      alternates: number;\n    })[]\n  >;\n\n  // Event attendee operations\n  joinEvent(data: InsertEventAttendee): Promise<EventAttendee>;\n  leaveEvent(eventId: string, userId: string): Promise<void>;\n  updateEventAttendee(\n    id: string,\n    data: Partial<{\n      playerType: string;\n      status: \"attending\" | \"maybe\" | \"not_attending\";\n      role: string;\n    }>,\n  ): Promise<EventAttendee>;\n  getEventAttendees(\n    eventId: string,\n  ): Promise<(EventAttendee & { user: User })[]>;\n  getUserEventAttendance(\n    userId: string,\n  ): Promise<(EventAttendee & { event: Event })[]>;\n\n  // Password reset operations\n  createPasswordResetToken(\n    data: InsertPasswordResetToken,\n  ): Promise<PasswordResetToken>;\n  getPasswordResetToken(token: string): Promise<PasswordResetToken | undefined>;\n  markTokenAsUsed(token: string): Promise<void>;\n  cleanupExpiredTokens(): Promise<void>;\n  invalidateUserPasswordResetTokens(userId: string): Promise<void>;\n\n  // Email verification operations\n  createEmailVerificationToken(\n    data: InsertEmailVerificationToken,\n  ): Promise<EmailVerificationToken>;\n  getEmailVerificationToken(\n    token: string,\n  ): Promise<EmailVerificationToken | undefined>;\n  markEmailVerificationTokenAsUsed(token: string): Promise<void>;\n  cleanupExpiredEmailVerificationTokens(): Promise<void>;\n  getEmailVerificationTokenByUserId(\n    userId: string,\n  ): Promise<EmailVerificationToken | undefined>;\n  invalidateUserEmailVerificationTokens(userId: string): Promise<void>;\n\n  // Email change operations\n  createEmailChangeRequest(\n    data: InsertEmailChangeRequest,\n  ): Promise<EmailChangeRequest>;\n  getEmailChangeRequest(id: string): Promise<EmailChangeRequest | undefined>;\n  getUserEmailChangeRequest(\n    userId: string,\n  ): Promise<EmailChangeRequest | undefined>;\n  updateEmailChangeRequest(\n    id: string,\n    data: Partial<InsertEmailChangeRequest>,\n  ): Promise<EmailChangeRequest>;\n  createEmailChangeToken(\n    data: InsertEmailChangeToken,\n  ): Promise<EmailChangeToken>;\n  getEmailChangeToken(token: string): Promise<EmailChangeToken | undefined>;\n  markEmailChangeTokenAsUsed(token: string): Promise<void>;\n  cleanupExpiredEmailChangeTokens(): Promise<void>;\n  cancelEmailChangeRequest(userId: string): Promise<void>;\n\n  // MFA operations\n  getUserMfaSettings(userId: string): Promise<UserMfaSettings | undefined>;\n  createUserMfaSettings(data: InsertUserMfaSettings): Promise<UserMfaSettings>;\n  updateUserMfaSettings(\n    userId: string,\n    data: Partial<InsertUserMfaSettings>,\n  ): Promise<void>;\n\n  /**\n   * Enable MFA for a user with TOTP secret and backup codes\n   * SECURITY: backupCodes must be ALREADY HASHED using Argon2id before calling this method\n   * The caller (routes layer) is responsible for hashing raw codes before storage\n   * This prevents plaintext backup codes from being stored in the database\n   */\n  enableUserMfa(\n    userId: string,\n    totpSecret: string,\n    backupCodes: string[],\n  ): Promise<void>;\n  disableUserMfa(userId: string): Promise<void>;\n  updateUserMfaLastVerified(userId: string): Promise<void>;\n  markBackupCodeAsUsed(userId: string, codeIndex: number): Promise<void>;\n\n  // MFA attempt tracking for throttling and lockout\n  getUserMfaAttempts(userId: string): Promise<UserMfaAttempts | undefined>;\n  recordMfaFailure(userId: string): Promise<void>;\n  resetMfaAttempts(userId: string): Promise<void>;\n  checkMfaLockout(\n    userId: string,\n  ): Promise<{\n    isLocked: boolean;\n    lockoutEndsAt?: Date;\n    failedAttempts: number;\n  }>;\n  cleanupExpiredMfaLockouts(): Promise<void>;\n\n  // Device fingerprinting for enhanced MFA security\n  getDeviceFingerprint(\n    fingerprintHash: string,\n  ): Promise<DeviceFingerprint | undefined>;\n  getUserDeviceFingerprints(userId: string): Promise<DeviceFingerprint[]>;\n  createDeviceFingerprint(\n    data: InsertDeviceFingerprint,\n  ): Promise<DeviceFingerprint>;\n  updateDeviceFingerprint(\n    id: string,\n    data: Partial<InsertDeviceFingerprint>,\n  ): Promise<void>;\n  deleteDeviceFingerprint(id: string): Promise<void>;\n  updateDeviceLastSeen(fingerprintHash: string): Promise<void>;\n\n  // MFA security context tracking\n  createMfaSecurityContext(\n    data: InsertMfaSecurityContext,\n  ): Promise<MfaSecurityContext>;\n  getMfaSecurityContext(\n    userId: string,\n    options?: { limit?: number; onlyFailures?: boolean },\n  ): Promise<MfaSecurityContext[]>;\n  updateMfaSecurityContext(\n    id: string,\n    data: Partial<InsertMfaSecurityContext>,\n  ): Promise<void>;\n\n  // Trusted device management\n  getUserTrustedDevices(\n    userId: string,\n  ): Promise<(TrustedDevice & { deviceFingerprint: DeviceFingerprint })[]>;\n  createTrustedDevice(data: InsertTrustedDevice): Promise<TrustedDevice>;\n  updateTrustedDevice(\n    id: string,\n    data: Partial<InsertTrustedDevice>,\n  ): Promise<void>;\n  revokeTrustedDevice(id: string, reason: string): Promise<void>;\n  cleanupExpiredTrustedDevices(): Promise<void>;\n\n  // Device security validation\n  calculateDeviceRiskScore(\n    userId: string,\n    context: {\n      userAgent: string;\n      ipAddress: string;\n      location?: string;\n      timezone?: string;\n    },\n  ): Promise<{ riskScore: number; riskFactors: string[] }>;\n  validateDeviceContext(\n    userId: string,\n    fingerprintHash: string,\n  ): Promise<{\n    isValid: boolean;\n    trustScore: number;\n    requiresAdditionalVerification: boolean;\n    deviceFingerprint?: DeviceFingerprint;\n  }>;\n\n  // Refresh token operations\n  createRefreshToken(data: InsertRefreshToken): Promise<RefreshToken>;\n  getRefreshToken(tokenId: string): Promise<RefreshToken | undefined>;\n  getRefreshTokenByJWT(jwt: string): Promise<RefreshToken | undefined>;\n  updateRefreshTokenLastUsed(tokenId: string): Promise<void>;\n  revokeRefreshToken(tokenId: string): Promise<void>;\n  revokeAllUserRefreshTokens(userId: string): Promise<void>;\n  cleanupExpiredRefreshTokens(): Promise<void>;\n  getUserActiveRefreshTokens(userId: string): Promise<RefreshToken[]>;\n\n  // Auth audit log operations\n  createAuthAuditLog(data: InsertAuthAuditLog): Promise<AuthAuditLog>;\n  getAuthAuditLogs(\n    userId?: string,\n    filters?: { eventType?: string; limit?: number; hours?: number },\n  ): Promise<AuthAuditLog[]>;\n  getRecentAuthFailures(userId: string, hours: number): Promise<AuthAuditLog[]>;\n\n  // JWT token revocation (enterprise security)\n  revokeJWT(\n    jti: string,\n    userId: string,\n    tokenType: string,\n    reason: string,\n    expiresAt: Date,\n    originalExpiry?: Date,\n    ipAddress?: string,\n    userAgent?: string,\n  ): Promise<void>;\n  isJWTRevoked(jti: string): Promise<boolean>;\n  cleanupExpiredRevokedTokens(): Promise<number>;\n\n  // Notification operations\n  getUserNotifications(\n    userId: string,\n    options?: { unreadOnly?: boolean; limit?: number },\n  ): Promise<Notification[]>;\n  createNotification(data: InsertNotification): Promise<Notification>;\n  markNotificationAsRead(notificationId: string): Promise<void>;\n  markAllNotificationsAsRead(userId: string): Promise<void>;\n  deleteNotification(notificationId: string): Promise<void>;\n\n  // Message operations\n  getUserMessages(\n    userId: string,\n    options?: { eventId?: string; communityId?: string; limit?: number },\n  ): Promise<(Message & { sender: User; recipient?: User; event?: Event })[]>;\n  sendMessage(data: InsertMessage): Promise<Message>;\n  markMessageAsRead(messageId: string): Promise<void>;\n  getConversation(\n    userId1: string,\n    userId2: string,\n  ): Promise<(Message & { sender: User; recipient?: User })[]>;\n\n  // Game session operations\n  getGameSessions(filters?: {\n    eventId?: string;\n    communityId?: string;\n    hostId?: string;\n    status?: string;\n  }): Promise<(GameSession & { host: User; coHost?: User; event: Event })[]>;\n  getGameSessionById(\n    id: string,\n  ): Promise<\n    (GameSession & { host: User; coHost?: User; event: Event }) | null\n  >;\n  createGameSession(data: InsertGameSession): Promise<GameSession>;\n  updateGameSession(\n    id: string,\n    data: Partial<InsertGameSession>,\n  ): Promise<GameSession>;\n  joinGameSession(sessionId: string, userId: string): Promise<void>;\n  leaveGameSession(sessionId: string, userId: string): Promise<void>;\n\n  // Social link operations\n  getUserSocialLinks(userId: string): Promise<UserSocialLink[]>;\n  updateUserSocialLinks(\n    userId: string,\n    links: InsertUserSocialLink[],\n  ): Promise<UserSocialLink[]>;\n\n  // Gaming profile operations\n  getUserGamingProfiles(\n    userId: string,\n  ): Promise<(UserGamingProfile & { community: Community })[]>;\n  upsertUserGamingProfile(\n    data: InsertUserGamingProfile,\n  ): Promise<UserGamingProfile>;\n\n  // Friendship operations\n  getFriends(\n    userId: string,\n  ): Promise<(Friendship & { requester: User; addressee: User })[]>;\n  getFriendRequests(\n    userId: string,\n  ): Promise<(Friendship & { requester: User; addressee: User })[]>;\n  getFriendCount(userId: string): Promise<number>;\n  sendFriendRequest(\n    requesterId: string,\n    addresseeId: string,\n  ): Promise<Friendship>;\n  respondToFriendRequest(\n    friendshipId: string,\n    status: \"accepted\" | \"declined\" | \"blocked\",\n  ): Promise<Friendship>;\n  checkFriendshipStatus(\n    userId1: string,\n    userId2: string,\n  ): Promise<Friendship | undefined>;\n\n  // User activity operations\n  getUserActivities(\n    userId: string,\n    options?: { limit?: number; communityId?: string },\n  ): Promise<(UserActivity & { community?: Community })[]>;\n  createUserActivity(data: InsertUserActivity): Promise<UserActivity>;\n\n  // User settings operations\n  getUserSettings(userId: string): Promise<UserSettings | undefined>;\n  upsertUserSettings(data: InsertUserSettings): Promise<UserSettings>;\n\n  // Matchmaking operations\n  getMatchmakingPreferences(\n    userId: string,\n  ): Promise<MatchmakingPreferences | undefined>;\n  upsertMatchmakingPreferences(\n    data: InsertMatchmakingPreferences,\n  ): Promise<MatchmakingPreferences>;\n  findMatchingPlayers(\n    userId: string,\n    preferences: MatchmakingPreferences,\n  ): Promise<{ data: MatchedPlayer[]; hasMore: boolean }>;\n\n  // Tournament operations\n  getTournaments(\n    communityId?: string,\n  ): Promise<\n    (Tournament & {\n      organizer: User;\n      community: Community;\n      participantCount: number;\n    })[]\n  >;\n  getTournament(\n    tournamentId: string,\n  ): Promise<\n    | (Tournament & {\n        organizer: User;\n        community: Community;\n        participants: (TournamentParticipant & { user: User })[];\n      })\n    | undefined\n  >;\n  createTournament(data: InsertTournament): Promise<Tournament>;\n  updateTournament(\n    tournamentId: string,\n    data: UpdateTournament,\n  ): Promise<Tournament>;\n  // Internal method for system status updates (bypasses business rules)\n  updateTournamentStatus(\n    tournamentId: string,\n    status: string,\n  ): Promise<Tournament>;\n  joinTournament(\n    tournamentId: string,\n    userId: string,\n  ): Promise<TournamentParticipant>;\n  leaveTournament(tournamentId: string, userId: string): Promise<boolean>;\n\n  // Advanced tournament operations\n  getTournamentFormats(): Promise<TournamentFormat[]>;\n  createTournamentFormat(\n    data: InsertTournamentFormat,\n  ): Promise<TournamentFormat>;\n  getTournamentRounds(tournamentId: string): Promise<TournamentRound[]>;\n  createTournamentRound(data: InsertTournamentRound): Promise<TournamentRound>;\n  updateTournamentRound(\n    roundId: string,\n    data: Partial<InsertTournamentRound>,\n  ): Promise<TournamentRound>;\n  getTournamentMatches(\n    tournamentId: string,\n    roundId?: string,\n  ): Promise<\n    (TournamentMatch & { player1?: User; player2?: User; winner?: User })[]\n  >;\n  createTournamentMatch(data: InsertTournamentMatch): Promise<TournamentMatch>;\n  updateTournamentMatch(\n    matchId: string,\n    data: Partial<InsertTournamentMatch>,\n  ): Promise<TournamentMatch>;\n  getMatchResults(\n    matchId: string,\n  ): Promise<\n    (MatchResult & {\n      winner: User;\n      loser?: User;\n      reportedBy: User;\n      verifiedBy?: User;\n    })[]\n  >;\n  createMatchResult(data: InsertMatchResult): Promise<MatchResult>;\n  verifyMatchResult(resultId: string, verifierId: string): Promise<MatchResult>;\n\n  // Forum operations\n  getForumPosts(\n    communityId: string,\n    options?: { category?: string; limit?: number; offset?: number },\n  ): Promise<\n    (ForumPost & {\n      author: User;\n      community: Community;\n      replyCount: number;\n      likeCount: number;\n      isLiked?: boolean;\n    })[]\n  >;\n  getForumPost(\n    id: string,\n    userId?: string,\n  ): Promise<\n    | (ForumPost & { author: User; community: Community; isLiked: boolean })\n    | undefined\n  >;\n  createForumPost(data: InsertForumPost): Promise<ForumPost>;\n  updateForumPost(\n    id: string,\n    data: Partial<InsertForumPost>,\n  ): Promise<ForumPost>;\n  deleteForumPost(id: string): Promise<void>;\n  likeForumPost(postId: string, userId: string): Promise<void>;\n  unlikeForumPost(postId: string, userId: string): Promise<void>;\n  getForumReplies(\n    postId: string,\n    userId?: string,\n  ): Promise<\n    (ForumReply & {\n      author: User;\n      isLiked?: boolean;\n      childReplies?: ForumReply[];\n    })[]\n  >;\n  createForumReply(data: InsertForumReply): Promise<ForumReply>;\n  likeForumReply(replyId: string, userId: string): Promise<void>;\n  unlikeForumReply(replyId: string, userId: string): Promise<void>;\n\n  // Streaming session operations\n  getStreamSessions(filters?: {\n    hostUserId?: string;\n    communityId?: string;\n    status?: string;\n    upcoming?: boolean;\n  }): Promise<\n    (StreamSession & {\n      host: User;\n      community?: Community;\n      coHosts: StreamSessionCoHost[];\n      platforms: StreamSessionPlatform[];\n    })[]\n  >;\n  getStreamSession(\n    id: string,\n  ): Promise<\n    | (StreamSession & {\n        host: User;\n        community?: Community;\n        coHosts: (StreamSessionCoHost & { user: User })[];\n        platforms: StreamSessionPlatform[];\n      })\n    | undefined\n  >;\n  createStreamSession(data: InsertStreamSession): Promise<StreamSession>;\n  updateStreamSession(\n    id: string,\n    data: Partial<InsertStreamSession>,\n  ): Promise<StreamSession>;\n  deleteStreamSession(id: string): Promise<void>;\n\n  // Stream session co-host operations\n  addStreamCoHost(\n    data: InsertStreamSessionCoHost,\n  ): Promise<StreamSessionCoHost>;\n  removeStreamCoHost(sessionId: string, userId: string): Promise<void>;\n  updateStreamCoHostPermissions(\n    sessionId: string,\n    userId: string,\n    permissions: {\n      canControlStream: boolean;\n      canManageChat: boolean;\n      canInviteGuests: boolean;\n      canEndStream: boolean;\n    },\n  ): Promise<StreamSessionCoHost>;\n\n  // Stream session platform operations\n  addStreamPlatform(\n    data: InsertStreamSessionPlatform,\n  ): Promise<StreamSessionPlatform>;\n  updateStreamPlatform(\n    id: string,\n    data: Partial<InsertStreamSessionPlatform>,\n  ): Promise<StreamSessionPlatform>;\n  removeStreamPlatform(id: string): Promise<void>;\n  getStreamPlatforms(sessionId: string): Promise<StreamSessionPlatform[]>;\n  updateStreamStatus(\n    sessionId: string,\n    platform: string,\n    isLive: boolean,\n    viewerCount?: number,\n  ): Promise<void>;\n\n  // Collaboration request operations\n  getCollaborationRequests(filters?: {\n    fromUserId?: string;\n    toUserId?: string;\n    status?: string;\n    type?: string;\n  }): Promise<\n    (CollaborationRequest & {\n      fromUser: User;\n      toUser: User;\n      streamSession?: StreamSession;\n    })[]\n  >;\n  createCollaborationRequest(\n    data: InsertCollaborationRequest,\n  ): Promise<CollaborationRequest>;\n  respondToCollaborationRequest(\n    id: string,\n    status: \"accepted\" | \"declined\" | \"cancelled\",\n    responseMessage?: string,\n  ): Promise<CollaborationRequest>;\n  expireCollaborationRequests(): Promise<void>;\n\n  // Stream analytics operations\n  recordStreamAnalytics(data: InsertStreamAnalytics): Promise<StreamAnalytics>;\n  getStreamAnalytics(\n    sessionId: string,\n    platform?: string,\n  ): Promise<StreamAnalytics[]>;\n  getStreamAnalyticsSummary(\n    sessionId: string,\n  ): Promise<{\n    totalViewers: number;\n    peakViewers: number;\n    averageViewers: number;\n    totalChatMessages: number;\n    platforms: string[];\n  }>;\n\n  // Collaborative streaming events\n  createCollaborativeStreamEvent(\n    data: InsertCollaborativeStreamEvent,\n  ): Promise<CollaborativeStreamEvent>;\n  getCollaborativeStreamEvent(\n    id: string,\n  ): Promise<CollaborativeStreamEvent | null>;\n  updateCollaborativeStreamEvent(\n    id: string,\n    data: Partial<InsertCollaborativeStreamEvent>,\n  ): Promise<CollaborativeStreamEvent>;\n  deleteCollaborativeStreamEvent(id: string): Promise<void>;\n  getUserCollaborativeStreamEvents(\n    userId: string,\n  ): Promise<CollaborativeStreamEvent[]>;\n\n  // Stream collaborators\n  createStreamCollaborator(\n    data: InsertStreamCollaborator,\n  ): Promise<StreamCollaborator>;\n  getStreamCollaborator(id: string): Promise<StreamCollaborator | null>;\n  updateStreamCollaborator(\n    id: string,\n    data: Partial<InsertStreamCollaborator>,\n  ): Promise<StreamCollaborator>;\n  deleteStreamCollaborator(id: string): Promise<void>;\n  getStreamCollaborators(streamEventId: string): Promise<StreamCollaborator[]>;\n\n  // Stream coordination sessions\n  createStreamCoordinationSession(\n    data: InsertStreamCoordinationSession,\n  ): Promise<StreamCoordinationSession>;\n  getStreamCoordinationSession(\n    id: string,\n  ): Promise<StreamCoordinationSession | null>;\n  updateStreamCoordinationSession(\n    id: string,\n    data: Partial<InsertStreamCoordinationSession>,\n  ): Promise<StreamCoordinationSession>;\n  deleteStreamCoordinationSession(id: string): Promise<void>;\n  getActiveCoordinationSessions(): Promise<StreamCoordinationSession[]>;\n\n  // User activity analytics operations\n  recordUserActivityAnalytics(\n    data: InsertUserActivityAnalytics,\n  ): Promise<UserActivityAnalytics>;\n  getUserActivityAnalytics(\n    userId: string,\n    days?: number,\n  ): Promise<UserActivityAnalytics[]>;\n\n  // Community analytics operations\n  recordCommunityAnalytics(\n    data: InsertCommunityAnalytics,\n  ): Promise<CommunityAnalytics>;\n  getCommunityAnalytics(\n    communityId: string,\n    startDate: Date,\n    endDate: Date,\n  ): Promise<CommunityAnalytics[]>;\n\n  // Platform metrics operations\n  recordPlatformMetrics(data: InsertPlatformMetrics): Promise<PlatformMetrics>;\n  getPlatformMetrics(\n    metricType?: string,\n    timeWindow?: string,\n    startDate?: Date,\n    endDate?: Date,\n  ): Promise<PlatformMetrics[]>;\n\n  // Event tracking operations\n  recordEventTracking(data: InsertEventTracking): Promise<EventTracking>;\n  getEventTracking(\n    eventName?: string,\n    userId?: string,\n    startDate?: Date,\n    endDate?: Date,\n  ): Promise<EventTracking[]>;\n\n  // Conversion funnel operations\n  recordConversionFunnel(\n    data: InsertConversionFunnel,\n  ): Promise<ConversionFunnel>;\n  getConversionFunnelData(\n    funnelName: string,\n    startDate?: Date,\n    endDate?: Date,\n  ): Promise<ConversionFunnel[]>;\n\n  // Admin & Moderation operations\n\n  // User role operations (RBAC)\n  getUserRoles(userId: string): Promise<UserRole[]>;\n  createUserRole(data: InsertUserRole): Promise<UserRole>;\n  updateUserRole(id: string, data: Partial<InsertUserRole>): Promise<UserRole>;\n  deleteUserRole(id: string): Promise<void>;\n  checkUserPermission(userId: string, permission: string): Promise<boolean>;\n  getUsersByRole(role: string): Promise<(UserRole & { user: User })[]>;\n\n  // User reputation operations\n  getUserReputation(userId: string): Promise<UserReputation | undefined>;\n  updateUserReputation(\n    userId: string,\n    data: Partial<InsertUserReputation>,\n  ): Promise<UserReputation>;\n  calculateReputationScore(userId: string): Promise<number>;\n  getUsersByReputationRange(\n    minScore: number,\n    maxScore: number,\n  ): Promise<(UserReputation & { user: User })[]>;\n  recordPositiveAction(\n    userId: string,\n    actionType: string,\n    metadata?: Record<string, unknown>,\n  ): Promise<void>;\n  recordNegativeAction(\n    userId: string,\n    actionType: string,\n    severity: \"minor\" | \"moderate\" | \"severe\",\n    metadata?: Record<string, unknown>,\n  ): Promise<void>;\n  recordReportSubmission(\n    userId: string,\n    reportId: string,\n    isAccurate?: boolean,\n  ): Promise<void>;\n  batchRecalculateReputationScores(userIds?: string[]): Promise<void>;\n\n  // Content report operations\n  createContentReport(data: InsertContentReport): Promise<ContentReport>;\n  getContentReports(filters?: {\n    status?: string;\n    priority?: string;\n    reporterUserId?: string;\n    assignedModerator?: string;\n  }): Promise<\n    (ContentReport & {\n      reporter?: User;\n      reportedUser?: User;\n      assignedMod?: User;\n    })[]\n  >;\n  getContentReport(\n    id: string,\n  ): Promise<\n    | (ContentReport & {\n        reporter?: User;\n        reportedUser?: User;\n        assignedMod?: User;\n      })\n    | undefined\n  >;\n  updateContentReport(\n    id: string,\n    data: Partial<InsertContentReport>,\n  ): Promise<ContentReport>;\n  assignContentReport(\n    reportId: string,\n    moderatorId: string,\n  ): Promise<ContentReport>;\n  resolveContentReport(\n    reportId: string,\n    resolution: string,\n    actionTaken?: string,\n    moderatorId?: string,\n  ): Promise<ContentReport>;\n\n  // Moderation action operations\n  createModerationAction(\n    data: InsertModerationAction,\n  ): Promise<ModerationAction>;\n  getModerationActions(filters?: {\n    targetUserId?: string;\n    moderatorId?: string;\n    action?: string;\n    isActive?: boolean;\n  }): Promise<(ModerationAction & { moderator: User; targetUser: User })[]>;\n  getModerationAction(\n    id: string,\n  ): Promise<\n    (ModerationAction & { moderator: User; targetUser: User }) | undefined\n  >;\n  updateModerationAction(\n    id: string,\n    data: Partial<InsertModerationAction>,\n  ): Promise<ModerationAction>;\n  reverseModerationAction(\n    id: string,\n    reversedBy: string,\n    reason: string,\n  ): Promise<ModerationAction>;\n  getUserActiveModerationActions(userId: string): Promise<ModerationAction[]>;\n\n  // Moderation queue operations\n  addToModerationQueue(data: InsertModerationQueue): Promise<ModerationQueue>;\n  getModerationQueue(filters?: {\n    status?: string;\n    assignedModerator?: string;\n    priority?: number;\n    itemType?: string;\n    overdue?: boolean;\n  }): Promise<(ModerationQueue & { assignedMod?: User })[]>;\n  getModerationQueueItem(\n    id: string,\n  ): Promise<(ModerationQueue & { assignedMod?: User }) | undefined>;\n  assignModerationQueueItem(\n    id: string,\n    moderatorId: string,\n  ): Promise<ModerationQueue>;\n  completeModerationQueueItem(\n    id: string,\n    resolution: string,\n    actionTaken?: string,\n  ): Promise<ModerationQueue>;\n  updateModerationQueuePriority(\n    id: string,\n    priority: number,\n  ): Promise<ModerationQueue>;\n\n  // Enhanced moderation queue operations\n  autoAssignModerationQueue(\n    itemType?: string,\n  ): Promise<{ assigned: number; skipped: number }>;\n  bulkAssignModerationQueue(\n    itemIds: string[],\n    moderatorId: string,\n  ): Promise<ModerationQueue[]>;\n  getModeratorWorkload(\n    moderatorId?: string,\n  ): Promise<\n    {\n      moderatorId: string;\n      activeTasks: number;\n      avgCompletionTime: number;\n      lastActivity: Date | null;\n    }[]\n  >;\n  escalateOverdueItems(thresholdHours?: number): Promise<ModerationQueue[]>;\n  calculateAutoPriority(itemType: string, metadata?: Record<string, unknown>): Promise<number>;\n  getModerationQueueStats(): Promise<{\n    totalOpen: number;\n    totalAssigned: number;\n    totalCompleted: number;\n    avgCompletionTime: number;\n    overdueCount: number;\n  }>;\n\n  // CMS content operations\n  getCmsContent(type?: string, isPublished?: boolean): Promise<CmsContent[]>;\n  getCmsContentById(\n    id: string,\n  ): Promise<\n    | (CmsContent & { author: User; lastEditor: User; approver?: User })\n    | undefined\n  >;\n  createCmsContent(data: InsertCmsContent): Promise<CmsContent>;\n  updateCmsContent(\n    id: string,\n    data: Partial<InsertCmsContent>,\n  ): Promise<CmsContent>;\n  publishCmsContent(id: string, publisherId: string): Promise<CmsContent>;\n  deleteCmsContent(id: string): Promise<void>;\n  getCmsContentVersions(type: string): Promise<CmsContent[]>;\n\n  // Ban evasion tracking operations\n  createBanEvasionRecord(\n    data: InsertBanEvasionTracking,\n  ): Promise<BanEvasionTracking>;\n  getBanEvasionRecords(\n    userId?: string,\n    suspiciousActivity?: boolean,\n  ): Promise<(BanEvasionTracking & { user: User; bannedUser?: User })[]>;\n  checkBanEvasion(\n    userId: string,\n    ipAddress: string,\n    deviceFingerprint?: string,\n  ): Promise<BanEvasionTracking[]>;\n  updateBanEvasionStatus(\n    id: string,\n    status: string,\n    reviewedBy?: string,\n  ): Promise<BanEvasionTracking>;\n\n  // User appeal operations\n  createUserAppeal(data: InsertUserAppeal): Promise<UserAppeal>;\n  getUserAppeals(filters?: {\n    userId?: string;\n    status?: string;\n    reviewedBy?: string;\n  }): Promise<\n    (UserAppeal & {\n      user: User;\n      moderationAction?: ModerationAction;\n      reviewer?: User;\n    })[]\n  >;\n  getUserAppeal(\n    id: string,\n  ): Promise<\n    | (UserAppeal & {\n        user: User;\n        moderationAction?: ModerationAction;\n        assignedRev?: User;\n      })\n    | undefined\n  >;\n  updateUserAppeal(\n    id: string,\n    data: Partial<InsertUserAppeal>,\n  ): Promise<UserAppeal>;\n  assignAppealReviewer(\n    appealId: string,\n    reviewerId: string,\n  ): Promise<UserAppeal>;\n  resolveUserAppeal(\n    appealId: string,\n    decision: string,\n    reviewerNotes?: string,\n    reviewerId?: string,\n  ): Promise<UserAppeal>;\n\n  // Moderation template operations\n  getModerationTemplates(\n    category?: string,\n  ): Promise<\n    Array<Omit<ModerationTemplate, \"createdBy\"> & { createdBy: User }>\n  >;\n  getModerationTemplate(\n    id: string,\n  ): Promise<\n    (Omit<ModerationTemplate, \"createdBy\"> & { createdBy: User }) | undefined\n  >;\n  createModerationTemplate(\n    data: InsertModerationTemplate,\n  ): Promise<ModerationTemplate>;\n  updateModerationTemplate(\n    id: string,\n    data: Partial<InsertModerationTemplate>,\n  ): Promise<ModerationTemplate>;\n  deleteModerationTemplate(id: string): Promise<void>;\n\n  // Admin audit log operations\n  createAuditLog(data: InsertAdminAuditLog): Promise<AdminAuditLog>;\n  getAuditLogs(filters?: {\n    adminUserId?: string;\n    action?: string;\n    startDate?: Date;\n    endDate?: Date;\n  }): Promise<(AdminAuditLog & { admin: User })[]>;\n  getAuditLog(\n    id: string,\n  ): Promise<(AdminAuditLog & { admin: User }) | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  // (IMPORTANT) these user operations are mandatory for authentication integration.\n\n  async getUser(id: string): Promise<User | undefined> {\n    // Return user data including all required fields, but with sensitive fields as null for security\n    const [user] = await db\n      .select({\n        id: users.id,\n        email: users.email,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        username: users.username,\n        profileImageUrl: users.profileImageUrl,\n        primaryCommunity: users.primaryCommunity,\n        bio: users.bio,\n        location: users.location,\n        website: users.website,\n        status: users.status,\n        statusMessage: users.statusMessage,\n        timezone: users.timezone,\n        dateOfBirth: users.dateOfBirth,\n        isPrivate: users.isPrivate,\n        showOnlineStatus: users.showOnlineStatus,\n        allowDirectMessages: users.allowDirectMessages,\n        // Sensitive fields - these will be returned as null for security\n        passwordHash: sql<string | null>`NULL`,\n        isEmailVerified: users.isEmailVerified,\n        emailVerifiedAt: users.emailVerifiedAt,\n        failedLoginAttempts: users.failedLoginAttempts,\n        lastFailedLogin: users.lastFailedLogin,\n        accountLockedUntil: users.accountLockedUntil,\n        passwordChangedAt: users.passwordChangedAt,\n        mfaEnabled: users.mfaEnabled,\n        mfaEnabledAt: users.mfaEnabledAt,\n        lastLoginAt: users.lastLoginAt,\n        lastActiveAt: users.lastActiveAt,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n      })\n      .from(users)\n      .where(eq(users.id, id));\n    if (!user) {\n      throw new Error(\"Database operation failed\");\n    }\n    return user;\n  }\n\n  async getAllUsers(filters?: {\n    page?: number;\n    limit?: number;\n    search?: string;\n    role?: string;\n    status?: \"online\" | \"offline\" | \"away\" | \"busy\" | \"gaming\" | \"all\";\n    sortBy?: string;\n    order?: \"asc\" | \"desc\";\n  }): Promise<{ users: User[]; total: number }> {\n    const {\n      page = 1,\n      limit = 50,\n      search,\n      role,\n      status,\n      sortBy = \"createdAt\",\n      order = \"desc\",\n    } = filters || {};\n\n    // Select safe user fields (exclude sensitive data like passwordHash)\n    let query = db\n      .select({\n        id: users.id,\n        email: users.email,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        username: users.username,\n        profileImageUrl: users.profileImageUrl,\n        primaryCommunity: users.primaryCommunity,\n        bio: users.bio,\n        location: users.location,\n        website: users.website,\n        status: users.status,\n        statusMessage: users.statusMessage,\n        timezone: users.timezone,\n        dateOfBirth: users.dateOfBirth,\n        isPrivate: users.isPrivate,\n        showOnlineStatus: users.showOnlineStatus,\n        allowDirectMessages: users.allowDirectMessages,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n      })\n      .from(users);\n\n    // Build conditions\n    const conditions = [];\n\n    // Add search filter\n    if (search) {\n      conditions.push(\n        or(\n          ilike(users.username, `%${search}%`),\n          ilike(users.email, `%${search}%`),\n          ilike(users.firstName, `%${search}%`),\n          ilike(users.lastName, `%${search}%`),\n        ),\n      );\n    }\n\n    // Add status filter\n    if (status && status !== \"all\") {\n      conditions.push(\n        eq(\n          users.status,\n          status as \"online\" | \"offline\" | \"away\" | \"busy\" | \"gaming\",\n        ),\n      );\n    }\n\n    // Add role filter (requires join with userRoles)\n    if (role) {\n      query = query.leftJoin(userRoles, eq(users.id, userRoles.userId)) as any;\n      conditions.push(eq(userRoles.role, role));\n    }\n\n    // Apply conditions\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions)) as any;\n    }\n\n    // Add sorting\n    const validSortColumns = [\n      \"createdAt\",\n      \"updatedAt\",\n      \"username\",\n      \"email\",\n      \"firstName\",\n      \"lastName\",\n    ];\n    if (validSortColumns.includes(sortBy)) {\n      let sortColumn;\n      switch (sortBy) {\n        case \"createdAt\":\n          sortColumn = users.createdAt;\n          break;\n        case \"updatedAt\":\n          sortColumn = users.updatedAt;\n          break;\n        case \"username\":\n          sortColumn = users.username;\n          break;\n        case \"email\":\n          sortColumn = users.email;\n          break;\n        case \"firstName\":\n          sortColumn = users.firstName;\n          break;\n        case \"lastName\":\n          sortColumn = users.lastName;\n          break;\n        default:\n          sortColumn = users.createdAt;\n      }\n\n      if (order === \"asc\") {\n        query = query.orderBy(asc(sortColumn)) as any;\n      } else {\n        query = query.orderBy(desc(sortColumn)) as any;\n      }\n    } else {\n      // Default sort\n      query = query.orderBy(desc(users.createdAt)) as any;\n    }\n\n    // Get total count with same filters\n    let countQuery = db.select({ count: sql<number>`count(*)` }).from(users);\n    if (role) {\n      countQuery = countQuery.leftJoin(\n        userRoles,\n        eq(users.id, userRoles.userId),\n      ) as any;\n    }\n    if (conditions.length > 0) {\n      countQuery = countQuery.where(and(...conditions)) as any;\n    }\n    const countResult = await countQuery;\n    const total = countResult?.[0]?.count ?? 0;\n\n    // Add pagination\n    const offset = (page - 1) * limit;\n    const usersList = await (query as any).limit(limit).offset(offset);\n\n    return { users: usersList, total };\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    if (!user) {\n      throw new Error(\"Database operation failed\");\n    }\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.username, username));\n    if (!user) {\n      throw new Error(\"Database operation failed\");\n    }\n    return user;\n  }\n\n  async createUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    if (!user) {\n      throw new Error(\"Failed to create user\");\n    }\n    if (!user) {\n      throw new Error(\"Database operation failed\");\n    }\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    if (!user) {\n      throw new Error(\"Failed to upsert user\");\n    }\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<UpsertUser>): Promise<User> {\n    // Update user and return safe projection (excluding passwordHash)\n    const updateData = {\n      ...userData,\n      updatedAt: new Date(),\n    };\n\n    const [user] = await db\n      .update(users)\n      .set(updateData)\n      .where(eq(users.id, id))\n      .returning();\n    if (!user) {\n      throw new Error(\"Database operation failed\");\n    }\n    return user;\n  }\n\n  async getCommunityActiveUsers(\n    communityId: string,\n    options: {\n      limit?: number;\n      cursor?: string;\n      includeOffline?: boolean;\n      sortBy?: string;\n      sortDirection?: \"asc\" | \"desc\";\n    } = {},\n  ): Promise<{ data: User[]; hasMore: boolean }> {\n    const {\n      limit = 20,\n      cursor,\n      includeOffline = false,\n      sortBy = \"lastActiveAt\",\n      sortDirection = \"desc\",\n    } = options;\n\n    let conditions = [eq(userCommunities.communityId, communityId)];\n\n    if (!includeOffline) {\n      const statusCondition = or(\n        eq(users.status, \"online\"),\n        eq(users.status, \"away\"),\n        eq(users.status, \"busy\"),\n        eq(users.status, \"gaming\"),\n      );\n      if (statusCondition) {\n        conditions.push(statusCondition);\n      }\n    }\n\n    if (cursor) {\n      conditions.push(lt(users.lastActiveAt, new Date(cursor)));\n    }\n\n    const activeUsers = await db\n      .select({\n        id: users.id,\n        email: users.email,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        username: users.username,\n        profileImageUrl: users.profileImageUrl,\n        primaryCommunity: users.primaryCommunity,\n        bio: users.bio,\n        location: users.location,\n        website: users.website,\n        status: users.status,\n        statusMessage: users.statusMessage,\n        timezone: users.timezone,\n        dateOfBirth: users.dateOfBirth,\n        isPrivate: users.isPrivate,\n        showOnlineStatus: users.showOnlineStatus,\n        allowDirectMessages: users.allowDirectMessages,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n        lastActiveAt: users.lastActiveAt,\n      })\n      .from(users)\n      .innerJoin(userCommunities, eq(users.id, userCommunities.userId))\n      .where(and(...conditions))\n      .orderBy(\n        sortDirection === \"desc\"\n          ? desc(users.lastActiveAt)\n          : asc(users.lastActiveAt),\n      )\n      .limit(limit + 1); // Get one extra to check if there are more\n\n    const hasMore = activeUsers.length > limit;\n    const data = (\n      hasMore ? activeUsers.slice(0, limit) : activeUsers\n    ) as User[];\n\n    return { data, hasMore };\n  }\n\n  // Community operations\n  async getCommunities(): Promise<Community[]> {\n    return await db\n      .select()\n      .from(communities)\n      .where(eq(communities.isActive, true))\n      .orderBy(communities.displayName);\n  }\n\n  async getCommunity(id: string): Promise<Community | undefined> {\n    const [community] = await db\n      .select()\n      .from(communities)\n      .where(eq(communities.id, id));\n    if (!community) {\n      throw new Error(\"Database operation failed\");\n    }\n    return community;\n  }\n\n  async createCommunity(communityData: InsertCommunity): Promise<Community> {\n    const [community] = await db\n      .insert(communities)\n      .values([communityData])\n      .returning();\n    if (!community) {\n      throw new Error(\"Failed to create community\");\n    }\n    return community;\n  }\n\n  // User community operations\n  async getUserCommunities(\n    userId: string,\n  ): Promise<(UserCommunity & { community: Community })[]> {\n    return await db\n      .select({\n        id: userCommunities.id,\n        userId: userCommunities.userId,\n        communityId: userCommunities.communityId,\n        isPrimary: userCommunities.isPrimary,\n        joinedAt: userCommunities.joinedAt,\n        community: communities,\n      })\n      .from(userCommunities)\n      .innerJoin(communities, eq(userCommunities.communityId, communities.id))\n      .where(eq(userCommunities.userId, userId));\n  }\n\n  async joinCommunity(data: InsertUserCommunity): Promise<UserCommunity> {\n    const [userCommunity] = await db\n      .insert(userCommunities)\n      .values(data)\n      .onConflictDoNothing()\n      .returning();\n\n    // Record positive action for community engagement\n    if (userCommunity) {\n      await this.recordPositiveAction(data.userId, \"community_joined\", {\n        communityId: data.communityId,\n      });\n    }\n\n    if (!userCommunity) {\n      throw new Error(\"Database operation failed\");\n    }\n\n    return userCommunity;\n  }\n\n  async setPrimaryCommunity(\n    userId: string,\n    communityId: string,\n  ): Promise<void> {\n    // First, unset all primary communities for the user\n    await db\n      .update(userCommunities)\n      .set({ isPrimary: false })\n      .where(eq(userCommunities.userId, userId));\n\n    // Then set the new primary community\n    await db\n      .update(userCommunities)\n      .set({ isPrimary: true })\n      .where(\n        and(\n          eq(userCommunities.userId, userId),\n          eq(userCommunities.communityId, communityId),\n        ),\n      );\n\n    // Update the user's primary community\n    await db\n      .update(users)\n      .set({\n        primaryCommunity: communityId,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId));\n  }\n\n  // Platform account operations for cross-platform streaming\n  async getUserPlatformAccounts(\n    userId: string,\n  ): Promise<SafeUserPlatformAccount[]> {\n    return await db\n      .select({\n        id: userPlatformAccounts.id,\n        userId: userPlatformAccounts.userId,\n        platform: userPlatformAccounts.platform,\n        handle: userPlatformAccounts.handle,\n        platformUserId: userPlatformAccounts.platformUserId,\n        channelId: userPlatformAccounts.channelId,\n        pageId: userPlatformAccounts.pageId,\n        tokenExpiresAt: userPlatformAccounts.tokenExpiresAt,\n        scopes: userPlatformAccounts.scopes,\n        isActive: userPlatformAccounts.isActive,\n        lastVerified: userPlatformAccounts.lastVerified,\n        createdAt: userPlatformAccounts.createdAt,\n        updatedAt: userPlatformAccounts.updatedAt,\n      })\n      .from(userPlatformAccounts)\n      .where(eq(userPlatformAccounts.userId, userId))\n      .orderBy(userPlatformAccounts.platform);\n  }\n\n  async getUserPlatformAccount(\n    userId: string,\n    platform: string,\n  ): Promise<SafeUserPlatformAccount | undefined> {\n    const result = await db\n      .select({\n        id: userPlatformAccounts.id,\n        userId: userPlatformAccounts.userId,\n        platform: userPlatformAccounts.platform,\n        handle: userPlatformAccounts.handle,\n        platformUserId: userPlatformAccounts.platformUserId,\n        channelId: userPlatformAccounts.channelId,\n        pageId: userPlatformAccounts.pageId,\n        tokenExpiresAt: userPlatformAccounts.tokenExpiresAt,\n        scopes: userPlatformAccounts.scopes,\n        isActive: userPlatformAccounts.isActive,\n        lastVerified: userPlatformAccounts.lastVerified,\n        createdAt: userPlatformAccounts.createdAt,\n        updatedAt: userPlatformAccounts.updatedAt,\n      })\n      .from(userPlatformAccounts)\n      .where(\n        and(\n          eq(userPlatformAccounts.userId, userId),\n          eq(userPlatformAccounts.platform, platform),\n        ),\n      )\n      .limit(1);\n    return result[0];\n  }\n\n  // Internal method to get platform account with tokens (for OAuth refresh)\n  async getUserPlatformAccountWithTokens(\n    userId: string,\n    platform: string,\n  ): Promise<UserPlatformAccount | undefined> {\n    const [account] = await db\n      .select()\n      .from(userPlatformAccounts)\n      .where(\n        and(\n          eq(userPlatformAccounts.userId, userId),\n          eq(userPlatformAccounts.platform, platform),\n        ),\n      )\n      .limit(1);\n    if (!account) {\n      throw new Error(\"Database operation failed\");\n    }\n    return account;\n  }\n\n  async createUserPlatformAccount(\n    data: InsertUserPlatformAccount,\n  ): Promise<SafeUserPlatformAccount> {\n    const result = await db\n      .insert(userPlatformAccounts)\n      .values({\n        ...data,\n        updatedAt: new Date(),\n      })\n      .returning({\n        id: userPlatformAccounts.id,\n        userId: userPlatformAccounts.userId,\n        platform: userPlatformAccounts.platform,\n        handle: userPlatformAccounts.handle,\n        platformUserId: userPlatformAccounts.platformUserId,\n        channelId: userPlatformAccounts.channelId,\n        pageId: userPlatformAccounts.pageId,\n        tokenExpiresAt: userPlatformAccounts.tokenExpiresAt,\n        scopes: userPlatformAccounts.scopes,\n        isActive: userPlatformAccounts.isActive,\n        lastVerified: userPlatformAccounts.lastVerified,\n        createdAt: userPlatformAccounts.createdAt,\n        updatedAt: userPlatformAccounts.updatedAt,\n      });\n    if (!result[0]) {\n      throw new Error(\"Failed to create user platform account\");\n    }\n    return result[0];\n  }\n\n  async updateUserPlatformAccount(\n    id: string,\n    data: {\n      handle?: string;\n      accessToken?: string;\n      refreshToken?: string;\n      tokenExpiresAt?: Date;\n      scopes?: unknown;\n      isActive?: boolean;\n      lastVerified?: Date;\n    },\n  ): Promise<SafeUserPlatformAccount> {\n    const updateData: Partial<typeof userPlatformAccounts.$inferInsert> = {};\n    if (data.handle !== undefined) updateData.handle = data.handle;\n    if (data.accessToken !== undefined)\n      updateData.accessToken = data.accessToken;\n    if (data.refreshToken !== undefined)\n      updateData.refreshToken = data.refreshToken;\n    if (data.tokenExpiresAt !== undefined)\n      updateData.tokenExpiresAt = data.tokenExpiresAt;\n    if (data.scopes !== undefined)\n      updateData.scopes = JSON.stringify(data.scopes);\n    if (data.isActive !== undefined) updateData.isActive = data.isActive;\n    if (data.lastVerified !== undefined)\n      updateData.lastVerified = data.lastVerified;\n    updateData.updatedAt = new Date();\n\n    const result = await db\n      .update(userPlatformAccounts)\n      .set(updateData)\n      .where(eq(userPlatformAccounts.id, id))\n      .returning({\n        id: userPlatformAccounts.id,\n        userId: userPlatformAccounts.userId,\n        platform: userPlatformAccounts.platform,\n        handle: userPlatformAccounts.handle,\n        platformUserId: userPlatformAccounts.platformUserId,\n        channelId: userPlatformAccounts.channelId,\n        pageId: userPlatformAccounts.pageId,\n        tokenExpiresAt: userPlatformAccounts.tokenExpiresAt,\n        scopes: userPlatformAccounts.scopes,\n        isActive: userPlatformAccounts.isActive,\n        lastVerified: userPlatformAccounts.lastVerified,\n        createdAt: userPlatformAccounts.createdAt,\n        updatedAt: userPlatformAccounts.updatedAt,\n      });\n    if (!result[0]) {\n      throw new Error(\"Failed to update user platform account\");\n    }\n    return result[0];\n  }\n\n  async deleteUserPlatformAccount(id: string): Promise<void> {\n    await db\n      .delete(userPlatformAccounts)\n      .where(eq(userPlatformAccounts.id, id));\n  }\n\n  async getUserPlatformHandle(\n    userId: string,\n    platform: string,\n  ): Promise<string | null> {\n    const account = await this.getUserPlatformAccount(userId, platform);\n    return account?.handle || null;\n  }\n\n  async getUserPlatformToken(\n    userId: string,\n    platform: string,\n  ): Promise<string | null> {\n    // Security: Only fetch the token field, never expose tokens in broader queries\n    const result = await db\n      .select({\n        accessToken: userPlatformAccounts.accessToken,\n        tokenExpiresAt: userPlatformAccounts.tokenExpiresAt,\n      })\n      .from(userPlatformAccounts)\n      .where(\n        and(\n          eq(userPlatformAccounts.userId, userId),\n          eq(userPlatformAccounts.platform, platform),\n          eq(userPlatformAccounts.isActive, true),\n        ),\n      )\n      .limit(1);\n\n    const account = result[0];\n    if (!account?.accessToken) {\n      return null;\n    }\n\n    // Check token expiry - return null for expired tokens\n    if (account.tokenExpiresAt && account.tokenExpiresAt <= new Date()) {\n      return null;\n    }\n\n    // TODO: Implement token decryption here when encryption is added\n    return account.accessToken;\n  }\n\n  // Theme preference operations\n  async getUserThemePreferences(userId: string): Promise<ThemePreference[]> {\n    return await db\n      .select()\n      .from(themePreferences)\n      .where(eq(themePreferences.userId, userId));\n  }\n\n  async upsertThemePreference(\n    data: InsertThemePreference,\n  ): Promise<ThemePreference> {\n    const [preference] = await db\n      .insert(themePreferences)\n      .values(data)\n      .onConflictDoUpdate({\n        target: [themePreferences.userId, themePreferences.communityId],\n        set: {\n          themeMode: data.themeMode,\n          customColors: data.customColors,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    if (!preference) {\n      throw new Error(\"Failed to upsert theme preference\");\n    }\n    return preference;\n  }\n\n  // Event operations\n  async getEvents(filters?: {\n    userId?: string;\n    communityId?: string;\n    type?: string;\n    upcoming?: boolean;\n  }): Promise<\n    (Event & {\n      creator: User;\n      community: Community | null;\n      attendeeCount: number;\n      isUserAttending?: boolean;\n    })[]\n  > {\n    const baseQuery = db\n      .select({\n        id: events.id,\n        title: events.title,\n        description: events.description,\n        type: events.type,\n        // date: events.date, // TODO: Not in schema - using startTime\n        // time: events.time, // TODO: Not in schema - using startTime\n        startTime: events.startTime,\n        endTime: events.endTime,\n        location: events.location,\n        communityId: events.communityId,\n        creatorId: events.creatorId,\n        hostId: events.hostId,\n        coHostId: events.coHostId,\n        maxAttendees: events.maxAttendees,\n        isVirtual: events.isVirtual,\n        // isPublic: events.isPublic, // TODO: Not in schema\n        status: events.status,\n        // playerSlots: events.playerSlots, // TODO: Not in schema\n        // alternateSlots: events.alternateSlots, // TODO: Not in schema\n        // gameFormat: events.gameFormat, // TODO: Not in schema\n        // powerLevel: events.powerLevel, // TODO: Not in schema\n        // isRecurring: events.isRecurring, // TODO: Not in schema\n        // recurrencePattern: events.recurrencePattern, // TODO: Not in schema\n        // recurrenceInterval: events.recurrenceInterval, // TODO: Not in schema\n        // recurrenceEndDate: events.recurrenceEndDate, // TODO: Not in schema\n        // parentEventId: events.parentEventId, // TODO: Not in schema\n        createdAt: events.createdAt,\n        updatedAt: events.updatedAt,\n        creator: users,\n        community: communities,\n      })\n      .from(events)\n      .leftJoin(users, eq(events.creatorId, users.id))\n      .leftJoin(communities, eq(events.communityId, communities.id));\n\n    let conditions = [];\n    if (filters?.communityId) {\n      conditions.push(eq(events.communityId, filters.communityId));\n    }\n    if (filters?.type) {\n      conditions.push(eq(events.type, filters.type as any));\n    }\n    if (filters?.upcoming) {\n      // const today = new Date().toISOString().split('T')[0];\n      // conditions.push(gte(events.date, today as any)); // TODO: date column doesn't exist\n      conditions.push(gte(events.startTime, new Date()));\n    }\n\n    const query =\n      conditions.length > 0 ? baseQuery.where(and(...conditions)) : baseQuery;\n\n    const rawEvents = await query.orderBy(events.startTime); // TODO: time column doesn't exist, using startTime\n\n    // Get attendee counts and user attendance separately\n    const eventIds = rawEvents.map((e) => e.id);\n    const attendeeCounts =\n      eventIds.length > 0\n        ? await db\n            .select({\n              eventId: eventAttendees.eventId,\n              count: count(eventAttendees.id).as(\"count\"),\n            })\n            .from(eventAttendees)\n            .where(inArray(eventAttendees.eventId, eventIds))\n            .groupBy(eventAttendees.eventId)\n        : [];\n\n    const userAttendance =\n      filters?.userId && eventIds.length > 0\n        ? await db\n            .select({\n              eventId: eventAttendees.eventId,\n            })\n            .from(eventAttendees)\n            .where(\n              and(\n                inArray(eventAttendees.eventId, eventIds),\n                eq(eventAttendees.userId, filters.userId),\n              ),\n            )\n        : [];\n\n    type AttendeeCount = { eventId: string; count: number };\n    type UserAttendance = { eventId: string };\n    \n    const eventsWithDetails = rawEvents.map((event) => ({\n      ...event,\n      creator: event.creator || {\n        id: \"\",\n        email: null,\n        firstName: null,\n        lastName: null,\n        profileImageUrl: null,\n        primaryCommunity: null,\n        username: null,\n        bio: null,\n        location: null,\n        website: null,\n        status: null,\n        statusMessage: null,\n        timezone: null,\n        dateOfBirth: null,\n        isPrivate: false,\n        showOnlineStatus: \"everyone\",\n        allowDirectMessages: \"everyone\",\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      community: event.community,\n      attendeeCount:\n        (attendeeCounts as AttendeeCount[]).find(\n          (ac) => ac.eventId === event.id,\n        )?.count || 0,\n      isUserAttending: (userAttendance as UserAttendance[]).some(\n        (ua) => ua.eventId === event.id,\n      ),\n    }));\n    if (!eventsWithDetails) {\n      throw new Error(\"Database operation failed\");\n    }\n    return eventsWithDetails;\n  }\n\n  async getEvent(\n    id: string,\n    userId?: string,\n  ): Promise<\n    | (Event & {\n        creator: User;\n        community: Community | null;\n        attendeeCount: number;\n        isUserAttending: boolean;\n      })\n    | undefined\n  > {\n    const [event] = await db\n      .select({\n        id: events.id,\n        title: events.title,\n        description: events.description,\n        type: events.type,\n        // date: events.date, // TODO: Not in schema\n        // time: events.time, // TODO: Not in schema\n        startTime: events.startTime,\n        endTime: events.endTime,\n        location: events.location,\n        communityId: events.communityId,\n        creatorId: events.creatorId,\n        hostId: events.hostId,\n        coHostId: events.coHostId,\n        maxAttendees: events.maxAttendees,\n        isVirtual: events.isVirtual,\n        // isPublic: events.isPublic, // TODO: Not in schema\n        status: events.status,\n        // playerSlots: events.playerSlots, // TODO: Not in schema\n        // alternateSlots: events.alternateSlots, // TODO: Not in schema\n        // gameFormat: events.gameFormat, // TODO: Not in schema\n        // powerLevel: events.powerLevel, // TODO: Not in schema\n        // isRecurring: events.isRecurring, // TODO: Not in schema\n        // recurrencePattern: events.recurrencePattern, // TODO: Not in schema\n        // recurrenceInterval: events.recurrenceInterval, // TODO: Not in schema\n        // recurrenceEndDate: events.recurrenceEndDate, // TODO: Not in schema\n        // parentEventId: events.parentEventId, // TODO: Not in schema\n        createdAt: events.createdAt,\n        updatedAt: events.updatedAt,\n        creator: users,\n        community: communities,\n      })\n      .from(events)\n      .leftJoin(users, eq(events.creatorId, users.id))\n      .leftJoin(communities, eq(events.communityId, communities.id))\n      .where(eq(events.id, id));\n\n    if (!event) return undefined;\n\n    // Get attendee count\n    const [attendeeCount] = await db\n      .select({ count: count(eventAttendees.id) })\n      .from(eventAttendees)\n      .where(eq(eventAttendees.eventId, id));\n\n    // Check if user is attending\n    const isUserAttending = userId\n      ? await db\n          .select({ id: eventAttendees.id })\n          .from(eventAttendees)\n          .where(\n            and(\n              eq(eventAttendees.eventId, id),\n              eq(eventAttendees.userId, userId),\n            ),\n          )\n          .then((result: { id: string }[]) => result.length > 0)\n      : false;\n\n    return {\n      ...event,\n      creator: event.creator || {\n        id: \"\",\n        email: null,\n        firstName: null,\n        lastName: null,\n        profileImageUrl: null,\n        primaryCommunity: null,\n        username: null,\n        bio: null,\n        location: null,\n        website: null,\n        status: null,\n        statusMessage: null,\n        timezone: null,\n        dateOfBirth: null,\n        isPrivate: false,\n        showOnlineStatus: \"everyone\",\n        allowDirectMessages: \"everyone\",\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      community: event.community,\n      attendeeCount: attendeeCount?.count || 0,\n      isUserAttending,\n    } as Event & {\n      creator: User;\n      community: Community | null;\n      attendeeCount: number;\n      isUserAttending: boolean;\n    };\n  }\n\n  async createEvent(data: InsertEvent): Promise<Event> {\n    const [event] = await db.insert(events).values(data).returning();\n\n    if (!event) {\n      throw new Error(\"Failed to create event\");\n    }\n\n    // Auto-create TableSync session for game pod events\n    if (event.type === \"game_pod\") {\n      try {\n        const gameSessionData: InsertGameSession = {\n          eventId: event.id,\n          hostId: event.creatorId,\n          status: \"waiting\" as const,\n          currentPlayers: 0,\n          // maxPlayers: event.playerSlots || 4, // TODO: playerSlots doesn't exist in events schema\n          maxPlayers: 4, // Default to 4 players\n          // gameData: { // TODO: gameData doesn't exist in gameSessions schema\n          //   name: event.title,\n          //   format: event.gameFormat || 'commander', // TODO: gameFormat doesn't exist\n          //   powerLevel: event.powerLevel || 'casual', // TODO: powerLevel doesn't exist\n          //   description: event.description || '',\n          // },\n          gameType: \"commander\", // Default game type\n          // communityId: event.communityId, // TODO: communityId doesn't exist in gameSessions schema\n        };\n\n        await this.createGameSession(gameSessionData);\n      } catch (error) {\n        console.error(\"Failed to create automatic TableSync session:\", error);\n        // Don't fail the event creation if TableSync session fails\n      }\n    }\n\n    if (!event) {\n      throw new Error(\"Database operation failed\");\n    }\n\n    return event;\n  }\n\n  async updateEvent(id: string, data: Partial<InsertEvent>): Promise<Event> {\n    const [event] = await db\n      .update(events)\n      .set(data)\n      .where(eq(events.id, id))\n      .returning();\n    if (!event) {\n      throw new Error(\"Database operation failed\");\n    }\n    return event;\n  }\n\n  async deleteEvent(id: string): Promise<void> {\n    await db.delete(events).where(eq(events.id, id));\n  }\n\n  // Event attendee operations\n  async joinEvent(data: InsertEventAttendee): Promise<EventAttendee> {\n    const [attendee] = await db\n      .insert(eventAttendees)\n      .values(data)\n      .onConflictDoUpdate({\n        target: [eventAttendees.eventId, eventAttendees.userId],\n        set: {\n          status: data.status || \"attending\",\n          joinedAt: new Date(),\n        },\n      })\n      .returning();\n    if (!attendee) {\n      throw new Error(\"Database operation failed\");\n    }\n    return attendee;\n  }\n\n  async leaveEvent(eventId: string, userId: string): Promise<void> {\n    await db\n      .delete(eventAttendees)\n      .where(\n        and(\n          eq(eventAttendees.eventId, eventId),\n          eq(eventAttendees.userId, userId),\n        ),\n      );\n  }\n\n  async updateEventAttendee(\n    id: string,\n    data: Partial<{\n      playerType: string;\n      status: \"attending\" | \"maybe\" | \"not_attending\";\n      role: string;\n    }>,\n  ): Promise<EventAttendee> {\n    const [updated] = await db\n      .update(eventAttendees)\n      .set(data)\n      .where(eq(eventAttendees.id, id))\n      .returning();\n\n    if (!updated) {\n      throw new Error(\"Event attendee not found\");\n    }\n\n    return updated;\n  }\n\n  async getEventAttendees(\n    eventId: string,\n  ): Promise<(EventAttendee & { user: User })[]> {\n    return await db\n      .select({\n        id: eventAttendees.id,\n        eventId: eventAttendees.eventId,\n        userId: eventAttendees.userId,\n        status: eventAttendees.status,\n        role: eventAttendees.role,\n        playerType: eventAttendees.playerType,\n        joinedAt: eventAttendees.joinedAt,\n        user: users,\n      })\n      .from(eventAttendees)\n      .innerJoin(users, eq(eventAttendees.userId, users.id))\n      .where(eq(eventAttendees.eventId, eventId));\n  }\n\n  async getUserEventAttendance(\n    userId: string,\n  ): Promise<(EventAttendee & { event: Event })[]> {\n    return await db\n      .select({\n        id: eventAttendees.id,\n        eventId: eventAttendees.eventId,\n        userId: eventAttendees.userId,\n        status: eventAttendees.status,\n        role: eventAttendees.role,\n        playerType: eventAttendees.playerType,\n        joinedAt: eventAttendees.joinedAt,\n        event: events,\n      })\n      .from(eventAttendees)\n      .innerJoin(events, eq(eventAttendees.eventId, events.id))\n      .where(eq(eventAttendees.userId, userId));\n  }\n\n  async getEventAttendeesByEventIds(\n    eventIds: string[],\n  ): Promise<EventAttendee[]> {\n    if (eventIds.length === 0) return [];\n\n    return await db\n      .select({\n        id: eventAttendees.id,\n        eventId: eventAttendees.eventId,\n        userId: eventAttendees.userId,\n        status: eventAttendees.status,\n        role: eventAttendees.role,\n        playerType: eventAttendees.playerType,\n        joinedAt: eventAttendees.joinedAt,\n      })\n      .from(eventAttendees)\n      .where(inArray(eventAttendees.eventId, eventIds));\n  }\n\n  // Transaction-based event operations\n  async getEventWithTransaction(\n    tx: Transaction,\n    id: string,\n  ): Promise<Event | undefined> {\n    const [event] = await tx.select().from(events).where(eq(events.id, id));\n    if (!event) {\n      throw new Error(\"Database operation failed\");\n    }\n    return event;\n  }\n\n  async joinEventWithTransaction(\n    tx: Transaction,\n    data: InsertEventAttendee,\n  ): Promise<EventAttendee> {\n    const [attendee] = await tx\n      .insert(eventAttendees)\n      .values(data)\n      .onConflictDoUpdate({\n        target: [eventAttendees.eventId, eventAttendees.userId],\n        set: {\n          status: data.status || \"attending\",\n          joinedAt: new Date(),\n        },\n      })\n      .returning();\n    if (!attendee) {\n      throw new Error(\"Database operation failed\");\n    }\n    return attendee;\n  }\n\n  async createNotificationWithTransaction(\n    tx: Transaction,\n    data: InsertNotification,\n  ): Promise<Notification> {\n    const [notification] = await tx\n      .insert(notifications)\n      .values(data)\n      .returning();\n    return notification;\n  }\n\n  // Bulk calendar operations for game pods\n  async createBulkEvents(data: InsertEvent[]): Promise<Event[]> {\n    if (data.length === 0) return [];\n    const createdEvents = await db.insert(events).values(data).returning();\n\n    // Auto-create TableSync sessions for game pod events\n    for (const event of createdEvents) {\n      if (event.type === \"game_pod\") {\n        try {\n          const gameSessionData: InsertGameSession = {\n            eventId: event.id,\n            hostId: event.creatorId,\n            status: \"waiting\" as const,\n            currentPlayers: 0,\n            // maxPlayers: event.playerSlots || 4, // TODO: playerSlots doesn't exist in events schema\n            maxPlayers: 4, // Default to 4 players\n            // gameData: { // TODO: gameData doesn't exist in gameSessions schema\n            //   name: event.title,\n            //   format: event.gameFormat || 'commander', // TODO: gameFormat doesn't exist\n            //   powerLevel: event.powerLevel || 'casual', // TODO: powerLevel doesn't exist\n            //   description: event.description || '',\n            // },\n            gameType: \"commander\", // Default game type\n            // communityId: event.communityId, // TODO: communityId doesn't exist in gameSessions schema\n          };\n\n          await this.createGameSession(gameSessionData);\n        } catch (error) {\n          console.error(\n            `Failed to create automatic TableSync session for event ${event.id}:`,\n            error,\n          );\n          // Don't fail the bulk creation if individual TableSync sessions fail\n        }\n      }\n    }\n\n    if (!createdEvents) {\n      throw new Error(\"Database operation failed\");\n    }\n\n    return createdEvents;\n  }\n\n  async createRecurringEvents(\n    data: InsertEvent,\n    endDate: string,\n  ): Promise<Event[]> {\n    // TODO: isRecurring, recurrencePattern, recurrenceInterval, date, time properties not in schema\n    // if (!data.isRecurring || !data.recurrencePattern || !data.recurrenceInterval) {\n    //   throw new Error('Invalid recurring event data');\n    // }\n\n    // const eventList: InsertEvent[] = [];\n    // const startDate = new Date(data.date + 'T' + (data.time || '12:00'));\n    // const end = new Date(endDate);\n    // let currentDate = new Date(startDate);\n    // const interval = Number(data.recurrenceInterval) || 1;\n\n    // while (currentDate <= end) {\n    //   const eventData: InsertEvent = {\n    //     ...data,\n    //     date: currentDate.toISOString().split('T')[0] as string,\n    //   };\n    //   // Remove parentEventId to let it be auto-generated\n    //   delete (eventData as any).parentEventId;\n\n    //   eventList.push(eventData);\n\n    //   // Calculate next occurrence based on pattern\n    //   switch (data.recurrencePattern as string) {\n    //     case 'daily':\n    //       currentDate.setDate(currentDate.getDate() + interval);\n    //       break;\n    //     case 'weekly':\n    //       currentDate.setDate(currentDate.getDate() + (7 * interval));\n    //       break;\n    //     case 'monthly':\n    //       currentDate.setMonth(currentDate.getMonth() + interval);\n    //       break;\n    //   }\n    // }\n\n    // return this.createBulkEvents(eventList);\n\n    // For now, just create a single event with the provided data\n    const event = await this.createEvent(data);\n    return [event];\n  }\n\n  async getCalendarEvents(filters: {\n    communityId?: string;\n    startDate: string;\n    endDate: string;\n    type?: string;\n  }): Promise<\n    (Event & {\n      creator: User;\n      community: Community | null;\n      attendeeCount: number;\n      mainPlayers: number;\n      alternates: number;\n    })[]\n  > {\n    const baseQuery = db\n      .select({\n        id: events.id,\n        title: events.title,\n        description: events.description,\n        type: events.type,\n        startTime: events.startTime,\n        endTime: events.endTime,\n        location: events.location,\n        communityId: events.communityId,\n        creatorId: events.creatorId,\n        hostId: events.hostId,\n        coHostId: events.coHostId,\n        maxAttendees: events.maxAttendees,\n        playerSlots: events.playerSlots,\n        alternateSlots: events.alternateSlots,\n        isVirtual: events.isVirtual,\n        status: events.status,\n        createdAt: events.createdAt,\n        updatedAt: events.updatedAt,\n        creator: users,\n        community: communities,\n      })\n      .from(events)\n      .leftJoin(users, eq(events.creatorId, users.id))\n      .leftJoin(communities, eq(events.communityId, communities.id));\n\n    let conditions = [\n      gte(events.startTime, new Date(filters.startDate)),\n      lte(events.startTime, new Date(filters.endDate)),\n    ];\n\n    if (filters.communityId) {\n      conditions.push(eq(events.communityId, filters.communityId));\n    }\n    if (filters.type) {\n      conditions.push(eq(events.type, filters.type as any));\n    }\n\n    const rawEvents = await baseQuery\n      .where(and(...conditions))\n      .orderBy(events.startTime);\n\n    // Get player counts for each event\n    const eventIds = rawEvents.map((e) => e.id);\n    const playerCounts =\n      eventIds.length > 0\n        ? await db\n            .select({\n              eventId: eventAttendees.eventId,\n              totalCount: count(eventAttendees.id).as(\"totalCount\"),\n              mainPlayers: count(\n                sql`CASE WHEN ${eventAttendees.playerType} = 'main' THEN 1 END`,\n              ).as(\"mainPlayers\"),\n              alternates: count(\n                sql`CASE WHEN ${eventAttendees.playerType} = 'alternate' THEN 1 END`,\n              ).as(\"alternates\"),\n            })\n            .from(eventAttendees)\n            .where(sql`${eventAttendees.eventId} IN ${eventIds}`)\n            .groupBy(eventAttendees.eventId)\n        : [];\n\n    return rawEvents.map((event) => ({\n      ...event,\n      creator: event.creator || {\n        id: \"\",\n        email: null,\n        firstName: null,\n        lastName: null,\n        profileImageUrl: null,\n        primaryCommunity: null,\n        username: null,\n        bio: null,\n        location: null,\n        website: null,\n        status: null,\n        statusMessage: null,\n        timezone: null,\n        dateOfBirth: null,\n        isPrivate: false,\n        showOnlineStatus: \"everyone\",\n        allowDirectMessages: \"everyone\",\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      community: event.community,\n      attendeeCount:\n        playerCounts.find(\n          (pc: {\n            eventId: string;\n            totalCount: number;\n            mainPlayers: number;\n            alternates: number;\n          }) => pc.eventId === event.id,\n        )?.totalCount || 0,\n      mainPlayers:\n        playerCounts.find(\n          (pc: {\n            eventId: string;\n            totalCount: number;\n            mainPlayers: number;\n            alternates: number;\n          }) => pc.eventId === event.id,\n        )?.mainPlayers || 0,\n      alternates:\n        playerCounts.find(\n          (pc: {\n            eventId: string;\n            totalCount: number;\n            mainPlayers: number;\n            alternates: number;\n          }) => pc.eventId === event.id,\n        )?.alternates || 0,\n    })) as (Event & {\n      creator: User;\n      community: Community | null;\n      attendeeCount: number;\n      mainPlayers: number;\n      alternates: number;\n    })[];\n  }\n\n  // Password reset operations\n  async createPasswordResetToken(\n    data: InsertPasswordResetToken,\n  ): Promise<PasswordResetToken> {\n    const [token] = await db\n      .insert(passwordResetTokens)\n      .values(data)\n      .returning();\n    if (!token) {\n      throw new Error(\"Database operation failed\");\n    }\n    return token;\n  }\n\n  async getPasswordResetToken(\n    token: string,\n  ): Promise<PasswordResetToken | undefined> {\n    const [resetToken] = await db\n      .select()\n      .from(passwordResetTokens)\n      .where(\n        and(\n          eq(passwordResetTokens.token, token),\n          // eq(passwordResetTokens.isUsed, false), // TODO: Schema uses usedAt not isUsed\n          sql`${passwordResetTokens.usedAt} IS NULL`,\n          gte(passwordResetTokens.expiresAt, new Date()),\n        ),\n      );\n    if (!resetToken) {\n      throw new Error(\"Database operation failed\");\n    }\n    return resetToken;\n  }\n\n  async markTokenAsUsed(token: string): Promise<void> {\n    await db\n      .update(passwordResetTokens)\n      // .set({ isUsed: true }) // TODO: Schema uses usedAt not isUsed\n      .set({ usedAt: new Date() })\n      .where(eq(passwordResetTokens.token, token));\n  }\n\n  async cleanupExpiredTokens(): Promise<void> {\n    await db\n      .delete(passwordResetTokens)\n      .where(sql`${passwordResetTokens.expiresAt} < ${new Date()}`);\n  }\n\n  async invalidateUserPasswordResetTokens(userId: string): Promise<void> {\n    // First get the user's email to find their tokens\n    // const user = await this.getUser(userId); // Removed - email field doesn't exist on passwordResetTokens\n    // if (!user?.email) return;\n\n    await db\n      .update(passwordResetTokens)\n      // .set({ isUsed: true }) // TODO: Schema uses usedAt not isUsed\n      .set({ usedAt: new Date() })\n      .where(\n        and(\n          // eq(passwordResetTokens.email, user.email), // TODO: email field doesn't exist on passwordResetTokens\n          eq(passwordResetTokens.userId, userId),\n          // eq(passwordResetTokens.isUsed, false) // TODO: Schema uses usedAt not isUsed\n          sql`${passwordResetTokens.usedAt} IS NULL`,\n        ),\n      );\n  }\n\n  // Email verification operations\n  async createEmailVerificationToken(\n    data: InsertEmailVerificationToken,\n  ): Promise<EmailVerificationToken> {\n    const [token] = await db\n      .insert(emailVerificationTokens)\n      .values(data)\n      .returning();\n    if (!token) {\n      throw new Error(\"Database operation failed\");\n    }\n    return token;\n  }\n\n  async getEmailVerificationToken(\n    token: string,\n  ): Promise<EmailVerificationToken | undefined> {\n    const [verificationToken] = await db\n      .select()\n      .from(emailVerificationTokens)\n      .where(\n        and(\n          eq(emailVerificationTokens.token, token),\n          // eq(emailVerificationTokens.isUsed, false), // TODO: Schema uses verifiedAt not isUsed\n          sql`${emailVerificationTokens.verifiedAt} IS NULL`,\n          gte(emailVerificationTokens.expiresAt, new Date()),\n        ),\n      );\n    if (!verificationToken) {\n      throw new Error(\"Database operation failed\");\n    }\n    return verificationToken;\n  }\n\n  async markEmailVerificationTokenAsUsed(token: string): Promise<void> {\n    await db\n      .update(emailVerificationTokens)\n      // .set({ isUsed: true }) // TODO: Schema uses verifiedAt not isUsed\n      .set({ verifiedAt: new Date() })\n      .where(eq(emailVerificationTokens.token, token));\n  }\n\n  async cleanupExpiredEmailVerificationTokens(): Promise<void> {\n    await db\n      .delete(emailVerificationTokens)\n      .where(sql`${emailVerificationTokens.expiresAt} < ${new Date()}`);\n  }\n\n  async getEmailVerificationTokenByUserId(\n    userId: string,\n  ): Promise<EmailVerificationToken | undefined> {\n    const [verificationToken] = await db\n      .select()\n      .from(emailVerificationTokens)\n      .where(\n        and(\n          eq(emailVerificationTokens.userId, userId),\n          // eq(emailVerificationTokens.isUsed, false), // TODO: Schema uses verifiedAt not isUsed\n          sql`${emailVerificationTokens.verifiedAt} IS NULL`,\n          gte(emailVerificationTokens.expiresAt, new Date()),\n        ),\n      )\n      .orderBy(sql`${emailVerificationTokens.createdAt} DESC`);\n    if (!verificationToken) {\n      throw new Error(\"Database operation failed\");\n    }\n    return verificationToken;\n  }\n\n  async invalidateUserEmailVerificationTokens(userId: string): Promise<void> {\n    await db\n      .update(emailVerificationTokens)\n      // .set({ isUsed: true }) // TODO: Schema uses verifiedAt not isUsed\n      .set({ verifiedAt: new Date() })\n      .where(\n        and(\n          eq(emailVerificationTokens.userId, userId),\n          // eq(emailVerificationTokens.isUsed, false) // TODO: Schema uses verifiedAt not isUsed\n          sql`${emailVerificationTokens.verifiedAt} IS NULL`,\n        ),\n      );\n  }\n\n  // Email change operations implementation\n  async createEmailChangeRequest(\n    data: InsertEmailChangeRequest,\n  ): Promise<EmailChangeRequest> {\n    const [request] = await db\n      .insert(emailChangeRequests)\n      .values(data)\n      .returning();\n    if (!request) {\n      throw new Error(\"Database operation failed\");\n    }\n    return request;\n  }\n\n  async getEmailChangeRequest(\n    id: string,\n  ): Promise<EmailChangeRequest | undefined> {\n    const [request] = await db\n      .select()\n      .from(emailChangeRequests)\n      .where(eq(emailChangeRequests.id, id));\n    return request;\n  }\n\n  async getUserEmailChangeRequest(\n    userId: string,\n  ): Promise<EmailChangeRequest | undefined> {\n    const [request] = await db\n      .select()\n      .from(emailChangeRequests)\n      .where(\n        and(\n          eq(emailChangeRequests.userId, userId),\n          eq(emailChangeRequests.status, \"pending\"),\n          gte(emailChangeRequests.expiresAt, new Date()),\n        ),\n      )\n      .orderBy(sql`${emailChangeRequests.initiatedAt} DESC`);\n    return request;\n  }\n\n  async updateEmailChangeRequest(\n    id: string,\n    data: Partial<InsertEmailChangeRequest>,\n  ): Promise<EmailChangeRequest> {\n    const [request] = await db\n      .update(emailChangeRequests)\n      .set(data)\n      .where(eq(emailChangeRequests.id, id))\n      .returning();\n    if (!request) {\n      throw new Error(\"Database operation failed\");\n    }\n    return request;\n  }\n\n  async createEmailChangeToken(\n    data: InsertEmailChangeToken,\n  ): Promise<EmailChangeToken> {\n    const [token] = await db.insert(emailChangeTokens).values(data).returning();\n    if (!token) {\n      throw new Error(\"Database operation failed\");\n    }\n    return token;\n  }\n\n  async getEmailChangeToken(\n    token: string,\n  ): Promise<EmailChangeToken | undefined> {\n    const [changeToken] = await db\n      .select()\n      .from(emailChangeTokens)\n      .where(\n        and(\n          eq(emailChangeTokens.token, token),\n          eq(emailChangeTokens.isUsed, false),\n          gte(emailChangeTokens.expiresAt, new Date()),\n        ),\n      );\n    return changeToken;\n  }\n\n  async markEmailChangeTokenAsUsed(token: string): Promise<void> {\n    await db\n      .update(emailChangeTokens)\n      .set({ isUsed: true, usedAt: new Date() })\n      .where(eq(emailChangeTokens.token, token));\n  }\n\n  async cleanupExpiredEmailChangeTokens(): Promise<void> {\n    await db\n      .delete(emailChangeTokens)\n      .where(sql`${emailChangeTokens.expiresAt} < ${new Date()}`);\n  }\n\n  async cancelEmailChangeRequest(userId: string): Promise<void> {\n    await db\n      .update(emailChangeRequests)\n      .set({ status: \"cancelled\" })\n      .where(\n        and(\n          eq(emailChangeRequests.userId, userId),\n          eq(emailChangeRequests.status, \"pending\"),\n        ),\n      );\n  }\n\n  // MFA operations implementation\n  async getUserMfaSettings(\n    userId: string,\n  ): Promise<UserMfaSettings | undefined> {\n    const [mfaSettings] = await db\n      .select()\n      .from(userMfaSettings)\n      .where(eq(userMfaSettings.userId, userId));\n    if (!mfaSettings) {\n      throw new Error(\"Database operation failed\");\n    }\n    return mfaSettings;\n  }\n\n  async createUserMfaSettings(\n    data: InsertUserMfaSettings,\n  ): Promise<UserMfaSettings> {\n    const [mfaSettings] = await db\n      .insert(userMfaSettings)\n      .values(data)\n      .returning();\n    if (!mfaSettings) {\n      throw new Error(\"Database operation failed\");\n    }\n    return mfaSettings;\n  }\n\n  async updateUserMfaSettings(\n    userId: string,\n    data: Partial<InsertUserMfaSettings>,\n  ): Promise<void> {\n    await db\n      .update(userMfaSettings)\n      .set(data)\n      .where(eq(userMfaSettings.userId, userId));\n  }\n\n  async enableUserMfa(\n    userId: string,\n    totpSecret: string,\n    backupCodes: string[],\n  ): Promise<void> {\n    const now = new Date();\n\n    // SECURITY: backupCodes are already hashed by caller (routes layer) using Argon2id\n    // No additional hashing needed here to prevent double-hashing\n\n    // Update or create MFA settings\n    const existingSettings = await this.getUserMfaSettings(userId);\n\n    if (existingSettings) {\n      await db\n        .update(userMfaSettings)\n        .set({\n          enabled: true,\n          secret: totpSecret,\n          backupCodes: JSON.stringify(backupCodes), // Store as JSON string in SQLite\n          updatedAt: now,\n        })\n        .where(eq(userMfaSettings.userId, userId));\n    } else {\n      await db.insert(userMfaSettings).values({\n        userId,\n        enabled: true,\n        secret: totpSecret,\n        backupCodes: JSON.stringify(backupCodes), // Store as JSON string in SQLite\n        createdAt: now,\n        updatedAt: now,\n      });\n    }\n\n    // Update user's MFA flag\n    await db\n      .update(users)\n      .set({\n        mfaEnabled: true,\n        mfaEnabledAt: now,\n      })\n      .where(eq(users.id, userId));\n  }\n\n  async disableUserMfa(userId: string): Promise<void> {\n    // Disable MFA settings\n    await db\n      .update(userMfaSettings)\n      .set({\n        enabled: false,\n        secret: \"\", // Empty string instead of null since it's notNull\n        backupCodes: null,\n        updatedAt: new Date(),\n      })\n      .where(eq(userMfaSettings.userId, userId));\n\n    // Update user's MFA flag\n    await db\n      .update(users)\n      .set({\n        mfaEnabled: false,\n        mfaEnabledAt: null,\n      })\n      .where(eq(users.id, userId));\n  }\n\n  async updateUserMfaLastVerified(userId: string): Promise<void> {\n    await db\n      .update(userMfaSettings)\n      .set({ updatedAt: new Date() }) // lastVerifiedAt doesn't exist in schema, use updatedAt\n      .where(eq(userMfaSettings.userId, userId));\n  }\n\n  async markBackupCodeAsUsed(userId: string, codeIndex: number): Promise<void> {\n    const settings = await this.getUserMfaSettings(userId);\n    if (!settings || !settings.backupCodes) return;\n\n    // Parse JSON string array, remove used code, then stringify back\n    const codes = JSON.parse(settings.backupCodes);\n    codes.splice(codeIndex, 1);\n\n    await db\n      .update(userMfaSettings)\n      .set({\n        backupCodes: JSON.stringify(codes),\n        updatedAt: new Date(),\n      })\n      .where(eq(userMfaSettings.userId, userId));\n  }\n\n  // MFA attempt tracking implementation for throttling and lockout\n  async getUserMfaAttempts(\n    userId: string,\n  ): Promise<UserMfaAttempts | undefined> {\n    const [attempts] = await db\n      .select()\n      .from(userMfaAttempts)\n      .where(eq(userMfaAttempts.userId, userId));\n    if (!attempts) {\n      throw new Error(\"Database operation failed\");\n    }\n    return attempts;\n  }\n\n  async recordMfaFailure(userId: string): Promise<void> {\n    const windowDurationMs = 15 * 60 * 1000; // 15 minutes failure window\n    const now = Date.now();\n\n    const existing = await db\n      .select()\n      .from(userMfaAttempts)\n      .where(eq(userMfaAttempts.userId, userId))\n      .limit(1);\n\n    if (existing.length === 0) {\n      // Insert new record\n      await db.insert(userMfaAttempts).values({\n        userId,\n        attemptType: \"totp\",\n        success: false,\n        ipAddress: \"\",\n        failedAttempts: 1,\n        lastFailedAt: new Date(),\n        lockedUntil: null,\n        windowStartedAt: new Date(),\n        createdAt: new Date(),\n      });\n    } else {\n      const record = existing[0]; // Safe: we checked existing.length > 0 above\n      if (!record) {\n        throw new Error(\"Unexpected: existing record not found\");\n      }\n      const windowStart = record.windowStartedAt\n        ? record.windowStartedAt.getTime()\n        : 0;\n      const isWindowExpired = now - windowStart > windowDurationMs;\n      const isCurrentlyLocked =\n        record.lockedUntil && record.lockedUntil.getTime() > now;\n\n      // If locked, don't update anything\n      if (isCurrentlyLocked) {\n        return;\n      }\n\n      // Calculate new failure count\n      let newFailedAttempts = isWindowExpired\n        ? 1\n        : (record.failedAttempts || 0) + 1;\n\n      // Calculate lockout time based on failure count\n      let lockedUntil: Date | null = null;\n      if (newFailedAttempts >= 5) {\n        lockedUntil = new Date(now + 30 * 60 * 1000); // 30 minutes\n      } else if (newFailedAttempts === 4) {\n        lockedUntil = new Date(now + 8 * 60 * 1000); // 8 minutes\n      } else if (newFailedAttempts === 3) {\n        lockedUntil = new Date(now + 2 * 60 * 1000); // 2 minutes\n      } else if (newFailedAttempts === 2) {\n        lockedUntil = new Date(now + 30 * 1000); // 30 seconds\n      }\n\n      await db\n        .update(userMfaAttempts)\n        .set({\n          failedAttempts: newFailedAttempts,\n          windowStartedAt: isWindowExpired\n            ? new Date()\n            : record.windowStartedAt,\n          lockedUntil,\n          lastFailedAt: new Date(),\n        })\n        .where(eq(userMfaAttempts.userId, userId));\n    }\n  }\n\n  async resetMfaAttempts(userId: string): Promise<void> {\n    await db\n      .update(userMfaAttempts)\n      .set({\n        failedAttempts: 0,\n        lastFailedAt: null,\n        lockedUntil: null,\n      })\n      .where(eq(userMfaAttempts.userId, userId));\n  }\n\n  async checkMfaLockout(\n    userId: string,\n  ): Promise<{\n    isLocked: boolean;\n    lockoutEndsAt?: Date;\n    failedAttempts: number;\n  }> {\n    const attempts = await this.getUserMfaAttempts(userId);\n\n    if (!attempts) {\n      return { isLocked: false, failedAttempts: 0 };\n    }\n\n    const now = new Date();\n    const isLocked = attempts.lockedUntil && attempts.lockedUntil > now;\n\n    return {\n      isLocked: !!isLocked,\n      lockoutEndsAt: isLocked ? attempts.lockedUntil || undefined : undefined,\n      failedAttempts: attempts.failedAttempts || 0,\n    };\n  }\n\n  async cleanupExpiredMfaLockouts(): Promise<void> {\n    const now = new Date();\n    await db\n      .update(userMfaAttempts)\n      .set({\n        failedAttempts: 0,\n        lastFailedAt: null,\n        lockedUntil: null,\n      })\n      .where(\n        and(\n          isNotNull(userMfaAttempts.lockedUntil),\n          lte(userMfaAttempts.lockedUntil, now),\n        ),\n      );\n  }\n\n  // Device fingerprinting implementation for enhanced MFA security\n  async getDeviceFingerprint(\n    fingerprintHash: string,\n  ): Promise<DeviceFingerprint | undefined> {\n    const [fingerprint] = await db\n      .select()\n      .from(deviceFingerprints)\n      .where(eq(deviceFingerprints.fingerprintHash, fingerprintHash))\n      .limit(1);\n    if (!fingerprint) {\n      throw new Error(\"Database operation failed\");\n    }\n    return fingerprint;\n  }\n\n  async getUserDeviceFingerprints(\n    userId: string,\n  ): Promise<DeviceFingerprint[]> {\n    return await db\n      .select()\n      .from(deviceFingerprints)\n      .where(\n        and(\n          eq(deviceFingerprints.userId, userId),\n          eq(deviceFingerprints.isActive, true),\n        ),\n      )\n      .orderBy(desc(deviceFingerprints.lastSeen)); // Changed from lastSeenAt to lastSeen\n  }\n\n  async createDeviceFingerprint(\n    data: InsertDeviceFingerprint,\n  ): Promise<DeviceFingerprint> {\n    const [fingerprint] = await db\n      .insert(deviceFingerprints)\n      .values(data)\n      .returning();\n    if (!fingerprint) {\n      throw new Error(\"Database operation failed\");\n    }\n    return fingerprint;\n  }\n\n  async updateDeviceFingerprint(\n    id: string,\n    data: Partial<InsertDeviceFingerprint>,\n  ): Promise<void> {\n    await db\n      .update(deviceFingerprints)\n      .set(data)\n      .where(eq(deviceFingerprints.id, id));\n  }\n\n  async deleteDeviceFingerprint(id: string): Promise<void> {\n    await db\n      .update(deviceFingerprints)\n      .set({\n        isActive: false,\n      })\n      .where(eq(deviceFingerprints.id, id));\n  }\n\n  async updateDeviceLastSeen(fingerprintHash: string): Promise<void> {\n    await db\n      .update(deviceFingerprints)\n      .set({\n        lastSeen: new Date(), // Changed from lastSeenAt to lastSeen\n      })\n      .where(eq(deviceFingerprints.fingerprintHash, fingerprintHash));\n  }\n\n  // MFA security context implementation\n  async createMfaSecurityContext(\n    data: InsertMfaSecurityContext,\n  ): Promise<MfaSecurityContext> {\n    const [context] = await db\n      .insert(mfaSecurityContext)\n      .values(data)\n      .returning();\n    if (!context) {\n      throw new Error(\"Database operation failed\");\n    }\n    return context;\n  }\n\n  async getMfaSecurityContext(\n    userId: string,\n    options?: { limit?: number; onlyFailures?: boolean },\n  ): Promise<MfaSecurityContext[]> {\n    const { limit = 50, onlyFailures = false } = options || {};\n\n    const conditions = [eq(mfaSecurityContext.userId, userId)];\n    if (onlyFailures) {\n      conditions.push(eq(mfaSecurityContext.isSuccessful, false));\n    }\n\n    return await db\n      .select()\n      .from(mfaSecurityContext)\n      .where(and(...conditions))\n      .orderBy(desc(mfaSecurityContext.createdAt))\n      .limit(limit);\n  }\n\n  async updateMfaSecurityContext(\n    id: string,\n    data: Partial<InsertMfaSecurityContext>,\n  ): Promise<void> {\n    await db\n      .update(mfaSecurityContext)\n      .set(data)\n      .where(eq(mfaSecurityContext.id, id));\n  }\n\n  // Trusted device management implementation\n  async getUserTrustedDevices(\n    userId: string,\n  ): Promise<(TrustedDevice & { deviceFingerprint: DeviceFingerprint })[]> {\n    return (await db\n      .select({\n        id: trustedDevices.id,\n        userId: trustedDevices.userId,\n        deviceFingerprintId: trustedDevices.deviceFingerprintId,\n        name: trustedDevices.name,\n        description: trustedDevices.description,\n        trustLevel: trustedDevices.trustLevel,\n        autoTrustMfa: trustedDevices.autoTrustMfa,\n        trustDurationDays: trustedDevices.trustDurationDays,\n        lastUsedAt: trustedDevices.lastUsedAt,\n        totalLogins: trustedDevices.totalLogins,\n        isActive: trustedDevices.isActive,\n        revokedAt: trustedDevices.revokedAt,\n        revokedReason: trustedDevices.revokedReason,\n        expiresAt: trustedDevices.expiresAt,\n        verifiedAt: trustedDevices.verifiedAt,\n        verificationMethod: trustedDevices.verificationMethod,\n        trustedAt: trustedDevices.trustedAt,\n        lastUsed: trustedDevices.lastUsed,\n        deviceFingerprint: deviceFingerprints,\n      })\n      .from(trustedDevices)\n      .innerJoin(\n        deviceFingerprints,\n        eq(trustedDevices.deviceFingerprintId, deviceFingerprints.id),\n      )\n      .where(\n        and(\n          eq(trustedDevices.userId, userId),\n          eq(trustedDevices.isActive, true),\n          or(\n            eq(trustedDevices.expiresAt, sql`NULL`),\n            gte(trustedDevices.expiresAt, new Date()),\n          ),\n        ),\n      )\n      .orderBy(\n        desc(trustedDevices.lastUsedAt),\n      )) as unknown as (TrustedDevice & {\n      deviceFingerprint: DeviceFingerprint;\n    })[];\n  }\n\n  async createTrustedDevice(data: InsertTrustedDevice): Promise<TrustedDevice> {\n    const [trustedDevice] = await db\n      .insert(trustedDevices)\n      .values(data)\n      .returning();\n    if (!trustedDevice) {\n      throw new Error(\"Database operation failed\");\n    }\n    return trustedDevice;\n  }\n\n  async updateTrustedDevice(\n    id: string,\n    data: Partial<InsertTrustedDevice>,\n  ): Promise<void> {\n    await db.update(trustedDevices).set(data).where(eq(trustedDevices.id, id));\n  }\n\n  async revokeTrustedDevice(id: string, reason: string): Promise<void> {\n    const now = new Date();\n    await db\n      .update(trustedDevices)\n      .set({\n        isActive: false,\n        isRevoked: true,\n        revokedAt: now,\n        revokedReason: reason,\n      })\n      .where(eq(trustedDevices.id, id));\n  }\n\n  async cleanupExpiredTrustedDevices(): Promise<void> {\n    const now = new Date();\n    await db\n      .update(trustedDevices)\n      .set({\n        isActive: false,\n        isRevoked: true,\n        revokedReason: \"expired\",\n      })\n      .where(\n        and(\n          eq(trustedDevices.isActive, true),\n          isNotNull(trustedDevices.expiresAt),\n          lte(trustedDevices.expiresAt, now),\n        ),\n      );\n  }\n\n  // Device security validation implementation\n  async calculateDeviceRiskScore(\n    userId: string,\n    context: {\n      userAgent: string;\n      ipAddress: string;\n      location?: string;\n      timezone?: string;\n    },\n  ): Promise<{ riskScore: number; riskFactors: string[] }> {\n    const riskFactors: string[] = [];\n    let riskScore = 0.1; // Base risk score\n\n    // Get user's historical device patterns\n    const userDevices = await this.getUserDeviceFingerprints(userId);\n    const recentContexts = await this.getMfaSecurityContext(userId, {\n      limit: 20,\n    });\n\n    // Check for new device (fingerprint not in user's devices)\n    // Note: deviceFingerprints schema doesn't have userAgent field\n    const hasSeenDevice = userDevices.length > 0;\n    if (!hasSeenDevice) {\n      riskScore += 0.3;\n      riskFactors.push(\"new_device\");\n    }\n\n    // Check for new IP range (simplified check - first 3 octets)\n    const currentIpPrefix = context.ipAddress.split(\".\").slice(0, 3).join(\".\");\n    const hasSeenIpRange = recentContexts.some(\n      (ctx) =>\n        ctx.ipAddress &&\n        ctx.ipAddress.split(\".\").slice(0, 3).join(\".\") === currentIpPrefix,\n    );\n    if (!hasSeenIpRange) {\n      riskScore += 0.2;\n      riskFactors.push(\"new_ip_range\");\n    }\n\n    // Check for new location\n    if (context.location) {\n      const hasSeenLocation = recentContexts.some(\n        (ctx) => ctx.location === context.location,\n      );\n      if (!hasSeenLocation) {\n        riskScore += 0.2;\n        riskFactors.push(\"new_location\");\n      }\n    }\n\n    // Check for recent failed attempts\n    const recentFailures = recentContexts.filter(\n      (ctx) =>\n        !ctx.isSuccessful &&\n        ctx.createdAt &&\n        new Date().getTime() - ctx.createdAt.getTime() < 24 * 60 * 60 * 1000, // 24 hours\n    );\n    if (recentFailures.length > 3) {\n      riskScore += 0.3;\n      riskFactors.push(\"recent_failed_attempts\");\n    }\n\n    // Check for suspicious timing patterns (multiple attempts in short period)\n    const recentAttempts = recentContexts.filter(\n      (ctx) =>\n        ctx.createdAt &&\n        new Date().getTime() - ctx.createdAt.getTime() < 60 * 60 * 1000, // 1 hour\n    );\n    if (recentAttempts.length > 5) {\n      riskScore += 0.2;\n      riskFactors.push(\"rapid_attempts\");\n    }\n\n    // Cap risk score at 1.0\n    riskScore = Math.min(riskScore, 1.0);\n\n    return { riskScore, riskFactors };\n  }\n\n  async validateDeviceContext(\n    userId: string,\n    fingerprintHash: string,\n  ): Promise<{\n    isValid: boolean;\n    trustScore: number;\n    requiresAdditionalVerification: boolean;\n    deviceFingerprint?: DeviceFingerprint;\n  }> {\n    // Get or create device fingerprint\n    let deviceFingerprint = await this.getDeviceFingerprint(fingerprintHash);\n\n    if (!deviceFingerprint) {\n      // New device - low trust score, requires additional verification\n      return {\n        isValid: false,\n        trustScore: 0.1,\n        requiresAdditionalVerification: true,\n      };\n    }\n\n    // Check if device belongs to this user\n    if (deviceFingerprint.userId !== userId) {\n      return {\n        isValid: false,\n        trustScore: 0.0,\n        requiresAdditionalVerification: true,\n        deviceFingerprint,\n      };\n    }\n\n    // Check if device is active\n    if (!deviceFingerprint.isActive) {\n      return {\n        isValid: false,\n        trustScore: 0.0,\n        requiresAdditionalVerification: true,\n        deviceFingerprint,\n      };\n    }\n\n    // Calculate trust score based on device history\n    // Note: deviceFingerprints only has: trustScore, firstSeen, lastSeen, isBlocked\n    let trustScore = deviceFingerprint.trustScore || 0.5;\n\n    // Factor in device age (older devices with good history = higher trust)\n    const deviceAgeMs =\n      new Date().getTime() - (deviceFingerprint.firstSeen?.getTime() || 0);\n    const deviceAgeDays = deviceAgeMs / (24 * 60 * 60 * 1000);\n    if (deviceAgeDays > 30) trustScore += 0.2;\n    else if (deviceAgeDays > 7) trustScore += 0.1;\n\n    // Check if blocked\n    if (deviceFingerprint.isBlocked) {\n      trustScore = 0.0;\n    }\n\n    // Cap trust score\n    trustScore = Math.min(Math.max(trustScore, 0.0), 1.0);\n\n    // Determine if additional verification is required\n    const requiresAdditionalVerification = trustScore < 0.6;\n\n    return {\n      isValid: true,\n      trustScore,\n      requiresAdditionalVerification,\n      deviceFingerprint,\n    };\n  }\n\n  /**\n   * Calculate lockout duration using exponential backoff\n   * 0-1 failures: No lockout\n   * 2 failures: 30 seconds\n   * 3 failures: 2 minutes\n   * 4 failures: 8 minutes\n   * 5+ failures: 30 minutes\n   */\n  private calculateLockoutSeconds(failedAttempts: number): number {\n    if (failedAttempts < 2) return 0;\n    if (failedAttempts >= 5) return 30 * 60; // 30 minutes in seconds\n\n    // Exponential backoff in seconds: [30, 120, 480] for attempts [2, 3, 4]\n    const lockoutTimes = [0, 0, 30, 120, 480]; // Index = failedAttempts\n    return lockoutTimes[failedAttempts] || 30 * 60; // Default to 30 minutes\n  }\n\n  // Refresh token operations implementation\n  async createRefreshToken(data: InsertRefreshToken): Promise<RefreshToken> {\n    const [refreshToken] = await db\n      .insert(refreshTokens)\n      .values(data)\n      .returning();\n    if (!refreshToken) {\n      throw new Error(\"Database operation failed\");\n    }\n    return refreshToken;\n  }\n\n  async getRefreshToken(tokenId: string): Promise<RefreshToken | undefined> {\n    const [refreshToken] = await db\n      .select()\n      .from(refreshTokens)\n      .where(\n        and(\n          eq(refreshTokens.id, tokenId),\n          eq(refreshTokens.isRevoked, false),\n          gte(refreshTokens.expiresAt, new Date()),\n        ),\n      );\n    if (!refreshToken) {\n      throw new Error(\"Database operation failed\");\n    }\n    return refreshToken;\n  }\n\n  async getRefreshTokenByJWT(jwt: string): Promise<RefreshToken | undefined> {\n    const [refreshToken] = await db\n      .select()\n      .from(refreshTokens)\n      .where(\n        and(\n          eq(refreshTokens.token, jwt),\n          eq(refreshTokens.isRevoked, false),\n          gte(refreshTokens.expiresAt, new Date()),\n        ),\n      );\n    if (!refreshToken) {\n      throw new Error(\"Database operation failed\");\n    }\n    return refreshToken;\n  }\n\n  async updateRefreshTokenLastUsed(tokenId: string): Promise<void> {\n    await db\n      .update(refreshTokens)\n      .set({ lastUsed: new Date() })\n      .where(eq(refreshTokens.id, tokenId));\n  }\n\n  async revokeRefreshToken(tokenId: string): Promise<void> {\n    await db\n      .update(refreshTokens)\n      .set({ isRevoked: true })\n      .where(eq(refreshTokens.id, tokenId));\n  }\n\n  async revokeAllUserRefreshTokens(userId: string): Promise<void> {\n    await db\n      .update(refreshTokens)\n      .set({ isRevoked: true })\n      .where(eq(refreshTokens.userId, userId));\n  }\n\n  async cleanupExpiredRefreshTokens(): Promise<void> {\n    await db\n      .delete(refreshTokens)\n      .where(\n        or(\n          eq(refreshTokens.isRevoked, true),\n          lte(refreshTokens.expiresAt, new Date()),\n        ),\n      );\n  }\n\n  async getUserActiveRefreshTokens(userId: string): Promise<RefreshToken[]> {\n    return await db\n      .select()\n      .from(refreshTokens)\n      .where(\n        and(\n          eq(refreshTokens.userId, userId),\n          eq(refreshTokens.isRevoked, false),\n          gte(refreshTokens.expiresAt, new Date()),\n        ),\n      )\n      .orderBy(desc(refreshTokens.lastUsed));\n  }\n\n  // Auth audit log operations implementation\n  async createAuthAuditLog(data: InsertAuthAuditLog): Promise<AuthAuditLog> {\n    const [auditLog] = await db\n      .insert(authAuditLog)\n      .values(data) // Type assertion to handle decimal/number type mismatch\n      .returning();\n    if (!auditLog) {\n      throw new Error(\"Failed to create auth audit log\");\n    }\n    return auditLog;\n  }\n\n  // JWT token revocation implementation (enterprise security)\n  async revokeJWT(\n    jti: string,\n    userId: string,\n    tokenType: string,\n    reason: string,\n    expiresAt: Date,\n    originalExpiry?: Date,\n    ipAddress?: string,\n    userAgent?: string,\n  ): Promise<void> {\n    await db.insert(revokedJwtTokens).values({\n      jti,\n      userId,\n      reason,\n      expiresAt,\n      // Note: tokenType, originalExpiry, ipAddress, userAgent, revokedBy are not in schema\n      // These could be added to metadata if needed\n    });\n    logger.info(`JWT token revoked for user`, { userId, hasJti: !!jti });\n  }\n\n  async isJWTRevoked(jti: string): Promise<boolean> {\n    const [result] = await db\n      .select({ id: revokedJwtTokens.id })\n      .from(revokedJwtTokens)\n      .where(eq(revokedJwtTokens.jti, jti))\n      .limit(1);\n    return !!result;\n  }\n\n  async cleanupExpiredRevokedTokens(): Promise<number> {\n    const result = await db\n      .delete(revokedJwtTokens)\n      .where(lte(revokedJwtTokens.expiresAt, new Date()));\n    return result.rowCount || 0;\n  }\n\n  async getAuthAuditLogs(\n    userId?: string,\n    filters?: { eventType?: string; limit?: number; hours?: number },\n  ): Promise<AuthAuditLog[]> {\n    const conditions = [];\n    if (userId) {\n      conditions.push(eq(authAuditLog.userId, userId));\n    }\n    if (filters?.eventType) {\n      conditions.push(eq(authAuditLog.eventType, filters.eventType));\n    }\n\n    // Add time filter if hours is specified\n    if (filters?.hours) {\n      const hoursAgo = new Date(Date.now() - filters.hours * 60 * 60 * 1000);\n      conditions.push(gte(authAuditLog.createdAt, hoursAgo));\n    }\n\n    const baseQuery = db\n      .select()\n      .from(authAuditLog)\n      .where(conditions.length > 0 ? and(...conditions) : undefined)\n      .orderBy(desc(authAuditLog.createdAt));\n\n    if (filters?.limit) {\n      return await baseQuery.limit(filters.limit);\n    }\n\n    return await baseQuery;\n  }\n\n  async getRecentAuthFailures(\n    userId: string,\n    hours: number,\n  ): Promise<AuthAuditLog[]> {\n    const hoursAgo = new Date(Date.now() - hours * 60 * 60 * 1000);\n\n    return await db\n      .select()\n      .from(authAuditLog)\n      .where(\n        and(\n          eq(authAuditLog.userId, userId),\n          eq(authAuditLog.isSuccessful, false),\n          gte(authAuditLog.createdAt, hoursAgo),\n        ),\n      )\n      .orderBy(desc(authAuditLog.createdAt));\n  }\n\n  // Notification operations\n  async getUserNotifications(\n    userId: string,\n    options?: { unreadOnly?: boolean; limit?: number },\n  ): Promise<Notification[]> {\n    let conditions = [eq(notifications.userId, userId)];\n\n    if (options?.unreadOnly) {\n      conditions.push(eq(notifications.isRead, false));\n    }\n\n    const baseQuery = db\n      .select()\n      .from(notifications)\n      .where(and(...conditions));\n\n    const limitedQuery = options?.limit\n      ? baseQuery.limit(options.limit)\n      : baseQuery;\n\n    return await limitedQuery.orderBy(sql`${notifications.createdAt} DESC`);\n  }\n\n  async createNotification(data: InsertNotification): Promise<Notification> {\n    const [notification] = await db\n      .insert(notifications)\n      .values(data)\n      .returning();\n    if (!notification) {\n      throw new Error(\"Database operation failed\");\n    }\n    return notification;\n  }\n\n  async markNotificationAsRead(notificationId: string): Promise<void> {\n    await db\n      .update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.id, notificationId));\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<void> {\n    await db\n      .update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.userId, userId));\n  }\n\n  async deleteNotification(notificationId: string): Promise<void> {\n    await db.delete(notifications).where(eq(notifications.id, notificationId));\n  }\n\n  async getUserNotificationsWithCursor(\n    userId: string,\n    options?: {\n      unreadOnly?: boolean;\n      cursor?: string;\n      limit?: number;\n      sortField?: string;\n      sortDirection?: \"asc\" | \"desc\";\n    },\n  ): Promise<Notification[]> {\n    let conditions = [eq(notifications.userId, userId)];\n\n    if (options?.unreadOnly) {\n      conditions.push(eq(notifications.isRead, false));\n    }\n\n    if (options?.cursor) {\n      // Add cursor-based pagination condition\n      conditions.push(lt(notifications.createdAt, new Date(options.cursor)));\n    }\n\n    return await db\n      .select()\n      .from(notifications)\n      .where(and(...conditions))\n      .orderBy(desc(notifications.createdAt))\n      .limit(options?.limit || 50);\n  }\n\n  // Message operations\n  async getUserMessages(\n    userId: string,\n    options?: { eventId?: string; communityId?: string; limit?: number },\n  ): Promise<(Message & { sender: User; recipient?: User; event?: Event })[]> {\n    let conditions = [\n      sql`(${messages.senderId} = ${userId} OR ${messages.recipientId} = ${userId})`,\n    ];\n\n    if (options?.eventId) {\n      conditions.push(eq(messages.eventId, options.eventId));\n    }\n\n    if (options?.communityId) {\n      conditions.push(eq(messages.communityId, options.communityId));\n    }\n\n    const results = await db\n      .select({\n        message: messages,\n        sender: {\n          id: users.id,\n          email: users.email,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n        },\n      })\n      .from(messages)\n      .leftJoin(users, eq(messages.senderId, users.id))\n      .where(and(...conditions))\n      .orderBy(sql`${messages.createdAt} DESC`)\n      .limit(options?.limit || 50);\n\n    return results.map((r: { message: Message; sender: User | null }) => ({\n      ...r.message,\n      sender: r.sender,\n    }));\n  }\n\n  async sendMessage(data: InsertMessage): Promise<Message> {\n    const [message] = await db.insert(messages).values(data).returning();\n    if (!message) {\n      throw new Error(\"Database operation failed\");\n    }\n    return message;\n  }\n\n  async sendMessageWithTransaction(\n    tx: Transaction,\n    data: InsertMessage,\n  ): Promise<Message> {\n    const [message] = await tx.insert(messages).values(data).returning();\n    return message;\n  }\n\n  async getUserMessagesWithCursor(\n    userId: string,\n    options?: {\n      eventId?: string;\n      communityId?: string;\n      conversationId?: string;\n      unreadOnly?: boolean;\n      cursor?: string;\n      limit?: number;\n      sortField?: string;\n      sortDirection?: \"asc\" | \"desc\";\n    },\n  ): Promise<(Message & { sender: User; recipient?: User; event?: Event })[]> {\n    let conditions = [\n      sql`(${messages.senderId} = ${userId} OR ${messages.recipientId} = ${userId})`,\n    ];\n\n    if (options?.eventId) {\n      conditions.push(eq(messages.eventId, options.eventId));\n    }\n\n    if (options?.communityId) {\n      conditions.push(eq(messages.communityId, options.communityId));\n    }\n\n    if (options?.unreadOnly) {\n      conditions.push(eq(messages.isRead, false));\n    }\n\n    if (options?.cursor) {\n      conditions.push(lt(messages.createdAt, new Date(options.cursor)));\n    }\n\n    const results = await db\n      .select({\n        message: messages,\n        sender: users,\n        event: events,\n      })\n      .from(messages)\n      .leftJoin(users, eq(messages.senderId, users.id))\n      .leftJoin(events, eq(messages.eventId, events.id))\n      .where(and(...conditions))\n      .orderBy(desc(messages.createdAt))\n      .limit(options?.limit || 50);\n\n    return results.map((r: { message: Message; sender: User | null; event: Event | null }) => ({\n      ...r.message,\n      sender: r.sender,\n      event: r.event,\n    }));\n  }\n\n  async markMessageAsRead(messageId: string): Promise<void> {\n    await db\n      .update(messages)\n      .set({ isRead: true })\n      .where(eq(messages.id, messageId));\n  }\n\n  async getConversation(\n    userId1: string,\n    userId2: string,\n  ): Promise<(Message & { sender: User; recipient?: User })[]> {\n    const results = await db\n      .select({\n        message: messages,\n        sender: {\n          id: users.id,\n          email: users.email,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n        },\n      })\n      .from(messages)\n      .leftJoin(users, eq(messages.senderId, users.id))\n      .where(\n        and(\n          sql`((${messages.senderId} = ${userId1} AND ${messages.recipientId} = ${userId2}) OR \n             (${messages.senderId} = ${userId2} AND ${messages.recipientId} = ${userId1}))`,\n        ),\n      )\n      .orderBy(sql`${messages.createdAt} ASC`);\n\n    return results.map((r: { message: Message; sender: User | null }) => ({\n      ...r.message,\n      sender: r.sender,\n    }));\n  }\n\n  // Game session operations\n  async getGameSessionById(\n    id: string,\n  ): Promise<\n    (GameSession & { host: User; coHost?: User; event: Event }) | null\n  > {\n    const results = await db\n      .select({\n        gameSession: gameSessions,\n        host: {\n          id: users.id,\n          email: users.email,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n        },\n        event: events,\n      })\n      .from(gameSessions)\n      .leftJoin(users, eq(gameSessions.hostId, users.id))\n      .leftJoin(events, eq(gameSessions.eventId, events.id))\n      .where(eq(gameSessions.id, id))\n      .limit(1);\n\n    if (results.length === 0) {\n      return null;\n    }\n\n    const r = results[0];\n    if (!r) {\n      return null;\n    }\n    return {\n      ...r.gameSession,\n      host: r.host as User,\n      event: r.event as Event,\n    };\n  }\n\n  async getGameSessions(filters?: {\n    eventId?: string;\n    communityId?: string;\n    hostId?: string;\n    status?: string;\n  }): Promise<(GameSession & { host: User; coHost?: User; event: Event })[]> {\n    let conditions = [];\n\n    if (filters?.eventId) {\n      conditions.push(eq(gameSessions.eventId, filters.eventId));\n    }\n\n    if (filters?.communityId) {\n      conditions.push(eq(gameSessions.communityId, filters.communityId));\n    }\n\n    if (filters?.hostId) {\n      conditions.push(eq(gameSessions.hostId, filters.hostId));\n    }\n\n    if (filters?.status) {\n      conditions.push(eq(gameSessions.status, filters.status as any));\n    }\n\n    const results = await db\n      .select({\n        gameSession: gameSessions,\n        host: {\n          id: users.id,\n          email: users.email,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n        },\n        event: events,\n      })\n      .from(gameSessions)\n      .leftJoin(users, eq(gameSessions.hostId, users.id))\n      .leftJoin(events, eq(gameSessions.eventId, events.id))\n      .where(conditions.length > 0 ? and(...conditions) : undefined)\n      .orderBy(sql`${gameSessions.createdAt} DESC`);\n\n    return results.map((r: { gameSession: GameSession; host: User | null; event: Event | null }) => ({\n      ...r.gameSession,\n      host: r.host as User,\n      event: r.event as Event,\n    }));\n  }\n\n  async createGameSession(data: InsertGameSession): Promise<GameSession> {\n    const [gameSession] = await db\n      .insert(gameSessions)\n      .values(data)\n      .returning();\n    if (!gameSession) {\n      throw new Error(\"Database operation failed\");\n    }\n    return gameSession;\n  }\n\n  async updateGameSession(\n    id: string,\n    data: Partial<InsertGameSession>,\n  ): Promise<GameSession> {\n    const [gameSession] = await db\n      .update(gameSessions)\n      .set(data)\n      .where(eq(gameSessions.id, id))\n      .returning();\n    if (!gameSession) {\n      throw new Error(\"Failed to update game session\");\n    }\n    return gameSession;\n  }\n\n  async joinGameSession(sessionId: string, userId: string): Promise<void> {\n    // Increment current players count\n    await db\n      .update(gameSessions)\n      .set({ currentPlayers: sql`${gameSessions.currentPlayers} + 1` })\n      .where(eq(gameSessions.id, sessionId));\n  }\n\n  async leaveGameSession(sessionId: string, userId: string): Promise<void> {\n    // Decrement current players count\n    await db\n      .update(gameSessions)\n      .set({\n        currentPlayers: sql`GREATEST(${gameSessions.currentPlayers} - 1, 0)`,\n      })\n      .where(eq(gameSessions.id, sessionId));\n  }\n\n  async spectateGameSession(sessionId: string, userId: string): Promise<void> {\n    // Increment spectator count\n    await db\n      .update(gameSessions)\n      .set({ spectators: sql`${gameSessions.spectators} + 1` })\n      .where(eq(gameSessions.id, sessionId));\n  }\n\n  async leaveSpectating(sessionId: string, userId: string): Promise<void> {\n    // Decrement spectator count\n    await db\n      .update(gameSessions)\n      .set({ spectators: sql`GREATEST(${gameSessions.spectators} - 1, 0)` })\n      .where(eq(gameSessions.id, sessionId));\n  }\n\n  // Social link operations\n  async getUserSocialLinks(userId: string): Promise<UserSocialLink[]> {\n    const links = await db\n      .select()\n      .from(userSocialLinks)\n      .where(eq(userSocialLinks.userId, userId));\n    if (!links) {\n      throw new Error(\"Database operation failed\");\n    }\n    return links;\n  }\n\n  async updateUserSocialLinks(\n    userId: string,\n    links: InsertUserSocialLink[],\n  ): Promise<UserSocialLink[]> {\n    return await db.transaction(async (tx: Transaction) => {\n      // Delete existing links\n      await tx\n        .delete(userSocialLinks)\n        .where(eq(userSocialLinks.userId, userId));\n\n      // Insert new links\n      if (links.length > 0) {\n        const newLinks = await tx\n          .insert(userSocialLinks)\n          .values(links.map((link) => ({ ...link, userId })))\n          .returning();\n        return newLinks;\n      }\n      return [];\n    });\n  }\n\n  // Gaming profile operations\n  async getUserGamingProfiles(\n    userId: string,\n  ): Promise<(UserGamingProfile & { community: Community })[]> {\n    const profiles = await db\n      .select({\n        id: userGamingProfiles.id,\n        userId: userGamingProfiles.userId,\n        communityId: userGamingProfiles.communityId,\n        rank: userGamingProfiles.rank,\n        experience: userGamingProfiles.experience,\n        favoriteDeck: userGamingProfiles.favoriteDeck,\n        achievements: userGamingProfiles.achievements,\n        statistics: userGamingProfiles.statistics,\n        isVisible: userGamingProfiles.isVisible,\n        createdAt: userGamingProfiles.createdAt,\n        updatedAt: userGamingProfiles.updatedAt,\n        community: communities,\n      })\n      .from(userGamingProfiles)\n      .innerJoin(\n        communities,\n        eq(userGamingProfiles.communityId, communities.id),\n      )\n      .where(eq(userGamingProfiles.userId, userId));\n    if (!profiles) {\n      throw new Error(\"Database operation failed\");\n    }\n    return profiles as unknown as (UserGamingProfile & {\n      community: Community;\n    })[];\n  }\n\n  async upsertUserGamingProfile(\n    data: InsertUserGamingProfile,\n  ): Promise<UserGamingProfile> {\n    const [profile] = await db\n      .insert(userGamingProfiles)\n      .values(data)\n      .onConflictDoUpdate({\n        target: [userGamingProfiles.userId, userGamingProfiles.communityId],\n        set: {\n          ...data,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    if (!profile) {\n      throw new Error(\"Failed to upsert user gaming profile\");\n    }\n    return profile;\n  }\n\n  // Friendship operations\n  async getFriends(\n    userId: string,\n  ): Promise<(Friendship & { requester: User; addressee: User })[]> {\n    const requesterUser = alias(users, \"requesterUser\");\n    const addresseeUser = alias(users, \"addresseeUser\");\n\n    const results = await db\n      .select({\n        id: friendships.id,\n        requesterId: friendships.requesterId,\n        addresseeId: friendships.addresseeId,\n        status: friendships.status,\n        createdAt: friendships.createdAt,\n        updatedAt: friendships.updatedAt,\n        requester: requesterUser,\n        addressee: addresseeUser,\n      })\n      .from(friendships)\n      .innerJoin(requesterUser, eq(friendships.requesterId, requesterUser.id))\n      .innerJoin(addresseeUser, eq(friendships.addresseeId, addresseeUser.id))\n      .where(\n        and(\n          eq(friendships.status, \"accepted\"),\n          or(\n            eq(friendships.requesterId, userId),\n            eq(friendships.addresseeId, userId),\n          ),\n        ),\n      );\n\n    return results.map((r: any) => ({\n      ...r,\n      requester: r.requester as User,\n      addressee: r.addressee as User,\n    }));\n  }\n\n  async getFriendRequests(\n    userId: string,\n  ): Promise<(Friendship & { requester: User; addressee: User })[]> {\n    const requesterUser = alias(users, \"requesterUser\");\n    const addresseeUser = alias(users, \"addresseeUser\");\n\n    const results = await db\n      .select({\n        id: friendships.id,\n        requesterId: friendships.requesterId,\n        addresseeId: friendships.addresseeId,\n        status: friendships.status,\n        createdAt: friendships.createdAt,\n        updatedAt: friendships.updatedAt,\n        requester: requesterUser,\n        addressee: addresseeUser,\n      })\n      .from(friendships)\n      .innerJoin(requesterUser, eq(friendships.requesterId, requesterUser.id))\n      .innerJoin(addresseeUser, eq(friendships.addresseeId, addresseeUser.id))\n      .where(\n        and(\n          eq(friendships.status, \"pending\"),\n          eq(friendships.addresseeId, userId),\n        ),\n      );\n\n    return results.map((r: any) => ({\n      ...r,\n      requester: r.requester as User,\n      addressee: r.addressee as User,\n    }));\n  }\n\n  async getFriendCount(userId: string): Promise<number> {\n    const [result] = await db\n      .select({ count: count(friendships.id) })\n      .from(friendships)\n      .where(\n        and(\n          eq(friendships.status, \"accepted\"),\n          or(\n            eq(friendships.requesterId, userId),\n            eq(friendships.addresseeId, userId),\n          ),\n        ),\n      );\n    return result?.count || 0;\n  }\n\n  async checkFriendshipStatus(\n    userId1: string,\n    userId2: string,\n  ): Promise<Friendship | undefined> {\n    const [friendship] = await db\n      .select()\n      .from(friendships)\n      .where(\n        or(\n          and(\n            eq(friendships.requesterId, userId1),\n            eq(friendships.addresseeId, userId2),\n          ),\n          and(\n            eq(friendships.requesterId, userId2),\n            eq(friendships.addresseeId, userId1),\n          ),\n        ),\n      );\n    if (!friendship) {\n      throw new Error(\"Database operation failed\");\n    }\n    return friendship;\n  }\n\n  async sendFriendRequest(\n    requesterId: string,\n    addresseeId: string,\n  ): Promise<Friendship> {\n    const [friendship] = await db\n      .insert(friendships)\n      .values({\n        userId: requesterId,\n        friendId: addresseeId,\n        requesterId,\n        addresseeId,\n        status: \"pending\",\n      })\n      .returning();\n    if (!friendship) {\n      throw new Error(\"Database operation failed\");\n    }\n    return friendship;\n  }\n\n  async respondToFriendRequest(\n    friendshipId: string,\n    status: \"accepted\" | \"declined\" | \"blocked\",\n  ): Promise<Friendship> {\n    const [friendship] = await db\n      .update(friendships)\n      .set({\n        status,\n        updatedAt: new Date(),\n      })\n      .where(eq(friendships.id, friendshipId))\n      .returning();\n    if (!friendship) {\n      throw new Error(\"Failed to update friendship status\");\n    }\n    return friendship;\n  }\n\n  // User activity operations\n  async getUserActivities(\n    userId: string,\n    options?: { limit?: number; communityId?: string },\n  ): Promise<(UserActivity & { community?: Community })[]> {\n    let conditions = [eq(userActivities.userId, userId)];\n\n    if (options?.communityId) {\n      conditions.push(eq(userActivities.communityId, options.communityId));\n    }\n\n    const baseQuery = db\n      .select({\n        id: userActivities.id,\n        userId: userActivities.userId,\n        type: userActivities.type,\n        title: userActivities.title,\n        description: userActivities.description,\n        data: userActivities.data,\n        isPublic: userActivities.isPublic,\n        communityId: userActivities.communityId,\n        createdAt: userActivities.createdAt,\n        community: communities,\n      })\n      .from(userActivities)\n      .leftJoin(communities, eq(userActivities.communityId, communities.id))\n      .where(and(...conditions));\n\n    const limitedQuery = options?.limit\n      ? baseQuery.limit(options.limit)\n      : baseQuery;\n\n    const activities = await limitedQuery.orderBy(\n      sql`${userActivities.createdAt} DESC`,\n    );\n    return activities.map((activity: any) => ({\n      ...activity,\n      community: activity.community || undefined,\n    }));\n  }\n\n  async createUserActivity(data: InsertUserActivity): Promise<UserActivity> {\n    const [activity] = await db.insert(userActivities).values(data).returning();\n    if (!activity) {\n      throw new Error(\"Failed to create user activity\");\n    }\n    return activity;\n  }\n\n  // User settings operations\n  async getUserSettings(userId: string): Promise<UserSettings | undefined> {\n    const [settings] = await db\n      .select()\n      .from(userSettings)\n      .where(eq(userSettings.userId, userId));\n    if (!settings) {\n      throw new Error(\"Database operation failed\");\n    }\n    return settings;\n  }\n\n  async upsertUserSettings(data: InsertUserSettings): Promise<UserSettings> {\n    const [settings] = await db\n      .insert(userSettings)\n      .values(data)\n      .onConflictDoUpdate({\n        target: userSettings.userId,\n        set: {\n          notificationsEnabled: data.notificationsEnabled,\n          emailNotifications: data.emailNotifications,\n          pushNotifications: data.pushNotifications,\n          notificationTypes: data.notificationTypes,\n          privacySettings: data.privacySettings,\n          displayPreferences: data.displayPreferences,\n          language: data.language,\n          timezone: data.timezone,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    if (!settings) {\n      throw new Error(\"Failed to upsert user settings\");\n    }\n    return settings;\n  }\n\n  // Matchmaking operations\n  async getMatchmakingPreferences(\n    userId: string,\n  ): Promise<MatchmakingPreferences | undefined> {\n    const [preferences] = await db\n      .select()\n      .from(matchmakingPreferences)\n      .where(eq(matchmakingPreferences.userId, userId));\n    if (!preferences) {\n      throw new Error(\"Database operation failed\");\n    }\n    return preferences;\n  }\n\n  async upsertMatchmakingPreferences(\n    data: InsertMatchmakingPreferences,\n  ): Promise<MatchmakingPreferences> {\n    const [preferences] = await db\n      .insert(matchmakingPreferences)\n      .values(data)\n      .onConflictDoUpdate({\n        target: matchmakingPreferences.userId,\n        set: {\n          gameType: data.gameType,\n          preferredFormats: data.preferredFormats,\n          skillLevelRange: data.skillLevelRange,\n          availabilitySchedule: data.availabilitySchedule,\n          maxTravelDistance: data.maxTravelDistance,\n          preferredLocation: data.preferredLocation,\n          playStyle: data.playStyle,\n          communicationPreferences: data.communicationPreferences,\n          blockedUsers: data.blockedUsers,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    if (!preferences) {\n      throw new Error(\"Database operation failed\");\n    }\n    return preferences;\n  }\n\n  async findMatchingPlayers(\n    userId: string,\n    preferences: MatchmakingPreferences,\n  ): Promise<{ data: MatchedPlayer[]; hasMore: boolean }> {\n    // Optimized AI Matchmaking Algorithm with performance monitoring\n    return withQueryTiming(\"ai_matchmaking\", async () => {\n      // Pre-filter with indexed query to reduce dataset size\n      const userProfiles = await db\n        .select({\n          user: users,\n          gamingProfile: userGamingProfiles,\n          preferences: matchmakingPreferences,\n          community: communities,\n        })\n        .from(users)\n        .leftJoin(userGamingProfiles, eq(users.id, userGamingProfiles.userId))\n        .leftJoin(\n          matchmakingPreferences,\n          eq(users.id, matchmakingPreferences.userId),\n        )\n        .leftJoin(\n          communities,\n          eq(userGamingProfiles.communityId, communities.id),\n        )\n        .where(\n          and(\n            not(eq(users.id, userId)), // Exclude self\n            eq(users.status, \"online\"), // Only online users (indexed)\n            eq(userGamingProfiles.isVisible, true), // Only visible profiles (indexed)\n          ),\n        )\n        .limit(100); // Limit candidates for performance optimization\n\n      // Calculate match scores\n      type UserProfile = {\n        user: User | null;\n        gamingProfile: UserGamingProfile | null;\n        preferences: MatchmakingPreferences | null;\n        community: Community | null;\n      };\n      \n      type ValidatedProfile = Omit<UserProfile, 'user' | 'gamingProfile'> & {\n        user: User;\n        gamingProfile: UserGamingProfile;\n      };\n      \n      const scoredMatches = userProfiles\n        .filter((profile): profile is ValidatedProfile => \n          profile.user !== null && profile.gamingProfile !== null\n        )\n        .map((profile): MatchedPlayer => {\n          let score = 0;\n          const user = profile.user;\n          const gaming = profile.gamingProfile;\n          const userPrefs = profile.preferences;\n\n          // Game type matching (high weight)\n          if (gaming.gameType === preferences.gameType) {\n            score += 30;\n          }\n\n          // Format compatibility (medium weight)\n          if (preferences.preferredFormats && gaming.preferredFormats) {\n            const userFormats = JSON.parse(gaming.preferredFormats || \"[]\");\n            const prefFormats = JSON.parse(\n              preferences.preferredFormats || \"[]\",\n            );\n            const sharedFormats = userFormats.filter((f: string) =>\n              prefFormats.includes(f),\n            );\n            if (sharedFormats.length > 0) score += 20;\n          }\n\n          // Play style matching (medium weight)\n          if (userPrefs?.playStyle === preferences.playStyle) {\n            score += 15;\n          }\n\n          // Location proximity (medium weight)\n          if (!preferences.preferredLocation || !user.location) {\n            score += 15; // Online or no location preference\n          } else if (user.location === preferences.preferredLocation) {\n            score += 25; // Same location bonus\n          }\n\n          // Random factor to add variety\n          score += Math.random() * 10;\n\n          return {\n            id: user.id,\n            username: user.username || `${user.firstName} ${user.lastName}`,\n            avatar: user.profileImageUrl,\n            games: [gaming.communityId],\n            formats: JSON.parse(userPrefs?.preferredFormats || \"[]\"),\n            powerLevel: this.calculatePowerLevel(gaming, userPrefs),\n            playstyle: gaming.skillLevel || \"intermediate\",\n            location: user.location || \"Online Only\",\n            availability: JSON.parse(userPrefs?.availabilitySchedule || \"{}\"),\n            matchScore: Math.round(score),\n            commonInterests: gaming.favoriteDeck ? [gaming.favoriteDeck] : [],\n            lastOnline: user.status === \"online\" ? \"Online now\" : \"1 hour ago\",\n            isOnline: user.status === \"online\",\n          };\n        })\n        .filter((match) => match.matchScore > 20) // Minimum match threshold\n        .sort((a, b) => b.matchScore - a.matchScore) // Best matches first\n        .slice(0, 20); // Limit results\n\n      return {\n        data: scoredMatches,\n        hasMore: scoredMatches.length >= 20,\n      };\n    });\n  }\n\n  // Calculate power level based on gaming experience and stats\n  private calculatePowerLevel(gaming: UserGamingProfile | null, preferences: MatchmakingPreferences | null): number {\n    let powerLevel = 5; // Base level\n\n    // Adjust based on skill level\n    const skillLevel = gaming?.skillLevel?.toLowerCase();\n    switch (skillLevel) {\n      case \"beginner\":\n        powerLevel = 2;\n        break;\n      case \"intermediate\":\n        powerLevel = 5;\n        break;\n      case \"advanced\":\n        powerLevel = 8;\n        break;\n      case \"competitive\":\n      case \"expert\":\n        powerLevel = 10;\n        break;\n      default:\n        powerLevel = 5;\n    }\n\n    // Add experience bonus (experience is an integer representing total experience)\n    if (gaming?.experience && gaming.experience > 100) {\n      powerLevel += 1;\n    }\n\n    // Add slight variance based on preferences\n    const formats = JSON.parse(preferences?.preferredFormats || \"[]\") as string[];\n    if (formats.length > 3) powerLevel += 1;\n\n    return Math.min(Math.max(powerLevel, 1), 10);\n  }\n\n  // Tournament operations\n  async getTournaments(\n    communityId?: string,\n  ): Promise<\n    (Tournament & {\n      organizer: User;\n      community: Community;\n      participantCount: number;\n    })[]\n  > {\n    const query = db\n      .select({\n        tournament: tournaments,\n        organizer: users,\n        community: communities,\n        participantCount:\n          sql<number>`COUNT(${tournamentParticipants.id})::int`.as(\n            \"participantCount\",\n          ),\n      })\n      .from(tournaments)\n      .innerJoin(users, eq(tournaments.organizerId, users.id))\n      .innerJoin(communities, eq(tournaments.communityId, communities.id))\n      .leftJoin(\n        tournamentParticipants,\n        eq(tournaments.id, tournamentParticipants.tournamentId),\n      )\n      .groupBy(tournaments.id, users.id, communities.id)\n      .orderBy(desc(tournaments.startDate));\n\n    if (communityId) {\n      query.where(eq(tournaments.communityId, communityId));\n    }\n\n    const results = await query;\n    return results.map((result: any) => ({\n      ...result.tournament,\n      organizer: result.organizer,\n      community: result.community,\n      participantCount: result.participantCount,\n    }));\n  }\n\n  async getTournament(\n    tournamentId: string,\n  ): Promise<\n    | (Tournament & {\n        organizer: User;\n        community: Community;\n        participants: (TournamentParticipant & { user: User })[];\n      })\n    | undefined\n  > {\n    const [tournament] = await db\n      .select({\n        tournament: tournaments,\n        organizer: users,\n        community: communities,\n      })\n      .from(tournaments)\n      .innerJoin(users, eq(tournaments.organizerId, users.id))\n      .innerJoin(communities, eq(tournaments.communityId, communities.id))\n      .where(eq(tournaments.id, tournamentId));\n\n    if (!tournament) return undefined;\n\n    const participants = await db\n      .select({\n        participant: tournamentParticipants,\n        user: users,\n      })\n      .from(tournamentParticipants)\n      .innerJoin(users, eq(tournamentParticipants.userId, users.id))\n      .where(eq(tournamentParticipants.tournamentId, tournamentId));\n\n    return {\n      ...tournament.tournament,\n      organizer: tournament.organizer,\n      community: tournament.community,\n      participants: participants.map((p: any) => ({\n        ...p.participant,\n        user: p.user,\n      })),\n    };\n  }\n\n  async createTournament(data: InsertTournament): Promise<Tournament> {\n    const [tournament] = await db.insert(tournaments).values(data).returning();\n    if (!tournament) {\n      throw new Error(\"Database operation failed\");\n    }\n    return tournament;\n  }\n\n  async updateTournament(\n    tournamentId: string,\n    data: UpdateTournament,\n  ): Promise<Tournament> {\n    // Ensure only allowed fields are updated and add business rule validation\n    const updateData = {\n      ...data,\n      updatedAt: new Date(),\n    };\n\n    const [tournament] = await db\n      .update(tournaments)\n      .set(updateData)\n      .where(eq(tournaments.id, tournamentId))\n      .returning();\n\n    if (!tournament) {\n      throw new Error(\"Tournament not found\");\n    }\n\n    return tournament;\n  }\n\n  async updateTournamentStatus(\n    tournamentId: string,\n    status: string,\n  ): Promise<Tournament> {\n    // Internal method for system status updates - bypasses business rules\n    const [tournament] = await db\n      .update(tournaments)\n      .set({\n        status,\n        updatedAt: new Date(),\n      })\n      .where(eq(tournaments.id, tournamentId))\n      .returning();\n\n    if (!tournament) {\n      throw new Error(\"Tournament not found\");\n    }\n\n    return tournament;\n  }\n\n  async joinTournament(\n    tournamentId: string,\n    userId: string,\n  ): Promise<TournamentParticipant> {\n    const [participant] = await db\n      .insert(tournamentParticipants)\n      .values({ tournamentId, userId })\n      .returning();\n    if (!participant) {\n      throw new Error(\"Database operation failed\");\n    }\n    return participant;\n  }\n\n  async leaveTournament(\n    tournamentId: string,\n    userId: string,\n  ): Promise<boolean> {\n    const result = await db\n      .delete(tournamentParticipants)\n      .where(\n        and(\n          eq(tournamentParticipants.tournamentId, tournamentId),\n          eq(tournamentParticipants.userId, userId),\n        ),\n      );\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Advanced tournament operations\n  async getTournamentFormats(): Promise<TournamentFormat[]> {\n    return await db\n      .select()\n      .from(tournamentFormats)\n      .where(eq(tournamentFormats.isActive, true))\n      .orderBy(tournamentFormats.name);\n  }\n\n  async createTournamentFormat(\n    data: InsertTournamentFormat,\n  ): Promise<TournamentFormat> {\n    const [format] = await db\n      .insert(tournamentFormats)\n      .values(data)\n      .returning();\n    if (!format) {\n      throw new Error(\"Database operation failed\");\n    }\n    return format;\n  }\n\n  async getTournamentRounds(tournamentId: string): Promise<TournamentRound[]> {\n    return await db\n      .select()\n      .from(tournamentRounds)\n      .where(eq(tournamentRounds.tournamentId, tournamentId))\n      .orderBy(tournamentRounds.roundNumber);\n  }\n\n  async createTournamentRound(\n    data: InsertTournamentRound,\n  ): Promise<TournamentRound> {\n    const [round] = await db.insert(tournamentRounds).values(data).returning();\n    if (!round) {\n      throw new Error(\"Database operation failed\");\n    }\n    return round;\n  }\n\n  async updateTournamentRound(\n    roundId: string,\n    data: Partial<InsertTournamentRound>,\n  ): Promise<TournamentRound> {\n    const [round] = await db\n      .update(tournamentRounds)\n      .set(data)\n      .where(eq(tournamentRounds.id, roundId))\n      .returning();\n    if (!round) {\n      throw new Error(\"Database operation failed\");\n    }\n    return round;\n  }\n\n  async getTournamentMatches(\n    tournamentId: string,\n    roundId?: string,\n  ): Promise<\n    (TournamentMatch & { player1?: User; player2?: User; winner?: User })[]\n  > {\n    const query = db\n      .select({\n        match: tournamentMatches,\n        player1: users,\n        player2: alias(users, \"player2\"),\n        winner: alias(users, \"winner\"),\n      })\n      .from(tournamentMatches)\n      .leftJoin(users, eq(tournamentMatches.player1Id, users.id))\n      .leftJoin(\n        alias(users, \"player2\"),\n        eq(tournamentMatches.player2Id, alias(users, \"player2\").id),\n      )\n      .leftJoin(\n        alias(users, \"winner\"),\n        eq(tournamentMatches.winnerId, alias(users, \"winner\").id),\n      )\n      .where(\n        and(\n          eq(tournamentMatches.tournamentId, tournamentId),\n          roundId ? eq(tournamentMatches.roundId, roundId) : undefined,\n        ),\n      )\n      .orderBy(tournamentMatches.matchNumber); // Use matchNumber instead of bracketPosition\n\n    const results = await query;\n    return results.map((r: any) => ({\n      ...r.match,\n      player1: r.player1 ?? undefined,\n      player2: r.player2 ?? undefined,\n      winner: r.winner ?? undefined,\n    }));\n  }\n\n  async createTournamentMatch(\n    data: InsertTournamentMatch,\n  ): Promise<TournamentMatch> {\n    // Validate that players are participants in the tournament\n    if (data.player1Id) {\n      const participant1 = await db\n        .select()\n        .from(tournamentParticipants)\n        .where(\n          and(\n            eq(tournamentParticipants.tournamentId, data.tournamentId),\n            eq(tournamentParticipants.userId, data.player1Id),\n          ),\n        );\n      if (participant1.length === 0) {\n        throw new Error(\"Player 1 is not a participant in this tournament\");\n      }\n    }\n\n    if (data.player2Id) {\n      const participant2 = await db\n        .select()\n        .from(tournamentParticipants)\n        .where(\n          and(\n            eq(tournamentParticipants.tournamentId, data.tournamentId),\n            eq(tournamentParticipants.userId, data.player2Id),\n          ),\n        );\n      if (participant2.length === 0) {\n        throw new Error(\"Player 2 is not a participant in this tournament\");\n      }\n    }\n\n    const [match] = await db.insert(tournamentMatches).values(data).returning();\n    if (!match) {\n      throw new Error(\"Database operation failed\");\n    }\n    return match;\n  }\n\n  async updateTournamentMatch(\n    matchId: string,\n    data: Partial<InsertTournamentMatch>,\n  ): Promise<TournamentMatch> {\n    // Prevent changing critical structural fields\n    const allowedFields = { ...data };\n    delete allowedFields.tournamentId;\n    delete allowedFields.roundId;\n\n    const [match] = await db\n      .update(tournamentMatches)\n      .set(allowedFields)\n      .where(eq(tournamentMatches.id, matchId))\n      .returning();\n    if (!match) {\n      throw new Error(\"Database operation failed\");\n    }\n    return match;\n  }\n\n  async getMatchResults(\n    matchId: string,\n  ): Promise<\n    (MatchResult & {\n      winner: User;\n      loser?: User;\n      reportedBy: User;\n      verifiedBy?: User;\n    })[]\n  > {\n    const query = db\n      .select({\n        result: matchResults,\n        winner: users,\n        loser: alias(users, \"loser\"),\n        reportedBy: alias(users, \"reportedBy\"),\n        verifiedBy: alias(users, \"verifiedBy\"),\n      })\n      .from(matchResults)\n      .innerJoin(users, eq(matchResults.winnerId, users.id))\n      .leftJoin(\n        alias(users, \"loser\"),\n        eq(matchResults.loserId, alias(users, \"loser\").id),\n      )\n      .innerJoin(\n        alias(users, \"reportedBy\"),\n        eq(matchResults.reportedById, alias(users, \"reportedBy\").id),\n      )\n      .leftJoin(\n        alias(users, \"verifiedBy\"),\n        eq(matchResults.verifiedById, alias(users, \"verifiedBy\").id),\n      )\n      .where(eq(matchResults.matchId, matchId))\n      .orderBy(desc(matchResults.createdAt));\n\n    const results = await query;\n    return results.map((r: any) => ({\n      ...r.result,\n      winner: r.winner,\n      loser: r.loser ?? undefined,\n      reportedBy: r.reportedBy,\n      verifiedBy: r.verifiedBy ?? undefined,\n    }));\n  }\n\n  async createMatchResult(data: InsertMatchResult): Promise<MatchResult> {\n    const [result] = await db.insert(matchResults).values(data).returning();\n    if (!result) {\n      throw new Error(\"Database operation failed\");\n    }\n    return result;\n  }\n\n  async verifyMatchResult(\n    resultId: string,\n    verifierId: string,\n  ): Promise<MatchResult> {\n    return await db.transaction(async (tx: Transaction) => {\n      // First, check if there's already a verified result for this match\n      const existingResult = await tx\n        .select()\n        .from(matchResults)\n        .where(\n          and(\n            eq(matchResults.id, resultId),\n            eq(matchResults.isVerified, false),\n          ),\n        );\n\n      if (existingResult.length === 0) {\n        throw new Error(\"Result not found or already verified\");\n      }\n\n      const matchResult = existingResult[0];\n\n      if (!matchResult) {\n        throw new Error(\"Match result not found\");\n      }\n\n      // Check if there are any other verified results for this match\n      const otherVerifiedResults = await tx\n        .select()\n        .from(matchResults)\n        .where(\n          and(\n            eq(matchResults.matchId, matchResult.matchId),\n            eq(matchResults.isVerified, true),\n          ),\n        );\n\n      if (otherVerifiedResults.length > 0) {\n        throw new Error(\"This match already has a verified result\");\n      }\n\n      // Verify the result\n      const [verifiedResult] = await tx\n        .update(matchResults)\n        .set({\n          verifiedById: verifierId,\n          isVerified: true,\n        })\n        .where(eq(matchResults.id, resultId))\n        .returning();\n\n      if (!verifiedResult) {\n        throw new Error(\"Failed to verify match result\");\n      }\n\n      // Update the tournament match with the verified result\n      await tx\n        .update(tournamentMatches)\n        .set({\n          winnerId: verifiedResult.winnerId,\n          player1Score:\n            verifiedResult.winnerId === matchResult.winnerId\n              ? verifiedResult.winnerScore\n              : verifiedResult.loserScore,\n          player2Score:\n            verifiedResult.winnerId === matchResult.winnerId\n              ? verifiedResult.loserScore\n              : verifiedResult.winnerScore,\n          status: \"completed\" as any,\n          endTime: new Date(),\n        })\n        .where(eq(tournamentMatches.id, matchResult.matchId));\n\n      return verifiedResult;\n    });\n  }\n\n  // Tournament transaction operations\n  async getTournamentWithTransaction(\n    tx: Transaction,\n    tournamentId: string,\n  ): Promise<\n    (Tournament & { organizer: User; community: Community }) | undefined\n  > {\n    const result = await tx\n      .select({\n        tournament: tournaments,\n        organizer: users,\n        community: communities,\n      })\n      .from(tournaments)\n      .innerJoin(users, eq(tournaments.organizerId, users.id))\n      .innerJoin(communities, eq(tournaments.communityId, communities.id))\n      .where(eq(tournaments.id, tournamentId))\n      .limit(1);\n\n    if (result.length === 0) return undefined;\n\n    const { tournament, organizer, community } = result[0];\n    return {\n      ...tournament,\n      organizer,\n      community,\n    };\n  }\n\n  async getTournamentParticipantsWithTransaction(\n    tx: Transaction,\n    tournamentId: string,\n  ): Promise<(TournamentParticipant & { user: User })[]> {\n    return await tx\n      .select({\n        id: tournamentParticipants.id,\n        tournamentId: tournamentParticipants.tournamentId,\n        userId: tournamentParticipants.userId,\n        joinedAt: tournamentParticipants.joinedAt,\n        status: tournamentParticipants.status,\n        user: users,\n      })\n      .from(tournamentParticipants)\n      .innerJoin(users, eq(tournamentParticipants.userId, users.id))\n      .where(eq(tournamentParticipants.tournamentId, tournamentId));\n  }\n\n  async getTournamentRoundsWithTransaction(\n    tx: Transaction,\n    tournamentId: string,\n  ): Promise<TournamentRound[]> {\n    return await tx\n      .select()\n      .from(tournamentRounds)\n      .where(eq(tournamentRounds.tournamentId, tournamentId))\n      .orderBy(tournamentRounds.roundNumber);\n  }\n\n  async getTournamentMatchesWithTransaction(\n    tx: Transaction,\n    tournamentId: string,\n  ): Promise<\n    (TournamentMatch & { player1?: User; player2?: User; winner?: User })[]\n  > {\n    const results = await tx\n      .select({\n        match: tournamentMatches,\n        player1: alias(users, \"player1\"),\n        player2: alias(users, \"player2\"),\n        winner: alias(users, \"winner\"),\n      })\n      .from(tournamentMatches)\n      .leftJoin(\n        alias(users, \"player1\"),\n        eq(tournamentMatches.player1Id, alias(users, \"player1\").id),\n      )\n      .leftJoin(\n        alias(users, \"player2\"),\n        eq(tournamentMatches.player2Id, alias(users, \"player2\").id),\n      )\n      .leftJoin(\n        alias(users, \"winner\"),\n        eq(tournamentMatches.winnerId, alias(users, \"winner\").id),\n      )\n      .where(eq(tournamentMatches.tournamentId, tournamentId))\n      .orderBy(tournamentMatches.matchNumber, tournamentMatches.createdAt); // Use matchNumber instead of bracketPosition\n\n    return results.map((r: any) => ({\n      ...r.match,\n      player1: r.player1 || undefined,\n      player2: r.player2 || undefined,\n      winner: r.winner || undefined,\n    }));\n  }\n\n  // Forum operations\n  async getForumPosts(\n    communityId: string,\n    options: { category?: string; limit?: number; offset?: number } = {},\n  ): Promise<\n    (ForumPost & {\n      author: User;\n      community: Community;\n      replyCount: number;\n      likeCount: number;\n      isLiked?: boolean;\n    })[]\n  > {\n    const { category, limit = 20, offset = 0 } = options;\n\n    const query = db\n      .select({\n        post: forumPosts,\n        author: users,\n        community: communities,\n        replyCount: sql<number>`COUNT(DISTINCT ${forumReplies.id})::int`.as(\n          \"replyCount\",\n        ),\n        likeCount: sql<number>`COUNT(DISTINCT ${forumPostLikes.id})::int`.as(\n          \"likeCount\",\n        ),\n      })\n      .from(forumPosts)\n      .innerJoin(users, eq(forumPosts.authorId, users.id))\n      .innerJoin(communities, eq(forumPosts.communityId, communities.id))\n      .leftJoin(forumReplies, eq(forumPosts.id, forumReplies.postId))\n      .leftJoin(forumPostLikes, eq(forumPosts.id, forumPostLikes.postId))\n      .where(\n        and(\n          eq(forumPosts.communityId, communityId),\n          category ? eq(forumPosts.category, category) : undefined,\n        ),\n      )\n      .groupBy(forumPosts.id, users.id, communities.id)\n      .orderBy(desc(forumPosts.isPinned), desc(forumPosts.createdAt))\n      .limit(limit)\n      .offset(offset);\n\n    const results = await query;\n\n    return results.map((r: any) => ({\n      ...r.post,\n      author: r.author,\n      community: r.community,\n      replyCount: r.replyCount,\n      likeCount: r.likeCount,\n    }));\n  }\n\n  async getForumPost(\n    id: string,\n    userId?: string,\n  ): Promise<\n    | (ForumPost & { author: User; community: Community; isLiked: boolean })\n    | undefined\n  > {\n    const postQuery = db\n      .select({\n        post: forumPosts,\n        author: users,\n        community: communities,\n      })\n      .from(forumPosts)\n      .innerJoin(users, eq(forumPosts.authorId, users.id))\n      .innerJoin(communities, eq(forumPosts.communityId, communities.id))\n      .where(eq(forumPosts.id, id));\n\n    const [result] = await postQuery;\n    if (!result) return undefined;\n\n    // Check if user liked this post\n    let isLiked = false;\n    if (userId) {\n      const [like] = await db\n        .select()\n        .from(forumPostLikes)\n        .where(\n          and(eq(forumPostLikes.postId, id), eq(forumPostLikes.userId, userId)),\n        );\n      isLiked = !!like;\n    }\n\n    // Increment view count\n    await db\n      .update(forumPosts)\n      .set({\n        viewCount: sql`${forumPosts.viewCount} + 1`,\n        updatedAt: new Date(),\n      })\n      .where(eq(forumPosts.id, id));\n\n    return {\n      ...result.post,\n      author: result.author,\n      community: result.community,\n      isLiked,\n    };\n  }\n\n  async createForumPost(data: InsertForumPost): Promise<ForumPost> {\n    const [post] = await db.insert(forumPosts).values(data).returning();\n    if (!post) {\n      throw new Error(\"Database operation failed\");\n    }\n    return post;\n  }\n\n  async updateForumPost(\n    id: string,\n    data: Partial<InsertForumPost>,\n  ): Promise<ForumPost> {\n    const [post] = await db\n      .update(forumPosts)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(forumPosts.id, id))\n      .returning();\n    if (!post) {\n      throw new Error(\"Database operation failed\");\n    }\n    return post;\n  }\n\n  async deleteForumPost(id: string): Promise<void> {\n    await db.delete(forumPosts).where(eq(forumPosts.id, id));\n  }\n\n  async likeForumPost(postId: string, userId: string): Promise<void> {\n    try {\n      await db\n        .insert(forumPostLikes)\n        .values({ postId, userId })\n        .onConflictDoNothing();\n\n      // Update like count\n      await db\n        .update(forumPosts)\n        .set({\n          likeCount: sql`${forumPosts.likeCount} + 1`,\n          updatedAt: new Date(),\n        })\n        .where(eq(forumPosts.id, postId));\n    } catch (error) {\n      // Ignore if already liked\n    }\n  }\n\n  async unlikeForumPost(postId: string, userId: string): Promise<void> {\n    const result = await db\n      .delete(forumPostLikes)\n      .where(\n        and(\n          eq(forumPostLikes.postId, postId),\n          eq(forumPostLikes.userId, userId),\n        ),\n      );\n\n    if ((result.rowCount ?? 0) > 0) {\n      // Update like count\n      await db\n        .update(forumPosts)\n        .set({\n          likeCount: sql`GREATEST(${forumPosts.likeCount} - 1, 0)`,\n          updatedAt: new Date(),\n        })\n        .where(eq(forumPosts.id, postId));\n    }\n  }\n\n  async getForumReplies(\n    postId: string,\n    userId?: string,\n  ): Promise<\n    (ForumReply & {\n      author: User;\n      isLiked?: boolean;\n      childReplies?: ForumReply[];\n    })[]\n  > {\n    const replies = await db\n      .select({\n        reply: forumReplies,\n        author: users,\n      })\n      .from(forumReplies)\n      .innerJoin(users, eq(forumReplies.authorId, users.id))\n      .where(eq(forumReplies.postId, postId))\n      .orderBy(forumReplies.createdAt);\n\n    // Add like status if user is provided\n    const enrichedReplies = await Promise.all(\n      replies.map(async (r: any) => {\n        let isLiked = false;\n        if (userId) {\n          const [like] = await db\n            .select()\n            .from(forumReplyLikes)\n            .where(\n              and(\n                eq(forumReplyLikes.replyId, r.reply.id),\n                eq(forumReplyLikes.userId, userId),\n              ),\n            );\n          isLiked = !!like;\n        }\n\n        return {\n          ...r.reply,\n          author: r.author,\n          isLiked,\n        };\n      }),\n    );\n    if (!enrichedReplies) {\n      throw new Error(\"Database operation failed\");\n    }\n    return enrichedReplies;\n  }\n\n  async createForumReply(data: InsertForumReply): Promise<ForumReply> {\n    const [reply] = await db.insert(forumReplies).values(data).returning();\n\n    // Update reply count on the post\n    await db\n      .update(forumPosts)\n      .set({\n        replyCount: sql`${forumPosts.replyCount} + 1`,\n        lastActivityAt: new Date(), // Changed from lastReplyAt to lastActivityAt\n        updatedAt: new Date(),\n      })\n      .where(eq(forumPosts.id, data.postId));\n\n    if (!reply) {\n      throw new Error(\"Database operation failed\");\n    }\n\n    return reply;\n  }\n\n  async likeForumReply(replyId: string, userId: string): Promise<void> {\n    try {\n      await db\n        .insert(forumReplyLikes)\n        .values({ replyId, userId })\n        .onConflictDoNothing();\n\n      // Update like count\n      await db\n        .update(forumReplies)\n        .set({\n          likeCount: sql`${forumReplies.likeCount} + 1`,\n          updatedAt: new Date(),\n        })\n        .where(eq(forumReplies.id, replyId));\n    } catch (error) {\n      // Ignore if already liked\n    }\n  }\n\n  async unlikeForumReply(replyId: string, userId: string): Promise<void> {\n    const result = await db\n      .delete(forumReplyLikes)\n      .where(\n        and(\n          eq(forumReplyLikes.replyId, replyId),\n          eq(forumReplyLikes.userId, userId),\n        ),\n      );\n\n    if ((result.rowCount ?? 0) > 0) {\n      // Update like count\n      await db\n        .update(forumReplies)\n        .set({\n          likeCount: sql`GREATEST(${forumReplies.likeCount} - 1, 0)`,\n          updatedAt: new Date(),\n        })\n        .where(eq(forumReplies.id, replyId));\n    }\n  }\n\n  // Analytics operations\n  async getAnalyticsData(userId: string): Promise<any> {\n    // Get user's comprehensive analytics data\n    const userAnalytics = {\n      userStats: {\n        totalGamesPlayed: await this.getTotalGamesPlayed(userId),\n        tournamentsEntered: await this.getTournamentsEntered(userId),\n        friendsCount: await this.getFriendsCount(userId),\n        averageSessionDuration: await this.getAverageSessionDuration(userId),\n      },\n      platformStats: {\n        totalUsers: await this.getTotalUsers(),\n        activeUsers: await this.getActiveUsers(),\n        totalTournaments: await this.getTotalTournaments(),\n        totalGamesPlayed: await this.getTotalGamesPlayed(),\n      },\n      gamePopularity: await this.getGamePopularity(),\n      weeklyActivity: await this.getWeeklyActivity(userId),\n    };\n\n    return userAnalytics;\n  }\n\n  private async getTotalGamesPlayed(userId?: string): Promise<number> {\n    if (userId) {\n      // Count user's games\n      const result = await db\n        .select({ count: sql<number>`COUNT(*)::int` })\n        .from(userGamingProfiles)\n        .where(eq(userGamingProfiles.userId, userId));\n      return result[0]?.count || 0;\n    } else {\n      // Count total platform games\n      const result = await db\n        .select({ count: sql<number>`COUNT(*)::int` })\n        .from(userGamingProfiles);\n      return result[0]?.count || 0;\n    }\n  }\n\n  private async getTournamentsEntered(userId: string): Promise<number> {\n    const result = await db\n      .select({ count: sql<number>`COUNT(*)::int` })\n      .from(tournamentParticipants)\n      .where(eq(tournamentParticipants.userId, userId));\n    return result[0]?.count || 0;\n  }\n\n  private async getFriendsCount(userId: string): Promise<number> {\n    const result = await db\n      .select({ count: sql<number>`COUNT(*)::int` })\n      .from(friendships)\n      .where(\n        or(\n          and(\n            eq(friendships.requesterId, userId),\n            eq(friendships.status, \"accepted\"),\n          ),\n          and(\n            eq(friendships.addresseeId, userId),\n            eq(friendships.status, \"accepted\"),\n          ),\n        ),\n      );\n    return result[0]?.count || 0;\n  }\n\n  private async getAverageSessionDuration(userId: string): Promise<number> {\n    // Mock data for session duration - in production this would track actual sessions\n    return Math.floor(Math.random() * 120) + 30; // 30-150 minutes\n  }\n\n  private async getTotalUsers(): Promise<number> {\n    const result = await db\n      .select({ count: sql<number>`COUNT(*)::int` })\n      .from(users);\n    return result[0]?.count || 0;\n  }\n\n  private async getActiveUsers(): Promise<number> {\n    const result = await db\n      .select({ count: sql<number>`COUNT(*)::int` })\n      .from(users)\n      .where(eq(users.status, \"online\"));\n    return result[0]?.count || 0;\n  }\n\n  private async getTotalTournaments(): Promise<number> {\n    const result = await db\n      .select({ count: sql<number>`COUNT(*)::int` })\n      .from(tournaments);\n    return result[0]?.count || 0;\n  }\n\n  private async getGamePopularity(): Promise<\n    Array<{ game: string; players: number; change: number }>\n  > {\n    const result = await db\n      .select({\n        communityId: userGamingProfiles.communityId,\n        count: sql<number>`COUNT(*)::int`,\n      })\n      .from(userGamingProfiles)\n      .groupBy(userGamingProfiles.communityId);\n\n    return result.map((r: any) => ({\n      game: r.communityId,\n      players: r.count,\n      change: Math.floor(Math.random() * 20) - 10, // Mock change percentage\n    }));\n  }\n\n  private async getWeeklyActivity(\n    userId: string,\n  ): Promise<Array<{ day: string; value: number }>> {\n    // Mock weekly activity data - in production this would track actual user activity\n    const days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    return days.map((day) => ({\n      day,\n      value: Math.floor(Math.random() * 8) + 1,\n    }));\n  }\n\n  // Data export operations\n  async exportUserData(userId: string): Promise<any> {\n    // Get all user data for export\n    const userData = await this.getUser(userId);\n    const socialLinks = await this.getUserSocialLinks(userId);\n    const gamingProfiles = await this.getUserGamingProfiles(userId);\n    const matchmakingPrefs = await this.getMatchmakingPreferences(userId);\n\n    // Get tournament participation\n    const userTournaments = await db\n      .select({\n        tournament: tournaments,\n        participant: tournamentParticipants,\n      })\n      .from(tournamentParticipants)\n      .innerJoin(\n        tournaments,\n        eq(tournamentParticipants.tournamentId, tournaments.id),\n      )\n      .where(eq(tournamentParticipants.userId, userId));\n\n    // Get friend relationships\n    const friends = await db\n      .select()\n      .from(friendships)\n      .where(\n        or(\n          eq(friendships.requesterId, userId),\n          eq(friendships.addresseeId, userId),\n        ),\n      );\n\n    return {\n      user: userData,\n      socialLinks,\n      gamingProfiles,\n      matchmakingPreferences: matchmakingPrefs,\n      tournaments: userTournaments.map((t: any) => t.tournament),\n      friends,\n      exportDate: new Date().toISOString(),\n      platform: \"Shuffle & Sync\",\n    };\n  }\n\n  // Account deletion operations\n  async deleteUserAccount(userId: string): Promise<boolean> {\n    try {\n      // Cascade delete all user data in the correct order to respect foreign key constraints\n\n      // Delete tournament participations\n      await db\n        .delete(tournamentParticipants)\n        .where(eq(tournamentParticipants.userId, userId));\n\n      // Delete tournaments organized by user\n      await db.delete(tournaments).where(eq(tournaments.organizerId, userId));\n\n      // Delete matchmaking preferences\n      await db\n        .delete(matchmakingPreferences)\n        .where(eq(matchmakingPreferences.userId, userId));\n\n      // Delete friend relationships\n      await db\n        .delete(friendships)\n        .where(\n          or(\n            eq(friendships.requesterId, userId),\n            eq(friendships.addresseeId, userId),\n          ),\n        );\n\n      // Delete social links\n      await db\n        .delete(userSocialLinks)\n        .where(eq(userSocialLinks.userId, userId));\n\n      // Delete gaming profiles\n      await db\n        .delete(userGamingProfiles)\n        .where(eq(userGamingProfiles.userId, userId));\n\n      // Finally delete the user\n      const result = await db.delete(users).where(eq(users.id, userId));\n\n      return (result.rowCount ?? 0) > 0;\n    } catch (error) {\n      console.error(\"Error deleting user account:\", error);\n      return false;\n    }\n  }\n\n  // Streaming session operations\n  async getStreamSessions(filters?: {\n    hostUserId?: string;\n    communityId?: string;\n    status?: string;\n    upcoming?: boolean;\n  }): Promise<\n    (StreamSession & {\n      host: User;\n      community?: Community;\n      coHosts: StreamSessionCoHost[];\n      platforms: StreamSessionPlatform[];\n    })[]\n  > {\n    try {\n      const conditions = [];\n      if (filters?.hostUserId) {\n        conditions.push(eq(streamSessions.hostUserId, filters.hostUserId));\n      }\n      if (filters?.communityId) {\n        conditions.push(eq(streamSessions.communityId, filters.communityId));\n      }\n      if (filters?.status) {\n        conditions.push(eq(streamSessions.status, filters.status as any));\n      }\n      if (filters?.upcoming) {\n        conditions.push(gte(streamSessions.scheduledStartTime, new Date()));\n      }\n\n      const results = await db\n        .select({\n          session: streamSessions,\n          host: users,\n          community: communities,\n        })\n        .from(streamSessions)\n        .leftJoin(users, eq(streamSessions.hostUserId, users.id))\n        .leftJoin(communities, eq(streamSessions.communityId, communities.id))\n        .where(conditions.length > 0 ? and(...conditions) : undefined);\n\n      // Get co-hosts and platforms for each session\n      const enrichedResults = await Promise.all(\n        results.map(async (result: any) => {\n          const [coHosts, platforms] = await Promise.all([\n            db\n              .select()\n              .from(streamSessionCoHosts)\n              .where(\n                eq(streamSessionCoHosts.streamSessionId, result.session.id),\n              ),\n            db\n              .select()\n              .from(streamSessionPlatforms)\n              .where(\n                eq(streamSessionPlatforms.streamSessionId, result.session.id),\n              ),\n          ]);\n\n          return {\n            ...result.session,\n            host: result.host || null,\n            community: result.community,\n            coHosts,\n            platforms,\n          };\n        }),\n      );\n\n      return enrichedResults;\n    } catch (error) {\n      console.error(\"Error getting stream sessions:\", error);\n      throw error;\n    }\n  }\n\n  async getStreamSession(\n    id: string,\n  ): Promise<\n    | (StreamSession & {\n        host: User;\n        community?: Community;\n        coHosts: (StreamSessionCoHost & { user: User })[];\n        platforms: StreamSessionPlatform[];\n      })\n    | undefined\n  > {\n    try {\n      const [sessionResult] = await db\n        .select({\n          session: streamSessions,\n          host: users,\n          community: communities,\n        })\n        .from(streamSessions)\n        .leftJoin(users, eq(streamSessions.hostUserId, users.id))\n        .leftJoin(communities, eq(streamSessions.communityId, communities.id))\n        .where(eq(streamSessions.id, id));\n\n      if (!sessionResult) return undefined;\n\n      const [coHostsData, platforms] = await Promise.all([\n        db\n          .select({\n            coHost: streamSessionCoHosts,\n            user: users,\n          })\n          .from(streamSessionCoHosts)\n          .leftJoin(users, eq(streamSessionCoHosts.userId, users.id))\n          .where(eq(streamSessionCoHosts.streamSessionId, id)),\n        db\n          .select()\n          .from(streamSessionPlatforms)\n          .where(eq(streamSessionPlatforms.streamSessionId, id)),\n      ]);\n\n      const coHosts = coHostsData\n        .filter((ch: any) => ch.user)\n        .map((ch: any) => ({\n          ...ch.coHost,\n          user: ch.user,\n        }));\n\n      if (!sessionResult.host) {\n        throw new Error(\"Stream session host not found\");\n      }\n\n      return {\n        ...sessionResult.session,\n        host: sessionResult.host,\n        community: sessionResult.community || undefined,\n        coHosts,\n        platforms,\n      };\n    } catch (error) {\n      console.error(\"Error getting stream session:\", error);\n      throw error;\n    }\n  }\n\n  async createStreamSession(data: InsertStreamSession): Promise<StreamSession> {\n    try {\n      const [session] = await db\n        .insert(streamSessions)\n        .values(data)\n        .returning();\n      if (!session) {\n        throw new Error(\"Database operation failed\");\n      }\n      return session;\n    } catch (error) {\n      console.error(\"Error creating stream session:\", error);\n      throw error;\n    }\n  }\n\n  async updateStreamSession(\n    id: string,\n    data: Partial<InsertStreamSession>,\n  ): Promise<StreamSession> {\n    try {\n      const [session] = await db\n        .update(streamSessions)\n        .set({ ...data, updatedAt: new Date() })\n        .where(eq(streamSessions.id, id))\n        .returning();\n      if (!session) {\n        throw new Error(\"Failed to update stream session\");\n      }\n      return session;\n    } catch (error) {\n      console.error(\"Error updating stream session:\", error);\n      throw error;\n    }\n  }\n\n  async deleteStreamSession(id: string): Promise<void> {\n    try {\n      await db.delete(streamSessions).where(eq(streamSessions.id, id));\n    } catch (error) {\n      console.error(\"Error deleting stream session:\", error);\n      throw error;\n    }\n  }\n\n  // Stream session co-host operations\n  async addStreamCoHost(\n    data: InsertStreamSessionCoHost,\n  ): Promise<StreamSessionCoHost> {\n    try {\n      const [coHost] = await db\n        .insert(streamSessionCoHosts)\n        .values(data)\n        .returning();\n      if (!coHost) {\n        throw new Error(\"Database operation failed\");\n      }\n      return coHost;\n    } catch (error) {\n      console.error(\"Error adding stream co-host:\", error);\n      throw error;\n    }\n  }\n\n  async removeStreamCoHost(sessionId: string, userId: string): Promise<void> {\n    try {\n      await db\n        .delete(streamSessionCoHosts)\n        .where(\n          and(\n            eq(streamSessionCoHosts.streamSessionId, sessionId),\n            eq(streamSessionCoHosts.userId, userId),\n          ),\n        );\n    } catch (error) {\n      console.error(\"Error removing stream co-host:\", error);\n      throw error;\n    }\n  }\n\n  async updateStreamCoHostPermissions(\n    sessionId: string,\n    userId: string,\n    permissions: {\n      canControlStream: boolean;\n      canManageChat: boolean;\n      canInviteGuests: boolean;\n      canEndStream: boolean;\n    },\n  ): Promise<StreamSessionCoHost> {\n    try {\n      // Note: streamSessionCoHosts doesn't have permissions field, only role\n      // Map permissions to role for simplified implementation\n      let role = \"co_host\";\n      if (\n        permissions.canControlStream &&\n        permissions.canManageChat &&\n        permissions.canInviteGuests &&\n        permissions.canEndStream\n      ) {\n        role = \"moderator\";\n      } else if (!permissions.canControlStream && !permissions.canManageChat) {\n        role = \"guest\";\n      }\n\n      const [coHost] = await db\n        .update(streamSessionCoHosts)\n        .set({ role })\n        .where(\n          and(\n            eq(streamSessionCoHosts.sessionId, sessionId),\n            eq(streamSessionCoHosts.userId, userId),\n          ),\n        )\n        .returning();\n      if (!coHost) {\n        throw new Error(\"Failed to update stream co-host permissions\");\n      }\n      return coHost;\n    } catch (error) {\n      console.error(\"Error updating stream co-host permissions:\", error);\n      throw error;\n    }\n  }\n\n  // Stream session platform operations\n  async addStreamPlatform(\n    data: InsertStreamSessionPlatform,\n  ): Promise<StreamSessionPlatform> {\n    try {\n      const [platform] = await db\n        .insert(streamSessionPlatforms)\n        .values(data)\n        .returning();\n      if (!platform) {\n        throw new Error(\"Database operation failed\");\n      }\n      return platform;\n    } catch (error) {\n      console.error(\"Error adding stream platform:\", error);\n      throw error;\n    }\n  }\n\n  async updateStreamPlatform(\n    id: string,\n    data: Partial<InsertStreamSessionPlatform>,\n  ): Promise<StreamSessionPlatform> {\n    try {\n      const [platform] = await db\n        .update(streamSessionPlatforms)\n        .set(data)\n        .where(eq(streamSessionPlatforms.id, id))\n        .returning();\n      if (!platform) {\n        throw new Error(\"Failed to update stream platform\");\n      }\n      return platform;\n    } catch (error) {\n      console.error(\"Error updating stream platform:\", error);\n      throw error;\n    }\n  }\n\n  async removeStreamPlatform(id: string): Promise<void> {\n    try {\n      await db\n        .delete(streamSessionPlatforms)\n        .where(eq(streamSessionPlatforms.id, id));\n    } catch (error) {\n      console.error(\"Error removing stream platform:\", error);\n      throw error;\n    }\n  }\n\n  async getStreamPlatforms(\n    sessionId: string,\n  ): Promise<StreamSessionPlatform[]> {\n    try {\n      return await db\n        .select()\n        .from(streamSessionPlatforms)\n        .where(eq(streamSessionPlatforms.streamSessionId, sessionId));\n    } catch (error) {\n      console.error(\"Error getting stream platforms:\", error);\n      throw error;\n    }\n  }\n\n  async updateStreamStatus(\n    sessionId: string,\n    platform: string,\n    isLive: boolean,\n    viewerCount?: number,\n  ): Promise<void> {\n    try {\n      // streamSessionPlatforms has 'status' field, not 'isLive'\n      await db\n        .update(streamSessionPlatforms)\n        .set({\n          status: isLive ? \"live\" : \"offline\", // Use status field instead of isLive\n          viewerCount: viewerCount || 0,\n        })\n        .where(\n          and(\n            eq(streamSessionPlatforms.sessionId, sessionId),\n            eq(streamSessionPlatforms.platform, platform),\n          ),\n        );\n    } catch (error) {\n      console.error(\"Error updating stream status:\", error);\n      throw error;\n    }\n  }\n\n  // Collaboration request operations\n  async getCollaborationRequests(filters?: {\n    fromUserId?: string;\n    toUserId?: string;\n    status?: string;\n    type?: string;\n  }): Promise<\n    (CollaborationRequest & {\n      fromUser: User;\n      toUser: User;\n      streamSession?: StreamSession;\n    })[]\n  > {\n    try {\n      const conditions = [];\n      if (filters?.fromUserId) {\n        conditions.push(\n          eq(collaborationRequests.fromUserId, filters.fromUserId),\n        );\n      }\n      if (filters?.toUserId) {\n        conditions.push(eq(collaborationRequests.toUserId, filters.toUserId));\n      }\n      if (filters?.status) {\n        conditions.push(\n          eq(collaborationRequests.status, filters.status as any),\n        );\n      }\n      // Note: collaborationRequests doesn't have a 'type' field in schema\n\n      const results = await db\n        .select({\n          request: collaborationRequests,\n          fromUser: alias(users, \"fromUser\"),\n          toUser: alias(users, \"toUser\"),\n          streamSession: streamSessions,\n        })\n        .from(collaborationRequests)\n        .leftJoin(\n          alias(users, \"fromUser\"),\n          eq(collaborationRequests.fromUserId, alias(users, \"fromUser\").id),\n        )\n        .leftJoin(\n          alias(users, \"toUser\"),\n          eq(collaborationRequests.toUserId, alias(users, \"toUser\").id),\n        )\n        .leftJoin(\n          streamSessions,\n          eq(collaborationRequests.eventId, streamSessions.eventId),\n        ) // Use eventId instead of streamSessionId\n        .where(conditions.length > 0 ? and(...conditions) : undefined);\n\n      return results\n        .filter((r: any) => r.fromUser && r.toUser)\n        .map((r: any) => ({\n          ...r.request,\n          fromUser: r.fromUser,\n          toUser: r.toUser,\n          streamSession: r.streamSession,\n        }));\n    } catch (error) {\n      console.error(\"Error getting collaboration requests:\", error);\n      throw error;\n    }\n  }\n\n  async createCollaborationRequest(\n    data: InsertCollaborationRequest,\n  ): Promise<CollaborationRequest> {\n    try {\n      const [request] = await db\n        .insert(collaborationRequests)\n        .values(data)\n        .returning();\n      if (!request) {\n        throw new Error(\"Database operation failed\");\n      }\n      return request;\n    } catch (error) {\n      console.error(\"Error creating collaboration request:\", error);\n      throw error;\n    }\n  }\n\n  async respondToCollaborationRequest(\n    id: string,\n    status: \"accepted\" | \"declined\" | \"cancelled\",\n    responseMessage?: string,\n  ): Promise<CollaborationRequest> {\n    try {\n      // Note: collaborationRequests doesn't have a 'responseMessage' field\n      const [request] = await db\n        .update(collaborationRequests)\n        .set({\n          status,\n          respondedAt: new Date(),\n        })\n        .where(eq(collaborationRequests.id, id))\n        .returning();\n      if (!request) {\n        throw new Error(\"Failed to respond to collaboration request\");\n      }\n      return request;\n    } catch (error) {\n      console.error(\"Error responding to collaboration request:\", error);\n      throw error;\n    }\n  }\n\n  async expireCollaborationRequests(): Promise<void> {\n    try {\n      await db\n        .update(collaborationRequests)\n        .set({ status: \"expired\" })\n        .where(\n          and(\n            eq(collaborationRequests.status, \"pending\"),\n            sql`expires_at < NOW()`,\n          ),\n        );\n    } catch (error) {\n      console.error(\"Error expiring collaboration requests:\", error);\n      throw error;\n    }\n  }\n\n  // Stream analytics operations\n  async recordStreamAnalytics(\n    data: InsertStreamAnalytics,\n  ): Promise<StreamAnalytics> {\n    try {\n      const [analytics] = await db\n        .insert(streamAnalytics)\n        .values(data)\n        .returning();\n      if (!analytics) {\n        throw new Error(\"Database operation failed\");\n      }\n      return analytics;\n    } catch (error) {\n      console.error(\"Error recording stream analytics:\", error);\n      throw error;\n    }\n  }\n\n  async getStreamAnalytics(\n    sessionId: string,\n    platform?: string,\n  ): Promise<StreamAnalytics[]> {\n    try {\n      const conditions = [eq(streamAnalytics.sessionId, sessionId)]; // Changed from streamSessionId\n\n      if (platform) {\n        conditions.push(eq(streamAnalytics.platform, platform));\n      }\n\n      return await db\n        .select()\n        .from(streamAnalytics)\n        .where(and(...conditions))\n        .orderBy(streamAnalytics.timestamp);\n    } catch (error) {\n      console.error(\"Error getting stream analytics:\", error);\n      throw error;\n    }\n  }\n\n  async getStreamAnalyticsSummary(\n    sessionId: string,\n  ): Promise<{\n    totalViewers: number;\n    peakViewers: number;\n    averageViewers: number;\n    totalChatMessages: number;\n    platforms: string[];\n  }> {\n    try {\n      const analytics = await db\n        .select({\n          maxViewers: sql<number>`MAX(${streamAnalytics.viewerCount})`,\n          avgViewers: sql<number>`AVG(${streamAnalytics.viewerCount})`,\n          totalMessages: sql<number>`SUM(${streamAnalytics.chatMessages})`, // Changed from chatMessageCount\n          platforms: sql<string>`GROUP_CONCAT(DISTINCT ${streamAnalytics.platform})`, // Changed from ARRAY_AGG to GROUP_CONCAT for SQLite\n        })\n        .from(streamAnalytics)\n        .where(eq(streamAnalytics.sessionId, sessionId)); // Changed from streamSessionId\n\n      const result = analytics[0];\n      return {\n        totalViewers: result?.maxViewers || 0,\n        peakViewers: result?.maxViewers || 0,\n        averageViewers: Math.round(result?.avgViewers || 0),\n        totalChatMessages: result?.totalMessages || 0,\n        platforms: (result?.platforms || []) as string[],\n      };\n    } catch (error) {\n      console.error(\"Error getting stream analytics summary:\", error);\n      throw error;\n    }\n  }\n\n  // User activity analytics operations\n  async recordUserActivityAnalytics(\n    data: InsertUserActivityAnalytics,\n  ): Promise<UserActivityAnalytics> {\n    try {\n      const [analytics] = await db\n        .insert(userActivityAnalytics)\n        .values(data)\n        .returning();\n      if (!analytics) {\n        throw new Error(\"Database operation failed\");\n      }\n      return analytics;\n    } catch (error) {\n      console.error(\"Error recording user activity analytics:\", error);\n      throw error;\n    }\n  }\n\n  async getUserActivityAnalytics(\n    userId: string,\n    days: number = 30,\n  ): Promise<UserActivityAnalytics[]> {\n    try {\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - days);\n\n      return await db\n        .select()\n        .from(userActivityAnalytics)\n        .where(\n          and(\n            eq(userActivityAnalytics.userId, userId),\n            gte(userActivityAnalytics.createdAt, startDate),\n          ),\n        )\n        .orderBy(userActivityAnalytics.createdAt);\n    } catch (error) {\n      console.error(\"Error getting user activity analytics:\", error);\n      throw error;\n    }\n  }\n\n  // Community analytics operations\n  async recordCommunityAnalytics(\n    data: InsertCommunityAnalytics,\n  ): Promise<CommunityAnalytics> {\n    try {\n      const [analytics] = await db\n        .insert(communityAnalytics)\n        .values(data)\n        .returning();\n      if (!analytics) {\n        throw new Error(\"Database operation failed\");\n      }\n      return analytics;\n    } catch (error) {\n      console.error(\"Error recording community analytics:\", error);\n      throw error;\n    }\n  }\n\n  async getCommunityAnalytics(\n    communityId: string,\n    startDate: Date,\n    endDate: Date,\n  ): Promise<CommunityAnalytics[]> {\n    try {\n      return await db\n        .select()\n        .from(communityAnalytics)\n        .where(\n          and(\n            eq(communityAnalytics.communityId, communityId),\n            gte(\n              sql`DATE(${communityAnalytics.date})`,\n              startDate.toISOString().split(\"T\")[0],\n            ),\n            sql`DATE(${communityAnalytics.date}) <= ${endDate.toISOString().split(\"T\")[0]}`,\n          ),\n        )\n        .orderBy(communityAnalytics.date);\n    } catch (error) {\n      console.error(\"Error getting community analytics:\", error);\n      throw error;\n    }\n  }\n\n  // Platform metrics operations\n  async recordPlatformMetrics(\n    data: InsertPlatformMetrics,\n  ): Promise<PlatformMetrics> {\n    try {\n      const [metrics] = await db\n        .insert(platformMetrics)\n        .values(data)\n        .returning();\n      if (!metrics) {\n        throw new Error(\"Database operation failed\");\n      }\n      return metrics;\n    } catch (error) {\n      console.error(\"Error recording platform metrics:\", error);\n      throw error;\n    }\n  }\n\n  async getPlatformMetrics(\n    metricType?: string,\n    timeWindow?: string,\n    startDate?: Date,\n    endDate?: Date,\n  ): Promise<PlatformMetrics[]> {\n    try {\n      const conditions = [];\n      if (metricType) {\n        conditions.push(eq(platformMetrics.metricType, metricType));\n      }\n      // Note: timeWindow parameter is not used as schema doesn't have this field\n      if (startDate) {\n        conditions.push(gte(platformMetrics.timestamp, startDate));\n      }\n      if (endDate) {\n        conditions.push(sql`${platformMetrics.timestamp} <= ${endDate}`);\n      }\n\n      const query = db\n        .select()\n        .from(platformMetrics)\n        .where(conditions.length > 0 ? and(...conditions) : undefined);\n\n      return await query.orderBy(platformMetrics.timestamp);\n    } catch (error) {\n      console.error(\"Error getting platform metrics:\", error);\n      throw error;\n    }\n  }\n\n  // Event tracking operations\n  async recordEventTracking(data: InsertEventTracking): Promise<EventTracking> {\n    try {\n      const [event] = await db.insert(eventTracking).values(data).returning();\n      if (!event) {\n        throw new Error(\"Database operation failed\");\n      }\n      return event;\n    } catch (error) {\n      console.error(\"Error recording event tracking:\", error);\n      throw error;\n    }\n  }\n\n  async getEventTracking(\n    eventName?: string,\n    userId?: string,\n    startDate?: Date,\n    endDate?: Date,\n  ): Promise<EventTracking[]> {\n    try {\n      const conditions = [];\n      if (eventName) {\n        conditions.push(eq(eventTracking.eventName, eventName));\n      }\n      if (userId) {\n        conditions.push(eq(eventTracking.userId, userId));\n      }\n      if (startDate) {\n        conditions.push(gte(eventTracking.timestamp, startDate));\n      }\n      if (endDate) {\n        conditions.push(sql`${eventTracking.timestamp} <= ${endDate}`);\n      }\n\n      const query = db\n        .select()\n        .from(eventTracking)\n        .where(conditions.length > 0 ? and(...conditions) : undefined);\n\n      return await query.orderBy(eventTracking.timestamp);\n    } catch (error) {\n      console.error(\"Error getting event tracking:\", error);\n      throw error;\n    }\n  }\n\n  // Conversion funnel operations\n  async recordConversionFunnel(\n    data: InsertConversionFunnel,\n  ): Promise<ConversionFunnel> {\n    try {\n      const [funnel] = await db\n        .insert(conversionFunnels)\n        .values(data)\n        .returning();\n      if (!funnel) {\n        throw new Error(\"Database operation failed\");\n      }\n      return funnel;\n    } catch (error) {\n      console.error(\"Error recording conversion funnel:\", error);\n      throw error;\n    }\n  }\n\n  async getConversionFunnelData(\n    funnelName: string,\n    startDate?: Date,\n    endDate?: Date,\n  ): Promise<ConversionFunnel[]> {\n    try {\n      const conditions = [eq(conversionFunnels.funnelName, funnelName)];\n      if (startDate) {\n        conditions.push(gte(conversionFunnels.createdAt, startDate));\n      }\n      if (endDate) {\n        conditions.push(sql`${conversionFunnels.createdAt} <= ${endDate}`);\n      }\n\n      return await db\n        .select()\n        .from(conversionFunnels)\n        .where(and(...conditions))\n        .orderBy(conversionFunnels.createdAt, conversionFunnels.stepOrder);\n    } catch (error) {\n      console.error(\"Error getting conversion funnel data:\", error);\n      throw error;\n    }\n  }\n\n  // Collaborative streaming events\n  async createCollaborativeStreamEvent(\n    data: InsertCollaborativeStreamEvent,\n  ): Promise<CollaborativeStreamEvent> {\n    try {\n      const [event] = await db\n        .insert(collaborativeStreamEvents)\n        .values(data)\n        .returning();\n      if (!event) {\n        throw new Error(\"Database operation failed\");\n      }\n      return event;\n    } catch (error) {\n      logger.error(\"Failed to create collaborative stream event\", error);\n      throw error;\n    }\n  }\n\n  async getCollaborativeStreamEvent(\n    id: string,\n  ): Promise<CollaborativeStreamEvent | null> {\n    try {\n      const [event] = await db\n        .select()\n        .from(collaborativeStreamEvents)\n        .where(eq(collaborativeStreamEvents.id, id));\n      return event || null;\n    } catch (error) {\n      logger.error(\"Failed to get collaborative stream event\", error, { id });\n      throw error;\n    }\n  }\n\n  async updateCollaborativeStreamEvent(\n    id: string,\n    data: Partial<InsertCollaborativeStreamEvent>,\n  ): Promise<CollaborativeStreamEvent> {\n    try {\n      const [event] = await db\n        .update(collaborativeStreamEvents)\n        .set(data)\n        .where(eq(collaborativeStreamEvents.id, id))\n        .returning();\n      if (!event) {\n        throw new Error(\"Database operation failed\");\n      }\n      return event;\n    } catch (error) {\n      logger.error(\"Failed to update collaborative stream event\", error, {\n        id,\n      });\n      throw error;\n    }\n  }\n\n  async deleteCollaborativeStreamEvent(id: string): Promise<void> {\n    try {\n      await db\n        .delete(collaborativeStreamEvents)\n        .where(eq(collaborativeStreamEvents.id, id));\n    } catch (error) {\n      logger.error(\"Failed to delete collaborative stream event\", error, {\n        id,\n      });\n      throw error;\n    }\n  }\n\n  async getUserCollaborativeStreamEvents(\n    userId: string,\n  ): Promise<CollaborativeStreamEvent[]> {\n    try {\n      return await db\n        .select()\n        .from(collaborativeStreamEvents)\n        .where(eq(collaborativeStreamEvents.organizerId, userId));\n    } catch (error) {\n      logger.error(\"Failed to get user collaborative stream events\", error, {\n        userId,\n      });\n      throw error;\n    }\n  }\n\n  // Stream collaborators\n  async createStreamCollaborator(\n    data: InsertStreamCollaborator,\n  ): Promise<StreamCollaborator> {\n    try {\n      const [collaborator] = await db\n        .insert(streamCollaborators)\n        .values(data)\n        .returning();\n      if (!collaborator) {\n        throw new Error(\"Database operation failed\");\n      }\n      return collaborator;\n    } catch (error) {\n      logger.error(\"Failed to create stream collaborator\", error);\n      throw error;\n    }\n  }\n\n  async getStreamCollaborator(id: string): Promise<StreamCollaborator | null> {\n    try {\n      const [collaborator] = await db\n        .select()\n        .from(streamCollaborators)\n        .where(eq(streamCollaborators.id, id));\n      return collaborator || null;\n    } catch (error) {\n      logger.error(\"Failed to get stream collaborator\", error, { id });\n      throw error;\n    }\n  }\n\n  async updateStreamCollaborator(\n    id: string,\n    data: Partial<InsertStreamCollaborator>,\n  ): Promise<StreamCollaborator> {\n    try {\n      const [collaborator] = await db\n        .update(streamCollaborators)\n        .set(data)\n        .where(eq(streamCollaborators.id, id))\n        .returning();\n      if (!collaborator) {\n        throw new Error(\"Database operation failed\");\n      }\n      return collaborator;\n    } catch (error) {\n      logger.error(\"Failed to update stream collaborator\", error, { id });\n      throw error;\n    }\n  }\n\n  async deleteStreamCollaborator(id: string): Promise<void> {\n    try {\n      await db\n        .delete(streamCollaborators)\n        .where(eq(streamCollaborators.id, id));\n    } catch (error) {\n      logger.error(\"Failed to delete stream collaborator\", error, { id });\n      throw error;\n    }\n  }\n\n  async getStreamCollaborators(\n    streamEventId: string,\n  ): Promise<StreamCollaborator[]> {\n    try {\n      return await db\n        .select()\n        .from(streamCollaborators)\n        .where(eq(streamCollaborators.eventId, streamEventId));\n    } catch (error) {\n      logger.error(\"Failed to get stream collaborators\", error, {\n        streamEventId,\n      });\n      throw error;\n    }\n  }\n\n  // Stream coordination sessions\n  async createStreamCoordinationSession(\n    data: InsertStreamCoordinationSession,\n  ): Promise<StreamCoordinationSession> {\n    try {\n      const [session] = await db\n        .insert(streamCoordinationSessions)\n        .values(data)\n        .returning();\n      if (!session) {\n        throw new Error(\"Database operation failed\");\n      }\n      return session;\n    } catch (error) {\n      logger.error(\"Failed to create stream coordination session\", error);\n      throw error;\n    }\n  }\n\n  async getStreamCoordinationSession(\n    id: string,\n  ): Promise<StreamCoordinationSession | null> {\n    try {\n      const [session] = await db\n        .select()\n        .from(streamCoordinationSessions)\n        .where(eq(streamCoordinationSessions.id, id));\n      return session || null;\n    } catch (error) {\n      logger.error(\"Failed to get stream coordination session\", error, { id });\n      throw error;\n    }\n  }\n\n  async updateStreamCoordinationSession(\n    id: string,\n    data: Partial<InsertStreamCoordinationSession>,\n  ): Promise<StreamCoordinationSession> {\n    try {\n      const [session] = await db\n        .update(streamCoordinationSessions)\n        .set(data)\n        .where(eq(streamCoordinationSessions.id, id))\n        .returning();\n      if (!session) {\n        throw new Error(\"Database operation failed\");\n      }\n      return session;\n    } catch (error) {\n      logger.error(\"Failed to update stream coordination session\", error, {\n        id,\n      });\n      throw error;\n    }\n  }\n\n  async deleteStreamCoordinationSession(id: string): Promise<void> {\n    try {\n      await db\n        .delete(streamCoordinationSessions)\n        .where(eq(streamCoordinationSessions.id, id));\n    } catch (error) {\n      logger.error(\"Failed to delete stream coordination session\", error, {\n        id,\n      });\n      throw error;\n    }\n  }\n\n  async getActiveCoordinationSessions(): Promise<StreamCoordinationSession[]> {\n    try {\n      return await db\n        .select()\n        .from(streamCoordinationSessions)\n        .where(eq(streamCoordinationSessions.currentPhase, \"live\"));\n    } catch (error) {\n      logger.error(\"Failed to get active coordination sessions\", error);\n      throw error;\n    }\n  }\n\n  // ===== ADMIN & MODERATION OPERATIONS =====\n\n  // User role operations (RBAC)\n  async getUserRoles(userId: string): Promise<UserRole[]> {\n    return await db\n      .select()\n      .from(userRoles)\n      .where(eq(userRoles.userId, userId));\n  }\n\n  async createUserRole(data: InsertUserRole): Promise<UserRole> {\n    const [role] = await db.insert(userRoles).values(data).returning();\n\n    // Create audit log\n    await this.createAuditLog({\n      adminUserId: data.assignedBy || \"system\",\n      action: \"user_role_created\",\n      category: \"role_assignment\",\n      targetType: \"user\",\n      targetId: data.userId,\n      parameters: JSON.stringify({\n        role: data.role,\n        permissions: data.permissions,\n      }),\n      ipAddress: \"\", // Will be filled by middleware\n    });\n\n    if (!role) {\n      throw new Error(\"Database operation failed\");\n    }\n\n    return role;\n  }\n\n  async updateUserRole(\n    id: string,\n    data: Partial<InsertUserRole>,\n  ): Promise<UserRole> {\n    const [role] = await db\n      .update(userRoles)\n      .set(data)\n      .where(eq(userRoles.id, id))\n      .returning();\n\n    if (!role) {\n      throw new Error(\"Failed to update user role\");\n    }\n\n    if (data.assignedBy) {\n      await this.createAuditLog({\n        adminUserId: data.assignedBy,\n        action: \"user_role_updated\",\n        category: \"role_assignment\",\n        targetType: \"user\",\n        targetId: role.userId,\n        parameters: JSON.stringify({ roleId: id, updates: data }),\n        ipAddress: \"\",\n      });\n    }\n\n    if (!role) {\n      throw new Error(\"Database operation failed\");\n    }\n\n    return role;\n  }\n\n  async deleteUserRole(id: string): Promise<void> {\n    await db.delete(userRoles).where(eq(userRoles.id, id));\n  }\n\n  async checkUserPermission(\n    userId: string,\n    permission: string,\n  ): Promise<boolean> {\n    const roles = await this.getUserRoles(userId);\n\n    for (const role of roles) {\n      if (role.isActive && role.permissions) {\n        const permissions =\n          typeof role.permissions === \"string\"\n            ? JSON.parse(role.permissions)\n            : role.permissions;\n\n        if (Array.isArray(permissions) && permissions.includes(permission)) {\n          return true;\n        }\n      }\n    }\n\n    // Database operation validation\n    throw new Error(\"Database operation failed\");\n  }\n\n  async getUsersByRole(role: string): Promise<(UserRole & { user: User })[]> {\n    return await db\n      .select({\n        id: userRoles.id,\n        userId: userRoles.userId,\n        role: userRoles.role,\n        communityId: userRoles.communityId,\n        permissions: userRoles.permissions,\n        isActive: userRoles.isActive,\n        assignedBy: userRoles.assignedBy,\n        expiresAt: userRoles.expiresAt,\n        createdAt: userRoles.createdAt,\n        updatedAt: userRoles.updatedAt,\n        user: users,\n      })\n      .from(userRoles)\n      .innerJoin(users, eq(userRoles.userId, users.id))\n      .where(and(eq(userRoles.role, role), eq(userRoles.isActive, true)));\n  }\n\n  // User reputation operations\n  async getUserReputation(userId: string): Promise<UserReputation | undefined> {\n    const [reputation] = await db\n      .select()\n      .from(userReputation)\n      .where(eq(userReputation.userId, userId));\n    if (!reputation) {\n      throw new Error(\"Database operation failed\");\n    }\n    return reputation;\n  }\n\n  async updateUserReputation(\n    userId: string,\n    data: Partial<InsertUserReputation>,\n  ): Promise<UserReputation> {\n    // Check if reputation record exists\n    const existing = await this.getUserReputation(userId);\n\n    if (existing) {\n      const [updated] = await db\n        .update(userReputation)\n        .set({ ...data, updatedAt: new Date() })\n        .where(eq(userReputation.userId, userId))\n        .returning();\n      if (!updated) {\n        throw new Error(\"Failed to update user reputation\");\n      }\n      return updated;\n    } else {\n      const [created] = await db\n        .insert(userReputation)\n        .values({ userId, ...data } as InsertUserReputation)\n        .returning();\n      if (!created) {\n        throw new Error(\"Failed to create user reputation\");\n      }\n      return created;\n    }\n  }\n\n  async calculateReputationScore(userId: string): Promise<number> {\n    // Get or create user's reputation record\n    let reputation = await this.getUserReputation(userId);\n    if (!reputation) {\n      reputation = await this.updateUserReputation(userId, { score: 100 });\n    }\n\n    // Get user account age for experience factor\n    const user = await this.getUser(userId);\n    const accountAgeMonths = user?.createdAt\n      ? Math.floor(\n          (Date.now() - user.createdAt.getTime()) / (1000 * 60 * 60 * 24 * 30),\n        )\n      : 0;\n\n    // Get recent user activity analytics (last 30 days)\n    const activityData = await this.getUserActivityAnalytics(userId, 30);\n\n    // Get moderation actions against this user\n    const moderationActions = await this.getUserActiveModerationActions(userId);\n\n    // Get user's community involvement\n    const userCommunities = await this.getUserCommunities(userId);\n\n    // Get report accuracy data\n    const reportsAccuracyRate =\n      (reputation.reportsMade || 0) > 0\n        ? (reputation.reportsAccurate || 0) / (reputation.reportsMade || 1)\n        : 0;\n\n    // === BASE SCORE CALCULATION ===\n    let calculatedScore = 100; // Starting base score\n\n    // === POSITIVE FACTORS ===\n\n    // 1. Account longevity bonus (up to +50 points)\n    const longevityBonus = Math.min(50, accountAgeMonths * 2);\n    calculatedScore += longevityBonus;\n\n    // 2. Positive actions multiplier (up to +100 points)\n    const positiveActionsBonus = Math.min(\n      100,\n      (reputation.positiveActions || 0) * 3,\n    );\n    calculatedScore += positiveActionsBonus;\n\n    // 3. Community engagement (up to +75 points)\n    const communityEngagement = Math.min(75, userCommunities.length * 15);\n    calculatedScore += communityEngagement;\n\n    // 4. Activity consistency bonus (up to +50 points)\n    const uniqueEventDays = new Set(\n      activityData.map(\n        (activity) => activity.date, // Use date field instead of timestamp\n      ),\n    ).size;\n    const consistencyBonus = Math.min(50, uniqueEventDays * 2);\n    calculatedScore += consistencyBonus;\n\n    // 5. Report accuracy bonus (up to +40 points)\n    const reportAccuracyBonus = Math.min(40, reportsAccuracyRate * 40);\n    calculatedScore += reportAccuracyBonus;\n\n    // === NEGATIVE FACTORS ===\n\n    // 1. Negative actions penalty\n    const negativeActionsPenalty = (reputation.negativeActions || 0) * 8;\n    calculatedScore -= negativeActionsPenalty;\n\n    // 2. Active moderation actions penalty\n    const activeModerationPenalty = moderationActions.length * 25;\n    calculatedScore -= activeModerationPenalty;\n\n    // 3. Recent violation penalty (more severe for recent violations)\n    const moderationHistory = Array.isArray(reputation.moderationHistory)\n      ? (reputation.moderationHistory as any[])\n      : [];\n\n    let recentViolationPenalty = 0;\n    const now = Date.now();\n    moderationHistory.forEach((action: any) => {\n      const actionDate = new Date(\n        action.timestamp || action.createdAt,\n      ).getTime();\n      const daysSince = (now - actionDate) / (1000 * 60 * 60 * 24);\n\n      if (daysSince <= 30) {\n        // Recent violations (last 30 days) - high penalty\n        recentViolationPenalty += 50;\n      } else if (daysSince <= 90) {\n        // Medium-term violations - moderate penalty\n        recentViolationPenalty += 20;\n      } else if (daysSince <= 365) {\n        // Older violations - small penalty\n        recentViolationPenalty += 5;\n      }\n    });\n    calculatedScore -= recentViolationPenalty;\n\n    // === LEVEL DETERMINATION ===\n    let newLevel: \"new\" | \"trusted\" | \"veteran\" | \"flagged\" | \"restricted\" =\n      \"new\";\n    if (calculatedScore >= 300 && accountAgeMonths >= 6) {\n      newLevel = \"veteran\";\n    } else if (calculatedScore >= 200 && accountAgeMonths >= 2) {\n      newLevel = \"trusted\";\n    } else if (calculatedScore < 50 || activeModerationPenalty > 50) {\n      newLevel = \"flagged\";\n    } else if (calculatedScore < 25 || activeModerationPenalty > 100) {\n      newLevel = \"restricted\";\n    }\n\n    // Ensure minimum score of 0\n    const finalScore = Math.max(0, Math.floor(calculatedScore));\n\n    // Update the calculated score and level\n    await this.updateUserReputation(userId, {\n      score: finalScore,\n      level: newLevel,\n      lastCalculated: new Date(),\n    });\n\n    if (!finalScore) {\n      throw new Error(\"Database operation failed\");\n    }\n\n    return finalScore;\n  }\n\n  async getUsersByReputationRange(\n    minScore: number,\n    maxScore: number,\n  ): Promise<(UserReputation & { user: User })[]> {\n    return await db\n      .select({\n        id: userReputation.id,\n        userId: userReputation.userId,\n        score: userReputation.score,\n        level: userReputation.level,\n        positiveActions: userReputation.positiveActions,\n        negativeActions: userReputation.negativeActions,\n        reportsMade: userReputation.reportsMade,\n        reportsAccurate: userReputation.reportsAccurate,\n        moderationHistory: userReputation.moderationHistory,\n        lastCalculated: userReputation.lastCalculated,\n        createdAt: userReputation.createdAt,\n        updatedAt: userReputation.updatedAt,\n        user: users,\n      })\n      .from(userReputation)\n      .innerJoin(users, eq(userReputation.userId, users.id))\n      .where(\n        and(\n          gte(userReputation.score, minScore),\n          lte(userReputation.score, maxScore),\n        ),\n      );\n  }\n\n  // Additional reputation management methods\n  async recordPositiveAction(\n    userId: string,\n    actionType: string,\n    metadata?: any,\n  ): Promise<void> {\n    // Get current reputation\n    const reputation = await this.getUserReputation(userId);\n    const currentPositiveActions = reputation?.positiveActions || 0;\n\n    // Update positive actions count\n    await this.updateUserReputation(userId, {\n      positiveActions: currentPositiveActions + 1,\n    });\n\n    // Record in moderation history\n    const moderationHistory = Array.isArray(reputation?.moderationHistory)\n      ? (reputation.moderationHistory as any[])\n      : typeof reputation?.moderationHistory === \"string\" &&\n          reputation.moderationHistory\n        ? JSON.parse(reputation.moderationHistory)\n        : [];\n\n    moderationHistory.push({\n      type: \"positive_action\",\n      action: actionType,\n      timestamp: new Date().toISOString(),\n      metadata,\n    });\n\n    await this.updateUserReputation(userId, {\n      moderationHistory: JSON.stringify(moderationHistory.slice(-20)), // Keep last 20 entries\n    });\n\n    // Recalculate reputation score\n    await this.calculateReputationScore(userId);\n  }\n\n  async recordNegativeAction(\n    userId: string,\n    actionType: string,\n    severity: \"minor\" | \"moderate\" | \"severe\",\n    metadata?: any,\n  ): Promise<void> {\n    // Get current reputation\n    const reputation = await this.getUserReputation(userId);\n    const currentNegativeActions = reputation?.negativeActions || 0;\n\n    // Update negative actions count\n    await this.updateUserReputation(userId, {\n      negativeActions: currentNegativeActions + 1,\n    });\n\n    // Record in moderation history with severity\n    const moderationHistory = Array.isArray(reputation?.moderationHistory)\n      ? (reputation.moderationHistory as any[])\n      : typeof reputation?.moderationHistory === \"string\" &&\n          reputation.moderationHistory\n        ? JSON.parse(reputation.moderationHistory)\n        : [];\n\n    moderationHistory.push({\n      type: \"negative_action\",\n      action: actionType,\n      severity,\n      timestamp: new Date().toISOString(),\n      metadata,\n    });\n\n    await this.updateUserReputation(userId, {\n      moderationHistory: JSON.stringify(moderationHistory.slice(-20)), // Keep last 20 entries\n    });\n\n    // Recalculate reputation score\n    await this.calculateReputationScore(userId);\n  }\n\n  async recordReportSubmission(\n    userId: string,\n    reportId: string,\n    isAccurate?: boolean,\n  ): Promise<void> {\n    const reputation = await this.getUserReputation(userId);\n    const currentReportsMade = reputation?.reportsMade || 0;\n    const currentReportsAccurate = reputation?.reportsAccurate || 0;\n\n    const updates: Partial<InsertUserReputation> = {\n      reportsMade: currentReportsMade + 1,\n    };\n\n    // If we know if the report was accurate, update that too\n    if (isAccurate === true) {\n      updates.reportsAccurate = currentReportsAccurate + 1;\n    }\n\n    await this.updateUserReputation(userId, updates);\n\n    // Recalculate reputation score\n    await this.calculateReputationScore(userId);\n  }\n\n  async batchRecalculateReputationScores(userIds?: string[]): Promise<void> {\n    if (userIds && userIds.length > 0) {\n      // Recalculate for specific users\n      for (const userId of userIds) {\n        await this.calculateReputationScore(userId);\n      }\n    } else {\n      // Recalculate for all users with reputation records\n      const allReputations = await db\n        .select({ userId: userReputation.userId })\n        .from(userReputation);\n\n      for (const rep of allReputations) {\n        await this.calculateReputationScore(rep.userId);\n      }\n    }\n  }\n\n  // Content report operations\n  async createContentReport(data: InsertContentReport): Promise<ContentReport> {\n    // confidenceScore should be a number (real type in schema)\n    const insertData = {\n      ...data,\n      confidenceScore:\n        data.confidenceScore !== undefined\n          ? Number(data.confidenceScore)\n          : undefined,\n    };\n\n    const [report] = await db\n      .insert(contentReports)\n      .values(insertData)\n      .returning();\n\n    if (!report) {\n      throw new Error(\"Failed to create content report\");\n    }\n\n    // Record positive action for user who submitted the report\n    if (data.reporterUserId) {\n      await this.recordPositiveAction(\n        data.reporterUserId,\n        \"content_report_submitted\",\n        {\n          reportId: report.id,\n          contentType: data.contentType,\n          reason: data.reason,\n        },\n      );\n    }\n\n    // Add to moderation queue if auto-flagged or high priority\n    if (\n      data.isSystemGenerated ||\n      data.priority === \"high\" ||\n      data.priority === \"urgent\"\n    ) {\n      // Map priority strings to numbers (1-10 scale)\n      const priorityMap: Record<string, number> = {\n        low: 3,\n        medium: 5,\n        high: 7,\n        urgent: 9,\n      };\n\n      await this.addToModerationQueue({\n        itemType: \"report\",\n        itemId: report.id,\n        priority: priorityMap[data.priority || \"medium\"],\n        summary: `${data.reason}: ${data.contentType} reported`,\n        metadata: JSON.stringify({\n          contentType: data.contentType,\n          contentId: data.contentId,\n        }),\n      });\n    }\n\n    if (!report) {\n      throw new Error(\"Database operation failed\");\n    }\n\n    return report;\n  }\n\n  async getContentReports(filters?: {\n    status?: string;\n    priority?: string;\n    reporterUserId?: string;\n    assignedModerator?: string;\n  }): Promise<\n    (ContentReport & {\n      reporter?: User;\n      reportedUser?: User;\n      assignedMod?: User;\n    })[]\n  > {\n    const baseQuery = db\n      .select({\n        id: contentReports.id,\n        reporterUserId: contentReports.reporterUserId,\n        reportedUserId: contentReports.reportedUserId,\n        contentType: contentReports.contentType,\n        contentId: contentReports.contentId,\n        reason: contentReports.reason,\n        description: contentReports.description,\n        evidence: contentReports.evidence,\n        isSystemGenerated: contentReports.isSystemGenerated,\n        automatedFlags: contentReports.automatedFlags,\n        confidenceScore: contentReports.confidenceScore,\n        status: contentReports.status,\n        priority: contentReports.priority,\n        assignedModerator: contentReports.assignedModerator,\n        moderationNotes: contentReports.moderationNotes,\n        resolution: contentReports.resolution,\n        actionTaken: contentReports.actionTaken,\n        createdAt: contentReports.createdAt,\n        resolvedAt: contentReports.resolvedAt,\n        reporter: alias(users, \"reporter\"),\n        reportedUser: alias(users, \"reportedUser\"),\n        assignedMod: alias(users, \"assignedMod\"),\n      })\n      .from(contentReports)\n      .leftJoin(\n        alias(users, \"reporter\"),\n        eq(contentReports.reporterUserId, alias(users, \"reporter\").id),\n      )\n      .leftJoin(\n        alias(users, \"reportedUser\"),\n        eq(contentReports.reportedUserId, alias(users, \"reportedUser\").id),\n      )\n      .leftJoin(\n        alias(users, \"assignedMod\"),\n        eq(contentReports.assignedModerator, alias(users, \"assignedMod\").id),\n      );\n\n    const conditions = [];\n    if (filters?.status)\n      conditions.push(eq(contentReports.status, filters.status));\n    if (filters?.priority)\n      conditions.push(eq(contentReports.priority, filters.priority));\n    if (filters?.reporterUserId)\n      conditions.push(\n        eq(contentReports.reporterUserId, filters.reporterUserId),\n      );\n    if (filters?.assignedModerator)\n      conditions.push(\n        eq(contentReports.assignedModerator, filters.assignedModerator),\n      );\n\n    const query =\n      conditions.length > 0 ? baseQuery.where(and(...conditions)) : baseQuery;\n\n    const results = await query.orderBy(desc(contentReports.createdAt));\n\n    // Map null to undefined for optional joined fields to match return type\n    return results.map((r) => ({\n      ...r,\n      reporter: r.reporter || undefined,\n      reportedUser: r.reportedUser || undefined,\n      assignedMod: r.assignedMod || undefined,\n    }));\n  }\n\n  async getContentReport(\n    id: string,\n  ): Promise<\n    | (ContentReport & {\n        reporter?: User;\n        reportedUser?: User;\n        assignedMod?: User;\n      })\n    | undefined\n  > {\n    const reports = await this.getContentReports();\n    return reports.find((report) => report.id === id);\n  }\n\n  async updateContentReport(\n    id: string,\n    data: Partial<InsertContentReport>,\n  ): Promise<ContentReport> {\n    const [updated] = await db\n      .update(contentReports)\n      .set({\n        ...data,\n        resolvedAt: data.status === \"resolved\" ? new Date() : undefined,\n      })\n      .where(eq(contentReports.id, id))\n      .returning();\n    if (!updated) {\n      throw new Error(\"Database operation failed\");\n    }\n    return updated;\n  }\n\n  async assignContentReport(\n    reportId: string,\n    moderatorId: string,\n  ): Promise<ContentReport> {\n    return await this.updateContentReport(reportId, {\n      assignedModerator: moderatorId,\n    });\n  }\n\n  async resolveContentReport(\n    reportId: string,\n    resolution: string,\n    actionTaken?: string,\n    moderatorId?: string,\n  ): Promise<ContentReport> {\n    // Get the original report to access reporter info\n    const originalReport = await this.getContentReport(reportId);\n\n    const updateData: Partial<InsertContentReport> = {\n      status: \"resolved\",\n      resolution,\n      actionTaken,\n      resolvedAt: new Date(),\n    };\n\n    // Update report accuracy tracking for the reporter\n    if (originalReport?.reporterUserId) {\n      const isAccurate =\n        resolution === \"valid\" || resolution === \"action_taken\";\n      await this.recordReportSubmission(\n        originalReport.reporterUserId,\n        reportId,\n        isAccurate,\n      );\n    }\n\n    if (moderatorId) {\n      await this.createAuditLog({\n        adminUserId: moderatorId,\n        action: \"content_report_resolved\",\n        targetId: reportId,\n        targetType: \"content_report\",\n        category: \"content_moderation\",\n        parameters: JSON.stringify({ reportId, resolution, actionTaken }),\n        ipAddress: \"\",\n      });\n    }\n\n    return await this.updateContentReport(reportId, updateData);\n  }\n\n  // Moderation action operations\n  async createModerationAction(\n    data: InsertModerationAction,\n  ): Promise<ModerationAction> {\n    const [action] = await db\n      .insert(moderationActions)\n      .values(data)\n      .returning();\n\n    if (!action) {\n      throw new Error(\"Failed to create moderation action\");\n    }\n\n    // Record negative action for the target user based on severity\n    if (data.targetUserId) {\n      let severity: \"minor\" | \"moderate\" | \"severe\" = \"moderate\";\n\n      // Determine severity based on action type\n      // Valid actions: warn, mute, restrict, shadowban, ban, unban, content_remove, account_suspend, note, unmute\n      if (\n        data.action === \"warn\" ||\n        data.action === \"content_remove\" ||\n        data.action === \"note\"\n      ) {\n        severity = \"minor\";\n      } else if (\n        data.action === \"mute\" ||\n        data.action === \"restrict\" ||\n        data.action === \"unmute\"\n      ) {\n        severity = \"moderate\";\n      } else if (\n        data.action === \"ban\" ||\n        data.action === \"shadowban\" ||\n        data.action === \"account_suspend\"\n      ) {\n        severity = \"severe\";\n      }\n\n      await this.recordNegativeAction(\n        data.targetUserId,\n        data.action,\n        severity,\n        {\n          moderationActionId: action.id,\n          reason: data.reason,\n          moderatorId: data.moderatorId,\n        },\n      );\n    }\n\n    // Create audit log\n    await this.createAuditLog({\n      adminUserId: data.moderatorId,\n      action: \"moderation_action_created\",\n      category: \"content_moderation\",\n      targetId: data.targetUserId,\n      targetType: \"user\",\n      parameters: JSON.stringify({\n        actionType: data.action,\n        reason: data.reason,\n        duration: data.expiresAt ? `until ${data.expiresAt}` : \"permanent\",\n      }),\n      ipAddress: \"\",\n    });\n\n    if (!action) {\n      throw new Error(\"Database operation failed\");\n    }\n\n    return action;\n  }\n\n  async getModerationActions(filters?: {\n    targetUserId?: string;\n    moderatorId?: string;\n    action?: string;\n    isActive?: boolean;\n  }): Promise<(ModerationAction & { moderator: User; targetUser: User })[]> {\n    const baseQuery = db\n      .select({\n        id: moderationActions.id,\n        moderatorId: moderationActions.moderatorId,\n        targetUserId: moderationActions.targetUserId,\n        action: moderationActions.action,\n        reason: moderationActions.reason,\n        duration: moderationActions.duration,\n        metadata: moderationActions.metadata,\n        isActive: moderationActions.isActive,\n        isReversible: moderationActions.isReversible,\n        isPublic: moderationActions.isPublic,\n        relatedContentType: moderationActions.relatedContentType,\n        relatedContentId: moderationActions.relatedContentId,\n        relatedReportId: moderationActions.relatedReportId,\n        ipAddress: moderationActions.ipAddress,\n        userAgent: moderationActions.userAgent,\n        adminNotes: moderationActions.adminNotes,\n        reversedBy: moderationActions.reversedBy,\n        reversedAt: moderationActions.reversedAt,\n        reversalReason: moderationActions.reversalReason,\n        expiresAt: moderationActions.expiresAt,\n        createdAt: moderationActions.createdAt,\n        moderator: alias(users, \"moderator\"),\n        targetUser: alias(users, \"targetUser\"),\n      })\n      .from(moderationActions)\n      .innerJoin(\n        alias(users, \"moderator\"),\n        eq(moderationActions.moderatorId, alias(users, \"moderator\").id),\n      )\n      .innerJoin(\n        alias(users, \"targetUser\"),\n        eq(moderationActions.targetUserId, alias(users, \"targetUser\").id),\n      );\n\n    const conditions = [];\n    if (filters?.targetUserId)\n      conditions.push(eq(moderationActions.targetUserId, filters.targetUserId));\n    if (filters?.moderatorId)\n      conditions.push(eq(moderationActions.moderatorId, filters.moderatorId));\n    if (filters?.action)\n      conditions.push(eq(moderationActions.action, filters.action));\n    if (filters?.isActive !== undefined)\n      conditions.push(eq(moderationActions.isActive, filters.isActive));\n\n    const query =\n      conditions.length > 0 ? baseQuery.where(and(...conditions)) : baseQuery;\n\n    return await query.orderBy(desc(moderationActions.createdAt));\n  }\n\n  async getModerationAction(\n    id: string,\n  ): Promise<\n    (ModerationAction & { moderator: User; targetUser: User }) | undefined\n  > {\n    const actions = await this.getModerationActions();\n    return actions.find((action) => action.id === id);\n  }\n\n  async updateModerationAction(\n    id: string,\n    data: Partial<InsertModerationAction>,\n  ): Promise<ModerationAction> {\n    const [updated] = await db\n      .update(moderationActions)\n      .set(data)\n      .where(eq(moderationActions.id, id))\n      .returning();\n    if (!updated) {\n      throw new Error(\"Database operation failed\");\n    }\n    return updated;\n  }\n\n  async reverseModerationAction(\n    id: string,\n    reversedBy: string,\n    reason: string,\n  ): Promise<ModerationAction> {\n    const [reversed] = await db\n      .update(moderationActions)\n      .set({\n        isActive: false,\n        reversedBy,\n        reversedAt: new Date(),\n        reversalReason: reason,\n      })\n      .where(eq(moderationActions.id, id))\n      .returning();\n\n    if (!reversed) {\n      throw new Error(\"Failed to reverse moderation action\");\n    }\n\n    await this.createAuditLog({\n      adminUserId: reversedBy,\n      action: \"moderation_action_reversed\",\n      targetId: reversed.targetUserId,\n      targetType: \"user\",\n      category: \"content_moderation\",\n      parameters: JSON.stringify({ moderationActionId: id, reason }),\n      ipAddress: \"\",\n    });\n\n    return reversed;\n  }\n\n  async getUserActiveModerationActions(\n    userId: string,\n  ): Promise<ModerationAction[]> {\n    return await db\n      .select()\n      .from(moderationActions)\n      .where(\n        and(\n          eq(moderationActions.targetUserId, userId),\n          eq(moderationActions.isActive, true),\n          or(\n            sql`${moderationActions.expiresAt} IS NULL`,\n            sql`${moderationActions.expiresAt} > NOW()`,\n          ),\n        ),\n      );\n  }\n\n  // Moderation queue operations\n  async addToModerationQueue(\n    data: InsertModerationQueue & { metadata?: any },\n  ): Promise<ModerationQueue> {\n    // Auto-calculate priority if not provided\n    let enhancedData = { ...data };\n    if (!enhancedData.priority) {\n      enhancedData.priority = await this.calculateAutoPriority(\n        data.itemType,\n        data.metadata,\n      );\n    }\n\n    // Set reputation scores if available in metadata\n    if (data.metadata) {\n      if (\n        data.metadata.userReputationScore &&\n        !enhancedData.userReputationScore\n      ) {\n        enhancedData.userReputationScore = data.metadata.userReputationScore;\n      }\n      if (\n        data.metadata.reporterReputationScore &&\n        !enhancedData.reporterReputationScore\n      ) {\n        enhancedData.reporterReputationScore =\n          data.metadata.reporterReputationScore;\n      }\n      if (data.metadata.riskScore && !enhancedData.riskScore) {\n        enhancedData.riskScore = data.metadata.riskScore as any;\n      }\n    }\n\n    const [item] = await db\n      .insert(moderationQueue)\n      .values(enhancedData)\n      .returning();\n\n    if (!item) {\n      throw new Error(\"Failed to add to moderation queue\");\n    }\n\n    // Create audit log for queue addition\n    await this.createAuditLog({\n      adminUserId: \"system\",\n      action: \"moderation_queue_item_added\",\n      category: \"content_moderation\",\n      targetType: \"moderation_queue\",\n      targetId: item.id,\n      parameters: JSON.stringify({\n        itemType: item.itemType,\n        itemId: item.itemId,\n        priority: item.priority,\n        autoGenerated: item.autoGenerated,\n      }),\n      ipAddress: \"\",\n    });\n\n    if (!item) {\n      throw new Error(\"Database operation failed\");\n    }\n\n    return item;\n  }\n\n  async getModerationQueue(filters?: {\n    status?: string;\n    assignedModerator?: string;\n    priority?: number;\n    itemType?: string;\n    overdue?: boolean;\n  }): Promise<(ModerationQueue & { assignedMod?: User })[]> {\n    const baseQuery = db\n      .select({\n        id: moderationQueue.id,\n        itemType: moderationQueue.itemType,\n        itemId: moderationQueue.itemId,\n        priority: moderationQueue.priority,\n        status: moderationQueue.status,\n        assignedModerator: moderationQueue.assignedModerator,\n        assignedAt: moderationQueue.assignedAt,\n        riskScore: moderationQueue.riskScore,\n        userReputationScore: moderationQueue.userReputationScore,\n        reporterReputationScore: moderationQueue.reporterReputationScore,\n        mlPriority: moderationQueue.mlPriority,\n        autoGenerated: moderationQueue.autoGenerated,\n        summary: moderationQueue.summary,\n        tags: moderationQueue.tags,\n        estimatedTimeMinutes: moderationQueue.estimatedTimeMinutes,\n        metadata: moderationQueue.metadata,\n        resolution: moderationQueue.resolution,\n        actionTaken: moderationQueue.actionTaken,\n        createdAt: moderationQueue.createdAt,\n        completedAt: moderationQueue.completedAt,\n        assignedMod: users,\n      })\n      .from(moderationQueue)\n      .leftJoin(users, eq(moderationQueue.assignedModerator, users.id));\n\n    const conditions = [];\n    if (filters?.status)\n      conditions.push(eq(moderationQueue.status, filters.status));\n    if (filters?.assignedModerator)\n      conditions.push(\n        eq(moderationQueue.assignedModerator, filters.assignedModerator),\n      );\n    if (filters?.priority)\n      conditions.push(eq(moderationQueue.priority, filters.priority));\n    if (filters?.itemType)\n      conditions.push(eq(moderationQueue.itemType, filters.itemType));\n\n    // Handle overdue filter - items assigned more than estimated time ago\n    if (filters?.overdue) {\n      const now = new Date();\n      conditions.push(\n        and(\n          eq(moderationQueue.status, \"assigned\"),\n          isNotNull(moderationQueue.assignedAt),\n          isNotNull(moderationQueue.estimatedTimeMinutes),\n          sql`${moderationQueue.assignedAt} + INTERVAL '1 minute' * ${moderationQueue.estimatedTimeMinutes} < ${now}`,\n        ),\n      );\n    }\n\n    const query =\n      conditions.length > 0 ? baseQuery.where(and(...conditions)) : baseQuery;\n\n    const results = await query.orderBy(\n      desc(moderationQueue.priority),\n      desc(moderationQueue.createdAt),\n    );\n\n    // Map null to undefined for optional joined fields to match return type\n    return results.map((r) => ({\n      ...r,\n      assignedMod: r.assignedMod || undefined,\n    }));\n  }\n\n  async getModerationQueueItem(\n    id: string,\n  ): Promise<(ModerationQueue & { assignedMod?: User }) | undefined> {\n    const items = await this.getModerationQueue();\n    return items.find((item) => item.id === id);\n  }\n\n  async assignModerationQueueItem(\n    id: string,\n    moderatorId: string,\n  ): Promise<ModerationQueue> {\n    const [updated] = await db\n      .update(moderationQueue)\n      .set({\n        assignedModerator: moderatorId,\n        status: \"assigned\",\n        assignedAt: new Date(),\n      })\n      .where(eq(moderationQueue.id, id))\n      .returning();\n    if (!updated) {\n      throw new Error(\"Database operation failed\");\n    }\n    return updated;\n  }\n\n  async completeModerationQueueItem(\n    id: string,\n    resolution: string,\n    actionTaken?: string,\n  ): Promise<ModerationQueue> {\n    const [completed] = await db\n      .update(moderationQueue)\n      .set({\n        status: \"completed\",\n        resolution,\n        ...(actionTaken && { actionTaken }),\n        completedAt: new Date(),\n      })\n      .where(eq(moderationQueue.id, id))\n      .returning();\n    if (!completed) {\n      throw new Error(\"Database operation failed\");\n    }\n    return completed;\n  }\n\n  async updateModerationQueuePriority(\n    id: string,\n    priority: number,\n  ): Promise<ModerationQueue> {\n    const [updated] = await db\n      .update(moderationQueue)\n      .set({ priority })\n      .where(eq(moderationQueue.id, id))\n      .returning();\n\n    if (!updated) {\n      throw new Error(\"Failed to update moderation queue priority\");\n    }\n\n    return updated;\n  }\n\n  // Enhanced moderation queue operations\n  async autoAssignModerationQueue(\n    itemType?: string,\n  ): Promise<{ assigned: number; skipped: number }> {\n    // Get unassigned items\n    const openItems = await this.getModerationQueue({\n      status: \"open\",\n      ...(itemType && { itemType }),\n    });\n\n    if (openItems.length === 0) {\n      return { assigned: 0, skipped: 0 };\n    }\n\n    // Get moderator workloads\n    const workloads = await this.getModeratorWorkload();\n\n    // Find moderators with lowest workload\n    const availableModerators = workloads\n      .filter((w) => w.activeTasks < 10) // Max 10 active tasks per moderator\n      .sort((a, b) => a.activeTasks - b.activeTasks);\n\n    if (availableModerators.length === 0) {\n      return { assigned: 0, skipped: openItems.length };\n    }\n\n    let assigned = 0;\n    let skipped = 0;\n\n    // Assign items using round-robin with workload balancing\n    for (const item of openItems) {\n      const moderator =\n        availableModerators[assigned % availableModerators.length];\n\n      if (!moderator) {\n        skipped++;\n        continue;\n      }\n\n      try {\n        await this.assignModerationQueueItem(item.id, moderator.moderatorId);\n        assigned++;\n        moderator.activeTasks++; // Update local count\n      } catch (error) {\n        console.error(\"Auto-assignment failed for item:\", item.id, error);\n        skipped++;\n      }\n    }\n\n    return { assigned, skipped };\n  }\n\n  async bulkAssignModerationQueue(\n    itemIds: string[],\n    moderatorId: string,\n  ): Promise<ModerationQueue[]> {\n    const assignedItems: ModerationQueue[] = [];\n\n    for (const itemId of itemIds) {\n      try {\n        const assigned = await this.assignModerationQueueItem(\n          itemId,\n          moderatorId,\n        );\n        assignedItems.push(assigned);\n      } catch (error) {\n        console.error(\"Bulk assignment failed for item:\", itemId, error);\n      }\n    }\n\n    if (!assignedItems) {\n      throw new Error(\"Database operation failed\");\n    }\n\n    return assignedItems;\n  }\n\n  async getModeratorWorkload(\n    moderatorId?: string,\n  ): Promise<\n    {\n      moderatorId: string;\n      activeTasks: number;\n      avgCompletionTime: number;\n      lastActivity: Date | null;\n    }[]\n  > {\n    // Get all moderators with the MODERATOR role\n    const moderators = await db\n      .select({ userId: userRoles.userId })\n      .from(userRoles)\n      .where(eq(userRoles.role, \"MODERATOR\"));\n\n    const workloads = [];\n\n    for (const moderator of moderators) {\n      if (moderatorId && moderator.userId !== moderatorId) continue;\n\n      // Count active tasks\n      const activeTasks = await db\n        .select({ count: count() })\n        .from(moderationQueue)\n        .where(\n          and(\n            eq(moderationQueue.assignedModerator, moderator.userId),\n            inArray(moderationQueue.status, [\"assigned\", \"in_progress\"]),\n          ),\n        );\n\n      // Calculate average completion time from last 10 completed tasks\n      const completedTasks = await db\n        .select({\n          createdAt: moderationQueue.createdAt,\n          completedAt: moderationQueue.completedAt,\n        })\n        .from(moderationQueue)\n        .where(\n          and(\n            eq(moderationQueue.assignedModerator, moderator.userId),\n            eq(moderationQueue.status, \"completed\"),\n            isNotNull(moderationQueue.completedAt),\n          ),\n        )\n        .orderBy(desc(moderationQueue.completedAt))\n        .limit(10);\n\n      let avgCompletionTime = 0;\n      if (completedTasks.length > 0) {\n        const totalTime = completedTasks.reduce((sum: any, task: any) => {\n          if (task.completedAt && task.createdAt) {\n            return (\n              sum + (task.completedAt.getTime() - task.createdAt.getTime())\n            );\n          }\n          return sum;\n        }, 0);\n        avgCompletionTime = totalTime / completedTasks.length / (1000 * 60); // Convert to minutes\n      }\n\n      // Get last activity from audit logs\n      const lastActivity = await db\n        .select({ createdAt: adminAuditLog.createdAt })\n        .from(adminAuditLog)\n        .where(eq(adminAuditLog.adminUserId, moderator.userId))\n        .orderBy(desc(adminAuditLog.createdAt))\n        .limit(1);\n\n      workloads.push({\n        moderatorId: moderator.userId,\n        activeTasks: activeTasks[0]?.count || 0,\n        avgCompletionTime: Math.round(avgCompletionTime),\n        lastActivity: lastActivity[0]?.createdAt || null,\n      });\n    }\n    if (!workloads) {\n      throw new Error(\"Database operation failed\");\n    }\n    return workloads;\n  }\n\n  async escalateOverdueItems(thresholdHours = 24): Promise<ModerationQueue[]> {\n    const cutoffTime = new Date(Date.now() - thresholdHours * 60 * 60 * 1000);\n\n    const overdueItems = await db\n      .select()\n      .from(moderationQueue)\n      .where(\n        and(\n          eq(moderationQueue.status, \"assigned\"),\n          isNotNull(moderationQueue.assignedAt),\n          lte(moderationQueue.assignedAt, cutoffTime),\n        ),\n      );\n\n    const escalatedItems: ModerationQueue[] = [];\n\n    for (const item of overdueItems) {\n      try {\n        const [escalated] = await db\n          .update(moderationQueue)\n          .set({\n            priority: Math.min((item.priority || 5) + 2, 10), // Increase priority by 2, max 10\n          })\n          .where(eq(moderationQueue.id, item.id))\n          .returning();\n\n        if (escalated) {\n          escalatedItems.push(escalated);\n        }\n      } catch (error) {\n        console.error(\"Escalation failed for item:\", item.id, error);\n      }\n    }\n    if (!escalatedItems) {\n      throw new Error(\"Database operation failed\");\n    }\n    return escalatedItems;\n  }\n\n  async calculateAutoPriority(\n    itemType: string,\n    metadata?: any,\n  ): Promise<number> {\n    let basePriority = 5; // Default priority\n\n    // Priority based on item type\n    const typePriorities: Record<string, number> = {\n      auto_flag: 8, // High priority for auto-flagged content\n      ban_evasion: 9, // Very high priority for ban evasion\n      appeal: 7, // High priority for appeals\n      report: 6, // Medium-high priority for user reports\n    };\n\n    basePriority = typePriorities[itemType] || basePriority;\n\n    // Adjust based on metadata factors\n    if (metadata) {\n      // High-reputation reporter increases priority\n      if (metadata.reporterReputationScore > 300) basePriority += 1;\n\n      // Low-reputation target increases priority\n      if (metadata.userReputationScore < 100) basePriority += 1;\n\n      // Multiple reports increase priority\n      if (metadata.userReports > 1)\n        basePriority += Math.min(metadata.userReports - 1, 2);\n\n      // ML confidence score (if available)\n      if (metadata.mlConfidence > 0.8) basePriority += 2;\n      else if (metadata.mlConfidence > 0.6) basePriority += 1;\n\n      // Severity-based adjustments\n      if (metadata.severity === \"critical\") basePriority += 3;\n      else if (metadata.severity === \"high\") basePriority += 2;\n      else if (metadata.severity === \"medium\") basePriority += 1;\n    }\n\n    // Cap priority between 1 and 10\n    return Math.max(1, Math.min(basePriority, 10));\n  }\n\n  async getModerationQueueStats(): Promise<{\n    totalOpen: number;\n    totalAssigned: number;\n    totalCompleted: number;\n    avgCompletionTime: number;\n    overdueCount: number;\n  }> {\n    // Get counts by status\n    const statusCounts = await db\n      .select({\n        status: moderationQueue.status,\n        count: count(),\n      })\n      .from(moderationQueue)\n      .groupBy(moderationQueue.status);\n\n    const stats = {\n      totalOpen: 0,\n      totalAssigned: 0,\n      totalCompleted: 0,\n      avgCompletionTime: 0,\n      overdueCount: 0,\n    };\n\n    // Process status counts\n    statusCounts.forEach((row: any) => {\n      switch (row.status) {\n        case \"open\":\n          stats.totalOpen = row.count;\n          break;\n        case \"assigned\":\n        case \"in_progress\":\n          stats.totalAssigned += row.count;\n          break;\n        case \"completed\":\n          stats.totalCompleted = row.count;\n          break;\n      }\n    });\n\n    // Calculate average completion time from last 100 completed items\n    const recentCompleted = await db\n      .select({\n        createdAt: moderationQueue.createdAt,\n        completedAt: moderationQueue.completedAt,\n      })\n      .from(moderationQueue)\n      .where(\n        and(\n          eq(moderationQueue.status, \"completed\"),\n          isNotNull(moderationQueue.completedAt),\n        ),\n      )\n      .orderBy(desc(moderationQueue.completedAt))\n      .limit(100);\n\n    if (recentCompleted.length > 0) {\n      const totalTime = recentCompleted.reduce((sum: any, item: any) => {\n        if (item.completedAt && item.createdAt) {\n          return sum + (item.completedAt.getTime() - item.createdAt.getTime());\n        }\n        return sum;\n      }, 0);\n      stats.avgCompletionTime = Math.round(\n        totalTime / recentCompleted.length / (1000 * 60),\n      ); // Convert to minutes\n    }\n\n    // Count overdue items (assigned > 24 hours ago)\n    const cutoffTime = new Date(Date.now() - 24 * 60 * 60 * 1000);\n    const overdueCount = await db\n      .select({ count: count() })\n      .from(moderationQueue)\n      .where(\n        and(\n          eq(moderationQueue.status, \"assigned\"),\n          isNotNull(moderationQueue.assignedAt),\n          lte(moderationQueue.assignedAt, cutoffTime),\n        ),\n      );\n\n    stats.overdueCount = overdueCount[0]?.count || 0;\n\n    return stats;\n  }\n\n  // CMS content operations\n  async getCmsContent(\n    type?: string,\n    isPublished?: boolean,\n  ): Promise<CmsContent[]> {\n    const baseQuery = db.select().from(cmsContent);\n\n    const conditions = [];\n    if (type) conditions.push(eq(cmsContent.type, type));\n    if (isPublished !== undefined)\n      conditions.push(eq(cmsContent.isPublished, isPublished));\n\n    const query =\n      conditions.length > 0 ? baseQuery.where(and(...conditions)) : baseQuery;\n\n    return await query.orderBy(desc(cmsContent.version));\n  }\n\n  async getCmsContentById(\n    id: string,\n  ): Promise<\n    | (CmsContent & { author: User; lastEditor: User; approver?: User })\n    | undefined\n  > {\n    const [content] = await db\n      .select({\n        id: cmsContent.id,\n        type: cmsContent.type,\n        title: cmsContent.title,\n        content: cmsContent.content,\n        version: cmsContent.version,\n        isPublished: cmsContent.isPublished,\n        publishedAt: cmsContent.publishedAt,\n        scheduledPublishAt: cmsContent.scheduledPublishAt,\n        authorId: cmsContent.authorId,\n        lastEditedBy: cmsContent.lastEditedBy,\n        approvedBy: cmsContent.approvedBy,\n        approvedAt: cmsContent.approvedAt,\n        changeLog: cmsContent.changeLog,\n        previousVersionId: cmsContent.previousVersionId,\n        metaDescription: cmsContent.metaDescription,\n        metaKeywords: cmsContent.metaKeywords,\n        slug: cmsContent.slug,\n        createdAt: cmsContent.createdAt,\n        updatedAt: cmsContent.updatedAt,\n        author: alias(users, \"author\"),\n        lastEditor: alias(users, \"lastEditor\"),\n        approver: alias(users, \"approver\"),\n      })\n      .from(cmsContent)\n      .innerJoin(\n        alias(users, \"author\"),\n        eq(cmsContent.authorId, alias(users, \"author\").id),\n      )\n      .innerJoin(\n        alias(users, \"lastEditor\"),\n        eq(cmsContent.lastEditedBy, alias(users, \"lastEditor\").id),\n      )\n      .leftJoin(\n        alias(users, \"approver\"),\n        eq(cmsContent.approvedBy, alias(users, \"approver\").id),\n      )\n      .where(eq(cmsContent.id, id));\n    if (!content) {\n      throw new Error(\"Database operation failed\");\n    }\n    // Map null to undefined for optional joined fields to match return type\n    return {\n      ...content,\n      approver: content.approver || undefined,\n    };\n  }\n\n  async createCmsContent(data: InsertCmsContent): Promise<CmsContent> {\n    const [content] = await db.insert(cmsContent).values(data).returning();\n\n    if (!content) {\n      throw new Error(\"Failed to create CMS content\");\n    }\n\n    await this.createAuditLog({\n      adminUserId: data.authorId,\n      action: \"cms_content_created\",\n      targetId: content.id,\n      targetType: \"cms_content\",\n      category: \"content_moderation\",\n      parameters: JSON.stringify({ contentType: data.type, title: data.title }),\n      ipAddress: \"\",\n    });\n\n    return content;\n  }\n\n  async updateCmsContent(\n    id: string,\n    data: Partial<InsertCmsContent>,\n  ): Promise<CmsContent> {\n    return await db.transaction(async (tx: Transaction) => {\n      const [updated] = await tx\n        .update(cmsContent)\n        .set({ ...data, updatedAt: new Date() })\n        .where(eq(cmsContent.id, id))\n        .returning();\n\n      if (!updated) {\n        throw new Error(\"Failed to update CMS content\");\n      }\n\n      if (data.lastEditedBy) {\n        await tx.insert(adminAuditLog).values({\n          adminUserId: data.lastEditedBy,\n          action: \"cms_content_updated\",\n          category: \"content_moderation\",\n          targetId: id,\n          targetType: \"cms_content\",\n          parameters: { contentId: id, changes: data },\n          ipAddress: \"\",\n        });\n      }\n\n      return updated;\n    });\n  }\n\n  async publishCmsContent(\n    id: string,\n    publisherId: string,\n  ): Promise<CmsContent> {\n    return await db.transaction(async (tx: Transaction) => {\n      const [published] = await tx\n        .update(cmsContent)\n        .set({\n          isPublished: true,\n          publishedAt: new Date(),\n          approvedBy: publisherId,\n          approvedAt: new Date(),\n        })\n        .where(eq(cmsContent.id, id))\n        .returning();\n\n      if (!published) {\n        throw new Error(\"Failed to publish CMS content\");\n      }\n\n      await tx.insert(adminAuditLog).values({\n        adminUserId: publisherId,\n        action: \"cms_content_published\",\n        category: \"content_moderation\",\n        targetId: id,\n        targetType: \"cms_content\",\n        parameters: JSON.stringify({ contentId: id, title: published.title }),\n        ipAddress: \"\",\n      });\n\n      return published;\n    });\n  }\n\n  async deleteCmsContent(id: string): Promise<void> {\n    await db.delete(cmsContent).where(eq(cmsContent.id, id));\n  }\n\n  async getCmsContentVersions(type: string): Promise<CmsContent[]> {\n    return await db\n      .select()\n      .from(cmsContent)\n      .where(eq(cmsContent.type, type))\n      .orderBy(desc(cmsContent.version));\n  }\n\n  // Admin audit log operations (placed early since used by other methods)\n  async createAuditLog(data: InsertAdminAuditLog): Promise<AdminAuditLog> {\n    const [log] = await db.insert(adminAuditLog).values(data).returning();\n    if (!log) {\n      throw new Error(\"Database operation failed\");\n    }\n    return log;\n  }\n\n  async getAuditLogs(filters?: {\n    adminUserId?: string;\n    action?: string;\n    startDate?: Date;\n    endDate?: Date;\n  }): Promise<(AdminAuditLog & { admin: User })[]> {\n    const baseQuery = db\n      .select({\n        id: adminAuditLog.id,\n        adminUserId: adminAuditLog.adminUserId,\n        action: adminAuditLog.action,\n        category: adminAuditLog.category,\n        targetType: adminAuditLog.targetType,\n        targetId: adminAuditLog.targetId,\n        targetIdentifier: adminAuditLog.targetIdentifier,\n        oldValues: adminAuditLog.oldValues,\n        newValues: adminAuditLog.newValues,\n        parameters: adminAuditLog.parameters,\n        ipAddress: adminAuditLog.ipAddress,\n        userAgent: adminAuditLog.userAgent,\n        sessionId: adminAuditLog.sessionId,\n        success: adminAuditLog.success,\n        errorMessage: adminAuditLog.errorMessage,\n        impactAssessment: adminAuditLog.impactAssessment,\n        createdAt: adminAuditLog.createdAt,\n        admin: users,\n      })\n      .from(adminAuditLog)\n      .innerJoin(users, eq(adminAuditLog.adminUserId, users.id));\n\n    const conditions = [];\n    if (filters?.adminUserId)\n      conditions.push(eq(adminAuditLog.adminUserId, filters.adminUserId));\n    if (filters?.action)\n      conditions.push(eq(adminAuditLog.action, filters.action));\n    if (filters?.startDate)\n      conditions.push(gte(adminAuditLog.createdAt, filters.startDate));\n    if (filters?.endDate)\n      conditions.push(sql`${adminAuditLog.createdAt} <= ${filters.endDate}`);\n\n    const query =\n      conditions.length > 0 ? baseQuery.where(and(...conditions)) : baseQuery;\n\n    return await query.orderBy(desc(adminAuditLog.createdAt));\n  }\n\n  async getAuditLog(\n    id: string,\n  ): Promise<(AdminAuditLog & { admin: User }) | undefined> {\n    const logs = await this.getAuditLogs();\n    return logs.find((log) => log.id === id);\n  }\n\n  // Ban evasion tracking operations\n  async createBanEvasionRecord(\n    data: InsertBanEvasionTracking,\n  ): Promise<BanEvasionTracking> {\n    return await db.transaction(async (tx: Transaction) => {\n      // Convert confidenceScore from number to string if present (decimal type requires string)\n      const insertData = {\n        ...data,\n        confidenceScore:\n          data.confidenceScore !== undefined\n            ? String(data.confidenceScore)\n            : undefined,\n      };\n\n      const [record] = await tx\n        .insert(banEvasionTracking)\n        .values(insertData)\n        .returning();\n\n      if (!record) {\n        throw new Error(\"Failed to create ban evasion record\");\n      }\n\n      await tx.insert(adminAuditLog).values({\n        adminUserId: data.investigatedBy || \"system\",\n        action: \"ban_evasion_detected\",\n        category: \"content_moderation\",\n        targetId: data.userId,\n        targetType: \"user\",\n        parameters: JSON.stringify({\n          detectionMethod: data.detectionMethod,\n          confidenceScore: data.confidenceScore,\n        }),\n        ipAddress: data.ipAddress || \"\",\n      });\n\n      return record;\n    });\n  }\n\n  async getBanEvasionRecords(\n    userId?: string,\n    suspiciousActivity?: boolean,\n  ): Promise<(BanEvasionTracking & { user: User; bannedUser?: User })[]> {\n    const baseQuery = db\n      .select({\n        id: banEvasionTracking.id,\n        userId: banEvasionTracking.userId,\n        ipAddress: banEvasionTracking.ipAddress,\n        hashedFingerprint: banEvasionTracking.hashedFingerprint,\n        userAgent: banEvasionTracking.userAgent,\n        screenResolution: banEvasionTracking.screenResolution,\n        timezone: banEvasionTracking.timezone,\n        language: banEvasionTracking.language,\n        loginPatterns: banEvasionTracking.loginPatterns,\n        activitySignature: banEvasionTracking.activitySignature,\n        detectionMethod: banEvasionTracking.detectionMethod,\n        confidenceScore: banEvasionTracking.confidenceScore,\n        relatedBannedUser: banEvasionTracking.relatedBannedUser,\n        status: banEvasionTracking.status,\n        investigatedBy: banEvasionTracking.investigatedBy,\n        investigatedAt: banEvasionTracking.investigatedAt,\n        notes: banEvasionTracking.notes,\n        createdAt: banEvasionTracking.createdAt,\n        user: alias(users, \"user\"),\n        bannedUser: alias(users, \"bannedUser\"),\n      })\n      .from(banEvasionTracking)\n      .innerJoin(\n        alias(users, \"user\"),\n        eq(banEvasionTracking.userId, alias(users, \"user\").id),\n      )\n      .leftJoin(\n        alias(users, \"bannedUser\"),\n        eq(banEvasionTracking.relatedBannedUser, alias(users, \"bannedUser\").id),\n      );\n\n    const conditions = [];\n    if (userId) conditions.push(eq(banEvasionTracking.userId, userId));\n    // Note: suspiciousActivity parameter removed as field doesn't exist in schema\n\n    const query =\n      conditions.length > 0 ? baseQuery.where(and(...conditions)) : baseQuery;\n\n    const results = await query.orderBy(desc(banEvasionTracking.createdAt));\n\n    // Map null to undefined for optional joined fields to match return type\n    return results.map((r) => ({\n      ...r,\n      bannedUser: r.bannedUser || undefined,\n    }));\n  }\n\n  async checkBanEvasion(\n    userId: string,\n    ipAddress: string,\n    deviceFingerprint?: string,\n  ): Promise<BanEvasionTracking[]> {\n    const conditions = [eq(banEvasionTracking.userId, userId)];\n\n    if (ipAddress) {\n      conditions.push(eq(banEvasionTracking.ipAddress, ipAddress));\n    }\n\n    if (deviceFingerprint) {\n      conditions.push(\n        eq(banEvasionTracking.hashedFingerprint, deviceFingerprint),\n      );\n    }\n\n    return await db\n      .select()\n      .from(banEvasionTracking)\n      .where(or(...conditions))\n      .orderBy(desc(banEvasionTracking.createdAt));\n  }\n\n  async updateBanEvasionStatus(\n    id: string,\n    status: \"flagged\" | \"investigating\" | \"confirmed\" | \"false_positive\",\n    investigatedBy?: string,\n  ): Promise<BanEvasionTracking> {\n    const updateData: Partial<InsertBanEvasionTracking> = {\n      status,\n      investigatedAt: new Date(),\n    };\n\n    if (investigatedBy) {\n      updateData.investigatedBy = investigatedBy;\n\n      await this.createAuditLog({\n        adminUserId: investigatedBy,\n        action: \"ban_evasion_reviewed\",\n        category: \"content_moderation\",\n        targetId: id,\n        targetType: \"ban_evasion_tracking\",\n        parameters: JSON.stringify({ banEvasionId: id, newStatus: status }),\n        ipAddress: \"\",\n      });\n    }\n\n    const [updated] = await db\n      .update(banEvasionTracking)\n      .set(updateData)\n      .where(eq(banEvasionTracking.id, id))\n      .returning();\n\n    if (!updated) {\n      throw new Error(\"Failed to update ban evasion status\");\n    }\n\n    return updated;\n  }\n\n  // User appeal operations\n  async createUserAppeal(data: InsertUserAppeal): Promise<UserAppeal> {\n    return await db.transaction(async (tx: Transaction) => {\n      const [appeal] = await tx.insert(userAppeals).values(data).returning();\n\n      if (!appeal) {\n        throw new Error(\"Failed to create user appeal\");\n      }\n\n      await tx.insert(adminAuditLog).values({\n        adminUserId: \"system\",\n        action: \"user_appeal_created\",\n        category: \"content_moderation\",\n        targetId: data.userId,\n        targetType: \"user\",\n        parameters: { reason: data.reason },\n        ipAddress: \"\",\n      });\n\n      return appeal;\n    });\n  }\n\n  async getUserAppeals(filters?: {\n    userId?: string;\n    status?: string;\n    reviewedBy?: string;\n  }): Promise<\n    (UserAppeal & {\n      user: User;\n      moderationAction?: ModerationAction;\n      reviewer?: User;\n    })[]\n  > {\n    const baseQuery = db\n      .select({\n        id: userAppeals.id,\n        userId: userAppeals.userId,\n        moderationActionId: userAppeals.moderationActionId,\n        reason: userAppeals.reason,\n        evidence: userAppeals.evidence,\n        additionalInfo: userAppeals.additionalInfo,\n        status: userAppeals.status,\n        reviewedBy: userAppeals.reviewedBy,\n        reviewedAt: userAppeals.reviewedAt,\n        reviewNotes: userAppeals.reviewNotes,\n        decision: userAppeals.decision,\n        decisionReason: userAppeals.decisionReason,\n        responseToUser: userAppeals.responseToUser,\n        isUserNotified: userAppeals.isUserNotified,\n        canReappeal: userAppeals.canReappeal,\n        reappealCooldownUntil: userAppeals.reappealCooldownUntil,\n        resolvedAt: userAppeals.resolvedAt,\n        createdAt: userAppeals.createdAt,\n        updatedAt: userAppeals.updatedAt,\n        user: alias(users, \"user\"),\n        moderationAction: moderationActions,\n        reviewer: alias(users, \"reviewer\"),\n      })\n      .from(userAppeals)\n      .innerJoin(\n        alias(users, \"user\"),\n        eq(userAppeals.userId, alias(users, \"user\").id),\n      )\n      .leftJoin(\n        moderationActions,\n        eq(userAppeals.moderationActionId, moderationActions.id),\n      )\n      .leftJoin(\n        alias(users, \"reviewer\"),\n        eq(userAppeals.reviewedBy, alias(users, \"reviewer\").id),\n      );\n\n    const conditions = [];\n    if (filters?.userId)\n      conditions.push(eq(userAppeals.userId, filters.userId));\n    if (filters?.status)\n      conditions.push(eq(userAppeals.status, filters.status as any));\n    if (filters?.reviewedBy)\n      conditions.push(eq(userAppeals.reviewedBy, filters.reviewedBy));\n\n    const query =\n      conditions.length > 0 ? baseQuery.where(and(...conditions)) : baseQuery;\n\n    const results = await query.orderBy(desc(userAppeals.createdAt));\n\n    // Map null to undefined for optional joined fields to match return type\n    return results.map((r) => ({\n      ...r,\n      moderationAction: r.moderationAction || undefined,\n      reviewer: r.reviewer || undefined,\n    }));\n  }\n\n  async getUserAppeal(\n    id: string,\n  ): Promise<\n    | (UserAppeal & {\n        user: User;\n        moderationAction?: ModerationAction;\n        reviewer?: User;\n      })\n    | undefined\n  > {\n    const appeals = await this.getUserAppeals();\n    return appeals.find((appeal) => appeal.id === id);\n  }\n\n  async updateUserAppeal(\n    id: string,\n    data: Partial<InsertUserAppeal>,\n  ): Promise<UserAppeal> {\n    const [updated] = await db\n      .update(userAppeals)\n      .set({\n        ...data,\n        resolvedAt: data.status === \"resolved\" ? new Date() : undefined,\n      })\n      .where(eq(userAppeals.id, id))\n      .returning();\n    if (!updated) {\n      throw new Error(\"Database operation failed\");\n    }\n    return updated;\n  }\n\n  async assignAppealReviewer(\n    appealId: string,\n    reviewerId: string,\n  ): Promise<UserAppeal> {\n    const updateData = {\n      reviewerId,\n      status: \"under_review\" as const,\n      reviewedAt: new Date(),\n    };\n\n    return await this.updateUserAppeal(appealId, updateData);\n  }\n\n  async resolveUserAppeal(\n    appealId: string,\n    decision: \"approve\" | \"deny\" | \"partial_approve\",\n    reviewerNotes?: string,\n    reviewerId?: string,\n  ): Promise<UserAppeal> {\n    const updateData: Partial<InsertUserAppeal> = {\n      status: \"resolved\",\n      decision,\n      reviewNotes: reviewerNotes,\n      reviewedAt: new Date(),\n    };\n\n    if (reviewerId) {\n      await this.createAuditLog({\n        adminUserId: reviewerId,\n        action: \"user_appeal_resolved\",\n        category: \"user_management\",\n        targetId: appealId,\n        parameters: JSON.stringify({ appealId, decision, reviewerNotes }),\n        ipAddress: \"\",\n      });\n    }\n\n    return await this.updateUserAppeal(appealId, updateData);\n  }\n\n  // Moderation template operations\n  async getModerationTemplates(\n    category?: string,\n  ): Promise<\n    Array<Omit<ModerationTemplate, \"createdBy\"> & { createdBy: User }>\n  > {\n    const baseQuery = db\n      .select({\n        id: moderationTemplates.id,\n        name: moderationTemplates.name,\n        category: moderationTemplates.category,\n        subject: moderationTemplates.subject,\n        content: moderationTemplates.content,\n        variables: moderationTemplates.variables,\n        isActive: moderationTemplates.isActive,\n        createdBy: users, // This is the User object\n        lastModifiedBy: moderationTemplates.lastModifiedBy,\n        usageCount: moderationTemplates.usageCount,\n        createdAt: moderationTemplates.createdAt,\n        updatedAt: moderationTemplates.updatedAt,\n      })\n      .from(moderationTemplates)\n      .innerJoin(users, eq(moderationTemplates.createdBy, users.id));\n\n    const query = category\n      ? baseQuery.where(eq(moderationTemplates.category, category))\n      : baseQuery;\n\n    return await query;\n  }\n\n  async getModerationTemplate(\n    id: string,\n  ): Promise<\n    (Omit<ModerationTemplate, \"createdBy\"> & { createdBy: User }) | undefined\n  > {\n    const templates = await this.getModerationTemplates();\n    return templates.find((template) => template.id === id);\n  }\n\n  async createModerationTemplate(\n    data: InsertModerationTemplate,\n  ): Promise<ModerationTemplate> {\n    return await db.transaction(async (tx: Transaction) => {\n      const [template] = await tx\n        .insert(moderationTemplates)\n        .values(data)\n        .returning();\n\n      if (!template) {\n        throw new Error(\"Failed to create moderation template\");\n      }\n\n      await tx.insert(adminAuditLog).values({\n        adminUserId: data.createdBy,\n        action: \"moderation_template_created\",\n        category: \"content_moderation\",\n        targetId: \"\",\n        parameters: { templateName: data.name, category: data.category },\n        ipAddress: \"\",\n      });\n\n      return template;\n    });\n  }\n\n  async updateModerationTemplate(\n    id: string,\n    data: Partial<InsertModerationTemplate>,\n  ): Promise<ModerationTemplate> {\n    return await db.transaction(async (tx: Transaction) => {\n      const [updated] = await tx\n        .update(moderationTemplates)\n        .set({ ...data, updatedAt: new Date() })\n        .where(eq(moderationTemplates.id, id))\n        .returning();\n\n      if (!updated) {\n        throw new Error(\"Failed to update moderation template\");\n      }\n\n      if (data.createdBy) {\n        await tx.insert(adminAuditLog).values({\n          adminUserId: data.createdBy,\n          action: \"moderation_template_updated\",\n          category: \"content_moderation\",\n          targetId: \"\",\n          parameters: { templateId: id, changes: data },\n          ipAddress: \"\",\n        });\n      }\n\n      return updated;\n    });\n  }\n\n  async deleteModerationTemplate(id: string): Promise<void> {\n    await db.delete(moderationTemplates).where(eq(moderationTemplates.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/admin/admin-initialization.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'beforeEach' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'jest' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach, jest } from \"@jest/globals\";\n\n/**\n * Admin Account Initialization Tests\n *\n * Tests for the admin account setup and verification functionality\n */\n\ndescribe(\"Admin Account Initialization\", () => {\n  describe(\"Environment Configuration\", () => {\n    it(\"should validate MASTER_ADMIN_EMAIL format\", () => {\n      const validEmails = [\n        \"admin@example.com\",\n        \"admin@shuffleandsync.com\",\n        \"super.admin@domain.co.uk\",\n      ];\n\n      const invalidEmails = [\n        \"not-an-email\",\n        \"@example.com\",\n        \"admin@\",\n        \"admin\",\n        \"\",\n        \"admin @example.com\",\n      ];\n\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n      validEmails.forEach((email) => {\n        expect(emailRegex.test(email)).toBe(true);\n      });\n\n      invalidEmails.forEach((email) => {\n        expect(emailRegex.test(email)).toBe(false);\n      });\n    });\n\n    it(\"should require MASTER_ADMIN_EMAIL to be set\", () => {\n      const config = {\n        email: process.env.MASTER_ADMIN_EMAIL,\n      };\n\n      if (!config.email) {\n        expect(config.email).toBeUndefined();\n      } else {\n        expect(typeof config.email).toBe(\"string\");\n        expect(config.email.length).toBeGreaterThan(0);\n      }\n    });\n\n    it(\"should validate password minimum length of 12 characters\", () => {\n      const validPasswords = [\n        \"SecurePass123!@#\",\n        \"ThisIsAVerySecurePassword123\",\n        \"P@ssw0rd1234\",\n      ];\n\n      const invalidPasswords = [\"short\", \"12345678901\", \"elevenchar!\"];\n\n      validPasswords.forEach((password) => {\n        expect(password.length).toBeGreaterThanOrEqual(12);\n      });\n\n      invalidPasswords.forEach((password) => {\n        expect(password.length).toBeLessThan(12);\n      });\n    });\n  });\n\n  describe(\"Admin Role Assignment\", () => {\n    it(\"should define super_admin role with all permissions\", () => {\n      const ADMIN_PERMISSIONS = {\n        SUPER_ADMIN: \"super_admin:all\",\n      };\n\n      const ADMIN_ROLES = {\n        SUPER_ADMIN: {\n          name: \"super_admin\",\n          permissions: [ADMIN_PERMISSIONS.SUPER_ADMIN],\n        },\n      };\n\n      expect(ADMIN_ROLES.SUPER_ADMIN.name).toBe(\"super_admin\");\n      expect(ADMIN_ROLES.SUPER_ADMIN.permissions).toContain(\"super_admin:all\");\n    });\n\n    it(\"should validate user role structure\", () => {\n      const mockUserRole = {\n        id: \"role-id\",\n        userId: \"user-id\",\n        role: \"super_admin\",\n        permissions: [\"super_admin:all\"],\n        assignedBy: \"user-id\",\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      expect(mockUserRole.role).toBe(\"super_admin\");\n      expect(mockUserRole.isActive).toBe(true);\n      expect(Array.isArray(mockUserRole.permissions)).toBe(true);\n      expect(mockUserRole.permissions).toContain(\"super_admin:all\");\n    });\n  });\n\n  describe(\"Security Best Practices\", () => {\n    it(\"should create admin users with verified email status\", () => {\n      const mockAdminUser = {\n        id: \"user-id\",\n        email: \"admin@example.com\",\n        isEmailVerified: true,\n        emailVerifiedAt: new Date(),\n      };\n\n      expect(mockAdminUser.isEmailVerified).toBe(true);\n      expect(mockAdminUser.emailVerifiedAt).toBeInstanceOf(Date);\n    });\n\n    it(\"should support both OAuth and credentials authentication\", () => {\n      const oauthOnlyUser = {\n        email: \"admin@example.com\",\n        passwordHash: null,\n      };\n\n      const credentialsUser = {\n        email: \"admin@example.com\",\n        passwordHash: \"hashed-password\",\n      };\n\n      expect(oauthOnlyUser.passwordHash).toBeNull();\n      expect(credentialsUser.passwordHash).toBeTruthy();\n    });\n\n    it(\"should recommend MFA for admin accounts\", () => {\n      const securityChecks = {\n        mfaEnabled: false,\n        passwordStrength: \"strong\",\n        emailVerified: true,\n      };\n\n      const recommendations: string[] = [];\n\n      if (!securityChecks.mfaEnabled) {\n        recommendations.push(\"Enable MFA for enhanced security\");\n      }\n\n      expect(recommendations).toContain(\"Enable MFA for enhanced security\");\n    });\n  });\n\n  describe(\"Admin Verification\", () => {\n    it(\"should verify all required checks for admin account\", () => {\n      const checks = {\n        environmentConfigured: true,\n        userExists: true,\n        emailVerified: true,\n        roleAssigned: true,\n        authenticationConfigured: true,\n      };\n\n      const allChecksPassed = Object.values(checks).every(\n        (check) => check === true,\n      );\n      expect(allChecksPassed).toBe(true);\n    });\n\n    it(\"should identify missing configuration\", () => {\n      const checks = {\n        environmentConfigured: false,\n        userExists: false,\n        emailVerified: false,\n        roleAssigned: false,\n        authenticationConfigured: false,\n      };\n\n      const issues: string[] = [];\n\n      if (!checks.environmentConfigured) {\n        issues.push(\"MASTER_ADMIN_EMAIL environment variable is not set\");\n      }\n      if (!checks.userExists) {\n        issues.push(\"Admin user does not exist\");\n      }\n      if (!checks.roleAssigned) {\n        issues.push(\"Super admin role not assigned\");\n      }\n\n      expect(issues.length).toBeGreaterThan(0);\n      expect(issues).toContain(\n        \"MASTER_ADMIN_EMAIL environment variable is not set\",\n      );\n    });\n\n    it(\"should provide actionable recommendations\", () => {\n      const hasIssues = true;\n      const recommendation = hasIssues\n        ? \"Run npm run admin:init to resolve configuration issues\"\n        : \"Admin account is properly configured\";\n\n      expect(recommendation).toBe(\n        \"Run npm run admin:init to resolve configuration issues\",\n      );\n    });\n  });\n\n  describe(\"Password Security\", () => {\n    it(\"should enforce minimum password length\", () => {\n      const minLength = 12;\n      const testPassword = \"SecurePassword123!\";\n\n      expect(testPassword.length).toBeGreaterThanOrEqual(minLength);\n    });\n\n    it(\"should recommend strong password generation\", () => {\n      const weakPasswords = [\"password\", \"12345678\", \"admin123\"];\n      const strongPassword = \"Xy9#mK2$pL4@qR7!wT1\";\n\n      weakPasswords.forEach((password) => {\n        expect(\n          password.length < 12 ||\n            !/[A-Z]/.test(password) ||\n            !/[0-9]/.test(password),\n        ).toBe(true);\n      });\n\n      expect(strongPassword.length).toBeGreaterThanOrEqual(12);\n      expect(/[A-Z]/.test(strongPassword)).toBe(true);\n      expect(/[a-z]/.test(strongPassword)).toBe(true);\n      expect(/[0-9]/.test(strongPassword)).toBe(true);\n      expect(/[^A-Za-z0-9]/.test(strongPassword)).toBe(true);\n    });\n  });\n\n  describe(\"Audit Logging\", () => {\n    it(\"should log admin account creation\", () => {\n      const auditLog = {\n        adminUserId: \"user-id\",\n        action: \"user_role_created\",\n        category: \"role_assignment\",\n        targetType: \"user\",\n        targetId: \"user-id\",\n        parameters: {\n          role: \"super_admin\",\n          permissions: [\"super_admin:all\"],\n        },\n      };\n\n      expect(auditLog.action).toBe(\"user_role_created\");\n      expect(auditLog.category).toBe(\"role_assignment\");\n      expect(auditLog.parameters.role).toBe(\"super_admin\");\n    });\n  });\n\n  describe(\"Production Deployment\", () => {\n    it(\"should validate production environment setup\", () => {\n      const productionChecklist = {\n        DATABASE_URL:\n          \"sqlitecloud://prod.sqlite.cloud:8860/prod?apikey=prod_key\",\n        AUTH_SECRET: \"secure-secret-min-64-chars-example-value\",\n        MASTER_ADMIN_EMAIL: \"admin@production.com\",\n        NODE_ENV: \"production\",\n      };\n\n      expect(productionChecklist.NODE_ENV).toBe(\"production\");\n      expect(productionChecklist.MASTER_ADMIN_EMAIL).toBeTruthy();\n      expect(productionChecklist.AUTH_SECRET.length).toBeGreaterThanOrEqual(32);\n    });\n\n    it(\"should recommend OAuth for production admin access\", () => {\n      const hasOAuth = true;\n      const hasPassword = false;\n\n      const recommendation =\n        hasOAuth && !hasPassword\n          ? \"Using OAuth-only authentication (recommended for security)\"\n          : \"Using credentials authentication\";\n\n      expect(recommendation).toBe(\n        \"Using OAuth-only authentication (recommended for security)\",\n      );\n    });\n  });\n\n  describe(\"Error Handling\", () => {\n    it(\"should handle missing environment gracefully\", () => {\n      const config = {\n        email: undefined,\n      };\n\n      if (!config.email) {\n        const error = \"MASTER_ADMIN_EMAIL not set in environment variables\";\n        expect(error).toBe(\n          \"MASTER_ADMIN_EMAIL not set in environment variables\",\n        );\n      }\n    });\n\n    it(\"should validate email format before processing\", () => {\n      const invalidEmail = \"not-an-email\";\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n      const isValid = emailRegex.test(invalidEmail);\n      expect(isValid).toBe(false);\n    });\n\n    it(\"should handle database errors gracefully\", () => {\n      const mockError = new Error(\"Database connection failed\");\n\n      expect(mockError.message).toBe(\"Database connection failed\");\n      expect(mockError).toBeInstanceOf(Error);\n    });\n  });\n});\n\ndescribe(\"Admin System Status API\", () => {\n  describe(\"GET /api/admin/system/status\", () => {\n    it(\"should return admin configuration status\", () => {\n      const mockResponse = {\n        adminConfigured: true,\n        adminEmail: \"admin@example.com\",\n        userExists: true,\n        userId: \"user-id\",\n        hasSuperAdminRole: true,\n        emailVerified: true,\n        hasPassword: true,\n        authMethods: {\n          oauth: true,\n          credentials: true,\n        },\n        mfaEnabled: false,\n        recommendation: \"Admin account properly configured\",\n      };\n\n      expect(mockResponse.adminConfigured).toBe(true);\n      expect(mockResponse.hasSuperAdminRole).toBe(true);\n      expect(mockResponse.emailVerified).toBe(true);\n    });\n\n    it(\"should identify missing admin configuration\", () => {\n      const mockResponse = {\n        adminConfigured: false,\n        message: \"No master admin email configured\",\n        recommendation:\n          \"Set MASTER_ADMIN_EMAIL environment variable and run npm run admin:init\",\n      };\n\n      expect(mockResponse.adminConfigured).toBe(false);\n      expect(mockResponse.recommendation).toContain(\"npm run admin:init\");\n    });\n  });\n\n  describe(\"POST /api/admin/system/verify-admin\", () => {\n    it(\"should perform comprehensive verification\", () => {\n      const mockResponse = {\n        status: \"verified\",\n        checks: {\n          environmentConfigured: true,\n          userExists: true,\n          emailVerified: true,\n          roleAssigned: true,\n          authenticationConfigured: true,\n        },\n        issues: [],\n        recommendation: \"Admin account is properly configured\",\n        securityRecommendations: [],\n      };\n\n      expect(mockResponse.status).toBe(\"verified\");\n      expect(mockResponse.issues.length).toBe(0);\n    });\n\n    it(\"should identify configuration issues\", () => {\n      const mockResponse = {\n        status: \"issues_found\",\n        checks: {\n          environmentConfigured: true,\n          userExists: true,\n          emailVerified: true,\n          roleAssigned: false,\n          authenticationConfigured: true,\n        },\n        issues: [\"Admin user does not have super_admin role assigned\"],\n        recommendation:\n          \"Run npm run admin:init to resolve configuration issues\",\n        securityRecommendations: [],\n      };\n\n      expect(mockResponse.status).toBe(\"issues_found\");\n      expect(mockResponse.issues.length).toBeGreaterThan(0);\n      expect(mockResponse.recommendation).toContain(\"npm run admin:init\");\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/auth-routes.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":14,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Auth Routes Pattern Test\n *\n * Tests that the wildcard pattern used in auth.routes.ts correctly\n * captures requests to Auth.js endpoints like /api/auth/callback/google\n */\n\nimport { describe, test, expect } from \"@jest/globals\";\nimport { Router } from \"express\";\n\ndescribe(\"Auth Routes - Wildcard Pattern\", () => {\n  test(\"/* pattern should be used for Express Router wildcard matching\", () => {\n    // This test validates the pattern we use in server/auth/auth.routes.ts\n    const router = Router();\n\n    // The correct pattern for matching all sub-paths in a router\n    const correctPattern = \"/*\";\n\n    // This is what we changed from (incorrect)\n    const incorrectPattern = \"*\";\n\n    // Validate we're using the correct Express Router wildcard syntax\n    expect(correctPattern).toBe(\"/*\");\n    expect(correctPattern).not.toBe(incorrectPattern);\n  });\n\n  test(\"ExpressAuth should auto-detect basePath from request\", () => {\n    // According to @auth/express source code:\n    // config.basePath = getBasePath(req)\n    // where getBasePath extracts the basePath from req.baseUrl and req.params[0]\n\n    // When router is mounted at /api/auth and uses \"/*\" pattern:\n    // - Request: /api/auth/callback/google\n    // - req.baseUrl: /api/auth\n    // - req.params[0]: /callback/google\n    // - getBasePath() returns: /api/auth\n\n    const expectedBasePath = \"/api/auth\";\n    const requestPath = \"/api/auth/callback/google\";\n\n    expect(requestPath).toContain(expectedBasePath);\n    expect(requestPath.replace(expectedBasePath, \"\")).toBe(\"/callback/google\");\n  });\n\n  test(\"Google OAuth callback route should be accessible at /api/auth/callback/google\", () => {\n    // The callback URL configured in Google OAuth console\n    const callbackURL = \"/api/auth/callback/google\";\n\n    // This should match our auth router pattern\n    expect(callbackURL).toMatch(/^\\/api\\/auth\\/.+/);\n\n    // The router at /api/auth with pattern /* should handle /callback/google\n    const routerBasePath = \"/api/auth\";\n    const routerPattern = \"/*\";\n    const subPath = callbackURL.replace(routerBasePath, \"\");\n\n    expect(subPath).toBe(\"/callback/google\");\n    expect(routerPattern).toBe(\"/*\");\n  });\n});\n\ndescribe(\"Auth Routes - Required Endpoints\", () => {\n  const authBasePath = \"/api/auth\";\n\n  test(\"should support Google OAuth callback endpoint\", () => {\n    const endpoint = `${authBasePath}/callback/google`;\n    expect(endpoint).toBe(\"/api/auth/callback/google\");\n  });\n\n  test(\"should support providers endpoint\", () => {\n    const endpoint = `${authBasePath}/providers`;\n    expect(endpoint).toBe(\"/api/auth/providers\");\n  });\n\n  test(\"should support session endpoint\", () => {\n    const endpoint = `${authBasePath}/session`;\n    expect(endpoint).toBe(\"/api/auth/session\");\n  });\n\n  test(\"should support signin endpoint\", () => {\n    const endpoint = `${authBasePath}/signin`;\n    expect(endpoint).toBe(\"/api/auth/signin\");\n  });\n\n  test(\"should support signin with provider endpoint\", () => {\n    const endpoint = `${authBasePath}/signin/google`;\n    expect(endpoint).toBe(\"/api/auth/signin/google\");\n  });\n});\n\ndescribe(\"ExpressAuth basePath behavior\", () => {\n  test(\"should not require explicit basePath in config\", () => {\n    // According to @auth/express source (index.ts line ~20):\n    // config.basePath = getBasePath(req)\n    // This OVERWRITES any basePath set in the config\n\n    // Therefore, setting basePath: \"/api/auth\" in the config is redundant\n    // ExpressAuth will calculate it from the request automatically\n\n    const explicitBasePath = \"/api/auth\"; // What we had before\n    const autoDetectedBasePath = \"/api/auth\"; // What ExpressAuth calculates\n\n    // They're the same, but auto-detection is more reliable\n    expect(autoDetectedBasePath).toBe(explicitBasePath);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/environment/env-validation.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'jest' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { jest } from \"@jest/globals\";\nimport {\n  validateEnvironmentVariables,\n  validateAndLogEnvironment,\n  getEnvironmentStatus,\n  validateEnvironmentVariable,\n  getEnvironmentVariableDefinitions,\n} from \"../../env-validation\";\n\ndescribe(\"Environment Variable Validation\", () => {\n  let originalEnv: NodeJS.ProcessEnv;\n\n  beforeEach(() => {\n    originalEnv = { ...process.env };\n    // Clear environment\n    Object.keys(process.env).forEach((key) => {\n      if (\n        key.startsWith(\"DATABASE_\") ||\n        key.startsWith(\"AUTH_\") ||\n        key.startsWith(\"GOOGLE_\") ||\n        key.startsWith(\"SENDGRID_\") ||\n        key.startsWith(\"STREAM_\") ||\n        key.startsWith(\"FACEBOOK_\") ||\n        key.startsWith(\"YOUTUBE_\") ||\n        key.startsWith(\"TWITCH_\") ||\n        key.startsWith(\"DISCORD_\") ||\n        key.startsWith(\"SENTRY_\") ||\n        key.startsWith(\"LOG_\") ||\n        key.startsWith(\"ALLOWED_\") ||\n        key === \"NODE_ENV\"\n      ) {\n        delete process.env[key];\n      }\n    });\n  });\n\n  afterEach(() => {\n    process.env = originalEnv;\n  });\n\n  describe(\"Development Environment\", () => {\n    beforeEach(() => {\n      process.env.NODE_ENV = \"development\";\n    });\n\n    it(\"should pass with minimal required variables for development\", () => {\n      process.env.DATABASE_URL =\n        \"sqlitecloud://test.sqlite.cloud:8860/test?apikey=test_key\";\n      process.env.AUTH_SECRET =\n        \"a-very-long-secret-key-for-development-testing-purposes\";\n\n      const result = validateEnvironmentVariables();\n\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n      expect(result.missingRequired).toHaveLength(0);\n    });\n\n    it(\"should fail with missing DATABASE_URL\", () => {\n      process.env.AUTH_SECRET =\n        \"a-very-long-secret-key-for-development-testing-purposes\";\n\n      const result = validateEnvironmentVariables();\n\n      expect(result.isValid).toBe(false);\n      expect(result.missingRequired).toContain(\"DATABASE_URL\");\n      expect(result.errors.some((e) => e.includes(\"DATABASE_URL\"))).toBe(true);\n    });\n\n    it(\"should fail with missing AUTH_SECRET\", () => {\n      process.env.DATABASE_URL =\n        \"sqlitecloud://test.sqlite.cloud:8860/test?apikey=test_key\";\n\n      const result = validateEnvironmentVariables();\n\n      expect(result.isValid).toBe(false);\n      expect(result.missingRequired).toContain(\"AUTH_SECRET\");\n      expect(result.errors.some((e) => e.includes(\"AUTH_SECRET\"))).toBe(true);\n    });\n\n    it(\"should warn about missing recommended variables\", () => {\n      process.env.DATABASE_URL =\n        \"sqlitecloud://test.sqlite.cloud:8860/test?apikey=test_key\";\n      process.env.AUTH_SECRET =\n        \"a-very-long-secret-key-for-development-testing-purposes\";\n\n      const result = validateEnvironmentVariables();\n\n      expect(result.isValid).toBe(true);\n      expect(result.missingRecommended.length).toBeGreaterThan(0);\n      expect(result.warnings.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"Production Environment\", () => {\n    beforeEach(() => {\n      process.env.NODE_ENV = \"production\";\n    });\n\n    it(\"should pass with all required production variables\", () => {\n      process.env.DATABASE_URL =\n        \"sqlitecloud://prod.sqlite.cloud:8860/prod?apikey=prod_key\";\n      process.env.AUTH_SECRET =\n        \"a-very-long-secure-secret-key-for-production-use-with-sufficient-length\";\n      process.env.AUTH_URL = \"https://production-domain.com\";\n      process.env.GOOGLE_CLIENT_ID = \"valid-google-client-id\";\n      process.env.GOOGLE_CLIENT_SECRET = \"valid-google-client-secret\";\n\n      const result = validateEnvironmentVariables();\n\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n      expect(result.missingRequired).toHaveLength(0);\n    });\n\n    it(\"should fail with missing production-specific variables\", () => {\n      process.env.DATABASE_URL =\n        \"sqlitecloud://test.sqlite.cloud:8860/test?apikey=test_key\";\n      process.env.AUTH_SECRET =\n        \"a-very-long-secret-key-for-development-testing-purposes\";\n      // Missing AUTH_URL, GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET\n\n      const result = validateEnvironmentVariables();\n\n      expect(result.isValid).toBe(false);\n      expect(result.missingRequired).toContain(\"AUTH_URL\");\n      expect(result.missingRequired).toContain(\"GOOGLE_CLIENT_ID\");\n      expect(result.missingRequired).toContain(\"GOOGLE_CLIENT_SECRET\");\n    });\n\n    it(\"should detect security issues with demo values\", () => {\n      process.env.DATABASE_URL =\n        \"sqlitecloud://prod.sqlite.cloud:8860/prod?apikey=prod_key\";\n      process.env.AUTH_SECRET =\n        \"demo-secret-key-for-development-only-not-for-production\";\n      process.env.AUTH_URL = \"https://production-domain.com\";\n      process.env.GOOGLE_CLIENT_ID = \"demo-google-client-id\";\n      process.env.GOOGLE_CLIENT_SECRET = \"demo-google-client-secret\";\n\n      const result = validateEnvironmentVariables();\n\n      expect(result.securityIssues.length).toBeGreaterThan(0);\n      expect(\n        result.securityIssues.some((issue) => issue.includes(\"demo\")),\n      ).toBe(true);\n    });\n\n    it(\"should warn about HTTP URLs in production\", () => {\n      process.env.DATABASE_URL =\n        \"sqlitecloud://prod.sqlite.cloud:8860/prod?apikey=prod_key\";\n      process.env.AUTH_SECRET =\n        \"a-very-long-secure-secret-key-for-production-use-with-sufficient-length\";\n      process.env.AUTH_URL = \"http://production-domain.com\"; // HTTP instead of HTTPS\n      process.env.GOOGLE_CLIENT_ID = \"valid-google-client-id\";\n      process.env.GOOGLE_CLIENT_SECRET = \"valid-google-client-secret\";\n\n      const result = validateEnvironmentVariables();\n\n      expect(\n        result.securityIssues.some((issue) => issue.includes(\"HTTPS\")),\n      ).toBe(true);\n    });\n  });\n\n  describe(\"Database URL Validation\", () => {\n    beforeEach(() => {\n      process.env.NODE_ENV = \"development\";\n      process.env.AUTH_SECRET =\n        \"a-very-long-secret-key-for-development-testing-purposes\";\n    });\n\n    it(\"should accept SQLite Cloud URLs\", () => {\n      process.env.DATABASE_URL =\n        \"sqlitecloud://host.sqlite.cloud:8860/db?apikey=key\";\n\n      const result = validateEnvironmentVariables();\n      expect(result.isValid).toBe(true);\n    });\n\n    it(\"should accept local SQLite file paths\", () => {\n      process.env.DATABASE_URL = \"./dev.db\";\n\n      const result = validateEnvironmentVariables();\n      expect(result.isValid).toBe(true);\n    });\n\n    it(\"should accept SQLite Cloud URLs with parameters\", () => {\n      process.env.DATABASE_URL =\n        \"sqlitecloud://example.sqlite.cloud:8860/database?apikey=xyz\";\n\n      const result = validateEnvironmentVariables();\n      expect(result.isValid).toBe(true);\n    });\n\n    it(\"should reject invalid database URLs\", () => {\n      process.env.DATABASE_URL = \"mysql://user:pass@host:3306/db\";\n\n      const result = validateEnvironmentVariables();\n      expect(result.isValid).toBe(false);\n      expect(result.errors.some((e) => e.includes(\"DATABASE_URL\"))).toBe(true);\n    });\n\n    it(\"should reject empty database URLs\", () => {\n      process.env.DATABASE_URL = \"\";\n\n      const result = validateEnvironmentVariables();\n      expect(result.isValid).toBe(false);\n      expect(result.missingRequired).toContain(\"DATABASE_URL\");\n    });\n  });\n\n  describe(\"AUTH_SECRET Validation\", () => {\n    beforeEach(() => {\n      process.env.NODE_ENV = \"development\";\n      process.env.DATABASE_URL =\n        \"sqlitecloud://test.sqlite.cloud:8860/test?apikey=test_key\";\n    });\n\n    it(\"should accept sufficiently long secrets\", () => {\n      process.env.AUTH_SECRET =\n        \"a-very-long-secret-key-that-meets-minimum-requirements-for-security\";\n\n      const result = validateEnvironmentVariables();\n      expect(result.isValid).toBe(true);\n    });\n\n    it(\"should reject short secrets\", () => {\n      process.env.AUTH_SECRET = \"short-secret\";\n\n      const result = validateEnvironmentVariables();\n      expect(result.isValid).toBe(false);\n      expect(\n        result.errors.some(\n          (e) => e.includes(\"AUTH_SECRET\") && e.includes(\"32 characters\"),\n        ),\n      ).toBe(true);\n    });\n\n    it(\"should reject demo secret in production\", () => {\n      process.env.NODE_ENV = \"production\";\n      process.env.AUTH_SECRET =\n        \"demo-secret-key-for-development-only-not-for-production\";\n      process.env.AUTH_URL = \"https://production-domain.com\";\n      process.env.GOOGLE_CLIENT_ID = \"valid-client-id\";\n      process.env.GOOGLE_CLIENT_SECRET = \"valid-client-secret\";\n\n      const result = validateEnvironmentVariables();\n      expect(result.isValid).toBe(false);\n      expect(result.errors.some((e) => e.includes(\"demo value\"))).toBe(true);\n    });\n  });\n\n  describe(\"Stream Encryption Key Validation\", () => {\n    beforeEach(() => {\n      process.env.NODE_ENV = \"development\";\n      process.env.DATABASE_URL =\n        \"sqlitecloud://test.sqlite.cloud:8860/test?apikey=test_key\";\n      process.env.AUTH_SECRET =\n        \"a-very-long-secret-key-for-development-testing-purposes\";\n    });\n\n    it(\"should accept 32-character encryption keys\", () => {\n      process.env.STREAM_KEY_ENCRYPTION_KEY =\n        \"12345678901234567890123456789012\"; // 32 chars\n\n      const result = validateEnvironmentVariables();\n      expect(result.isValid).toBe(true);\n    });\n\n    it(\"should reject encryption keys that are not 32 characters\", () => {\n      process.env.STREAM_KEY_ENCRYPTION_KEY = \"short-key\";\n\n      const result = validateEnvironmentVariables();\n      expect(result.warnings.some((w) => w.includes(\"32 characters\"))).toBe(\n        true,\n      );\n    });\n  });\n\n  describe(\"Google OAuth Validation\", () => {\n    beforeEach(() => {\n      process.env.NODE_ENV = \"production\";\n      process.env.DATABASE_URL =\n        \"sqlitecloud://prod.sqlite.cloud:8860/prod?apikey=prod_key\";\n      process.env.AUTH_SECRET =\n        \"a-very-long-secure-secret-key-for-production-use-with-sufficient-length\";\n      process.env.AUTH_URL = \"https://production-domain.com\";\n    });\n\n    it(\"should reject demo Google credentials\", () => {\n      process.env.GOOGLE_CLIENT_ID = \"demo-google-client-id\";\n      process.env.GOOGLE_CLIENT_SECRET = \"demo-google-client-secret\";\n\n      const result = validateEnvironmentVariables();\n      expect(result.isValid).toBe(false);\n      expect(result.errors.some((e) => e.includes(\"GOOGLE_CLIENT_ID\"))).toBe(\n        true,\n      );\n      expect(\n        result.errors.some((e) => e.includes(\"GOOGLE_CLIENT_SECRET\")),\n      ).toBe(true);\n    });\n\n    it(\"should accept valid Google credentials\", () => {\n      process.env.GOOGLE_CLIENT_ID = \"valid-google-client-id-from-console\";\n      process.env.GOOGLE_CLIENT_SECRET =\n        \"valid-google-client-secret-from-console\";\n\n      const result = validateEnvironmentVariables();\n      expect(result.isValid).toBe(true);\n    });\n  });\n\n  describe(\"SendGrid API Key Validation\", () => {\n    beforeEach(() => {\n      process.env.NODE_ENV = \"development\";\n      process.env.DATABASE_URL =\n        \"sqlitecloud://test.sqlite.cloud:8860/test?apikey=test_key\";\n      process.env.AUTH_SECRET =\n        \"a-very-long-secret-key-for-development-testing-purposes\";\n    });\n\n    it(\"should accept valid SendGrid API keys\", () => {\n      process.env.SENDGRID_API_KEY = \"SG.valid-api-key-from-sendgrid\";\n\n      const result = validateEnvironmentVariables();\n      expect(result.warnings.some((w) => w.includes(\"SENDGRID_API_KEY\"))).toBe(\n        false,\n      );\n    });\n\n    it(\"should reject invalid SendGrid API keys\", () => {\n      process.env.SENDGRID_API_KEY = \"invalid-api-key\";\n\n      const result = validateEnvironmentVariables();\n      expect(result.warnings.some((w) => w.includes(\"SendGrid\"))).toBe(true);\n    });\n\n    it(\"should reject demo SendGrid API keys\", () => {\n      process.env.SENDGRID_API_KEY = \"SG.demo-sendgrid-api-key\";\n\n      const result = validateEnvironmentVariables();\n      expect(result.warnings.some((w) => w.includes(\"SendGrid\"))).toBe(true);\n    });\n  });\n\n  describe(\"Utility Functions\", () => {\n    it(\"should validate individual environment variables\", () => {\n      const validUrl = validateEnvironmentVariable(\n        \"AUTH_URL\",\n        \"https://example.com\",\n      );\n      expect(validUrl.valid).toBe(true);\n\n      const invalidUrl = validateEnvironmentVariable(\"AUTH_URL\", \"not-a-url\");\n      expect(invalidUrl.valid).toBe(false);\n      expect(invalidUrl.error).toBeDefined();\n    });\n\n    it(\"should return environment variable definitions\", () => {\n      const defs = getEnvironmentVariableDefinitions();\n\n      expect(defs.required.production).toContain(\"DATABASE_URL\");\n      expect(defs.required.production).toContain(\"AUTH_SECRET\");\n      expect(defs.required.production).toContain(\"GOOGLE_CLIENT_ID\");\n\n      expect(defs.required.development).toContain(\"DATABASE_URL\");\n      expect(defs.required.development).toContain(\"AUTH_SECRET\");\n\n      expect(defs.recommended).toContain(\"SENDGRID_API_KEY\");\n      expect(defs.recommended).toContain(\"STREAM_KEY_ENCRYPTION_KEY\");\n      expect(defs.recommended).toContain(\"SENTRY_DSN\");\n      expect(defs.recommended).toContain(\"DATABASE_DIRECT_URL\");\n      expect(defs.recommended).toContain(\"AUTH_TRUST_HOST\");\n      expect(defs.recommended).toContain(\"LOG_LEVEL\");\n      expect(defs.recommended).toContain(\"ALLOWED_ORIGINS\");\n\n      expect(defs.optionalPlatforms).toContain(\"FACEBOOK_APP_ID\");\n      expect(defs.optionalPlatforms).toContain(\"YOUTUBE_CLIENT_ID\");\n      expect(defs.optionalPlatforms).toContain(\"TWITCH_EVENTSUB_SECRET\");\n    });\n\n    it(\"should provide environment status for health checks\", () => {\n      process.env.NODE_ENV = \"development\";\n      process.env.DATABASE_URL =\n        \"sqlitecloud://test.sqlite.cloud:8860/test?apikey=test_key\";\n      process.env.AUTH_SECRET =\n        \"a-very-long-secret-key-for-development-testing-purposes\";\n\n      const status = getEnvironmentStatus();\n\n      expect(status.environment).toBe(\"development\");\n      expect(status.valid).toBe(true);\n      expect(status.missingRequired).toBe(0);\n      expect(typeof status.requiredCount).toBe(\"number\");\n    });\n  });\n\n  describe(\"New Variable Validations\", () => {\n    beforeEach(() => {\n      process.env.NODE_ENV = \"development\";\n      process.env.DATABASE_URL =\n        \"sqlitecloud://test.sqlite.cloud:8860/test?apikey=test_key\";\n      process.env.AUTH_SECRET =\n        \"a-very-long-secret-key-for-development-testing-purposes\";\n    });\n\n    describe(\"DATABASE_DIRECT_URL\", () => {\n      it(\"should accept valid SQLite Cloud URLs\", () => {\n        process.env.DATABASE_DIRECT_URL =\n          \"sqlitecloud://prod.sqlite.cloud:8860/db?apikey=key\";\n\n        const result = validateEnvironmentVariables();\n        expect(\n          result.warnings.some(\n            (w) => w.includes(\"DATABASE_DIRECT_URL\") && w.includes(\"not set\"),\n          ),\n        ).toBe(false);\n      });\n\n      it(\"should reject invalid database URLs\", () => {\n        process.env.DATABASE_DIRECT_URL = \"mysql://user:pass@host:3306/db\";\n\n        const result = validateEnvironmentVariables();\n        expect(\n          result.warnings.some((w) => w.includes(\"DATABASE_DIRECT_URL\")),\n        ).toBe(true);\n      });\n    });\n\n    describe(\"AUTH_TRUST_HOST\", () => {\n      it(\"should accept boolean values\", () => {\n        process.env.AUTH_TRUST_HOST = \"true\";\n        let result = validateEnvironmentVariables();\n        expect(\n          result.warnings.some(\n            (w) => w.includes(\"AUTH_TRUST_HOST\") && !w.includes(\"not set\"),\n          ),\n        ).toBe(false);\n\n        process.env.AUTH_TRUST_HOST = \"false\";\n        result = validateEnvironmentVariables();\n        expect(\n          result.warnings.some(\n            (w) => w.includes(\"AUTH_TRUST_HOST\") && !w.includes(\"not set\"),\n          ),\n        ).toBe(false);\n\n        process.env.AUTH_TRUST_HOST = \"1\";\n        result = validateEnvironmentVariables();\n        expect(\n          result.warnings.some(\n            (w) => w.includes(\"AUTH_TRUST_HOST\") && !w.includes(\"not set\"),\n          ),\n        ).toBe(false);\n      });\n\n      it(\"should reject non-boolean values\", () => {\n        process.env.AUTH_TRUST_HOST = \"yes\";\n\n        const result = validateEnvironmentVariables();\n        expect(\n          result.warnings.some(\n            (w) => w.includes(\"AUTH_TRUST_HOST\") && w.includes(\"boolean\"),\n          ),\n        ).toBe(true);\n      });\n    });\n\n    describe(\"LOG_LEVEL\", () => {\n      it(\"should accept valid log levels\", () => {\n        const validLevels = [\"error\", \"warn\", \"info\", \"debug\", \"ERROR\", \"INFO\"];\n\n        for (const level of validLevels) {\n          process.env.LOG_LEVEL = level;\n          const result = validateEnvironmentVariables();\n          expect(\n            result.warnings.some(\n              (w) => w.includes(\"LOG_LEVEL\") && !w.includes(\"not set\"),\n            ),\n          ).toBe(false);\n        }\n      });\n\n      it(\"should reject invalid log levels\", () => {\n        process.env.LOG_LEVEL = \"verbose\";\n\n        const result = validateEnvironmentVariables();\n        expect(result.warnings.some((w) => w.includes(\"LOG_LEVEL\"))).toBe(true);\n      });\n    });\n\n    describe(\"ALLOWED_ORIGINS\", () => {\n      it(\"should accept wildcard\", () => {\n        process.env.ALLOWED_ORIGINS = \"*\";\n\n        const result = validateEnvironmentVariables();\n        expect(\n          result.warnings.some(\n            (w) => w.includes(\"ALLOWED_ORIGINS\") && !w.includes(\"not set\"),\n          ),\n        ).toBe(false);\n      });\n\n      it(\"should accept comma-separated valid URLs\", () => {\n        process.env.ALLOWED_ORIGINS =\n          \"https://example.com,https://app.example.com,http://localhost:3000\";\n\n        const result = validateEnvironmentVariables();\n        expect(\n          result.warnings.some(\n            (w) => w.includes(\"ALLOWED_ORIGINS\") && !w.includes(\"not set\"),\n          ),\n        ).toBe(false);\n      });\n\n      it(\"should reject invalid URLs\", () => {\n        process.env.ALLOWED_ORIGINS = \"not-a-url,https://valid.com\";\n\n        const result = validateEnvironmentVariables();\n        expect(\n          result.warnings.some(\n            (w) => w.includes(\"ALLOWED_ORIGINS\") && w.includes(\"invalid\"),\n          ),\n        ).toBe(true);\n      });\n    });\n\n    describe(\"Platform Integration Variables\", () => {\n      it(\"should validate FACEBOOK_APP_ID when set\", () => {\n        process.env.FACEBOOK_APP_ID = \"demo-facebook-app-id\";\n\n        const result = validateEnvironmentVariables();\n        expect(result.warnings.some((w) => w.includes(\"FACEBOOK_APP_ID\"))).toBe(\n          true,\n        );\n      });\n\n      it(\"should not warn when FACEBOOK_APP_ID is not set\", () => {\n        // Don't set FACEBOOK_APP_ID\n\n        const result = validateEnvironmentVariables();\n        expect(result.warnings.some((w) => w.includes(\"FACEBOOK_APP_ID\"))).toBe(\n          false,\n        );\n      });\n\n      it(\"should validate YOUTUBE_CLIENT_ID when set\", () => {\n        process.env.YOUTUBE_CLIENT_ID = \"valid-youtube-client-id-from-console\";\n\n        const result = validateEnvironmentVariables();\n        expect(\n          result.warnings.some((w) => w.includes(\"YOUTUBE_CLIENT_ID\")),\n        ).toBe(false);\n      });\n\n      it(\"should reject demo YOUTUBE_CLIENT_SECRET\", () => {\n        process.env.YOUTUBE_CLIENT_SECRET = \"demo-youtube-secret\";\n\n        const result = validateEnvironmentVariables();\n        expect(\n          result.warnings.some((w) => w.includes(\"YOUTUBE_CLIENT_SECRET\")),\n        ).toBe(true);\n      });\n\n      it(\"should validate TWITCH_EVENTSUB_SECRET when set\", () => {\n        process.env.TWITCH_EVENTSUB_SECRET = \"1234567890123456\"; // 16 chars\n\n        const result = validateEnvironmentVariables();\n        expect(\n          result.warnings.some(\n            (w) =>\n              w.includes(\"TWITCH_EVENTSUB_SECRET\") && !w.includes(\"not set\"),\n          ),\n        ).toBe(false);\n      });\n\n      it(\"should reject short TWITCH_EVENTSUB_SECRET\", () => {\n        process.env.TWITCH_EVENTSUB_SECRET = \"short\";\n\n        const result = validateEnvironmentVariables();\n        expect(\n          result.warnings.some(\n            (w) => w.includes(\"TWITCH_EVENTSUB_SECRET\") && w.includes(\"16+\"),\n          ),\n        ).toBe(true);\n      });\n\n      it(\"should validate SENDGRID_SENDER email format\", () => {\n        process.env.SENDGRID_SENDER = \"noreply@example.com\";\n\n        const result = validateEnvironmentVariables();\n        expect(\n          result.warnings.some(\n            (w) => w.includes(\"SENDGRID_SENDER\") && !w.includes(\"not set\"),\n          ),\n        ).toBe(false);\n      });\n\n      it(\"should reject invalid SENDGRID_SENDER email\", () => {\n        process.env.SENDGRID_SENDER = \"not-an-email\";\n\n        const result = validateEnvironmentVariables();\n        expect(\n          result.warnings.some(\n            (w) => w.includes(\"SENDGRID_SENDER\") && w.includes(\"email\"),\n          ),\n        ).toBe(true);\n      });\n    });\n  });\n\n  describe(\"Error Handling and Logging\", () => {\n    it(\"should throw in development with helpful error message\", () => {\n      process.env.NODE_ENV = \"development\";\n      // Missing required variables\n\n      expect(() => {\n        validateAndLogEnvironment();\n      }).toThrow();\n    });\n\n    it(\"should not throw in production for Cloud Run compatibility\", () => {\n      process.env.NODE_ENV = \"production\";\n      // Missing required variables\n\n      expect(() => {\n        validateAndLogEnvironment();\n      }).not.toThrow();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/features/auth-credentials-oauth.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/features/auth-error-handling.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/features/authentication.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/features/calendar.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'jest' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Calendar Integration Tests\n *\n * Tests for event management, timezone handling, and calendar operations\n * Generated by Shuffle & Sync Unit Test Agent\n */\n\nimport { describe, test, expect, jest } from \"@jest/globals\";\n\nconst createMockEvent = (overrides = {}) => ({\n  id: \"event-123\",\n  title: \"Test Event\",\n  type: \"tournament\",\n  startDateTime: new Date(Date.now() + 86400000),\n  endDateTime: new Date(Date.now() + 90000000),\n  timezone: \"UTC\",\n  organizerId: \"user-123\",\n  communityId: \"community-456\",\n  ...overrides,\n});\n\ndescribe(\"Calendar Integration\", () => {\n  test(\"should handle timezone conversions\", () => {\n    const event = createMockEvent({\n      startDateTime: new Date(\"2024-12-25T14:00:00Z\"),\n      timezone: \"America/New_York\",\n    });\n\n    // Basic timezone handling test\n    expect(event.startDateTime).toBeInstanceOf(Date);\n    expect(event.timezone).toBe(\"America/New_York\");\n  });\n\n  test(\"should validate event date ranges\", () => {\n    const event = createMockEvent();\n\n    expect(event.startDateTime.getTime()).toBeLessThan(\n      event.endDateTime.getTime(),\n    );\n    expect(event.startDateTime.getTime()).toBeGreaterThan(Date.now());\n  });\n\n  test(\"should prevent scheduling conflicts\", () => {\n    const event1 = createMockEvent({\n      startDateTime: new Date(\"2024-12-25T14:00:00Z\"),\n      endDateTime: new Date(\"2024-12-25T16:00:00Z\"),\n    });\n\n    const event2 = createMockEvent({\n      startDateTime: new Date(\"2024-12-25T15:00:00Z\"),\n      endDateTime: new Date(\"2024-12-25T17:00:00Z\"),\n    });\n\n    // Check for overlap\n    const hasOverlap =\n      event1.startDateTime < event2.endDateTime &&\n      event2.startDateTime < event1.endDateTime;\n\n    expect(hasOverlap).toBe(true);\n  });\n\n  test(\"should handle event capacity limits\", () => {\n    const event = createMockEvent({ maxAttendees: 50, currentAttendees: 45 });\n\n    const spotsRemaining = event.maxAttendees - event.currentAttendees;\n    const canJoin = spotsRemaining > 0;\n\n    expect(spotsRemaining).toBe(5);\n    expect(canJoin).toBe(true);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/features/card-recognition.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MtgCard' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Card Recognition Service Tests\n *\n * Tests for Magic: The Gathering card recognition and lookup functionality\n */\n\nimport {\n  cardRecognitionService,\n  type MtgCard,\n} from \"../../services/card-recognition\";\n\ndescribe(\"Card Recognition Service\", () => {\n  beforeEach(() => {\n    // Clear cache before each test\n    cardRecognitionService.clearCache();\n  });\n\n  describe(\"searchCards\", () => {\n    test(\"should search for cards by name\", async () => {\n      const result = await cardRecognitionService.searchCards(\"Lightning Bolt\");\n\n      expect(result).toBeDefined();\n      expect(Array.isArray(result.cards)).toBe(true);\n      expect(result.total).toBeGreaterThan(0);\n      expect(result.cards.length).toBeGreaterThan(0);\n\n      // Verify card structure\n      const card = result.cards[0];\n      expect(card).toBeDefined();\n      expect(card?.name).toBeDefined();\n      expect(card?.id).toBeDefined();\n    }, 10000);\n\n    test(\"should return empty results for non-existent card\", async () => {\n      const result = await cardRecognitionService.searchCards(\n        \"NonExistentCardXYZ123\",\n      );\n\n      expect(result.cards).toHaveLength(0);\n      expect(result.total).toBe(0);\n      expect(result.hasMore).toBe(false);\n    });\n\n    test(\"should filter by set\", async () => {\n      const result = await cardRecognitionService.searchCards(\n        \"Lightning Bolt\",\n        {\n          set: \"lea\", // Limited Edition Alpha\n          limit: 5,\n        },\n      );\n\n      expect(result).toBeDefined();\n      if (result.cards.length > 0) {\n        const card = result.cards[0];\n        expect(card?.setCode).toBe(\"lea\");\n      }\n    }, 10000);\n\n    test(\"should filter by format legality\", async () => {\n      const result = await cardRecognitionService.searchCards(\n        \"Lightning Bolt\",\n        {\n          format: \"modern\",\n          limit: 5,\n        },\n      );\n\n      expect(result).toBeDefined();\n      if (result.cards.length > 0) {\n        const card = result.cards[0];\n        expect(card?.legalities).toBeDefined();\n      }\n    }, 10000);\n  });\n\n  describe(\"getCardById\", () => {\n    test(\"should get card by Scryfall ID\", async () => {\n      // First search for a card to get an ID\n      const searchResult = await cardRecognitionService.searchCards(\n        \"Lightning Bolt\",\n        { limit: 1 },\n      );\n      expect(searchResult.cards.length).toBeGreaterThan(0);\n\n      const cardId = searchResult.cards[0]?.id;\n      expect(cardId).toBeDefined();\n\n      // Now get the card by ID\n      if (cardId) {\n        const card = await cardRecognitionService.getCardById(cardId);\n\n        expect(card).toBeDefined();\n        expect(card?.id).toBe(cardId);\n        expect(card?.name).toBeDefined();\n      }\n    }, 10000);\n\n    test(\"should return null for invalid card ID\", async () => {\n      const card = await cardRecognitionService.getCardById(\"invalid-id-12345\");\n      expect(card).toBeNull();\n    });\n\n    test(\"should use cache for repeated requests\", async () => {\n      // First search to get an ID\n      const searchResult = await cardRecognitionService.searchCards(\n        \"Lightning Bolt\",\n        { limit: 1 },\n      );\n      const cardId = searchResult.cards[0]?.id;\n\n      if (cardId) {\n        // First call - should hit API\n        const card1 = await cardRecognitionService.getCardById(cardId);\n\n        // Second call - should hit cache\n        const card2 = await cardRecognitionService.getCardById(cardId);\n\n        expect(card1).toEqual(card2);\n\n        // Verify cache stats\n        const stats = cardRecognitionService.getCacheStats();\n        expect(stats.size).toBeGreaterThan(0);\n      }\n    }, 10000);\n  });\n\n  describe(\"getCardByName\", () => {\n    test(\"should get card by exact name\", async () => {\n      const card = await cardRecognitionService.getCardByName(\"Lightning Bolt\");\n\n      expect(card).toBeDefined();\n      expect(card?.name).toBe(\"Lightning Bolt\");\n      expect(card?.id).toBeDefined();\n      expect(card?.manaCost).toBeDefined();\n    }, 10000);\n\n    test(\"should return null for non-existent card name\", async () => {\n      const card = await cardRecognitionService.getCardByName(\n        \"This Card Does Not Exist XYZ\",\n      );\n      expect(card).toBeNull();\n    });\n\n    test(\"should get specific set version\", async () => {\n      const card = await cardRecognitionService.getCardByName(\n        \"Lightning Bolt\",\n        {\n          set: \"lea\",\n        },\n      );\n\n      if (card) {\n        expect(card.name).toBe(\"Lightning Bolt\");\n        expect(card.setCode).toBe(\"lea\");\n      }\n    }, 10000);\n  });\n\n  describe(\"autocomplete\", () => {\n    test(\"should return card name suggestions\", async () => {\n      const result = await cardRecognitionService.autocomplete(\"Light\");\n\n      expect(result).toBeDefined();\n      expect(Array.isArray(result.suggestions)).toBe(true);\n      expect(result.suggestions.length).toBeGreaterThan(0);\n\n      // Check that suggestions contain the query\n      const hasMatchingName = result.suggestions.some((s) =>\n        s.name.toLowerCase().includes(\"light\"),\n      );\n      expect(hasMatchingName).toBe(true);\n    }, 10000);\n\n    test(\"should return empty for short query\", async () => {\n      const result = await cardRecognitionService.autocomplete(\"L\");\n      expect(result.suggestions).toHaveLength(0);\n    });\n\n    test(\"should limit results\", async () => {\n      const result = await cardRecognitionService.autocomplete(\"Lightning\", 3);\n      expect(result.suggestions.length).toBeLessThanOrEqual(3);\n    }, 10000);\n  });\n\n  describe(\"getRandomCard\", () => {\n    test(\"should return a random card\", async () => {\n      const card = await cardRecognitionService.getRandomCard();\n\n      expect(card).toBeDefined();\n      expect(card.id).toBeDefined();\n      expect(card.name).toBeDefined();\n      expect(card.typeLine).toBeDefined();\n    }, 10000);\n\n    test(\"should filter by set\", async () => {\n      const card = await cardRecognitionService.getRandomCard({ set: \"m21\" });\n\n      expect(card).toBeDefined();\n      if (card.setCode) {\n        expect(card.setCode).toBe(\"m21\");\n      }\n    }, 10000);\n\n    test(\"should filter by format\", async () => {\n      const card = await cardRecognitionService.getRandomCard({\n        format: \"standard\",\n      });\n\n      expect(card).toBeDefined();\n      expect(card.legalities).toBeDefined();\n    }, 10000);\n  });\n\n  describe(\"caching\", () => {\n    test(\"should cache cards and respect cache limits\", async () => {\n      // Clear cache first\n      cardRecognitionService.clearCache();\n\n      const initialStats = cardRecognitionService.getCacheStats();\n      expect(initialStats.size).toBe(0);\n\n      // Search for a card to populate cache\n      await cardRecognitionService.searchCards(\"Lightning Bolt\", { limit: 5 });\n\n      const afterStats = cardRecognitionService.getCacheStats();\n      expect(afterStats.size).toBeGreaterThan(0);\n      expect(afterStats.size).toBeLessThanOrEqual(afterStats.maxSize);\n    }, 10000);\n\n    test(\"should clear cache on demand\", async () => {\n      // Populate cache\n      await cardRecognitionService.searchCards(\"Lightning Bolt\", { limit: 1 });\n\n      const beforeClear = cardRecognitionService.getCacheStats();\n      expect(beforeClear.size).toBeGreaterThan(0);\n\n      // Clear cache\n      cardRecognitionService.clearCache();\n\n      const afterClear = cardRecognitionService.getCacheStats();\n      expect(afterClear.size).toBe(0);\n    });\n  });\n\n  describe(\"card data structure\", () => {\n    test(\"should return complete card data\", async () => {\n      const card = await cardRecognitionService.getCardByName(\"Lightning Bolt\");\n\n      expect(card).toBeDefined();\n      if (card) {\n        // Required fields\n        expect(card.id).toBeDefined();\n        expect(card.name).toBeDefined();\n        expect(card.typeLine).toBeDefined();\n        expect(card.setCode).toBeDefined();\n        expect(card.setName).toBeDefined();\n        expect(card.collectorNumber).toBeDefined();\n        expect(card.rarity).toBeDefined();\n\n        // Optional fields that should exist for most cards\n        expect(card.manaCost).toBeDefined();\n        expect(card.oracleText).toBeDefined();\n        expect(card.imageUris).toBeDefined();\n\n        // Card-type specific fields\n        if (card.typeLine.includes(\"Creature\")) {\n          expect(card.power).toBeDefined();\n          expect(card.toughness).toBeDefined();\n        }\n      }\n    }, 10000);\n  });\n\n  describe(\"error handling\", () => {\n    test(\"should handle network errors gracefully\", async () => {\n      // This test verifies error handling - we can't easily trigger real network errors\n      // but the service should handle them\n      expect(async () => {\n        await cardRecognitionService.getCardById(\"test-id\");\n      }).not.toThrow();\n    });\n\n    test(\"should handle malformed queries gracefully\", async () => {\n      // Empty query should return empty results\n      const result = await cardRecognitionService.searchCards(\"!!!@@@###$$$\");\n      expect(result).toBeDefined();\n      // Empty or error results are acceptable\n      expect(result.cards).toBeDefined();\n    });\n  });\n\n  describe(\"rate limiting\", () => {\n    test(\"should enforce rate limiting between requests\", async () => {\n      const start = Date.now();\n\n      // Make two quick requests\n      await cardRecognitionService.getRandomCard();\n      await cardRecognitionService.getRandomCard();\n\n      const elapsed = Date.now() - start;\n\n      // Should take at least 100ms due to rate limiting\n      expect(elapsed).toBeGreaterThanOrEqual(100);\n    }, 10000);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/features/events.integration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'beforeAll' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'afterAll' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'beforeEach' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Event Management Integration Tests\n *\n * Tests for comprehensive event scheduling and pod management functionality\n * Based on Event Scheduling & Promotion PRD requirements\n *\n * Generated as part of PRD audit - December 2024\n */\n\nimport {\n  describe,\n  test,\n  expect,\n  beforeAll,\n  afterAll,\n  beforeEach,\n} from \"@jest/globals\";\n\n// Mock storage and dependencies for now\n// In a real integration test, we would use a test database\n\nconst createMockEvent = (overrides = {}) => ({\n  id: \"event-\" + Math.random().toString(36).substr(2, 9),\n  title: \"Test Event\",\n  type: \"game_pod\",\n  date: new Date(Date.now() + 86400000).toISOString().split(\"T\")[0],\n  time: \"18:00\",\n  location: \"Test Location\",\n  communityId: \"community-123\",\n  creatorId: \"user-123\",\n  hostId: \"user-123\",\n  playerSlots: 4,\n  alternateSlots: 2,\n  gameFormat: \"commander\",\n  powerLevel: 7,\n  status: \"active\",\n  isPublic: true,\n  createdAt: new Date(),\n  updatedAt: new Date(),\n  ...overrides,\n});\n\nconst createMockAttendee = (overrides = {}) => ({\n  id: \"attendee-\" + Math.random().toString(36).substr(2, 9),\n  eventId: \"event-123\",\n  userId: \"user-\" + Math.random().toString(36).substr(2, 9),\n  status: \"attending\",\n  role: \"participant\",\n  playerType: \"main\",\n  joinedAt: new Date(),\n  ...overrides,\n});\n\ndescribe(\"Event Management Integration\", () => {\n  describe(\"Event Creation\", () => {\n    test(\"creates basic event with required fields\", () => {\n      const event = createMockEvent({\n        title: \"Friday Night Magic\",\n        type: \"tournament\",\n        date: \"2024-12-20\",\n        time: \"19:00\",\n      });\n\n      expect(event.title).toBe(\"Friday Night Magic\");\n      expect(event.type).toBe(\"tournament\");\n      expect(event.date).toBe(\"2024-12-20\");\n      expect(event.time).toBe(\"19:00\");\n    });\n\n    test(\"creates game_pod event with pod-specific fields\", () => {\n      const event = createMockEvent({\n        type: \"game_pod\",\n        playerSlots: 4,\n        alternateSlots: 2,\n        gameFormat: \"commander\",\n        powerLevel: 8,\n      });\n\n      expect(event.type).toBe(\"game_pod\");\n      expect(event.playerSlots).toBe(4);\n      expect(event.alternateSlots).toBe(2);\n      expect(event.gameFormat).toBe(\"commander\");\n      expect(event.powerLevel).toBe(8);\n    });\n\n    test(\"validates player slots are within limits (2-8)\", () => {\n      const validEvent = createMockEvent({ playerSlots: 4 });\n      expect(validEvent.playerSlots).toBeGreaterThanOrEqual(2);\n      expect(validEvent.playerSlots).toBeLessThanOrEqual(8);\n\n      // In real implementation, should reject invalid values\n      const invalidValues = [1, 9, 10, 0, -1];\n      invalidValues.forEach((slots) => {\n        // This would throw validation error in real implementation\n        expect(slots < 2 || slots > 8).toBe(true);\n      });\n    });\n\n    test(\"validates power level is 1-10\", () => {\n      const validEvent = createMockEvent({ powerLevel: 7 });\n      expect(validEvent.powerLevel).toBeGreaterThanOrEqual(1);\n      expect(validEvent.powerLevel).toBeLessThanOrEqual(10);\n\n      const invalidValues = [0, 11, 15, -1];\n      invalidValues.forEach((level) => {\n        expect(level < 1 || level > 10).toBe(true);\n      });\n    });\n\n    test(\"auto-creates TableSync session for game_pod events\", () => {\n      const event = createMockEvent({ type: \"game_pod\" });\n\n      // Mock game session that would be created\n      const expectedGameSession = {\n        eventId: event.id,\n        hostId: event.creatorId,\n        status: \"waiting\",\n        currentPlayers: 0,\n        maxPlayers: event.playerSlots,\n        gameData: {\n          name: event.title,\n          format: event.gameFormat,\n          powerLevel: event.powerLevel,\n          description: event.description || \"\",\n        },\n      };\n\n      expect(expectedGameSession.eventId).toBe(event.id);\n      expect(expectedGameSession.maxPlayers).toBe(event.playerSlots);\n      expect(expectedGameSession.gameData.format).toBe(event.gameFormat);\n    });\n\n    test(\"does not create game session for non-pod events\", () => {\n      const tournamentEvent = createMockEvent({ type: \"tournament\" });\n      const conventionEvent = createMockEvent({ type: \"convention\" });\n\n      // Game session should only be created for game_pod type\n      expect(tournamentEvent.type).not.toBe(\"game_pod\");\n      expect(conventionEvent.type).not.toBe(\"game_pod\");\n    });\n  });\n\n  describe(\"Pod Management\", () => {\n    test(\"assigns main slot when pod has space\", () => {\n      const event = createMockEvent({ playerSlots: 4 });\n      const currentMainPlayers = 2;\n\n      const newAttendee = createMockAttendee({\n        eventId: event.id,\n        playerType:\n          currentMainPlayers < event.playerSlots ? \"main\" : \"alternate\",\n      });\n\n      expect(newAttendee.playerType).toBe(\"main\");\n      expect(currentMainPlayers + 1).toBeLessThanOrEqual(event.playerSlots);\n    });\n\n    test(\"assigns alternate slot when pod main slots full\", () => {\n      const event = createMockEvent({\n        playerSlots: 4,\n        alternateSlots: 2,\n      });\n      const currentMainPlayers = 4; // Pod is full\n      const currentAlternates = 0;\n\n      const newAttendee = createMockAttendee({\n        eventId: event.id,\n        playerType:\n          currentMainPlayers >= event.playerSlots ? \"alternate\" : \"main\",\n      });\n\n      expect(newAttendee.playerType).toBe(\"alternate\");\n      expect(currentAlternates + 1).toBeLessThanOrEqual(event.alternateSlots);\n    });\n\n    test(\"calculates pod status correctly\", () => {\n      const event = createMockEvent({\n        playerSlots: 4,\n        alternateSlots: 2,\n      });\n\n      const attendees = [\n        createMockAttendee({ playerType: \"main\", status: \"attending\" }),\n        createMockAttendee({ playerType: \"main\", status: \"attending\" }),\n        createMockAttendee({ playerType: \"main\", status: \"attending\" }),\n        createMockAttendee({ playerType: \"alternate\", status: \"attending\" }),\n      ];\n\n      const mainPlayers = attendees.filter(\n        (a) => a.playerType === \"main\" && a.status === \"attending\",\n      ).length;\n      const alternates = attendees.filter(\n        (a) => a.playerType === \"alternate\" && a.status === \"attending\",\n      ).length;\n\n      expect(mainPlayers).toBe(3);\n      expect(alternates).toBe(1);\n      expect(mainPlayers < event.playerSlots).toBe(true); // Not full yet\n    });\n\n    test(\"identifies when pod is full\", () => {\n      const event = createMockEvent({ playerSlots: 4 });\n\n      const attendees = [\n        createMockAttendee({ playerType: \"main\" }),\n        createMockAttendee({ playerType: \"main\" }),\n        createMockAttendee({ playerType: \"main\" }),\n        createMockAttendee({ playerType: \"main\" }),\n      ];\n\n      const mainPlayers = attendees.filter(\n        (a) => a.playerType === \"main\",\n      ).length;\n      const isFull = mainPlayers >= event.playerSlots;\n\n      expect(isFull).toBe(true);\n      expect(mainPlayers).toBe(event.playerSlots);\n    });\n\n    test(\"identifies when pod is almost full (1 slot remaining)\", () => {\n      const event = createMockEvent({ playerSlots: 4 });\n\n      const attendees = [\n        createMockAttendee({ playerType: \"main\" }),\n        createMockAttendee({ playerType: \"main\" }),\n        createMockAttendee({ playerType: \"main\" }),\n      ];\n\n      const mainPlayers = attendees.filter(\n        (a) => a.playerType === \"main\",\n      ).length;\n      const isAlmostFull = mainPlayers === event.playerSlots - 1;\n\n      expect(isAlmostFull).toBe(true);\n      expect(event.playerSlots - mainPlayers).toBe(1);\n    });\n\n    test(\"handles spectator role separately from players\", () => {\n      const spectator = createMockAttendee({\n        role: \"spectator\",\n        playerType: \"main\", // Spectators might have playerType but don't count\n      });\n\n      expect(spectator.role).toBe(\"spectator\");\n      // In real implementation, spectators wouldn't count toward pod capacity\n      const isSpectator = spectator.role === \"spectator\";\n      expect(isSpectator).toBe(true);\n    });\n  });\n\n  describe(\"Bulk Event Creation\", () => {\n    test(\"creates multiple events from array\", () => {\n      const bulkEvents = [\n        createMockEvent({ title: \"Event 1\", date: \"2024-12-20\" }),\n        createMockEvent({ title: \"Event 2\", date: \"2024-12-21\" }),\n        createMockEvent({ title: \"Event 3\", date: \"2024-12-22\" }),\n      ];\n\n      expect(bulkEvents).toHaveLength(3);\n      expect(bulkEvents[0].title).toBe(\"Event 1\");\n      expect(bulkEvents[1].title).toBe(\"Event 2\");\n      expect(bulkEvents[2].title).toBe(\"Event 3\");\n    });\n\n    test(\"validates all events have required fields\", () => {\n      const bulkEvents = [\n        {\n          title: \"Event 1\",\n          type: \"tournament\",\n          date: \"2024-12-20\",\n          time: \"18:00\",\n          location: \"LGS\",\n        },\n        {\n          title: \"Event 2\",\n          type: \"game_pod\",\n          date: \"2024-12-21\",\n          time: \"19:00\",\n          location: \"Online\",\n        },\n      ];\n\n      bulkEvents.forEach((event) => {\n        expect(event.title).toBeDefined();\n        expect(event.type).toBeDefined();\n        expect(event.date).toBeDefined();\n        expect(event.time).toBeDefined();\n        expect(event.location).toBeDefined();\n      });\n    });\n\n    test(\"handles CSV parsing format\", () => {\n      // Simulated CSV row parsed to object\n      const csvRow =\n        \"Weekly EDH Pod,Commander night,game_pod,2024-12-20,18:00,Local Game Store,community-id,4,commander,7\";\n      const fields = csvRow.split(\",\");\n\n      const event = {\n        title: fields[0],\n        description: fields[1],\n        type: fields[2],\n        date: fields[3],\n        time: fields[4],\n        location: fields[5],\n        communityId: fields[6],\n        playerSlots: parseInt(fields[7]),\n        gameFormat: fields[8],\n        powerLevel: parseInt(fields[9]),\n      };\n\n      expect(event.title).toBe(\"Weekly EDH Pod\");\n      expect(event.type).toBe(\"game_pod\");\n      expect(event.playerSlots).toBe(4);\n      expect(event.gameFormat).toBe(\"commander\");\n    });\n  });\n\n  describe(\"Recurring Events\", () => {\n    test(\"generates daily recurring events\", () => {\n      const baseEvent = createMockEvent({\n        title: \"Daily Game Night\",\n        date: \"2024-12-20\",\n        isRecurring: true,\n        recurrencePattern: \"daily\",\n        recurrenceInterval: 1,\n        recurrenceEndDate: \"2024-12-24\",\n      });\n\n      // Calculate how many events should be created\n      const startDate = new Date(baseEvent.date);\n      const endDate = baseEvent.recurrenceEndDate \n        ? new Date(baseEvent.recurrenceEndDate)\n        : startDate;\n      const daysDiff = Math.floor(\n        (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24),\n      );\n\n      expect(baseEvent.recurrencePattern).toBe(\"daily\");\n      expect(daysDiff + 1).toBe(5); // Dec 20-24 = 5 days\n    });\n\n    test(\"generates weekly recurring events\", () => {\n      const baseEvent = createMockEvent({\n        title: \"Friday Night Magic\",\n        date: \"2024-12-20\", // A Friday\n        isRecurring: true,\n        recurrencePattern: \"weekly\",\n        recurrenceInterval: 1,\n        recurrenceEndDate: \"2025-01-31\",\n      });\n\n      const startDate = new Date(baseEvent.date);\n      const endDate = baseEvent.recurrenceEndDate \n        ? new Date(baseEvent.recurrenceEndDate)\n        : startDate;\n      const weeksDiff = Math.floor(\n        (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24 * 7),\n      );\n\n      expect(baseEvent.recurrencePattern).toBe(\"weekly\");\n      expect(weeksDiff).toBeGreaterThan(4); // Multiple weeks\n    });\n\n    test(\"generates monthly recurring events\", () => {\n      const baseEvent = createMockEvent({\n        title: \"Monthly Tournament\",\n        date: \"2024-12-15\", // 15th of month\n        isRecurring: true,\n        recurrencePattern: \"monthly\",\n        recurrenceInterval: 1,\n        recurrenceEndDate: \"2025-03-15\",\n      });\n\n      expect(baseEvent.recurrencePattern).toBe(\"monthly\");\n      // Should create events for Dec, Jan, Feb, Mar = 4 events\n    });\n\n    test(\"respects recurrence interval\", () => {\n      const baseEvent = createMockEvent({\n        title: \"Bi-weekly Game\",\n        date: \"2024-12-20\",\n        isRecurring: true,\n        recurrencePattern: \"weekly\",\n        recurrenceInterval: 2, // Every 2 weeks\n        recurrenceEndDate: \"2025-01-31\",\n      });\n\n      expect(baseEvent.recurrenceInterval).toBe(2);\n      // Should create fewer events than weekly (every other week)\n    });\n\n    test(\"links child events to parent event\", () => {\n      const parentEvent = createMockEvent({\n        title: \"Weekly Game\",\n        isRecurring: true,\n        recurrencePattern: \"weekly\",\n      });\n\n      const childEvent = createMockEvent({\n        title: \"Weekly Game\",\n        parentEventId: parentEvent.id,\n        date: \"2024-12-27\", // One week later\n      });\n\n      expect(childEvent.parentEventId).toBe(parentEvent.id);\n      expect(childEvent.title).toBe(parentEvent.title);\n    });\n  });\n\n  describe(\"Event Notifications\", () => {\n    test(\"should notify when pod is filled\", () => {\n      const notification = {\n        type: \"pod_filled\",\n        title: \"Game Pod is Full!\",\n        message: \"Test Event is now at full capacity\",\n        priority: \"high\",\n        eventId: \"event-123\",\n      };\n\n      expect(notification.type).toBe(\"pod_filled\");\n      expect(notification.priority).toBe(\"high\");\n    });\n\n    test(\"should notify when pod is almost full\", () => {\n      const notification = {\n        type: \"pod_almost_full\",\n        title: \"Game Pod Almost Full\",\n        message: \"Test Event needs 1 more player\",\n        priority: \"normal\",\n        eventId: \"event-123\",\n      };\n\n      expect(notification.type).toBe(\"pod_almost_full\");\n      expect(notification.priority).toBe(\"normal\");\n    });\n\n    test(\"should notify when someone joins event\", () => {\n      const notification = {\n        type: \"event_join\",\n        title: \"New Player Joined\",\n        message: \"Player123 joined your event\",\n        priority: \"normal\",\n      };\n\n      expect(notification.type).toBe(\"event_join\");\n    });\n\n    test(\"should notify when someone leaves event\", () => {\n      const notification = {\n        type: \"event_leave\",\n        title: \"Player Left Your Pod\",\n        message: \"Player123 left your event\",\n        priority: \"normal\",\n      };\n\n      expect(notification.type).toBe(\"event_leave\");\n    });\n\n    test(\"should send notification to correct recipients\", () => {\n      const event = createMockEvent({ creatorId: \"host-123\" });\n      const attendees = [\n        createMockAttendee({ userId: \"user-1\" }),\n        createMockAttendee({ userId: \"user-2\" }),\n        createMockAttendee({ userId: \"user-3\" }),\n      ];\n\n      // For pod_filled, notify all participants except sender\n      const recipients = [\n        event.creatorId,\n        ...attendees.map((a) => a.userId),\n      ].filter((id, index, self) => self.indexOf(id) === index);\n\n      expect(recipients).toContain(\"host-123\");\n      expect(recipients).toContain(\"user-1\");\n      expect(recipients.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"Event Validation\", () => {\n    test(\"rejects events with past dates\", () => {\n      const yesterday = new Date(Date.now() - 86400000)\n        .toISOString()\n        .split(\"T\")[0];\n      const pastEvent = createMockEvent({ date: yesterday });\n\n      const isInPast =\n        new Date(pastEvent.date) <\n        new Date(new Date().toISOString().split(\"T\")[0]);\n\n      // In real implementation, this should be rejected\n      expect(isInPast).toBe(true);\n    });\n\n    test(\"validates event type is from allowed list\", () => {\n      const validTypes = [\n        \"tournament\",\n        \"convention\",\n        \"release\",\n        \"stream\",\n        \"community\",\n        \"personal\",\n        \"game_pod\",\n      ];\n      const event = createMockEvent({ type: \"tournament\" });\n\n      expect(validTypes).toContain(event.type);\n    });\n\n    test(\"validates time format is HH:MM\", () => {\n      const validTimes = [\"09:00\", \"14:30\", \"23:59\", \"00:00\"];\n      const invalidTimes = [\"25:00\", \"12:60\", \"noon\"];\n\n      // Pattern for strict HH:MM format (two digits required)\n      const timePattern = /^([0-1][0-9]|2[0-3]):[0-5][0-9]$/;\n\n      validTimes.forEach((time) => {\n        expect(timePattern.test(time)).toBe(true);\n      });\n\n      invalidTimes.forEach((time) => {\n        expect(timePattern.test(time)).toBe(false);\n      });\n    });\n\n    test(\"validates required fields are present\", () => {\n      const requiredFields = [\"title\", \"type\", \"date\", \"time\", \"location\"];\n      const event = createMockEvent();\n\n      requiredFields.forEach((field) => {\n        expect(event[field as keyof typeof event]).toBeDefined();\n      });\n    });\n  });\n\n  describe(\"Authorization\", () => {\n    test(\"only creator can edit event\", () => {\n      const event = createMockEvent({ creatorId: \"user-123\" });\n      const requestingUserId = \"user-456\";\n\n      const canEdit = event.creatorId === requestingUserId;\n      expect(canEdit).toBe(false);\n    });\n\n    test(\"creator can edit event\", () => {\n      const event = createMockEvent({ creatorId: \"user-123\" });\n      const requestingUserId = \"user-123\";\n\n      const canEdit = event.creatorId === requestingUserId;\n      expect(canEdit).toBe(true);\n    });\n\n    test(\"only creator can delete event\", () => {\n      const event = createMockEvent({ creatorId: \"user-123\" });\n      const requestingUserId = \"user-456\";\n\n      const canDelete = event.creatorId === requestingUserId;\n      expect(canDelete).toBe(false);\n    });\n\n    test(\"attendees can leave event they joined\", () => {\n      const attendee = createMockAttendee({\n        eventId: \"event-123\",\n        userId: \"user-456\",\n      });\n      const requestingUserId = \"user-456\";\n\n      const canLeave = attendee.userId === requestingUserId;\n      expect(canLeave).toBe(true);\n    });\n  });\n\n  describe(\"Calendar Queries\", () => {\n    test(\"filters events by date range\", () => {\n      const events = [\n        createMockEvent({ date: \"2024-12-15\" }),\n        createMockEvent({ date: \"2024-12-20\" }),\n        createMockEvent({ date: \"2024-12-25\" }),\n        createMockEvent({ date: \"2025-01-05\" }),\n      ];\n\n      const startDate = \"2024-12-18\";\n      const endDate = \"2024-12-31\";\n\n      const filtered = events.filter(\n        (e) => e.date >= startDate && e.date <= endDate,\n      );\n\n      expect(filtered).toHaveLength(2);\n      expect(filtered[0].date).toBe(\"2024-12-20\");\n      expect(filtered[1].date).toBe(\"2024-12-25\");\n    });\n\n    test(\"filters events by community\", () => {\n      const events = [\n        createMockEvent({ communityId: \"mtg-community\" }),\n        createMockEvent({ communityId: \"pokemon-community\" }),\n        createMockEvent({ communityId: \"mtg-community\" }),\n      ];\n\n      const filtered = events.filter((e) => e.communityId === \"mtg-community\");\n      expect(filtered).toHaveLength(2);\n    });\n\n    test(\"filters events by type\", () => {\n      const events = [\n        createMockEvent({ type: \"tournament\" }),\n        createMockEvent({ type: \"game_pod\" }),\n        createMockEvent({ type: \"tournament\" }),\n        createMockEvent({ type: \"convention\" }),\n      ];\n\n      const filtered = events.filter((e) => e.type === \"tournament\");\n      expect(filtered).toHaveLength(2);\n    });\n\n    test(\"shows only upcoming events\", () => {\n      const today = new Date().toISOString().split(\"T\")[0];\n      const yesterday = new Date(Date.now() - 86400000)\n        .toISOString()\n        .split(\"T\")[0];\n      const tomorrow = new Date(Date.now() + 86400000)\n        .toISOString()\n        .split(\"T\")[0];\n\n      const events = [\n        createMockEvent({ date: yesterday }),\n        createMockEvent({ date: today }),\n        createMockEvent({ date: tomorrow }),\n      ];\n\n      const upcoming = events.filter((e) => e.date >= today);\n      expect(upcoming.length).toBeGreaterThanOrEqual(2);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/features/matchmaking.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'jest' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'criteria' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":52,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1647,1650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1647,1650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AI Matchmaking Tests\n *\n * Tests for AI-powered matchmaking algorithms and edge case handling\n * Generated by Shuffle & Sync Unit Test Agent\n */\n\nimport { describe, test, expect, jest } from \"@jest/globals\";\n\nconst createMockMatchingCriteria = (overrides = {}) => ({\n  userId: \"user-123\",\n  gameTypes: [\"mtg\"],\n  skillLevel: \"intermediate\",\n  timezone: \"UTC-5\",\n  maxResults: 10,\n  minCompatibilityScore: 0.6,\n  ...overrides,\n});\n\nconst createMockMatch = (overrides = {}) => ({\n  userId: \"user-456\",\n  compatibilityScore: 0.85,\n  sharedInterests: [\"mtg\"],\n  skillLevelMatch: 0.9,\n  timezoneCompatibility: 0.8,\n  ...overrides,\n});\n\ndescribe(\"AI Matchmaking\", () => {\n  test(\"should calculate compatibility scores\", () => {\n    const user1 = { gameTypes: [\"mtg\", \"pokemon\"], skillLevel: \"intermediate\" };\n    const user2 = { gameTypes: [\"mtg\"], skillLevel: \"intermediate\" };\n\n    // Simple compatibility calculation\n    const sharedGames = user1.gameTypes.filter((game) =>\n      user2.gameTypes.includes(game),\n    );\n    const gameCompatibility =\n      sharedGames.length /\n      Math.max(user1.gameTypes.length, user2.gameTypes.length);\n    const skillCompatibility =\n      user1.skillLevel === user2.skillLevel ? 1.0 : 0.5;\n\n    const overallScore = (gameCompatibility + skillCompatibility) / 2;\n\n    expect(sharedGames).toContain(\"mtg\");\n    expect(overallScore).toBeGreaterThan(0.5);\n    expect(overallScore).toBeLessThanOrEqual(1.0);\n  });\n\n  test(\"should handle empty match results\", () => {\n    const criteria = createMockMatchingCriteria({\n      gameTypes: [\"very-rare-game\"],\n      skillLevel: \"expert\",\n    });\n\n    const matches: any[] = []; // Simulate no matches found\n\n    expect(matches).toHaveLength(0);\n  });\n\n  test(\"should respect user filters\", () => {\n    const criteria = createMockMatchingCriteria({\n      excludeUserIds: [\"user-blocked\"],\n      minCompatibilityScore: 0.7,\n    });\n\n    const allMatches = [\n      createMockMatch({ userId: \"user-456\", compatibilityScore: 0.9 }),\n      createMockMatch({ userId: \"user-blocked\", compatibilityScore: 0.8 }),\n      createMockMatch({ userId: \"user-789\", compatibilityScore: 0.6 }),\n    ];\n\n    const filteredMatches = allMatches.filter(\n      (match) =>\n        !criteria.excludeUserIds.includes(match.userId) &&\n        match.compatibilityScore >= criteria.minCompatibilityScore,\n    );\n\n    expect(filteredMatches).toHaveLength(1);\n    expect(filteredMatches[0].userId).toBe(\"user-456\");\n  });\n\n  test(\"should sort matches by compatibility score\", () => {\n    const matches = [\n      createMockMatch({ userId: \"user-1\", compatibilityScore: 0.7 }),\n      createMockMatch({ userId: \"user-2\", compatibilityScore: 0.9 }),\n      createMockMatch({ userId: \"user-3\", compatibilityScore: 0.8 }),\n    ];\n\n    const sortedMatches = matches.sort(\n      (a, b) => b.compatibilityScore - a.compatibilityScore,\n    );\n\n    expect(sortedMatches[0].compatibilityScore).toBe(0.9);\n    expect(sortedMatches[1].compatibilityScore).toBe(0.8);\n    expect(sortedMatches[2].compatibilityScore).toBe(0.7);\n  });\n\n  test(\"should handle timezone compatibility\", () => {\n    const userTimezone = \"UTC-5\";\n    const partnerTimezones = [\"UTC-5\", \"UTC-6\", \"UTC+3\"];\n\n    const timezoneScores = partnerTimezones.map((tz) => {\n      const userOffset = parseInt(userTimezone.split(\"UTC\")[1]) || 0;\n      const partnerOffset = parseInt(tz.split(\"UTC\")[1]) || 0;\n      const timeDiff = Math.abs(userOffset - partnerOffset);\n\n      // Higher score for smaller time differences\n      return Math.max(0, 1 - timeDiff / 12);\n    });\n\n    expect(timezoneScores[0]).toBe(1.0); // Same timezone\n    expect(timezoneScores[1]).toBeGreaterThan(timezoneScores[2]); // Closer timezone\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/features/messaging.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":241,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7094,7097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7094,7097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":257,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7548,7551],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7548,7551],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":273,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7998,8001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7998,8001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":292,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":292,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8552,8555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8552,8555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":356,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":356,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10626,10629],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10626,10629],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Real-time Messaging Tests\n *\n * Tests for WebSocket communication, message delivery, and real-time features\n * Generated by Shuffle & Sync Unit Test Agent\n */\n\nimport { describe, test, expect, jest } from \"@jest/globals\";\nimport { WebSocketRateLimiter } from \"../../utils/websocket-rate-limiter\";\nimport { messageValidator } from \"../../utils/websocket-message-validator\";\nimport { WebSocketConnectionManager } from \"../../utils/websocket-connection-manager\";\nimport { envValidator } from \"../../utils/websocket-env-validation\";\n\nconst createMockMessage = (overrides = {}) => ({\n  id: \"message-123\",\n  sessionId: \"room-123\",\n  userId: \"user-123\",\n  content: \"Test message\",\n  type: \"text\",\n  timestamp: new Date(),\n  ...overrides,\n});\n\nconst createMockWebSocket = () => ({\n  send: jest.fn(),\n  close: jest.fn(),\n  addEventListener: jest.fn(),\n  on: jest.fn(), // Add missing event emitter methods\n  once: jest.fn(),\n  off: jest.fn(),\n  emit: jest.fn(),\n  ping: jest.fn(),\n  readyState: 1, // WebSocket.OPEN\n  CONNECTING: 0,\n  OPEN: 1,\n  CLOSING: 2,\n  CLOSED: 3,\n});\n\nconst createMockIncomingMessage = (overrides = {}) => ({\n  type: \"message\",\n  sessionId: \"test-session\",\n  user: {\n    id: \"user-123\",\n    name: \"Test User\",\n    avatar: \"avatar.jpg\",\n  },\n  content: \"Hello world\",\n  ...overrides,\n});\n\ndescribe(\"Real-time Messaging\", () => {\n  test(\"should validate message format\", () => {\n    const message = createMockMessage();\n\n    expect(message.content).toBeTruthy();\n    expect(message.userId).toBeTruthy();\n    expect(message.sessionId).toBeTruthy();\n    expect(message.timestamp).toBeInstanceOf(Date);\n  });\n\n  test(\"should handle WebSocket connection states\", () => {\n    const mockWS = createMockWebSocket();\n\n    expect(mockWS.readyState).toBe(1); // OPEN\n    expect(mockWS.OPEN).toBe(1);\n    expect(mockWS.CLOSED).toBe(3);\n  });\n\n  test(\"should sanitize message content\", () => {\n    const unsafeContent = '<script>alert(\"xss\")</script>Hello';\n\n    // Basic XSS prevention\n    const sanitized = unsafeContent.replace(/<[^>]*>/g, \"\");\n\n    expect(sanitized).toBe('alert(\"xss\")Hello');\n    expect(sanitized).not.toContain(\"<script>\");\n  });\n\n  test(\"should handle message rate limiting\", () => {\n    const messages = Array.from({ length: 10 }, (_, i) =>\n      createMockMessage({\n        id: `msg-${i}`,\n        timestamp: new Date(Date.now() + i * 1000),\n      }),\n    );\n\n    const recentMessages = messages.filter(\n      (msg) => Date.now() - msg.timestamp.getTime() < 60000, // 1 minute\n    );\n\n    expect(recentMessages.length).toBeLessThanOrEqual(10);\n  });\n\n  test(\"should handle collaborative streaming events\", () => {\n    const streamingEvent = {\n      type: \"phase_change\",\n      eventId: \"collab-stream-123\",\n      newPhase: \"game_start\",\n      hostUserId: \"user-123\",\n    };\n\n    expect(streamingEvent.type).toBe(\"phase_change\");\n    expect(streamingEvent.eventId).toBeTruthy();\n    expect(streamingEvent.hostUserId).toBeTruthy();\n  });\n});\n\ndescribe(\"WebSocket Rate Limiting\", () => {\n  test(\"should create rate limiter with default config\", () => {\n    const rateLimiter = new WebSocketRateLimiter({\n      windowMs: 60 * 1000,\n      maxMessages: 100,\n    });\n\n    expect(rateLimiter).toBeDefined();\n    expect(rateLimiter.getStats().activeConnections).toBe(0);\n  });\n\n  test(\"should allow messages under rate limit\", () => {\n    const rateLimiter = new WebSocketRateLimiter({\n      windowMs: 60 * 1000,\n      maxMessages: 5,\n    });\n\n    const connectionId = \"test-connection\";\n\n    // Should allow first 5 messages\n    for (let i = 0; i < 5; i++) {\n      expect(rateLimiter.isAllowed(connectionId, \"test_message\")).toBe(true);\n    }\n\n    // Should block 6th message\n    expect(rateLimiter.isAllowed(connectionId, \"test_message\")).toBe(false);\n  });\n\n  test(\"should provide rate limit status\", () => {\n    const rateLimiter = new WebSocketRateLimiter({\n      windowMs: 60 * 1000,\n      maxMessages: 10,\n    });\n\n    const connectionId = \"test-connection\";\n    rateLimiter.isAllowed(connectionId, \"test_message\");\n\n    const status = rateLimiter.getStatus(connectionId);\n    expect(status.remaining).toBe(9);\n    expect(status.totalHits).toBe(1);\n    expect(typeof status.resetTime).toBe(\"number\");\n  });\n\n  test(\"should cleanup connection data\", () => {\n    const rateLimiter = new WebSocketRateLimiter({\n      windowMs: 60 * 1000,\n      maxMessages: 10,\n    });\n\n    const connectionId = \"test-connection\";\n    rateLimiter.isAllowed(connectionId, \"test_message\");\n\n    let stats = rateLimiter.getStats();\n    expect(stats.activeConnections).toBe(1);\n\n    rateLimiter.cleanup(connectionId);\n    stats = rateLimiter.getStats();\n    expect(stats.activeConnections).toBe(0);\n  });\n});\n\ndescribe(\"WebSocket Message Validation\", () => {\n  test(\"should validate incoming messages\", () => {\n    const validMessage = createMockIncomingMessage();\n    const result = messageValidator.validateIncoming(validMessage);\n\n    expect(result.success).toBe(true);\n    expect(result.data).toBeDefined();\n  });\n\n  test(\"should reject invalid incoming messages\", () => {\n    const invalidMessage = { type: \"invalid_type\" };\n    const result = messageValidator.validateIncoming(invalidMessage);\n\n    expect(result.success).toBe(false);\n    expect(result.error).toBeTruthy();\n  });\n\n  test(\"should validate outgoing messages\", () => {\n    const validOutgoingMessage = {\n      type: \"error\",\n      message: \"Test error message\",\n    };\n\n    const result = messageValidator.validateOutgoing(validOutgoingMessage);\n    expect(result.success).toBe(true);\n  });\n\n  test(\"should sanitize message content\", () => {\n    const unsafeMessage = {\n      content: '<script>alert(\"xss\")</script>Safe content',\n      name: \"User<script>\",\n      safeField: \"This is safe\",\n    };\n\n    const sanitized = messageValidator.sanitizeMessage(unsafeMessage);\n\n    // HTML entities should be escaped\n    expect(sanitized.content).toContain(\"&lt;script&gt;\");\n    expect(sanitized.content).not.toContain(\"<script>\");\n    expect(sanitized.name).not.toContain(\"<script>\");\n    expect(sanitized.safeField).toBe(\"This is safe\");\n  });\n\n  test(\"should create standardized error messages\", () => {\n    const errorMessage = messageValidator.createErrorMessage(\n      \"Test error\",\n      \"TEST_CODE\",\n      { detail: \"test\" },\n    );\n\n    expect(errorMessage.type).toBe(\"error\");\n    expect(errorMessage.message).toBe(\"Test error\");\n    expect(errorMessage.code).toBe(\"TEST_CODE\");\n    expect(errorMessage.details).toEqual({ detail: \"test\" });\n  });\n\n  test(\"should create rate limit warning messages\", () => {\n    const warningMessage = messageValidator.createRateLimitWarning(\n      5,\n      Date.now() + 60000,\n    );\n\n    expect(warningMessage.type).toBe(\"rate_limit_warning\");\n    expect(warningMessage.remaining).toBe(5);\n    expect(typeof warningMessage.resetTime).toBe(\"number\");\n  });\n});\n\ndescribe(\"WebSocket Connection Management\", () => {\n  test(\"should register and track connections\", () => {\n    const connectionManager = new WebSocketConnectionManager();\n    const mockWS = createMockWebSocket() as any;\n\n    const connectionId = connectionManager.registerConnection(\n      mockWS,\n      \"user-123\",\n    );\n\n    expect(connectionId).toBeTruthy();\n    expect(connectionId).toMatch(/^ws_\\d+_/);\n\n    const stats = connectionManager.getStats();\n    expect(stats.totalConnections).toBe(1);\n  });\n\n  test(\"should update connection activity\", () => {\n    const connectionManager = new WebSocketConnectionManager();\n    const mockWS = createMockWebSocket() as any;\n\n    const connectionId = connectionManager.registerConnection(\n      mockWS,\n      \"user-123\",\n    );\n    connectionManager.updateActivity(connectionId);\n\n    // Should not throw error\n    expect(true).toBe(true);\n  });\n\n  test(\"should check authentication expiration\", () => {\n    const connectionManager = new WebSocketConnectionManager({\n      authExpiryTimeout: 100, // 100ms for testing\n    });\n    const mockWS = createMockWebSocket() as any;\n\n    const connectionId = connectionManager.registerConnection(\n      mockWS,\n      \"user-123\",\n      \"test-token\",\n    );\n\n    // Should not be expired immediately\n    expect(connectionManager.isAuthExpired(connectionId)).toBe(false);\n\n    // After timeout, should be expired\n    setTimeout(() => {\n      expect(connectionManager.isAuthExpired(connectionId)).toBe(true);\n    }, 150);\n  });\n\n  test(\"should manage room memberships\", () => {\n    const connectionManager = new WebSocketConnectionManager();\n    const mockWS = createMockWebSocket() as any;\n\n    const connectionId = connectionManager.registerConnection(\n      mockWS,\n      \"user-123\",\n    );\n\n    const joined = connectionManager.joinGameRoom(connectionId, \"session-123\");\n    expect(joined).toBe(true);\n\n    const connections = connectionManager.getGameRoomConnections(\"session-123\");\n    expect(connections.length).toBe(1);\n  });\n});\n\ndescribe(\"WebSocket Environment Validation\", () => {\n  test(\"should validate websocket URL construction\", () => {\n    // Mock environment for testing\n    const originalEnv = process.env.AUTH_URL;\n    process.env.AUTH_URL = \"https://example.com\";\n\n    try {\n      const config = envValidator.validateAndGetConfig();\n      expect(config.authUrl).toBe(\"https://example.com\");\n      expect(config.allowedOrigins).toContain(\"https://example.com\");\n    } finally {\n      process.env.AUTH_URL = originalEnv;\n    }\n  });\n\n  test(\"should handle missing environment variables gracefully\", () => {\n    const originalEnv = process.env.AUTH_URL;\n    delete process.env.AUTH_URL;\n\n    try {\n      const validation = envValidator.validateRequiredEnvironment();\n      // In test environment, this might still be valid due to defaults\n      expect(validation).toBeDefined();\n    } finally {\n      if (originalEnv) {\n        process.env.AUTH_URL = originalEnv;\n      }\n    }\n  });\n\n  test(\"should determine production environment correctly\", () => {\n    const config = envValidator.validateAndGetConfig();\n    expect(typeof config.isProduction).toBe(\"boolean\");\n  });\n\n  test(\"should build allowed origins list\", () => {\n    const config = envValidator.validateAndGetConfig();\n    expect(Array.isArray(config.allowedOrigins)).toBe(true);\n    expect(config.allowedOrigins.length).toBeGreaterThan(0);\n  });\n});\n\ndescribe(\"WebSocket Stress Testing\", () => {\n  test(\"should handle multiple rapid connections\", () => {\n    const connectionManager = new WebSocketConnectionManager();\n    const connectionIds: string[] = [];\n\n    // Simulate 100 rapid connections\n    for (let i = 0; i < 100; i++) {\n      const mockWS = createMockWebSocket() as any;\n      const connectionId = connectionManager.registerConnection(\n        mockWS,\n        `user-${i}`,\n      );\n      connectionIds.push(connectionId);\n    }\n\n    const stats = connectionManager.getStats();\n    expect(stats.totalConnections).toBe(100);\n\n    // Cleanup\n    connectionIds.forEach((id) => connectionManager.removeConnection(id));\n  });\n\n  test(\"should handle rapid message rate limiting\", () => {\n    const rateLimiter = new WebSocketRateLimiter({\n      windowMs: 1000, // 1 second\n      maxMessages: 10,\n    });\n\n    const connectionId = \"stress-test-connection\";\n    let allowedCount = 0;\n    let blockedCount = 0;\n\n    // Try to send 20 messages rapidly\n    for (let i = 0; i < 20; i++) {\n      if (rateLimiter.isAllowed(connectionId, \"stress_test\")) {\n        allowedCount++;\n      } else {\n        blockedCount++;\n      }\n    }\n\n    expect(allowedCount).toBe(10); // Should allow exactly 10\n    expect(blockedCount).toBe(10); // Should block exactly 10\n  });\n\n  test(\"should handle memory cleanup under load\", () => {\n    const rateLimiter = new WebSocketRateLimiter({\n      windowMs: 100, // Short window for testing\n      maxMessages: 5,\n    });\n\n    // Create many connections\n    for (let i = 0; i < 1000; i++) {\n      rateLimiter.isAllowed(`connection-${i}`, \"test_message\");\n    }\n\n    let initialStats = rateLimiter.getStats();\n    expect(initialStats.activeConnections).toBe(1000);\n\n    // Wait for window to expire and run cleanup\n    setTimeout(() => {\n      rateLimiter.periodicCleanup();\n      const finalStats = rateLimiter.getStats();\n      expect(finalStats.activeConnections).toBeLessThan(\n        initialStats.activeConnections,\n      );\n    }, 200);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/features/registration-login-integration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'registrationData' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":86,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":258,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":258,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'email' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":340,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":340,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isPasswordValid' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":378,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":378,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updatedProfile' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":479,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":479,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'oauthUser' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":493,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":493,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validToken' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":557,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":557,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loginCredentials' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":630,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":630,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":680,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":680,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21228,21231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21228,21231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":681,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":681,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21272,21275],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21272,21275],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":682,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":682,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21317,21320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21317,21320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":683,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":683,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21361,21364],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21361,21364],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'registrationData' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":690,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":690,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Integration Tests: Registration and Login Flow\n *\n * Comprehensive tests to verify that new users can successfully create accounts\n * and log in using both Google OAuth and custom authentication methods.\n *\n * These tests verify:\n * - Registration flow with email/password\n * - Email verification requirement\n * - Login with verified credentials\n * - Google OAuth registration and login\n * - Error handling for both methods\n */\n\nimport { describe, test, expect, jest, beforeEach } from \"@jest/globals\";\n\n// Mock user data generators\nconst createRegistrationData = (overrides = {}) => ({\n  email: `test${Date.now()}@example.com`,\n  password: \"SecureP@ssw0rd123!\",\n  firstName: \"Test\",\n  lastName: \"User\",\n  username: `testuser${Date.now()}`,\n  primaryCommunity: \"mtg\",\n  ...overrides,\n});\n\nconst createOAuthProfile = (overrides = {}) => ({\n  id: `google-${Date.now()}`,\n  email: `oauth${Date.now()}@example.com`,\n  name: \"OAuth User\",\n  image: \"https://example.com/avatar.jpg\",\n  provider: \"google\",\n  ...overrides,\n});\n\ndescribe(\"Registration and Login Integration Tests\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"Custom Credentials Registration Flow\", () => {\n    test(\"should successfully register a new user with valid credentials\", () => {\n      const registrationData = createRegistrationData();\n\n      // Validate registration data format\n      expect(registrationData.email).toMatch(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\n      expect(registrationData.password.length).toBeGreaterThanOrEqual(12);\n      expect(registrationData.password).toMatch(/[A-Z]/); // uppercase\n      expect(registrationData.password).toMatch(/[a-z]/); // lowercase\n      expect(registrationData.password).toMatch(/[0-9]/); // number\n      expect(registrationData.password).toMatch(/[^A-Za-z0-9]/); // special char\n      expect(registrationData.firstName).toBeTruthy();\n      expect(registrationData.lastName).toBeTruthy();\n      expect(registrationData.username.length).toBeGreaterThanOrEqual(3);\n\n      // Expected API behavior:\n      // POST /api/auth/register\n      // Response: 201 Created\n      // Body: { message: \"Registration successful! Please check your email...\", user: {...}, emailSent: true }\n\n      const expectedResponse = {\n        status: 201,\n        message:\n          \"Registration successful! Please check your email to verify your account.\",\n        userCreated: true,\n        emailVerificationRequired: true,\n        emailSent: true,\n      };\n\n      expect(expectedResponse.status).toBe(201);\n      expect(expectedResponse.userCreated).toBe(true);\n      expect(expectedResponse.emailVerificationRequired).toBe(true);\n    });\n\n    test(\"should reject registration with weak password\", () => {\n      const weakPasswords = [\n        \"short\", // Too short\n        \"nouppercase123!\", // No uppercase\n        \"NOLOWERCASE123!\", // No lowercase\n        \"NoNumbers!\", // No numbers\n        \"NoSpecialChar123\", // No special character\n      ];\n\n      weakPasswords.forEach((password) => {\n        const registrationData = createRegistrationData({ password });\n\n        const isValid =\n          password.length >= 12 &&\n          /[A-Z]/.test(password) &&\n          /[a-z]/.test(password) &&\n          /[0-9]/.test(password) &&\n          /[^A-Za-z0-9]/.test(password);\n\n        expect(isValid).toBe(false);\n\n        // Expected API behavior:\n        // POST /api/auth/register\n        // Response: 400 Bad Request\n        // Body: { message: \"Password does not meet security requirements\", errors: [...] }\n      });\n    });\n\n    test(\"should reject registration with duplicate email\", () => {\n      const existingEmail = \"existing@example.com\";\n      const registrationData = createRegistrationData({ email: existingEmail });\n\n      // Simulate existing user\n      const existingUser = {\n        email: existingEmail,\n        id: \"existing-user-id\",\n      };\n\n      const isDuplicate =\n        existingUser.email.toLowerCase() ===\n        registrationData.email.toLowerCase();\n\n      expect(isDuplicate).toBe(true);\n\n      // Expected API behavior:\n      // POST /api/auth/register\n      // Response: 409 Conflict\n      // Body: { message: \"An account with this email already exists\" }\n    });\n\n    test(\"should reject registration with duplicate username\", () => {\n      const existingUsername = \"existinguser\";\n      const registrationData = createRegistrationData({\n        username: existingUsername,\n      });\n\n      // Simulate existing user\n      const existingUser = {\n        username: existingUsername,\n        id: \"existing-user-id\",\n      };\n\n      const isDuplicate =\n        existingUser.username.toLowerCase() ===\n        registrationData.username.toLowerCase();\n\n      expect(isDuplicate).toBe(true);\n\n      // Expected API behavior:\n      // POST /api/auth/register\n      // Response: 409 Conflict\n      // Body: { message: \"This username is already taken\" }\n    });\n\n    test(\"should send email verification after successful registration\", () => {\n      const registrationData = createRegistrationData();\n\n      // Simulate successful registration\n      const newUser = {\n        id: \"new-user-id\",\n        email: registrationData.email,\n        firstName: registrationData.firstName,\n        lastName: registrationData.lastName,\n        username: registrationData.username,\n        isEmailVerified: false,\n      };\n\n      expect(newUser.isEmailVerified).toBe(false);\n\n      // Email verification should be sent\n      const verificationEmail = {\n        to: newUser.email,\n        subject: \"Verify your email\",\n        containsVerificationLink: true,\n        linkExpiresIn24Hours: true,\n      };\n\n      expect(verificationEmail.containsVerificationLink).toBe(true);\n      expect(verificationEmail.linkExpiresIn24Hours).toBe(true);\n    });\n\n    test(\"should normalize email and username during registration\", () => {\n      const registrationData = createRegistrationData({\n        email: \"  Test@Example.COM  \",\n        username: \"  TestUser123  \",\n      });\n\n      const normalizedEmail = registrationData.email.toLowerCase().trim();\n      const normalizedUsername = registrationData.username.toLowerCase().trim();\n\n      expect(normalizedEmail).toBe(\"test@example.com\");\n      expect(normalizedUsername).toBe(\"testuser123\");\n\n      // Database should store normalized values\n      const storedUser = {\n        email: normalizedEmail,\n        username: normalizedUsername,\n      };\n\n      expect(storedUser.email).toBe(\"test@example.com\");\n      expect(storedUser.username).toBe(\"testuser123\");\n    });\n  });\n\n  describe(\"Custom Credentials Login Flow\", () => {\n    test(\"should block login for unverified email\", () => {\n      const loginCredentials = {\n        email: \"test@example.com\",\n        password: \"SecureP@ssw0rd123!\",\n      };\n\n      const user = {\n        id: \"user-id\",\n        email: loginCredentials.email,\n        passwordHash: \"$argon2id$v=19$m=65536,t=3,p=4$validhash\",\n        isEmailVerified: false,\n      };\n\n      const canLogin = user.isEmailVerified;\n\n      expect(canLogin).toBe(false);\n\n      // Expected API behavior:\n      // POST /api/auth/signin/credentials\n      // Response: Error\n      // Message: \"Please verify your email address before signing in. Check your inbox for the verification link.\"\n    });\n\n    test(\"should allow login with verified email and correct password\", () => {\n      const loginCredentials = {\n        email: \"test@example.com\",\n        password: \"SecureP@ssw0rd123!\",\n      };\n\n      const user = {\n        id: \"user-id\",\n        email: loginCredentials.email,\n        passwordHash: \"$argon2id$v=19$m=65536,t=3,p=4$validhash\",\n        isEmailVerified: true,\n        mfaEnabled: false,\n        failedLoginAttempts: 0,\n        accountLockedUntil: null,\n      };\n\n      const isPasswordValid = true; // Simulating password verification\n      const canLogin =\n        user.isEmailVerified && isPasswordValid && !user.accountLockedUntil;\n\n      expect(canLogin).toBe(true);\n\n      // Expected API behavior:\n      // POST /api/auth/signin/credentials\n      // Response: Success, JWT session created\n      // User redirected to /home\n    });\n\n    test(\"should reject login with incorrect password\", () => {\n      const loginCredentials = {\n        email: \"test@example.com\",\n        password: \"WrongPassword123!\",\n      };\n\n      const user = {\n        id: \"user-id\",\n        email: loginCredentials.email,\n        passwordHash: \"$argon2id$v=19$m=65536,t=3,p=4$differenthash\",\n        isEmailVerified: true,\n      };\n\n      const isPasswordValid = false; // Password doesn't match\n\n      expect(isPasswordValid).toBe(false);\n\n      // Expected API behavior:\n      // POST /api/auth/signin/credentials\n      // Response: Error\n      // Message: \"Invalid email or password\"\n      // Failed login attempt incremented\n    });\n\n    test(\"should increment failed login attempts on wrong password\", () => {\n      const user = {\n        id: \"user-id\",\n        email: \"test@example.com\",\n        failedLoginAttempts: 2,\n        passwordHash: \"valid-hash\",\n      };\n\n      // Failed login attempt\n      const updatedUser = {\n        ...user,\n        failedLoginAttempts: user.failedLoginAttempts + 1,\n        lastFailedLogin: new Date(),\n      };\n\n      expect(updatedUser.failedLoginAttempts).toBe(3);\n      expect(updatedUser.lastFailedLogin).toBeInstanceOf(Date);\n    });\n\n    test(\"should lock account after 5 failed login attempts\", () => {\n      const user = {\n        id: \"user-id\",\n        email: \"test@example.com\",\n        failedLoginAttempts: 4, // One more will trigger lock\n        passwordHash: \"valid-hash\",\n      };\n\n      // Simulate 5th failed attempt\n      const newFailedAttempts = user.failedLoginAttempts + 1;\n      const shouldLockAccount = newFailedAttempts >= 5;\n      const lockUntil = shouldLockAccount\n        ? new Date(Date.now() + 30 * 60 * 1000)\n        : null;\n\n      expect(shouldLockAccount).toBe(true);\n      expect(lockUntil).not.toBeNull();\n\n      // Expected API behavior:\n      // POST /api/auth/signin/credentials\n      // Response: Error\n      // Message: \"Account locked due to too many failed attempts. Try again in 30 minutes.\"\n    });\n\n    test(\"should block login for locked account\", () => {\n      const user = {\n        id: \"user-id\",\n        email: \"test@example.com\",\n        passwordHash: \"valid-hash\",\n        accountLockedUntil: new Date(Date.now() + 15 * 60 * 1000), // 15 minutes in future\n        isEmailVerified: true,\n      };\n\n      const isLocked =\n        user.accountLockedUntil && new Date() < user.accountLockedUntil;\n\n      expect(isLocked).toBe(true);\n\n      // Expected API behavior:\n      // POST /api/auth/signin/credentials\n      // Response: Error\n      // Message: \"Account is temporarily locked. Try again in X minutes.\"\n    });\n\n    test(\"should apply rate limiting after multiple failed attempts\", () => {\n      const email = \"test@example.com\";\n      const failedAttempts = [\n        { timestamp: Date.now() - 10000 }, // 10 sec ago\n        { timestamp: Date.now() - 20000 }, // 20 sec ago\n        { timestamp: Date.now() - 30000 }, // 30 sec ago\n        { timestamp: Date.now() - 40000 }, // 40 sec ago\n        { timestamp: Date.now() - 50000 }, // 50 sec ago\n      ];\n\n      // Rate limit: 5 attempts per 15 minutes (900 seconds)\n      const recentAttempts = failedAttempts.filter(\n        (attempt) => Date.now() - attempt.timestamp < 900000,\n      );\n\n      const isRateLimited = recentAttempts.length >= 5;\n\n      expect(isRateLimited).toBe(true);\n\n      // Expected API behavior:\n      // POST /api/auth/signin/credentials\n      // Response: Error\n      // Message: \"Too many failed attempts. Try again in X seconds.\"\n    });\n\n    test(\"should require MFA if enabled\", () => {\n      const loginCredentials = {\n        email: \"test@example.com\",\n        password: \"SecureP@ssw0rd123!\",\n      };\n\n      const user = {\n        id: \"user-id\",\n        email: loginCredentials.email,\n        passwordHash: \"valid-hash\",\n        isEmailVerified: true,\n        mfaEnabled: true,\n      };\n\n      const isPasswordValid = true;\n      const requiresMFA = user.mfaEnabled;\n\n      expect(requiresMFA).toBe(true);\n\n      // Expected API behavior:\n      // POST /api/auth/signin/credentials\n      // Response: Error\n      // Message: \"MFA_REQUIRED: Please complete multi-factor authentication. Check your authenticator app for the verification code.\"\n    });\n\n    test(\"should clear failed attempts on successful login\", () => {\n      const user = {\n        id: \"user-id\",\n        email: \"test@example.com\",\n        failedLoginAttempts: 3,\n        lastFailedLogin: new Date(Date.now() - 60000),\n        accountLockedUntil: null,\n        isEmailVerified: true,\n        passwordHash: \"valid-hash\",\n      };\n\n      // Successful login\n      const isPasswordValid = true;\n      const canLogin = user.isEmailVerified && isPasswordValid;\n\n      expect(canLogin).toBe(true);\n\n      // Failed attempts should be reset\n      const updatedUser = {\n        ...user,\n        failedLoginAttempts: 0,\n        lastFailedLogin: null,\n        accountLockedUntil: null,\n      };\n\n      expect(updatedUser.failedLoginAttempts).toBe(0);\n      expect(updatedUser.lastFailedLogin).toBeNull();\n      expect(updatedUser.accountLockedUntil).toBeNull();\n    });\n  });\n\n  describe(\"Google OAuth Registration and Login Flow\", () => {\n    test(\"should create new user from OAuth profile on first login\", () => {\n      const oauthProfile = createOAuthProfile();\n\n      // No existing user\n      const existingUser = null;\n\n      expect(existingUser).toBeNull();\n\n      // New user should be created\n      const newUser = {\n        id: `user-oauth-${Date.now()}`,\n        email: oauthProfile.email,\n        firstName: oauthProfile.name.split(\" \")[0],\n        lastName: oauthProfile.name.split(\" \").slice(1).join(\" \"),\n        profileImageUrl: oauthProfile.image,\n        username: null, // OAuth users may not have username initially\n        passwordHash: null, // OAuth users don't have passwords\n        isEmailVerified: true, // OAuth providers verify email\n        status: \"offline\" as const,\n      };\n\n      expect(newUser.email).toBe(oauthProfile.email);\n      expect(newUser.passwordHash).toBeNull();\n      expect(newUser.isEmailVerified).toBe(true);\n      expect(newUser.firstName).toBeTruthy();\n    });\n\n    test(\"should not require email verification for OAuth users\", () => {\n      const oauthProfile = createOAuthProfile();\n\n      const oauthUser = {\n        id: \"oauth-user-id\",\n        email: oauthProfile.email,\n        passwordHash: null,\n        isEmailVerified: true, // Automatically verified\n      };\n\n      const requiresVerification = !oauthUser.isEmailVerified;\n\n      expect(requiresVerification).toBe(false);\n      expect(oauthUser.isEmailVerified).toBe(true);\n    });\n\n    test(\"should update existing OAuth user on subsequent logins\", () => {\n      const oauthProfile = createOAuthProfile({\n        email: \"existing@example.com\",\n      });\n\n      const existingUser = {\n        id: \"existing-oauth-user\",\n        email: oauthProfile.email,\n        firstName: \"Old\",\n        lastName: \"Name\",\n        profileImageUrl: \"https://example.com/old-avatar.jpg\",\n        passwordHash: null,\n      };\n\n      // OAuth callback should update user\n      const updatedProfile = {\n        name: \"New Name\",\n        image: \"https://example.com/new-avatar.jpg\",\n      };\n\n      expect(existingUser).toBeTruthy();\n      expect(existingUser.email).toBe(oauthProfile.email);\n\n      // User ID should remain the same\n      const userId = existingUser.id;\n      expect(userId).toBe(\"existing-oauth-user\");\n    });\n\n    test(\"should create session immediately for OAuth login\", () => {\n      const oauthUser = {\n        id: \"oauth-user-id\",\n        email: \"oauth@example.com\",\n        name: \"OAuth User\",\n        passwordHash: null,\n        isEmailVerified: true,\n      };\n\n      // OAuth login should create session without additional steps\n      const sessionCreated = true;\n      const requiresEmailVerification = false;\n      const requiresPasswordVerification = false;\n\n      expect(sessionCreated).toBe(true);\n      expect(requiresEmailVerification).toBe(false);\n      expect(requiresPasswordVerification).toBe(false);\n    });\n\n    test(\"should prevent OAuth users from credentials login\", () => {\n      const oauthUser = {\n        id: \"oauth-user-id\",\n        email: \"oauth@example.com\",\n        passwordHash: null, // No password set\n        isEmailVerified: true,\n      };\n\n      // Attempt to login with credentials\n      const hasPassword = oauthUser.passwordHash !== null;\n\n      expect(hasPassword).toBe(false);\n\n      // Expected API behavior:\n      // POST /api/auth/signin/credentials\n      // Response: Error\n      // Message: \"This account uses OAuth authentication. Please sign in with Google or Twitch.\"\n    });\n  });\n\n  describe(\"Email Verification Flow\", () => {\n    test(\"should generate verification token after registration\", () => {\n      const newUser = {\n        id: \"new-user-id\",\n        email: \"test@example.com\",\n        isEmailVerified: false,\n      };\n\n      const verificationToken = {\n        userId: newUser.id,\n        email: newUser.email,\n        token: \"jwt-token-here\",\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours\n      };\n\n      expect(verificationToken.userId).toBe(newUser.id);\n      expect(verificationToken.expiresAt.getTime()).toBeGreaterThan(Date.now());\n    });\n\n    test(\"should verify email and update user status\", () => {\n      const user = {\n        id: \"user-id\",\n        email: \"test@example.com\",\n        isEmailVerified: false,\n      };\n\n      const validToken = \"valid-jwt-token\";\n\n      // After verification\n      const updatedUser = {\n        ...user,\n        isEmailVerified: true,\n      };\n\n      expect(updatedUser.isEmailVerified).toBe(true);\n    });\n\n    test(\"should reject expired verification token\", () => {\n      const verificationToken = {\n        token: \"expired-token\",\n        expiresAt: new Date(Date.now() - 1000), // 1 second ago\n      };\n\n      const isExpired = verificationToken.expiresAt < new Date();\n\n      expect(isExpired).toBe(true);\n\n      // Expected API behavior:\n      // GET /api/auth/verify-email?token=expired-token\n      // Response: Error\n      // Message: \"Verification link has expired. Please request a new one.\"\n    });\n\n    test(\"should allow resending verification email\", () => {\n      const user = {\n        id: \"user-id\",\n        email: \"test@example.com\",\n        isEmailVerified: false,\n      };\n\n      // User can request new verification email\n      const canResend = !user.isEmailVerified;\n\n      expect(canResend).toBe(true);\n\n      // Expected API behavior:\n      // POST /api/auth/resend-verification\n      // Body: { email: 'test@example.com' }\n      // Response: Success\n      // Message: \"Verification email sent. Please check your inbox.\"\n    });\n  });\n\n  describe(\"Complete Registration → Verification → Login Flow\", () => {\n    test(\"should complete full user journey: register → verify → login\", () => {\n      // Step 1: Registration\n      const registrationData = createRegistrationData();\n\n      const registeredUser = {\n        id: \"new-user-id\",\n        email: registrationData.email,\n        firstName: registrationData.firstName,\n        lastName: registrationData.lastName,\n        username: registrationData.username,\n        passwordHash: \"hashed-password\",\n        isEmailVerified: false,\n      };\n\n      expect(registeredUser.isEmailVerified).toBe(false);\n\n      // Step 2: Email verification\n      const verifiedUser = {\n        ...registeredUser,\n        isEmailVerified: true,\n      };\n\n      expect(verifiedUser.isEmailVerified).toBe(true);\n\n      // Step 3: Login attempt\n      const loginCredentials = {\n        email: registrationData.email,\n        password: registrationData.password,\n      };\n\n      const canLogin =\n        verifiedUser.isEmailVerified && verifiedUser.passwordHash !== null;\n\n      expect(canLogin).toBe(true);\n\n      // Step 4: Session created\n      const session = {\n        user: {\n          id: verifiedUser.id,\n          email: verifiedUser.email,\n          name: `${verifiedUser.firstName} ${verifiedUser.lastName}`,\n        },\n        expires: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n      };\n\n      expect(session.user.id).toBe(verifiedUser.id);\n      expect(session.user.email).toBe(verifiedUser.email);\n    });\n  });\n\n  describe(\"Error Handling and Edge Cases\", () => {\n    test(\"should handle invalid email format during registration\", () => {\n      const invalidEmails = [\n        \"not-an-email\",\n        \"@example.com\",\n        \"user@\",\n        \"user@domain\",\n        \"user @example.com\",\n        \"\",\n      ];\n\n      invalidEmails.forEach((email) => {\n        const isValid = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n        expect(isValid).toBe(false);\n      });\n    });\n\n    test(\"should handle missing required registration fields\", () => {\n      const incompleteData = {\n        email: \"test@example.com\",\n        // Missing password, firstName, lastName, username\n      };\n\n      const hasAllRequired = !!(\n        incompleteData.email &&\n        (incompleteData as any).password &&\n        (incompleteData as any).firstName &&\n        (incompleteData as any).lastName &&\n        (incompleteData as any).username\n      );\n\n      expect(hasAllRequired).toBe(false);\n    });\n\n    test(\"should handle network errors during registration\", () => {\n      const registrationData = createRegistrationData();\n\n      // Simulate network error\n      const error = new Error(\"Network request failed\");\n\n      expect(error.message).toContain(\"Network request failed\");\n\n      // Expected behavior:\n      // Show user-friendly error: \"An unexpected error occurred. Please try again.\"\n      // Log error for debugging\n    });\n\n    test(\"should handle case-insensitive email matching\", () => {\n      const existingUser = {\n        email: \"test@example.com\",\n      };\n\n      const loginAttempts = [\n        \"test@example.com\",\n        \"Test@Example.com\",\n        \"TEST@EXAMPLE.COM\",\n        \"TeSt@ExAmPlE.cOm\",\n      ];\n\n      loginAttempts.forEach((email) => {\n        const matches =\n          existingUser.email.toLowerCase() === email.toLowerCase();\n        expect(matches).toBe(true);\n      });\n    });\n\n    test(\"should handle special characters in username\", () => {\n      const validUsernames = [\n        \"user_123\",\n        \"user-name\",\n        \"user123\",\n        \"user_name_123\",\n      ];\n\n      const invalidUsernames = [\n        \"user@name\",\n        \"user name\",\n        \"user#name\",\n        \"user.name\",\n      ];\n\n      validUsernames.forEach((username) => {\n        expect(username).toMatch(/^[a-zA-Z0-9_-]+$/);\n      });\n\n      invalidUsernames.forEach((username) => {\n        expect(username).not.toMatch(/^[a-zA-Z0-9_-]+$/);\n      });\n    });\n  });\n\n  describe(\"Session Management\", () => {\n    test(\"should create JWT session with correct expiration\", () => {\n      const user = {\n        id: \"user-id\",\n        email: \"test@example.com\",\n        name: \"Test User\",\n      };\n\n      const sessionMaxAge = 30 * 24 * 60 * 60 * 1000; // 30 days in ms\n      const expiresAt = new Date(Date.now() + sessionMaxAge);\n\n      const session = {\n        user: {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n        },\n        expires: expiresAt.toISOString(),\n      };\n\n      expect(session.user.id).toBe(user.id);\n      expect(new Date(session.expires).getTime()).toBeGreaterThan(Date.now());\n    });\n\n    test(\"should include user ID in JWT token\", () => {\n      const user = {\n        id: \"user-id-123\",\n        email: \"test@example.com\",\n      };\n\n      const jwtPayload = {\n        id: user.id,\n        email: user.email,\n      };\n\n      expect(jwtPayload.id).toBe(user.id);\n      expect(jwtPayload.email).toBe(user.email);\n    });\n\n    test(\"should validate session on protected routes\", () => {\n      const validSession = {\n        user: { id: \"user-id\", email: \"test@example.com\" },\n        expires: new Date(Date.now() + 86400000).toISOString(), // 1 day future\n      };\n\n      const isExpired = new Date(validSession.expires) < new Date();\n      const isValid = !isExpired && !!validSession.user.id;\n\n      expect(isValid).toBe(true);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/features/twitch-oauth.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'jest' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Twitch OAuth Flow Tests\n *\n * Tests for Twitch OAuth implementation including:\n * - PKCE generation and validation\n * - State parameter security\n * - Token refresh functionality\n */\n\nimport { describe, expect, test, jest } from \"@jest/globals\";\nimport { randomBytes, createHash } from \"crypto\";\nimport { existsSync, readFileSync } from \"fs\";\nimport { join } from \"path\";\n\ndescribe(\"Twitch OAuth Security Features\", () => {\n  describe(\"PKCE Implementation\", () => {\n    test(\"should generate unique code verifiers\", () => {\n      const verifier1 = randomBytes(32).toString(\"base64url\");\n      const verifier2 = randomBytes(32).toString(\"base64url\");\n\n      // Verifiers should be different\n      expect(verifier1).not.toBe(verifier2);\n\n      // Verifiers should be base64url encoded\n      expect(verifier1).toMatch(/^[A-Za-z0-9_-]+$/);\n      expect(verifier2).toMatch(/^[A-Za-z0-9_-]+$/);\n    });\n\n    test(\"should generate code challenge from verifier\", () => {\n      const verifier = \"test-verifier-12345\";\n\n      const challenge = createHash(\"sha256\")\n        .update(verifier)\n        .digest(\"base64url\");\n\n      // Challenge should be base64url encoded\n      expect(challenge).toMatch(/^[A-Za-z0-9_-]+$/);\n\n      // Same verifier should produce same challenge\n      const challenge2 = createHash(\"sha256\")\n        .update(verifier)\n        .digest(\"base64url\");\n\n      expect(challenge).toBe(challenge2);\n    });\n\n    test(\"should use S256 challenge method\", () => {\n      // This is the standard PKCE method using SHA-256\n      // Test that we're using the correct hashing algorithm\n      const verifier = \"test-verifier\";\n\n      const challenge = createHash(\"sha256\")\n        .update(verifier)\n        .digest(\"base64url\");\n\n      // Verify it's a SHA-256 hash (base64url encoded, 43 chars)\n      expect(challenge.length).toBe(43);\n    });\n  });\n\n  describe(\"State Parameter Security\", () => {\n    test(\"should generate cryptographically secure state\", () => {\n      const state = randomBytes(32).toString(\"hex\");\n\n      // Should be 64 hex characters (32 bytes)\n      expect(state.length).toBe(64);\n      expect(state).toMatch(/^[a-f0-9]{64}$/);\n    });\n\n    test(\"should generate unique states\", () => {\n      const state1 = randomBytes(32).toString(\"hex\");\n      const state2 = randomBytes(32).toString(\"hex\");\n\n      expect(state1).not.toBe(state2);\n    });\n  });\n\n  describe(\"OAuth Scopes\", () => {\n    test(\"should include required Twitch scopes\", () => {\n      const PLATFORM_SCOPES = {\n        twitch: [\n          \"user:read:email\",\n          \"channel:read:stream_key\",\n          \"channel:manage:broadcast\",\n          \"channel:read:subscriptions\",\n          \"bits:read\",\n          \"analytics:read:games\",\n          \"analytics:read:extensions\",\n        ],\n      };\n\n      // Verify essential scopes are present\n      expect(PLATFORM_SCOPES.twitch).toContain(\"user:read:email\");\n      expect(PLATFORM_SCOPES.twitch).toContain(\"channel:read:stream_key\");\n      expect(PLATFORM_SCOPES.twitch).toContain(\"channel:manage:broadcast\");\n\n      // Verify we have multiple scopes\n      expect(PLATFORM_SCOPES.twitch.length).toBeGreaterThan(3);\n    });\n  });\n\n  describe(\"Redirect URI Validation\", () => {\n    test(\"should construct correct redirect URI for development\", () => {\n      const authUrl = \"http://localhost:3000\";\n      const redirectUri = `${authUrl}/api/platforms/twitch/oauth/callback`;\n\n      expect(redirectUri).toBe(\n        \"http://localhost:3000/api/platforms/twitch/oauth/callback\",\n      );\n    });\n\n    test(\"should construct correct redirect URI for production\", () => {\n      const authUrl = \"https://shuffleandsync.com\";\n      const redirectUri = `${authUrl}/api/platforms/twitch/oauth/callback`;\n\n      expect(redirectUri).toBe(\n        \"https://shuffleandsync.com/api/platforms/twitch/oauth/callback\",\n      );\n    });\n\n    test(\"redirect URI should not have trailing slash\", () => {\n      const authUrl = \"https://shuffleandsync.com\";\n      const redirectUri = `${authUrl}/api/platforms/twitch/oauth/callback`;\n\n      expect(redirectUri).not.toMatch(/\\/$/);\n    });\n  });\n\n  describe(\"Token Management\", () => {\n    test(\"should calculate token expiry correctly\", () => {\n      const expiresIn = 14400; // 4 hours in seconds\n      const now = Date.now();\n      const expiresAt = new Date(now + expiresIn * 1000);\n\n      // Should expire in approximately 4 hours\n      const timeDiff = expiresAt.getTime() - now;\n      expect(timeDiff).toBeGreaterThan(14390 * 1000); // Allow small variance\n      expect(timeDiff).toBeLessThan(14410 * 1000);\n    });\n\n    test(\"should detect token near expiry with 5-minute buffer\", () => {\n      const buffer = 5 * 60 * 1000; // 5 minutes in milliseconds\n      const now = Date.now();\n\n      // Token expiring in 3 minutes (should be refreshed)\n      const soonExpiry = new Date(now + 3 * 60 * 1000);\n      expect(soonExpiry.getTime()).toBeLessThanOrEqual(now + buffer);\n\n      // Token expiring in 10 minutes (should not be refreshed yet)\n      const laterExpiry = new Date(now + 10 * 60 * 1000);\n      expect(laterExpiry.getTime()).toBeGreaterThan(now + buffer);\n    });\n  });\n\n  describe(\"OAuth URL Generation\", () => {\n    test(\"should include all required OAuth parameters\", () => {\n      const params = {\n        client_id: \"test-client-id\",\n        redirect_uri:\n          \"http://localhost:3000/api/platforms/twitch/oauth/callback\",\n        response_type: \"code\",\n        scope: \"user:read:email channel:read:stream_key\",\n        state: \"test-state-12345\",\n        code_challenge: \"test-challenge\",\n        code_challenge_method: \"S256\",\n        force_verify: \"true\",\n      };\n\n      const searchParams = new URLSearchParams(params);\n      const authUrl = `https://id.twitch.tv/oauth2/authorize?${searchParams.toString()}`;\n\n      // Verify URL structure\n      expect(authUrl).toContain(\"https://id.twitch.tv/oauth2/authorize\");\n      expect(authUrl).toContain(\"client_id=test-client-id\");\n      expect(authUrl).toContain(\"response_type=code\");\n      expect(authUrl).toContain(\"code_challenge_method=S256\");\n      expect(authUrl).toContain(\"force_verify=true\");\n    });\n\n    test(\"should properly encode scope parameter\", () => {\n      const scopes = [\n        \"user:read:email\",\n        \"channel:read:stream_key\",\n        \"channel:manage:broadcast\",\n      ];\n\n      const scopeParam = scopes.join(\" \");\n      const encoded = new URLSearchParams({ scope: scopeParam }).toString();\n\n      expect(encoded).toContain(\"scope=\");\n      // Spaces should be encoded\n      expect(encoded).toMatch(/scope=user%3Aread%3Aemail\\+/);\n    });\n  });\n});\n\ndescribe(\"Twitch OAuth Bug Fixes\", () => {\n  test(\"refreshTwitchToken should use correct platform identifier\", () => {\n    // This test validates the bug fix where refreshTwitchToken\n    // was incorrectly using 'youtube' instead of 'twitch'\n\n    const correctPlatform = \"twitch\";\n    const incorrectPlatform = \"youtube\";\n\n    // Verify the platforms are different\n    expect(correctPlatform).not.toBe(incorrectPlatform);\n\n    // The fix ensures we use 'twitch' when refreshing Twitch tokens\n    expect(correctPlatform).toBe(\"twitch\");\n  });\n});\n\ndescribe(\"Documentation Completeness\", () => {\n  test(\"TWITCH_OAUTH_GUIDE.md should exist\", () => {\n    const guidePath = join(\n      process.cwd(),\n      \"docs/features/twitch/TWITCH_OAUTH_GUIDE.md\",\n    );\n    expect(existsSync(guidePath)).toBe(true);\n  });\n\n  test(\"TWITCH_OAUTH_GUIDE.md should have comprehensive content\", () => {\n    const guidePath = join(\n      process.cwd(),\n      \"docs/features/twitch/TWITCH_OAUTH_GUIDE.md\",\n    );\n    const content = readFileSync(guidePath, \"utf-8\");\n\n    // Should document key concepts\n    expect(content).toContain(\"PKCE\");\n    expect(content).toContain(\"OAuth\");\n    expect(content).toContain(\"Twitch\");\n    expect(content).toContain(\"Security\");\n    expect(content).toContain(\"redirect\");\n\n    // Should have troubleshooting section\n    expect(content).toContain(\"Troubleshooting\");\n\n    // Should document redirect URIs\n    expect(content).toContain(\"redirect_uri\");\n    expect(content).toContain(\"/api/platforms/twitch/oauth/callback\");\n\n    // Should be comprehensive (at least 10KB)\n    expect(content.length).toBeGreaterThan(10000);\n  });\n\n  test(\"API_DOCUMENTATION.md should include Platform OAuth section\", () => {\n    const apiDocPath = join(process.cwd(), \"docs/api/API_DOCUMENTATION.md\");\n    const content = readFileSync(apiDocPath, \"utf-8\");\n\n    // Should have Platform OAuth API section\n    expect(content).toContain(\"Platform OAuth API\");\n    expect(content).toContain(\"/platforms/:platform/oauth/initiate\");\n    expect(content).toContain(\"/platforms/:platform/oauth/callback\");\n    expect(content).toContain(\"/platforms/accounts\");\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/features/universal-deck-building.e2e.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mtgMockResponse' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":178,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":178,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createdGame' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":731,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":731,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Universal Deck-Building End-to-End Tests\n *\n * Comprehensive E2E tests for the entire Universal Deck-Building framework\n * Tests complete user workflows including game creation, card operations, and multi-game support\n */\n\nimport {\n  describe,\n  test,\n  expect,\n  beforeAll,\n  afterAll,\n  jest,\n} from \"@jest/globals\";\nimport { gameService } from \"../../services/games/game.service\";\nimport { scryfallAdapter } from \"../../services/card-recognition/adapters/scryfall.adapter\";\nimport { pokemonTCGAdapter } from \"../../services/card-recognition/adapters/pokemon.adapter\";\nimport { yugiohAdapter } from \"../../services/card-recognition/adapters/yugioh.adapter\";\n\n// Mock external APIs\njest.mock(\"../../services/card-recognition\", () => ({\n  cardRecognitionService: {\n    searchCards: jest.fn(),\n    getCardById: jest.fn(),\n    getCardByName: jest.fn(),\n    autocomplete: jest.fn(),\n    getRandomCard: jest.fn(),\n  },\n}));\n\njest.mock(\"../../services/games/game.service\");\n\njest.mock(\"../../services/card-recognition/index\", () => ({\n  universalCardService: {\n    searchCards: jest.fn(),\n    getCardById: jest.fn(),\n    getCardByName: jest.fn(),\n    autocomplete: jest.fn(),\n    getRandomCard: jest.fn(),\n    clearAdapterCache: jest.fn(),\n  },\n}));\n\n// Import mocked service after mock\nimport { universalCardService } from \"../../services/card-recognition/index\";\n\n// Mock fetch for external TCG APIs\nglobal.fetch = jest.fn();\n\ndescribe(\"Universal Deck-Building E2E Tests\", () => {\n  beforeAll(() => {\n    // Setup test environment\n  });\n\n  afterAll(() => {\n    // Cleanup\n  });\n\n  describe(\"Complete Game Creation Workflow\", () => {\n    test(\"E2E: Create custom game and search for cards\", async () => {\n      // Step 1: Create a custom game\n      const newGame = {\n        id: \"custom-fantasy-game\",\n        name: \"fantasy-rpg\",\n        displayName: \"Fantasy RPG TCG\",\n        description: \"A fantasy role-playing card game\",\n        creatorId: \"user-123\",\n        cardTypes: [\"Hero\", \"Spell\", \"Weapon\", \"Armor\"],\n        deckRules: {\n          minDeckSize: 40,\n          maxDeckSize: 60,\n          maxCopies: 3,\n        },\n        isPublished: false,\n      };\n\n      (gameService.createGame as jest.Mock).mockResolvedValue(newGame);\n\n      const createdGame = await gameService.createGame(\"user-123\", {\n        name: \"fantasy-rpg\",\n        displayName: \"Fantasy RPG TCG\",\n        description: \"A fantasy role-playing card game\",\n        creatorId: \"user-123\",\n        cardTypes: [\"Hero\", \"Spell\", \"Weapon\", \"Armor\"],\n        deckRules: {\n          minDeckSize: 40,\n          maxDeckSize: 60,\n          maxCopies: 3,\n        },\n      });\n\n      expect(createdGame.id).toBe(\"custom-fantasy-game\");\n      expect(createdGame.name).toBe(\"fantasy-rpg\");\n      expect(createdGame.cardTypes).toContain(\"Hero\");\n\n      // Step 2: Search for cards in the new game (would use custom adapter)\n      (universalCardService.searchCards as jest.Mock).mockResolvedValue({\n        cards: [\n          {\n            id: \"hero-1\",\n            gameId: \"custom-fantasy-game\",\n            name: \"Dragon Knight\",\n            attributes: { power: 5, health: 5, cardType: \"Hero\" },\n          },\n        ],\n        total: 1,\n        page: 1,\n        hasMore: false,\n      });\n\n      const searchResults = await universalCardService.searchCards(\n        \"custom-fantasy-game\",\n        \"Dragon\",\n        { limit: 20 },\n      );\n\n      expect(searchResults.cards).toHaveLength(1);\n      expect(searchResults.cards[0].name).toBe(\"Dragon Knight\");\n      expect(searchResults.cards[0].gameId).toBe(\"custom-fantasy-game\");\n\n      // Step 3: Publish the game\n      (gameService.publishGame as jest.Mock).mockResolvedValue({\n        ...newGame,\n        isPublished: true,\n      });\n\n      const publishedGame = await gameService.publishGame(\n        \"custom-fantasy-game\",\n        \"user-123\",\n      );\n\n      expect(publishedGame.isPublished).toBe(true);\n    });\n\n    test(\"E2E: Create game, update it, and verify changes\", async () => {\n      const initialGame = {\n        id: \"game-update-test\",\n        name: \"test-game\",\n        displayName: \"Test Game\",\n        creatorId: \"user-123\",\n      };\n\n      (gameService.createGame as jest.Mock).mockResolvedValue(initialGame);\n\n      const created = await gameService.createGame(\"user-123\", {\n        name: \"test-game\",\n        displayName: \"Test Game\",\n        creatorId: \"user-123\",\n      });\n\n      expect(created.displayName).toBe(\"Test Game\");\n\n      // Update the game\n      (gameService.updateGame as jest.Mock).mockResolvedValue({\n        ...initialGame,\n        displayName: \"Updated Test Game\",\n        description: \"Now with a description\",\n      });\n\n      const updated = await gameService.updateGame(\n        \"game-update-test\",\n        \"user-123\",\n        {\n          displayName: \"Updated Test Game\",\n          description: \"Now with a description\",\n        },\n      );\n\n      expect(updated.displayName).toBe(\"Updated Test Game\");\n      expect(updated.description).toBe(\"Now with a description\");\n    });\n  });\n\n  describe(\"Multi-Game Card Search Workflow\", () => {\n    test(\"E2E: Search cards across MTG, Pokemon, and Yu-Gi-Oh\", async () => {\n      // Mock MTG search\n      const mtgMockResponse = {\n        cards: [\n          {\n            id: \"mtg-1\",\n            name: \"Lightning Bolt\",\n            manaCost: \"{R}\",\n            typeLine: \"Instant\",\n          },\n        ],\n        total: 1,\n        page: 1,\n        hasMore: false,\n      };\n\n      // Mock Pokemon search\n      const pokemonMockResponse = {\n        data: [\n          {\n            id: \"base1-4\",\n            name: \"Charizard\",\n            supertype: \"Pokémon\",\n            hp: \"120\",\n            types: [\"Fire\"],\n            set: {\n              id: \"base1\",\n              name: \"Base\",\n              series: \"Base\",\n              printedTotal: 102,\n              total: 102,\n              releaseDate: \"1999/01/09\",\n            },\n            number: \"4\",\n            images: {\n              small: \"https://example.com/small.png\",\n              large: \"https://example.com/large.png\",\n            },\n          },\n        ],\n        page: 1,\n        pageSize: 20,\n        count: 1,\n        totalCount: 1,\n      };\n\n      // Mock Yu-Gi-Oh search\n      const yugiohMockResponse = {\n        data: [\n          {\n            id: 6983839,\n            name: \"Blue-Eyes White Dragon\",\n            type: \"Normal Monster\",\n            frameType: \"normal\",\n            desc: \"This legendary dragon is a powerful engine of destruction.\",\n            atk: 3000,\n            def: 2500,\n            level: 8,\n            race: \"Dragon\",\n            attribute: \"LIGHT\",\n            card_images: [\n              {\n                id: 6983839,\n                image_url: \"https://example.com/blue-eyes.jpg\",\n                image_url_small: \"https://example.com/blue-eyes-small.jpg\",\n                image_url_cropped: \"https://example.com/blue-eyes-cropped.jpg\",\n              },\n            ],\n          },\n        ],\n      };\n\n      // Test MTG\n      (universalCardService.searchCards as jest.Mock).mockResolvedValueOnce({\n        cards: [\n          {\n            id: \"mtg-1\",\n            gameId: \"mtg-official\",\n            name: \"Lightning Bolt\",\n            attributes: { manaCost: \"{R}\", typeLine: \"Instant\" },\n            externalSource: \"scryfall\",\n          },\n        ],\n        total: 1,\n        page: 1,\n        hasMore: false,\n      });\n\n      const mtgResults = await universalCardService.searchCards(\n        \"mtg-official\",\n        \"Lightning\",\n      );\n      expect(mtgResults.cards[0].name).toBe(\"Lightning Bolt\");\n      expect(mtgResults.cards[0].gameId).toBe(\"mtg-official\");\n\n      // Test Pokemon\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => pokemonMockResponse,\n      });\n\n      (universalCardService.searchCards as jest.Mock).mockResolvedValueOnce({\n        cards: [\n          {\n            id: \"base1-4\",\n            gameId: \"pokemon-tcg\",\n            name: \"Charizard\",\n            attributes: { hp: \"120\", types: [\"Fire\"] },\n            externalSource: \"pokemontcg\",\n          },\n        ],\n        total: 1,\n        page: 1,\n        hasMore: false,\n      });\n\n      const pokemonResults = await universalCardService.searchCards(\n        \"pokemon-tcg\",\n        \"Charizard\",\n      );\n      expect(pokemonResults.cards[0].name).toBe(\"Charizard\");\n      expect(pokemonResults.cards[0].gameId).toBe(\"pokemon-tcg\");\n\n      // Test Yu-Gi-Oh\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => yugiohMockResponse,\n      });\n\n      (universalCardService.searchCards as jest.Mock).mockResolvedValueOnce({\n        cards: [\n          {\n            id: \"6983839\",\n            gameId: \"yugioh-tcg\",\n            name: \"Blue-Eyes White Dragon\",\n            attributes: { atk: 3000, def: 2500, level: 8 },\n            externalSource: \"ygoprodeck\",\n          },\n        ],\n        total: 1,\n        page: 1,\n        hasMore: false,\n      });\n\n      const yugiohResults = await universalCardService.searchCards(\n        \"yugioh-tcg\",\n        \"Blue-Eyes\",\n      );\n      expect(yugiohResults.cards[0].name).toBe(\"Blue-Eyes White Dragon\");\n      expect(yugiohResults.cards[0].gameId).toBe(\"yugioh-tcg\");\n    });\n\n    test(\"E2E: Get specific card by ID from different games\", async () => {\n      // MTG card by ID\n      (universalCardService.getCardById as jest.Mock).mockResolvedValueOnce({\n        id: \"mtg-bolt\",\n        gameId: \"mtg-official\",\n        name: \"Lightning Bolt\",\n        attributes: { manaCost: \"{R}\" },\n      });\n\n      const mtgCard = await universalCardService.getCardById(\n        \"mtg-official\",\n        \"mtg-bolt\",\n      );\n      expect(mtgCard?.name).toBe(\"Lightning Bolt\");\n\n      // Pokemon card by ID\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          data: {\n            id: \"base1-4\",\n            name: \"Charizard\",\n            supertype: \"Pokémon\",\n            set: {\n              id: \"base1\",\n              name: \"Base\",\n              series: \"Base\",\n              printedTotal: 102,\n              total: 102,\n              releaseDate: \"1999/01/09\",\n            },\n            number: \"4\",\n            images: { small: \"url\", large: \"url\" },\n          },\n        }),\n      });\n\n      (universalCardService.getCardById as jest.Mock).mockResolvedValueOnce({\n        id: \"base1-4\",\n        gameId: \"pokemon-tcg\",\n        name: \"Charizard\",\n      });\n\n      const pokemonCard = await universalCardService.getCardById(\n        \"pokemon-tcg\",\n        \"base1-4\",\n      );\n      expect(pokemonCard?.name).toBe(\"Charizard\");\n\n      // Yu-Gi-Oh card by ID\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          data: [\n            {\n              id: 6983839,\n              name: \"Blue-Eyes White Dragon\",\n              type: \"Normal Monster\",\n              frameType: \"normal\",\n              desc: \"Dragon\",\n              race: \"Dragon\",\n              card_images: [\n                {\n                  id: 6983839,\n                  image_url: \"url\",\n                  image_url_small: \"url\",\n                  image_url_cropped: \"url\",\n                },\n              ],\n            },\n          ],\n        }),\n      });\n\n      (universalCardService.getCardById as jest.Mock).mockResolvedValueOnce({\n        id: \"6983839\",\n        gameId: \"yugioh-tcg\",\n        name: \"Blue-Eyes White Dragon\",\n      });\n\n      const yugiohCard = await universalCardService.getCardById(\n        \"yugioh-tcg\",\n        \"6983839\",\n      );\n      expect(yugiohCard?.name).toBe(\"Blue-Eyes White Dragon\");\n    });\n  });\n\n  describe(\"Autocomplete and Random Card Workflows\", () => {\n    test(\"E2E: Autocomplete across different games\", async () => {\n      // MTG autocomplete\n      (universalCardService.autocomplete as jest.Mock).mockResolvedValueOnce({\n        suggestions: [\n          { id: \"card-1\", name: \"Lightning Bolt\" },\n          { id: \"card-2\", name: \"Lightning Strike\" },\n        ],\n      });\n\n      const mtgSuggestions = await universalCardService.autocomplete(\n        \"mtg-official\",\n        \"light\",\n        10,\n      );\n      expect(mtgSuggestions.suggestions).toHaveLength(2);\n      expect(mtgSuggestions.suggestions[0].name).toBe(\"Lightning Bolt\");\n\n      // Pokemon autocomplete\n      (universalCardService.autocomplete as jest.Mock).mockResolvedValueOnce({\n        suggestions: [\n          { id: \"base1-4\", name: \"Charizard\" },\n          { id: \"base2-4\", name: \"Charmeleon\" },\n        ],\n      });\n\n      const pokemonSuggestions = await universalCardService.autocomplete(\n        \"pokemon-tcg\",\n        \"char\",\n        10,\n      );\n      expect(pokemonSuggestions.suggestions).toHaveLength(2);\n      expect(pokemonSuggestions.suggestions[0].name).toBe(\"Charizard\");\n\n      // Yu-Gi-Oh autocomplete\n      (universalCardService.autocomplete as jest.Mock).mockResolvedValueOnce({\n        suggestions: [\n          { id: \"6983839\", name: \"Blue-Eyes White Dragon\" },\n          { id: \"23995346\", name: \"Blue-Eyes Ultimate Dragon\" },\n        ],\n      });\n\n      const yugiohSuggestions = await universalCardService.autocomplete(\n        \"yugioh-tcg\",\n        \"blue\",\n        10,\n      );\n      expect(yugiohSuggestions.suggestions).toHaveLength(2);\n      expect(yugiohSuggestions.suggestions[0].name).toBe(\n        \"Blue-Eyes White Dragon\",\n      );\n    });\n\n    test(\"E2E: Get random cards from different games\", async () => {\n      // MTG random\n      (universalCardService.getRandomCard as jest.Mock).mockResolvedValueOnce({\n        id: \"random-mtg\",\n        gameId: \"mtg-official\",\n        name: \"Random MTG Card\",\n      });\n\n      const mtgRandom = await universalCardService.getRandomCard(\n        \"mtg-official\",\n        {},\n      );\n      expect(mtgRandom.gameId).toBe(\"mtg-official\");\n\n      // Pokemon random\n      (universalCardService.getRandomCard as jest.Mock).mockResolvedValueOnce({\n        id: \"random-pokemon\",\n        gameId: \"pokemon-tcg\",\n        name: \"Random Pokemon Card\",\n      });\n\n      const pokemonRandom = await universalCardService.getRandomCard(\n        \"pokemon-tcg\",\n        {},\n      );\n      expect(pokemonRandom.gameId).toBe(\"pokemon-tcg\");\n\n      // Yu-Gi-Oh random\n      (universalCardService.getRandomCard as jest.Mock).mockResolvedValueOnce({\n        id: \"random-yugioh\",\n        gameId: \"yugioh-tcg\",\n        name: \"Random Yu-Gi-Oh Card\",\n      });\n\n      const yugiohRandom = await universalCardService.getRandomCard(\n        \"yugioh-tcg\",\n        {},\n      );\n      expect(yugiohRandom.gameId).toBe(\"yugioh-tcg\");\n    });\n  });\n\n  describe(\"Error Handling and Edge Cases\", () => {\n    test(\"E2E: Handle game not found errors\", async () => {\n      (gameService.getGameById as jest.Mock).mockResolvedValue(null);\n\n      const game = await gameService.getGameById(\"non-existent-game\");\n      expect(game).toBeNull();\n    });\n\n    test(\"E2E: Handle unauthorized game operations\", async () => {\n      (gameService.updateGame as jest.Mock).mockRejectedValue(\n        new Error(\"Not authorized to update this game\"),\n      );\n\n      await expect(\n        gameService.updateGame(\"game-123\", \"wrong-user\", {\n          displayName: \"Hack\",\n        }),\n      ).rejects.toThrow(\"Not authorized to update this game\");\n\n      (gameService.deleteGame as jest.Mock).mockRejectedValue(\n        new Error(\"Not authorized to delete this game\"),\n      );\n\n      await expect(\n        gameService.deleteGame(\"game-123\", \"wrong-user\"),\n      ).rejects.toThrow(\"Not authorized to delete this game\");\n    });\n\n    test(\"E2E: Handle card not found in different games\", async () => {\n      (universalCardService.getCardById as jest.Mock).mockResolvedValue(null);\n\n      const mtgCard = await universalCardService.getCardById(\n        \"mtg-official\",\n        \"non-existent\",\n      );\n      expect(mtgCard).toBeNull();\n\n      const pokemonCard = await universalCardService.getCardById(\n        \"pokemon-tcg\",\n        \"non-existent\",\n      );\n      expect(pokemonCard).toBeNull();\n\n      const yugiohCard = await universalCardService.getCardById(\n        \"yugioh-tcg\",\n        \"non-existent\",\n      );\n      expect(yugiohCard).toBeNull();\n    });\n\n    test(\"E2E: Handle empty search results\", async () => {\n      (universalCardService.searchCards as jest.Mock).mockResolvedValue({\n        cards: [],\n        total: 0,\n        page: 1,\n        hasMore: false,\n      });\n\n      const results = await universalCardService.searchCards(\n        \"mtg-official\",\n        \"NonExistentCard123\",\n      );\n      expect(results.cards).toHaveLength(0);\n      expect(results.total).toBe(0);\n    });\n\n    test(\"E2E: Handle pagination correctly\", async () => {\n      // Page 1\n      (universalCardService.searchCards as jest.Mock).mockResolvedValueOnce({\n        cards: Array(20)\n          .fill(null)\n          .map((_, i) => ({\n            id: `card-${i}`,\n            name: `Card ${i}`,\n            gameId: \"mtg-official\",\n          })),\n        total: 100,\n        page: 1,\n        hasMore: true,\n      });\n\n      const page1 = await universalCardService.searchCards(\n        \"mtg-official\",\n        \"dragon\",\n        { page: 1, limit: 20 },\n      );\n      expect(page1.cards).toHaveLength(20);\n      expect(page1.hasMore).toBe(true);\n\n      // Page 2\n      (universalCardService.searchCards as jest.Mock).mockResolvedValueOnce({\n        cards: Array(20)\n          .fill(null)\n          .map((_, i) => ({\n            id: `card-${i + 20}`,\n            name: `Card ${i + 20}`,\n            gameId: \"mtg-official\",\n          })),\n        total: 100,\n        page: 2,\n        hasMore: true,\n      });\n\n      const page2 = await universalCardService.searchCards(\n        \"mtg-official\",\n        \"dragon\",\n        { page: 2, limit: 20 },\n      );\n      expect(page2.cards).toHaveLength(20);\n      expect(page2.page).toBe(2);\n    });\n  });\n\n  describe(\"Adapter Selection and Caching\", () => {\n    test(\"E2E: Verify correct adapter selection for each game\", async () => {\n      // Verify MTG uses Scryfall adapter\n      expect(scryfallAdapter.getGameId()).toBe(\"mtg-official\");\n\n      // Verify Pokemon uses Pokemon TCG adapter\n      expect(pokemonTCGAdapter.getGameId()).toBe(\"pokemon-tcg\");\n\n      // Verify Yu-Gi-Oh uses Yu-Gi-Oh adapter\n      expect(yugiohAdapter.getGameId()).toBe(\"yugioh-tcg\");\n    });\n\n    test(\"E2E: Test adapter caching behavior\", async () => {\n      // Clear cache\n      universalCardService.clearAdapterCache();\n\n      // First search should create adapter\n      (universalCardService.searchCards as jest.Mock).mockResolvedValueOnce({\n        cards: [],\n        total: 0,\n        page: 1,\n        hasMore: false,\n      });\n\n      await universalCardService.searchCards(\"mtg-official\", \"test\", {});\n\n      // Second search should use cached adapter\n      (universalCardService.searchCards as jest.Mock).mockResolvedValueOnce({\n        cards: [],\n        total: 0,\n        page: 1,\n        hasMore: false,\n      });\n\n      await universalCardService.searchCards(\"mtg-official\", \"test2\", {});\n\n      expect(universalCardService.searchCards).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe(\"Game Statistics and Metadata\", () => {\n    test(\"E2E: Retrieve and verify game statistics\", async () => {\n      const mockStats = {\n        totalCards: 250,\n        totalPlayers: 150,\n        totalGamesPlayed: 500,\n      };\n\n      (gameService.getGameStats as jest.Mock).mockResolvedValue(mockStats);\n\n      const stats = await gameService.getGameStats(\"custom-game-123\");\n\n      expect(stats.totalCards).toBe(250);\n      expect(stats.totalPlayers).toBe(150);\n      expect(stats.totalGamesPlayed).toBe(500);\n    });\n\n    test(\"E2E: List and filter games\", async () => {\n      const allGames = [\n        { id: \"game-1\", name: \"game-1\", isPublished: true, isOfficial: false },\n        { id: \"game-2\", name: \"game-2\", isPublished: false, isOfficial: false },\n        {\n          id: \"mtg-official\",\n          name: \"mtg-official\",\n          isPublished: true,\n          isOfficial: true,\n        },\n      ];\n\n      // Get all games\n      (gameService.getAllGames as jest.Mock).mockResolvedValueOnce(allGames);\n\n      const all = await gameService.getAllGames();\n      expect(all).toHaveLength(3);\n\n      // Get published games\n      (gameService.getAllGames as jest.Mock).mockResolvedValueOnce(\n        allGames.filter((g) => g.isPublished),\n      );\n\n      const published = await gameService.getAllGames({ isPublished: true });\n      expect(published).toHaveLength(2);\n      expect(published.every((g) => g.isPublished)).toBe(true);\n\n      // Get official games\n      (gameService.getAllGames as jest.Mock).mockResolvedValueOnce(\n        allGames.filter((g) => g.isOfficial),\n      );\n\n      const official = await gameService.getAllGames({ isOfficial: true });\n      expect(official).toHaveLength(1);\n      expect(official[0].id).toBe(\"mtg-official\");\n    });\n  });\n\n  describe(\"Complex Multi-Step Workflows\", () => {\n    test(\"E2E: Complete deck-building workflow\", async () => {\n      // Step 1: Create a game\n      const game = {\n        id: \"deck-game\",\n        name: \"deck-builder-game\",\n        displayName: \"Deck Builder Game\",\n        creatorId: \"user-123\",\n        deckRules: { minDeckSize: 60, maxCopies: 4 },\n      };\n\n      (gameService.createGame as jest.Mock).mockResolvedValue(game);\n      const createdGame = await gameService.createGame(\"user-123\", game);\n\n      // Step 2: Search for cards\n      (universalCardService.searchCards as jest.Mock).mockResolvedValue({\n        cards: [\n          { id: \"card-1\", name: \"Creature Card\", gameId: \"deck-game\" },\n          { id: \"card-2\", name: \"Spell Card\", gameId: \"deck-game\" },\n        ],\n        total: 2,\n        page: 1,\n        hasMore: false,\n      });\n\n      const cards = await universalCardService.searchCards(\n        \"deck-game\",\n        \"card\",\n        {},\n      );\n      expect(cards.cards).toHaveLength(2);\n\n      // Step 3: Get specific cards for deck\n      (universalCardService.getCardById as jest.Mock).mockResolvedValueOnce({\n        id: \"card-1\",\n        name: \"Creature Card\",\n        gameId: \"deck-game\",\n      });\n\n      const card1 = await universalCardService.getCardById(\n        \"deck-game\",\n        \"card-1\",\n      );\n      expect(card1?.name).toBe(\"Creature Card\");\n\n      // Step 4: Publish game\n      (gameService.publishGame as jest.Mock).mockResolvedValue({\n        ...game,\n        isPublished: true,\n      });\n\n      const published = await gameService.publishGame(\"deck-game\", \"user-123\");\n      expect(published.isPublished).toBe(true);\n\n      // Step 5: Get game stats\n      (gameService.getGameStats as jest.Mock).mockResolvedValue({\n        totalCards: 50,\n        totalPlayers: 10,\n        totalGamesPlayed: 5,\n      });\n\n      const stats = await gameService.getGameStats(\"deck-game\");\n      expect(stats.totalCards).toBe(50);\n    });\n\n    test(\"E2E: Cross-game card comparison workflow\", async () => {\n      // Search for dragons in MTG\n      (universalCardService.searchCards as jest.Mock).mockResolvedValueOnce({\n        cards: [\n          { id: \"mtg-dragon\", name: \"Dragon Card\", gameId: \"mtg-official\" },\n        ],\n        total: 1,\n        page: 1,\n        hasMore: false,\n      });\n\n      const mtgDragons = await universalCardService.searchCards(\n        \"mtg-official\",\n        \"dragon\",\n        {},\n      );\n\n      // Search for dragons in Yu-Gi-Oh\n      (universalCardService.searchCards as jest.Mock).mockResolvedValueOnce({\n        cards: [\n          { id: \"yugioh-dragon\", name: \"Dragon Monster\", gameId: \"yugioh-tcg\" },\n        ],\n        total: 1,\n        page: 1,\n        hasMore: false,\n      });\n\n      const yugiohDragons = await universalCardService.searchCards(\n        \"yugioh-tcg\",\n        \"dragon\",\n        {},\n      );\n\n      // Search for dragons in Pokemon\n      (universalCardService.searchCards as jest.Mock).mockResolvedValueOnce({\n        cards: [\n          {\n            id: \"pokemon-dragon\",\n            name: \"Dragon Pokemon\",\n            gameId: \"pokemon-tcg\",\n          },\n        ],\n        total: 1,\n        page: 1,\n        hasMore: false,\n      });\n\n      const pokemonDragons = await universalCardService.searchCards(\n        \"pokemon-tcg\",\n        \"dragon\",\n        {},\n      );\n\n      // Verify all searches succeeded\n      expect(mtgDragons.cards[0].gameId).toBe(\"mtg-official\");\n      expect(yugiohDragons.cards[0].gameId).toBe(\"yugioh-tcg\");\n      expect(pokemonDragons.cards[0].gameId).toBe(\"pokemon-tcg\");\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/features/universal-deck-building.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/schema/cards-games-schema.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[482,485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[482,485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1975,1978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1975,1978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4101,4104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4101,4104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Cards and Games Schema Tests\n *\n * Tests to validate the structure of the cards and games tables.\n */\n\nimport { describe, test, expect } from \"@jest/globals\";\nimport {\n  games,\n  cards,\n  insertGameSchema,\n  insertCardSchema,\n  type Game,\n  type Card,\n  type InsertGame,\n  type InsertCard,\n} from \"../../../shared/schema\";\n\ndescribe(\"Games and Cards Schema\", () => {\n  describe(\"Games Table\", () => {\n    test(\"should have correct table name\", () => {\n      expect((games as any)[Symbol.for(\"drizzle:Name\")]).toBe(\"games\");\n    });\n\n    test(\"should validate insert schema for games\", () => {\n      const validGame: InsertGame = {\n        name: \"Magic: The Gathering\",\n        code: \"MTG\",\n        description: \"A popular trading card game\",\n        isActive: true,\n      };\n\n      const result = insertGameSchema.safeParse(validGame);\n      expect(result.success).toBe(true);\n    });\n\n    test(\"should require name and code fields\", () => {\n      const invalidGame = {\n        description: \"Missing name and code\",\n      };\n\n      const result = insertGameSchema.safeParse(invalidGame);\n      expect(result.success).toBe(false);\n    });\n\n    test(\"should validate code format (uppercase)\", () => {\n      const gameWithLowercaseCode: InsertGame = {\n        name: \"Pokemon\",\n        code: \"pokemon\", // Should be converted to uppercase\n      };\n\n      const result = insertGameSchema.safeParse(gameWithLowercaseCode);\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.code).toBe(\"POKEMON\");\n      }\n    });\n\n    test(\"should enforce max length on name\", () => {\n      const longName = \"a\".repeat(101);\n      const gameWithLongName = {\n        name: longName,\n        code: \"TEST\",\n      };\n\n      const result = insertGameSchema.safeParse(gameWithLongName);\n      expect(result.success).toBe(false);\n    });\n  });\n\n  describe(\"Cards Table\", () => {\n    test(\"should have correct table name\", () => {\n      expect((cards as any)[Symbol.for(\"drizzle:Name\")]).toBe(\"cards\");\n    });\n\n    test(\"should validate insert schema for cards\", () => {\n      const validCard: InsertCard = {\n        name: \"Black Lotus\",\n        gameId: \"test-game-id\",\n        type: \"Artifact\",\n        rarity: \"Rare\",\n        setCode: \"LEA\",\n        setName: \"Limited Edition Alpha\",\n      };\n\n      const result = insertCardSchema.safeParse(validCard);\n      expect(result.success).toBe(true);\n    });\n\n    test(\"should require name and gameId fields\", () => {\n      const invalidCard = {\n        type: \"Creature\",\n        rarity: \"Common\",\n      };\n\n      const result = insertCardSchema.safeParse(invalidCard);\n      expect(result.success).toBe(false);\n    });\n\n    test(\"should allow optional fields\", () => {\n      const minimalCard: InsertCard = {\n        name: \"Test Card\",\n        gameId: \"test-game-id\",\n      };\n\n      const result = insertCardSchema.safeParse(minimalCard);\n      expect(result.success).toBe(true);\n    });\n\n    test(\"should validate imageUrl format when provided\", () => {\n      const cardWithInvalidUrl = {\n        name: \"Test Card\",\n        gameId: \"test-game-id\",\n        imageUrl: \"not-a-valid-url\",\n      };\n\n      const result = insertCardSchema.safeParse(cardWithInvalidUrl);\n      expect(result.success).toBe(false);\n    });\n\n    test(\"should accept valid imageUrl\", () => {\n      const cardWithValidUrl: InsertCard = {\n        name: \"Test Card\",\n        gameId: \"test-game-id\",\n        imageUrl: \"https://example.com/card-image.jpg\",\n      };\n\n      const result = insertCardSchema.safeParse(cardWithValidUrl);\n      expect(result.success).toBe(true);\n    });\n\n    test(\"should enforce max lengths on fields\", () => {\n      const cardWithLongName = {\n        name: \"a\".repeat(201),\n        gameId: \"test-game-id\",\n      };\n\n      const result = insertCardSchema.safeParse(cardWithLongName);\n      expect(result.success).toBe(false);\n    });\n  });\n\n  describe(\"Foreign Key Relationship\", () => {\n    test(\"cards should reference games table\", () => {\n      // Check that the gameId field has a reference\n      const gameIdColumn = (cards as any).gameId;\n      expect(gameIdColumn).toBeDefined();\n      expect(gameIdColumn.notNull).toBe(true);\n    });\n  });\n\n  describe(\"Type Definitions\", () => {\n    test(\"Game type should be properly typed\", () => {\n      const game: Game = {\n        id: \"test-id\",\n        name: \"Test Game\",\n        code: \"TEST\",\n        description: \"Test description\",\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      expect(game.id).toBeDefined();\n      expect(game.name).toBeDefined();\n      expect(game.code).toBeDefined();\n    });\n\n    test(\"Card type should be properly typed\", () => {\n      const card: Card = {\n        id: \"test-id\",\n        name: \"Test Card\",\n        gameId: \"game-id\",\n        type: \"Creature\",\n        rarity: \"Common\",\n        setCode: \"TST\",\n        setName: \"Test Set\",\n        imageUrl: \"https://example.com/image.jpg\",\n        metadata: \"{}\",\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      expect(card.id).toBeDefined();\n      expect(card.name).toBeDefined();\n      expect(card.gameId).toBeDefined();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/security/credential-protection.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/security/enhanced-sanitization.test.ts","messages":[],"suppressedMessages":[{"ruleId":"no-control-regex","severity":2,"message":"Unexpected control character(s) in regular expression: \\x00, \\x08, \\x0b, \\x0c, \\x0e, \\x1f.","line":189,"column":40,"nodeType":"Literal","messageId":"unexpected","endLine":189,"endColumn":74,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/security/gitignore-env-protection.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'result' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":40,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1481,1484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1481,1484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2522,2525],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2522,2525],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'result' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":106,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":106,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3431,3434],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3431,3434],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4293,4296],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4293,4296],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * .gitignore Environment File Protection Tests\n *\n * Tests to ensure .env files are properly ignored by Git to prevent\n * accidental exposure of sensitive credentials.\n *\n * This addresses the security requirement that ALL .env files must be\n * ignored by Git, with exceptions only for template files.\n */\n\nimport { describe, test, expect } from \"@jest/globals\";\nimport { execSync } from \"child_process\";\nimport { existsSync, writeFileSync, unlinkSync, readFileSync } from \"fs\";\nimport { join } from \"path\";\n\nconst ROOT_DIR = join(__dirname, \"../../..\");\n\ndescribe(\"GitIgnore Environment File Protection\", () => {\n  describe(\"Environment File Patterns\", () => {\n    test(\"should ignore all .env files\", () => {\n      const envFiles = [\n        \".env\",\n        \".env.local\",\n        \".env.production\",\n        \".env.development\",\n        \".env.staging\",\n        \".env.custom\",\n      ];\n\n      envFiles.forEach((file) => {\n        const filePath = join(ROOT_DIR, file);\n        const tempFile = `${filePath}.temp-test`;\n\n        try {\n          // Create a temporary test file\n          writeFileSync(tempFile, \"TEST=true\", \"utf8\");\n\n          // Check if Git would ignore it\n          try {\n            const result = execSync(`git check-ignore -q \"${tempFile}\"`, {\n              cwd: ROOT_DIR,\n              encoding: \"utf8\",\n            });\n            // If check-ignore succeeds (exit code 0), file is ignored\n            expect(true).toBe(true);\n          } catch (error: any) {\n            // If check-ignore fails (non-zero exit), file is NOT ignored\n            if (error.status !== 0) {\n              throw new Error(\n                `File \"${file}\" is NOT ignored by Git but should be!`,\n              );\n            }\n          }\n        } finally {\n          // Cleanup\n          if (existsSync(tempFile)) {\n            unlinkSync(tempFile);\n          }\n        }\n      });\n    });\n\n    test(\"should ignore .env files with any extension\", () => {\n      const envPatterns = [\n        \"something.env\",\n        \"config.env.backup\",\n        \"app.env\",\n        \".env.new.file\",\n      ];\n\n      envPatterns.forEach((file) => {\n        const filePath = join(ROOT_DIR, file);\n        const tempFile = `${filePath}.temp-test`;\n\n        try {\n          writeFileSync(tempFile, \"TEST=true\", \"utf8\");\n\n          try {\n            execSync(`git check-ignore -q \"${tempFile}\"`, {\n              cwd: ROOT_DIR,\n              encoding: \"utf8\",\n            });\n            expect(true).toBe(true);\n          } catch (error: any) {\n            if (error.status !== 0) {\n              throw new Error(\n                `Pattern \"${file}\" is NOT ignored by Git but should be!`,\n              );\n            }\n          }\n        } finally {\n          if (existsSync(tempFile)) {\n            unlinkSync(tempFile);\n          }\n        }\n      });\n    });\n\n    test(\"should allow .env.example and .env.production.template files\", () => {\n      const allowedFiles = [\".env.example\", \".env.production.template\"];\n\n      allowedFiles.forEach((file) => {\n        const filePath = join(ROOT_DIR, file);\n\n        try {\n          const result = execSync(`git check-ignore -q \"${filePath}\"`, {\n            cwd: ROOT_DIR,\n            encoding: \"utf8\",\n          });\n          // If we reach here, file is ignored - which is WRONG for these files\n          throw new Error(`File \"${file}\" is ignored but should be allowed!`);\n        } catch (error: any) {\n          // Non-zero exit code means file is NOT ignored - which is correct\n          if (error.status !== 0) {\n            expect(true).toBe(true);\n          } else {\n            throw error;\n          }\n        }\n      });\n    });\n  });\n\n  describe(\"Security Requirements\", () => {\n    test(\".env.production should not exist in Git history\", () => {\n      try {\n        const result = execSync(\n          \"git log --all --full-history -- .env.production\",\n          {\n            cwd: ROOT_DIR,\n            encoding: \"utf8\",\n          },\n        );\n\n        // If there's any output, the file exists in history\n        if (result.trim().length > 0) {\n          throw new Error(\n            \".env.production found in Git history! This is a critical security issue.\",\n          );\n        }\n\n        expect(result.trim()).toBe(\"\");\n      } catch (error: any) {\n        if (error.message?.includes(\"critical security issue\")) {\n          throw error;\n        }\n        // Other errors are fine (e.g., command execution errors)\n      }\n    });\n\n    // Note: Removed specific commit check test as it can fail in CI environments\n    // even after history rewrite due to reflog and other git internal references.\n    // The general .env.production history check below is more reliable and comprehensive.\n\n    test(\".gitignore should contain broad .env patterns\", () => {\n      const gitignorePath = join(ROOT_DIR, \".gitignore\");\n      const gitignoreContent = readFileSync(gitignorePath, \"utf8\");\n\n      // Check for the broad patterns that catch all .env files\n      expect(gitignoreContent).toContain(\"*.env*\");\n      expect(gitignoreContent).toContain(\".env*\");\n\n      // Check for exceptions (template files that should be allowed)\n      expect(gitignoreContent).toContain(\"!.env.example\");\n      expect(gitignoreContent).toContain(\"!.env.production.template\");\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/security/input-sanitization.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/security/security-audit-comprehensive.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'beforeAll' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1067,1070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1067,1070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":162,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6367,6370],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6367,6370],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Comprehensive Security Audit Test Suite\n *\n * This test suite validates all items from the Security Audit & Hardening Checklist\n * for production release readiness.\n */\n\nimport { describe, test, expect, beforeAll } from \"@jest/globals\";\nimport { execSync } from \"child_process\";\nimport { readFileSync, existsSync } from \"fs\";\nimport { join } from \"path\";\nimport { auditSecurityConfiguration } from \"../../utils/security.utils\";\n\ndescribe(\"Security Audit & Hardening Checklist\", () => {\n  describe(\"1. Dependencies audited and vulnerabilities addressed\", () => {\n    test(\"should have no vulnerabilities in production dependencies\", () => {\n      try {\n        // Run npm audit for production dependencies only\n        const auditResult = execSync(\"npm audit --production --json\", {\n          encoding: \"utf8\",\n          stdio: [\"pipe\", \"pipe\", \"pipe\"],\n        });\n\n        const audit = JSON.parse(auditResult);\n        const vulnerabilityCount = audit.metadata?.vulnerabilities?.total || 0;\n\n        expect(vulnerabilityCount).toBe(0);\n      } catch (error: any) {\n        // npm audit exits with non-zero when vulnerabilities are found\n        if (error.stdout) {\n          const audit = JSON.parse(error.stdout);\n          const vulnerabilityCount =\n            audit.metadata?.vulnerabilities?.total || 0;\n          expect(vulnerabilityCount).toBe(0);\n        } else {\n          throw error;\n        }\n      }\n    });\n\n    test(\"should have all dependencies up to date with security patches\", () => {\n      // Check that package-lock.json exists (ensures dependency integrity)\n      const packageLockPath = join(process.cwd(), \"package-lock.json\");\n      expect(existsSync(packageLockPath)).toBe(true);\n    });\n  });\n\n  describe(\"2. Authentication flows tested\", () => {\n    test(\"should have Auth.js properly configured with secure settings\", () => {\n      const authConfigPath = join(process.cwd(), \"server/auth/auth.config.ts\");\n      const authConfig = readFileSync(authConfigPath, \"utf8\");\n\n      // Verify critical security settings\n      expect(authConfig).toContain(\"trustHost: true\");\n      expect(authConfig).toContain(\"httpOnly: true\");\n      expect(authConfig).toContain('strategy: \"database\"');\n    });\n\n    test(\"should require AUTH_SECRET environment variable\", () => {\n      const authConfigPath = join(process.cwd(), \"server/auth/auth.config.ts\");\n      const authConfig = readFileSync(authConfigPath, \"utf8\");\n\n      expect(authConfig).toContain(\"process.env.AUTH_SECRET\");\n      expect(authConfig).toContain(\n        \"throw new Error('AUTH_SECRET environment variable is required')\",\n      );\n    });\n\n    test(\"should have MFA support implemented\", () => {\n      const authConfigPath = join(process.cwd(), \"server/auth/auth.config.ts\");\n      const authConfig = readFileSync(authConfigPath, \"utf8\");\n\n      expect(authConfig).toContain(\"mfaEnabled\");\n      expect(authConfig).toContain(\"MFA_REQUIRED\");\n    });\n\n    test(\"should have account lockout mechanism\", () => {\n      const authConfigPath = join(process.cwd(), \"server/auth/auth.config.ts\");\n      const authConfig = readFileSync(authConfigPath, \"utf8\");\n\n      expect(authConfig).toContain(\"accountLockedUntil\");\n      expect(authConfig).toContain(\"failedLoginAttempts\");\n    });\n  });\n\n  describe(\"3. API rate limiting implemented\", () => {\n    test(\"should have rate limiting middleware configured\", () => {\n      const rateLimitPath = join(process.cwd(), \"server/rate-limiting.ts\");\n      expect(existsSync(rateLimitPath)).toBe(true);\n\n      const rateLimit = readFileSync(rateLimitPath, \"utf8\");\n      expect(rateLimit).toContain(\"rateLimit\");\n      expect(rateLimit).toContain(\"generalRateLimit\");\n      expect(rateLimit).toContain(\"authRateLimit\");\n    });\n\n    test(\"should have strict auth rate limiting (5 attempts per 15 min)\", () => {\n      const rateLimitPath = join(process.cwd(), \"server/rate-limiting.ts\");\n      const rateLimit = readFileSync(rateLimitPath, \"utf8\");\n\n      expect(rateLimit).toContain(\"authRateLimit\");\n      expect(rateLimit).toMatch(/max:\\s*5/);\n      expect(rateLimit).toMatch(/15\\s*\\*\\s*60\\s*\\*\\s*1000/);\n    });\n\n    test(\"should have message rate limiting\", () => {\n      const rateLimitPath = join(process.cwd(), \"server/rate-limiting.ts\");\n      const rateLimit = readFileSync(rateLimitPath, \"utf8\");\n\n      expect(rateLimit).toContain(\"messageRateLimit\");\n    });\n\n    test(\"should have event creation rate limiting\", () => {\n      const rateLimitPath = join(process.cwd(), \"server/rate-limiting.ts\");\n      const rateLimit = readFileSync(rateLimitPath, \"utf8\");\n\n      expect(rateLimit).toContain(\"eventCreationRateLimit\");\n    });\n  });\n\n  describe(\"4. Environment variables properly secured\", () => {\n    test(\"should have comprehensive .gitignore patterns for .env files\", () => {\n      const gitignorePath = join(process.cwd(), \".gitignore\");\n      const gitignore = readFileSync(gitignorePath, \"utf8\");\n\n      expect(gitignore).toContain(\"*.env*\");\n      expect(gitignore).toContain(\".env*\");\n      expect(gitignore).toContain(\".env.local\");\n      expect(gitignore).toContain(\".env.production\");\n    });\n\n    test(\"should allow only safe example env files\", () => {\n      const gitignorePath = join(process.cwd(), \".gitignore\");\n      const gitignore = readFileSync(gitignorePath, \"utf8\");\n\n      expect(gitignore).toContain(\"!.env.example\");\n      expect(gitignore).toContain(\"!.env.production.template\");\n      expect(gitignore).toContain(\"!.env.test\");\n    });\n\n    test(\"should have .env.example as template\", () => {\n      const envExamplePath = join(process.cwd(), \".env.example\");\n      expect(existsSync(envExamplePath)).toBe(true);\n\n      const envExample = readFileSync(envExamplePath, \"utf8\");\n      // Should not contain real credentials\n      expect(envExample).not.toMatch(/sk_live_/);\n      expect(envExample).not.toMatch(/AIza[A-Za-z0-9_-]{35}/);\n    });\n\n    test(\"should not commit .env.production to git history\", () => {\n      try {\n        execSync(\n          'git log --all --pretty=format: --name-only --diff-filter=A | grep -E \"^\\\\.env\\\\.production$\"',\n          {\n            encoding: \"utf8\",\n            stdio: [\"pipe\", \"pipe\", \"pipe\"],\n          },\n        );\n        // If we get here, .env.production was found\n        fail(\".env.production should not exist in git history\");\n      } catch (error: any) {\n        // Good - grep returned no results (exit code 1) or other error\n        // grep exits with 1 when no matches, which is what we want\n        if (error.status === undefined) {\n          // If status is undefined, the command likely failed for another reason\n          // Check if stderr contains 'bad object' which means the commit doesn't exist\n          if (\n            error.stderr?.includes(\"bad object\") ||\n            error.message?.includes(\"bad object\")\n          ) {\n            expect(true).toBe(true); // This is fine - commit doesn't exist\n          } else {\n            expect(error.status || 1).toBe(1); // Accept undefined as 1 (no matches)\n          }\n        } else {\n          expect(error.status).toBe(1); // grep exits with 1 when no matches\n        }\n      }\n    });\n  });\n\n  describe(\"5. CORS settings appropriate for production\", () => {\n    test(\"should have CORS configuration in validation.ts\", () => {\n      const validationPath = join(process.cwd(), \"server/validation.ts\");\n      const validation = readFileSync(validationPath, \"utf8\");\n\n      expect(validation).toContain(\"securityHeaders\");\n    });\n\n    test(\"should set proper security headers\", () => {\n      const validationPath = join(process.cwd(), \"server/validation.ts\");\n      const validation = readFileSync(validationPath, \"utf8\");\n\n      expect(validation).toContain(\"X-Content-Type-Options\");\n      expect(validation).toContain(\"X-Frame-Options\");\n      expect(validation).toContain(\"X-XSS-Protection\");\n      expect(validation).toContain(\"Referrer-Policy\");\n    });\n  });\n\n  describe(\"6. Content Security Policy (CSP) headers configured\", () => {\n    test(\"should have CSP headers in production\", () => {\n      const validationPath = join(process.cwd(), \"server/validation.ts\");\n      const validation = readFileSync(validationPath, \"utf8\");\n\n      expect(validation).toContain(\"Content-Security-Policy\");\n      expect(validation).toContain(\"default-src 'self'\");\n    });\n\n    test(\"should have strict CSP in production, report-only in development\", () => {\n      const validationPath = join(process.cwd(), \"server/validation.ts\");\n      const validation = readFileSync(validationPath, \"utf8\");\n\n      expect(validation).toContain(\"Content-Security-Policy-Report-Only\");\n      expect(validation).toContain(\"process.env.NODE_ENV === 'production'\");\n    });\n\n    test(\"should restrict frame-ancestors to prevent clickjacking\", () => {\n      const validationPath = join(process.cwd(), \"server/validation.ts\");\n      const validation = readFileSync(validationPath, \"utf8\");\n\n      expect(validation).toContain(\"frame-ancestors 'none'\");\n    });\n\n    test(\"should restrict object-src\", () => {\n      const validationPath = join(process.cwd(), \"server/validation.ts\");\n      const validation = readFileSync(validationPath, \"utf8\");\n\n      expect(validation).toContain(\"object-src 'none'\");\n    });\n  });\n\n  describe(\"7. Input validation implemented across all user inputs\", () => {\n    test(\"should have comprehensive Zod validation schemas\", () => {\n      const validationPath = join(process.cwd(), \"server/validation.ts\");\n      const validation = readFileSync(validationPath, \"utf8\");\n\n      expect(validation).toContain(\"validateEmailSchema\");\n      expect(validation).toContain(\"validateUserProfileUpdateSchema\");\n      expect(validation).toContain(\"validateEventSchema\");\n      expect(validation).toContain(\"validateMessageSchema\");\n    });\n\n    test(\"should have input sanitization middleware\", () => {\n      const securityMiddlewarePath = join(\n        process.cwd(),\n        \"server/middleware/security.middleware.ts\",\n      );\n      const securityMiddleware = readFileSync(securityMiddlewarePath, \"utf8\");\n\n      expect(securityMiddleware).toContain(\"inputSanitizationMiddleware\");\n      expect(securityMiddleware).toContain(\"sanitizeInput\");\n    });\n\n    test(\"should have SQL injection protection\", () => {\n      const validationPath = join(process.cwd(), \"server/validation.ts\");\n      const validation = readFileSync(validationPath, \"utf8\");\n\n      expect(validation).toContain(\"sanitizeInput\");\n      expect(validation).toMatch(/[<>]/); // XSS protection\n    });\n\n    test(\"should validate UUIDs for ID parameters\", () => {\n      const validationPath = join(process.cwd(), \"server/validation.ts\");\n      const validation = readFileSync(validationPath, \"utf8\");\n\n      expect(validation).toContain(\"validateUUID\");\n      expect(validation).toContain(\"uuidParamSchema\");\n    });\n  });\n\n  describe(\"8. Sensitive data handling reviewed for compliance\", () => {\n    test(\"should use structured logging instead of console.log\", () => {\n      const loggerPath = join(process.cwd(), \"server/logger.ts\");\n      expect(existsSync(loggerPath)).toBe(true);\n    });\n\n    test(\"should have credential leak detection\", () => {\n      const securityUtilsPath = join(\n        process.cwd(),\n        \"server/utils/security.utils.ts\",\n      );\n      const securityUtils = readFileSync(securityUtilsPath, \"utf8\");\n\n      expect(securityUtils).toContain(\"detectCredentialLeak\");\n      expect(securityUtils).toContain(\"sanitizeCredentials\");\n    });\n\n    test(\"should hash passwords with bcrypt or argon2\", () => {\n      const passwordPath = join(process.cwd(), \"server/auth/password.ts\");\n      const password = readFileSync(passwordPath, \"utf8\");\n\n      // Should use either bcrypt or argon2\n      const hasBcrypt = password.includes(\"bcrypt\");\n      const hasArgon2 = password.includes(\"argon2\");\n\n      expect(hasBcrypt || hasArgon2).toBe(true);\n    });\n\n    test(\"should not log passwords or tokens\", () => {\n      // Check common files for console.log with sensitive data\n      const files = [\n        \"server/auth/password.ts\",\n        \"server/auth/tokens.ts\",\n        \"server/storage.ts\",\n      ];\n\n      files.forEach((file) => {\n        const filePath = join(process.cwd(), file);\n        if (existsSync(filePath)) {\n          const content = readFileSync(filePath, \"utf8\");\n\n          // Should not have console.log of password or token directly\n          expect(content).not.toMatch(/console\\.log\\([^)]*password[^)]*\\)/i);\n          expect(content).not.toMatch(/console\\.log\\([^)]*token[^)]*\\)/i);\n        }\n      });\n    });\n  });\n\n  describe(\"9. OAuth scopes minimized to necessary permissions\", () => {\n    test(\"should use default scopes from Auth.js providers\", () => {\n      const authConfigPath = join(process.cwd(), \"server/auth/auth.config.ts\");\n      const authConfig = readFileSync(authConfigPath, \"utf8\");\n\n      // Auth.js Google provider defaults to 'openid profile email' which is minimal\n      // Auth.js Twitch provider defaults to 'openid email' which is minimal\n      // We should NOT be requesting additional scopes unless necessary\n\n      // Check that we're not requesting excessive scopes\n      expect(authConfig).not.toContain(\"googleapis.com/auth/drive\");\n      expect(authConfig).not.toContain(\"googleapis.com/auth/calendar\");\n      expect(authConfig).not.toContain(\"channel:read:subscriptions\");\n      expect(authConfig).not.toContain(\"user:read:email\"); // Twitch - already in default\n    });\n\n    test(\"should document which OAuth scopes are used and why\", () => {\n      // Check if there's documentation about OAuth scopes\n      const envExamplePath = join(process.cwd(), \".env.example\");\n      const envExample = readFileSync(envExamplePath, \"utf8\");\n\n      expect(envExample).toContain(\"GOOGLE_CLIENT_ID\");\n      expect(envExample).toContain(\"TWITCH_CLIENT_ID\");\n    });\n  });\n\n  describe(\"10. Third-party service credentials rotated before deployment\", () => {\n    test(\"should not use demo/test credentials in production\", () => {\n      const securityAudit = auditSecurityConfiguration();\n\n      if (process.env.NODE_ENV === \"production\") {\n        expect(securityAudit.passed).toBe(true);\n        expect(securityAudit.issues).not.toContainEqual(\n          expect.stringContaining(\n            \"Using development AUTH_SECRET in production\",\n          ),\n        );\n      } else {\n        // In development, just check that the audit runs\n        expect(securityAudit).toHaveProperty(\"passed\");\n        expect(securityAudit).toHaveProperty(\"issues\");\n      }\n    });\n\n    test(\"should have security configuration audit function\", () => {\n      const securityUtilsPath = join(\n        process.cwd(),\n        \"server/utils/security.utils.ts\",\n      );\n      const securityUtils = readFileSync(securityUtilsPath, \"utf8\");\n\n      expect(securityUtils).toContain(\"auditSecurityConfiguration\");\n      expect(securityUtils).toContain(\"validateEnvironmentVariables\");\n    });\n\n    test(\"should validate AUTH_SECRET strength\", () => {\n      const securityUtilsPath = join(\n        process.cwd(),\n        \"server/utils/security.utils.ts\",\n      );\n      const securityUtils = readFileSync(securityUtilsPath, \"utf8\");\n\n      expect(securityUtils).toContain(\"validateJWTSecret\");\n      expect(securityUtils).toContain(\n        \"AUTH_SECRET must be at least 32 characters\",\n      );\n    });\n  });\n\n  describe(\"Additional Security Best Practices\", () => {\n    test(\"should have HSTS header in production\", () => {\n      const validationPath = join(process.cwd(), \"server/validation.ts\");\n      const validation = readFileSync(validationPath, \"utf8\");\n\n      expect(validation).toContain(\"Strict-Transport-Security\");\n      expect(validation).toContain(\"process.env.NODE_ENV === 'production'\");\n    });\n\n    test(\"should use secure cookies in production\", () => {\n      const authConfigPath = join(process.cwd(), \"server/auth/auth.config.ts\");\n      const authConfig = readFileSync(authConfigPath, \"utf8\");\n\n      expect(authConfig).toContain(\"useSecureCookies\");\n      expect(authConfig).toContain(\"process.env.NODE_ENV === 'production'\");\n    });\n\n    test(\"should have CSRF protection enabled\", () => {\n      const authConfigPath = join(process.cwd(), \"server/auth/auth.config.ts\");\n      const authConfig = readFileSync(authConfigPath, \"utf8\");\n\n      expect(authConfig).toContain(\"csrfToken\");\n    });\n\n    test(\"should log security events for audit trail\", () => {\n      const authConfigPath = join(process.cwd(), \"server/auth/auth.config.ts\");\n      const authConfig = readFileSync(authConfigPath, \"utf8\");\n\n      expect(authConfig).toContain(\"createAuthAuditLog\");\n      expect(authConfig).toContain(\"login_success\");\n      expect(authConfig).toContain(\"login_failure\");\n    });\n\n    test(\"should have security monitoring middleware\", () => {\n      const securityMiddlewarePath = join(\n        process.cwd(),\n        \"server/middleware/security.middleware.ts\",\n      );\n      const securityMiddleware = readFileSync(securityMiddlewarePath, \"utf8\");\n\n      expect(securityMiddleware).toContain(\"securityMonitoringMiddleware\");\n    });\n\n    test(\"should run security audit on startup in production\", () => {\n      const indexPath = join(process.cwd(), \"server/index.ts\");\n      const index = readFileSync(indexPath, \"utf8\");\n\n      expect(index).toContain(\"auditSecurityConfiguration\");\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/security/security.utils.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/services/card-adapters.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/services/game.service.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'eq' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Game Service Unit Tests\n *\n * Tests for game CRUD operations and business logic\n */\n\nimport { gameService } from \"../../services/games/game.service\";\nimport { db } from \"../../../shared/database-unified\";\nimport { games } from \"../../../shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\n// Mock the database\njest.mock(\"../../../shared/database-unified\", () => ({\n  db: {\n    insert: jest.fn(),\n    select: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n}));\n\n// TODO: Re-enable when games table is implemented in schema\ndescribe.skip(\"GameService\", () => {\n  const mockUserId = \"user-123\";\n  const mockGameId = \"game-456\";\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"createGame\", () => {\n    it(\"should create a new game with valid data\", async () => {\n      const gameData = {\n        name: \"test-game\",\n        displayName: \"Test Game\",\n        description: \"A test game\",\n        creatorId: mockUserId,\n        cardTypes: [\"Hero\", \"Spell\"],\n        deckRules: { minDeckSize: 40 },\n      };\n\n      const mockCreatedGame = {\n        id: mockGameId,\n        ...gameData,\n        isPublished: false,\n        version: \"1.0.0\",\n        createdAt: new Date(),\n      };\n\n      (db.insert as jest.Mock).mockReturnValue({\n        values: jest.fn().mockReturnValue({\n          returning: jest.fn().mockResolvedValue([mockCreatedGame]),\n        }),\n      });\n\n      const result = await gameService.createGame(mockUserId, gameData);\n\n      expect(result).toBeDefined();\n      expect(result.id).toBe(mockGameId);\n      expect(result.name).toBe(\"test-game\");\n      expect(result.isPublished).toBe(false);\n      expect(db.insert).toHaveBeenCalledWith(games);\n    });\n\n    it(\"should set default values for optional fields\", async () => {\n      const gameData = {\n        name: \"minimal-game\",\n        displayName: \"Minimal Game\",\n        creatorId: mockUserId,\n      };\n\n      const mockCreatedGame = {\n        id: mockGameId,\n        ...gameData,\n        isPublished: false,\n        version: \"1.0.0\",\n        playerCount: { min: 2, max: 4 },\n        cardTypes: [],\n        deckRules: {\n          minDeckSize: 60,\n          maxDeckSize: null,\n          maxCopies: 4,\n          allowedSets: null,\n        },\n      };\n\n      (db.insert as jest.Mock).mockReturnValue({\n        values: jest.fn().mockReturnValue({\n          returning: jest.fn().mockResolvedValue([mockCreatedGame]),\n        }),\n      });\n\n      const result = await gameService.createGame(mockUserId, gameData);\n\n      expect(result.version).toBe(\"1.0.0\");\n      expect(result.playerCount).toEqual({ min: 2, max: 4 });\n    });\n  });\n\n  describe(\"getGameById\", () => {\n    it(\"should return a game by id\", async () => {\n      const mockGame = {\n        id: mockGameId,\n        name: \"test-game\",\n        displayName: \"Test Game\",\n        creatorId: mockUserId,\n      };\n\n      (db.select as jest.Mock).mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([mockGame]),\n          }),\n        }),\n      });\n\n      const result = await gameService.getGameById(mockGameId);\n\n      expect(result).toEqual(mockGame);\n      expect(db.select).toHaveBeenCalled();\n    });\n\n    it(\"should return null if game not found\", async () => {\n      (db.select as jest.Mock).mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([]),\n          }),\n        }),\n      });\n\n      const result = await gameService.getGameById(\"non-existent\");\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe(\"updateGame\", () => {\n    it(\"should update game when user is creator\", async () => {\n      const mockGame = {\n        id: mockGameId,\n        name: \"test-game\",\n        creatorId: mockUserId,\n      };\n\n      const updates = {\n        displayName: \"Updated Game\",\n        description: \"Updated description\",\n      };\n\n      (db.select as jest.Mock).mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([mockGame]),\n          }),\n        }),\n      });\n\n      (db.update as jest.Mock).mockReturnValue({\n        set: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            returning: jest\n              .fn()\n              .mockResolvedValue([{ ...mockGame, ...updates }]),\n          }),\n        }),\n      });\n\n      const result = await gameService.updateGame(\n        mockGameId,\n        mockUserId,\n        updates,\n      );\n\n      expect(result.displayName).toBe(\"Updated Game\");\n      expect(db.update).toHaveBeenCalledWith(games);\n    });\n\n    it(\"should throw error when user is not creator\", async () => {\n      const mockGame = {\n        id: mockGameId,\n        name: \"test-game\",\n        creatorId: \"different-user\",\n      };\n\n      (db.select as jest.Mock).mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([mockGame]),\n          }),\n        }),\n      });\n\n      await expect(\n        gameService.updateGame(mockGameId, mockUserId, { displayName: \"Hack\" }),\n      ).rejects.toThrow(\"Not authorized to update this game\");\n    });\n\n    it(\"should throw error when game not found\", async () => {\n      (db.select as jest.Mock).mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([]),\n          }),\n        }),\n      });\n\n      await expect(\n        gameService.updateGame(\"non-existent\", mockUserId, {}),\n      ).rejects.toThrow(\"Game not found\");\n    });\n  });\n\n  describe(\"deleteGame\", () => {\n    it(\"should delete game when user is creator\", async () => {\n      const mockGame = {\n        id: mockGameId,\n        creatorId: mockUserId,\n      };\n\n      (db.select as jest.Mock).mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([mockGame]),\n          }),\n        }),\n      });\n\n      (db.delete as jest.Mock).mockReturnValue({\n        where: jest.fn().mockResolvedValue(undefined),\n      });\n\n      const result = await gameService.deleteGame(mockGameId, mockUserId);\n\n      expect(result).toBe(true);\n      expect(db.delete).toHaveBeenCalledWith(games);\n    });\n\n    it(\"should throw error when user is not creator\", async () => {\n      const mockGame = {\n        id: mockGameId,\n        creatorId: \"different-user\",\n      };\n\n      (db.select as jest.Mock).mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([mockGame]),\n          }),\n        }),\n      });\n\n      await expect(\n        gameService.deleteGame(mockGameId, mockUserId),\n      ).rejects.toThrow(\"Not authorized to delete this game\");\n    });\n  });\n\n  describe(\"publishGame\", () => {\n    it(\"should publish game when user is creator\", async () => {\n      const mockGame = {\n        id: mockGameId,\n        creatorId: mockUserId,\n        isPublished: false,\n      };\n\n      (db.select as jest.Mock).mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([mockGame]),\n          }),\n        }),\n      });\n\n      (db.update as jest.Mock).mockReturnValue({\n        set: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            returning: jest\n              .fn()\n              .mockResolvedValue([{ ...mockGame, isPublished: true }]),\n          }),\n        }),\n      });\n\n      const result = await gameService.publishGame(mockGameId, mockUserId);\n\n      expect(result.isPublished).toBe(true);\n    });\n  });\n\n  describe(\"getAllGames\", () => {\n    it(\"should return all games without filters\", async () => {\n      const mockGames = [\n        { id: \"game-1\", name: \"game-1\" },\n        { id: \"game-2\", name: \"game-2\" },\n      ];\n\n      (db.select as jest.Mock).mockReturnValue({\n        from: jest.fn().mockResolvedValue(mockGames),\n      });\n\n      const result = await gameService.getAllGames();\n\n      expect(result).toHaveLength(2);\n      expect(result).toEqual(mockGames);\n    });\n\n    it(\"should filter by published status\", async () => {\n      const mockGames = [{ id: \"game-1\", isPublished: true }];\n\n      (db.select as jest.Mock).mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockResolvedValue(mockGames),\n        }),\n      });\n\n      const result = await gameService.getAllGames({ isPublished: true });\n\n      expect(result).toHaveLength(1);\n      expect(result[0].isPublished).toBe(true);\n    });\n  });\n\n  describe(\"getGameStats\", () => {\n    it(\"should return game statistics\", async () => {\n      const mockGame = {\n        id: mockGameId,\n        totalCards: 150,\n        totalPlayers: 42,\n        totalGamesPlayed: 128,\n      };\n\n      (db.select as jest.Mock).mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([mockGame]),\n          }),\n        }),\n      });\n\n      const result = await gameService.getGameStats(mockGameId);\n\n      expect(result.totalCards).toBe(150);\n      expect(result.totalPlayers).toBe(42);\n      expect(result.totalGamesPlayed).toBe(128);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/services/pokemon-yugioh-adapters.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/setup.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1957,1960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1957,1960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1965,1968],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1965,1968],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2006,2009],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2006,2009],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2014,2017],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2014,2017],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2049,2052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2049,2052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Jest Test Setup\n *\n * Global test setup and configuration for the test suite.\n */\n\nimport { beforeAll, afterAll, jest } from \"@jest/globals\";\nimport { config } from \"dotenv\";\nimport { resolve } from \"path\";\n\n// Load test environment variables\nconfig({ path: resolve(process.cwd(), \".env.test\") });\n\n// Set test environment\nprocess.env.NODE_ENV = \"test\";\n\n// Mock console methods to reduce noise in tests\nconst originalConsole = { ...console };\n\nbeforeAll(() => {\n  // Suppress console output during tests unless explicitly enabled\n  if (!process.env.VERBOSE_TESTS) {\n    console.log = jest.fn();\n    console.info = jest.fn();\n    console.warn = jest.fn();\n    console.error = jest.fn();\n  }\n});\n\nafterAll(() => {\n  // Restore console methods\n  Object.assign(console, originalConsole);\n});\n\n// Global test utilities\nglobal.testUtils = {\n  // Mock user data factory\n  createMockUser: (overrides = {}) => ({\n    id: \"test-user-id\",\n    name: \"Test User\",\n    email: \"test@example.com\",\n    status: \"active\",\n    role: \"user\",\n    isEmailVerified: true,\n    mfaEnabled: false,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    ...overrides,\n  }),\n\n  // Mock request object\n  createMockRequest: (overrides = {}) => ({\n    body: {},\n    params: {},\n    query: {},\n    headers: {},\n    user: null,\n    ip: \"127.0.0.1\",\n    method: \"GET\",\n    url: \"/test\",\n    ...overrides,\n  }),\n\n  // Mock response object\n  createMockResponse: () => {\n    const res = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn().mockReturnThis(),\n      send: jest.fn().mockReturnThis(),\n      setHeader: jest.fn().mockReturnThis(),\n      getHeader: jest.fn(),\n      end: jest.fn().mockReturnThis(),\n    };\n    return res;\n  },\n\n  // Sleep utility for async tests\n  sleep: (ms: number) => new Promise((resolve) => setTimeout(resolve, ms)),\n};\n\n// Type declarations for global test utilities\ndeclare global {\n  var testUtils: {\n    createMockUser: (overrides?: any) => any;\n    createMockRequest: (overrides?: any) => any;\n    createMockResponse: () => any;\n    sleep: (ms: number) => Promise<void>;\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/simple.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/typescript/strict-mode-compliance.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/utils/database-pagination.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/utils/database.utils.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'beforeEach' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'buildOrderBy' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sql' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":6,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":9,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[555,558],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[555,558],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Database Utils Tests\n *\n * Unit tests for database utility functions following testing best practices.\n */\n\nimport { describe, test, expect, beforeEach } from \"@jest/globals\";\nimport {\n  buildWhereConditions,\n  buildSearchConditions,\n  buildOrderBy,\n  calculatePagination,\n  buildPaginationMeta,\n  sanitizeDatabaseInput,\n  isValidUUID,\n  isValidEmail,\n  validators,\n  type FilterCondition,\n} from \"../../utils/database.utils\";\nimport { sql } from \"drizzle-orm\";\n\n// Mock database column for testing\nconst mockColumn = {\n  name: \"test_column\",\n} as any;\n\nconst mockColumns = {\n  name: mockColumn,\n  email: mockColumn,\n  age: mockColumn,\n  status: mockColumn,\n};\n\ndescribe(\"Database Utils\", () => {\n  describe(\"buildWhereConditions\", () => {\n    test(\"should build equality condition\", () => {\n      const filters: FilterCondition[] = [\n        { field: \"name\", operator: \"eq\", value: \"John\" },\n      ];\n\n      const conditions = buildWhereConditions(filters, mockColumns);\n      expect(conditions).toHaveLength(1);\n    });\n\n    test(\"should build multiple conditions\", () => {\n      const filters: FilterCondition[] = [\n        { field: \"name\", operator: \"eq\", value: \"John\" },\n        { field: \"age\", operator: \"gte\", value: 18 },\n      ];\n\n      const conditions = buildWhereConditions(filters, mockColumns);\n      expect(conditions).toHaveLength(2);\n    });\n\n    test(\"should skip invalid fields\", () => {\n      const filters: FilterCondition[] = [\n        { field: \"invalid_field\", operator: \"eq\", value: \"test\" },\n        { field: \"name\", operator: \"eq\", value: \"John\" },\n      ];\n\n      const conditions = buildWhereConditions(filters, mockColumns);\n      expect(conditions).toHaveLength(1);\n    });\n\n    test(\"should handle in operator with values array\", () => {\n      const filters: FilterCondition[] = [\n        { field: \"status\", operator: \"in\", values: [\"active\", \"pending\"] },\n      ];\n\n      const conditions = buildWhereConditions(filters, mockColumns);\n      expect(conditions).toHaveLength(1);\n    });\n\n    test(\"should handle between operator\", () => {\n      const filters: FilterCondition[] = [\n        { field: \"age\", operator: \"between\", values: [18, 65] },\n      ];\n\n      const conditions = buildWhereConditions(filters, mockColumns);\n      expect(conditions).toHaveLength(1);\n    });\n  });\n\n  describe(\"buildSearchConditions\", () => {\n    test(\"should build search conditions for multiple fields\", () => {\n      const searchFields = [\"name\", \"email\"];\n      const searchTerm = \"john\";\n\n      const condition = buildSearchConditions(\n        searchFields,\n        searchTerm,\n        mockColumns,\n      );\n      expect(condition).toBeTruthy();\n    });\n\n    test(\"should return null for empty search term\", () => {\n      const searchFields = [\"name\", \"email\"];\n      const searchTerm = \"\";\n\n      const condition = buildSearchConditions(\n        searchFields,\n        searchTerm,\n        mockColumns,\n      );\n      expect(condition).toBeNull();\n    });\n\n    test(\"should handle trimmed search term\", () => {\n      const searchFields = [\"name\"];\n      const searchTerm = \"  john  \";\n\n      const condition = buildSearchConditions(\n        searchFields,\n        searchTerm,\n        mockColumns,\n      );\n      expect(condition).toBeTruthy();\n    });\n  });\n\n  describe(\"calculatePagination\", () => {\n    test(\"should calculate correct pagination\", () => {\n      const result = calculatePagination(2, 10);\n\n      expect(result).toEqual({\n        page: 2,\n        limit: 10,\n        offset: 10,\n      });\n    });\n\n    test(\"should handle invalid page numbers\", () => {\n      const result = calculatePagination(-1, 10);\n\n      expect(result.page).toBe(1);\n      expect(result.offset).toBe(0);\n    });\n\n    test(\"should enforce maximum limit\", () => {\n      const result = calculatePagination(1, 200);\n\n      expect(result.limit).toBe(100);\n    });\n\n    test(\"should enforce minimum limit\", () => {\n      const result = calculatePagination(1, -5);\n\n      expect(result.limit).toBe(1);\n    });\n  });\n\n  describe(\"buildPaginationMeta\", () => {\n    test(\"should build correct pagination metadata\", () => {\n      const meta = buildPaginationMeta(100, 2, 10);\n\n      expect(meta).toEqual({\n        total: 100,\n        page: 2,\n        limit: 10,\n        totalPages: 10,\n        hasNext: true,\n        hasPrevious: true,\n        startIndex: 11,\n        endIndex: 20,\n      });\n    });\n\n    test(\"should handle first page\", () => {\n      const meta = buildPaginationMeta(50, 1, 10);\n\n      expect(meta.hasPrevious).toBe(false);\n      expect(meta.hasNext).toBe(true);\n      expect(meta.startIndex).toBe(1);\n    });\n\n    test(\"should handle last page\", () => {\n      const meta = buildPaginationMeta(25, 3, 10);\n\n      expect(meta.hasPrevious).toBe(true);\n      expect(meta.hasNext).toBe(false);\n      expect(meta.endIndex).toBe(25);\n    });\n  });\n\n  describe(\"sanitizeDatabaseInput\", () => {\n    test(\"should sanitize string input\", () => {\n      const input = '<script>alert(\"xss\")</script>hello';\n      const result = sanitizeDatabaseInput(input);\n\n      // Quotes and angle brackets are removed for security\n      expect(result).toBe(\"scriptalert(xss)/scripthello\");\n    });\n\n    test(\"should sanitize nested objects\", () => {\n      const input = {\n        name: \"<b>John</b>\",\n        data: {\n          description: \"Test<script>\",\n          tags: [\"<tag1>\", \"tag2\"],\n        },\n      };\n\n      const result = sanitizeDatabaseInput(input);\n\n      expect(result.name).toBe(\"bJohn/b\");\n      expect(result.data.description).toBe(\"Testscript\");\n      expect(result.data.tags[0]).toBe(\"tag1\");\n    });\n\n    test(\"should handle arrays\", () => {\n      const input = [\"<test1>\", \"test2\", { name: \"<test3>\" }];\n      const result = sanitizeDatabaseInput(input);\n\n      expect(result[0]).toBe(\"test1\");\n      expect(result[1]).toBe(\"test2\");\n      expect(result[2].name).toBe(\"test3\");\n    });\n\n    test(\"should handle null and undefined\", () => {\n      expect(sanitizeDatabaseInput(null)).toBeNull();\n      expect(sanitizeDatabaseInput(undefined)).toBeUndefined();\n    });\n  });\n\n  describe(\"isValidUUID\", () => {\n    test(\"should validate correct UUIDs\", () => {\n      const validUUIDs = [\n        \"123e4567-e89b-12d3-a456-426614174000\",\n        \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n        \"6ba7b810-9dad-11d1-80b4-00c04fd430c8\",\n      ];\n\n      validUUIDs.forEach((uuid) => {\n        expect(isValidUUID(uuid)).toBe(true);\n      });\n    });\n\n    test(\"should reject invalid UUIDs\", () => {\n      const invalidUUIDs = [\n        \"not-a-uuid\",\n        \"123e4567-e89b-12d3-a456-42661417400\", // too short\n        \"123e4567-e89b-12d3-a456-4266141740000\", // too long\n        \"123e4567-e89b-92d3-a456-426614174000\", // invalid version\n        \"123e4567-e89b-12d3-c456-426614174000\", // invalid variant\n      ];\n\n      invalidUUIDs.forEach((uuid) => {\n        expect(isValidUUID(uuid)).toBe(false);\n      });\n    });\n  });\n\n  describe(\"isValidEmail\", () => {\n    test(\"should validate correct emails\", () => {\n      const validEmails = [\n        \"test@example.com\",\n        \"user.name@domain.co.uk\",\n        \"user+tag@example.org\",\n      ];\n\n      validEmails.forEach((email) => {\n        expect(isValidEmail(email)).toBe(true);\n      });\n    });\n\n    test(\"should reject invalid emails\", () => {\n      const invalidEmails = [\n        \"not-an-email\",\n        \"@example.com\",\n        \"user@\",\n        \"user@domain\",\n        \"user name@example.com\",\n      ];\n\n      invalidEmails.forEach((email) => {\n        expect(isValidEmail(email)).toBe(false);\n      });\n    });\n  });\n\n  describe(\"validators\", () => {\n    describe(\"required\", () => {\n      test(\"should pass for valid values\", () => {\n        expect(() => validators.required(\"test\", \"field\")).not.toThrow();\n        expect(() => validators.required(0, \"field\")).not.toThrow();\n        expect(() => validators.required(false, \"field\")).not.toThrow();\n      });\n\n      test(\"should throw for invalid values\", () => {\n        expect(() => validators.required(null, \"field\")).toThrow(\n          \"field is required\",\n        );\n        expect(() => validators.required(undefined, \"field\")).toThrow(\n          \"field is required\",\n        );\n        expect(() => validators.required(\"\", \"field\")).toThrow(\n          \"field is required\",\n        );\n      });\n    });\n\n    describe(\"maxLength\", () => {\n      test(\"should pass for valid lengths\", () => {\n        expect(() => validators.maxLength(\"test\", 10, \"field\")).not.toThrow();\n        expect(() => validators.maxLength(\"test\", 4, \"field\")).not.toThrow();\n      });\n\n      test(\"should throw for excessive length\", () => {\n        expect(() => validators.maxLength(\"toolong\", 5, \"field\")).toThrow(\n          \"field cannot exceed 5 characters\",\n        );\n      });\n    });\n\n    describe(\"email\", () => {\n      test(\"should pass for valid emails\", () => {\n        expect(() =>\n          validators.email(\"test@example.com\", \"Email\"),\n        ).not.toThrow();\n      });\n\n      test(\"should throw for invalid emails\", () => {\n        expect(() => validators.email(\"invalid-email\", \"Email\")).toThrow(\n          \"Email must be a valid email address\",\n        );\n      });\n    });\n\n    describe(\"uuid\", () => {\n      test(\"should pass for valid UUIDs\", () => {\n        expect(() =>\n          validators.uuid(\"123e4567-e89b-12d3-a456-426614174000\", \"ID\"),\n        ).not.toThrow();\n      });\n\n      test(\"should throw for invalid UUIDs\", () => {\n        expect(() => validators.uuid(\"not-a-uuid\", \"ID\")).toThrow(\n          \"ID must be a valid UUID\",\n        );\n      });\n    });\n\n    describe(\"positive\", () => {\n      test(\"should pass for positive numbers\", () => {\n        expect(() => validators.positive(1, \"field\")).not.toThrow();\n        expect(() => validators.positive(0.1, \"field\")).not.toThrow();\n      });\n\n      test(\"should throw for non-positive numbers\", () => {\n        expect(() => validators.positive(0, \"field\")).toThrow(\n          \"field must be a positive number\",\n        );\n        expect(() => validators.positive(-1, \"field\")).toThrow(\n          \"field must be a positive number\",\n        );\n      });\n    });\n\n    describe(\"inRange\", () => {\n      test(\"should pass for values in range\", () => {\n        expect(() => validators.inRange(5, 1, 10, \"field\")).not.toThrow();\n        expect(() => validators.inRange(1, 1, 10, \"field\")).not.toThrow();\n        expect(() => validators.inRange(10, 1, 10, \"field\")).not.toThrow();\n      });\n\n      test(\"should throw for values out of range\", () => {\n        expect(() => validators.inRange(0, 1, 10, \"field\")).toThrow(\n          \"field must be between 1 and 10\",\n        );\n        expect(() => validators.inRange(11, 1, 10, \"field\")).toThrow(\n          \"field must be between 1 and 10\",\n        );\n      });\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/ux/accessibility.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/ux/form-validation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/ux/loading-error-states.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/ux/mobile-responsiveness.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/ux/routing.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/tests/ux/user-feedback-cards.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/utils/database.utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":612,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":612,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":640,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":640,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15824,15827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15824,15827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'relatedData' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":705,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":705,"endColumn":22}],"suppressedMessages":[{"ruleId":"no-control-regex","severity":2,"message":"Unexpected control character(s) in regular expression: \\x00, \\x08, \\x0b, \\x0c, \\x0e, \\x1f.","line":302,"column":18,"nodeType":"Literal","messageId":"unexpected","endLine":302,"endColumn":53,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Database Utilities Module\n *\n * This module provides utility functions for database operations,\n * following Copilot best practices for database interaction optimization.\n */\n\nimport {\n  SQL,\n  sql,\n  eq,\n  and,\n  or,\n  inArray,\n  isNull,\n  isNotNull,\n  gte,\n  lte,\n  gt,\n  lt,\n  like,\n} from \"drizzle-orm\";\nimport type { SQLiteColumn } from \"drizzle-orm/sqlite-core\";\nimport { logger } from \"../logger\";\nimport { DatabaseError } from \"../middleware/error-handling.middleware\";\n\n// Database operation types\nexport type DatabaseOperator =\n  | \"eq\"\n  | \"ne\"\n  | \"gt\"\n  | \"gte\"\n  | \"lt\"\n  | \"lte\"\n  | \"like\"\n  | \"ilike\"\n  | \"in\"\n  | \"notIn\"\n  | \"isNull\"\n  | \"isNotNull\"\n  | \"between\";\n\nexport interface FilterCondition {\n  field: string;\n  operator: DatabaseOperator;\n  value: unknown;\n  values?: unknown[]; // For 'in', 'notIn', 'between' operators\n}\n\nexport interface QueryBuilder {\n  filters?: FilterCondition[];\n  search?: {\n    fields: string[];\n    term: string;\n  };\n  sort?: {\n    field: string;\n    direction: \"asc\" | \"desc\";\n  }[];\n  pagination?: {\n    page: number;\n    limit: number;\n  };\n}\n\n/**\n * Build WHERE conditions from filter array\n */\nexport function buildWhereConditions(\n  filters: FilterCondition[],\n  tableColumns: Record<string, SQLiteColumn>,\n): SQL[] {\n  const conditions: SQL[] = [];\n\n  for (const filter of filters) {\n    const column = tableColumns[filter.field];\n    if (!column) {\n      logger.warn(\"Invalid filter field\", {\n        field: filter.field,\n        availableFields: Object.keys(tableColumns),\n      });\n      continue;\n    }\n\n    try {\n      const condition = buildSingleCondition(column, filter);\n      if (condition) {\n        conditions.push(condition);\n      }\n    } catch (error) {\n      logger.error(\"Error building filter condition\", error, { filter });\n      // Skip invalid conditions rather than failing the entire query\n    }\n  }\n\n  return conditions;\n}\n\n/**\n * Build a single WHERE condition\n */\nfunction buildSingleCondition(\n  column: SQLiteColumn,\n  filter: FilterCondition,\n): SQL | null {\n  const { operator, value, values } = filter;\n\n  switch (operator) {\n    case \"eq\":\n      return eq(column, value);\n\n    case \"ne\":\n      return sql`${column} != ${value}`;\n\n    case \"gt\":\n      return gt(column, value);\n\n    case \"gte\":\n      return gte(column, value);\n\n    case \"lt\":\n      return lt(column, value);\n\n    case \"lte\":\n      return lte(column, value);\n\n    case \"like\":\n      return like(column, `%${value}%`);\n\n    case \"ilike\":\n      // SQLite's LIKE is case-insensitive by default\n      return like(column, `%${value}%`);\n\n    case \"in\":\n      if (!values || values.length === 0) return null;\n      return inArray(column, values);\n\n    case \"notIn\":\n      if (!values || values.length === 0) return null;\n      return sql`${column} NOT IN ${values}`;\n\n    case \"isNull\":\n      return isNull(column);\n\n    case \"isNotNull\":\n      return isNotNull(column);\n\n    case \"between\": {\n      if (!values || values.length !== 2) return null;\n      const betweenCondition = and(\n        gte(column, values[0]),\n        lte(column, values[1]),\n      );\n      return betweenCondition ?? null;\n    }\n\n    default:\n      logger.warn(\"Unknown filter operator\", { operator });\n      return null;\n  }\n}\n\n/**\n * Build search conditions for full-text search\n */\nexport function buildSearchConditions(\n  searchFields: string[],\n  searchTerm: string,\n  tableColumns: Record<string, SQLiteColumn>,\n): SQL | null {\n  if (!searchTerm.trim()) return null;\n\n  const searchConditions: SQL[] = [];\n  const term = searchTerm.trim();\n\n  for (const fieldName of searchFields) {\n    const column = tableColumns[fieldName];\n    if (column) {\n      // SQLite's LIKE is case-insensitive by default\n      searchConditions.push(like(column, `%${term}%`));\n    }\n  }\n\n  const orCondition =\n    searchConditions.length > 0 ? or(...searchConditions) : null;\n  return orCondition ?? null;\n}\n\n/**\n * Build ORDER BY clauses\n */\nexport function buildOrderBy(\n  sortOptions: { field: string; direction: \"asc\" | \"desc\" }[],\n  tableColumns: Record<string, SQLiteColumn>,\n): SQL[] {\n  const orderClauses: SQL[] = [];\n\n  for (const sort of sortOptions) {\n    const column = tableColumns[sort.field];\n    if (column) {\n      if (sort.direction === \"desc\") {\n        orderClauses.push(sql`${column} DESC`);\n      } else {\n        orderClauses.push(sql`${column} ASC`);\n      }\n    }\n  }\n\n  return orderClauses;\n}\n\n/**\n * Calculate pagination offset\n */\nexport function calculatePagination(page: number, limit: number) {\n  const safePage = Math.max(1, page);\n  const safeLimit = Math.min(Math.max(1, limit), 100); // Max 100 items per page\n  const offset = (safePage - 1) * safeLimit;\n\n  return {\n    page: safePage,\n    limit: safeLimit,\n    offset,\n  };\n}\n\n/**\n * Build pagination metadata\n */\nexport function buildPaginationMeta(\n  total: number,\n  page: number,\n  limit: number,\n) {\n  const totalPages = Math.ceil(total / limit);\n\n  return {\n    total,\n    page,\n    limit,\n    totalPages,\n    hasNext: page < totalPages,\n    hasPrevious: page > 1,\n    startIndex: (page - 1) * limit + 1,\n    endIndex: Math.min(page * limit, total),\n  };\n}\n\n/**\n * Validate and sanitize database input with enhanced SQL injection protection\n */\nexport function sanitizeDatabaseInput(input: unknown): unknown {\n  if (typeof input === \"string\") {\n    // Enhanced SQL injection patterns\n    const suspiciousPatterns = [\n      // SQL keywords\n      /(\\b(union|select|insert|update|delete|drop|alter|create|exec|execute|sp_|xp_)\\b)/gi,\n      // SQL comments and special chars\n      /(--|\\/\\*|\\*\\/|;|'|\"|`)/g,\n      // Boolean injections\n      /(\\bor\\b|\\band\\b).*[=<>]/gi,\n      /(\\bwhere\\b|\\bhaving\\b).*[=<>]/gi,\n      // Additional injection patterns\n      /(\\binto\\b|\\bfrom\\b|\\bjoin\\b|\\bunion\\b).*(\\bselect\\b|\\binsert\\b|\\bupdate\\b|\\bdelete\\b)/gi,\n      // Hex injection attempts\n      /0x[0-9a-f]/gi,\n      // Database functions\n      /(\\bcast\\b|\\bconvert\\b|\\bchar\\b|\\bchr\\b|\\bascii\\b|\\bsubstring\\b|\\bmid\\b|\\bleft\\b|\\bright\\b)/gi,\n      // Information schema queries\n      /information_schema/gi,\n      // System tables\n      /(\\bsys\\b|\\bmysql\\b|\\bpostgres\\b|\\bpg_\\b)/gi,\n    ];\n\n    let isSuspicious = false;\n    let detectedPatterns: string[] = [];\n\n    // Check for suspicious patterns and collect them\n    for (const pattern of suspiciousPatterns) {\n      if (pattern.test(input)) {\n        isSuspicious = true;\n        detectedPatterns.push(pattern.source);\n        // Sanitize aggressively\n        input = input.replace(pattern, \"\");\n      }\n    }\n\n    // Log if suspicious patterns were detected\n    if (isSuspicious) {\n      logger.warn(\"Potential SQL injection attempt detected and sanitized\", {\n        input: input.substring(0, 100), // Only log first 100 chars for security\n        detectedPatterns,\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    // Remove potential XSS and other malicious patterns\n    return (\n      input\n        .replace(/[<>]/g, \"\") // Remove HTML tags\n        // eslint-disable-next-line no-control-regex\n        .replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]/g, \"\") // Remove control characters\n        .replace(/javascript:/gi, \"\") // Remove javascript: protocol\n        .replace(/data:/gi, \"\") // Remove data: protocol\n        .replace(/vbscript:/gi, \"\") // Remove vbscript: protocol\n        .replace(/onload\\s*=/gi, \"\") // Remove onload handlers\n        .replace(/onerror\\s*=/gi, \"\") // Remove onerror handlers\n        .trim()\n    );\n  }\n\n  if (Array.isArray(input)) {\n    return input.map((item) => sanitizeDatabaseInput(item));\n  }\n\n  if (input && typeof input === \"object\") {\n    const sanitized: Record<string, unknown> = {};\n    for (const [key, value] of Object.entries(input)) {\n      sanitized[key] = sanitizeDatabaseInput(value);\n    }\n    return sanitized;\n  }\n\n  return input;\n}\n\n/**\n * Validate UUID format\n */\nexport function isValidUUID(uuid: string): boolean {\n  const uuidRegex =\n    /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n  return uuidRegex.test(uuid);\n}\n\n/**\n * Validate email format\n */\nexport function isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n/**\n * Database transaction wrapper with retry logic\n */\nexport async function executeWithRetry<T>(\n  operation: () => Promise<T>,\n  maxRetries: number = 3,\n  baseDelay: number = 1000,\n): Promise<T> {\n  let lastError: Error = new Error(\"Unknown database error\");\n\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      return await operation();\n    } catch (error: Error) {\n      lastError = error;\n\n      // Only retry on specific database errors\n      if (shouldRetryDatabaseOperation(error) && attempt < maxRetries) {\n        const delay = baseDelay * Math.pow(2, attempt - 1); // Exponential backoff\n        logger.warn(`Database operation failed, retrying in ${delay}ms`, {\n          attempt,\n          maxRetries,\n          error: error.message,\n        });\n\n        await new Promise((resolve) => setTimeout(resolve, delay));\n        continue;\n      }\n\n      break;\n    }\n  }\n\n  logger.error(\"Database operation failed after all retries\", lastError);\n  throw new DatabaseError(\n    `Operation failed after ${maxRetries} attempts: ${lastError.message}`,\n  );\n}\n\n/**\n * Determine if a database error should trigger a retry\n */\nfunction shouldRetryDatabaseOperation(error: Error): boolean {\n  // Retry on connection errors, timeouts, and temporary failures\n  const retryableCodes = [\n    \"ECONNRESET\",\n    \"ECONNREFUSED\",\n    \"ETIMEDOUT\",\n    \"ENOTFOUND\",\n    \"08000\", // PostgreSQL connection exception\n    \"08003\", // PostgreSQL connection does not exist\n    \"08006\", // PostgreSQL connection failure\n    \"57P01\", // PostgreSQL admin shutdown\n    \"57P02\", // PostgreSQL crash shutdown\n    \"57P03\", // PostgreSQL cannot connect now\n  ];\n\n  const errorCode = error.code || error.errno;\n  return retryableCodes.includes(errorCode);\n}\n\n/**\n * Create a database health check query\n */\nexport function createHealthCheckQuery(): SQL {\n  return sql`SELECT 1 as health_check, NOW() as timestamp`;\n}\n\n/**\n * Format database error for logging\n */\nexport function formatDatabaseError(error: Error): Record<string, unknown> {\n  return {\n    message: error.message,\n    code: error.code,\n    errno: error.errno,\n    sqlState: error.sqlState,\n    sqlMessage: error.sqlMessage,\n    sql: error.sql,\n    stack: error.stack,\n  };\n}\n\n/**\n * Common database constraints validation\n */\nexport const validators = {\n  required: (value: unknown, fieldName: string): void => {\n    if (value === null || value === undefined || value === \"\") {\n      throw new DatabaseError(`${fieldName} is required`);\n    }\n  },\n\n  maxLength: (value: string, maxLen: number, fieldName: string): void => {\n    if (value && value.length > maxLen) {\n      throw new DatabaseError(\n        `${fieldName} cannot exceed ${maxLen} characters`,\n      );\n    }\n  },\n\n  minLength: (value: string, minLen: number, fieldName: string): void => {\n    if (value && value.length < minLen) {\n      throw new DatabaseError(\n        `${fieldName} must be at least ${minLen} characters`,\n      );\n    }\n  },\n\n  email: (value: string, fieldName: string = \"Email\"): void => {\n    if (value && !isValidEmail(value)) {\n      throw new DatabaseError(`${fieldName} must be a valid email address`);\n    }\n  },\n\n  uuid: (value: string, fieldName: string): void => {\n    if (value && !isValidUUID(value)) {\n      throw new DatabaseError(`${fieldName} must be a valid UUID`);\n    }\n  },\n\n  positive: (value: number, fieldName: string): void => {\n    if (value !== null && value !== undefined && value <= 0) {\n      throw new DatabaseError(`${fieldName} must be a positive number`);\n    }\n  },\n\n  inRange: (\n    value: number,\n    min: number,\n    max: number,\n    fieldName: string,\n  ): void => {\n    if (value !== null && value !== undefined && (value < min || value > max)) {\n      throw new DatabaseError(`${fieldName} must be between ${min} and ${max}`);\n    }\n  },\n};\n\n/**\n * Advanced pagination options with cursor support\n */\nexport interface CursorPaginationOptions {\n  limit: number;\n  cursor?: string; // Base64 encoded cursor for efficient pagination\n  direction?: \"forward\" | \"backward\";\n  sortField?: string;\n  sortDirection?: \"asc\" | \"desc\";\n}\n\n/**\n * Parse cursor-based pagination parameters\n */\nexport function parsePaginationQuery(query: Record<string, unknown>): {\n  page?: number;\n  limit?: number;\n  cursor?: string;\n  sort?: { field: string; direction: \"asc\" | \"desc\" };\n} {\n  // Parse page with proper NaN handling\n  let page: number | undefined;\n  if (query.page) {\n    const parsed = parseInt(query.page);\n    page = isNaN(parsed) ? 1 : Math.max(1, parsed);\n  }\n\n  // Parse limit with proper NaN handling\n  let limit: number | undefined;\n  if (query.limit) {\n    const parsed = parseInt(query.limit);\n    limit = isNaN(parsed) ? 1 : Math.min(Math.max(1, parsed), 100);\n  }\n\n  const cursor = query.cursor || undefined;\n\n  let sort: { field: string; direction: \"asc\" | \"desc\" } | undefined;\n  if (\n    query.sort &&\n    typeof query.sort === \"string\" &&\n    query.sort.includes(\":\")\n  ) {\n    const [field, direction = \"asc\"] = query.sort.split(\":\");\n    if (field) {\n      sort = {\n        field,\n        direction: direction.toLowerCase() === \"desc\" ? \"desc\" : \"asc\",\n      };\n    }\n  }\n\n  return { page, limit, cursor, sort };\n}\n\n/**\n * Generate cursor for next page in cursor-based pagination\n */\nexport function generateCursor(lastItem: Record<string, unknown>, sortField: string): string {\n  if (!lastItem || !lastItem[sortField]) {\n    return \"\";\n  }\n\n  const cursorData = {\n    field: sortField,\n    value: lastItem[sortField],\n    id: lastItem.id, // Include ID for tie-breaking\n  };\n\n  return Buffer.from(JSON.stringify(cursorData)).toString(\"base64\");\n}\n\n/**\n * Parse cursor data\n */\nexport function parseCursor(\n  cursor: string,\n): { field: string; value: unknown; id: string } | null {\n  try {\n    const decoded = Buffer.from(cursor, \"base64\").toString(\"utf-8\");\n    return JSON.parse(decoded);\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Database utility functions collection\n */\nexport const dbUtils = {\n  buildWhereConditions,\n  buildSearchConditions,\n  buildOrderBy,\n  calculatePagination,\n  buildPaginationMeta,\n  parsePaginationQuery,\n  generateCursor,\n  parseCursor,\n  sanitizeDatabaseInput,\n  isValidUUID,\n  isValidEmail,\n  executeWithRetry,\n  createHealthCheckQuery,\n  formatDatabaseError,\n  validators,\n};\n\n/**\n * Enhanced cursor-based pagination utilities for better performance\n */\nexport class CursorPagination {\n  /**\n   * Build cursor condition for efficient pagination\n   */\n  static buildCursorCondition(\n    cursor: string | undefined,\n    sortField: SQLiteColumn,\n    sortDirection: \"asc\" | \"desc\" = \"desc\",\n  ): SQL | null {\n    if (!cursor) return null;\n\n    try {\n      const cursorData = this.parseCursor(cursor);\n      if (!cursorData) return null;\n\n      if (sortDirection === \"desc\") {\n        return lt(sortField, cursorData.value);\n      } else {\n        return gt(sortField, cursorData.value);\n      }\n    } catch (error) {\n      logger.warn(\"Invalid cursor provided for pagination\", { cursor });\n      return null;\n    }\n  }\n\n  /**\n   * Generate cursor from the last item in a result set\n   */\n  static generateCursor(lastItem: Record<string, unknown>, sortField: string): string {\n    if (!lastItem || !lastItem[sortField]) {\n      return \"\";\n    }\n\n    const cursorData = {\n      field: sortField,\n      value: lastItem[sortField],\n      id: lastItem.id,\n    };\n\n    return Buffer.from(JSON.stringify(cursorData)).toString(\"base64\");\n  }\n\n  /**\n   * Parse cursor data safely\n   */\n  static parseCursor(\n    cursor: string,\n  ): { field: string; value: any; id: string } | null {\n    try {\n      const decoded = Buffer.from(cursor, \"base64\").toString(\"utf-8\");\n      return JSON.parse(decoded);\n    } catch {\n      return null;\n    }\n  }\n}\n\n/**\n * Batch query optimization to prevent N+1 problems\n */\nexport class BatchQueryOptimizer {\n  /**\n   * Execute batch queries to prevent N+1 problems\n   */\n  static async batchQuery<T, K, R>(\n    items: T[],\n    keyExtractor: (item: T) => K,\n    queryFunction: (keys: K[]) => Promise<R[]>,\n    resultKeyExtractor: (result: R) => K,\n  ): Promise<Map<K, R[]>> {\n    if (items.length === 0) return new Map();\n\n    try {\n      const keys = items.map(keyExtractor);\n      const uniqueKeys = Array.from(new Set(keys));\n\n      const results = await queryFunction(uniqueKeys);\n      const resultMap = new Map<K, R[]>();\n\n      // Initialize empty arrays for all keys\n      uniqueKeys.forEach((key) => resultMap.set(key, []));\n\n      // Group results by key\n      results.forEach((result) => {\n        const key = resultKeyExtractor(result);\n        const existing = resultMap.get(key) || [];\n        existing.push(result);\n        resultMap.set(key, existing);\n      });\n\n      return resultMap;\n    } catch (error) {\n      logger.error(\"Batch query failed:\", error);\n      throw new DatabaseError(\"Failed to execute batch query\");\n    }\n  }\n\n  /**\n   * Load related data in batches to avoid N+1 queries\n   */\n  static async loadRelatedData<T, K, R>(\n    entities: T[],\n    relationKey: keyof T,\n    batchLoader: (ids: K[]) => Promise<R[]>,\n  ): Promise<Map<K, R[]>> {\n    const ids = entities\n      .map((entity) => entity[relationKey] as K)\n      .filter(Boolean);\n    const uniqueIds = Array.from(new Set(ids));\n\n    if (uniqueIds.length === 0) return new Map();\n\n    const relatedData = await batchLoader(uniqueIds);\n    const dataMap = new Map<K, R[]>();\n\n    uniqueIds.forEach((id) => dataMap.set(id, []));\n\n    // This would need to be customized based on how the related data is structured\n    // For now, return an empty map as this is a generic utility\n    return dataMap;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/utils/production-logger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1399,1402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1399,1402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2003,2006],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2003,2006],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2011,2014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2011,2014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2682,2685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2682,2685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2688,2691],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2688,2691],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2887,2890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2887,2890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3982,3985],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3982,3985],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4116,4119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4116,4119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4230,4233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4230,4233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":153,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4348,4351],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4348,4351],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from \"../logger\";\n\n/**\n * Production Logger Utility\n *\n * Handles logging configuration for production environments\n * and removes/disables debug logging to prevent information leakage\n */\n\nexport class ProductionLogger {\n  private isProduction: boolean;\n  private originalConsole: typeof console;\n\n  constructor() {\n    this.isProduction = process.env.NODE_ENV === \"production\";\n    this.originalConsole = { ...console };\n    this.setupProductionLogging();\n  }\n\n  /**\n   * Configure logging for production environment\n   */\n  private setupProductionLogging(): void {\n    if (!this.isProduction) {\n      return; // Keep all logging in development\n    }\n\n    // Override console methods in production to prevent information leakage\n    console.log = this.createProductionLogger(\"info\");\n    console.info = this.createProductionLogger(\"info\");\n    console.warn = this.createProductionLogger(\"warn\");\n    console.error = this.createProductionLogger(\"error\");\n    console.debug = this.createProductionLogger(\"debug\");\n    console.trace = this.createProductionLogger(\"debug\");\n\n    logger.info(\"Production logging configuration applied\", {\n      environment: process.env.NODE_ENV,\n      debugLoggingDisabled: true,\n    });\n  }\n\n  /**\n   * Create a production-safe logger function\n   */\n  private createProductionLogger(level: \"info\" | \"warn\" | \"error\" | \"debug\") {\n    return (...args: any[]) => {\n      // In production, only log errors and warnings through the structured logger\n      if (level === \"error\") {\n        logger.error(\"Console error in production\", {\n          args: this.sanitizeLogArgs(args),\n          stack: new Error().stack,\n        });\n      } else if (level === \"warn\") {\n        logger.warn(\"Console warning in production\", {\n          args: this.sanitizeLogArgs(args),\n        });\n      }\n      // Suppress info, debug, and trace logs in production\n    };\n  }\n\n  /**\n   * Sanitize log arguments to remove sensitive information\n   */\n  private sanitizeLogArgs(args: any[]): any[] {\n    return args.map((arg) => {\n      if (typeof arg === \"string\") {\n        // Remove potential sensitive patterns\n        return arg\n          .replace(/password[=:]\\s*[^\\s&]+/gi, \"password=***\")\n          .replace(/token[=:]\\s*[^\\s&]+/gi, \"token=***\")\n          .replace(/key[=:]\\s*[^\\s&]+/gi, \"key=***\")\n          .replace(/secret[=:]\\s*[^\\s&]+/gi, \"secret=***\")\n          .replace(/auth[=:]\\s*[^\\s&]+/gi, \"auth=***\");\n      } else if (typeof arg === \"object\" && arg !== null) {\n        return this.sanitizeObject(arg);\n      }\n      return arg;\n    });\n  }\n\n  /**\n   * Recursively sanitize objects to remove sensitive data\n   */\n  private sanitizeObject(obj: any): any {\n    if (Array.isArray(obj)) {\n      return obj.map((item) => this.sanitizeObject(item));\n    }\n\n    if (typeof obj !== \"object\" || obj === null) {\n      return obj;\n    }\n\n    const sanitized: any = {};\n    const sensitiveKeys = [\n      \"password\",\n      \"token\",\n      \"key\",\n      \"secret\",\n      \"auth\",\n      \"cookie\",\n      \"session\",\n    ];\n\n    for (const [key, value] of Object.entries(obj)) {\n      const keyLower = key.toLowerCase();\n\n      if (sensitiveKeys.some((sensitive) => keyLower.includes(sensitive))) {\n        sanitized[key] = \"***\";\n      } else if (typeof value === \"object\" && value !== null) {\n        sanitized[key] = this.sanitizeObject(value);\n      } else {\n        sanitized[key] = value;\n      }\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * Restore original console for testing or development use\n   */\n  restoreConsole(): void {\n    if (this.isProduction) {\n      Object.assign(console, this.originalConsole);\n      logger.info(\"Console logging restored (for testing)\");\n    }\n  }\n\n  /**\n   * Check if debug logging should be disabled\n   */\n  shouldDisableDebugLogging(): boolean {\n    return this.isProduction;\n  }\n\n  /**\n   * Create a safe logger function that respects production settings\n   */\n  createSafeLogger() {\n    return {\n      debug: (...args: any[]) => {\n        if (!this.isProduction) {\n          logger.debug(\"Debug log\", { args });\n        }\n      },\n      info: (...args: any[]) => {\n        logger.info(\"Info log\", { args: this.sanitizeLogArgs(args) });\n      },\n      warn: (...args: any[]) => {\n        logger.warn(\"Warning log\", { args: this.sanitizeLogArgs(args) });\n      },\n      error: (...args: any[]) => {\n        logger.error(\"Error log\", { args: this.sanitizeLogArgs(args) });\n      },\n    };\n  }\n\n  /**\n   * Replace all console.log calls in a string with structured logging\n   */\n  static replaceConsoleLogsInCode(code: string): string {\n    return code\n      .replace(/console\\.log\\s*\\(/g, \"logger.info(\")\n      .replace(/console\\.debug\\s*\\(/g, \"logger.debug(\")\n      .replace(/console\\.info\\s*\\(/g, \"logger.info(\")\n      .replace(/console\\.warn\\s*\\(/g, \"logger.warn(\")\n      .replace(/console\\.error\\s*\\(/g, \"logger.error(\");\n  }\n\n  /**\n   * Scan for console.log usage in the codebase\n   */\n  static findConsoleUsage(code: string): Array<{\n    line: number;\n    content: string;\n    type: \"log\" | \"debug\" | \"info\" | \"warn\" | \"error\";\n  }> {\n    const lines = code.split(\"\\n\");\n    const usage: Array<{\n      line: number;\n      content: string;\n      type: \"log\" | \"debug\" | \"info\" | \"warn\" | \"error\";\n    }> = [];\n\n    lines.forEach((line, index) => {\n      const consoleRegex = /console\\.(log|debug|info|warn|error)\\s*\\(/;\n      const match = line.match(consoleRegex);\n\n      if (match) {\n        usage.push({\n          line: index + 1,\n          content: line.trim(),\n          type: match[1] as \"log\" | \"debug\" | \"info\" | \"warn\" | \"error\",\n        });\n      }\n    });\n\n    return usage;\n  }\n}\n\n// Initialize production logger\nexport const productionLogger = new ProductionLogger();\n\n// Export safe logger instance\nexport const safeLogger = productionLogger.createSafeLogger();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/utils/security.utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/utils/stream-key-security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/utils/websocket-connection-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":184,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4637,4640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4637,4640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":196,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4977,4980],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4977,4980],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":354,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":354,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9158,9161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9158,9161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { WebSocket } from \"ws\";\nimport { logger } from \"../logger\";\n\nexport interface ExtendedWebSocket extends WebSocket {\n  userId?: string;\n  userName?: string;\n  userAvatar?: string;\n  sessionId?: string;\n  eventId?: string;\n  connectionId?: string;\n  lastActivity?: number;\n  authToken?: string;\n  authExpiry?: number;\n}\n\nexport interface ConnectionStats {\n  totalConnections: number;\n  activeConnections: number;\n  staleConnections: number;\n  connectionsByType: Record<string, number>;\n}\n\nexport class WebSocketConnectionManager {\n  private connections = new Map<string, ExtendedWebSocket>();\n  private gameRooms = new Map<string, Set<ExtendedWebSocket>>();\n  private collaborativeStreamRooms = new Map<string, Set<ExtendedWebSocket>>();\n  private staleConnectionTimeout: number;\n  private authExpiryTimeout: number;\n\n  constructor(\n    options: {\n      staleConnectionTimeout?: number; // ms until connection is considered stale\n      authExpiryTimeout?: number; // ms until auth token expires\n    } = {},\n  ) {\n    this.staleConnectionTimeout =\n      options.staleConnectionTimeout || 30 * 60 * 1000; // 30 minutes\n    this.authExpiryTimeout = options.authExpiryTimeout || 60 * 60 * 1000; // 1 hour\n\n    // Set up periodic cleanup\n    this.setupPeriodicCleanup();\n  }\n\n  /**\n   * Register a new WebSocket connection\n   */\n  registerConnection(\n    ws: ExtendedWebSocket,\n    userId: string,\n    authToken?: string,\n  ): string {\n    const connectionId = this.generateConnectionId();\n    ws.connectionId = connectionId;\n    ws.userId = userId;\n    ws.lastActivity = Date.now();\n\n    if (authToken) {\n      ws.authToken = authToken;\n      ws.authExpiry = Date.now() + this.authExpiryTimeout;\n    }\n\n    this.connections.set(connectionId, ws);\n\n    // Set up connection event handlers\n    this.setupConnectionHandlers(ws);\n\n    logger.info(\"WebSocket connection registered\", {\n      connectionId,\n      userId,\n      totalConnections: this.connections.size,\n    });\n\n    return connectionId;\n  }\n\n  /**\n   * Update last activity timestamp for a connection\n   */\n  updateActivity(connectionId: string): void {\n    const ws = this.connections.get(connectionId);\n    if (ws) {\n      ws.lastActivity = Date.now();\n    }\n  }\n\n  /**\n   * Check if authentication token has expired\n   */\n  isAuthExpired(connectionId: string): boolean {\n    const ws = this.connections.get(connectionId);\n    if (!ws || !ws.authExpiry) {\n      return false; // No auth expiry set\n    }\n\n    return Date.now() > ws.authExpiry;\n  }\n\n  /**\n   * Refresh authentication for a connection\n   */\n  refreshAuth(connectionId: string, newToken: string): boolean {\n    const ws = this.connections.get(connectionId);\n    if (!ws) {\n      return false;\n    }\n\n    ws.authToken = newToken;\n    ws.authExpiry = Date.now() + this.authExpiryTimeout;\n\n    logger.debug(\"WebSocket authentication refreshed\", { connectionId });\n    return true;\n  }\n\n  /**\n   * Add connection to a game room\n   */\n  joinGameRoom(connectionId: string, sessionId: string): boolean {\n    const ws = this.connections.get(connectionId);\n    if (!ws) {\n      return false;\n    }\n\n    if (!this.gameRooms.has(sessionId)) {\n      this.gameRooms.set(sessionId, new Set());\n    }\n\n    ws.sessionId = sessionId;\n    const room = this.gameRooms.get(sessionId);\n    if (room) {\n      room.add(ws);\n    }\n\n    logger.debug(\"Connection joined game room\", { connectionId, sessionId });\n    return true;\n  }\n\n  /**\n   * Add connection to a collaborative streaming room\n   */\n  joinCollaborativeRoom(connectionId: string, eventId: string): boolean {\n    const ws = this.connections.get(connectionId);\n    if (!ws) {\n      return false;\n    }\n\n    if (!this.collaborativeStreamRooms.has(eventId)) {\n      this.collaborativeStreamRooms.set(eventId, new Set());\n    }\n\n    ws.eventId = eventId;\n    const room = this.collaborativeStreamRooms.get(eventId);\n    if (room) {\n      room.add(ws);\n    }\n\n    logger.debug(\"Connection joined collaborative room\", {\n      connectionId,\n      eventId,\n    });\n    return true;\n  }\n\n  /**\n   * Get all connections in a game room\n   */\n  getGameRoomConnections(sessionId: string): ExtendedWebSocket[] {\n    const room = this.gameRooms.get(sessionId);\n    return room ? Array.from(room) : [];\n  }\n\n  /**\n   * Get all connections in a collaborative streaming room\n   */\n  getCollaborativeRoomConnections(eventId: string): ExtendedWebSocket[] {\n    const room = this.collaborativeStreamRooms.get(eventId);\n    return room ? Array.from(room) : [];\n  }\n\n  /**\n   * Broadcast message to all connections in a game room\n   */\n  broadcastToGameRoom(\n    sessionId: string,\n    message: any,\n    excludeConnectionId?: string,\n  ): void {\n    const connections = this.getGameRoomConnections(sessionId);\n    this.broadcastToConnections(connections, message, excludeConnectionId);\n  }\n\n  /**\n   * Broadcast message to all connections in a collaborative room\n   */\n  broadcastToCollaborativeRoom(\n    eventId: string,\n    message: any,\n    excludeConnectionId?: string,\n  ): void {\n    const connections = this.getCollaborativeRoomConnections(eventId);\n    this.broadcastToConnections(connections, message, excludeConnectionId);\n  }\n\n  /**\n   * Remove connection and clean up associated data\n   */\n  removeConnection(connectionId: string): void {\n    const ws = this.connections.get(connectionId);\n    if (!ws) {\n      return;\n    }\n\n    // Remove from rooms\n    if (ws.sessionId) {\n      const gameRoom = this.gameRooms.get(ws.sessionId);\n      if (gameRoom) {\n        gameRoom.delete(ws);\n        if (gameRoom.size === 0) {\n          this.gameRooms.delete(ws.sessionId);\n        }\n      }\n    }\n\n    if (ws.eventId) {\n      const collabRoom = this.collaborativeStreamRooms.get(ws.eventId);\n      if (collabRoom) {\n        collabRoom.delete(ws);\n        if (collabRoom.size === 0) {\n          this.collaborativeStreamRooms.delete(ws.eventId);\n        }\n      }\n    }\n\n    this.connections.delete(connectionId);\n\n    logger.debug(\"WebSocket connection removed\", {\n      connectionId,\n      userId: ws.userId,\n      remainingConnections: this.connections.size,\n    });\n  }\n\n  /**\n   * Get connection statistics\n   */\n  getStats(): ConnectionStats {\n    const now = Date.now();\n    let activeConnections = 0;\n    let staleConnections = 0;\n    const connectionsByType: Record<string, number> = {\n      game_room: 0,\n      collaborative_stream: 0,\n      unassigned: 0,\n    };\n\n    for (const ws of this.connections.values()) {\n      // Check if connection is active\n      if (\n        ws.lastActivity &&\n        now - ws.lastActivity < this.staleConnectionTimeout\n      ) {\n        activeConnections++;\n      } else {\n        staleConnections++;\n      }\n\n      // Categorize connection type\n      if (ws.sessionId) {\n        connectionsByType.game_room = (connectionsByType.game_room ?? 0) + 1;\n      } else if (ws.eventId) {\n        connectionsByType.collaborative_stream =\n          (connectionsByType.collaborative_stream ?? 0) + 1;\n      } else {\n        connectionsByType.unassigned = (connectionsByType.unassigned ?? 0) + 1;\n      }\n    }\n\n    return {\n      totalConnections: this.connections.size,\n      activeConnections,\n      staleConnections,\n      connectionsByType,\n    };\n  }\n\n  /**\n   * Clean up stale connections\n   */\n  cleanupStaleConnections(): number {\n    const now = Date.now();\n    const staleConnections: string[] = [];\n\n    for (const [connectionId, ws] of this.connections.entries()) {\n      const isStale =\n        ws.lastActivity && now - ws.lastActivity > this.staleConnectionTimeout;\n      const isAuthExpired = this.isAuthExpired(connectionId);\n\n      if (isStale || isAuthExpired || ws.readyState !== WebSocket.OPEN) {\n        staleConnections.push(connectionId);\n      }\n    }\n\n    // Close and remove stale connections\n    for (const connectionId of staleConnections) {\n      const ws = this.connections.get(connectionId);\n      if (ws) {\n        try {\n          if (ws.readyState === WebSocket.OPEN) {\n            ws.close(1000, \"Connection cleanup\");\n          }\n        } catch (error) {\n          logger.warn(\"Error closing stale WebSocket connection\", error);\n        }\n        this.removeConnection(connectionId);\n      }\n    }\n\n    if (staleConnections.length > 0) {\n      logger.info(\"Cleaned up stale WebSocket connections\", {\n        cleanedUp: staleConnections.length,\n        remainingConnections: this.connections.size,\n      });\n    }\n\n    return staleConnections.length;\n  }\n\n  private generateConnectionId(): string {\n    return `ws_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private setupConnectionHandlers(ws: ExtendedWebSocket): void {\n    ws.on(\"close\", () => {\n      if (ws.connectionId) {\n        this.removeConnection(ws.connectionId);\n      }\n    });\n\n    ws.on(\"error\", (error) => {\n      logger.error(\"WebSocket connection error\", error, {\n        connectionId: ws.connectionId,\n        userId: ws.userId,\n      });\n    });\n\n    ws.on(\"pong\", () => {\n      if (ws.connectionId) {\n        this.updateActivity(ws.connectionId);\n      }\n    });\n  }\n\n  private broadcastToConnections(\n    connections: ExtendedWebSocket[],\n    message: any,\n    excludeConnectionId?: string,\n  ): void {\n    const messageStr = JSON.stringify(message);\n\n    for (const ws of connections) {\n      if (ws.connectionId === excludeConnectionId) {\n        continue;\n      }\n\n      if (ws.readyState === WebSocket.OPEN) {\n        try {\n          ws.send(messageStr);\n          if (ws.connectionId) {\n            this.updateActivity(ws.connectionId);\n          }\n        } catch (error) {\n          logger.error(\"Failed to send WebSocket message\", error, {\n            connectionId: ws.connectionId,\n            userId: ws.userId,\n          });\n        }\n      }\n    }\n  }\n\n  private setupPeriodicCleanup(): void {\n    // Clean up stale connections every 5 minutes\n    const cleanupInterval = setInterval(\n      () => {\n        this.cleanupStaleConnections();\n      },\n      5 * 60 * 1000,\n    );\n\n    // Send ping to all connections every 30 seconds to detect stale connections\n    const pingInterval = setInterval(() => {\n      for (const ws of this.connections.values()) {\n        if (ws.readyState === WebSocket.OPEN) {\n          try {\n            ws.ping();\n          } catch (error) {\n            logger.warn(\"Failed to ping WebSocket connection\", error);\n          }\n        }\n      }\n    }, 30 * 1000);\n\n    // Store intervals for cleanup during shutdown\n    process.on(\"SIGTERM\", () => {\n      clearInterval(cleanupInterval);\n      clearInterval(pingInterval);\n    });\n\n    process.on(\"SIGINT\", () => {\n      clearInterval(cleanupInterval);\n      clearInterval(pingInterval);\n    });\n  }\n}\n\n// Export singleton instance\nexport const connectionManager = new WebSocketConnectionManager();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/utils/websocket-env-validation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":142,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":142,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":212,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":212,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":222,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":222,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from \"../logger\";\n\nexport interface WebSocketEnvironmentConfig {\n  authUrl: string;\n  port: number;\n  isProduction: boolean;\n  allowedOrigins: string[];\n  wsProtocol: \"ws\" | \"wss\";\n  baseUrl: string;\n}\n\nexport class WebSocketEnvironmentValidator {\n  private config: WebSocketEnvironmentConfig | null = null;\n\n  /**\n   * Validate and normalize WebSocket environment configuration\n   */\n  validateAndGetConfig(): WebSocketEnvironmentConfig {\n    if (this.config) {\n      return this.config;\n    }\n\n    const port = this.validatePort();\n    const authUrl = this.validateAuthUrl(port);\n    const isProduction = this.determineEnvironment();\n    const allowedOrigins = this.buildAllowedOrigins(authUrl, port);\n    const wsProtocol = this.determineWebSocketProtocol(isProduction);\n    const baseUrl = this.buildBaseUrl(wsProtocol, authUrl, port);\n\n    this.config = {\n      authUrl,\n      port,\n      isProduction,\n      allowedOrigins,\n      wsProtocol,\n      baseUrl,\n    };\n\n    logger.info(\"WebSocket environment configuration validated\", {\n      authUrl: this.config.authUrl,\n      port: this.config.port,\n      isProduction: this.config.isProduction,\n      allowedOrigins: this.config.allowedOrigins.length,\n      wsProtocol: this.config.wsProtocol,\n      baseUrl: this.config.baseUrl,\n    });\n\n    return this.config;\n  }\n\n  /**\n   * Get WebSocket URL for client connections\n   */\n  getWebSocketUrl(): string {\n    const config = this.validateAndGetConfig();\n    return `${config.wsProtocol}://${this.extractHostFromUrl(config.baseUrl)}/ws`;\n  }\n\n  /**\n   * Check if an origin is allowed\n   */\n  isOriginAllowed(origin: string): boolean {\n    const config = this.validateAndGetConfig();\n    return config.allowedOrigins.includes(origin);\n  }\n\n  /**\n   * Get authentication endpoint URL\n   */\n  getAuthSessionUrl(): string {\n    const config = this.validateAndGetConfig();\n    return `${config.authUrl}/api/auth/session`;\n  }\n\n  private validatePort(): number {\n    const portEnv = process.env.PORT;\n    const port = portEnv ? parseInt(portEnv, 10) : 5000;\n\n    if (isNaN(port) || port < 1 || port > 65535) {\n      logger.warn(\"Invalid PORT environment variable, using default 5000\", {\n        port: portEnv,\n      });\n      return 5000;\n    }\n\n    return port;\n  }\n\n  private validateAuthUrl(port: number): string {\n    let authUrl = process.env.AUTH_URL;\n\n    if (!authUrl || authUrl === \"undefined\" || authUrl.trim() === \"\") {\n      // Build default auth URL based on environment\n      if (this.determineEnvironment()) {\n        // Production: This should be set explicitly\n        logger.error(\"AUTH_URL is required in production environment\");\n        throw new Error(\n          \"AUTH_URL environment variable is required in production\",\n        );\n      } else {\n        // Development: Build localhost URL\n        authUrl = `http://localhost:${port}`;\n        logger.warn(\"AUTH_URL not set, using default for development\", {\n          authUrl,\n        });\n      }\n    }\n\n    // Validate URL format\n    try {\n      const url = new URL(authUrl);\n      return url.origin; // Normalize to origin only\n    } catch (error) {\n      logger.error(\"Invalid AUTH_URL format\", { authUrl, error });\n      throw new Error(`Invalid AUTH_URL format: ${authUrl}`);\n    }\n  }\n\n  private determineEnvironment(): boolean {\n    const nodeEnv = process.env.NODE_ENV;\n    const isProduction = nodeEnv === \"production\";\n\n    // Additional production indicators\n    const productionIndicators = [\n      process.env.AUTH_URL && !process.env.AUTH_URL.includes(\"localhost\"),\n      process.env.DATABASE_URL &&\n        !process.env.DATABASE_URL.includes(\"localhost\"),\n      process.env.VERCEL_ENV === \"production\",\n      process.env.RAILWAY_ENVIRONMENT === \"production\",\n    ];\n\n    return isProduction || productionIndicators.some(Boolean);\n  }\n\n  private buildAllowedOrigins(authUrl: string, port: number): string[] {\n    const origins = new Set<string>();\n\n    // Add AUTH_URL origin\n    try {\n      const authOrigin = new URL(authUrl).origin;\n      origins.add(authOrigin);\n    } catch (error) {\n      logger.warn(\"Could not parse AUTH_URL for allowed origins\", { authUrl });\n    }\n\n    // Add localhost origins for development\n    if (!this.determineEnvironment()) {\n      origins.add(`http://localhost:${port}`);\n      origins.add(`https://localhost:${port}`);\n      origins.add(\"https://127.0.0.1:\" + port);\n      origins.add(\"https://127.0.0.1:\" + port);\n    }\n\n    // Add any additional allowed origins from environment\n    const additionalOrigins = process.env.ALLOWED_ORIGINS;\n    if (additionalOrigins) {\n      additionalOrigins.split(\",\").forEach((origin) => {\n        const trimmed = origin.trim();\n        if (trimmed) {\n          origins.add(trimmed);\n        }\n      });\n    }\n\n    // Add Replit-specific origins if detected\n    if (process.env.REPL_ID || process.env.REPLIT_DB_URL) {\n      const replitHost = this.extractHostFromUrl(authUrl);\n      if (replitHost && replitHost.includes(\"replit.dev\")) {\n        origins.add(`https://${replitHost}`);\n        origins.add(`wss://${replitHost}`);\n      }\n    }\n\n    const allowedOrigins = Array.from(origins).filter(Boolean);\n\n    if (allowedOrigins.length === 0) {\n      logger.warn(\n        \"No allowed origins configured, WebSocket connections may fail\",\n      );\n    }\n\n    return allowedOrigins;\n  }\n\n  private determineWebSocketProtocol(isProduction: boolean): \"ws\" | \"wss\" {\n    if (isProduction) {\n      return \"wss\"; // Always use secure WebSocket in production\n    }\n\n    // In development, use ws:// for localhost, wss:// for everything else\n    const authUrl = process.env.AUTH_URL;\n    if (\n      authUrl &&\n      !authUrl.includes(\"localhost\") &&\n      !authUrl.includes(\"127.0.0.1\")\n    ) {\n      return \"wss\";\n    }\n\n    return \"ws\";\n  }\n\n  private buildBaseUrl(\n    wsProtocol: \"ws\" | \"wss\",\n    authUrl: string,\n    port: number,\n  ): string {\n    try {\n      const url = new URL(authUrl);\n      const protocol = wsProtocol === \"wss\" ? \"https:\" : \"http:\";\n      return `${protocol}//${url.host}`;\n    } catch (error) {\n      // Fallback for localhost\n      const protocol = wsProtocol === \"wss\" ? \"https:\" : \"http:\";\n      return `${protocol}//localhost:${port}`;\n    }\n  }\n\n  private extractHostFromUrl(url: string): string {\n    try {\n      return new URL(url).host;\n    } catch (error) {\n      logger.warn(\"Could not extract host from URL\", { url });\n      return \"localhost\";\n    }\n  }\n\n  /**\n   * Validate all required environment variables for WebSocket functionality\n   */\n  validateRequiredEnvironment(): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    try {\n      this.validateAndGetConfig();\n    } catch (error) {\n      errors.push(\n        `Configuration error: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n      );\n    }\n\n    // Check for required AUTH_SECRET\n    if (!process.env.AUTH_SECRET || process.env.AUTH_SECRET === \"undefined\") {\n      errors.push(\"AUTH_SECRET environment variable is required\");\n    }\n\n    // Check for required DATABASE_URL\n    if (!process.env.DATABASE_URL || process.env.DATABASE_URL === \"undefined\") {\n      errors.push(\"DATABASE_URL environment variable is required\");\n    }\n\n    // In production, more strict validation\n    if (this.determineEnvironment()) {\n      if (!process.env.AUTH_URL || process.env.AUTH_URL === \"undefined\") {\n        errors.push(\"AUTH_URL environment variable is required in production\");\n      }\n\n      if (\n        process.env.AUTH_SECRET ===\n        \"demo-secret-key-for-development-only-not-for-production\"\n      ) {\n        errors.push(\n          \"AUTH_SECRET must be changed from development default in production\",\n        );\n      }\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n    };\n  }\n}\n\n// Export singleton instance\nexport const envValidator = new WebSocketEnvironmentValidator();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/utils/websocket-message-validator.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":211,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5349,5352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5349,5352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":213,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5384,5387],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5384,5387],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":220,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":220,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5517,5520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5517,5520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":253,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6327,6330],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6327,6330],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":288,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":288,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7223,7226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7223,7226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":288,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":288,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7229,7232],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7229,7232],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":332,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":332,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8481,8484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8481,8484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from \"zod\";\nimport { websocketMessageSchema } from \"@shared/websocket-schemas\";\nimport { logger } from \"../logger\";\n\n// Outgoing WebSocket message schemas\nexport const outgoingMessageSchemas = {\n  // Error messages\n  error: z.object({\n    type: z.literal(\"error\"),\n    message: z.string(),\n    code: z.string().optional(),\n    details: z.any().optional(),\n  }),\n\n  // Game room messages\n  player_joined: z.object({\n    type: z.literal(\"player_joined\"),\n    player: z.object({\n      id: z.string(),\n      name: z.string(),\n      avatar: z.string().optional(),\n    }),\n    players: z.array(\n      z.object({\n        id: z.string(),\n        name: z.string(),\n        avatar: z.string().optional(),\n      }),\n    ),\n  }),\n\n  message: z.object({\n    type: z.literal(\"message\"),\n    message: z.object({\n      id: z.string(),\n      senderId: z.string(),\n      sender: z.object({\n        firstName: z.string(),\n        email: z.string(),\n        profileImageUrl: z.string().optional(),\n      }),\n      content: z.string(),\n      timestamp: z.string(),\n      type: z.enum([\"chat\", \"system\", \"notification\"]),\n    }),\n  }),\n\n  game_action: z.object({\n    type: z.literal(\"game_action\"),\n    action: z.string(),\n    player: z.string(),\n    result: z.any().optional(),\n    data: z.record(z.any()),\n  }),\n\n  // WebRTC messages\n  webrtc_offer: z.object({\n    type: z.literal(\"webrtc_offer\"),\n    fromPlayer: z.string(),\n    offer: z.any(),\n  }),\n\n  webrtc_answer: z.object({\n    type: z.literal(\"webrtc_answer\"),\n    fromPlayer: z.string(),\n    answer: z.any(),\n  }),\n\n  webrtc_ice_candidate: z.object({\n    type: z.literal(\"webrtc_ice_candidate\"),\n    fromPlayer: z.string(),\n    candidate: z.any(),\n  }),\n\n  camera_status: z.object({\n    type: z.literal(\"camera_status\"),\n    playerId: z.string(),\n    playerName: z.string(),\n    cameraOn: z.boolean(),\n  }),\n\n  mic_status: z.object({\n    type: z.literal(\"mic_status\"),\n    playerId: z.string(),\n    playerName: z.string(),\n    micOn: z.boolean(),\n  }),\n\n  // Collaborative streaming messages\n  collaborator_joined: z.object({\n    type: z.literal(\"collaborator_joined\"),\n    collaborator: z.object({\n      userId: z.string(),\n      userName: z.string(),\n      userAvatar: z.string().optional(),\n      role: z.enum([\"host\", \"co_host\", \"participant\"]),\n    }),\n    activeCollaborators: z.array(\n      z.object({\n        userId: z.string(),\n        userName: z.string(),\n        userAvatar: z.string().optional(),\n        status: z.string(),\n      }),\n    ),\n  }),\n\n  collaborator_left: z.object({\n    type: z.literal(\"collaborator_left\"),\n    collaborator: z.object({\n      userId: z.string(),\n      userName: z.string(),\n    }),\n    activeCollaborators: z.array(\n      z.object({\n        userId: z.string(),\n        userName: z.string(),\n        userAvatar: z.string().optional(),\n        status: z.string(),\n      }),\n    ),\n  }),\n\n  phase_updated: z.object({\n    type: z.literal(\"phase_updated\"),\n    eventId: z.string(),\n    newPhase: z.enum([\"preparation\", \"live\", \"break\", \"wrap_up\", \"ended\"]),\n    updatedBy: z.object({\n      userId: z.string(),\n      userName: z.string(),\n    }),\n    timestamp: z.string(),\n  }),\n\n  phase_change_error: z.object({\n    type: z.literal(\"phase_change_error\"),\n    eventId: z.string(),\n    error: z.string(),\n    code: z.string().optional(),\n  }),\n\n  coordination_event_broadcast: z.object({\n    type: z.literal(\"coordination_event_broadcast\"),\n    eventId: z.string(),\n    eventType: z.string(),\n    eventData: z.record(z.any()),\n    broadcastBy: z.object({\n      userId: z.string(),\n      userName: z.string(),\n    }),\n    timestamp: z.string(),\n  }),\n\n  collaborator_status_changed: z.object({\n    type: z.literal(\"collaborator_status_changed\"),\n    eventId: z.string(),\n    userId: z.string(),\n    statusUpdate: z.record(z.any()),\n    timestamp: z.string(),\n  }),\n\n  // Rate limiting messages\n  rate_limit_warning: z.object({\n    type: z.literal(\"rate_limit_warning\"),\n    message: z.string(),\n    remaining: z.number(),\n    resetTime: z.number(),\n  }),\n\n  // Authentication messages\n  auth_required: z.object({\n    type: z.literal(\"auth_required\"),\n    reason: z.string(),\n    expiry: z.number().optional(),\n  }),\n\n  auth_refreshed: z.object({\n    type: z.literal(\"auth_refreshed\"),\n    expiresAt: z.number(),\n  }),\n};\n\n// Union of all outgoing message schemas\nexport const outgoingWebSocketMessageSchema = z.discriminatedUnion(\"type\", [\n  outgoingMessageSchemas.error,\n  outgoingMessageSchemas.player_joined,\n  outgoingMessageSchemas.message,\n  outgoingMessageSchemas.game_action,\n  outgoingMessageSchemas.webrtc_offer,\n  outgoingMessageSchemas.webrtc_answer,\n  outgoingMessageSchemas.webrtc_ice_candidate,\n  outgoingMessageSchemas.camera_status,\n  outgoingMessageSchemas.mic_status,\n  outgoingMessageSchemas.collaborator_joined,\n  outgoingMessageSchemas.collaborator_left,\n  outgoingMessageSchemas.phase_updated,\n  outgoingMessageSchemas.phase_change_error,\n  outgoingMessageSchemas.coordination_event_broadcast,\n  outgoingMessageSchemas.collaborator_status_changed,\n  outgoingMessageSchemas.rate_limit_warning,\n  outgoingMessageSchemas.auth_required,\n  outgoingMessageSchemas.auth_refreshed,\n]);\n\nexport type OutgoingWebSocketMessage = z.infer<\n  typeof outgoingWebSocketMessageSchema\n>;\n\nexport interface ValidationResult {\n  success: boolean;\n  data?: any;\n  error?: string;\n  details?: any;\n}\n\nexport class WebSocketMessageValidator {\n  /**\n   * Validate incoming WebSocket message\n   */\n  validateIncoming(rawMessage: any): ValidationResult {\n    try {\n      const validationResult = websocketMessageSchema.safeParse(rawMessage);\n\n      if (!validationResult.success) {\n        logger.warn(\"Invalid incoming WebSocket message\", {\n          error: validationResult.error,\n          message: rawMessage,\n        });\n\n        return {\n          success: false,\n          error: \"Invalid message format\",\n          details: validationResult.error.format(),\n        };\n      }\n\n      return {\n        success: true,\n        data: validationResult.data,\n      };\n    } catch (error) {\n      logger.error(\"Error validating incoming WebSocket message\", error);\n      return {\n        success: false,\n        error: \"Validation error\",\n      };\n    }\n  }\n\n  /**\n   * Validate outgoing WebSocket message\n   */\n  validateOutgoing(message: any): ValidationResult {\n    try {\n      const validationResult =\n        outgoingWebSocketMessageSchema.safeParse(message);\n\n      if (!validationResult.success) {\n        logger.warn(\"Invalid outgoing WebSocket message\", {\n          error: validationResult.error,\n          messageType: message?.type,\n          message: message,\n        });\n\n        return {\n          success: false,\n          error: \"Invalid outgoing message format\",\n          details: validationResult.error.format(),\n        };\n      }\n\n      return {\n        success: true,\n        data: validationResult.data,\n      };\n    } catch (error) {\n      logger.error(\"Error validating outgoing WebSocket message\", error);\n      return {\n        success: false,\n        error: \"Validation error\",\n      };\n    }\n  }\n\n  /**\n   * Sanitize message content to prevent XSS and other security issues\n   */\n  sanitizeMessage(message: any): any {\n    if (typeof message !== \"object\" || message === null) {\n      return message;\n    }\n\n    const sanitized = { ...message };\n\n    // Sanitize string fields that might contain user input\n    const stringFields = [\"content\", \"message\", \"error\", \"name\", \"userName\"];\n\n    for (const field of stringFields) {\n      if (sanitized[field] && typeof sanitized[field] === \"string\") {\n        // Simple and secure approach: HTML entity encoding\n        sanitized[field] = sanitized[field]\n          .replace(/&/g, \"&amp;\")\n          .replace(/</g, \"&lt;\")\n          .replace(/>/g, \"&gt;\")\n          .replace(/\"/g, \"&quot;\")\n          .replace(/'/g, \"&#x27;\")\n          .replace(/\\//g, \"&#x2F;\");\n\n        // Length limiting for safety\n        if (sanitized[field].length > 10000) {\n          sanitized[field] = sanitized[field].substring(0, 10000);\n        }\n      }\n    }\n\n    // Recursively sanitize nested objects\n    for (const [key, value] of Object.entries(sanitized)) {\n      if (typeof value === \"object\" && value !== null) {\n        sanitized[key] = this.sanitizeMessage(value);\n      }\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * Create standardized error message\n   */\n  createErrorMessage(\n    error: string,\n    code?: string,\n    details?: any,\n  ): OutgoingWebSocketMessage {\n    return {\n      type: \"error\",\n      message: error,\n      ...(code && { code }),\n      ...(details && { details }),\n    };\n  }\n\n  /**\n   * Create rate limit warning message\n   */\n  createRateLimitWarning(\n    remaining: number,\n    resetTime: number,\n  ): OutgoingWebSocketMessage {\n    return {\n      type: \"rate_limit_warning\",\n      message: `Rate limit exceeded. ${remaining} requests remaining.`,\n      remaining,\n      resetTime,\n    };\n  }\n\n  /**\n   * Create authentication required message\n   */\n  createAuthRequiredMessage(\n    reason: string,\n    expiry?: number,\n  ): OutgoingWebSocketMessage {\n    return {\n      type: \"auth_required\",\n      reason,\n      ...(expiry && { expiry }),\n    };\n  }\n}\n\n// Export singleton instance\nexport const messageValidator = new WebSocketMessageValidator();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/utils/websocket-rate-limiter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/utils/websocket-server-enhanced.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":318,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":318,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8479,8482],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8479,8482],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":360,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":360,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9572,9575],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9572,9575],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":401,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":401,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10675,10678],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10675,10678],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":438,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":438,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11581,11584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11581,11584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":467,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":467,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12205,12208],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12205,12208],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":546,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":546,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14403,14406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14403,14406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":620,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":620,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16412,16415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16412,16415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":647,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":647,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17106,17109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17106,17109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":669,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":669,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17643,17646],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17643,17646],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { WebSocketServer, WebSocket } from \"ws\";\nimport { IncomingMessage, Server as HttpServer } from \"http\";\nimport { logger } from \"../logger\";\nimport { storage } from \"../storage\";\nimport { collaborativeStreaming } from \"../services/collaborative-streaming\";\nimport {\n  ExtendedWebSocket,\n  connectionManager,\n} from \"./websocket-connection-manager\";\nimport {\n  defaultRateLimiter,\n  highFrequencyRateLimiter,\n} from \"./websocket-rate-limiter\";\nimport {\n  messageValidator,\n  OutgoingWebSocketMessage,\n} from \"./websocket-message-validator\";\nimport { envValidator } from \"./websocket-env-validation\";\n\nexport class EnhancedWebSocketServer {\n  private wss: WebSocketServer;\n  private httpServer: HttpServer;\n  private isShuttingDown = false;\n\n  constructor(httpServer: HttpServer) {\n    this.httpServer = httpServer;\n    this.wss = new WebSocketServer({\n      server: httpServer,\n      path: \"/ws\",\n      maxPayload: 16 * 1024, // 16KB max message size\n    });\n\n    this.setupWebSocketServer();\n    this.setupGracefulShutdown();\n  }\n\n  private setupWebSocketServer(): void {\n    this.wss.on(\"connection\", async (ws: WebSocket, req: IncomingMessage) => {\n      if (this.isShuttingDown) {\n        ws.close(1012, \"Server is shutting down\");\n        return;\n      }\n\n      await this.handleConnection(ws as ExtendedWebSocket, req);\n    });\n\n    this.wss.on(\"error\", (error) => {\n      logger.error(\"WebSocket server error\", error);\n    });\n\n    logger.info(\"Enhanced WebSocket server initialized\", {\n      path: \"/ws\",\n      maxPayload: \"16KB\",\n    });\n  }\n\n  private async handleConnection(\n    ws: ExtendedWebSocket,\n    req: IncomingMessage,\n  ): Promise<void> {\n    logger.info(\"WebSocket connection attempt\", {\n      origin: req.headers.origin,\n      userAgent: req.headers[\"user-agent\"],\n    });\n\n    try {\n      // Validate environment and origin\n      const authResult = await this.authenticateConnection(ws, req);\n      if (!authResult.success) {\n        this.closeConnectionWithError(\n          ws,\n          authResult.error || \"Authentication failed\",\n          authResult.code,\n        );\n        return;\n      }\n\n      if (!authResult.userId) {\n        this.closeConnectionWithError(ws, \"User ID not found\", \"NO_USER_ID\");\n        return;\n      }\n\n      // Register connection with manager\n      const connectionId = connectionManager.registerConnection(\n        ws,\n        authResult.userId,\n        authResult.token,\n      );\n\n      logger.info(\"WebSocket connection established\", {\n        connectionId,\n        userId: authResult.userId,\n      });\n\n      // Set up message handling\n      this.setupMessageHandling(ws, connectionId);\n    } catch (error) {\n      logger.error(\"WebSocket connection setup failed\", error);\n      this.closeConnectionWithError(\n        ws,\n        \"Connection setup failed\",\n        \"SETUP_ERROR\",\n      );\n    }\n  }\n\n  private async authenticateConnection(\n    ws: WebSocket,\n    req: IncomingMessage,\n  ): Promise<{\n    success: boolean;\n    userId?: string;\n    token?: string;\n    error?: string;\n    code?: string;\n  }> {\n    // Validate environment configuration\n    const envValidation = envValidator.validateRequiredEnvironment();\n    if (!envValidation.valid) {\n      logger.error(\"WebSocket environment validation failed\", {\n        errors: envValidation.errors,\n      });\n      return {\n        success: false,\n        error: \"Server configuration error\",\n        code: \"CONFIG_ERROR\",\n      };\n    }\n\n    // Validate origin\n    const origin = req.headers.origin;\n    if (!origin) {\n      return {\n        success: false,\n        error: \"Origin header required\",\n        code: \"ORIGIN_REQUIRED\",\n      };\n    }\n\n    if (!envValidator.isOriginAllowed(origin)) {\n      logger.warn(\"WebSocket connection rejected - origin not allowed\", {\n        origin,\n        allowedOrigins: envValidator.validateAndGetConfig().allowedOrigins,\n      });\n      return {\n        success: false,\n        error: \"Origin not allowed\",\n        code: \"ORIGIN_NOT_ALLOWED\",\n      };\n    }\n\n    // Extract and validate session\n    const cookies = req.headers.cookie;\n    if (!cookies) {\n      return {\n        success: false,\n        error: \"Authentication required - no cookies\",\n        code: \"NO_COOKIES\",\n      };\n    }\n\n    try {\n      const authSessionUrl = envValidator.getAuthSessionUrl();\n      const response = await fetch(authSessionUrl, {\n        headers: { cookie: cookies },\n      });\n\n      if (!response.ok) {\n        logger.warn(\n          \"WebSocket authentication failed - session endpoint error\",\n          {\n            status: response.status,\n            statusText: response.statusText,\n          },\n        );\n        return {\n          success: false,\n          error: \"Session validation failed\",\n          code: \"SESSION_INVALID\",\n        };\n      }\n\n      const session = await response.json();\n\n      if (!session?.user?.id) {\n        return {\n          success: false,\n          error: \"No valid user session\",\n          code: \"NO_USER_SESSION\",\n        };\n      }\n\n      return {\n        success: true,\n        userId: session.user.id,\n        token: cookies, // Store cookies as token for now\n      };\n    } catch (error) {\n      logger.error(\"WebSocket authentication error\", error);\n      return {\n        success: false,\n        error: \"Authentication error\",\n        code: \"AUTH_ERROR\",\n      };\n    }\n  }\n\n  private setupMessageHandling(\n    ws: ExtendedWebSocket,\n    connectionId: string,\n  ): void {\n    ws.on(\"message\", async (data: Buffer) => {\n      try {\n        // Update connection activity\n        connectionManager.updateActivity(connectionId);\n\n        // Check for auth expiration\n        if (connectionManager.isAuthExpired(connectionId)) {\n          this.sendMessage(\n            ws,\n            messageValidator.createAuthRequiredMessage(\n              \"Authentication expired, please reconnect\",\n            ),\n          );\n          ws.close(1008, \"Authentication expired\");\n          return;\n        }\n\n        // Parse and validate incoming message\n        const rawMessage = JSON.parse(data.toString());\n        const validationResult = messageValidator.validateIncoming(rawMessage);\n\n        if (!validationResult.success) {\n          this.sendMessage(\n            ws,\n            messageValidator.createErrorMessage(\n              validationResult.error || \"Validation failed\",\n              \"VALIDATION_ERROR\",\n              validationResult.details,\n            ),\n          );\n          return;\n        }\n\n        const message = validationResult.data;\n\n        // Apply rate limiting\n        const rateLimiter = this.selectRateLimiter(message.type);\n        if (!rateLimiter.isAllowed(connectionId, message.type)) {\n          const status = rateLimiter.getStatus(connectionId);\n          this.sendMessage(\n            ws,\n            messageValidator.createRateLimitWarning(\n              status.remaining,\n              status.resetTime,\n            ),\n          );\n          return;\n        }\n\n        // Process the message\n        await this.processMessage(ws, connectionId, message);\n      } catch (error) {\n        logger.error(\"Error processing WebSocket message\", error, {\n          connectionId,\n          userId: ws.userId,\n        });\n\n        this.sendMessage(\n          ws,\n          messageValidator.createErrorMessage(\n            \"Message processing failed\",\n            \"PROCESSING_ERROR\",\n          ),\n        );\n      }\n    });\n\n    ws.on(\"close\", (code: number, reason: Buffer) => {\n      logger.info(\"WebSocket connection closed\", {\n        connectionId,\n        userId: ws.userId,\n        code,\n        reason: reason.toString(),\n      });\n      connectionManager.removeConnection(connectionId);\n    });\n\n    ws.on(\"error\", (error: Error) => {\n      logger.error(\"WebSocket connection error\", error, {\n        connectionId,\n        userId: ws.userId,\n      });\n    });\n\n    // Handle ping/pong for connection health\n    ws.on(\"pong\", () => {\n      connectionManager.updateActivity(connectionId);\n    });\n  }\n\n  private selectRateLimiter(messageType: string) {\n    // Use high-frequency rate limiter for certain message types\n    const highFrequencyTypes = [\n      \"game_action\",\n      \"coordination_event\",\n      \"webrtc_ice_candidate\",\n    ];\n\n    return highFrequencyTypes.includes(messageType)\n      ? highFrequencyRateLimiter\n      : defaultRateLimiter;\n  }\n\n  private async processMessage(\n    ws: ExtendedWebSocket,\n    connectionId: string,\n    message: any,\n  ): Promise<void> {\n    switch (message.type) {\n      case \"join_room\":\n        await this.handleJoinRoom(ws, connectionId, message);\n        break;\n\n      case \"message\":\n        await this.handleChatMessage(ws, connectionId, message);\n        break;\n\n      case \"game_action\":\n        await this.handleGameAction(ws, connectionId, message);\n        break;\n\n      case \"join_collab_stream\":\n        await this.handleJoinCollabStream(ws, connectionId, message);\n        break;\n\n      case \"phase_change\":\n        await this.handlePhaseChange(ws, connectionId, message);\n        break;\n\n      case \"coordination_event\":\n        await this.handleCoordinationEvent(ws, connectionId, message);\n        break;\n\n      case \"collaborator_status_update\":\n        await this.handleCollaboratorStatusUpdate(ws, connectionId, message);\n        break;\n\n      default:\n        logger.warn(\"Unknown WebSocket message type\", {\n          type: message.type,\n          connectionId,\n        });\n    }\n  }\n\n  private async handleJoinRoom(\n    ws: ExtendedWebSocket,\n    connectionId: string,\n    message: any,\n  ): Promise<void> {\n    const { sessionId, user } = message;\n\n    // Verify user matches authenticated user\n    if (user.id !== ws.userId) {\n      this.sendMessage(\n        ws,\n        messageValidator.createErrorMessage(\n          \"User ID mismatch\",\n          \"AUTH_MISMATCH\",\n        ),\n      );\n      return;\n    }\n\n    connectionManager.joinGameRoom(connectionId, sessionId);\n\n    // Get current room members\n    const roomConnections = connectionManager.getGameRoomConnections(sessionId);\n    const players = roomConnections\n      .filter((conn) => conn.userId && conn.userName)\n      .map((conn) => ({\n        id: conn.userId as string,\n        name: conn.userName as string,\n        avatar: conn.userAvatar,\n      }));\n\n    const joinMessage = {\n      type: \"player_joined\" as const,\n      player: { id: user.id, name: user.name, avatar: user.avatar },\n      players,\n    };\n\n    // Broadcast to all players in room\n    connectionManager.broadcastToGameRoom(sessionId, joinMessage);\n  }\n\n  private async handleChatMessage(\n    ws: ExtendedWebSocket,\n    connectionId: string,\n    message: any,\n  ): Promise<void> {\n    const { sessionId, user, content } = message;\n\n    if (user.id !== ws.userId) {\n      this.sendMessage(\n        ws,\n        messageValidator.createErrorMessage(\n          \"User ID mismatch\",\n          \"AUTH_MISMATCH\",\n        ),\n      );\n      return;\n    }\n\n    const chatMessage = {\n      type: \"message\" as const,\n      message: {\n        id: Date.now().toString(),\n        senderId: user.id,\n        sender: {\n          firstName: user.name.split(\" \")[0],\n          email: user.name,\n          profileImageUrl: user.avatar,\n        },\n        content: messageValidator.sanitizeMessage({ content }).content,\n        timestamp: new Date().toISOString(),\n        type: \"chat\" as const,\n      },\n    };\n\n    connectionManager.broadcastToGameRoom(sessionId, chatMessage);\n  }\n\n  private async handleGameAction(\n    ws: ExtendedWebSocket,\n    connectionId: string,\n    message: any,\n  ): Promise<void> {\n    const { sessionId, action, user, data } = message;\n\n    if (user.id !== ws.userId) {\n      this.sendMessage(\n        ws,\n        messageValidator.createErrorMessage(\n          \"User ID mismatch\",\n          \"AUTH_MISMATCH\",\n        ),\n      );\n      return;\n    }\n\n    const actionMessage = {\n      type: \"game_action\" as const,\n      action,\n      player: user.name,\n      result: data.result,\n      data,\n    };\n\n    connectionManager.broadcastToGameRoom(sessionId, actionMessage);\n  }\n\n  private async handleJoinCollabStream(\n    ws: ExtendedWebSocket,\n    connectionId: string,\n    message: any,\n  ): Promise<void> {\n    const { eventId } = message;\n\n    try {\n      // Validate event access\n      const event = await storage.getCollaborativeStreamEvent(eventId);\n      if (!event) {\n        this.sendMessage(\n          ws,\n          messageValidator.createErrorMessage(\n            \"Event not found\",\n            \"EVENT_NOT_FOUND\",\n          ),\n        );\n        return;\n      }\n\n      const collaborators = await storage.getStreamCollaborators(eventId);\n      const userCollaborator = collaborators.find(\n        (c) => c.userId === ws.userId,\n      );\n      if (!userCollaborator) {\n        this.sendMessage(\n          ws,\n          messageValidator.createErrorMessage(\n            \"Access denied - not a collaborator\",\n            \"ACCESS_DENIED\",\n          ),\n        );\n        return;\n      }\n\n      connectionManager.joinCollaborativeRoom(connectionId, eventId);\n\n      // Get active collaborators\n      const roomConnections =\n        connectionManager.getCollaborativeRoomConnections(eventId);\n      const activeCollaborators = roomConnections\n        .filter((conn) => conn.userId && conn.userName)\n        .map((conn) => ({\n          userId: conn.userId as string,\n          userName: conn.userName as string,\n          userAvatar: conn.userAvatar,\n          status: \"connected\",\n        }));\n\n      if (!ws.userId || !ws.userName) {\n        logger.error(\"WebSocket missing userId or userName for collaboration\");\n        return;\n      }\n\n      const joinMessage = {\n        type: \"collaborator_joined\" as const,\n        collaborator: {\n          userId: ws.userId,\n          userName: ws.userName,\n          userAvatar: ws.userAvatar,\n          role: userCollaborator.role,\n        },\n        activeCollaborators,\n      };\n\n      connectionManager.broadcastToCollaborativeRoom(eventId, joinMessage);\n    } catch (error) {\n      logger.error(\"Failed to handle collab stream join\", error);\n      this.sendMessage(\n        ws,\n        messageValidator.createErrorMessage(\n          \"Failed to join collaborative stream\",\n          \"JOIN_FAILED\",\n        ),\n      );\n    }\n  }\n\n  private async handlePhaseChange(\n    ws: ExtendedWebSocket,\n    connectionId: string,\n    message: any,\n  ): Promise<void> {\n    const { eventId, newPhase } = message;\n\n    try {\n      // Verify authorization\n      const event = await storage.getCollaborativeStreamEvent(eventId);\n      if (!event) {\n        this.sendMessage(\n          ws,\n          messageValidator.createErrorMessage(\n            \"Event not found\",\n            \"EVENT_NOT_FOUND\",\n          ),\n        );\n        return;\n      }\n\n      const collaborators = await storage.getStreamCollaborators(eventId);\n      const userCollaborator = collaborators.find(\n        (c) => c.userId === ws.userId,\n      );\n\n      const isHost = event.organizerId === ws.userId; // Note: schema uses organizerId not creatorId\n      const isCoHost = userCollaborator?.role === \"co_host\";\n\n      if (!isHost && !isCoHost) {\n        this.sendMessage(ws, {\n          type: \"phase_change_error\",\n          eventId,\n          error: \"Access denied - only hosts and co-hosts can change phases\",\n          code: \"ACCESS_DENIED\",\n        });\n        return;\n      }\n\n      if (!ws.userId || !ws.userName) {\n        logger.error(\"WebSocket missing userId or userName for phase update\");\n        return;\n      }\n\n      // Update phase in service\n      await collaborativeStreaming.updateCoordinationPhase(\n        eventId,\n        newPhase,\n        ws.userId,\n      );\n\n      const phaseMessage = {\n        type: \"phase_updated\" as const,\n        eventId,\n        newPhase,\n        updatedBy: {\n          userId: ws.userId,\n          userName: ws.userName,\n        },\n        timestamp: new Date().toISOString(),\n      };\n\n      connectionManager.broadcastToCollaborativeRoom(eventId, phaseMessage);\n    } catch (error) {\n      logger.error(\"Failed to handle phase change\", error);\n      this.sendMessage(ws, {\n        type: \"phase_change_error\",\n        eventId,\n        error: \"Failed to change phase\",\n        code: \"PHASE_CHANGE_FAILED\",\n      });\n    }\n  }\n\n  private async handleCoordinationEvent(\n    ws: ExtendedWebSocket,\n    connectionId: string,\n    message: any,\n  ): Promise<void> {\n    const { eventId, eventType, eventData } = message;\n\n    if (!ws.userId || !ws.userName) {\n      logger.error(\"WebSocket missing userId or userName for coordination event\");\n      return;\n    }\n\n    const broadcastMessage = {\n      type: \"coordination_event_broadcast\" as const,\n      eventId,\n      eventType,\n      eventData,\n      broadcastBy: {\n        userId: ws.userId,\n        userName: ws.userName,\n      },\n      timestamp: new Date().toISOString(),\n    };\n\n    connectionManager.broadcastToCollaborativeRoom(eventId, broadcastMessage);\n  }\n\n  private async handleCollaboratorStatusUpdate(\n    ws: ExtendedWebSocket,\n    connectionId: string,\n    message: any,\n  ): Promise<void> {\n    const { eventId, statusUpdate } = message;\n\n    if (!ws.userId) {\n      logger.error(\"WebSocket missing userId for status update\");\n      return;\n    }\n\n    const statusMessage = {\n      type: \"collaborator_status_changed\" as const,\n      eventId,\n      userId: ws.userId,\n      statusUpdate,\n      timestamp: new Date().toISOString(),\n    };\n\n    connectionManager.broadcastToCollaborativeRoom(eventId, statusMessage);\n  }\n\n  private sendMessage(\n    ws: WebSocket,\n    message: OutgoingWebSocketMessage | any,\n  ): void {\n    if (ws.readyState !== WebSocket.OPEN) {\n      return;\n    }\n\n    try {\n      const validation = messageValidator.validateOutgoing(message);\n      if (!validation.success) {\n        logger.error(\"Attempted to send invalid outgoing message\", {\n          error: validation.error,\n          messageType: message?.type,\n        });\n        return;\n      }\n\n      ws.send(JSON.stringify(validation.data));\n    } catch (error) {\n      logger.error(\"Failed to send WebSocket message\", error);\n    }\n  }\n\n  private closeConnectionWithError(\n    ws: WebSocket,\n    error: string,\n    code?: string,\n  ): void {\n    try {\n      this.sendMessage(ws, messageValidator.createErrorMessage(error, code));\n      ws.close(1008, error);\n    } catch (closeError) {\n      logger.error(\"Failed to close WebSocket connection cleanly\", closeError);\n      ws.terminate();\n    }\n  }\n\n  private setupGracefulShutdown(): void {\n    process.on(\"SIGTERM\", () => this.gracefulShutdown());\n    process.on(\"SIGINT\", () => this.gracefulShutdown());\n  }\n\n  private gracefulShutdown(): void {\n    if (this.isShuttingDown) {\n      return;\n    }\n\n    this.isShuttingDown = true;\n    logger.info(\"Starting WebSocket server graceful shutdown\");\n\n    // Close all WebSocket connections\n    this.wss.clients.forEach((ws) => {\n      ws.close(1012, \"Server is shutting down\");\n    });\n\n    // Close the WebSocket server\n    this.wss.close(() => {\n      logger.info(\"WebSocket server closed\");\n    });\n  }\n\n  getStats() {\n    return {\n      connections: this.wss.clients.size,\n      connectionManager: connectionManager.getStats(),\n      rateLimiter: {\n        default: defaultRateLimiter.getStats(),\n        highFrequency: highFrequencyRateLimiter.getStats(),\n      },\n    };\n  }\n}\n\nexport default EnhancedWebSocketServer;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/reimagined-guacamole/reimagined-guacamole/server/vite.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]