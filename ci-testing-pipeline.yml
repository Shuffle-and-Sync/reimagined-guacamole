name: CI Testing Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'fix/**'
  pull_request:
    branches:
      - main
      - develop

# Cancel in-progress runs when a new workflow with the same ref name is queued
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  NPM_CONFIG_LEGACY_PEER_DEPS: true

jobs:
  # Fast feedback - runs first
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run check

  # Unit tests - fast, isolated
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: lint-and-typecheck

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run unit tests
        run: npm run test:unit -- --coverage --coverageReporters=json --coverageReporters=text
        env:
          NODE_ENV: test

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-coverage
          path: coverage/
          retention-days: 7

  # Integration tests - database and service interactions
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint-and-typecheck

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run integration tests
        run: npm run test:features -- --coverage --coverageReporters=json --coverageReporters=text
        env:
          NODE_ENV: test
          DATABASE_URL: ':memory:'

      - name: Upload integration test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-coverage
          path: coverage/
          retention-days: 7

  # Security tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: lint-and-typecheck

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run security tests
        run: npm run test:security
        env:
          NODE_ENV: test

      - name: Run npm audit
        run: npm audit --production --audit-level=moderate
        continue-on-error: true

  # Full test suite with coverage
  full-coverage:
    name: Full Test Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [unit-tests, integration-tests, security-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run full test suite with coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: ':memory:'

      - name: Generate coverage report
        run: |
          echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          npm test -- --coverage --coverageReporters=text 2>&1 | tail -20 >> $GITHUB_STEP_SUMMARY || true
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: github.event_name == 'pull_request'
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-shuffle-sync
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

      - name: Check coverage thresholds
        run: |
          # Extract coverage percentages from Jest output
          COVERAGE_OUTPUT=$(npm run test:coverage 2>&1)
          
          # Check if coverage meets thresholds (80% minimum)
          if echo "$COVERAGE_OUTPUT" | grep -q "Coverage threshold"; then
            echo "❌ Coverage threshold not met"
            echo "Please ensure new code has at least 80% test coverage"
            exit 1
          else
            echo "✅ Coverage thresholds met"
          fi

  # PR-specific checks
  pr-coverage-check:
    name: PR Coverage Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'
    needs: full-coverage

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Get base branch coverage
        run: |
          git checkout ${{ github.base_ref }}
          npm ci --legacy-peer-deps
          npm run test:coverage 2>&1 | grep -A 5 "Coverage summary" > base-coverage.txt || echo "No base coverage" > base-coverage.txt

      - name: Get PR branch coverage
        run: |
          git checkout ${{ github.head_ref }}
          npm ci --legacy-peer-deps
          npm run test:coverage 2>&1 | grep -A 5 "Coverage summary" > pr-coverage.txt || echo "No PR coverage" > pr-coverage.txt

      - name: Compare coverage
        run: |
          echo "## Coverage Comparison" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Base Branch (${{ github.base_ref }})" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat base-coverage.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### PR Branch (${{ github.head_ref }})" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat pr-coverage.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Build verification
  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [unit-tests, integration-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build application
        run: npm run build

      - name: Verify build artifacts
        run: npm run build:verify

  # Test results summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [lint-and-typecheck, unit-tests, integration-tests, security-tests, full-coverage, build-check]

    steps:
      - name: Check test results
        run: |
          echo "## Test Suite Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Type Check | ${{ needs.lint-and-typecheck.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Full Coverage | ${{ needs.full-coverage.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Check | ${{ needs.build-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY

      - name: Determine overall status
        run: |
          if [[ "${{ needs.lint-and-typecheck.result }}" == "success" ]] && \
             [[ "${{ needs.unit-tests.result }}" == "success" ]] && \
             [[ "${{ needs.integration-tests.result }}" == "success" ]] && \
             [[ "${{ needs.security-tests.result }}" == "success" ]] && \
             [[ "${{ needs.full-coverage.result }}" == "success" ]] && \
             [[ "${{ needs.build-check.result }}" == "success" ]]; then
            echo "✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "❌ Some tests failed. Please review the results above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
